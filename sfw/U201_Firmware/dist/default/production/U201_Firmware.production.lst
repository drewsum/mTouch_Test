

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 18:34:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.45 (B)
   123                           ; Generated 30/01/2018 GMT
   124                           ; 
   125                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18LF67K40 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataCOMRAM
   158  0124F8                     __pidataCOMRAM:
   159                           	opt stack 0
   160                           
   161                           ;initializer for _callback_notPressed
   162  0124F8  14                 	db	low _Button_DefaultCallback
   163  0124F9  25                 	db	high _Button_DefaultCallback
   164  0124FA  01                 	db	low (_Button_DefaultCallback shr (0+16))
   165                           
   166                           ;initializer for _callback_pressed
   167  0124FB  14                 	db	low _Button_DefaultCallback
   168  0124FC  25                 	db	high _Button_DefaultCallback
   169  0124FD  01                 	db	low (_Button_DefaultCallback shr (0+16))
   170                           
   171                           ;initializer for _callback_sampled
   172  0124FE  12                 	db	low _Sensor_DefaultCallback
   173  0124FF  25                 	db	high _Sensor_DefaultCallback
   174  012500  01                 	db	low (_Sensor_DefaultCallback shr (0+16))
   175                           
   176                           	psect	idataBANK0
   177  0124B6                     __pidataBANK0:
   178                           	opt stack 0
   179                           
   180                           ;initializer for _Button_StateMachine
   181  0124B6  2A                 	db	low _Button_State_Initializing
   182  0124B7  13                 	db	high _Button_State_Initializing
   183  0124B8  01                 	db	low (_Button_State_Initializing shr (0+16))
   184  0124B9  E6                 	db	low _Button_State_NotPressed
   185  0124BA  07                 	db	high _Button_State_NotPressed
   186  0124BB  01                 	db	low (_Button_State_NotPressed shr (0+16))
   187  0124BC  54                 	db	low _Button_State_Pressed
   188  0124BD  11                 	db	high _Button_State_Pressed
   189  0124BE  01                 	db	low (_Button_State_Pressed shr (0+16))
   190                           
   191                           ;initializer for _freq_hop
   192  0124BF  00                 	db	0
   193  0124C0  3C                 	db	60
   194  0124C1  78                 	db	120
   195                           
   196                           	psect	mediumconst
   197  00FBCA                     __pmediumconst:
   198                           	opt stack 0
   199  00FBCA  00                 	db	0
   200  00FBCB                     _dpowers:
   201                           	opt stack 0
   202  00FBCB  0001               	dw	1
   203  00FBCD  000A               	dw	10
   204  00FBCF  0064               	dw	100
   205  00FBD1  03E8               	dw	1000
   206  00FBD3  2710               	dw	10000
   207  00FBD5                     __end_of_dpowers:
   208                           	opt stack 0
   209  00FBD5                     _mtouch_button_init:
   210                           	opt stack 0
   211  00FBD5  00                 	db	0
   212  00FBD6  00                 	db	0
   213  00FBD7  00                 	db	0
   214  00FBD8  0000               	dw	0
   215  00FBDA  0000               	dw	0
   216  00FBDC  0000               	dw	0
   217  00FBDE  00                 	db	0
   218  00FBDF  0000               	dw	0
   219  00FBE1  0000               	dw	0
   220  00FBE3  64                 	db	100
   221  00FBE4  01                 	db	1
   222  00FBE5  01                 	db	1
   223  00FBE6  01                 	db	1
   224  00FBE7  00                 	db	0
   225  00FBE8  0000               	dw	0
   226  00FBEA  0000               	dw	0
   227  00FBEC  0000               	dw	0
   228  00FBEE  00                 	db	0
   229  00FBEF  0000               	dw	0
   230  00FBF1  0000               	dw	0
   231  00FBF3  64                 	db	100
   232  00FBF4  01                 	db	1
   233  00FBF5  02                 	db	2
   234  00FBF6  02                 	db	2
   235  00FBF7  00                 	db	0
   236  00FBF8  0000               	dw	0
   237  00FBFA  0000               	dw	0
   238  00FBFC  0000               	dw	0
   239  00FBFE  00                 	db	0
   240  00FBFF  0000               	dw	0
   241  00FC01  0000               	dw	0
   242  00FC03  64                 	db	100
   243  00FC04  01                 	db	1
   244  00FC05  03                 	db	3
   245  00FC06  03                 	db	3
   246  00FC07  00                 	db	0
   247  00FC08  0000               	dw	0
   248  00FC0A  0000               	dw	0
   249  00FC0C  0000               	dw	0
   250  00FC0E  00                 	db	0
   251  00FC0F  0000               	dw	0
   252  00FC11  0000               	dw	0
   253  00FC13  64                 	db	100
   254  00FC14  01                 	db	1
   255  00FC15  04                 	db	4
   256  00FC16  04                 	db	4
   257  00FC17  00                 	db	0
   258  00FC18  0000               	dw	0
   259  00FC1A  0000               	dw	0
   260  00FC1C  0000               	dw	0
   261  00FC1E  00                 	db	0
   262  00FC1F  0000               	dw	0
   263  00FC21  0000               	dw	0
   264  00FC23  64                 	db	100
   265  00FC24  01                 	db	1
   266  00FC25                     __end_of_mtouch_button_init:
   267                           	opt stack 0
   268  00FC25                     _mtouch_sensor_init:
   269                           	opt stack 0
   270  00FC25  00                 	db	0
   271  00FC26  22                 	db	34
   272  00FC27  50                 	db	80
   273  00FC28  28                 	db	40
   274  00FC29  20                 	db	32
   275  00FC2A  00                 	db	0
   276  00FC2B  0000               	dw	0
   277  00FC2D  00                 	db	0
   278  00FC2E  01                 	db	1
   279  00FC2F  23                 	db	35
   280  00FC30  50                 	db	80
   281  00FC31  28                 	db	40
   282  00FC32  20                 	db	32
   283  00FC33  00                 	db	0
   284  00FC34  0000               	dw	0
   285  00FC36  00                 	db	0
   286  00FC37  02                 	db	2
   287  00FC38  24                 	db	36
   288  00FC39  50                 	db	80
   289  00FC3A  28                 	db	40
   290  00FC3B  20                 	db	32
   291  00FC3C  00                 	db	0
   292  00FC3D  0000               	dw	0
   293  00FC3F  00                 	db	0
   294  00FC40  03                 	db	3
   295  00FC41  25                 	db	37
   296  00FC42  50                 	db	80
   297  00FC43  28                 	db	40
   298  00FC44  20                 	db	32
   299  00FC45  00                 	db	0
   300  00FC46  0000               	dw	0
   301  00FC48  00                 	db	0
   302  00FC49  04                 	db	4
   303  00FC4A  26                 	db	38
   304  00FC4B  50                 	db	80
   305  00FC4C  28                 	db	40
   306  00FC4D  20                 	db	32
   307  00FC4E  00                 	db	0
   308  00FC4F  0000               	dw	0
   309  00FC51  00                 	db	0
   310  00FC52                     __end_of_mtouch_sensor_init:
   311                           	opt stack 0
   312  00FC52                     STR_4:
   313  00FC52  20                 	db	32
   314  00FC53  20                 	db	32
   315  00FC54  20                 	db	32
   316  00FC55  20                 	db	32
   317  00FC56  42                 	db	66	;'B'
   318  00FC57  6F                 	db	111	;'o'
   319  00FC58  6F                 	db	111	;'o'
   320  00FC59  74                 	db	116	;'t'
   321  00FC5A  20                 	db	32
   322  00FC5B  63                 	db	99	;'c'
   323  00FC5C  6F                 	db	111	;'o'
   324  00FC5D  6D                 	db	109	;'m'
   325  00FC5E  70                 	db	112	;'p'
   326  00FC5F  6C                 	db	108	;'l'
   327  00FC60  65                 	db	101	;'e'
   328  00FC61  74                 	db	116	;'t'
   329  00FC62  65                 	db	101	;'e'
   330  00FC63  0A                 	db	10
   331  00FC64  0D                 	db	13
   332  00FC65  20                 	db	32
   333  00FC66  20                 	db	32
   334  00FC67  20                 	db	32
   335  00FC68  50                 	db	80	;'P'
   336  00FC69  49                 	db	73	;'I'
   337  00FC6A  43                 	db	67	;'C'
   338  00FC6B  31                 	db	49	;'1'
   339  00FC6C  38                 	db	56	;'8'
   340  00FC6D  46                 	db	70	;'F'
   341  00FC6E  36                 	db	54	;'6'
   342  00FC6F  37                 	db	55	;'7'
   343  00FC70  4B                 	db	75	;'K'
   344  00FC71  34                 	db	52	;'4'
   345  00FC72  30                 	db	48	;'0'
   346  00FC73  20                 	db	32
   347  00FC74  6D                 	db	109	;'m'
   348  00FC75  54                 	db	84	;'T'
   349  00FC76  6F                 	db	111	;'o'
   350  00FC77  75                 	db	117	;'u'
   351  00FC78  63                 	db	99	;'c'
   352  00FC79  68                 	db	104	;'h'
   353  00FC7A  20                 	db	32
   354  00FC7B  54                 	db	84	;'T'
   355  00FC7C  65                 	db	101	;'e'
   356  00FC7D  73                 	db	115	;'s'
   357  00FC7E  74                 	db	116	;'t'
   358  00FC7F  20                 	db	32
   359  00FC80  42                 	db	66	;'B'
   360  00FC81  6F                 	db	111	;'o'
   361  00FC82  61                 	db	97	;'a'
   362  00FC83  72                 	db	114	;'r'
   363  00FC84  64                 	db	100	;'d'
   364  00FC85  0A                 	db	10
   365  00FC86  0D                 	db	13
   366  00FC87  20                 	db	32
   367  00FC88  20                 	db	32
   368  00FC89  20                 	db	32
   369  00FC8A  45                 	db	69	;'E'
   370  00FC8B  76                 	db	118	;'v'
   371  00FC8C  61                 	db	97	;'a'
   372  00FC8D  6C                 	db	108	;'l'
   373  00FC8E  75                 	db	117	;'u'
   374  00FC8F  61                 	db	97	;'a'
   375  00FC90  74                 	db	116	;'t'
   376  00FC91  65                 	db	101	;'e'
   377  00FC92  73                 	db	115	;'s'
   378  00FC93  20                 	db	32
   379  00FC94  74                 	db	116	;'t'
   380  00FC95  68                 	db	104	;'h'
   381  00FC96  65                 	db	101	;'e'
   382  00FC97  20                 	db	32
   383  00FC98  6D                 	db	109	;'m'
   384  00FC99  54                 	db	84	;'T'
   385  00FC9A  6F                 	db	111	;'o'
   386  00FC9B  75                 	db	117	;'u'
   387  00FC9C  63                 	db	99	;'c'
   388  00FC9D  68                 	db	104	;'h'
   389  00FC9E  20                 	db	32
   390  00FC9F  63                 	db	99	;'c'
   391  00FCA0  61                 	db	97	;'a'
   392  00FCA1  70                 	db	112	;'p'
   393  00FCA2  61                 	db	97	;'a'
   394  00FCA3  63                 	db	99	;'c'
   395  00FCA4  69                 	db	105	;'i'
   396  00FCA5  74                 	db	116	;'t'
   397  00FCA6  69                 	db	105	;'i'
   398  00FCA7  76                 	db	118	;'v'
   399  00FCA8  65                 	db	101	;'e'
   400  00FCA9  20                 	db	32
   401  00FCAA  74                 	db	116	;'t'
   402  00FCAB  6F                 	db	111	;'o'
   403  00FCAC  75                 	db	117	;'u'
   404  00FCAD  63                 	db	99	;'c'
   405  00FCAE  68                 	db	104	;'h'
   406  00FCAF  20                 	db	32
   407  00FCB0  6C                 	db	108	;'l'
   408  00FCB1  69                 	db	105	;'i'
   409  00FCB2  62                 	db	98	;'b'
   410  00FCB3  72                 	db	114	;'r'
   411  00FCB4  61                 	db	97	;'a'
   412  00FCB5  72                 	db	114	;'r'
   413  00FCB6  79                 	db	121	;'y'
   414  00FCB7  20                 	db	32
   415  00FCB8  64                 	db	100	;'d'
   416  00FCB9  69                 	db	105	;'i'
   417  00FCBA  73                 	db	115	;'s'
   418  00FCBB  74                 	db	116	;'t'
   419  00FCBC  72                 	db	114	;'r'
   420  00FCBD  69                 	db	105	;'i'
   421  00FCBE  62                 	db	98	;'b'
   422  00FCBF  75                 	db	117	;'u'
   423  00FCC0  74                 	db	116	;'t'
   424  00FCC1  65                 	db	101	;'e'
   425  00FCC2  64                 	db	100	;'d'
   426  00FCC3  20                 	db	32
   427  00FCC4  62                 	db	98	;'b'
   428  00FCC5  79                 	db	121	;'y'
   429  00FCC6  20                 	db	32
   430  00FCC7  4D                 	db	77	;'M'
   431  00FCC8  69                 	db	105	;'i'
   432  00FCC9  63                 	db	99	;'c'
   433  00FCCA  72                 	db	114	;'r'
   434  00FCCB  6F                 	db	111	;'o'
   435  00FCCC  63                 	db	99	;'c'
   436  00FCCD  68                 	db	104	;'h'
   437  00FCCE  69                 	db	105	;'i'
   438  00FCCF  70                 	db	112	;'p'
   439  00FCD0  0A                 	db	10
   440  00FCD1  0D                 	db	13
   441  00FCD2  20                 	db	32
   442  00FCD3  20                 	db	32
   443  00FCD4  20                 	db	32
   444  00FCD5  53                 	db	83	;'S'
   445  00FCD6  65                 	db	101	;'e'
   446  00FCD7  74                 	db	116	;'t'
   447  00FCD8  73                 	db	115	;'s'
   448  00FCD9  20                 	db	32
   449  00FCDA  74                 	db	116	;'t'
   450  00FCDB  68                 	db	104	;'h'
   451  00FCDC  65                 	db	101	;'e'
   452  00FCDD  20                 	db	32
   453  00FCDE  73                 	db	115	;'s'
   454  00FCDF  74                 	db	116	;'t'
   455  00FCE0  61                 	db	97	;'a'
   456  00FCE1  74                 	db	116	;'t'
   457  00FCE2  65                 	db	101	;'e'
   458  00FCE3  20                 	db	32
   459  00FCE4  6F                 	db	111	;'o'
   460  00FCE5  66                 	db	102	;'f'
   461  00FCE6  20                 	db	32
   462  00FCE7  66                 	db	102	;'f'
   463  00FCE8  69                 	db	105	;'i'
   464  00FCE9  76                 	db	118	;'v'
   465  00FCEA  65                 	db	101	;'e'
   466  00FCEB  20                 	db	32
   467  00FCEC  4C                 	db	76	;'L'
   468  00FCED  45                 	db	69	;'E'
   469  00FCEE  44                 	db	68	;'D'
   470  00FCEF  73                 	db	115	;'s'
   471  00FCF0  20                 	db	32
   472  00FCF1  62                 	db	98	;'b'
   473  00FCF2  61                 	db	97	;'a'
   474  00FCF3  73                 	db	115	;'s'
   475  00FCF4  65                 	db	101	;'e'
   476  00FCF5  64                 	db	100	;'d'
   477  00FCF6  20                 	db	32
   478  00FCF7  6F                 	db	111	;'o'
   479  00FCF8  6E                 	db	110	;'n'
   480  00FCF9  20                 	db	32
   481  00FCFA  6D                 	db	109	;'m'
   482  00FCFB  54                 	db	84	;'T'
   483  00FCFC  6F                 	db	111	;'o'
   484  00FCFD  75                 	db	117	;'u'
   485  00FCFE  63                 	db	99	;'c'
   486  00FCFF  68                 	db	104	;'h'
   487  00FD00  20                 	db	32
   488  00FD01  63                 	db	99	;'c'
   489  00FD02  61                 	db	97	;'a'
   490  00FD03  70                 	db	112	;'p'
   491  00FD04  61                 	db	97	;'a'
   492  00FD05  63                 	db	99	;'c'
   493  00FD06  69                 	db	105	;'i'
   494  00FD07  74                 	db	116	;'t'
   495  00FD08  69                 	db	105	;'i'
   496  00FD09  76                 	db	118	;'v'
   497  00FD0A  65                 	db	101	;'e'
   498  00FD0B  20                 	db	32
   499  00FD0C  70                 	db	112	;'p'
   500  00FD0D  75                 	db	117	;'u'
   501  00FD0E  73                 	db	115	;'s'
   502  00FD0F  68                 	db	104	;'h'
   503  00FD10  62                 	db	98	;'b'
   504  00FD11  75                 	db	117	;'u'
   505  00FD12  74                 	db	116	;'t'
   506  00FD13  74                 	db	116	;'t'
   507  00FD14  6F                 	db	111	;'o'
   508  00FD15  6E                 	db	110	;'n'
   509  00FD16  73                 	db	115	;'s'
   510  00FD17  0A                 	db	10
   511  00FD18  0D                 	db	13
   512  00FD19  20                 	db	32
   513  00FD1A  20                 	db	32
   514  00FD1B  20                 	db	32
   515  00FD1C  42                 	db	66	;'B'
   516  00FD1D  61                 	db	97	;'a'
   517  00FD1E  75                 	db	117	;'u'
   518  00FD1F  64                 	db	100	;'d'
   519  00FD20  20                 	db	32
   520  00FD21  72                 	db	114	;'r'
   521  00FD22  61                 	db	97	;'a'
   522  00FD23  74                 	db	116	;'t'
   523  00FD24  65                 	db	101	;'e'
   524  00FD25  3A                 	db	58	;':'
   525  00FD26  20                 	db	32
   526  00FD27  31                 	db	49	;'1'
   527  00FD28  31                 	db	49	;'1'
   528  00FD29  35                 	db	53	;'5'
   529  00FD2A  32                 	db	50	;'2'
   530  00FD2B  30                 	db	48	;'0'
   531  00FD2C  30                 	db	48	;'0'
   532  00FD2D  20                 	db	32
   533  00FD2E  62                 	db	98	;'b'
   534  00FD2F  70                 	db	112	;'p'
   535  00FD30  73                 	db	115	;'s'
   536  00FD31  0A                 	db	10
   537  00FD32  0D                 	db	13
   538  00FD33  20                 	db	32
   539  00FD34  20                 	db	32
   540  00FD35  20                 	db	32
   541  00FD36  4E                 	db	78	;'N'
   542  00FD37  6F                 	db	111	;'o'
   543  00FD38  20                 	db	32
   544  00FD39  70                 	db	112	;'p'
   545  00FD3A  61                 	db	97	;'a'
   546  00FD3B  72                 	db	114	;'r'
   547  00FD3C  69                 	db	105	;'i'
   548  00FD3D  74                 	db	116	;'t'
   549  00FD3E  79                 	db	121	;'y'
   550  00FD3F  2C                 	db	44
   551  00FD40  20                 	db	32
   552  00FD41  38                 	db	56	;'8'
   553  00FD42  20                 	db	32
   554  00FD43  62                 	db	98	;'b'
   555  00FD44  69                 	db	105	;'i'
   556  00FD45  74                 	db	116	;'t'
   557  00FD46  73                 	db	115	;'s'
   558  00FD47  2C                 	db	44
   559  00FD48  20                 	db	32
   560  00FD49  6E                 	db	110	;'n'
   561  00FD4A  6F                 	db	111	;'o'
   562  00FD4B  20                 	db	32
   563  00FD4C  66                 	db	102	;'f'
   564  00FD4D  6C                 	db	108	;'l'
   565  00FD4E  6F                 	db	111	;'o'
   566  00FD4F  77                 	db	119	;'w'
   567  00FD50  20                 	db	32
   568  00FD51  63                 	db	99	;'c'
   569  00FD52  6F                 	db	111	;'o'
   570  00FD53  6E                 	db	110	;'n'
   571  00FD54  74                 	db	116	;'t'
   572  00FD55  72                 	db	114	;'r'
   573  00FD56  6F                 	db	111	;'o'
   574  00FD57  6C                 	db	108	;'l'
   575  00FD58  2C                 	db	44
   576  00FD59  20                 	db	32
   577  00FD5A  31                 	db	49	;'1'
   578  00FD5B  20                 	db	32
   579  00FD5C  73                 	db	115	;'s'
   580  00FD5D  74                 	db	116	;'t'
   581  00FD5E  6F                 	db	111	;'o'
   582  00FD5F  70                 	db	112	;'p'
   583  00FD60  20                 	db	32
   584  00FD61  62                 	db	98	;'b'
   585  00FD62  69                 	db	105	;'i'
   586  00FD63  74                 	db	116	;'t'
   587  00FD64  0A                 	db	10
   588  00FD65  0D                 	db	13
   589  00FD66  20                 	db	32
   590  00FD67  20                 	db	32
   591  00FD68  20                 	db	32
   592  00FD69  43                 	db	67	;'C'
   593  00FD6A  6F                 	db	111	;'o'
   594  00FD6B  6D                 	db	109	;'m'
   595  00FD6C  6D                 	db	109	;'m'
   596  00FD6D  61                 	db	97	;'a'
   597  00FD6E  6E                 	db	110	;'n'
   598  00FD6F  64                 	db	100	;'d'
   599  00FD70  73                 	db	115	;'s'
   600  00FD71  20                 	db	32
   601  00FD72  61                 	db	97	;'a'
   602  00FD73  72                 	db	114	;'r'
   603  00FD74  65                 	db	101	;'e'
   604  00FD75  20                 	db	32
   605  00FD76  63                 	db	99	;'c'
   606  00FD77  61                 	db	97	;'a'
   607  00FD78  73                 	db	115	;'s'
   608  00FD79  65                 	db	101	;'e'
   609  00FD7A  20                 	db	32
   610  00FD7B  73                 	db	115	;'s'
   611  00FD7C  65                 	db	101	;'e'
   612  00FD7D  6E                 	db	110	;'n'
   613  00FD7E  73                 	db	115	;'s'
   614  00FD7F  69                 	db	105	;'i'
   615  00FD80  74                 	db	116	;'t'
   616  00FD81  69                 	db	105	;'i'
   617  00FD82  76                 	db	118	;'v'
   618  00FD83  65                 	db	101	;'e'
   619  00FD84  0A                 	db	10
   620  00FD85  0D                 	db	13
   621  00FD86  20                 	db	32
   622  00FD87  20                 	db	32
   623  00FD88  20                 	db	32
   624  00FD89  45                 	db	69	;'E'
   625  00FD8A  6E                 	db	110	;'n'
   626  00FD8B  74                 	db	116	;'t'
   627  00FD8C  65                 	db	101	;'e'
   628  00FD8D  72                 	db	114	;'r'
   629  00FD8E  20                 	db	32
   630  00FD8F  61                 	db	97	;'a'
   631  00FD90  20                 	db	32
   632  00FD91  63                 	db	99	;'c'
   633  00FD92  6F                 	db	111	;'o'
   634  00FD93  6D                 	db	109	;'m'
   635  00FD94  6D                 	db	109	;'m'
   636  00FD95  61                 	db	97	;'a'
   637  00FD96  6E                 	db	110	;'n'
   638  00FD97  64                 	db	100	;'d'
   639  00FD98  2C                 	db	44
   640  00FD99  20                 	db	32
   641  00FD9A  6F                 	db	111	;'o'
   642  00FD9B  72                 	db	114	;'r'
   643  00FD9C  20                 	db	32
   644  00FD9D  65                 	db	101	;'e'
   645  00FD9E  6E                 	db	110	;'n'
   646  00FD9F  74                 	db	116	;'t'
   647  00FDA0  65                 	db	101	;'e'
   648  00FDA1  72                 	db	114	;'r'
   649  00FDA2  20                 	db	32
   650  00FDA3  48                 	db	72	;'H'
   651  00FDA4  65                 	db	101	;'e'
   652  00FDA5  6C                 	db	108	;'l'
   653  00FDA6  70                 	db	112	;'p'
   654  00FDA7  20                 	db	32
   655  00FDA8  66                 	db	102	;'f'
   656  00FDA9  6F                 	db	111	;'o'
   657  00FDAA  72                 	db	114	;'r'
   658  00FDAB  20                 	db	32
   659  00FDAC  6C                 	db	108	;'l'
   660  00FDAD  69                 	db	105	;'i'
   661  00FDAE  73                 	db	115	;'s'
   662  00FDAF  74                 	db	116	;'t'
   663  00FDB0  20                 	db	32
   664  00FDB1  6F                 	db	111	;'o'
   665  00FDB2  66                 	db	102	;'f'
   666  00FDB3  20                 	db	32
   667  00FDB4  63                 	db	99	;'c'
   668  00FDB5  6F                 	db	111	;'o'
   669  00FDB6  6D                 	db	109	;'m'
   670  00FDB7  6D                 	db	109	;'m'
   671  00FDB8  61                 	db	97	;'a'
   672  00FDB9  6E                 	db	110	;'n'
   673  00FDBA  64                 	db	100	;'d'
   674  00FDBB  73                 	db	115	;'s'
   675  00FDBC  0A                 	db	10
   676  00FDBD  0D                 	db	13
   677  00FDBE  00                 	db	0
   678  00FDBF                     STR_35:
   679  00FDBF  20                 	db	32
   680  00FDC0  20                 	db	32
   681  00FDC1  20                 	db	32
   682  00FDC2  4C                 	db	76	;'L'
   683  00FDC3  69                 	db	105	;'i'
   684  00FDC4  73                 	db	115	;'s'
   685  00FDC5  74                 	db	116	;'t'
   686  00FDC6  20                 	db	32
   687  00FDC7  6F                 	db	111	;'o'
   688  00FDC8  66                 	db	102	;'f'
   689  00FDC9  20                 	db	32
   690  00FDCA  73                 	db	115	;'s'
   691  00FDCB  75                 	db	117	;'u'
   692  00FDCC  70                 	db	112	;'p'
   693  00FDCD  70                 	db	112	;'p'
   694  00FDCE  6F                 	db	111	;'o'
   695  00FDCF  72                 	db	114	;'r'
   696  00FDD0  74                 	db	116	;'t'
   697  00FDD1  65                 	db	101	;'e'
   698  00FDD2  64                 	db	100	;'d'
   699  00FDD3  20                 	db	32
   700  00FDD4  63                 	db	99	;'c'
   701  00FDD5  6F                 	db	111	;'o'
   702  00FDD6  6D                 	db	109	;'m'
   703  00FDD7  6D                 	db	109	;'m'
   704  00FDD8  61                 	db	97	;'a'
   705  00FDD9  6E                 	db	110	;'n'
   706  00FDDA  64                 	db	100	;'d'
   707  00FDDB  73                 	db	115	;'s'
   708  00FDDC  3A                 	db	58	;':'
   709  00FDDD  0A                 	db	10
   710  00FDDE  0D                 	db	13
   711  00FDDF  20                 	db	32
   712  00FDE0  20                 	db	32
   713  00FDE1  20                 	db	32
   714  00FDE2  4C                 	db	76	;'L'
   715  00FDE3  45                 	db	69	;'E'
   716  00FDE4  44                 	db	68	;'D'
   717  00FDE5  73                 	db	115	;'s'
   718  00FDE6  20                 	db	32
   719  00FDE7  4F                 	db	79	;'O'
   720  00FDE8  6E                 	db	110	;'n'
   721  00FDE9  3A                 	db	58	;':'
   722  00FDEA  20                 	db	32
   723  00FDEB  54                 	db	84	;'T'
   724  00FDEC  75                 	db	117	;'u'
   725  00FDED  72                 	db	114	;'r'
   726  00FDEE  6E                 	db	110	;'n'
   727  00FDEF  73                 	db	115	;'s'
   728  00FDF0  20                 	db	32
   729  00FDF1  61                 	db	97	;'a'
   730  00FDF2  6C                 	db	108	;'l'
   731  00FDF3  6C                 	db	108	;'l'
   732  00FDF4  20                 	db	32
   733  00FDF5  4C                 	db	76	;'L'
   734  00FDF6  45                 	db	69	;'E'
   735  00FDF7  44                 	db	68	;'D'
   736  00FDF8  73                 	db	115	;'s'
   737  00FDF9  20                 	db	32
   738  00FDFA  4F                 	db	79	;'O'
   739  00FDFB  6E                 	db	110	;'n'
   740  00FDFC  0A                 	db	10
   741  00FDFD  0D                 	db	13
   742  00FDFE  20                 	db	32
   743  00FDFF  20                 	db	32
   744  00FE00  20                 	db	32
   745  00FE01  4C                 	db	76	;'L'
   746  00FE02  45                 	db	69	;'E'
   747  00FE03  44                 	db	68	;'D'
   748  00FE04  73                 	db	115	;'s'
   749  00FE05  20                 	db	32
   750  00FE06  4F                 	db	79	;'O'
   751  00FE07  66                 	db	102	;'f'
   752  00FE08  66                 	db	102	;'f'
   753  00FE09  3A                 	db	58	;':'
   754  00FE0A  20                 	db	32
   755  00FE0B  54                 	db	84	;'T'
   756  00FE0C  75                 	db	117	;'u'
   757  00FE0D  72                 	db	114	;'r'
   758  00FE0E  6E                 	db	110	;'n'
   759  00FE0F  73                 	db	115	;'s'
   760  00FE10  20                 	db	32
   761  00FE11  61                 	db	97	;'a'
   762  00FE12  6C                 	db	108	;'l'
   763  00FE13  6C                 	db	108	;'l'
   764  00FE14  20                 	db	32
   765  00FE15  4C                 	db	76	;'L'
   766  00FE16  45                 	db	69	;'E'
   767  00FE17  44                 	db	68	;'D'
   768  00FE18  73                 	db	115	;'s'
   769  00FE19  20                 	db	32
   770  00FE1A  4F                 	db	79	;'O'
   771  00FE1B  66                 	db	102	;'f'
   772  00FE1C  66                 	db	102	;'f'
   773  00FE1D  0A                 	db	10
   774  00FE1E  0D                 	db	13
   775  00FE1F  20                 	db	32
   776  00FE20  20                 	db	32
   777  00FE21  20                 	db	32
   778  00FE22  42                 	db	66	;'B'
   779  00FE23  75                 	db	117	;'u'
   780  00FE24  74                 	db	116	;'t'
   781  00FE25  74                 	db	116	;'t'
   782  00FE26  6F                 	db	111	;'o'
   783  00FE27  6E                 	db	110	;'n'
   784  00FE28  20                 	db	32
   785  00FE29  53                 	db	83	;'S'
   786  00FE2A  74                 	db	116	;'t'
   787  00FE2B  61                 	db	97	;'a'
   788  00FE2C  74                 	db	116	;'t'
   789  00FE2D  65                 	db	101	;'e'
   790  00FE2E  73                 	db	115	;'s'
   791  00FE2F  3F                 	db	63	;'?'
   792  00FE30  3A                 	db	58	;':'
   793  00FE31  20                 	db	32
   794  00FE32  52                 	db	82	;'R'
   795  00FE33  65                 	db	101	;'e'
   796  00FE34  74                 	db	116	;'t'
   797  00FE35  75                 	db	117	;'u'
   798  00FE36  72                 	db	114	;'r'
   799  00FE37  6E                 	db	110	;'n'
   800  00FE38  73                 	db	115	;'s'
   801  00FE39  20                 	db	32
   802  00FE3A  73                 	db	115	;'s'
   803  00FE3B  74                 	db	116	;'t'
   804  00FE3C  61                 	db	97	;'a'
   805  00FE3D  74                 	db	116	;'t'
   806  00FE3E  65                 	db	101	;'e'
   807  00FE3F  20                 	db	32
   808  00FE40  6F                 	db	111	;'o'
   809  00FE41  66                 	db	102	;'f'
   810  00FE42  20                 	db	32
   811  00FE43  61                 	db	97	;'a'
   812  00FE44  6C                 	db	108	;'l'
   813  00FE45  6C                 	db	108	;'l'
   814  00FE46  20                 	db	32
   815  00FE47  66                 	db	102	;'f'
   816  00FE48  69                 	db	105	;'i'
   817  00FE49  76                 	db	118	;'v'
   818  00FE4A  65                 	db	101	;'e'
   819  00FE4B  20                 	db	32
   820  00FE4C  6D                 	db	109	;'m'
   821  00FE4D  54                 	db	84	;'T'
   822  00FE4E  6F                 	db	111	;'o'
   823  00FE4F  75                 	db	117	;'u'
   824  00FE50  63                 	db	99	;'c'
   825  00FE51  68                 	db	104	;'h'
   826  00FE52  20                 	db	32
   827  00FE53  62                 	db	98	;'b'
   828  00FE54  75                 	db	117	;'u'
   829  00FE55  74                 	db	116	;'t'
   830  00FE56  74                 	db	116	;'t'
   831  00FE57  6F                 	db	111	;'o'
   832  00FE58  6E                 	db	110	;'n'
   833  00FE59  73                 	db	115	;'s'
   834  00FE5A  0A                 	db	10
   835  00FE5B  0D                 	db	13
   836  00FE5C  20                 	db	32
   837  00FE5D  20                 	db	32
   838  00FE5E  20                 	db	32
   839  00FE5F  52                 	db	82	;'R'
   840  00FE60  65                 	db	101	;'e'
   841  00FE61  73                 	db	115	;'s'
   842  00FE62  65                 	db	101	;'e'
   843  00FE63  74                 	db	116	;'t'
   844  00FE64  3A                 	db	58	;':'
   845  00FE65  20                 	db	32
   846  00FE66  43                 	db	67	;'C'
   847  00FE67  6C                 	db	108	;'l'
   848  00FE68  65                 	db	101	;'e'
   849  00FE69  61                 	db	97	;'a'
   850  00FE6A  72                 	db	114	;'r'
   851  00FE6B  73                 	db	115	;'s'
   852  00FE6C  20                 	db	32
   853  00FE6D  74                 	db	116	;'t'
   854  00FE6E  68                 	db	104	;'h'
   855  00FE6F  65                 	db	101	;'e'
   856  00FE70  20                 	db	32
   857  00FE71  74                 	db	116	;'t'
   858  00FE72  65                 	db	101	;'e'
   859  00FE73  72                 	db	114	;'r'
   860  00FE74  6D                 	db	109	;'m'
   861  00FE75  69                 	db	105	;'i'
   862  00FE76  6E                 	db	110	;'n'
   863  00FE77  61                 	db	97	;'a'
   864  00FE78  6C                 	db	108	;'l'
   865  00FE79  20                 	db	32
   866  00FE7A  61                 	db	97	;'a'
   867  00FE7B  6E                 	db	110	;'n'
   868  00FE7C  64                 	db	100	;'d'
   869  00FE7D  20                 	db	32
   870  00FE7E  72                 	db	114	;'r'
   871  00FE7F  65                 	db	101	;'e'
   872  00FE80  73                 	db	115	;'s'
   873  00FE81  65                 	db	101	;'e'
   874  00FE82  74                 	db	116	;'t'
   875  00FE83  73                 	db	115	;'s'
   876  00FE84  20                 	db	32
   877  00FE85  74                 	db	116	;'t'
   878  00FE86  68                 	db	104	;'h'
   879  00FE87  65                 	db	101	;'e'
   880  00FE88  20                 	db	32
   881  00FE89  6D                 	db	109	;'m'
   882  00FE8A  69                 	db	105	;'i'
   883  00FE8B  63                 	db	99	;'c'
   884  00FE8C  72                 	db	114	;'r'
   885  00FE8D  6F                 	db	111	;'o'
   886  00FE8E  0A                 	db	10
   887  00FE8F  0D                 	db	13
   888  00FE90  20                 	db	32
   889  00FE91  20                 	db	32
   890  00FE92  20                 	db	32
   891  00FE93  43                 	db	67	;'C'
   892  00FE94  6C                 	db	108	;'l'
   893  00FE95  65                 	db	101	;'e'
   894  00FE96  61                 	db	97	;'a'
   895  00FE97  72                 	db	114	;'r'
   896  00FE98  3A                 	db	58	;':'
   897  00FE99  20                 	db	32
   898  00FE9A  43                 	db	67	;'C'
   899  00FE9B  6C                 	db	108	;'l'
   900  00FE9C  65                 	db	101	;'e'
   901  00FE9D  61                 	db	97	;'a'
   902  00FE9E  72                 	db	114	;'r'
   903  00FE9F  73                 	db	115	;'s'
   904  00FEA0  20                 	db	32
   905  00FEA1  74                 	db	116	;'t'
   906  00FEA2  68                 	db	104	;'h'
   907  00FEA3  65                 	db	101	;'e'
   908  00FEA4  20                 	db	32
   909  00FEA5  74                 	db	116	;'t'
   910  00FEA6  65                 	db	101	;'e'
   911  00FEA7  72                 	db	114	;'r'
   912  00FEA8  6D                 	db	109	;'m'
   913  00FEA9  69                 	db	105	;'i'
   914  00FEAA  6E                 	db	110	;'n'
   915  00FEAB  61                 	db	97	;'a'
   916  00FEAC  6C                 	db	108	;'l'
   917  00FEAD  20                 	db	32
   918  00FEAE  62                 	db	98	;'b'
   919  00FEAF  75                 	db	117	;'u'
   920  00FEB0  74                 	db	116	;'t'
   921  00FEB1  20                 	db	32
   922  00FEB2  64                 	db	100	;'d'
   923  00FEB3  6F                 	db	111	;'o'
   924  00FEB4  65                 	db	101	;'e'
   925  00FEB5  73                 	db	115	;'s'
   926  00FEB6  6E                 	db	110	;'n'
   927  00FEB7  27                 	db	39
   928  00FEB8  74                 	db	116	;'t'
   929  00FEB9  20                 	db	32
   930  00FEBA  72                 	db	114	;'r'
   931  00FEBB  65                 	db	101	;'e'
   932  00FEBC  73                 	db	115	;'s'
   933  00FEBD  65                 	db	101	;'e'
   934  00FEBE  74                 	db	116	;'t'
   935  00FEBF  20                 	db	32
   936  00FEC0  74                 	db	116	;'t'
   937  00FEC1  68                 	db	104	;'h'
   938  00FEC2  65                 	db	101	;'e'
   939  00FEC3  20                 	db	32
   940  00FEC4  6D                 	db	109	;'m'
   941  00FEC5  69                 	db	105	;'i'
   942  00FEC6  63                 	db	99	;'c'
   943  00FEC7  72                 	db	114	;'r'
   944  00FEC8  6F                 	db	111	;'o'
   945  00FEC9  0A                 	db	10
   946  00FECA  0D                 	db	13
   947  00FECB  20                 	db	32
   948  00FECC  20                 	db	32
   949  00FECD  20                 	db	32
   950  00FECE  2A                 	db	42
   951  00FECF  49                 	db	73	;'I'
   952  00FED0  44                 	db	68	;'D'
   953  00FED1  4E                 	db	78	;'N'
   954  00FED2  3F                 	db	63	;'?'
   955  00FED3  3A                 	db	58	;':'
   956  00FED4  20                 	db	32
   957  00FED5  52                 	db	82	;'R'
   958  00FED6  65                 	db	101	;'e'
   959  00FED7  74                 	db	116	;'t'
   960  00FED8  75                 	db	117	;'u'
   961  00FED9  72                 	db	114	;'r'
   962  00FEDA  6E                 	db	110	;'n'
   963  00FEDB  73                 	db	115	;'s'
   964  00FEDC  20                 	db	32
   965  00FEDD  64                 	db	100	;'d'
   966  00FEDE  65                 	db	101	;'e'
   967  00FEDF  76                 	db	118	;'v'
   968  00FEE0  69                 	db	105	;'i'
   969  00FEE1  63                 	db	99	;'c'
   970  00FEE2  65                 	db	101	;'e'
   971  00FEE3  20                 	db	32
   972  00FEE4  69                 	db	105	;'i'
   973  00FEE5  64                 	db	100	;'d'
   974  00FEE6  65                 	db	101	;'e'
   975  00FEE7  6E                 	db	110	;'n'
   976  00FEE8  74                 	db	116	;'t'
   977  00FEE9  69                 	db	105	;'i'
   978  00FEEA  66                 	db	102	;'f'
   979  00FEEB  69                 	db	105	;'i'
   980  00FEEC  63                 	db	99	;'c'
   981  00FEED  61                 	db	97	;'a'
   982  00FEEE  74                 	db	116	;'t'
   983  00FEEF  69                 	db	105	;'i'
   984  00FEF0  6F                 	db	111	;'o'
   985  00FEF1  6E                 	db	110	;'n'
   986  00FEF2  0A                 	db	10
   987  00FEF3  0D                 	db	13
   988  00FEF4  20                 	db	32
   989  00FEF5  20                 	db	32
   990  00FEF6  20                 	db	32
   991  00FEF7  48                 	db	72	;'H'
   992  00FEF8  65                 	db	101	;'e'
   993  00FEF9  6C                 	db	108	;'l'
   994  00FEFA  70                 	db	112	;'p'
   995  00FEFB  3A                 	db	58	;':'
   996  00FEFC  20                 	db	32
   997  00FEFD  54                 	db	84	;'T'
   998  00FEFE  68                 	db	104	;'h'
   999  00FEFF  69                 	db	105	;'i'
  1000  00FF00  73                 	db	115	;'s'
  1001  00FF01  20                 	db	32
  1002  00FF02  6D                 	db	109	;'m'
  1003  00FF03  65                 	db	101	;'e'
  1004  00FF04  73                 	db	115	;'s'
  1005  00FF05  73                 	db	115	;'s'
  1006  00FF06  61                 	db	97	;'a'
  1007  00FF07  67                 	db	103	;'g'
  1008  00FF08  65                 	db	101	;'e'
  1009  00FF09  2C                 	db	44
  1010  00FF0A  20                 	db	32
  1011  00FF0B  6C                 	db	108	;'l'
  1012  00FF0C  69                 	db	105	;'i'
  1013  00FF0D  73                 	db	115	;'s'
  1014  00FF0E  74                 	db	116	;'t'
  1015  00FF0F  73                 	db	115	;'s'
  1016  00FF10  20                 	db	32
  1017  00FF11  63                 	db	99	;'c'
  1018  00FF12  6F                 	db	111	;'o'
  1019  00FF13  6D                 	db	109	;'m'
  1020  00FF14  6D                 	db	109	;'m'
  1021  00FF15  61                 	db	97	;'a'
  1022  00FF16  6E                 	db	110	;'n'
  1023  00FF17  64                 	db	100	;'d'
  1024  00FF18  73                 	db	115	;'s'
  1025  00FF19  0A                 	db	10
  1026  00FF1A  0D                 	db	13
  1027  00FF1B  00                 	db	0
  1028  00FF1C                     STR_31:
  1029  00FF1C  20                 	db	32
  1030  00FF1D  20                 	db	32
  1031  00FF1E  20                 	db	32
  1032  00FF1F  20                 	db	32
  1033  00FF20  6D                 	db	109	;'m'
  1034  00FF21  54                 	db	84	;'T'
  1035  00FF22  6F                 	db	111	;'o'
  1036  00FF23  75                 	db	117	;'u'
  1037  00FF24  63                 	db	99	;'c'
  1038  00FF25  68                 	db	104	;'h'
  1039  00FF26  20                 	db	32
  1040  00FF27  54                 	db	84	;'T'
  1041  00FF28  65                 	db	101	;'e'
  1042  00FF29  73                 	db	115	;'s'
  1043  00FF2A  74                 	db	116	;'t'
  1044  00FF2B  20                 	db	32
  1045  00FF2C  42                 	db	66	;'B'
  1046  00FF2D  6F                 	db	111	;'o'
  1047  00FF2E  61                 	db	97	;'a'
  1048  00FF2F  72                 	db	114	;'r'
  1049  00FF30  64                 	db	100	;'d'
  1050  00FF31  2C                 	db	44
  1051  00FF32  20                 	db	32
  1052  00FF33  52                 	db	82	;'R'
  1053  00FF34  45                 	db	69	;'E'
  1054  00FF35  56                 	db	86	;'V'
  1055  00FF36  41                 	db	65	;'A'
  1056  00FF37  00                 	db	0
  1057  00FF38                     STR_16:
  1058  00FF38  20                 	db	32
  1059  00FF39  20                 	db	32
  1060  00FF3A  20                 	db	32
  1061  00FF3B  20                 	db	32
  1062  00FF3C  42                 	db	66	;'B'
  1063  00FF3D  75                 	db	117	;'u'
  1064  00FF3E  74                 	db	116	;'t'
  1065  00FF3F  74                 	db	116	;'t'
  1066  00FF40  6F                 	db	111	;'o'
  1067  00FF41  6E                 	db	110	;'n'
  1068  00FF42  20                 	db	32
  1069  00FF43  30                 	db	48	;'0'
  1070  00FF44  3A                 	db	58	;':'
  1071  00FF45  20                 	db	32
  1072  00FF46  25                 	db	37
  1073  00FF47  64                 	db	100	;'d'
  1074  00FF48  0A                 	db	10
  1075  00FF49  0D                 	db	13
  1076  00FF4A  00                 	db	0
  1077  00FF4B                     STR_17:
  1078  00FF4B  20                 	db	32
  1079  00FF4C  20                 	db	32
  1080  00FF4D  20                 	db	32
  1081  00FF4E  20                 	db	32
  1082  00FF4F  42                 	db	66	;'B'
  1083  00FF50  75                 	db	117	;'u'
  1084  00FF51  74                 	db	116	;'t'
  1085  00FF52  74                 	db	116	;'t'
  1086  00FF53  6F                 	db	111	;'o'
  1087  00FF54  6E                 	db	110	;'n'
  1088  00FF55  20                 	db	32
  1089  00FF56  31                 	db	49	;'1'
  1090  00FF57  3A                 	db	58	;':'
  1091  00FF58  20                 	db	32
  1092  00FF59  25                 	db	37
  1093  00FF5A  64                 	db	100	;'d'
  1094  00FF5B  0A                 	db	10
  1095  00FF5C  0D                 	db	13
  1096  00FF5D  00                 	db	0
  1097  00FF5E                     STR_18:
  1098  00FF5E  20                 	db	32
  1099  00FF5F  20                 	db	32
  1100  00FF60  20                 	db	32
  1101  00FF61  20                 	db	32
  1102  00FF62  42                 	db	66	;'B'
  1103  00FF63  75                 	db	117	;'u'
  1104  00FF64  74                 	db	116	;'t'
  1105  00FF65  74                 	db	116	;'t'
  1106  00FF66  6F                 	db	111	;'o'
  1107  00FF67  6E                 	db	110	;'n'
  1108  00FF68  20                 	db	32
  1109  00FF69  32                 	db	50	;'2'
  1110  00FF6A  3A                 	db	58	;':'
  1111  00FF6B  20                 	db	32
  1112  00FF6C  25                 	db	37
  1113  00FF6D  64                 	db	100	;'d'
  1114  00FF6E  0A                 	db	10
  1115  00FF6F  0D                 	db	13
  1116  00FF70  00                 	db	0
  1117  00FF71                     STR_19:
  1118  00FF71  20                 	db	32
  1119  00FF72  20                 	db	32
  1120  00FF73  20                 	db	32
  1121  00FF74  20                 	db	32
  1122  00FF75  42                 	db	66	;'B'
  1123  00FF76  75                 	db	117	;'u'
  1124  00FF77  74                 	db	116	;'t'
  1125  00FF78  74                 	db	116	;'t'
  1126  00FF79  6F                 	db	111	;'o'
  1127  00FF7A  6E                 	db	110	;'n'
  1128  00FF7B  20                 	db	32
  1129  00FF7C  33                 	db	51	;'3'
  1130  00FF7D  3A                 	db	58	;':'
  1131  00FF7E  20                 	db	32
  1132  00FF7F  25                 	db	37
  1133  00FF80  64                 	db	100	;'d'
  1134  00FF81  0A                 	db	10
  1135  00FF82  0D                 	db	13
  1136  00FF83  00                 	db	0
  1137  00FF84                     STR_20:
  1138  00FF84  20                 	db	32
  1139  00FF85  20                 	db	32
  1140  00FF86  20                 	db	32
  1141  00FF87  20                 	db	32
  1142  00FF88  42                 	db	66	;'B'
  1143  00FF89  75                 	db	117	;'u'
  1144  00FF8A  74                 	db	116	;'t'
  1145  00FF8B  74                 	db	116	;'t'
  1146  00FF8C  6F                 	db	111	;'o'
  1147  00FF8D  6E                 	db	110	;'n'
  1148  00FF8E  20                 	db	32
  1149  00FF8F  34                 	db	52	;'4'
  1150  00FF90  3A                 	db	58	;':'
  1151  00FF91  20                 	db	32
  1152  00FF92  25                 	db	37
  1153  00FF93  64                 	db	100	;'d'
  1154  00FF94  0A                 	db	10
  1155  00FF95  0D                 	db	13
  1156  00FF96  00                 	db	0
  1157  00FF97                     STR_8:
  1158  00FF97  20                 	db	32
  1159  00FF98  20                 	db	32
  1160  00FF99  20                 	db	32
  1161  00FF9A  20                 	db	32
  1162  00FF9B  4C                 	db	76	;'L'
  1163  00FF9C  41                 	db	65	;'A'
  1164  00FF9D  54                 	db	84	;'T'
  1165  00FF9E  46                 	db	70	;'F'
  1166  00FF9F  20                 	db	32
  1167  00FFA0  3D                 	db	61	;'='
  1168  00FFA1  20                 	db	32
  1169  00FFA2  30                 	db	48	;'0'
  1170  00FFA3  78                 	db	120	;'x'
  1171  00FFA4  30                 	db	48	;'0'
  1172  00FFA5  30                 	db	48	;'0'
  1173  00FFA6  0A                 	db	10
  1174  00FFA7  0D                 	db	13
  1175  00FFA8  00                 	db	0
  1176  00FFA9                     STR_14:
  1177  00FFA9  42                 	db	66	;'B'
  1178  00FFAA  75                 	db	117	;'u'
  1179  00FFAB  74                 	db	116	;'t'
  1180  00FFAC  74                 	db	116	;'t'
  1181  00FFAD  6F                 	db	111	;'o'
  1182  00FFAE  6E                 	db	110	;'n'
  1183  00FFAF  20                 	db	32
  1184  00FFB0  53                 	db	83	;'S'
  1185  00FFB1  74                 	db	116	;'t'
  1186  00FFB2  61                 	db	97	;'a'
  1187  00FFB3  74                 	db	116	;'t'
  1188  00FFB4  65                 	db	101	;'e'
  1189  00FFB5  73                 	db	115	;'s'
  1190  00FFB6  3F                 	db	63	;'?'
  1191  00FFB7  00                 	db	0
  1192  00FFB8                     STR_12:
  1193  00FFB8  4C                 	db	76	;'L'
  1194  00FFB9  41                 	db	65	;'A'
  1195  00FFBA  54                 	db	84	;'T'
  1196  00FFBB  46                 	db	70	;'F'
  1197  00FFBC  20                 	db	32
  1198  00FFBD  3D                 	db	61	;'='
  1199  00FFBE  20                 	db	32
  1200  00FFBF  30                 	db	48	;'0'
  1201  00FFC0  78                 	db	120	;'x'
  1202  00FFC1  46                 	db	70	;'F'
  1203  00FFC2  46                 	db	70	;'F'
  1204  00FFC3  0A                 	db	10
  1205  00FFC4  0D                 	db	13
  1206  00FFC5  00                 	db	0
  1207  00FFC6                     STR_10:
  1208  00FFC6  4C                 	db	76	;'L'
  1209  00FFC7  45                 	db	69	;'E'
  1210  00FFC8  44                 	db	68	;'D'
  1211  00FFC9  73                 	db	115	;'s'
  1212  00FFCA  20                 	db	32
  1213  00FFCB  4F                 	db	79	;'O'
  1214  00FFCC  66                 	db	102	;'f'
  1215  00FFCD  66                 	db	102	;'f'
  1216  00FFCE  00                 	db	0
  1217  00FFCF                     STR_6:
  1218  00FFCF  4C                 	db	76	;'L'
  1219  00FFD0  45                 	db	69	;'E'
  1220  00FFD1  44                 	db	68	;'D'
  1221  00FFD2  73                 	db	115	;'s'
  1222  00FFD3  20                 	db	32
  1223  00FFD4  4F                 	db	79	;'O'
  1224  00FFD5  6E                 	db	110	;'n'
  1225  00FFD6  00                 	db	0
  1226  00FFD7                     STR_28:
  1227  00FFD7  2A                 	db	42
  1228  00FFD8  49                 	db	73	;'I'
  1229  00FFD9  44                 	db	68	;'D'
  1230  00FFDA  4E                 	db	78	;'N'
  1231  00FFDB  3F                 	db	63	;'?'
  1232  00FFDC  00                 	db	0
  1233  00FFDD                     STR_25:
  1234  00FFDD  43                 	db	67	;'C'
  1235  00FFDE  6C                 	db	108	;'l'
  1236  00FFDF  65                 	db	101	;'e'
  1237  00FFE0  61                 	db	97	;'a'
  1238  00FFE1  72                 	db	114	;'r'
  1239  00FFE2  00                 	db	0
  1240  00FFE3                     STR_22:
  1241  00FFE3  52                 	db	82	;'R'
  1242  00FFE4  65                 	db	101	;'e'
  1243  00FFE5  73                 	db	115	;'s'
  1244  00FFE6  65                 	db	101	;'e'
  1245  00FFE7  74                 	db	116	;'t'
  1246  00FFE8  00                 	db	0
  1247  00FFE9                     STR_33:
  1248  00FFE9  48                 	db	72	;'H'
  1249  00FFEA  65                 	db	101	;'e'
  1250  00FFEB  6C                 	db	108	;'l'
  1251  00FFEC  70                 	db	112	;'p'
  1252  00FFED  00                 	db	0
  1253  00FFEE                     STR_2:
  1254  00FFEE  1B                 	db	27
  1255  00FFEF  5B                 	db	91	;'['
  1256  00FFF0  32                 	db	50	;'2'
  1257  00FFF1  4A                 	db	74	;'J'
  1258  00FFF2  00                 	db	0
  1259  00FFF3                     STR_29:
  1260  00FFF3  49                 	db	73	;'I'
  1261  00FFF4  44                 	db	68	;'D'
  1262  00FFF5  4E                 	db	78	;'N'
  1263  00FFF6  00                 	db	0
  1264  00FFF7                     STR_3:
  1265  00FFF7  1B                 	db	27
  1266  00FFF8  5B                 	db	91	;'['
  1267  00FFF9  48                 	db	72	;'H'
  1268  00FFFA  00                 	db	0
  1269  00FFFB                     STR_1:
  1270  00FFFB  1B                 	db	27
  1271  00FFFC  5B                 	db	91	;'['
  1272  00FFFD  4B                 	db	75	;'K'
  1273  00FFFE  00                 	db	0
  1274  0000                     
  1275                           ; #config settings
  1276  00FFFF  00                 	db	0	; dummy byte at the end
  1277  0000                     
  1278                           	psect	nvCOMRAM
  1279  00004B                     __pnvCOMRAM:
  1280                           	opt stack 0
  1281  00004B                     _IOCBF2_InterruptHandler:
  1282                           	opt stack 0
  1283  00004B                     	ds	3
  1284  00004E                     _eusart2TxBufferRemaining:
  1285                           	opt stack 0
  1286  00004E                     	ds	1
  1287                           
  1288                           	psect	nvBANK0
  1289  0000E0                     __pnvBANK0:
  1290                           	opt stack 0
  1291  0000E0                     _EUSART2_RxDefaultInterruptHandler:
  1292                           	opt stack 0
  1293  0000E0                     	ds	3
  1294  0000E3                     _EUSART2_TxDefaultInterruptHandler:
  1295                           	opt stack 0
  1296  0000E3                     	ds	3
  1297  0000                     _ANSELEbits	set	3759
  1298  0000                     _WPUEbits	set	3758
  1299  0000                     _PMD5	set	3665
  1300  0000                     _PMD4	set	3664
  1301  0000                     _PMD3	set	3663
  1302  0000                     _PMD2	set	3662
  1303  0000                     _PMD1	set	3661
  1304  0000                     _PMD0	set	3660
  1305  0000                     _OSCTUNE	set	3656
  1306  0000                     _OSCFRQ	set	3657
  1307  0000                     _OSCEN	set	3655
  1308  0000                     _OSCCON3	set	3653
  1309  0000                     _OSCCON1	set	3651
  1310  0000                     _RC2REG	set	3825
  1311  0000                     _RC2STAbits	set	3829
  1312  0000                     _TX2REG	set	3826
  1313  0000                     _TX2STAbits	set	3830
  1314  0000                     _SP2BRGH	set	3828
  1315  0000                     _SP2BRGL	set	3827
  1316  0000                     _TX2STA	set	3830
  1317  0000                     _RC2STA	set	3829
  1318  0000                     _BAUD2CON	set	3831
  1319  0000                     _PIR0bits	set	3635
  1320  0000                     _PIR1bits	set	3636
  1321  0000                     _PIE1bits	set	3626
  1322  0000                     _PIR3bits	set	3638
  1323  0000                     _PIE3bits	set	3628
  1324  0000                     _IPR0bits	set	3615
  1325  0000                     _IPR1bits	set	3616
  1326  0000                     _IPR3bits	set	3618
  1327  0000                     _RX2PPSbits	set	3601
  1328  0000                     _RG7PPS	set	3721
  1329  0000                     _PIE0bits	set	3625
  1330  0000                     _IOCBPbits	set	3733
  1331  0000                     _IOCBNbits	set	3732
  1332  0000                     _IOCBFbits	set	3731
  1333  0000                     _ODCOND	set	3749
  1334  0000                     _ODCONC	set	3744
  1335  0000                     _ODCONH	set	3775
  1336  0000                     _ODCONB	set	3736
  1337  0000                     _ODCONG	set	3770
  1338  0000                     _ODCONA	set	3728
  1339  0000                     _ODCONF	set	3762
  1340  0000                     _ODCONE	set	3757
  1341  0000                     _WPUH	set	3776
  1342  0000                     _WPUC	set	3745
  1343  0000                     _WPUA	set	3729
  1344  0000                     _WPUG	set	3771
  1345  0000                     _WPUB	set	3737
  1346  0000                     _WPUE	set	3758
  1347  0000                     _WPUF	set	3763
  1348  0000                     _WPUD	set	3750
  1349  0000                     _ANSELA	set	3730
  1350  0000                     _ANSELF	set	3764
  1351  0000                     _ANSELG	set	3772
  1352  0000                     _ANSELE	set	3759
  1353  0000                     _ANSELB	set	3738
  1354  0000                     _ANSELD	set	3751
  1355  0000                     _ADPCH	set	3935
  1356  0000                     _ADPRE	set	3934
  1357  0000                     _ADACQ	set	3932
  1358  0000                     _ADCON3	set	3931
  1359  0000                     _ADCON2	set	3930
  1360  0000                     _ADCON1	set	3929
  1361  0000                     _ADCAP	set	3933
  1362  0000                     _ADREF	set	3928
  1363  0000                     _ADCLK	set	3927
  1364  0000                     _ADFLTR	set	3954
  1365  0000                     _ADACC	set	3952
  1366  0000                     _LATFbits	set	3966
  1367  0000                     _PORTBbits	set	3978
  1368  0000                     _ADCON0bits	set	3936
  1369  0000                     _ADRPT	set	3942
  1370  0000                     _ADCON0	set	3936
  1371  0000                     _ADSTPTH	set	3945
  1372  0000                     _ADSTPTL	set	3944
  1373  0000                     _ADUTHH	set	3949
  1374  0000                     _ADUTHL	set	3948
  1375  0000                     _ADLTHH	set	3947
  1376  0000                     _ADLTHL	set	3946
  1377  0000                     _TRISEbits	set	3973
  1378  0000                     _INTCONbits	set	4082
  1379  0000                     _TRISD	set	3972
  1380  0000                     _TRISC	set	3971
  1381  0000                     _TRISH	set	3976
  1382  0000                     _TRISB	set	3970
  1383  0000                     _TRISG	set	3975
  1384  0000                     _TRISA	set	3969
  1385  0000                     _TRISF	set	3974
  1386  0000                     _TRISE	set	3973
  1387  0000                     _LATH	set	3968
  1388  0000                     _LATC	set	3963
  1389  0000                     _LATG	set	3967
  1390  0000                     _LATB	set	3962
  1391  0000                     _LATF	set	3966
  1392  0000                     _LATA	set	3961
  1393  0000                     _LATD	set	3964
  1394  0000                     _LATE	set	3965
  1395  0000                     _GIE	set	32663
  1396                           
  1397                           	psect	cinit
  1398  011762                     __pcinit:
  1399                           	opt stack 0
  1400  011762                     start_initialization:
  1401                           	opt stack 0
  1402  011762                     __initialization:
  1403                           	opt stack 0
  1404                           
  1405                           ; Initialize objects allocated to BANK0 (12 bytes)
  1406                           ; load TBLPTR registers with __pidataBANK0
  1407  011762  0EB6               	movlw	low __pidataBANK0
  1408  011764  6EF6               	movwf	tblptrl,c
  1409  011766  0E24               	movlw	high __pidataBANK0
  1410  011768  6EF7               	movwf	tblptrh,c
  1411  01176A  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1412  01176C  6EF8               	movwf	tblptru,c
  1413  01176E  EE00  F0D4         	lfsr	0,__pdataBANK0
  1414  011772  EE10 F00C          	lfsr	1,12
  1415  011776                     copy_data0:
  1416  011776  0009               	tblrd		*+
  1417  011778  CFF5 FFEE          	movff	tablat,postinc0
  1418  01177C  50E5               	movf	postdec1,w,c
  1419  01177E  50E1               	movf	fsr1l,w,c
  1420  011780  E1FA               	bnz	copy_data0
  1421                           
  1422                           ; Initialize objects allocated to COMRAM (9 bytes)
  1423                           ; load TBLPTR registers with __pidataCOMRAM
  1424  011782  0EF8               	movlw	low __pidataCOMRAM
  1425  011784  6EF6               	movwf	tblptrl,c
  1426  011786  0E24               	movlw	high __pidataCOMRAM
  1427  011788  6EF7               	movwf	tblptrh,c
  1428  01178A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1429  01178C  6EF8               	movwf	tblptru,c
  1430  01178E  EE00  F042         	lfsr	0,__pdataCOMRAM
  1431  011792  EE10 F009          	lfsr	1,9
  1432  011796                     copy_data1:
  1433  011796  0009               	tblrd		*+
  1434  011798  CFF5 FFEE          	movff	tablat,postinc0
  1435  01179C  50E5               	movf	postdec1,w,c
  1436  01179E  50E1               	movf	fsr1l,w,c
  1437  0117A0  E1FA               	bnz	copy_data1
  1438                           
  1439                           ; Clear objects allocated to BANK2 (64 bytes)
  1440  0117A2  EE02  F000         	lfsr	0,__pbssBANK2
  1441  0117A6  0E40               	movlw	64
  1442  0117A8                     clear_0:
  1443  0117A8  6AEE               	clrf	postinc0,c
  1444  0117AA  06E8               	decf	wreg,f,c
  1445  0117AC  E1FD               	bnz	clear_0
  1446                           
  1447                           ; Clear objects allocated to BANK1 (208 bytes)
  1448  0117AE  EE01  F000         	lfsr	0,__pbssBANK1
  1449  0117B2  0ED0               	movlw	208
  1450  0117B4                     clear_1:
  1451  0117B4  6AEE               	clrf	postinc0,c
  1452  0117B6  06E8               	decf	wreg,f,c
  1453  0117B8  E1FD               	bnz	clear_1
  1454                           
  1455                           ; Clear objects allocated to BANK0 (79 bytes)
  1456  0117BA  EE00  F060         	lfsr	0,__pbssBANK0
  1457  0117BE  0E4F               	movlw	79
  1458  0117C0                     clear_2:
  1459  0117C0  6AEE               	clrf	postinc0,c
  1460  0117C2  06E8               	decf	wreg,f,c
  1461  0117C4  E1FD               	bnz	clear_2
  1462                           
  1463                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1464  0117C6  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1465                           
  1466                           ; Clear objects allocated to COMRAM (25 bytes)
  1467  0117C8  EE00  F029         	lfsr	0,__pbssCOMRAM
  1468  0117CC  0E19               	movlw	25
  1469  0117CE                     clear_3:
  1470  0117CE  6AEE               	clrf	postinc0,c
  1471  0117D0  06E8               	decf	wreg,f,c
  1472  0117D2  E1FD               	bnz	clear_3
  1473  0117D4                     end_of_initialization:
  1474                           	opt stack 0
  1475  0117D4                     __end_of__initialization:
  1476                           	opt stack 0
  1477  0117D4  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1478  0117D6  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1479  0117D8  0100               	movlb	0
  1480  0117DA  EFBE  F08A         	goto	_main	;jump to C main() function
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           	psect	bitbssCOMRAM
  1491  000278                     __pbitbssCOMRAM:
  1492                           	opt stack 0
  1493  000278                     _USB_DTR:
  1494                           	opt stack 0
  1495  000278                     	ds	1
  1496  000279                     _eusart2RxStringReady:
  1497                           	opt stack 0
  1498  000279                     	ds	1
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           postdec1	equ	0xFE5
  1506                           fsr1l	equ	0xFE1
  1507                           
  1508                           	psect	bssCOMRAM
  1509  000029                     __pbssCOMRAM:
  1510                           	opt stack 0
  1511  000029                     _packet_sample:
  1512                           	opt stack 0
  1513  000029                     	ds	10
  1514  000033                     medianFilter@bufferIndex:
  1515                           	opt stack 0
  1516  000033                     	ds	5
  1517  000038                     _sample_delay:
  1518                           	opt stack 0
  1519  000038                     	ds	1
  1520  000039                     _scanInterrupted:
  1521                           	opt stack 0
  1522  000039                     	ds	1
  1523  00003A                     _sampling_flag:
  1524                           	opt stack 0
  1525  00003A                     	ds	1
  1526  00003B                     _currentScanSensor:
  1527                           	opt stack 0
  1528  00003B                     	ds	1
  1529  00003C                     _mtouch_time_toScan:
  1530                           	opt stack 0
  1531  00003C                     	ds	1
  1532  00003D                     _eusart2RxCount:
  1533                           	opt stack 0
  1534  00003D                     	ds	1
  1535  00003E                     _eusart2RxTail:
  1536                           	opt stack 0
  1537  00003E                     	ds	1
  1538  00003F                     _eusart2RxHead:
  1539                           	opt stack 0
  1540  00003F                     	ds	1
  1541  000040                     _eusart2TxTail:
  1542                           	opt stack 0
  1543  000040                     	ds	1
  1544  000041                     _eusart2TxHead:
  1545                           	opt stack 0
  1546  000041                     	ds	1
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1l	equ	0xFE1
  1555                           
  1556                           	psect	dataCOMRAM
  1557  000042                     __pdataCOMRAM:
  1558                           	opt stack 0
  1559  000042                     _callback_notPressed:
  1560                           	opt stack 0
  1561  000042                     	ds	3
  1562  000045                     _callback_pressed:
  1563                           	opt stack 0
  1564  000045                     	ds	3
  1565  000048                     _callback_sampled:
  1566                           	opt stack 0
  1567  000048                     	ds	3
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1l	equ	0xFE1
  1576                           
  1577                           	psect	bssBANK0
  1578  000060                     __pbssBANK0:
  1579                           	opt stack 0
  1580  000060                     _sensor_medianBuffer:
  1581                           	opt stack 0
  1582  000060                     	ds	30
  1583  00007E                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:
  1584                           	opt stack 0
  1585  00007E                     	ds	3
  1586  000081                     _freq_index:
  1587                           	opt stack 0
  1588  000081                     	ds	1
  1589  000082                     _mtouch_sensor:
  1590                           	opt stack 0
  1591  000082                     	ds	45
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           fsr1l	equ	0xFE1
  1600                           
  1601                           	psect	dataBANK0
  1602  0000D4                     __pdataBANK0:
  1603                           	opt stack 0
  1604  0000D4                     _Button_StateMachine:
  1605                           	opt stack 0
  1606  0000D4                     	ds	9
  1607  0000DD                     _freq_hop:
  1608                           	opt stack 0
  1609  0000DD                     	ds	3
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postdec1	equ	0xFE5
  1617                           fsr1l	equ	0xFE1
  1618                           
  1619                           	psect	bssBANK1
  1620  000100                     __pbssBANK1:
  1621                           	opt stack 0
  1622  000100                     _eusart2RxBuffer:
  1623                           	opt stack 0
  1624  000100                     	ds	64
  1625  000140                     _mtouch_button:
  1626                           	opt stack 0
  1627  000140                     	ds	80
  1628  000190                     _line:
  1629                           	opt stack 0
  1630  000190                     	ds	64
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	bssBANK2
  1641  000200                     __pbssBANK2:
  1642                           	opt stack 0
  1643  000200                     _eusart2TxBuffer:
  1644                           	opt stack 0
  1645  000200                     	ds	64
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1l	equ	0xFE1
  1654                           
  1655                           	psect	cstackBANK0
  1656  0000AF                     __pcstackBANK0:
  1657                           	opt stack 0
  1658  0000AF                     ?_abs:
  1659                           	opt stack 0
  1660  0000AF                     ?_medianFilter:
  1661                           	opt stack 0
  1662  0000AF                     ?_strlen:
  1663                           	opt stack 0
  1664  0000AF                     ?_strcmp:
  1665                           	opt stack 0
  1666  0000AF                     ?_MTOUCH_Sensor_RawSample_Get:
  1667                           	opt stack 0
  1668  0000AF                     ?___lwdiv:
  1669                           	opt stack 0
  1670  0000AF                     EUSART2_Read@readValue:
  1671                           	opt stack 0
  1672  0000AF                     EUSART2_Write@txData:
  1673                           	opt stack 0
  1674  0000AF                     MTOUCH_needReburst@needReburst:
  1675                           	opt stack 0
  1676  0000AF                     Sensor_SetTrisBit@TrisBit:
  1677                           	opt stack 0
  1678  0000AF                     MTOUCH_Sensor_Enable@sensor:
  1679                           	opt stack 0
  1680  0000AF                     MTOUCH_Sensor_isEnabled@sensor:
  1681                           	opt stack 0
  1682  0000AF                     MTOUCH_Sensor_Calibrate@sensor:
  1683                           	opt stack 0
  1684  0000AF                     MTOUCH_Sensor_isCalibrated@sensor:
  1685                           	opt stack 0
  1686  0000AF                     MTOUCH_Sensor_wasSampled@sensor:
  1687                           	opt stack 0
  1688  0000AF                     MTOUCH_Button_State_Get@name:
  1689                           	opt stack 0
  1690  0000AF                     Sensor_isEnabled@sensor:
  1691                           	opt stack 0
  1692  0000AF                     Sensor_setActive@sensor:
  1693                           	opt stack 0
  1694  0000AF                     Sensor_setInactive@sensor:
  1695                           	opt stack 0
  1696  0000AF                     Sensor_isCalibrated@sensor:
  1697                           	opt stack 0
  1698  0000AF                     Sensor_isCalibratingAcqTime@sensor:
  1699                           	opt stack 0
  1700  0000AF                     Sensor_Sampled_Reset@sensor:
  1701                           	opt stack 0
  1702  0000AF                     Button_Tick_helper@button:
  1703                           	opt stack 0
  1704  0000AF                     Button_Deviation_Update@button:
  1705                           	opt stack 0
  1706  0000AF                     Button_Baseline_Update@button:
  1707                           	opt stack 0
  1708  0000AF                     abs@a:
  1709                           	opt stack 0
  1710  0000AF                     ___lwdiv@dividend:
  1711                           	opt stack 0
  1712  0000AF                     memcpy@d1:
  1713                           	opt stack 0
  1714  0000AF                     strcmp@s1:
  1715                           	opt stack 0
  1716  0000AF                     strlen@s:
  1717                           	opt stack 0
  1718  0000AF                     IOCBF2_SetInterruptHandler@InterruptHandler:
  1719                           	opt stack 0
  1720  0000AF                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1721                           	opt stack 0
  1722  0000AF                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1723                           	opt stack 0
  1724                           
  1725                           ; 3 bytes @ 0x0
  1726  0000AF                     	ds	1
  1727  0000B0                     putch@txData:
  1728                           	opt stack 0
  1729  0000B0                     Sensor_SetTrisBit@sensor:
  1730                           	opt stack 0
  1731  0000B0                     MTOUCH_Button_Initialize@name:
  1732                           	opt stack 0
  1733  0000B0                     MTOUCH_Button_isPressed@name:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0x1
  1737  0000B0                     	ds	1
  1738  0000B1                     ??_Sensor_scheduleNextScan:
  1739  0000B1                     ??_abs:
  1740  0000B1                     ??_medianFilter:
  1741  0000B1                     ??_Button_Deviation_Update:
  1742  0000B1                     ??_Button_Baseline_Update:
  1743  0000B1                     ??_strlen:
  1744  0000B1                     MTOUCH_Sensor_Initialize@sensor:
  1745                           	opt stack 0
  1746  0000B1                     MTOUCH_Sensor_RawSample_Get@name:
  1747                           	opt stack 0
  1748  0000B1                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
  1749                           	opt stack 0
  1750  0000B1                     MTOUCH_Button_Initialize@button:
  1751                           	opt stack 0
  1752  0000B1                     ___lwdiv@divisor:
  1753                           	opt stack 0
  1754  0000B1                     memcpy@s1:
  1755                           	opt stack 0
  1756  0000B1                     strcmp@s2:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x2
  1760  0000B1                     	ds	1
  1761  0000B2                     Button_Reading_Update_Helper@button:
  1762                           	opt stack 0
  1763  0000B2                     Button_Baseline_Initialize@button:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x3
  1767  0000B2                     	ds	1
  1768  0000B3                     ??_Sensor_FrequencyHopping_Autotune_Process:
  1769  0000B3                     ??_strcmp:
  1770  0000B3                     Sensor_scheduleNextScan@state:
  1771                           	opt stack 0
  1772  0000B3                     MTOUCH_Button_Tick@i:
  1773                           	opt stack 0
  1774  0000B3                     ___lwdiv@counter:
  1775                           	opt stack 0
  1776  0000B3                     memcpy@n:
  1777                           	opt stack 0
  1778  0000B3                     strlen@cp:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x4
  1782  0000B3                     	ds	1
  1783  0000B4                     ??_Button_Baseline_Initialize:
  1784  0000B4                     ??_Button_Reading_Update_Helper:
  1785  0000B4                     Sensor_scheduleNextScan@skipScan:
  1786                           	opt stack 0
  1787  0000B4                     strcmp@r:
  1788                           	opt stack 0
  1789  0000B4                     ___lwdiv@quotient:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x5
  1793  0000B4                     	ds	1
  1794  0000B5                     medianFilter@sensor:
  1795                           	opt stack 0
  1796  0000B5                     memcpy@tmp:
  1797                           	opt stack 0
  1798  0000B5                     Sensor_scheduleNextScan@sensor:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x6
  1802  0000B5                     	ds	1
  1803  0000B6                     ?___lwmod:
  1804                           	opt stack 0
  1805  0000B6                     Sensor_RawSample_Update@sensor:
  1806                           	opt stack 0
  1807  0000B6                     Button_Reading_Update@button:
  1808                           	opt stack 0
  1809  0000B6                     ___lwmod@dividend:
  1810                           	opt stack 0
  1811  0000B6                     memcpy@d:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x7
  1815  0000B6                     	ds	1
  1816  0000B7                     Button_Deviation_Update@deviation:
  1817                           	opt stack 0
  1818                           
  1819                           ; 4 bytes @ 0x8
  1820  0000B7                     	ds	1
  1821  0000B8                     Sensor_RawSample_Update@result:
  1822                           	opt stack 0
  1823  0000B8                     Button_State_Initializing@button:
  1824                           	opt stack 0
  1825  0000B8                     Button_State_NotPressed@button:
  1826                           	opt stack 0
  1827  0000B8                     Button_State_Pressed@button:
  1828                           	opt stack 0
  1829  0000B8                     ___lwmod@divisor:
  1830                           	opt stack 0
  1831  0000B8                     memcpy@s:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x9
  1835  0000B8                     	ds	1
  1836  0000B9                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:
  1837                           	opt stack 0
  1838                           
  1839                           ; 1 bytes @ 0xA
  1840  0000B9                     	ds	1
  1841  0000BA                     ??_Button_State_Initializing:
  1842  0000BA                     ??_Button_State_NotPressed:
  1843  0000BA                     ??_Button_State_Pressed:
  1844  0000BA                     ??_Sensor_postAcquisitionProcess:
  1845  0000BA                     MTOUCH_Sensor_InitializeAll@sensor:
  1846                           	opt stack 0
  1847  0000BA                     MTOUCH_Button_InitializeAll@button:
  1848                           	opt stack 0
  1849  0000BA                     ___lwmod@counter:
  1850                           	opt stack 0
  1851  0000BA                     Sensor_FrequencyHopping_Autotune_Process@variance:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0xB
  1855  0000BA                     	ds	1
  1856  0000BB                     ?_printf:
  1857                           	opt stack 0
  1858  0000BB                     printf@f:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0xC
  1862  0000BB                     	ds	1
  1863  0000BC                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0xD
  1867  0000BC                     	ds	2
  1868  0000BE                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0xF
  1872  0000BE                     	ds	1
  1873  0000BF                     ??_printf:
  1874  0000BF                     ??_Button_Service:
  1875  0000BF                     Sensor_FrequencyHopping_Autotune_Process@sensor:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x10
  1879  0000BF                     	ds	1
  1880  0000C0                     Sensor_postAcquisitionProcess@name:
  1881                           	opt stack 0
  1882  0000C0                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:
  1883                           	opt stack 0
  1884  0000C0                     Button_Service@name:
  1885                           	opt stack 0
  1886  0000C0                     printf@ap:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x11
  1890  0000C0                     	ds	1
  1891  0000C1                     Sensor_postAcquisitionProcess@sensor:
  1892                           	opt stack 0
  1893  0000C1                     Button_Service@button:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x12
  1897  0000C1                     	ds	1
  1898  0000C2                     printf@flag:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x13
  1902  0000C2                     	ds	1
  1903  0000C3                     Sensor_FrequencyHopping@sensor:
  1904                           	opt stack 0
  1905  0000C3                     MTOUCH_Button_ServiceAll@button:
  1906                           	opt stack 0
  1907  0000C3                     printf@prec:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x14
  1911  0000C3                     	ds	1
  1912  0000C4                     MTOUCH_Sensor_SampleAll@sensor:
  1913                           	opt stack 0
  1914  0000C4                     printf@val:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x15
  1918  0000C4                     	ds	1
  1919  0000C5                     
  1920                           ; 1 bytes @ 0x16
  1921  0000C5                     	ds	1
  1922  0000C6                     printf@c:
  1923                           	opt stack 0
  1924                           
  1925                           ; 1 bytes @ 0x17
  1926  0000C6                     	ds	1
  1927  0000C7                     ringBufferLUT@line:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x18
  1931  0000C7                     	ds	2
  1932  0000C9                     ??_ringBufferLUT:
  1933                           
  1934                           ; 1 bytes @ 0x1A
  1935  0000C9                     	ds	1
  1936  0000CA                     ??_ringBufferPull:
  1937                           
  1938                           ; 1 bytes @ 0x1B
  1939  0000CA                     	ds	3
  1940  0000CD                     ringBufferPull@charNumber:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1E
  1944  0000CD                     	ds	2
  1945  0000CF                     ringBufferPull@index_1970:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x20
  1949  0000CF                     	ds	2
  1950  0000D1                     ringBufferPull@index:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x22
  1954  0000D1                     	ds	2
  1955  0000D3                     ??_main:
  1956                           
  1957                           ; 1 bytes @ 0x24
  1958  0000D3                     	ds	1
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           postdec1	equ	0xFE5
  1966                           fsr1l	equ	0xFE1
  1967                           
  1968                           	psect	cstackCOMRAM
  1969  000001                     __pcstackCOMRAM:
  1970                           	opt stack 0
  1971  000001                     ?i2_abs:
  1972                           	opt stack 0
  1973  000001                     ?i2___lwdiv:
  1974                           	opt stack 0
  1975  000001                     i2EUSART2_Write@txData:
  1976                           	opt stack 0
  1977  000001                     i2Sensor_SetTrisBit@TrisBit:
  1978                           	opt stack 0
  1979  000001                     i2MTOUCH_Sensor_isEnabled@sensor:
  1980                           	opt stack 0
  1981  000001                     i2MTOUCH_Sensor_wasSampled@sensor:
  1982                           	opt stack 0
  1983  000001                     Sensor_setCalibrated@sensor:
  1984                           	opt stack 0
  1985  000001                     Sensor_setCalibratAcqTime@sensor:
  1986                           	opt stack 0
  1987  000001                     Sensor_setSampled@sensor:
  1988                           	opt stack 0
  1989  000001                     i2Sensor_isCalibrated@sensor:
  1990                           	opt stack 0
  1991  000001                     i2Sensor_isCalibratingAcqTime@sensor:
  1992                           	opt stack 0
  1993  000001                     i2abs@a:
  1994                           	opt stack 0
  1995  000001                     i2___lwdiv@dividend:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x0
  1999  000001                     	ds	1
  2000  000002                     i2putch@txData:
  2001                           	opt stack 0
  2002  000002                     i2Sensor_SetTrisBit@sensor:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0x1
  2006  000002                     	ds	1
  2007  000003                     ??i2_Sensor_scheduleNextScan:
  2008  000003                     ??i2_abs:
  2009  000003                     i2___lwdiv@divisor:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x2
  2013  000003                     	ds	2
  2014  000005                     i2Sensor_scheduleNextScan@state:
  2015                           	opt stack 0
  2016  000005                     Sensor_autoCalibration@sensor:
  2017                           	opt stack 0
  2018  000005                     i2___lwdiv@quotient:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x4
  2022  000005                     	ds	1
  2023  000006                     i2Sensor_scheduleNextScan@skipScan:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  000006                     	ds	1
  2028  000007                     ??_Sensor_autoCalibration:
  2029  000007                     i2___lwdiv@counter:
  2030                           	opt stack 0
  2031  000007                     i2Sensor_scheduleNextScan@sensor:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x6
  2035  000007                     	ds	1
  2036  000008                     ?i2___lwmod:
  2037                           	opt stack 0
  2038  000008                     i2___lwmod@dividend:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x7
  2042  000008                     	ds	2
  2043  00000A                     i2___lwmod@divisor:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x9
  2047  00000A                     	ds	2
  2048  00000C                     i2___lwmod@counter:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0xB
  2052  00000C                     	ds	1
  2053  00000D                     ?i2_printf:
  2054                           	opt stack 0
  2055  00000D                     Sensor_autoCalibration@name:
  2056                           	opt stack 0
  2057  00000D                     i2printf@f:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0xC
  2061  00000D                     	ds	1
  2062  00000E                     MTOUCH_Sensor_Service@sensor:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0xD
  2066  00000E                     	ds	1
  2067  00000F                     ??i2_printf:
  2068                           
  2069                           ; 1 bytes @ 0xE
  2070  00000F                     	ds	1
  2071  000010                     i2printf@ap:
  2072                           	opt stack 0
  2073                           
  2074                           ; 2 bytes @ 0xF
  2075  000010                     	ds	2
  2076  000012                     i2printf@flag:
  2077                           	opt stack 0
  2078                           
  2079                           ; 1 bytes @ 0x11
  2080  000012                     	ds	1
  2081  000013                     i2printf@prec:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x12
  2085  000013                     	ds	1
  2086  000014                     i2printf@val:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x13
  2090  000014                     	ds	2
  2091  000016                     i2printf@c:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x15
  2095  000016                     	ds	1
  2096  000017                     ??_INTERRUPT_InterruptManagerHigh:
  2097                           
  2098                           ; 1 bytes @ 0x16
  2099  000017                     	ds	18
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           postinc0	equ	0xFEE
  2105                           wreg	equ	0xFE8
  2106                           postdec1	equ	0xFE5
  2107                           fsr1l	equ	0xFE1
  2108                           
  2109 ;;
  2110 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2111 ;;
  2112 ;; *************** function _main *****************
  2113 ;; Defined at:
  2114 ;;		line 73 in file "main.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;Total ram usage:        1 bytes
  2133 ;; Hardware stack levels required when called:   11
  2134 ;; This function calls:
  2135 ;;		_IOCBF2_SetInterruptHandler
  2136 ;;		_MTOUCH_Button_State_Get
  2137 ;;		_MTOUCH_Service_Mainloop
  2138 ;;		_SYSTEM_Initialize
  2139 ;;		_printResetMessage
  2140 ;;		_ringBufferPull
  2141 ;; This function is called by:
  2142 ;;		Startup code after reset
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text0
  2147  01157C                     __ptext0:
  2148                           	opt stack 0
  2149  01157C                     _main:
  2150                           	opt stack 20
  2151                           
  2152                           ;main.c: 76: SYSTEM_Initialize();
  2153                           
  2154                           ;incstack = 0
  2155  01157C  ECB4  F091         	call	_SYSTEM_Initialize	;wreg free
  2156                           
  2157                           ;main.c: 79: IOCBF2_SetInterruptHandler(DTR_Callback);
  2158  011580  0ECE               	movlw	low _DTR_Callback
  2159  011582  0100               	movlb	0	; () banked
  2160  011584  6FAF               	movwf	IOCBF2_SetInterruptHandler@InterruptHandler& (0+255),b
  2161  011586  0E24               	movlw	high _DTR_Callback
  2162  011588  6FB0               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2163  01158A  0E01               	movlw	low (_DTR_Callback shr (0+16))
  2164  01158C  6FB1               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  2165  01158E  EC3F  F092         	call	_IOCBF2_SetInterruptHandler	;wreg free
  2166                           
  2167                           ;main.c: 82: (INTCONbits.GIEH = 1);
  2168  011592  8EF2               	bsf	intcon,7,c	;volatile
  2169                           
  2170                           ;main.c: 85: (INTCONbits.GIEL = 1);
  2171  011594  8CF2               	bsf	intcon,6,c	;volatile
  2172                           
  2173                           ;main.c: 88: printResetMessage();
  2174  011596  ECD9  F08E         	call	_printResetMessage	;wreg free
  2175  01159A                     
  2176                           ;main.c: 91: {
  2177                           ;main.c: 93: if (eusart2RxStringReady) {
  2178  01159A  B24F               	btfsc	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
  2179                           
  2180                           ;main.c: 94: ringBufferPull();
  2181  01159C  EC15  F087         	call	_ringBufferPull	;wreg free
  2182                           
  2183                           ;main.c: 95: }
  2184                           ;main.c: 98: MTOUCH_Service_Mainloop();
  2185  0115A0  ECEA  F090         	call	_MTOUCH_Service_Mainloop	;wreg free
  2186                           
  2187                           ;main.c: 101: LATFbits.LATF0 = ~MTOUCH_Button_State_Get(Button0);
  2188  0115A4  0E00               	movlw	0
  2189  0115A6  ECAB  F090         	call	_MTOUCH_Button_State_Get
  2190  0115AA  0AFF               	xorlw	255
  2191  0115AC  0100               	movlb	0	; () banked
  2192  0115AE  6FD3               	movwf	??_main& (0+255),b
  2193  0115B0  507E               	movf	3966,w,c	;volatile
  2194  0115B2  19D3               	xorwf	??_main& (0+255),w,b
  2195  0115B4  0BFE               	andlw	-2
  2196  0115B6  19D3               	xorwf	??_main& (0+255),w,b
  2197  0115B8  6E7E               	movwf	3966,c	;volatile
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;main.c: 102: LATFbits.LATF1 = ~MTOUCH_Button_State_Get(Button1);
  2201  0115BA  0E01               	movlw	1
  2202  0115BC  ECAB  F090         	call	_MTOUCH_Button_State_Get
  2203  0115C0  0AFF               	xorlw	255
  2204  0115C2  0100               	movlb	0	; () banked
  2205  0115C4  6FD3               	movwf	??_main& (0+255),b
  2206  0115C6  47D3               	rlncf	??_main& (0+255),f,b
  2207  0115C8  507E               	movf	3966,w,c	;volatile
  2208  0115CA  19D3               	xorwf	??_main& (0+255),w,b
  2209  0115CC  0BFD               	andlw	-3
  2210  0115CE  19D3               	xorwf	??_main& (0+255),w,b
  2211  0115D0  6E7E               	movwf	3966,c	;volatile
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 103: LATFbits.LATF2 = ~MTOUCH_Button_State_Get(Button2);
  2215  0115D2  0E02               	movlw	2
  2216  0115D4  ECAB  F090         	call	_MTOUCH_Button_State_Get
  2217  0115D8  0AFF               	xorlw	255
  2218  0115DA  0100               	movlb	0	; () banked
  2219  0115DC  6FD3               	movwf	??_main& (0+255),b
  2220  0115DE  47D3               	rlncf	??_main& (0+255),f,b
  2221  0115E0  47D3               	rlncf	??_main& (0+255),f,b
  2222  0115E2  507E               	movf	3966,w,c	;volatile
  2223  0115E4  19D3               	xorwf	??_main& (0+255),w,b
  2224  0115E6  0BFB               	andlw	-5
  2225  0115E8  19D3               	xorwf	??_main& (0+255),w,b
  2226  0115EA  6E7E               	movwf	3966,c	;volatile
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;main.c: 104: LATFbits.LATF3 = ~MTOUCH_Button_State_Get(Button3);
  2230  0115EC  0E03               	movlw	3
  2231  0115EE  ECAB  F090         	call	_MTOUCH_Button_State_Get
  2232  0115F2  0AFF               	xorlw	255
  2233  0115F4  0100               	movlb	0	; () banked
  2234  0115F6  6FD3               	movwf	??_main& (0+255),b
  2235  0115F8  47D3               	rlncf	??_main& (0+255),f,b
  2236  0115FA  47D3               	rlncf	??_main& (0+255),f,b
  2237  0115FC  47D3               	rlncf	??_main& (0+255),f,b
  2238  0115FE  507E               	movf	3966,w,c	;volatile
  2239  011600  19D3               	xorwf	??_main& (0+255),w,b
  2240  011602  0BF7               	andlw	-9
  2241  011604  19D3               	xorwf	??_main& (0+255),w,b
  2242  011606  6E7E               	movwf	3966,c	;volatile
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 105: LATFbits.LATF4 = ~MTOUCH_Button_State_Get(Button4);
  2246  011608  0E04               	movlw	4
  2247  01160A  ECAB  F090         	call	_MTOUCH_Button_State_Get
  2248  01160E  0AFF               	xorlw	255
  2249  011610  0100               	movlb	0	; () banked
  2250  011612  6FD3               	movwf	??_main& (0+255),b
  2251  011614  3BD3               	swapf	??_main& (0+255),f,b
  2252  011616  507E               	movf	3966,w,c	;volatile
  2253  011618  19D3               	xorwf	??_main& (0+255),w,b
  2254  01161A  0BEF               	andlw	-17
  2255  01161C  19D3               	xorwf	??_main& (0+255),w,b
  2256  01161E  6E7E               	movwf	3966,c	;volatile
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;main.c: 131: __nop();
  2260  011620  F000               	nop	
  2261  011622  D7BB               	goto	l939
  2262  011624                     __end_of_main:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           intcon	equ	0xFF2
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1l	equ	0xFE1
  2273                           
  2274 ;; *************** function _ringBufferPull *****************
  2275 ;; Defined at:
  2276 ;;		line 8 in file "ring_buffer_interface.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  index           2   32[BANK0 ] int 
  2281 ;;  index           2   34[BANK0 ] int 
  2282 ;;  charNumber      2   30[BANK0 ] int 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;Total ram usage:        9 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    9
  2299 ;; This function calls:
  2300 ;;		_EUSART2_Read
  2301 ;;		_ringBufferLUT
  2302 ;;		_strlen
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text1
  2309  010E2A                     __ptext1:
  2310                           	opt stack 0
  2311  010E2A                     _ringBufferPull:
  2312                           	opt stack 21
  2313                           
  2314                           ;ring_buffer_interface.c: 10: int charNumber = eusart2RxCount;
  2315                           
  2316                           ;incstack = 0
  2317  010E2A  C03D  F0CD         	movff	_eusart2RxCount,ringBufferPull@charNumber	;volatile
  2318  010E2E  0100               	movlb	0	; () banked
  2319  010E30  6BCE               	clrf	(ringBufferPull@charNumber+1)& (0+255),b
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;ring_buffer_interface.c: 13: for (int index = 0; index < 64; index++) {
  2323  010E32  0E00               	movlw	0
  2324  010E34  6FD2               	movwf	(ringBufferPull@index+1)& (0+255),b
  2325  010E36  0E00               	movlw	0
  2326  010E38  6FD1               	movwf	ringBufferPull@index& (0+255),b
  2327  010E3A                     l5257:
  2328                           
  2329                           ; BSR set to: 0
  2330  010E3A  BFD2               	btfsc	(ringBufferPull@index+1)& (0+255),7,b
  2331  010E3C  D006               	goto	l970
  2332  010E3E  51D2               	movf	(ringBufferPull@index+1)& (0+255),w,b
  2333  010E40  E10F               	bnz	l5267
  2334  010E42  0E40               	movlw	64
  2335  010E44  5DD1               	subwf	ringBufferPull@index& (0+255),w,b
  2336  010E46  B0D8               	btfsc	status,0,c
  2337  010E48  D00B               	goto	u5880
  2338  010E4A                     l970:
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;ring_buffer_interface.c: 15: line[index] = '\0';
  2342                           
  2343                           ; BSR set to: 0
  2344  010E4A  0E90               	movlw	low _line
  2345  010E4C  25D1               	addwf	ringBufferPull@index& (0+255),w,b
  2346  010E4E  6ED9               	movwf	fsr2l,c
  2347  010E50  0E01               	movlw	high _line
  2348  010E52  21D2               	addwfc	(ringBufferPull@index+1)& (0+255),w,b
  2349  010E54  6EDA               	movwf	fsr2h,c
  2350  010E56  0E00               	movlw	0
  2351  010E58  6EDF               	movwf	indf2,c
  2352                           
  2353                           ; BSR set to: 0
  2354  010E5A  4BD1               	infsnz	ringBufferPull@index& (0+255),f,b
  2355  010E5C  2BD2               	incf	(ringBufferPull@index+1)& (0+255),f,b
  2356  010E5E  D7ED               	goto	l5257
  2357  010E60                     u5880:
  2358  010E60                     l5267:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;ring_buffer_interface.c: 17: }
  2362                           ;ring_buffer_interface.c: 20: for(int index = 0; index < charNumber; index++){
  2363  010E60  0E00               	movlw	0
  2364  010E62  6FD0               	movwf	(ringBufferPull@index_1970+1)& (0+255),b
  2365  010E64  0E00               	movlw	0
  2366  010E66  6FCF               	movwf	ringBufferPull@index_1970& (0+255),b
  2367  010E68  D00E               	goto	l972
  2368  010E6A                     
  2369                           ; BSR set to: 0
  2370                           ;ring_buffer_interface.c: 22: line[index] = EUSART2_Read();
  2371                           
  2372                           ; BSR set to: 0
  2373  010E6A  EC36  F08F         	call	_EUSART2_Read	;wreg free
  2374  010E6E  0100               	movlb	0	; () banked
  2375  010E70  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2376  010E72  0E90               	movlw	low _line
  2377  010E74  25CF               	addwf	ringBufferPull@index_1970& (0+255),w,b
  2378  010E76  6ED9               	movwf	fsr2l,c
  2379  010E78  0E01               	movlw	high _line
  2380  010E7A  21D0               	addwfc	(ringBufferPull@index_1970+1)& (0+255),w,b
  2381  010E7C  6EDA               	movwf	fsr2h,c
  2382  010E7E  C0CA  FFDF         	movff	??_ringBufferPull,indf2
  2383                           
  2384                           ; BSR set to: 0
  2385  010E82  4BCF               	infsnz	ringBufferPull@index_1970& (0+255),f,b
  2386  010E84  2BD0               	incf	(ringBufferPull@index_1970+1)& (0+255),f,b
  2387  010E86                     l972:
  2388                           
  2389                           ; BSR set to: 0
  2390                           
  2391                           ; BSR set to: 0
  2392  010E86  51CD               	movf	ringBufferPull@charNumber& (0+255),w,b
  2393  010E88  5DCF               	subwf	ringBufferPull@index_1970& (0+255),w,b
  2394  010E8A  51D0               	movf	(ringBufferPull@index_1970+1)& (0+255),w,b
  2395  010E8C  0A80               	xorlw	128
  2396  010E8E  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2397  010E90  51CE               	movf	(ringBufferPull@charNumber+1)& (0+255),w,b
  2398  010E92  0A80               	xorlw	128
  2399  010E94  59CA               	subwfb	??_ringBufferPull& (0+255),w,b
  2400  010E96  A0D8               	btfss	status,0,c
  2401  010E98  D7E8               	goto	l973
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;ring_buffer_interface.c: 24: }
  2405                           ;ring_buffer_interface.c: 27: eusart2RxTail = eusart2RxHead;
  2406  010E9A  C03F  F03E         	movff	_eusart2RxHead,_eusart2RxTail	;volatile
  2407                           
  2408                           ;ring_buffer_interface.c: 30: while((line[strlen(line) - 1] == (int) '\n') ||
  2409                           ;ring_buffer_interface.c: 31: (line[strlen(line) - 1] == (int) '\r')) {
  2410  010E9E  D017               	goto	l975
  2411  010EA0                     
  2412                           ; BSR set to: 0
  2413                           ;ring_buffer_interface.c: 34: line[strlen(line) - 1] = '\0';
  2414                           
  2415                           ; BSR set to: 0
  2416  010EA0  0EFF               	movlw	255
  2417  010EA2  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2418  010EA4  0EFF               	movlw	255
  2419  010EA6  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2420  010EA8  0E90               	movlw	low _line
  2421  010EAA  6FAF               	movwf	strlen@s& (0+255),b
  2422  010EAC  0E01               	movlw	high _line
  2423  010EAE  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2424  010EB0  ECBA  F08E         	call	_strlen	;wreg free
  2425  010EB4  0100               	movlb	0	; () banked
  2426  010EB6  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2427  010EB8  27AF               	addwf	?_strlen& (0+255),f,b
  2428  010EBA  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2429  010EBC  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2430  010EBE  0E90               	movlw	low _line
  2431  010EC0  25AF               	addwf	?_strlen& (0+255),w,b
  2432  010EC2  6ED9               	movwf	fsr2l,c
  2433  010EC4  0E01               	movlw	high _line
  2434  010EC6  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2435  010EC8  6EDA               	movwf	fsr2h,c
  2436  010ECA  0E00               	movlw	0
  2437  010ECC  6EDF               	movwf	indf2,c
  2438  010ECE                     l975:
  2439                           
  2440                           ; BSR set to: 0
  2441  010ECE  0EFF               	movlw	255
  2442  010ED0  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2443  010ED2  0EFF               	movlw	255
  2444  010ED4  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2445  010ED6  0E90               	movlw	low _line
  2446  010ED8  6FAF               	movwf	strlen@s& (0+255),b
  2447  010EDA  0E01               	movlw	high _line
  2448  010EDC  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2449  010EDE  ECBA  F08E         	call	_strlen	;wreg free
  2450  010EE2  0100               	movlb	0	; () banked
  2451  010EE4  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2452  010EE6  27AF               	addwf	?_strlen& (0+255),f,b
  2453  010EE8  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2454  010EEA  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2455  010EEC  0E90               	movlw	low _line
  2456  010EEE  25AF               	addwf	?_strlen& (0+255),w,b
  2457  010EF0  6ED9               	movwf	fsr2l,c
  2458  010EF2  0E01               	movlw	high _line
  2459  010EF4  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2460  010EF6  6EDA               	movwf	fsr2h,c
  2461  010EF8  0E0A               	movlw	10
  2462  010EFA  18DE               	xorwf	postinc2,w,c
  2463  010EFC  B4D8               	btfsc	status,2,c
  2464  010EFE  D7D0               	goto	l976
  2465                           
  2466                           ; BSR set to: 0
  2467  010F00  0EFF               	movlw	255
  2468  010F02  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2469  010F04  0EFF               	movlw	255
  2470  010F06  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2471  010F08  0E90               	movlw	low _line
  2472  010F0A  6FAF               	movwf	strlen@s& (0+255),b
  2473  010F0C  0E01               	movlw	high _line
  2474  010F0E  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2475  010F10  ECBA  F08E         	call	_strlen	;wreg free
  2476  010F14  0100               	movlb	0	; () banked
  2477  010F16  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2478  010F18  27AF               	addwf	?_strlen& (0+255),f,b
  2479  010F1A  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2480  010F1C  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2481  010F1E  0E90               	movlw	low _line
  2482  010F20  25AF               	addwf	?_strlen& (0+255),w,b
  2483  010F22  6ED9               	movwf	fsr2l,c
  2484  010F24  0E01               	movlw	high _line
  2485  010F26  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2486  010F28  6EDA               	movwf	fsr2h,c
  2487  010F2A  0E0D               	movlw	13
  2488  010F2C  18DE               	xorwf	postinc2,w,c
  2489  010F2E  B4D8               	btfsc	status,2,c
  2490  010F30  D7B7               	goto	l976
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;ring_buffer_interface.c: 36: }
  2494                           ;ring_buffer_interface.c: 40: eusart2RxStringReady = 0;
  2495  010F32  924F               	bcf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;ring_buffer_interface.c: 43: ringBufferLUT(line);
  2499  010F34  0E90               	movlw	low _line
  2500  010F36  6FC7               	movwf	ringBufferLUT@line& (0+255),b
  2501  010F38  0E01               	movlw	high _line
  2502  010F3A  6FC8               	movwf	(ringBufferLUT@line+1)& (0+255),b
  2503  010F3C  EC00  F080         	call	_ringBufferLUT	;wreg free
  2504  010F40  0012               	return		;funcret
  2505  010F42                     __end_of_ringBufferPull:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           intcon	equ	0xFF2
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           postdec1	equ	0xFE5
  2515                           fsr1l	equ	0xFE1
  2516                           indf2	equ	0xFDF
  2517                           postinc2	equ	0xFDE
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function _strlen *****************
  2523 ;; Defined at:
  2524 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2527 ;;		 -> line(64), 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  2530 ;;		 -> line(64), 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  2    0[BANK0 ] unsigned int 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2541 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2544 ;;Total ram usage:        6 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    5
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_ringBufferPull
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text2
  2555  011D74                     __ptext2:
  2556                           	opt stack 0
  2557  011D74                     _strlen:
  2558                           	opt stack 24
  2559                           
  2560                           ;incstack = 0
  2561  011D74  C0AF  F0B3         	movff	strlen@s,strlen@cp
  2562  011D78  C0B0  F0B4         	movff	strlen@s+1,strlen@cp+1
  2563  011D7C  D003               	goto	l1611
  2564  011D7E  0100               	movlb	0	; () banked
  2565  011D80  4BB3               	infsnz	strlen@cp& (0+255),f,b
  2566  011D82  2BB4               	incf	(strlen@cp+1)& (0+255),f,b
  2567  011D84                     l1611:
  2568                           
  2569                           ; BSR set to: 0
  2570  011D84  C0B3  FFD9         	movff	strlen@cp,fsr2l
  2571  011D88  C0B4  FFDA         	movff	strlen@cp+1,fsr2h
  2572  011D8C  50DF               	movf	indf2,w,c
  2573  011D8E  A4D8               	btfss	status,2,c
  2574  011D90  D7F6               	goto	l1612
  2575  011D92  C0AF  F0B1         	movff	strlen@s,??_strlen
  2576  011D96  C0B0  F0B2         	movff	strlen@s+1,??_strlen+1
  2577  011D9A  0100               	movlb	0	; () banked
  2578  011D9C  1FB1               	comf	??_strlen& (0+255),f,b
  2579  011D9E  1FB2               	comf	(??_strlen+1)& (0+255),f,b
  2580  011DA0  4BB1               	infsnz	??_strlen& (0+255),f,b
  2581  011DA2  2BB2               	incf	(??_strlen+1)& (0+255),f,b
  2582  011DA4  51B3               	movf	strlen@cp& (0+255),w,b
  2583  011DA6  25B1               	addwf	??_strlen& (0+255),w,b
  2584  011DA8  6FAF               	movwf	?_strlen& (0+255),b
  2585  011DAA  51B4               	movf	(strlen@cp+1)& (0+255),w,b
  2586  011DAC  21B2               	addwfc	(??_strlen+1)& (0+255),w,b
  2587  011DAE  6FB0               	movwf	(?_strlen+1)& (0+255),b
  2588  011DB0  0012               	return	
  2589  011DB2                     __end_of_strlen:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           intcon	equ	0xFF2
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _ringBufferLUT *****************
  2607 ;; Defined at:
  2608 ;;		line 9 in file "ring_buffer_LUT.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  line            2   24[BANK0 ] PTR unsigned char 
  2611 ;;		 -> line(64), 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2627 ;;Total ram usage:        3 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    8
  2630 ;; This function calls:
  2631 ;;		_MTOUCH_Button_isPressed
  2632 ;;		_printf
  2633 ;;		_strcmp
  2634 ;; This function is called by:
  2635 ;;		_ringBufferPull
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text3
  2640  010000                     __ptext3:
  2641                           	opt stack 0
  2642  010000                     _ringBufferLUT:
  2643                           	opt stack 21
  2644                           
  2645                           ;ring_buffer_LUT.c: 14: if (USB_DTR == 1) {
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;incstack = 0
  2649  010000  A04F               	btfss	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
  2650  010002  0012               	return	
  2651                           
  2652                           ;ring_buffer_LUT.c: 17: if((0 == strcmp(line, "LEDs On"))) {
  2653  010004  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2654  010008  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2655  01000C  0ECF               	movlw	low STR_6
  2656  01000E  0100               	movlb	0	; () banked
  2657  010010  6FB1               	movwf	strcmp@s2& (0+255),b
  2658  010012  0EFF               	movlw	high STR_6
  2659  010014  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2660  010016  ECDE  F08D         	call	_strcmp	;wreg free
  2661  01001A  0100               	movlb	0	; () banked
  2662  01001C  51AF               	movf	?_strcmp& (0+255),w,b
  2663  01001E  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2664  010020  A4D8               	btfss	status,2,c
  2665  010022  D017               	goto	l1000
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;ring_buffer_LUT.c: 20: LATF = 0x00;
  2669  010024  0E00               	movlw	0
  2670  010026  6E7E               	movwf	3966,c	;volatile
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;ring_buffer_LUT.c: 23: printf("\n\r");
  2674  010028  0EA6               	movlw	low (STR_8+15)
  2675  01002A  6FBB               	movwf	printf@f& (0+255),b
  2676  01002C  0EFF               	movlw	high (STR_8+15)
  2677  01002E  6FBC               	movwf	(printf@f+1)& (0+255),b
  2678  010030  EC42  F085         	call	_printf	;wreg free
  2679                           
  2680                           ;ring_buffer_LUT.c: 25: printf("    LATF = 0x00\n\r");
  2681  010034  0E97               	movlw	low STR_8
  2682  010036  0100               	movlb	0	; () banked
  2683  010038  6FBB               	movwf	printf@f& (0+255),b
  2684  01003A  0EFF               	movlw	high STR_8
  2685  01003C  6FBC               	movwf	(printf@f+1)& (0+255),b
  2686  01003E  EC42  F085         	call	_printf	;wreg free
  2687                           
  2688                           ;ring_buffer_LUT.c: 28: printf("\n\r");
  2689  010042  0EA6               	movlw	low (STR_8+15)
  2690  010044  0100               	movlb	0	; () banked
  2691  010046  6FBB               	movwf	printf@f& (0+255),b
  2692  010048  0EFF               	movlw	high (STR_8+15)
  2693  01004A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2694  01004C  EC42  F085         	call	_printf	;wreg free
  2695                           
  2696                           ;ring_buffer_LUT.c: 30: }
  2697  010050  0012               	return	
  2698  010052                     l1000:
  2699                           
  2700                           ;ring_buffer_LUT.c: 34: else if((0 == strcmp(line, "LEDs Off"))) {
  2701  010052  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2702  010056  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2703  01005A  0EC6               	movlw	low STR_10
  2704  01005C  0100               	movlb	0	; () banked
  2705  01005E  6FB1               	movwf	strcmp@s2& (0+255),b
  2706  010060  0EFF               	movlw	high STR_10
  2707  010062  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2708  010064  ECDE  F08D         	call	_strcmp	;wreg free
  2709  010068  0100               	movlb	0	; () banked
  2710  01006A  51AF               	movf	?_strcmp& (0+255),w,b
  2711  01006C  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2712  01006E  A4D8               	btfss	status,2,c
  2713  010070  D016               	goto	l1002
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;ring_buffer_LUT.c: 37: LATF = 0xFF;
  2717  010072  687E               	setf	3966,c	;volatile
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;ring_buffer_LUT.c: 40: printf("\n\r");
  2721  010074  0EA6               	movlw	low (STR_8+15)
  2722  010076  6FBB               	movwf	printf@f& (0+255),b
  2723  010078  0EFF               	movlw	high (STR_8+15)
  2724  01007A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2725  01007C  EC42  F085         	call	_printf	;wreg free
  2726                           
  2727                           ;ring_buffer_LUT.c: 42: printf("LATF = 0xFF\n\r");
  2728  010080  0EB8               	movlw	low STR_12
  2729  010082  0100               	movlb	0	; () banked
  2730  010084  6FBB               	movwf	printf@f& (0+255),b
  2731  010086  0EFF               	movlw	high STR_12
  2732  010088  6FBC               	movwf	(printf@f+1)& (0+255),b
  2733  01008A  EC42  F085         	call	_printf	;wreg free
  2734                           
  2735                           ;ring_buffer_LUT.c: 45: printf("\n\r");
  2736  01008E  0EA6               	movlw	low (STR_8+15)
  2737  010090  0100               	movlb	0	; () banked
  2738  010092  6FBB               	movwf	printf@f& (0+255),b
  2739  010094  0EFF               	movlw	high (STR_8+15)
  2740  010096  6FBC               	movwf	(printf@f+1)& (0+255),b
  2741  010098  EC42  F085         	call	_printf	;wreg free
  2742                           
  2743                           ;ring_buffer_LUT.c: 47: }
  2744  01009C  0012               	return	
  2745  01009E                     l1002:
  2746                           
  2747                           ;ring_buffer_LUT.c: 50: else if((0 == strcmp(line, "Button States?"))) {
  2748  01009E  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2749  0100A2  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2750  0100A6  0EA9               	movlw	low STR_14
  2751  0100A8  0100               	movlb	0	; () banked
  2752  0100AA  6FB1               	movwf	strcmp@s2& (0+255),b
  2753  0100AC  0EFF               	movlw	high STR_14
  2754  0100AE  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2755  0100B0  ECDE  F08D         	call	_strcmp	;wreg free
  2756  0100B4  0100               	movlb	0	; () banked
  2757  0100B6  51AF               	movf	?_strcmp& (0+255),w,b
  2758  0100B8  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2759  0100BA  A4D8               	btfss	status,2,c
  2760  0100BC  D059               	goto	l1004
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;ring_buffer_LUT.c: 53: printf("\n\r");
  2764  0100BE  0EA6               	movlw	low (STR_8+15)
  2765  0100C0  6FBB               	movwf	printf@f& (0+255),b
  2766  0100C2  0EFF               	movlw	high (STR_8+15)
  2767  0100C4  6FBC               	movwf	(printf@f+1)& (0+255),b
  2768  0100C6  EC42  F085         	call	_printf	;wreg free
  2769                           
  2770                           ;ring_buffer_LUT.c: 56: printf("    Button 0: %d\n\r", MTOUCH_Button_isPressed(Button0))
      +                          ;
  2771  0100CA  0E38               	movlw	low STR_16
  2772  0100CC  0100               	movlb	0	; () banked
  2773  0100CE  6FBB               	movwf	printf@f& (0+255),b
  2774  0100D0  0EFF               	movlw	high STR_16
  2775  0100D2  6FBC               	movwf	(printf@f+1)& (0+255),b
  2776  0100D4  0E00               	movlw	0
  2777  0100D6  EC72  F08F         	call	_MTOUCH_Button_isPressed
  2778  0100DA  0100               	movlb	0	; () banked
  2779  0100DC  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2780  0100DE  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2781  0100E0  6FBD               	movwf	(?_printf+2)& (0+255),b
  2782  0100E2  6BBE               	clrf	(?_printf+3)& (0+255),b
  2783  0100E4  EC42  F085         	call	_printf	;wreg free
  2784                           
  2785                           ;ring_buffer_LUT.c: 57: printf("    Button 1: %d\n\r", MTOUCH_Button_isPressed(Button1))
      +                          ;
  2786  0100E8  0E4B               	movlw	low STR_17
  2787  0100EA  0100               	movlb	0	; () banked
  2788  0100EC  6FBB               	movwf	printf@f& (0+255),b
  2789  0100EE  0EFF               	movlw	high STR_17
  2790  0100F0  6FBC               	movwf	(printf@f+1)& (0+255),b
  2791  0100F2  0E01               	movlw	1
  2792  0100F4  EC72  F08F         	call	_MTOUCH_Button_isPressed
  2793  0100F8  0100               	movlb	0	; () banked
  2794  0100FA  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2795  0100FC  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2796  0100FE  6FBD               	movwf	(?_printf+2)& (0+255),b
  2797  010100  6BBE               	clrf	(?_printf+3)& (0+255),b
  2798  010102  EC42  F085         	call	_printf	;wreg free
  2799                           
  2800                           ;ring_buffer_LUT.c: 58: printf("    Button 2: %d\n\r", MTOUCH_Button_isPressed(Button2))
      +                          ;
  2801  010106  0E5E               	movlw	low STR_18
  2802  010108  0100               	movlb	0	; () banked
  2803  01010A  6FBB               	movwf	printf@f& (0+255),b
  2804  01010C  0EFF               	movlw	high STR_18
  2805  01010E  6FBC               	movwf	(printf@f+1)& (0+255),b
  2806  010110  0E02               	movlw	2
  2807  010112  EC72  F08F         	call	_MTOUCH_Button_isPressed
  2808  010116  0100               	movlb	0	; () banked
  2809  010118  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2810  01011A  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2811  01011C  6FBD               	movwf	(?_printf+2)& (0+255),b
  2812  01011E  6BBE               	clrf	(?_printf+3)& (0+255),b
  2813  010120  EC42  F085         	call	_printf	;wreg free
  2814                           
  2815                           ;ring_buffer_LUT.c: 59: printf("    Button 3: %d\n\r", MTOUCH_Button_isPressed(Button3))
      +                          ;
  2816  010124  0E71               	movlw	low STR_19
  2817  010126  0100               	movlb	0	; () banked
  2818  010128  6FBB               	movwf	printf@f& (0+255),b
  2819  01012A  0EFF               	movlw	high STR_19
  2820  01012C  6FBC               	movwf	(printf@f+1)& (0+255),b
  2821  01012E  0E03               	movlw	3
  2822  010130  EC72  F08F         	call	_MTOUCH_Button_isPressed
  2823  010134  0100               	movlb	0	; () banked
  2824  010136  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2825  010138  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2826  01013A  6FBD               	movwf	(?_printf+2)& (0+255),b
  2827  01013C  6BBE               	clrf	(?_printf+3)& (0+255),b
  2828  01013E  EC42  F085         	call	_printf	;wreg free
  2829                           
  2830                           ;ring_buffer_LUT.c: 60: printf("    Button 4: %d\n\r", MTOUCH_Button_isPressed(Button4))
      +                          ;
  2831  010142  0E84               	movlw	low STR_20
  2832  010144  0100               	movlb	0	; () banked
  2833  010146  6FBB               	movwf	printf@f& (0+255),b
  2834  010148  0EFF               	movlw	high STR_20
  2835  01014A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2836  01014C  0E04               	movlw	4
  2837  01014E  EC72  F08F         	call	_MTOUCH_Button_isPressed
  2838  010152  0100               	movlb	0	; () banked
  2839  010154  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2840  010156  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2841  010158  6FBD               	movwf	(?_printf+2)& (0+255),b
  2842  01015A  6BBE               	clrf	(?_printf+3)& (0+255),b
  2843  01015C  EC42  F085         	call	_printf	;wreg free
  2844                           
  2845                           ;ring_buffer_LUT.c: 63: printf("\n\r");
  2846  010160  0EA6               	movlw	low (STR_8+15)
  2847  010162  0100               	movlb	0	; () banked
  2848  010164  6FBB               	movwf	printf@f& (0+255),b
  2849  010166  0EFF               	movlw	high (STR_8+15)
  2850  010168  6FBC               	movwf	(printf@f+1)& (0+255),b
  2851  01016A  EC42  F085         	call	_printf	;wreg free
  2852                           
  2853                           ;ring_buffer_LUT.c: 64: }
  2854  01016E  0012               	return	
  2855  010170                     l1004:
  2856                           
  2857                           ;ring_buffer_LUT.c: 68: else if((0 == strcmp(line, "Reset"))) {
  2858  010170  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2859  010174  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2860  010178  0EE3               	movlw	low STR_22
  2861  01017A  0100               	movlb	0	; () banked
  2862  01017C  6FB1               	movwf	strcmp@s2& (0+255),b
  2863  01017E  0EFF               	movlw	high STR_22
  2864  010180  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2865  010182  ECDE  F08D         	call	_strcmp	;wreg free
  2866  010186  0100               	movlb	0	; () banked
  2867  010188  51AF               	movf	?_strcmp& (0+255),w,b
  2868  01018A  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2869  01018C  A4D8               	btfss	status,2,c
  2870  01018E  D00F               	goto	l1006
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;ring_buffer_LUT.c: 71: printf("\033[2J");
  2874  010190  0EEE               	movlw	low STR_2
  2875  010192  6FBB               	movwf	printf@f& (0+255),b
  2876  010194  0EFF               	movlw	high STR_2
  2877  010196  6FBC               	movwf	(printf@f+1)& (0+255),b
  2878  010198  EC42  F085         	call	_printf	;wreg free
  2879                           
  2880                           ;ring_buffer_LUT.c: 74: printf("\033[H");
  2881  01019C  0EF7               	movlw	low STR_3
  2882  01019E  0100               	movlb	0	; () banked
  2883  0101A0  6FBB               	movwf	printf@f& (0+255),b
  2884  0101A2  0EFF               	movlw	high STR_3
  2885  0101A4  6FBC               	movwf	(printf@f+1)& (0+255),b
  2886  0101A6  EC42  F085         	call	_printf	;wreg free
  2887  0101AA  00FF               	reset		;# 
  2888                           
  2889                           ;ring_buffer_LUT.c: 79: }
  2890  0101AC  0012               	return	
  2891  0101AE                     l1006:
  2892                           
  2893                           ;ring_buffer_LUT.c: 82: else if((0 == strcmp(line, "Clear"))) {
  2894  0101AE  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2895  0101B2  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2896  0101B6  0EDD               	movlw	low STR_25
  2897  0101B8  0100               	movlb	0	; () banked
  2898  0101BA  6FB1               	movwf	strcmp@s2& (0+255),b
  2899  0101BC  0EFF               	movlw	high STR_25
  2900  0101BE  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2901  0101C0  ECDE  F08D         	call	_strcmp	;wreg free
  2902  0101C4  0100               	movlb	0	; () banked
  2903  0101C6  51AF               	movf	?_strcmp& (0+255),w,b
  2904  0101C8  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2905  0101CA  A4D8               	btfss	status,2,c
  2906  0101CC  D00E               	goto	l1008
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;ring_buffer_LUT.c: 85: printf("\033[2J");
  2910  0101CE  0EEE               	movlw	low STR_2
  2911  0101D0  6FBB               	movwf	printf@f& (0+255),b
  2912  0101D2  0EFF               	movlw	high STR_2
  2913  0101D4  6FBC               	movwf	(printf@f+1)& (0+255),b
  2914  0101D6  EC42  F085         	call	_printf	;wreg free
  2915                           
  2916                           ;ring_buffer_LUT.c: 88: printf("\033[H");
  2917  0101DA  0EF7               	movlw	low STR_3
  2918  0101DC  0100               	movlb	0	; () banked
  2919  0101DE  6FBB               	movwf	printf@f& (0+255),b
  2920  0101E0  0EFF               	movlw	high STR_3
  2921  0101E2  6FBC               	movwf	(printf@f+1)& (0+255),b
  2922  0101E4  EC42  F085         	call	_printf	;wreg free
  2923                           
  2924                           ;ring_buffer_LUT.c: 90: }
  2925  0101E8  0012               	return	
  2926  0101EA                     l1008:
  2927                           
  2928                           ;ring_buffer_LUT.c: 93: else if((0 == strcmp(line, "*IDN?")) || (0 == strcmp(line, "IDN"
      +                          ))) {
  2929  0101EA  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2930  0101EE  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2931  0101F2  0ED7               	movlw	low STR_28
  2932  0101F4  0100               	movlb	0	; () banked
  2933  0101F6  6FB1               	movwf	strcmp@s2& (0+255),b
  2934  0101F8  0EFF               	movlw	high STR_28
  2935  0101FA  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2936  0101FC  ECDE  F08D         	call	_strcmp	;wreg free
  2937  010200  0100               	movlb	0	; () banked
  2938  010202  51AF               	movf	?_strcmp& (0+255),w,b
  2939  010204  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2940  010206  B4D8               	btfsc	status,2,c
  2941  010208  D00F               	goto	u5810
  2942                           
  2943                           ; BSR set to: 0
  2944  01020A  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2945  01020E  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2946  010212  0EF3               	movlw	low STR_29
  2947  010214  6FB1               	movwf	strcmp@s2& (0+255),b
  2948  010216  0EFF               	movlw	high STR_29
  2949  010218  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2950  01021A  ECDE  F08D         	call	_strcmp	;wreg free
  2951  01021E  0100               	movlb	0	; () banked
  2952  010220  51AF               	movf	?_strcmp& (0+255),w,b
  2953  010222  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2954  010224  A4D8               	btfss	status,2,c
  2955  010226  D015               	goto	l1010
  2956  010228                     u5810:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;ring_buffer_LUT.c: 96: printf("\n\r");
  2960                           
  2961                           ; BSR set to: 0
  2962  010228  0EA6               	movlw	low (STR_8+15)
  2963  01022A  6FBB               	movwf	printf@f& (0+255),b
  2964  01022C  0EFF               	movlw	high (STR_8+15)
  2965  01022E  6FBC               	movwf	(printf@f+1)& (0+255),b
  2966  010230  EC42  F085         	call	_printf	;wreg free
  2967                           
  2968                           ;ring_buffer_LUT.c: 99: printf("    mTouch Test Board, REVA");
  2969  010234  0E1C               	movlw	low STR_31
  2970  010236  0100               	movlb	0	; () banked
  2971  010238  6FBB               	movwf	printf@f& (0+255),b
  2972  01023A  0EFF               	movlw	high STR_31
  2973  01023C  6FBC               	movwf	(printf@f+1)& (0+255),b
  2974  01023E  EC42  F085         	call	_printf	;wreg free
  2975                           
  2976                           ;ring_buffer_LUT.c: 102: printf("\n\r");
  2977  010242  0EA6               	movlw	low (STR_8+15)
  2978  010244  0100               	movlb	0	; () banked
  2979  010246  6FBB               	movwf	printf@f& (0+255),b
  2980  010248  0EFF               	movlw	high (STR_8+15)
  2981  01024A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2982  01024C  EC42  F085         	call	_printf	;wreg free
  2983                           
  2984                           ;ring_buffer_LUT.c: 104: }
  2985  010250  0012               	return	
  2986  010252                     l1010:
  2987                           
  2988                           ;ring_buffer_LUT.c: 107: else if((0 == strcmp(line, "Help"))) {
  2989  010252  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2990  010256  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2991  01025A  0EE9               	movlw	low STR_33
  2992  01025C  0100               	movlb	0	; () banked
  2993  01025E  6FB1               	movwf	strcmp@s2& (0+255),b
  2994  010260  0EFF               	movlw	high STR_33
  2995  010262  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2996  010264  ECDE  F08D         	call	_strcmp	;wreg free
  2997  010268  0100               	movlb	0	; () banked
  2998  01026A  51AF               	movf	?_strcmp& (0+255),w,b
  2999  01026C  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3000  01026E  A4D8               	btfss	status,2,c
  3001  010270  0012               	return	
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;ring_buffer_LUT.c: 110: printf("\n\r");
  3005  010272  0EA6               	movlw	low (STR_8+15)
  3006  010274  6FBB               	movwf	printf@f& (0+255),b
  3007  010276  0EFF               	movlw	high (STR_8+15)
  3008  010278  6FBC               	movwf	(printf@f+1)& (0+255),b
  3009  01027A  EC42  F085         	call	_printf	;wreg free
  3010                           
  3011                           ;ring_buffer_LUT.c: 112: printf("   List of supported commands:\n\r"
  3012                           ;ring_buffer_LUT.c: 113: "   LEDs On: Turns all LEDs On\n\r"
  3013                           ;ring_buffer_LUT.c: 114: "   LEDs Off: Turns all LEDs Off\n\r"
  3014                           ;ring_buffer_LUT.c: 115: "   Button States?: Returns state of all five mTouch buttons\n\
      +                          r"
  3015                           ;ring_buffer_LUT.c: 116: "   Reset: Clears the terminal and resets the micro\n\r"
  3016                           ;ring_buffer_LUT.c: 117: "   Clear: Clears the terminal but doesn't reset the micro\n\r"
  3017                           ;ring_buffer_LUT.c: 118: "   *IDN?: Returns device identification\n\r"
  3018  01027E  0EBF               	movlw	low STR_35
  3019  010280  0100               	movlb	0	; () banked
  3020  010282  6FBB               	movwf	printf@f& (0+255),b
  3021  010284  0EFD               	movlw	high STR_35
  3022  010286  6FBC               	movwf	(printf@f+1)& (0+255),b
  3023  010288  EC42  F085         	call	_printf	;wreg free
  3024                           
  3025                           ;ring_buffer_LUT.c: 122: printf("\n\r");
  3026  01028C  0EA6               	movlw	low (STR_8+15)
  3027  01028E  0100               	movlb	0	; () banked
  3028  010290  6FBB               	movwf	printf@f& (0+255),b
  3029  010292  0EFF               	movlw	high (STR_8+15)
  3030  010294  6FBC               	movwf	(printf@f+1)& (0+255),b
  3031  010296  EC42  F085         	call	_printf	;wreg free
  3032  01029A  0012               	return	
  3033  01029C                     __end_of_ringBufferLUT:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           intcon	equ	0xFF2
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           postdec1	equ	0xFE5
  3043                           fsr1l	equ	0xFE1
  3044                           indf2	equ	0xFDF
  3045                           postinc2	equ	0xFDE
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _strcmp *****************
  3051 ;; Defined at:
  3052 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3055 ;;		 -> line(64), 
  3056 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3057 ;;		 -> STR_33(5), STR_29(4), STR_28(6), STR_25(6), 
  3058 ;;		 -> STR_22(6), STR_14(15), STR_10(9), STR_6(8), 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  r               1    5[BANK0 ] char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2    0[BANK0 ] int 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3073 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;Total ram usage:        6 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    5
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_ringBufferLUT
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text4
  3085  011BBC                     __ptext4:
  3086                           	opt stack 0
  3087  011BBC                     _strcmp:
  3088                           	opt stack 23
  3089                           
  3090                           ;incstack = 0
  3091  011BBC  D005               	goto	l1603
  3092  011BBE  0100               	movlb	0	; () banked
  3093  011BC0  4BAF               	infsnz	strcmp@s1& (0+255),f,b
  3094  011BC2  2BB0               	incf	(strcmp@s1+1)& (0+255),f,b
  3095  011BC4  4BB1               	infsnz	strcmp@s2& (0+255),f,b
  3096  011BC6  2BB2               	incf	(strcmp@s2+1)& (0+255),f,b
  3097  011BC8                     l1603:
  3098                           
  3099                           ; BSR set to: 0
  3100  011BC8  C0AF  FFD9         	movff	strcmp@s1,fsr2l
  3101  011BCC  C0B0  FFDA         	movff	strcmp@s1+1,fsr2h
  3102  011BD0  50DF               	movf	indf2,w,c
  3103  011BD2  0100               	movlb	0	; () banked
  3104  011BD4  6FB3               	movwf	??_strcmp& (0+255),b
  3105  011BD6  C0B1  FFF6         	movff	strcmp@s2,tblptrl
  3106  011BDA  C0B2  FFF7         	movff	strcmp@s2+1,tblptrh
  3107  011BDE                     	if	0	;tblptru may be non-zero
  3108  011BDE                     	endif
  3109  011BDE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3110  011BDE  0E00               	movlw	low (__mediumconst shr (0+16))
  3111  011BE0  6EF8               	movwf	tblptru,c
  3112  011BE2                     	endif
  3113  011BE2  0008               	tblrd		*
  3114  011BE4  50F5               	movf	tablat,w,c
  3115  011BE6  0800               	sublw	0
  3116  011BE8  25B3               	addwf	??_strcmp& (0+255),w,b
  3117  011BEA  6FB4               	movwf	strcmp@r& (0+255),b
  3118  011BEC  51B4               	movf	strcmp@r& (0+255),w,b
  3119  011BEE  A4D8               	btfss	status,2,c
  3120  011BF0  D007               	goto	u5630
  3121                           
  3122                           ; BSR set to: 0
  3123  011BF2  C0AF  FFD9         	movff	strcmp@s1,fsr2l
  3124  011BF6  C0B0  FFDA         	movff	strcmp@s1+1,fsr2h
  3125  011BFA  50DF               	movf	indf2,w,c
  3126  011BFC  A4D8               	btfss	status,2,c
  3127  011BFE  D7DF               	goto	l1604
  3128  011C00                     u5630:
  3129                           
  3130                           ; BSR set to: 0
  3131                           
  3132                           ; BSR set to: 0
  3133                           
  3134                           ; BSR set to: 0
  3135  011C00  51B4               	movf	strcmp@r& (0+255),w,b
  3136  011C02  6FAF               	movwf	?_strcmp& (0+255),b
  3137  011C04  6BB0               	clrf	(?_strcmp+1)& (0+255),b
  3138  011C06  BFAF               	btfsc	?_strcmp& (0+255),7,b
  3139  011C08  07B0               	decf	(?_strcmp+1)& (0+255),f,b
  3140  011C0A  0012               	return	
  3141  011C0C                     __end_of_strcmp:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           intcon	equ	0xFF2
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           postdec1	equ	0xFE5
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _MTOUCH_Button_isPressed *****************
  3159 ;; Defined at:
  3160 ;;		line 377 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  name            1    wreg     enum E17454
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  name            1    1[BANK0 ] enum E17454
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      unsigned char 
  3167 ;; Registers used:
  3168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;Total ram usage:        2 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    5
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_ringBufferLUT
  3185 ;;		_MTOUCH_Button_Buttonmask_Get
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text5
  3190  011EE4                     __ptext5:
  3191                           	opt stack 0
  3192  011EE4                     _MTOUCH_Button_isPressed:
  3193                           	opt stack 23
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;incstack = 0
  3197                           ;MTOUCH_Button_isPressed@name stored from wreg
  3198  011EE4  0100               	movlb	0	; () banked
  3199  011EE6  6FB0               	movwf	MTOUCH_Button_isPressed@name& (0+255),b
  3200                           
  3201                           ;mtouch_button.c: 379: if(name < 5)
  3202  011EE8  0E05               	movlw	5
  3203  011EEA  0100               	movlb	0	; () banked
  3204  011EEC  61B0               	cpfslt	MTOUCH_Button_isPressed@name& (0+255),b
  3205  011EEE  D014               	goto	l831
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;mtouch_button.c: 380: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  3209  011EF0  51B0               	movf	MTOUCH_Button_isPressed@name& (0+255),w,b
  3210  011EF2  0D10               	mullw	16
  3211  011EF4  0E02               	movlw	2
  3212  011EF6  26F3               	addwf	prodl,f,c
  3213  011EF8  0E00               	movlw	0
  3214  011EFA  22F4               	addwfc	prodh,f,c
  3215  011EFC  0E40               	movlw	low _mtouch_button
  3216  011EFE  24F3               	addwf	prodl,w,c
  3217  011F00  6ED9               	movwf	fsr2l,c
  3218  011F02  0E01               	movlw	high _mtouch_button
  3219  011F04  20F4               	addwfc	prodh,w,c
  3220  011F06  6EDA               	movwf	fsr2h,c
  3221  011F08  0E02               	movlw	2
  3222  011F0A  18DE               	xorwf	postinc2,w,c
  3223  011F0C  A4D8               	btfss	status,2,c
  3224  011F0E  D002               	goto	u5600
  3225  011F10  0E01               	movlw	1
  3226  011F12  0012               	return	
  3227  011F14                     u5600:
  3228  011F14  0E00               	movlw	0
  3229                           
  3230                           ; BSR set to: 0
  3231                           
  3232                           ; BSR set to: 0
  3233  011F16  0012               	return	
  3234  011F18                     l831:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;mtouch_button.c: 381: else
  3238                           ;mtouch_button.c: 382: return 0;
  3239                           
  3240                           ; BSR set to: 0
  3241  011F18  0E00               	movlw	0
  3242                           
  3243                           ; BSR set to: 0
  3244  011F1A  0012               	return	
  3245  011F1C                     __end_of_MTOUCH_Button_isPressed:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodh	equ	0xFF4
  3252                           prodl	equ	0xFF3
  3253                           intcon	equ	0xFF2
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _EUSART2_Read *****************
  3265 ;; Defined at:
  3266 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;  readValue       1    0[BANK0 ] unsigned char 
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      unsigned char 
  3273 ;; Registers used:
  3274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;Total ram usage:        1 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    5
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_ringBufferPull
  3291 ;;		_getch
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text6
  3296  011E6C                     __ptext6:
  3297                           	opt stack 0
  3298  011E6C                     _EUSART2_Read:
  3299                           	opt stack 24
  3300                           
  3301                           ;eusart2.c: 132: uint8_t readValue = 0;
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305  011E6C  0E00               	movlw	0
  3306  011E6E  0100               	movlb	0	; () banked
  3307  011E70  6FAF               	movwf	EUSART2_Read@readValue& (0+255),b
  3308  011E72                     
  3309                           ; BSR set to: 0
  3310                           
  3311                           ;eusart2.c: 135: {
  3312                           
  3313                           ; BSR set to: 0
  3314  011E72  503D               	movf	_eusart2RxCount,w,c	;volatile
  3315  011E74  B4D8               	btfsc	status,2,c
  3316  011E76  D7FD               	goto	l225
  3317                           
  3318                           ;eusart2.c: 136: }
  3319                           ;eusart2.c: 138: readValue = eusart2RxBuffer[eusart2RxTail++];
  3320  011E78  503E               	movf	_eusart2RxTail,w,c	;volatile
  3321  011E7A  0D01               	mullw	1
  3322  011E7C  0E00               	movlw	low _eusart2RxBuffer
  3323  011E7E  24F3               	addwf	prodl,w,c
  3324  011E80  6ED9               	movwf	fsr2l,c
  3325  011E82  0E01               	movlw	high _eusart2RxBuffer
  3326  011E84  20F4               	addwfc	prodh,w,c
  3327  011E86  6EDA               	movwf	fsr2h,c
  3328  011E88  50DF               	movf	indf2,w,c
  3329  011E8A  0100               	movlb	0	; () banked
  3330  011E8C  6FAF               	movwf	EUSART2_Read@readValue& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333  011E8E  2A3E               	incf	_eusart2RxTail,f,c	;volatile
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;eusart2.c: 139: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  3337  011E90  0E3F               	movlw	63
  3338  011E92  643E               	cpfsgt	_eusart2RxTail,c	;volatile
  3339  011E94  D002               	goto	l227
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;eusart2.c: 140: {
  3343                           ;eusart2.c: 141: eusart2RxTail = 0;
  3344  011E96  0E00               	movlw	0
  3345  011E98  6E3E               	movwf	_eusart2RxTail,c	;volatile
  3346  011E9A                     l227:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;eusart2.c: 142: }
  3350                           ;eusart2.c: 143: PIE3bits.RC2IE = 0;
  3351                           
  3352                           ; BSR set to: 0
  3353  011E9A  010E               	movlb	14	; () banked
  3354  011E9C  9F2C               	bcf	44,7,b	;volatile
  3355                           
  3356                           ; BSR set to: 14
  3357                           ;eusart2.c: 144: eusart2RxCount--;
  3358  011E9E  063D               	decf	_eusart2RxCount,f,c	;volatile
  3359                           
  3360                           ; BSR set to: 14
  3361                           ;eusart2.c: 145: PIE3bits.RC2IE = 1;
  3362  011EA0  8F2C               	bsf	44,7,b	;volatile
  3363                           
  3364                           ; BSR set to: 14
  3365                           ;eusart2.c: 147: return readValue;
  3366  011EA2  0100               	movlb	0	; () banked
  3367  011EA4  51AF               	movf	EUSART2_Read@readValue& (0+255),w,b
  3368  011EA6  0012               	return	
  3369  011EA8                     __end_of_EUSART2_Read:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           intcon	equ	0xFF2
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _printResetMessage *****************
  3389 ;; Defined at:
  3390 ;;		line 50 in file "ring_buffer_interface.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3408 ;;Total ram usage:        0 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    8
  3411 ;; This function calls:
  3412 ;;		_printf
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text7
  3419  011DB2                     __ptext7:
  3420                           	opt stack 0
  3421  011DB2                     _printResetMessage:
  3422                           	opt stack 22
  3423                           
  3424                           ;ring_buffer_interface.c: 52: if (USB_DTR == 1) {
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;incstack = 0
  3428  011DB2  A04F               	btfss	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
  3429  011DB4  0012               	return	
  3430                           
  3431                           ;ring_buffer_interface.c: 55: printf("\033[2J");
  3432  011DB6  0EEE               	movlw	low STR_2
  3433  011DB8  0100               	movlb	0	; () banked
  3434  011DBA  6FBB               	movwf	printf@f& (0+255),b
  3435  011DBC  0EFF               	movlw	high STR_2
  3436  011DBE  6FBC               	movwf	(printf@f+1)& (0+255),b
  3437  011DC0  EC42  F085         	call	_printf	;wreg free
  3438                           
  3439                           ;ring_buffer_interface.c: 58: printf("\033[H");
  3440  011DC4  0EF7               	movlw	low STR_3
  3441  011DC6  0100               	movlb	0	; () banked
  3442  011DC8  6FBB               	movwf	printf@f& (0+255),b
  3443  011DCA  0EFF               	movlw	high STR_3
  3444  011DCC  6FBC               	movwf	(printf@f+1)& (0+255),b
  3445  011DCE  EC42  F085         	call	_printf	;wreg free
  3446                           
  3447                           ;ring_buffer_interface.c: 61: printf("    Boot complete\n\r"
  3448                           ;ring_buffer_interface.c: 62: "   PIC18F67K40 mTouch Test Board\n\r"
  3449                           ;ring_buffer_interface.c: 63: "   Evaluates the mTouch capacitive touch library distribu
      +                          ted by Microchip\n\r"
  3450                           ;ring_buffer_interface.c: 64: "   Sets the state of five LEDs based on mTouch capacitive
      +                           pushbuttons\n\r"
  3451                           ;ring_buffer_interface.c: 65: "   Baud rate: 115200 bps\n\r"
  3452                           ;ring_buffer_interface.c: 66: "   No parity, 8 bits, no flow control, 1 stop bit\n\r"
  3453                           ;ring_buffer_interface.c: 67: "   Commands are case sensitive\n\r"
  3454  011DD2  0E52               	movlw	low STR_4
  3455  011DD4  0100               	movlb	0	; () banked
  3456  011DD6  6FBB               	movwf	printf@f& (0+255),b
  3457  011DD8  0EFC               	movlw	high STR_4
  3458  011DDA  6FBC               	movwf	(printf@f+1)& (0+255),b
  3459  011DDC  EC42  F085         	call	_printf	;wreg free
  3460                           
  3461                           ;ring_buffer_interface.c: 72: printf("\n\r");
  3462  011DE0  0EA6               	movlw	low (STR_8+15)
  3463  011DE2  0100               	movlb	0	; () banked
  3464  011DE4  6FBB               	movwf	printf@f& (0+255),b
  3465  011DE6  0EFF               	movlw	high (STR_8+15)
  3466  011DE8  6FBC               	movwf	(printf@f+1)& (0+255),b
  3467  011DEA  EC42  F085         	call	_printf	;wreg free
  3468  011DEE  0012               	return	
  3469  011DF0                     __end_of_printResetMessage:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           postinc2	equ	0xFDE
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _printf *****************
  3489 ;; Defined at:
  3490 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3493 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
  3494 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
  3495 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
  3496 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
  3497 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
  3498 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
  3499 ;;		 -> STR_4(365), STR_3(4), STR_2(5), STR_1(4), 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  tmpval          4    0        struct .
  3502 ;;  cp              3    0        PTR const unsigned char 
  3503 ;;  val             2   21[BANK0 ] unsigned int 
  3504 ;;  ap              2   17[BANK0 ] PTR void [1]
  3505 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3506 ;;  len             2    0        unsigned int 
  3507 ;;  c               1   23[BANK0 ] char 
  3508 ;;  prec            1   20[BANK0 ] char 
  3509 ;;  flag            1   19[BANK0 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  2   12[BANK0 ] int 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3520 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3522 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3523 ;;Total ram usage:       12 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    7
  3526 ;; This function calls:
  3527 ;;		___lwdiv
  3528 ;;		___lwmod
  3529 ;;		_putch
  3530 ;; This function is called by:
  3531 ;;		_printResetMessage
  3532 ;;		_ringBufferLUT
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text8
  3537  010A84                     __ptext8:
  3538                           	opt stack 0
  3539  010A84                     _printf:
  3540                           	opt stack 21
  3541                           
  3542                           ;doprnt.c: 466: va_list ap;
  3543                           ;doprnt.c: 499: signed char c;
  3544                           ;doprnt.c: 506: signed char prec;
  3545                           ;doprnt.c: 508: unsigned char flag;
  3546                           ;doprnt.c: 523: union {
  3547                           ;doprnt.c: 524: unsigned long vd;
  3548                           ;doprnt.c: 525: double integ;
  3549                           ;doprnt.c: 526: } tmpval;
  3550                           ;doprnt.c: 528: unsigned int val;
  3551                           ;doprnt.c: 529: unsigned len;
  3552                           ;doprnt.c: 530: const char * cp;
  3553                           ;doprnt.c: 533: *ap = __va_start();
  3554                           
  3555                           ;incstack = 0
  3556  010A84  0EBD               	movlw	low (?_printf+2)
  3557  010A86  0100               	movlb	0	; () banked
  3558  010A88  6FC0               	movwf	printf@ap& (0+255),b
  3559  010A8A  0E00               	movlw	high (?_printf+2)
  3560  010A8C  6FC1               	movwf	(printf@ap+1)& (0+255),b
  3561                           
  3562                           ;doprnt.c: 536: while(c = *f++) {
  3563  010A8E  D08A               	goto	u5340
  3564  010A90                     
  3565                           ; BSR set to: 0
  3566                           ;doprnt.c: 538: if(c != '%')
  3567                           
  3568                           ; BSR set to: 0
  3569  010A90  0E25               	movlw	37
  3570  010A92  19C6               	xorwf	printf@c& (0+255),w,b
  3571  010A94  B4D8               	btfsc	status,2,c
  3572  010A96  D004               	goto	l1028
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;doprnt.c: 540: {
  3576                           ;doprnt.c: 541: (putch(c) );
  3577  010A98  51C6               	movf	printf@c& (0+255),w,b
  3578  010A9A  EC38  F092         	call	_putch
  3579                           
  3580                           ;doprnt.c: 542: continue;
  3581  010A9E  D082               	goto	u5340
  3582  010AA0                     l1028:
  3583                           
  3584                           ;doprnt.c: 543: }
  3585                           ;doprnt.c: 548: flag = 0;
  3586  010AA0  0E00               	movlw	0
  3587  010AA2  0100               	movlb	0	; () banked
  3588  010AA4  6FC2               	movwf	printf@flag& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           
  3592                           ; BSR set to: 0
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;doprnt.c: 822: }
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;doprnt.c: 813: continue;
  3599                           
  3600                           ;doprnt.c: 802: default:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;doprnt.c: 698: case 'i':
  3604                           ;doprnt.c: 699: break;
  3605                           
  3606                           ; BSR set to: 0
  3607                           
  3608                           ;doprnt.c: 697: case 'd':
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;doprnt.c: 638: goto alldone;
  3612                           
  3613                           ;doprnt.c: 637: case 0:
  3614                           
  3615                           ;doprnt.c: 635: switch(c = *f++) {
  3616  010AA6  C0BB  FFF6         	movff	printf@f,tblptrl
  3617  010AAA  C0BC  FFF7         	movff	printf@f+1,tblptrh
  3618  010AAE  4BBB               	infsnz	printf@f& (0+255),f,b
  3619  010AB0  2BBC               	incf	(printf@f+1)& (0+255),f,b
  3620  010AB2                     	if	0	;tblptru may be non-zero
  3621  010AB2                     	endif
  3622  010AB2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3623  010AB2  0E00               	movlw	low (__mediumconst shr (0+16))
  3624  010AB4  6EF8               	movwf	tblptru,c
  3625  010AB6                     	endif
  3626  010AB6  0008               	tblrd		*
  3627  010AB8  CFF5 F0C6          	movff	tablat,printf@c
  3628  010ABC  51C6               	movf	printf@c& (0+255),w,b
  3629                           
  3630                           ; Switch size 1, requested type "space"
  3631                           ; Number of cases is 3, Range of values is 0 to 105
  3632                           ; switch strategies available:
  3633                           ; Name         Instructions Cycles
  3634                           ; simple_byte           10     6 (average)
  3635                           ;	Chosen strategy is simple_byte
  3636  010ABE  0A00               	xorlw	0	; case 0
  3637  010AC0  B4D8               	btfsc	status,2,c
  3638  010AC2  0012               	return	
  3639  010AC4  0A64               	xorlw	100	; case 100
  3640  010AC6  B4D8               	btfsc	status,2,c
  3641  010AC8  D003               	goto	l1034
  3642  010ACA  0A0D               	xorlw	13	; case 105
  3643  010ACC  A4D8               	btfss	status,2,c
  3644  010ACE  D06A               	goto	u5340
  3645  010AD0                     l1034:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;doprnt.c: 1253: {
  3649                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3650                           
  3651                           ; BSR set to: 0
  3652  010AD0  C0C0  FFD9         	movff	printf@ap,fsr2l
  3653  010AD4  C0C1  FFDA         	movff	printf@ap+1,fsr2h
  3654  010AD8  CFDE F0C4          	movff	postinc2,printf@val
  3655  010ADC  CFDD F0C5          	movff	postdec2,printf@val+1
  3656                           
  3657                           ; BSR set to: 0
  3658  010AE0  0E02               	movlw	2
  3659  010AE2  27C0               	addwf	printf@ap& (0+255),f,b
  3660  010AE4  0E00               	movlw	0
  3661  010AE6  23C1               	addwfc	(printf@ap+1)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;doprnt.c: 1261: if((int)val < 0) {
  3665  010AE8  AFC5               	btfss	(printf@val+1)& (0+255),7,b
  3666  010AEA  D006               	goto	l1036
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;doprnt.c: 1262: flag |= 0x03;
  3670  010AEC  0E03               	movlw	3
  3671  010AEE  13C2               	iorwf	printf@flag& (0+255),f,b
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;doprnt.c: 1263: val = -val;
  3675  010AF0  6DC4               	negf	printf@val& (0+255),b
  3676  010AF2  1FC5               	comf	(printf@val+1)& (0+255),f,b
  3677  010AF4  B0D8               	btfsc	status,0,c
  3678  010AF6  2BC5               	incf	(printf@val+1)& (0+255),f,b
  3679  010AF8                     l1036:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;doprnt.c: 1264: }
  3683                           ;doprnt.c: 1266: }
  3684                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3685                           
  3686                           ; BSR set to: 0
  3687  010AF8  0E01               	movlw	1
  3688  010AFA  6FC6               	movwf	printf@c& (0+255),b
  3689  010AFC                     l4839:
  3690                           
  3691                           ; BSR set to: 0
  3692  010AFC  0E05               	movlw	5
  3693  010AFE  19C6               	xorwf	printf@c& (0+255),w,b
  3694  010B00  B4D8               	btfsc	status,2,c
  3695  010B02  D015               	goto	u5320
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1306: if(val < dpowers[c])
  3699                           
  3700                           ; BSR set to: 0
  3701                           
  3702                           ; BSR set to: 0
  3703  010B04  51C6               	movf	printf@c& (0+255),w,b
  3704  010B06  0D02               	mullw	2
  3705  010B08  0ECB               	movlw	low _dpowers
  3706  010B0A  24F3               	addwf	prodl,w,c
  3707  010B0C  6EF6               	movwf	tblptrl,c
  3708  010B0E  0EFB               	movlw	high _dpowers
  3709  010B10  20F4               	addwfc	prodh,w,c
  3710  010B12  6EF7               	movwf	tblptrh,c
  3711  010B14                     	if	1	;There are 3 active tblptr bytes
  3712  010B14  6AF8               	clrf	tblptru,c
  3713  010B16  0E00               	movlw	low (__mediumconst shr (0+16))
  3714  010B18  22F8               	addwfc	tblptru,f,c
  3715  010B1A                     	endif
  3716  010B1A  0009               	tblrd		*+
  3717  010B1C  50F5               	movf	tablat,w,c
  3718  010B1E  5DC4               	subwf	printf@val& (0+255),w,b
  3719  010B20  0009               	tblrd		*+
  3720  010B22  50F5               	movf	tablat,w,c
  3721  010B24  59C5               	subwfb	(printf@val+1)& (0+255),w,b
  3722  010B26  A0D8               	btfss	status,0,c
  3723  010B28  D002               	goto	u5320
  3724                           
  3725                           ; BSR set to: 0
  3726                           
  3727                           ; BSR set to: 0
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 1307: break;
  3731  010B2A  2BC6               	incf	printf@c& (0+255),f,b
  3732  010B2C  D7E7               	goto	l4839
  3733  010B2E                     u5320:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;doprnt.c: 1422: {
  3737                           ;doprnt.c: 1438: if(flag & 0x03)
  3738                           
  3739                           ; BSR set to: 0
  3740  010B2E  C0C2  F0BF         	movff	printf@flag,??_printf
  3741  010B32  0E03               	movlw	3
  3742  010B34  17BF               	andwf	??_printf& (0+255),f,b
  3743  010B36  B4D8               	btfsc	status,2,c
  3744  010B38  D003               	goto	l1040
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;doprnt.c: 1439: (putch('-') );
  3748  010B3A  0E2D               	movlw	45
  3749  010B3C  EC38  F092         	call	_putch
  3750  010B40                     l1040:
  3751                           
  3752                           ;doprnt.c: 1469: }
  3753                           ;doprnt.c: 1472: prec = c;
  3754  010B40  C0C6  F0C3         	movff	printf@c,printf@prec
  3755                           
  3756                           ;doprnt.c: 1474: while(prec--) {
  3757  010B44  D02A               	goto	l1041
  3758  010B46                     
  3759                           ;doprnt.c: 1478: {
  3760                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3761  010B46  0100               	movlb	0	; () banked
  3762  010B48  51C3               	movf	printf@prec& (0+255),w,b
  3763  010B4A  0D02               	mullw	2
  3764  010B4C  0ECB               	movlw	low _dpowers
  3765  010B4E  24F3               	addwf	prodl,w,c
  3766  010B50  6EF6               	movwf	tblptrl,c
  3767  010B52  0EFB               	movlw	high _dpowers
  3768  010B54  20F4               	addwfc	prodh,w,c
  3769  010B56  6EF7               	movwf	tblptrh,c
  3770  010B58                     	if	1	;There are 3 active tblptr bytes
  3771  010B58  6AF8               	clrf	tblptru,c
  3772  010B5A  0E00               	movlw	low (__mediumconst shr (0+16))
  3773  010B5C  22F8               	addwfc	tblptru,f,c
  3774  010B5E                     	endif
  3775  010B5E  0009               	tblrd		*+
  3776  010B60  CFF5 F0B1          	movff	tablat,___lwdiv@divisor
  3777  010B64  000A               	tblrd		*-
  3778  010B66  CFF5 F0B2          	movff	tablat,___lwdiv@divisor+1
  3779  010B6A  C0C4  F0AF         	movff	printf@val,___lwdiv@dividend
  3780  010B6E  C0C5  F0B0         	movff	printf@val+1,___lwdiv@dividend+1
  3781  010B72  EC62  F08D         	call	___lwdiv	;wreg free
  3782  010B76  C0AF  F0B6         	movff	?___lwdiv,___lwmod@dividend
  3783  010B7A  C0B0  F0B7         	movff	?___lwdiv+1,___lwmod@dividend+1
  3784  010B7E  0E00               	movlw	0
  3785  010B80  0100               	movlb	0	; () banked
  3786  010B82  6FB9               	movwf	(___lwmod@divisor+1)& (0+255),b
  3787  010B84  0E0A               	movlw	10
  3788  010B86  6FB8               	movwf	___lwmod@divisor& (0+255),b
  3789  010B88  EC77  F08E         	call	___lwmod	;wreg free
  3790  010B8C  0100               	movlb	0	; () banked
  3791  010B8E  51B6               	movf	?___lwmod& (0+255),w,b
  3792  010B90  0F30               	addlw	48
  3793  010B92  6FC6               	movwf	printf@c& (0+255),b
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1523: }
  3797                           ;doprnt.c: 1524: (putch(c) );
  3798  010B94  51C6               	movf	printf@c& (0+255),w,b
  3799  010B96  EC38  F092         	call	_putch
  3800  010B9A                     l1041:
  3801  010B9A  0100               	movlb	0	; () banked
  3802  010B9C  07C3               	decf	printf@prec& (0+255),f,b
  3803  010B9E  29C3               	incf	printf@prec& (0+255),w,b
  3804  010BA0  A4D8               	btfss	status,2,c
  3805  010BA2  D7D1               	goto	l1042
  3806  010BA4                     u5340:
  3807                           
  3808                           ; BSR set to: 0
  3809                           
  3810                           ; BSR set to: 0
  3811  010BA4  C0BB  FFF6         	movff	printf@f,tblptrl
  3812  010BA8  C0BC  FFF7         	movff	printf@f+1,tblptrh
  3813  010BAC  0100               	movlb	0	; () banked
  3814  010BAE  4BBB               	infsnz	printf@f& (0+255),f,b
  3815  010BB0  2BBC               	incf	(printf@f+1)& (0+255),f,b
  3816  010BB2                     	if	0	;tblptru may be non-zero
  3817  010BB2                     	endif
  3818  010BB2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3819  010BB2  0E00               	movlw	low (__mediumconst shr (0+16))
  3820  010BB4  6EF8               	movwf	tblptru,c
  3821  010BB6                     	endif
  3822  010BB6  0008               	tblrd		*
  3823  010BB8  CFF5 F0C6          	movff	tablat,printf@c
  3824  010BBC  51C6               	movf	printf@c& (0+255),w,b
  3825  010BBE  B4D8               	btfsc	status,2,c
  3826  010BC0  0012               	return	
  3827  010BC2  D766               	goto	l1027
  3828  010BC4                     __end_of_printf:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           postdec1	equ	0xFE5
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _putch *****************
  3849 ;; Defined at:
  3850 ;;		line 178 in file "mcc_generated_files/eusart2.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  txData          1    wreg     unsigned char 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  txData          1    1[BANK0 ] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;Total ram usage:        1 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    6
  3871 ;; This function calls:
  3872 ;;		_EUSART2_Write
  3873 ;; This function is called by:
  3874 ;;		_printf
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text9
  3879  012470                     __ptext9:
  3880                           	opt stack 0
  3881  012470                     _putch:
  3882                           	opt stack 21
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;incstack = 0
  3886                           ;putch@txData stored from wreg
  3887  012470  0100               	movlb	0	; () banked
  3888  012472  6FB0               	movwf	putch@txData& (0+255),b
  3889                           
  3890                           ;eusart2.c: 180: EUSART2_Write(txData);
  3891  012474  0100               	movlb	0	; () banked
  3892  012476  51B0               	movf	putch@txData& (0+255),w,b
  3893  012478  ECF8  F08E         	call	_EUSART2_Write
  3894  01247C  0012               	return		;funcret
  3895  01247E                     __end_of_putch:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           intcon	equ	0xFF2
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _EUSART2_Write *****************
  3916 ;; Defined at:
  3917 ;;		line 150 in file "mcc_generated_files/eusart2.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  txData          1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  txData          1    0[BANK0 ] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;Total ram usage:        1 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    5
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_putch
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text10
  3946  011DF0                     __ptext10:
  3947                           	opt stack 0
  3948  011DF0                     _EUSART2_Write:
  3949                           	opt stack 21
  3950                           
  3951                           ;incstack = 0
  3952                           ;EUSART2_Write@txData stored from wreg
  3953  011DF0  0100               	movlb	0	; () banked
  3954  011DF2  6FAF               	movwf	EUSART2_Write@txData& (0+255),b
  3955  011DF4                     
  3956                           ;eusart2.c: 153: {
  3957                           
  3958                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
  3959  011DF4  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  3960  011DF6  B4D8               	btfsc	status,2,c
  3961  011DF8  D7FD               	goto	l4439
  3962                           
  3963                           ;eusart2.c: 154: }
  3964                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
  3965  011DFA  010E               	movlb	14	; () banked
  3966  011DFC  BD2C               	btfsc	44,6,b	;volatile
  3967  011DFE  D003               	goto	l234
  3968                           
  3969                           ; BSR set to: 14
  3970                           ;eusart2.c: 157: {
  3971                           ;eusart2.c: 158: TX2REG = txData;
  3972  011E00  C0AF  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
  3973                           
  3974                           ;eusart2.c: 159: }
  3975  011E04  D012               	goto	l235
  3976  011E06                     l234:
  3977                           
  3978                           ; BSR set to: 14
  3979                           ;eusart2.c: 160: else
  3980                           ;eusart2.c: 161: {
  3981                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
  3982  011E06  9D2C               	bcf	44,6,b	;volatile
  3983                           
  3984                           ; BSR set to: 14
  3985                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
  3986  011E08  5041               	movf	_eusart2TxHead,w,c	;volatile
  3987  011E0A  0D01               	mullw	1
  3988  011E0C  0E00               	movlw	low _eusart2TxBuffer
  3989  011E0E  24F3               	addwf	prodl,w,c
  3990  011E10  6ED9               	movwf	fsr2l,c
  3991  011E12  0E02               	movlw	high _eusart2TxBuffer
  3992  011E14  20F4               	addwfc	prodh,w,c
  3993  011E16  6EDA               	movwf	fsr2h,c
  3994  011E18  C0AF  FFDF         	movff	EUSART2_Write@txData,indf2
  3995                           
  3996                           ; BSR set to: 14
  3997  011E1C  2A41               	incf	_eusart2TxHead,f,c	;volatile
  3998                           
  3999                           ; BSR set to: 14
  4000                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  4001  011E1E  0E3F               	movlw	63
  4002  011E20  6441               	cpfsgt	_eusart2TxHead,c	;volatile
  4003  011E22  D002               	goto	l236
  4004                           
  4005                           ; BSR set to: 14
  4006                           ;eusart2.c: 165: {
  4007                           ;eusart2.c: 166: eusart2TxHead = 0;
  4008  011E24  0E00               	movlw	0
  4009  011E26  6E41               	movwf	_eusart2TxHead,c	;volatile
  4010  011E28                     l236:
  4011                           
  4012                           ; BSR set to: 14
  4013                           ;eusart2.c: 167: }
  4014                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
  4015                           
  4016                           ; BSR set to: 14
  4017  011E28  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4018  011E2A                     l235:
  4019                           
  4020                           ; BSR set to: 14
  4021                           ;eusart2.c: 169: }
  4022                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
  4023                           
  4024                           ; BSR set to: 14
  4025  011E2A  8D2C               	bsf	44,6,b	;volatile
  4026                           
  4027                           ; BSR set to: 14
  4028  011E2C  0012               	return		;funcret
  4029  011E2E                     __end_of_EUSART2_Write:
  4030                           	opt stack 0
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           postdec1	equ	0xFE5
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function ___lwmod *****************
  4050 ;; Defined at:
  4051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  dividend        2    7[BANK0 ] unsigned int 
  4054 ;;  divisor         2    9[BANK0 ] unsigned int 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  counter         1   11[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2    7[BANK0 ] unsigned int 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4066 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;Total ram usage:        5 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    5
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_printf
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text11
  4081  011CEE                     __ptext11:
  4082                           	opt stack 0
  4083  011CEE                     ___lwmod:
  4084                           	opt stack 22
  4085                           
  4086                           ; BSR set to: 14
  4087                           ;incstack = 0
  4088  011CEE  0100               	movlb	0	; () banked
  4089  011CF0  51B8               	movf	___lwmod@divisor& (0+255),w,b
  4090  011CF2  11B9               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4091  011CF4  B4D8               	btfsc	status,2,c
  4092  011CF6  D018               	goto	l1468
  4093                           
  4094                           ; BSR set to: 0
  4095  011CF8  0E01               	movlw	1
  4096  011CFA  6FBA               	movwf	___lwmod@counter& (0+255),b
  4097  011CFC  D004               	goto	l1463
  4098  011CFE                     
  4099                           ; BSR set to: 0
  4100                           
  4101                           ; BSR set to: 0
  4102  011CFE  90D8               	bcf	status,0,c
  4103  011D00  37B8               	rlcf	___lwmod@divisor& (0+255),f,b
  4104  011D02  37B9               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4105  011D04  2BBA               	incf	___lwmod@counter& (0+255),f,b
  4106  011D06                     l1463:
  4107                           
  4108                           ; BSR set to: 0
  4109                           
  4110                           ; BSR set to: 0
  4111  011D06  AFB9               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4112  011D08  D7FA               	goto	l1464
  4113  011D0A                     u5260:
  4114                           
  4115                           ; BSR set to: 0
  4116                           
  4117                           ; BSR set to: 0
  4118                           
  4119                           ; BSR set to: 0
  4120  011D0A  51B8               	movf	___lwmod@divisor& (0+255),w,b
  4121  011D0C  5DB6               	subwf	___lwmod@dividend& (0+255),w,b
  4122  011D0E  51B9               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4123  011D10  59B7               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4124  011D12  A0D8               	btfss	status,0,c
  4125  011D14  D004               	goto	l1467
  4126                           
  4127                           ; BSR set to: 0
  4128  011D16  51B8               	movf	___lwmod@divisor& (0+255),w,b
  4129  011D18  5FB6               	subwf	___lwmod@dividend& (0+255),f,b
  4130  011D1A  51B9               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4131  011D1C  5BB7               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4132  011D1E                     l1467:
  4133                           
  4134                           ; BSR set to: 0
  4135                           
  4136                           ; BSR set to: 0
  4137  011D1E  90D8               	bcf	status,0,c
  4138  011D20  33B9               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4139  011D22  33B8               	rrcf	___lwmod@divisor& (0+255),f,b
  4140                           
  4141                           ; BSR set to: 0
  4142  011D24  2FBA               	decfsz	___lwmod@counter& (0+255),f,b
  4143  011D26  D7F1               	goto	u5260
  4144  011D28                     l1468:
  4145                           
  4146                           ; BSR set to: 0
  4147                           
  4148                           ; BSR set to: 0
  4149  011D28  C0B6  F0B6         	movff	___lwmod@dividend,?___lwmod
  4150  011D2C  C0B7  F0B7         	movff	___lwmod@dividend+1,?___lwmod+1
  4151                           
  4152                           ; BSR set to: 0
  4153  011D30  0012               	return		;funcret
  4154  011D32                     __end_of___lwmod:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function ___lwdiv *****************
  4175 ;; Defined at:
  4176 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  dividend        2    0[BANK0 ] unsigned int 
  4179 ;;  divisor         2    2[BANK0 ] unsigned int 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  quotient        2    5[BANK0 ] unsigned int 
  4182 ;;  counter         1    4[BANK0 ] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  2    0[BANK0 ] unsigned int 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4192 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4193 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4195 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;Total ram usage:        7 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    5
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_printf
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text12
  4207  011AC4                     __ptext12:
  4208                           	opt stack 0
  4209  011AC4                     ___lwdiv:
  4210                           	opt stack 22
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;incstack = 0
  4214  011AC4  0E00               	movlw	0
  4215  011AC6  0100               	movlb	0	; () banked
  4216  011AC8  6FB5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4217  011ACA  0E00               	movlw	0
  4218  011ACC  6FB4               	movwf	___lwdiv@quotient& (0+255),b
  4219                           
  4220                           ; BSR set to: 0
  4221  011ACE  51B1               	movf	___lwdiv@divisor& (0+255),w,b
  4222  011AD0  11B2               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4223  011AD2  B4D8               	btfsc	status,2,c
  4224  011AD4  D01C               	goto	l1458
  4225                           
  4226                           ; BSR set to: 0
  4227  011AD6  0E01               	movlw	1
  4228  011AD8  6FB3               	movwf	___lwdiv@counter& (0+255),b
  4229  011ADA  D004               	goto	l1453
  4230  011ADC                     
  4231                           ; BSR set to: 0
  4232                           
  4233                           ; BSR set to: 0
  4234  011ADC  90D8               	bcf	status,0,c
  4235  011ADE  37B1               	rlcf	___lwdiv@divisor& (0+255),f,b
  4236  011AE0  37B2               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4237  011AE2  2BB3               	incf	___lwdiv@counter& (0+255),f,b
  4238  011AE4                     l1453:
  4239                           
  4240                           ; BSR set to: 0
  4241                           
  4242                           ; BSR set to: 0
  4243  011AE4  AFB2               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4244  011AE6  D7FA               	goto	l1454
  4245  011AE8                     u5230:
  4246                           
  4247                           ; BSR set to: 0
  4248                           
  4249                           ; BSR set to: 0
  4250                           
  4251                           ; BSR set to: 0
  4252  011AE8  90D8               	bcf	status,0,c
  4253  011AEA  37B4               	rlcf	___lwdiv@quotient& (0+255),f,b
  4254  011AEC  37B5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4255                           
  4256                           ; BSR set to: 0
  4257  011AEE  51B1               	movf	___lwdiv@divisor& (0+255),w,b
  4258  011AF0  5DAF               	subwf	___lwdiv@dividend& (0+255),w,b
  4259  011AF2  51B2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4260  011AF4  59B0               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4261  011AF6  A0D8               	btfss	status,0,c
  4262  011AF8  D005               	goto	l1457
  4263                           
  4264                           ; BSR set to: 0
  4265  011AFA  51B1               	movf	___lwdiv@divisor& (0+255),w,b
  4266  011AFC  5FAF               	subwf	___lwdiv@dividend& (0+255),f,b
  4267  011AFE  51B2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4268  011B00  5BB0               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4269                           
  4270                           ; BSR set to: 0
  4271  011B02  81B4               	bsf	___lwdiv@quotient& (0+255),0,b
  4272  011B04                     l1457:
  4273                           
  4274                           ; BSR set to: 0
  4275                           
  4276                           ; BSR set to: 0
  4277  011B04  90D8               	bcf	status,0,c
  4278  011B06  33B2               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4279  011B08  33B1               	rrcf	___lwdiv@divisor& (0+255),f,b
  4280                           
  4281                           ; BSR set to: 0
  4282  011B0A  2FB3               	decfsz	___lwdiv@counter& (0+255),f,b
  4283  011B0C  D7ED               	goto	u5230
  4284  011B0E                     l1458:
  4285                           
  4286                           ; BSR set to: 0
  4287                           
  4288                           ; BSR set to: 0
  4289  011B0E  C0B4  F0AF         	movff	___lwdiv@quotient,?___lwdiv
  4290  011B12  C0B5  F0B0         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4291                           
  4292                           ; BSR set to: 0
  4293  011B16  0012               	return		;funcret
  4294  011B18                     __end_of___lwdiv:
  4295                           	opt stack 0
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _SYSTEM_Initialize *****************
  4315 ;; Defined at:
  4316 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;Total ram usage:        0 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    9
  4337 ;; This function calls:
  4338 ;;		_EUSART2_Initialize
  4339 ;;		_INTERRUPT_Initialize
  4340 ;;		_MTOUCH_Initialize
  4341 ;;		_OSCILLATOR_Initialize
  4342 ;;		_PIN_MANAGER_Initialize
  4343 ;;		_PMD_Initialize
  4344 ;; This function is called by:
  4345 ;;		_main
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text13
  4350  012368                     __ptext13:
  4351                           	opt stack 0
  4352  012368                     _SYSTEM_Initialize:
  4353                           	opt stack 21
  4354                           
  4355                           ;mcc.c: 52: INTERRUPT_Initialize();
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;incstack = 0
  4359  012368  EC46  F092         	call	_INTERRUPT_Initialize	;wreg free
  4360                           
  4361                           ;mcc.c: 53: PMD_Initialize();
  4362  01236C  ECA6  F091         	call	_PMD_Initialize	;wreg free
  4363                           
  4364                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4365  012370  EC5D  F08A         	call	_PIN_MANAGER_Initialize	;wreg free
  4366                           
  4367                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4368  012374  ECE8  F091         	call	_OSCILLATOR_Initialize	;wreg free
  4369                           
  4370                           ;mcc.c: 56: EUSART2_Initialize();
  4371  012378  EC33  F08D         	call	_EUSART2_Initialize	;wreg free
  4372                           
  4373                           ;mcc.c: 57: MTOUCH_Initialize();
  4374  01237C  EC0C  F092         	call	_MTOUCH_Initialize	;wreg free
  4375  012380  0012               	return		;funcret
  4376  012382                     __end_of_SYSTEM_Initialize:
  4377                           	opt stack 0
  4378                           tblptru	equ	0xFF8
  4379                           tblptrh	equ	0xFF7
  4380                           tblptrl	equ	0xFF6
  4381                           tablat	equ	0xFF5
  4382                           prodh	equ	0xFF4
  4383                           prodl	equ	0xFF3
  4384                           intcon	equ	0xFF2
  4385                           postinc0	equ	0xFEE
  4386                           wreg	equ	0xFE8
  4387                           postdec1	equ	0xFE5
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           postdec2	equ	0xFDD
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _PMD_Initialize *****************
  4397 ;; Defined at:
  4398 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    5
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_SYSTEM_Initialize
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text14
  4427  01234C                     __ptext14:
  4428                           	opt stack 0
  4429  01234C                     _PMD_Initialize:
  4430                           	opt stack 24
  4431                           
  4432                           ;mcc.c: 77: PMD0 = 0x00;
  4433                           
  4434                           ;incstack = 0
  4435  01234C  0E00               	movlw	0
  4436  01234E  010E               	movlb	14	; () banked
  4437  012350  6F4C               	movwf	76,b	;volatile
  4438                           
  4439                           ;mcc.c: 79: PMD1 = 0x00;
  4440  012352  0E00               	movlw	0
  4441  012354  6F4D               	movwf	77,b	;volatile
  4442                           
  4443                           ;mcc.c: 81: PMD2 = 0x00;
  4444  012356  0E00               	movlw	0
  4445  012358  6F4E               	movwf	78,b	;volatile
  4446                           
  4447                           ;mcc.c: 83: PMD3 = 0x00;
  4448  01235A  0E00               	movlw	0
  4449  01235C  6F4F               	movwf	79,b	;volatile
  4450                           
  4451                           ;mcc.c: 85: PMD4 = 0x00;
  4452  01235E  0E00               	movlw	0
  4453  012360  6F50               	movwf	80,b	;volatile
  4454                           
  4455                           ;mcc.c: 87: PMD5 = 0x00;
  4456  012362  0E00               	movlw	0
  4457  012364  6F51               	movwf	81,b	;volatile
  4458                           
  4459                           ; BSR set to: 14
  4460  012366  0012               	return		;funcret
  4461  012368                     __end_of_PMD_Initialize:
  4462                           	opt stack 0
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           postdec1	equ	0xFE5
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _PIN_MANAGER_Initialize *****************
  4482 ;; Defined at:
  4483 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;Total ram usage:        0 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    6
  4504 ;; This function calls:
  4505 ;;		_IOCBF2_SetInterruptHandler
  4506 ;; This function is called by:
  4507 ;;		_SYSTEM_Initialize
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text15
  4512  0114BA                     __ptext15:
  4513                           	opt stack 0
  4514  0114BA                     _PIN_MANAGER_Initialize:
  4515                           	opt stack 23
  4516                           
  4517                           ;pin_manager.c: 64: LATE = 0x00;
  4518                           
  4519                           ; BSR set to: 14
  4520                           ;incstack = 0
  4521  0114BA  0E00               	movlw	0
  4522  0114BC  6E7D               	movwf	3965,c	;volatile
  4523                           
  4524                           ;pin_manager.c: 65: LATD = 0x00;
  4525  0114BE  0E00               	movlw	0
  4526  0114C0  6E7C               	movwf	3964,c	;volatile
  4527                           
  4528                           ;pin_manager.c: 66: LATA = 0x00;
  4529  0114C2  0E00               	movlw	0
  4530  0114C4  6E79               	movwf	3961,c	;volatile
  4531                           
  4532                           ;pin_manager.c: 67: LATF = 0x1F;
  4533  0114C6  0E1F               	movlw	31
  4534  0114C8  6E7E               	movwf	3966,c	;volatile
  4535                           
  4536                           ;pin_manager.c: 68: LATB = 0x00;
  4537  0114CA  0E00               	movlw	0
  4538  0114CC  6E7A               	movwf	3962,c	;volatile
  4539                           
  4540                           ;pin_manager.c: 69: LATG = 0x00;
  4541  0114CE  0E00               	movlw	0
  4542  0114D0  6E7F               	movwf	3967,c	;volatile
  4543                           
  4544                           ;pin_manager.c: 70: LATC = 0x00;
  4545  0114D2  0E00               	movlw	0
  4546  0114D4  6E7B               	movwf	3963,c	;volatile
  4547                           
  4548                           ;pin_manager.c: 71: LATH = 0x00;
  4549  0114D6  0E00               	movlw	0
  4550  0114D8  6E80               	movwf	3968,c	;volatile
  4551                           
  4552                           ;pin_manager.c: 76: TRISE = 0x7C;
  4553  0114DA  0E7C               	movlw	124
  4554  0114DC  6E85               	movwf	3973,c	;volatile
  4555                           
  4556                           ;pin_manager.c: 77: TRISF = 0x00;
  4557  0114DE  0E00               	movlw	0
  4558  0114E0  6E86               	movwf	3974,c	;volatile
  4559                           
  4560                           ;pin_manager.c: 78: TRISA = 0x00;
  4561  0114E2  0E00               	movlw	0
  4562  0114E4  6E81               	movwf	3969,c	;volatile
  4563                           
  4564                           ;pin_manager.c: 79: TRISG = 0x40;
  4565  0114E6  0E40               	movlw	64
  4566  0114E8  6E87               	movwf	3975,c	;volatile
  4567                           
  4568                           ;pin_manager.c: 80: TRISB = 0x04;
  4569  0114EA  0E04               	movlw	4
  4570  0114EC  6E82               	movwf	3970,c	;volatile
  4571                           
  4572                           ;pin_manager.c: 81: TRISH = 0x00;
  4573  0114EE  0E00               	movlw	0
  4574  0114F0  6E88               	movwf	3976,c	;volatile
  4575                           
  4576                           ;pin_manager.c: 82: TRISC = 0x00;
  4577  0114F2  0E00               	movlw	0
  4578  0114F4  6E83               	movwf	3971,c	;volatile
  4579                           
  4580                           ;pin_manager.c: 83: TRISD = 0x00;
  4581  0114F6  0E00               	movlw	0
  4582  0114F8  6E84               	movwf	3972,c	;volatile
  4583                           
  4584                           ;pin_manager.c: 88: ANSELD = 0xFF;
  4585  0114FA  010E               	movlb	14	; () banked
  4586  0114FC  69A7               	setf	167,b	;volatile
  4587                           
  4588                           ;pin_manager.c: 89: ANSELB = 0xFB;
  4589  0114FE  0EFB               	movlw	251
  4590  011500  6F9A               	movwf	154,b	;volatile
  4591                           
  4592                           ; BSR set to: 14
  4593                           ;pin_manager.c: 90: ANSELE = 0xFF;
  4594  011502  69AF               	setf	175,b	;volatile
  4595                           
  4596                           ;pin_manager.c: 91: ANSELG = 0xBF;
  4597  011504  0EBF               	movlw	191
  4598  011506  6FBC               	movwf	188,b	;volatile
  4599                           
  4600                           ;pin_manager.c: 92: ANSELF = 0xE0;
  4601  011508  0EE0               	movlw	224
  4602  01150A  6FB4               	movwf	180,b	;volatile
  4603                           
  4604                           ; BSR set to: 14
  4605                           ;pin_manager.c: 93: ANSELA = 0xFF;
  4606  01150C  6992               	setf	146,b	;volatile
  4607                           
  4608                           ;pin_manager.c: 98: WPUD = 0x00;
  4609  01150E  0E00               	movlw	0
  4610  011510  6FA6               	movwf	166,b	;volatile
  4611                           
  4612                           ;pin_manager.c: 99: WPUF = 0x00;
  4613  011512  0E00               	movlw	0
  4614  011514  6FB3               	movwf	179,b	;volatile
  4615                           
  4616                           ;pin_manager.c: 100: WPUE = 0x00;
  4617  011516  0E00               	movlw	0
  4618  011518  6FAE               	movwf	174,b	;volatile
  4619                           
  4620                           ;pin_manager.c: 101: WPUB = 0x00;
  4621  01151A  0E00               	movlw	0
  4622  01151C  6F99               	movwf	153,b	;volatile
  4623                           
  4624                           ;pin_manager.c: 102: WPUG = 0x00;
  4625  01151E  0E00               	movlw	0
  4626  011520  6FBB               	movwf	187,b	;volatile
  4627                           
  4628                           ;pin_manager.c: 103: WPUA = 0x00;
  4629  011522  0E00               	movlw	0
  4630  011524  6F91               	movwf	145,b	;volatile
  4631                           
  4632                           ;pin_manager.c: 104: WPUC = 0x00;
  4633  011526  0E00               	movlw	0
  4634  011528  6FA1               	movwf	161,b	;volatile
  4635                           
  4636                           ;pin_manager.c: 105: WPUH = 0x00;
  4637  01152A  0E00               	movlw	0
  4638  01152C  6FC0               	movwf	192,b	;volatile
  4639                           
  4640                           ;pin_manager.c: 110: ODCONE = 0x00;
  4641  01152E  0E00               	movlw	0
  4642  011530  6FAD               	movwf	173,b	;volatile
  4643                           
  4644                           ;pin_manager.c: 111: ODCONF = 0x1F;
  4645  011532  0E1F               	movlw	31
  4646  011534  6FB2               	movwf	178,b	;volatile
  4647                           
  4648                           ;pin_manager.c: 112: ODCONA = 0x00;
  4649  011536  0E00               	movlw	0
  4650  011538  6F90               	movwf	144,b	;volatile
  4651                           
  4652                           ;pin_manager.c: 113: ODCONG = 0x00;
  4653  01153A  0E00               	movlw	0
  4654  01153C  6FBA               	movwf	186,b	;volatile
  4655                           
  4656                           ;pin_manager.c: 114: ODCONB = 0x00;
  4657  01153E  0E00               	movlw	0
  4658  011540  6F98               	movwf	152,b	;volatile
  4659                           
  4660                           ;pin_manager.c: 115: ODCONH = 0x00;
  4661  011542  0E00               	movlw	0
  4662  011544  6FBF               	movwf	191,b	;volatile
  4663                           
  4664                           ;pin_manager.c: 116: ODCONC = 0x00;
  4665  011546  0E00               	movlw	0
  4666  011548  6FA0               	movwf	160,b	;volatile
  4667                           
  4668                           ;pin_manager.c: 117: ODCOND = 0x00;
  4669  01154A  0E00               	movlw	0
  4670  01154C  6FA5               	movwf	165,b	;volatile
  4671                           
  4672                           ; BSR set to: 14
  4673                           ;pin_manager.c: 124: IOCBFbits.IOCBF2 = 0;
  4674  01154E  9593               	bcf	147,2,b	;volatile
  4675                           
  4676                           ; BSR set to: 14
  4677                           ;pin_manager.c: 126: IOCBNbits.IOCBN2 = 1;
  4678  011550  8594               	bsf	148,2,b	;volatile
  4679                           
  4680                           ; BSR set to: 14
  4681                           ;pin_manager.c: 128: IOCBPbits.IOCBP2 = 1;
  4682  011552  8595               	bsf	149,2,b	;volatile
  4683                           
  4684                           ; BSR set to: 14
  4685                           ;pin_manager.c: 133: IOCBF2_SetInterruptHandler(IOCBF2_DefaultInterruptHandler);
  4686  011554  0E16               	movlw	low _IOCBF2_DefaultInterruptHandler
  4687  011556  0100               	movlb	0	; () banked
  4688  011558  6FAF               	movwf	IOCBF2_SetInterruptHandler@InterruptHandler& (0+255),b
  4689  01155A  0E25               	movlw	high _IOCBF2_DefaultInterruptHandler
  4690  01155C  6FB0               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4691  01155E  0E01               	movlw	low (_IOCBF2_DefaultInterruptHandler shr (0+16))
  4692  011560  6FB1               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  4693  011562  EC3F  F092         	call	_IOCBF2_SetInterruptHandler	;wreg free
  4694                           
  4695                           ;pin_manager.c: 136: PIE0bits.IOCIE = 1;
  4696  011566  010E               	movlb	14	; () banked
  4697  011568  8929               	bsf	41,4,b	;volatile
  4698                           
  4699                           ; BSR set to: 14
  4700                           ;pin_manager.c: 139: RG7PPS = 0x0E;
  4701  01156A  0E0E               	movlw	14
  4702  01156C  6F89               	movwf	137,b	;volatile
  4703                           
  4704                           ; BSR set to: 14
  4705                           ;pin_manager.c: 140: RX2PPSbits.RX2PPS = 0x36;
  4706  01156E  9111               	bcf	17,0,b	;volatile
  4707  011570  8311               	bsf	17,1,b	;volatile
  4708  011572  8511               	bsf	17,2,b	;volatile
  4709  011574  9711               	bcf	17,3,b	;volatile
  4710  011576  8911               	bsf	17,4,b	;volatile
  4711  011578  8B11               	bsf	17,5,b	;volatile
  4712                           
  4713                           ; BSR set to: 14
  4714  01157A  0012               	return		;funcret
  4715  01157C                     __end_of_PIN_MANAGER_Initialize:
  4716                           	opt stack 0
  4717                           tblptru	equ	0xFF8
  4718                           tblptrh	equ	0xFF7
  4719                           tblptrl	equ	0xFF6
  4720                           tablat	equ	0xFF5
  4721                           prodh	equ	0xFF4
  4722                           prodl	equ	0xFF3
  4723                           intcon	equ	0xFF2
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           postdec1	equ	0xFE5
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _IOCBF2_SetInterruptHandler *****************
  4736 ;; Defined at:
  4737 ;;		line 170 in file "mcc_generated_files/pin_manager.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  InterruptHan    3    0[BANK0 ] PTR FTN()void 
  4740 ;;		 -> DTR_Callback(1), IOCBF2_DefaultInterruptHandler(1), 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4752 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;Total ram usage:        3 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    5
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_PIN_MANAGER_Initialize
  4763 ;;		_main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text16
  4768  01247E                     __ptext16:
  4769                           	opt stack 0
  4770  01247E                     _IOCBF2_SetInterruptHandler:
  4771                           	opt stack 23
  4772                           
  4773                           ;pin_manager.c: 171: IOCBF2_InterruptHandler = InterruptHandler;
  4774                           
  4775                           ; BSR set to: 14
  4776                           ;incstack = 0
  4777  01247E  C0AF  F04B         	movff	IOCBF2_SetInterruptHandler@InterruptHandler,_IOCBF2_InterruptHandler
  4778  012482  C0B0  F04C         	movff	IOCBF2_SetInterruptHandler@InterruptHandler+1,_IOCBF2_InterruptHandler+1
  4779  012486  C0B1  F04D         	movff	IOCBF2_SetInterruptHandler@InterruptHandler+2,_IOCBF2_InterruptHandler+2
  4780  01248A  0012               	return		;funcret
  4781  01248C                     __end_of_IOCBF2_SetInterruptHandler:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           prodh	equ	0xFF4
  4788                           prodl	equ	0xFF3
  4789                           intcon	equ	0xFF2
  4790                           postinc0	equ	0xFEE
  4791                           wreg	equ	0xFE8
  4792                           postdec1	equ	0xFE5
  4793                           fsr1l	equ	0xFE1
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function _OSCILLATOR_Initialize *****************
  4802 ;; Defined at:
  4803 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      void 
  4810 ;; Registers used:
  4811 ;;		wreg, status,2
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4821 ;;Total ram usage:        0 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    5
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_SYSTEM_Initialize
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text17
  4832  0123D0                     __ptext17:
  4833                           	opt stack 0
  4834  0123D0                     _OSCILLATOR_Initialize:
  4835                           	opt stack 24
  4836                           
  4837                           ;mcc.c: 63: OSCCON1 = 0x60;
  4838                           
  4839                           ;incstack = 0
  4840  0123D0  0E60               	movlw	96
  4841  0123D2  010E               	movlb	14	; () banked
  4842  0123D4  6F43               	movwf	67,b	;volatile
  4843                           
  4844                           ;mcc.c: 65: OSCCON3 = 0x00;
  4845  0123D6  0E00               	movlw	0
  4846  0123D8  6F45               	movwf	69,b	;volatile
  4847                           
  4848                           ;mcc.c: 67: OSCEN = 0x00;
  4849  0123DA  0E00               	movlw	0
  4850  0123DC  6F47               	movwf	71,b	;volatile
  4851                           
  4852                           ;mcc.c: 69: OSCFRQ = 0x08;
  4853  0123DE  0E08               	movlw	8
  4854  0123E0  6F49               	movwf	73,b	;volatile
  4855                           
  4856                           ;mcc.c: 71: OSCTUNE = 0x00;
  4857  0123E2  0E00               	movlw	0
  4858  0123E4  6F48               	movwf	72,b	;volatile
  4859                           
  4860                           ; BSR set to: 14
  4861  0123E6  0012               	return		;funcret
  4862  0123E8                     __end_of_OSCILLATOR_Initialize:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           postdec1	equ	0xFE5
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _MTOUCH_Initialize *****************
  4883 ;; Defined at:
  4884 ;;		line 75 in file "mcc_generated_files/mtouch/mtouch.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    8
  4905 ;; This function calls:
  4906 ;;		_MTOUCH_Button_InitializeAll
  4907 ;;		_MTOUCH_Sensor_InitializeAll
  4908 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4909 ;;		_MTOUCH_Sensor_Scan_Initialize
  4910 ;; This function is called by:
  4911 ;;		_SYSTEM_Initialize
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text18
  4916  012418                     __ptext18:
  4917                           	opt stack 0
  4918  012418                     _MTOUCH_Initialize:
  4919                           	opt stack 21
  4920                           
  4921                           ;mtouch.c: 77: MTOUCH_Sensor_InitializeAll();
  4922                           
  4923                           ; BSR set to: 14
  4924                           ;incstack = 0
  4925  012418  EC8E  F08F         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  4926                           
  4927                           ;mtouch.c: 78: MTOUCH_Button_InitializeAll();
  4928  01241C  ECAA  F08F         	call	_MTOUCH_Button_InitializeAll	;wreg free
  4929                           
  4930                           ;mtouch.c: 79: MTOUCH_Sensor_Sampled_ResetAll();
  4931  012420  EC7B  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  4932                           
  4933                           ;mtouch.c: 80: MTOUCH_Sensor_Scan_Initialize();
  4934  012424  EC81  F092         	call	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  4935  012428  0012               	return		;funcret
  4936  01242A                     __end_of_MTOUCH_Initialize:
  4937                           	opt stack 0
  4938                           tblptru	equ	0xFF8
  4939                           tblptrh	equ	0xFF7
  4940                           tblptrl	equ	0xFF6
  4941                           tablat	equ	0xFF5
  4942                           prodh	equ	0xFF4
  4943                           prodl	equ	0xFF3
  4944                           intcon	equ	0xFF2
  4945                           postinc0	equ	0xFEE
  4946                           wreg	equ	0xFE8
  4947                           postdec1	equ	0xFE5
  4948                           fsr1l	equ	0xFE1
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  4957 ;; Defined at:
  4958 ;;		line 327 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;		None
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4976 ;;Total ram usage:        0 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    6
  4979 ;; This function calls:
  4980 ;;		_MTOUCH_Sensor_ADCC_Initialize
  4981 ;; This function is called by:
  4982 ;;		_MTOUCH_Initialize
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text19
  4987  012502                     __ptext19:
  4988                           	opt stack 0
  4989  012502                     _MTOUCH_Sensor_Scan_Initialize:
  4990                           	opt stack 22
  4991                           
  4992                           ;mtouch_sensor.c: 329: MTOUCH_Sensor_ADCC_Initialize();
  4993                           
  4994                           ;incstack = 0
  4995  012502  EC17  F08F         	call	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  4996  012506  0012               	return		;funcret
  4997  012508                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  4998                           	opt stack 0
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           postinc0	equ	0xFEE
  5007                           wreg	equ	0xFE8
  5008                           postdec1	equ	0xFE5
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  5018 ;; Defined at:
  5019 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    5
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_MTOUCH_Sensor_Scan_Initialize
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text20
  5048  011E2E                     __ptext20:
  5049                           	opt stack 0
  5050  011E2E                     _MTOUCH_Sensor_ADCC_Initialize:
  5051                           	opt stack 22
  5052                           
  5053                           ;mtouch_sensor.c: 254: ADCLK = 0x1f;
  5054                           
  5055                           ;incstack = 0
  5056  011E2E  0E1F               	movlw	31
  5057  011E30  010F               	movlb	15	; () banked
  5058  011E32  6F57               	movwf	87,b	;volatile
  5059                           
  5060                           ;mtouch_sensor.c: 256: ADREF = 0x00;
  5061  011E34  0E00               	movlw	0
  5062  011E36  6F58               	movwf	88,b	;volatile
  5063                           
  5064                           ;mtouch_sensor.c: 258: ADCAP = 0x00;
  5065  011E38  0E00               	movlw	0
  5066  011E3A  6F5D               	movwf	93,b	;volatile
  5067                           
  5068                           ;mtouch_sensor.c: 260: ADLTHL = 0x00;
  5069  011E3C  0E00               	movlw	0
  5070  011E3E  6E6A               	movwf	3946,c	;volatile
  5071                           
  5072                           ;mtouch_sensor.c: 262: ADLTHH = 0x00;
  5073  011E40  0E00               	movlw	0
  5074  011E42  6E6B               	movwf	3947,c	;volatile
  5075                           
  5076                           ;mtouch_sensor.c: 264: ADUTHL = 0x00;
  5077  011E44  0E00               	movlw	0
  5078  011E46  6E6C               	movwf	3948,c	;volatile
  5079                           
  5080                           ;mtouch_sensor.c: 266: ADUTHH = 0x00;
  5081  011E48  0E00               	movlw	0
  5082  011E4A  6E6D               	movwf	3949,c	;volatile
  5083                           
  5084                           ;mtouch_sensor.c: 268: ADSTPTL = 0x00;
  5085  011E4C  0E00               	movlw	0
  5086  011E4E  6E68               	movwf	3944,c	;volatile
  5087                           
  5088                           ;mtouch_sensor.c: 270: ADSTPTH = 0x00;
  5089  011E50  0E00               	movlw	0
  5090  011E52  6E69               	movwf	3945,c	;volatile
  5091                           
  5092                           ;mtouch_sensor.c: 273: ADCON1 = 0x41;
  5093  011E54  0E41               	movlw	65
  5094  011E56  6F59               	movwf	89,b	;volatile
  5095                           
  5096                           ;mtouch_sensor.c: 275: ADCON2 = 0x8B;
  5097  011E58  0E8B               	movlw	139
  5098  011E5A  6F5A               	movwf	90,b	;volatile
  5099                           
  5100                           ;mtouch_sensor.c: 278: ADCON3 = 0x0F;
  5101  011E5C  0E0F               	movlw	15
  5102  011E5E  6F5B               	movwf	91,b	;volatile
  5103                           
  5104                           ;mtouch_sensor.c: 281: ADCON0 = 0xC4;
  5105  011E60  0EC4               	movlw	196
  5106  011E62  6E60               	movwf	3936,c	;volatile
  5107                           
  5108                           ; BSR set to: 15
  5109                           ;mtouch_sensor.c: 284: PIR1bits.ADTIF = 0;
  5110  011E64  010E               	movlb	14	; () banked
  5111  011E66  9334               	bcf	52,1,b	;volatile
  5112                           
  5113                           ; BSR set to: 14
  5114                           ;mtouch_sensor.c: 286: PIE1bits.ADTIE = 1;
  5115  011E68  832A               	bsf	42,1,b	;volatile
  5116                           
  5117                           ; BSR set to: 14
  5118  011E6A  0012               	return		;funcret
  5119  011E6C                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           prodh	equ	0xFF4
  5126                           prodl	equ	0xFF3
  5127                           intcon	equ	0xFF2
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           indf2	equ	0xFDF
  5133                           postinc2	equ	0xFDE
  5134                           postdec2	equ	0xFDD
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  5140 ;; Defined at:
  5141 ;;		line 290 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  sensor          1   11[BANK0 ] enum E17513
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;Total ram usage:        1 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    7
  5162 ;; This function calls:
  5163 ;;		_MTOUCH_Sensor_Initialize
  5164 ;;		_memcpy
  5165 ;; This function is called by:
  5166 ;;		_MTOUCH_Initialize
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text21
  5171  011F1C                     __ptext21:
  5172                           	opt stack 0
  5173  011F1C                     _MTOUCH_Sensor_InitializeAll:
  5174                           	opt stack 21
  5175                           
  5176                           ;mtouch_sensor.c: 292: enum mtouch_sensor_names sensor;
  5177                           ;mtouch_sensor.c: 294: memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init
      +                          ));
  5178                           
  5179                           ; BSR set to: 14
  5180                           ;incstack = 0
  5181  011F1C  0E82               	movlw	low _mtouch_sensor
  5182  011F1E  0100               	movlb	0	; () banked
  5183  011F20  6FAF               	movwf	memcpy@d1& (0+255),b
  5184  011F22  0E00               	movlw	high _mtouch_sensor
  5185  011F24  6FB0               	movwf	(memcpy@d1+1)& (0+255),b
  5186  011F26  0E25               	movlw	low _mtouch_sensor_init
  5187  011F28  6FB1               	movwf	memcpy@s1& (0+255),b
  5188  011F2A  0EFC               	movlw	high _mtouch_sensor_init
  5189  011F2C  6FB2               	movwf	(memcpy@s1+1)& (0+255),b
  5190  011F2E  0E00               	movlw	0
  5191  011F30  6FB4               	movwf	(memcpy@n+1)& (0+255),b
  5192  011F32  0E2D               	movlw	45
  5193  011F34  6FB3               	movwf	memcpy@n& (0+255),b
  5194  011F36  EC06  F08E         	call	_memcpy	;wreg free
  5195                           
  5196                           ;mtouch_sensor.c: 296: for (sensor = 0; sensor < 5; sensor++)
  5197  011F3A  0E00               	movlw	0
  5198  011F3C  0100               	movlb	0	; () banked
  5199  011F3E  6FBA               	movwf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  5200  011F40                     l4869:
  5201                           
  5202                           ; BSR set to: 0
  5203  011F40  0E04               	movlw	4
  5204  011F42  65BA               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  5205  011F44  D001               	goto	l507
  5206  011F46  0012               	return	
  5207  011F48                     l507:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;mtouch_sensor.c: 297: {
  5211                           ;mtouch_sensor.c: 298: MTOUCH_Sensor_Initialize(sensor);
  5212                           
  5213                           ; BSR set to: 0
  5214  011F48  51BA               	movf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),w,b
  5215  011F4A  ECEF  F08B         	call	_MTOUCH_Sensor_Initialize
  5216  011F4E  0100               	movlb	0	; () banked
  5217  011F50  2BBA               	incf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),f,b
  5218  011F52  D7F6               	goto	l4869
  5219  011F54                     __end_of_MTOUCH_Sensor_InitializeAll:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           postinc0	equ	0xFEE
  5229                           wreg	equ	0xFE8
  5230                           postdec1	equ	0xFE5
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5240 ;; Defined at:
  5241 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  sensor          1    wreg     enum E17513
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  sensor          1    2[BANK0 ] enum E17513
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      enum E17519
  5248 ;; Registers used:
  5249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;Total ram usage:        1 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    6
  5262 ;; This function calls:
  5263 ;;		_MTOUCH_Sensor_Calibrate
  5264 ;;		_MTOUCH_Sensor_Enable
  5265 ;;		_Sensor_Sampled_Reset
  5266 ;; This function is called by:
  5267 ;;		_MTOUCH_Sensor_InitializeAll
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text22
  5272  0117DE                     __ptext22:
  5273                           	opt stack 0
  5274  0117DE                     _MTOUCH_Sensor_Initialize:
  5275                           	opt stack 21
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;incstack = 0
  5279                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5280  0117DE  0100               	movlb	0	; () banked
  5281  0117E0  6FB1               	movwf	MTOUCH_Sensor_Initialize@sensor& (0+255),b
  5282                           
  5283                           ;mtouch_sensor.c: 191: switch(sensor)
  5284  0117E2  D014               	goto	l482
  5285  0117E4                     l483:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;mtouch_sensor.c: 194: WPUEbits.WPUE2 = 0;
  5289  0117E4  010E               	movlb	14	; () banked
  5290  0117E6  95AE               	bcf	174,2,b	;volatile
  5291                           
  5292                           ;mtouch_sensor.c: 195: ANSELEbits.ANSELE2 = 0;
  5293  0117E8  95AF               	bcf	175,2,b	;volatile
  5294                           
  5295                           ;mtouch_sensor.c: 196: break;
  5296  0117EA  D022               	goto	l484
  5297  0117EC                     l485:
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;mtouch_sensor.c: 198: WPUEbits.WPUE3 = 0;
  5301  0117EC  010E               	movlb	14	; () banked
  5302  0117EE  97AE               	bcf	174,3,b	;volatile
  5303                           
  5304                           ;mtouch_sensor.c: 199: ANSELEbits.ANSELE3 = 0;
  5305  0117F0  97AF               	bcf	175,3,b	;volatile
  5306                           
  5307                           ;mtouch_sensor.c: 200: break;
  5308  0117F2  D01E               	goto	l484
  5309  0117F4                     l486:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;mtouch_sensor.c: 202: WPUEbits.WPUE4 = 0;
  5313  0117F4  010E               	movlb	14	; () banked
  5314  0117F6  99AE               	bcf	174,4,b	;volatile
  5315                           
  5316                           ;mtouch_sensor.c: 203: ANSELEbits.ANSELE4 = 0;
  5317  0117F8  99AF               	bcf	175,4,b	;volatile
  5318                           
  5319                           ;mtouch_sensor.c: 204: break;
  5320  0117FA  D01A               	goto	l484
  5321  0117FC                     l487:
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;mtouch_sensor.c: 206: WPUEbits.WPUE5 = 0;
  5325  0117FC  010E               	movlb	14	; () banked
  5326  0117FE  9BAE               	bcf	174,5,b	;volatile
  5327                           
  5328                           ;mtouch_sensor.c: 207: ANSELEbits.ANSELE5 = 0;
  5329  011800  9BAF               	bcf	175,5,b	;volatile
  5330                           
  5331                           ;mtouch_sensor.c: 208: break;
  5332  011802  D016               	goto	l484
  5333  011804                     l488:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;mtouch_sensor.c: 210: WPUEbits.WPUE6 = 0;
  5337  011804  010E               	movlb	14	; () banked
  5338  011806  9DAE               	bcf	174,6,b	;volatile
  5339                           
  5340                           ;mtouch_sensor.c: 211: ANSELEbits.ANSELE6 = 0;
  5341  011808  9DAF               	bcf	175,6,b	;volatile
  5342                           
  5343                           ;mtouch_sensor.c: 212: break;
  5344  01180A  D012               	goto	l484
  5345  01180C                     l482:
  5346                           
  5347                           ; BSR set to: 14
  5348  01180C  0100               	movlb	0	; () banked
  5349  01180E  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5350                           
  5351                           ; Switch size 1, requested type "space"
  5352                           ; Number of cases is 5, Range of values is 0 to 4
  5353                           ; switch strategies available:
  5354                           ; Name         Instructions Cycles
  5355                           ; simple_byte           16     9 (average)
  5356                           ;	Chosen strategy is simple_byte
  5357  011810  0A00               	xorlw	0	; case 0
  5358  011812  B4D8               	btfsc	status,2,c
  5359  011814  D7E7               	goto	l483
  5360  011816  0A01               	xorlw	1	; case 1
  5361  011818  B4D8               	btfsc	status,2,c
  5362  01181A  D7E8               	goto	l485
  5363  01181C  0A03               	xorlw	3	; case 2
  5364  01181E  B4D8               	btfsc	status,2,c
  5365  011820  D7E9               	goto	l486
  5366  011822  0A01               	xorlw	1	; case 3
  5367  011824  B4D8               	btfsc	status,2,c
  5368  011826  D7EA               	goto	l487
  5369  011828  0A07               	xorlw	7	; case 4
  5370  01182A  A4D8               	btfss	status,2,c
  5371  01182C  0012               	return	
  5372  01182E  D7EA               	goto	l488
  5373  011830                     l484:
  5374                           
  5375                           ;mtouch_sensor.c: 215: MTOUCH_Sensor_Enable(sensor);
  5376                           
  5377                           ; BSR set to: 0
  5378  011830  0100               	movlb	0	; () banked
  5379  011832  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5380  011834  ECD6  F090         	call	_MTOUCH_Sensor_Enable
  5381                           
  5382                           ;mtouch_sensor.c: 216: MTOUCH_Sensor_Calibrate(sensor);
  5383  011838  0100               	movlb	0	; () banked
  5384  01183A  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5385  01183C  EC12  F091         	call	_MTOUCH_Sensor_Calibrate
  5386                           
  5387                           ;mtouch_sensor.c: 217: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  5388  011840  0100               	movlb	0	; () banked
  5389  011842  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5390  011844  0D09               	mullw	9
  5391  011846  0E82               	movlw	low _mtouch_sensor
  5392  011848  24F3               	addwf	prodl,w,c
  5393  01184A  6FAF               	movwf	Sensor_Sampled_Reset@sensor& (0+255),b
  5394  01184C  0E00               	movlw	high _mtouch_sensor
  5395  01184E  20F4               	addwfc	prodh,w,c
  5396  011850  6FB0               	movwf	(Sensor_Sampled_Reset@sensor+1)& (0+255),b
  5397  011852  EC15  F092         	call	_Sensor_Sampled_Reset	;wreg free
  5398  011856  0012               	return	
  5399  011858                     __end_of_MTOUCH_Sensor_Initialize:
  5400                           	opt stack 0
  5401                           tblptru	equ	0xFF8
  5402                           tblptrh	equ	0xFF7
  5403                           tblptrl	equ	0xFF6
  5404                           tablat	equ	0xFF5
  5405                           prodh	equ	0xFF4
  5406                           prodl	equ	0xFF3
  5407                           intcon	equ	0xFF2
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           postdec1	equ	0xFE5
  5411                           fsr1l	equ	0xFE1
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5420 ;; Defined at:
  5421 ;;		line 711 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  sensor          1    wreg     enum E17513
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  sensor          1    0[BANK0 ] enum E17513
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;Total ram usage:        1 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    5
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_MTOUCH_Sensor_Initialize
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text23
  5450  0121AC                     __ptext23:
  5451                           	opt stack 0
  5452  0121AC                     _MTOUCH_Sensor_Enable:
  5453                           	opt stack 21
  5454                           
  5455                           ;incstack = 0
  5456                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5457  0121AC  0100               	movlb	0	; () banked
  5458  0121AE  6FAF               	movwf	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5459                           
  5460                           ;mtouch_sensor.c: 713: if(sensor < 5)
  5461  0121B0  0E05               	movlw	5
  5462  0121B2  0100               	movlb	0	; () banked
  5463  0121B4  61AF               	cpfslt	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5464  0121B6  0012               	return	
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;mtouch_sensor.c: 714: mtouch_sensor[sensor].enabled = 1;
  5468  0121B8  51AF               	movf	MTOUCH_Sensor_Enable@sensor& (0+255),w,b
  5469  0121BA  0D09               	mullw	9
  5470  0121BC  0E08               	movlw	8
  5471  0121BE  26F3               	addwf	prodl,f,c
  5472  0121C0  0E00               	movlw	0
  5473  0121C2  22F4               	addwfc	prodh,f,c
  5474  0121C4  0E82               	movlw	low _mtouch_sensor
  5475  0121C6  24F3               	addwf	prodl,w,c
  5476  0121C8  6ED9               	movwf	fsr2l,c
  5477  0121CA  0E00               	movlw	high _mtouch_sensor
  5478  0121CC  20F4               	addwfc	prodh,w,c
  5479  0121CE  6EDA               	movwf	fsr2h,c
  5480  0121D0  80DF               	bsf	indf2,0,c
  5481  0121D2  0012               	return	
  5482  0121D4                     __end_of_MTOUCH_Sensor_Enable:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5503 ;; Defined at:
  5504 ;;		line 190 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  button          1   11[BANK0 ] enum E17454
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;Total ram usage:        1 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    7
  5525 ;; This function calls:
  5526 ;;		_MTOUCH_Button_Initialize
  5527 ;;		_memcpy
  5528 ;; This function is called by:
  5529 ;;		_MTOUCH_Initialize
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text24
  5534  011F54                     __ptext24:
  5535                           	opt stack 0
  5536  011F54                     _MTOUCH_Button_InitializeAll:
  5537                           	opt stack 21
  5538                           
  5539                           ;mtouch_button.c: 192: enum mtouch_button_names button;
  5540                           ;mtouch_button.c: 194: memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init
      +                          ));
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;incstack = 0
  5544  011F54  0E40               	movlw	low _mtouch_button
  5545  011F56  0100               	movlb	0	; () banked
  5546  011F58  6FAF               	movwf	memcpy@d1& (0+255),b
  5547  011F5A  0E01               	movlw	high _mtouch_button
  5548  011F5C  6FB0               	movwf	(memcpy@d1+1)& (0+255),b
  5549  011F5E  0ED5               	movlw	low _mtouch_button_init
  5550  011F60  6FB1               	movwf	memcpy@s1& (0+255),b
  5551  011F62  0EFB               	movlw	high _mtouch_button_init
  5552  011F64  6FB2               	movwf	(memcpy@s1+1)& (0+255),b
  5553  011F66  0E00               	movlw	0
  5554  011F68  6FB4               	movwf	(memcpy@n+1)& (0+255),b
  5555  011F6A  0E50               	movlw	80
  5556  011F6C  6FB3               	movwf	memcpy@n& (0+255),b
  5557  011F6E  EC06  F08E         	call	_memcpy	;wreg free
  5558                           
  5559                           ;mtouch_button.c: 196: for (button = 0; button < 5; button++)
  5560  011F72  0E00               	movlw	0
  5561  011F74  0100               	movlb	0	; () banked
  5562  011F76  6FBA               	movwf	MTOUCH_Button_InitializeAll@button& (0+255),b
  5563  011F78                     l4883:
  5564                           
  5565                           ; BSR set to: 0
  5566  011F78  0E04               	movlw	4
  5567  011F7A  65BA               	cpfsgt	MTOUCH_Button_InitializeAll@button& (0+255),b
  5568  011F7C  D001               	goto	l765
  5569  011F7E  0012               	return	
  5570  011F80                     l765:
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;mtouch_button.c: 197: {
  5574                           ;mtouch_button.c: 198: MTOUCH_Button_Initialize(button);
  5575                           
  5576                           ; BSR set to: 0
  5577  011F80  51BA               	movf	MTOUCH_Button_InitializeAll@button& (0+255),w,b
  5578  011F82  EC2C  F08C         	call	_MTOUCH_Button_Initialize
  5579  011F86  0100               	movlb	0	; () banked
  5580  011F88  2BBA               	incf	MTOUCH_Button_InitializeAll@button& (0+255),f,b
  5581  011F8A  D7F6               	goto	l4883
  5582  011F8C                     __end_of_MTOUCH_Button_InitializeAll:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           postinc2	equ	0xFDE
  5597                           postdec2	equ	0xFDD
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function _memcpy *****************
  5603 ;; Defined at:
  5604 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  d1              2    0[BANK0 ] PTR void 
  5607 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5608 ;;  s1              2    2[BANK0 ] PTR const void 
  5609 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5610 ;;  n               2    4[BANK0 ] unsigned int 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  5613 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5614 ;;  d               2    7[BANK0 ] PTR unsigned char 
  5615 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5616 ;;  tmp             1    6[BANK0 ] unsigned char 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  2    0[BANK0 ] PTR void 
  5619 ;; Registers used:
  5620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5626 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5627 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5629 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5630 ;;Total ram usage:       11 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    5
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_MTOUCH_Sensor_InitializeAll
  5637 ;;		_MTOUCH_Button_InitializeAll
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text25
  5642  011C0C                     __ptext25:
  5643                           	opt stack 0
  5644  011C0C                     _memcpy:
  5645                           	opt stack 22
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;incstack = 0
  5649  011C0C  C0B1  F0B8         	movff	memcpy@s1,memcpy@s
  5650  011C10  C0B2  F0B9         	movff	memcpy@s1+1,memcpy@s+1
  5651  011C14  C0AF  F0B6         	movff	memcpy@d1,memcpy@d
  5652  011C18  C0B0  F0B7         	movff	memcpy@d1+1,memcpy@d+1
  5653  011C1C  D014               	goto	l1477
  5654  011C1E                     l4555:
  5655  011C1E  C0B8  FFF6         	movff	memcpy@s,tblptrl
  5656  011C22  C0B9  FFF7         	movff	memcpy@s+1,tblptrh
  5657  011C26                     	if	0	;tblptru may be non-zero
  5658  011C26                     	endif
  5659  011C26                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5660  011C26  0E00               	movlw	low (__mediumconst shr (0+16))
  5661  011C28  6EF8               	movwf	tblptru,c
  5662  011C2A                     	endif
  5663  011C2A  0008               	tblrd		*
  5664  011C2C  CFF5 F0B5          	movff	tablat,memcpy@tmp
  5665  011C30  0100               	movlb	0	; () banked
  5666  011C32  4BB8               	infsnz	memcpy@s& (0+255),f,b
  5667  011C34  2BB9               	incf	(memcpy@s+1)& (0+255),f,b
  5668                           
  5669                           ; BSR set to: 0
  5670  011C36  C0B6  FFD9         	movff	memcpy@d,fsr2l
  5671  011C3A  C0B7  FFDA         	movff	memcpy@d+1,fsr2h
  5672  011C3E  C0B5  FFDF         	movff	memcpy@tmp,indf2
  5673                           
  5674                           ; BSR set to: 0
  5675  011C42  4BB6               	infsnz	memcpy@d& (0+255),f,b
  5676  011C44  2BB7               	incf	(memcpy@d+1)& (0+255),f,b
  5677  011C46                     l1477:
  5678                           
  5679                           ; BSR set to: 0
  5680  011C46  0100               	movlb	0	; () banked
  5681  011C48  07B3               	decf	memcpy@n& (0+255),f,b
  5682  011C4A  A0D8               	btfss	status,0,c
  5683  011C4C  07B4               	decf	(memcpy@n+1)& (0+255),f,b
  5684  011C4E  29B3               	incf	memcpy@n& (0+255),w,b
  5685  011C50  E1E6               	bnz	l4555
  5686  011C52  29B4               	incf	(memcpy@n+1)& (0+255),w,b
  5687  011C54  B4D8               	btfsc	status,2,c
  5688  011C56  0012               	return	
  5689  011C58  D7E2               	goto	l1478
  5690  011C5A                     __end_of_memcpy:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           fsr1l	equ	0xFE1
  5703                           indf2	equ	0xFDF
  5704                           postinc2	equ	0xFDE
  5705                           postdec2	equ	0xFDD
  5706                           fsr2h	equ	0xFDA
  5707                           fsr2l	equ	0xFD9
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function _INTERRUPT_Initialize *****************
  5711 ;; Defined at:
  5712 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		None
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    5
  5733 ;; This function calls:
  5734 ;;		Nothing
  5735 ;; This function is called by:
  5736 ;;		_SYSTEM_Initialize
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text26
  5741  01248C                     __ptext26:
  5742                           	opt stack 0
  5743  01248C                     _INTERRUPT_Initialize:
  5744                           	opt stack 24
  5745                           
  5746                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 1;
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;incstack = 0
  5750  01248C  8AF2               	bsf	intcon,5,c	;volatile
  5751                           
  5752                           ;interrupt_manager.c: 60: IPR3bits.TX2IP = 1;
  5753  01248E  010E               	movlb	14	; () banked
  5754  012490  8D22               	bsf	34,6,b	;volatile
  5755                           
  5756                           ;interrupt_manager.c: 63: IPR3bits.RC2IP = 1;
  5757  012492  8F22               	bsf	34,7,b	;volatile
  5758                           
  5759                           ;interrupt_manager.c: 66: IPR1bits.ADTIP = 1;
  5760  012494  8320               	bsf	32,1,b	;volatile
  5761                           
  5762                           ;interrupt_manager.c: 69: IPR0bits.IOCIP = 1;
  5763  012496  891F               	bsf	31,4,b	;volatile
  5764                           
  5765                           ; BSR set to: 14
  5766  012498  0012               	return		;funcret
  5767  01249A                     __end_of_INTERRUPT_Initialize:
  5768                           	opt stack 0
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           postdec1	equ	0xFE5
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function _EUSART2_Initialize *****************
  5788 ;; Defined at:
  5789 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5807 ;;Total ram usage:        0 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    6
  5810 ;; This function calls:
  5811 ;;		_EUSART2_SetRxInterruptHandler
  5812 ;;		_EUSART2_SetTxInterruptHandler
  5813 ;; This function is called by:
  5814 ;;		_SYSTEM_Initialize
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text27
  5819  011A66                     __ptext27:
  5820                           	opt stack 0
  5821  011A66                     _EUSART2_Initialize:
  5822                           	opt stack 23
  5823                           
  5824                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  5825                           
  5826                           ; BSR set to: 14
  5827                           ;incstack = 0
  5828  011A66  010E               	movlb	14	; () banked
  5829  011A68  9F2C               	bcf	44,7,b	;volatile
  5830                           
  5831                           ; BSR set to: 14
  5832                           ;eusart2.c: 81: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  5833  011A6A  0ECC               	movlw	low _EUSART2_Receive_ISR
  5834  011A6C  0100               	movlb	0	; () banked
  5835  011A6E  6FAF               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  5836  011A70  0E16               	movlw	high _EUSART2_Receive_ISR
  5837  011A72  6FB0               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5838  011A74  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
  5839  011A76  6FB1               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  5840  011A78  EC54  F092         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  5841                           
  5842                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  5843  011A7C  010E               	movlb	14	; () banked
  5844  011A7E  9D2C               	bcf	44,6,b	;volatile
  5845                           
  5846                           ;eusart2.c: 83: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  5847  011A80  0E60               	movlw	low _EUSART2_Transmit_ISR
  5848  011A82  0100               	movlb	0	; () banked
  5849  011A84  6FAF               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  5850  011A86  0E20               	movlw	high _EUSART2_Transmit_ISR
  5851  011A88  6FB0               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5852  011A8A  0E01               	movlw	low (_EUSART2_Transmit_ISR shr (0+16))
  5853  011A8C  6FB1               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  5854  011A8E  EC4D  F092         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  5855                           
  5856                           ;eusart2.c: 87: BAUD2CON = 0x08;
  5857  011A92  0E08               	movlw	8
  5858  011A94  010E               	movlb	14	; () banked
  5859  011A96  6FF7               	movwf	247,b	;volatile
  5860                           
  5861                           ; BSR set to: 14
  5862                           ;eusart2.c: 90: RC2STA = 0x90;
  5863  011A98  0E90               	movlw	144
  5864  011A9A  6FF5               	movwf	245,b	;volatile
  5865                           
  5866                           ; BSR set to: 14
  5867                           ;eusart2.c: 93: TX2STA = 0x24;
  5868  011A9C  0E24               	movlw	36
  5869  011A9E  6FF6               	movwf	246,b	;volatile
  5870                           
  5871                           ; BSR set to: 14
  5872                           ;eusart2.c: 96: SP2BRGL = 0x8A;
  5873  011AA0  0E8A               	movlw	138
  5874  011AA2  6FF3               	movwf	243,b	;volatile
  5875                           
  5876                           ; BSR set to: 14
  5877                           ;eusart2.c: 99: SP2BRGH = 0x00;
  5878  011AA4  0E00               	movlw	0
  5879  011AA6  6FF4               	movwf	244,b	;volatile
  5880                           
  5881                           ; BSR set to: 14
  5882                           ;eusart2.c: 103: eusart2TxHead = 0;
  5883  011AA8  0E00               	movlw	0
  5884  011AAA  6E41               	movwf	_eusart2TxHead,c	;volatile
  5885                           
  5886                           ; BSR set to: 14
  5887                           ;eusart2.c: 104: eusart2TxTail = 0;
  5888  011AAC  0E00               	movlw	0
  5889  011AAE  6E40               	movwf	_eusart2TxTail,c	;volatile
  5890                           
  5891                           ; BSR set to: 14
  5892                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  5893  011AB0  0E40               	movlw	64
  5894  011AB2  6E4E               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5895                           
  5896                           ; BSR set to: 14
  5897                           ;eusart2.c: 107: eusart2RxHead = 0;
  5898  011AB4  0E00               	movlw	0
  5899  011AB6  6E3F               	movwf	_eusart2RxHead,c	;volatile
  5900                           
  5901                           ; BSR set to: 14
  5902                           ;eusart2.c: 108: eusart2RxTail = 0;
  5903  011AB8  0E00               	movlw	0
  5904  011ABA  6E3E               	movwf	_eusart2RxTail,c	;volatile
  5905                           
  5906                           ; BSR set to: 14
  5907                           ;eusart2.c: 109: eusart2RxCount = 0;
  5908  011ABC  0E00               	movlw	0
  5909  011ABE  6E3D               	movwf	_eusart2RxCount,c	;volatile
  5910                           
  5911                           ; BSR set to: 14
  5912                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  5913  011AC0  8F2C               	bsf	44,7,b	;volatile
  5914                           
  5915                           ; BSR set to: 14
  5916  011AC2  0012               	return		;funcret
  5917  011AC4                     __end_of_EUSART2_Initialize:
  5918                           	opt stack 0
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           intcon	equ	0xFF2
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1l	equ	0xFE1
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           postdec2	equ	0xFDD
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  5938 ;; Defined at:
  5939 ;;		line 258 in file "mcc_generated_files/eusart2.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5942 ;;		 -> EUSART2_Transmit_ISR(1), 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5954 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;Total ram usage:        3 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    5
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_EUSART2_Initialize
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text28
  5969  01249A                     __ptext28:
  5970                           	opt stack 0
  5971  01249A                     _EUSART2_SetTxInterruptHandler:
  5972                           	opt stack 23
  5973                           
  5974                           ;eusart2.c: 259: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  5975                           
  5976                           ; BSR set to: 14
  5977                           ;incstack = 0
  5978  01249A  C0AF  F0E3         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  5979  01249E  C0B0  F0E4         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  5980  0124A2  C0B1  F0E5         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+2,_EUSART2_TxDefaultInterruptHandl
      +                          er+2
  5981  0124A6  0012               	return		;funcret
  5982  0124A8                     __end_of_EUSART2_SetTxInterruptHandler:
  5983                           	opt stack 0
  5984                           tblptru	equ	0xFF8
  5985                           tblptrh	equ	0xFF7
  5986                           tblptrl	equ	0xFF6
  5987                           tablat	equ	0xFF5
  5988                           prodh	equ	0xFF4
  5989                           prodl	equ	0xFF3
  5990                           intcon	equ	0xFF2
  5991                           postinc0	equ	0xFEE
  5992                           wreg	equ	0xFE8
  5993                           postdec1	equ	0xFE5
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  6003 ;; Defined at:
  6004 ;;		line 262 in file "mcc_generated_files/eusart2.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  6007 ;;		 -> EUSART2_Receive_ISR(1), 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6019 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;Total ram usage:        3 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    5
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_EUSART2_Initialize
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text29
  6034  0124A8                     __ptext29:
  6035                           	opt stack 0
  6036  0124A8                     _EUSART2_SetRxInterruptHandler:
  6037                           	opt stack 23
  6038                           
  6039                           ;eusart2.c: 263: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  6040                           
  6041                           ;incstack = 0
  6042  0124A8  C0AF  F0E0         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  6043  0124AC  C0B0  F0E1         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  6044  0124B0  C0B1  F0E2         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
  6045  0124B4  0012               	return		;funcret
  6046  0124B6                     __end_of_EUSART2_SetRxInterruptHandler:
  6047                           	opt stack 0
  6048                           tblptru	equ	0xFF8
  6049                           tblptrh	equ	0xFF7
  6050                           tblptrl	equ	0xFF6
  6051                           tablat	equ	0xFF5
  6052                           prodh	equ	0xFF4
  6053                           prodl	equ	0xFF3
  6054                           intcon	equ	0xFF2
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           postdec1	equ	0xFE5
  6058                           fsr1l	equ	0xFE1
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _MTOUCH_Service_Mainloop *****************
  6067 ;; Defined at:
  6068 ;;		line 89 in file "mcc_generated_files/mtouch/mtouch.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      unsigned char 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:   10
  6089 ;; This function calls:
  6090 ;;		_MTOUCH_Button_ServiceAll
  6091 ;;		_MTOUCH_Sensor_SampleAll
  6092 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6093 ;;		_MTOUCH_Tick
  6094 ;;		_MTOUCH_needReburst
  6095 ;; This function is called by:
  6096 ;;		_main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text30
  6101  0121D4                     __ptext30:
  6102                           	opt stack 0
  6103  0121D4                     _MTOUCH_Service_Mainloop:
  6104                           	opt stack 20
  6105                           
  6106                           ;mtouch.c: 93: mtouch_time_toScan = 1;
  6107                           
  6108                           ;incstack = 0
  6109  0121D4  0E01               	movlw	1
  6110  0121D6  6E3C               	movwf	_mtouch_time_toScan,c
  6111                           
  6112                           ;mtouch.c: 95: if(mtouch_time_toScan)
  6113  0121D8  503C               	movf	_mtouch_time_toScan,w,c
  6114  0121DA  B4D8               	btfsc	status,2,c
  6115  0121DC  0012               	return	
  6116                           
  6117                           ;mtouch.c: 96: {
  6118                           ;mtouch.c: 97: if(MTOUCH_Sensor_SampleAll() == 0)
  6119  0121DE  EC54  F08E         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  6120  0121E2  0900               	iorlw	0
  6121  0121E4  B4D8               	btfsc	status,2,c
  6122  0121E6  0012               	return	
  6123                           
  6124                           ;mtouch.c: 99: MTOUCH_Button_ServiceAll();
  6125                           
  6126                           ;mtouch.c: 98: return 0;
  6127                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  6128  0121E8  ECDB  F091         	call	_MTOUCH_Button_ServiceAll	;wreg free
  6129                           
  6130                           ;mtouch.c: 100: mtouch_time_toScan = MTOUCH_needReburst();
  6131  0121EC  EC6D  F092         	call	_MTOUCH_needReburst	;wreg free
  6132  0121F0  6E3C               	movwf	_mtouch_time_toScan,c
  6133                           
  6134                           ;mtouch.c: 101: MTOUCH_Sensor_Sampled_ResetAll();
  6135  0121F2  EC7B  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  6136                           
  6137                           ;mtouch.c: 102: MTOUCH_Tick();
  6138  0121F6  EC84  F092         	call	_MTOUCH_Tick	;wreg free
  6139                           
  6140                           ;mtouch.c: 105: else
  6141                           ;mtouch.c: 106: {
  6142                           ;mtouch.c: 107: return 0;
  6143                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  6144                           
  6145                           ;mtouch.c: 104: }
  6146                           
  6147                           ;mtouch.c: 103: return 1;
  6148                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  6149  0121FA  0012               	return	
  6150  0121FC                     __end_of_MTOUCH_Service_Mainloop:
  6151                           	opt stack 0
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           postinc0	equ	0xFEE
  6160                           wreg	equ	0xFE8
  6161                           postdec1	equ	0xFE5
  6162                           fsr1l	equ	0xFE1
  6163                           indf2	equ	0xFDF
  6164                           postinc2	equ	0xFDE
  6165                           postdec2	equ	0xFDD
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _MTOUCH_needReburst *****************
  6171 ;; Defined at:
  6172 ;;		line 126 in file "mcc_generated_files/mtouch/mtouch.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  needReburst     1    0[BANK0 ] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      unsigned char 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6190 ;;Total ram usage:        1 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    5
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_MTOUCH_Service_Mainloop
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text31
  6201  0124DA                     __ptext31:
  6202                           	opt stack 0
  6203  0124DA                     _MTOUCH_needReburst:
  6204                           	opt stack 24
  6205                           
  6206                           ;mtouch.c: 128: bool needReburst = 0;
  6207                           
  6208                           ;incstack = 0
  6209  0124DA  0E00               	movlw	0
  6210  0124DC  0100               	movlb	0	; () banked
  6211  0124DE  6FAF               	movwf	MTOUCH_needReburst@needReburst& (0+255),b
  6212                           
  6213                           ;mtouch.c: 130: return needReburst;
  6214  0124E0  51AF               	movf	MTOUCH_needReburst@needReburst& (0+255),w,b
  6215  0124E2  0012               	return	
  6216  0124E4                     __end_of_MTOUCH_needReburst:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           postinc0	equ	0xFEE
  6226                           wreg	equ	0xFE8
  6227                           postdec1	equ	0xFE5
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           fsr2h	equ	0xFDA
  6233                           fsr2l	equ	0xFD9
  6234                           status	equ	0xFD8
  6235                           
  6236 ;; *************** function _MTOUCH_Tick *****************
  6237 ;; Defined at:
  6238 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6256 ;;Total ram usage:        0 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    7
  6259 ;; This function calls:
  6260 ;;		_MTOUCH_Button_Tick
  6261 ;; This function is called by:
  6262 ;;		_MTOUCH_Service_Mainloop
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           	psect	text32
  6267  012508                     __ptext32:
  6268                           	opt stack 0
  6269  012508                     _MTOUCH_Tick:
  6270                           	opt stack 22
  6271                           
  6272                           ;mtouch.c: 118: MTOUCH_Button_Tick();
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;incstack = 0
  6276  012508  ECFE  F090         	call	_MTOUCH_Button_Tick	;wreg free
  6277  01250C  0012               	return		;funcret
  6278  01250E                     __end_of_MTOUCH_Tick:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _MTOUCH_Button_Tick *****************
  6299 ;; Defined at:
  6300 ;;		line 316 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  i               1    4[BANK0 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6317 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6318 ;;Total ram usage:        1 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    6
  6321 ;; This function calls:
  6322 ;;		_Button_Tick_helper
  6323 ;; This function is called by:
  6324 ;;		_MTOUCH_Tick
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text33
  6329  0121FC                     __ptext33:
  6330                           	opt stack 0
  6331  0121FC                     _MTOUCH_Button_Tick:
  6332                           	opt stack 22
  6333                           
  6334                           ;mtouch_button.c: 318: uint8_t i;
  6335                           ;mtouch_button.c: 319: for (i = 0; i < 5; i++)
  6336                           
  6337                           ;incstack = 0
  6338  0121FC  0E00               	movlw	0
  6339  0121FE  0100               	movlb	0	; () banked
  6340  012200  6FB3               	movwf	MTOUCH_Button_Tick@i& (0+255),b
  6341  012202                     l4907:
  6342                           
  6343                           ; BSR set to: 0
  6344  012202  0E04               	movlw	4
  6345  012204  65B3               	cpfsgt	MTOUCH_Button_Tick@i& (0+255),b
  6346  012206  D001               	goto	l801
  6347  012208  0012               	return	
  6348  01220A                     l801:
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;mtouch_button.c: 320: {
  6352                           ;mtouch_button.c: 321: Button_Tick_helper(&mtouch_button[i]);
  6353                           
  6354                           ; BSR set to: 0
  6355  01220A  51B3               	movf	MTOUCH_Button_Tick@i& (0+255),w,b
  6356  01220C  0D10               	mullw	16
  6357  01220E  0E40               	movlw	low _mtouch_button
  6358  012210  24F3               	addwf	prodl,w,c
  6359  012212  6FAF               	movwf	Button_Tick_helper@button& (0+255),b
  6360  012214  0E01               	movlw	high _mtouch_button
  6361  012216  20F4               	addwfc	prodh,w,c
  6362  012218  6FB0               	movwf	(Button_Tick_helper@button+1)& (0+255),b
  6363  01221A  EC8C  F08D         	call	_Button_Tick_helper	;wreg free
  6364  01221E  0100               	movlb	0	; () banked
  6365  012220  2BB3               	incf	MTOUCH_Button_Tick@i& (0+255),f,b
  6366  012222  D7EF               	goto	l4907
  6367  012224                     __end_of_MTOUCH_Button_Tick:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           postinc0	equ	0xFEE
  6377                           wreg	equ	0xFE8
  6378                           postdec1	equ	0xFE5
  6379                           fsr1l	equ	0xFE1
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _Button_Tick_helper *****************
  6388 ;; Defined at:
  6389 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  button          2    0[BANK0 ] PTR struct .
  6392 ;;		 -> mtouch_button(80), 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  1    wreg      void 
  6397 ;; Registers used:
  6398 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6407 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6408 ;;Total ram usage:        4 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    5
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		_MTOUCH_Button_Tick
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text34
  6419  011B18                     __ptext34:
  6420                           	opt stack 0
  6421  011B18                     _Button_Tick_helper:
  6422                           	opt stack 22
  6423                           
  6424                           ;mtouch_button.c: 327: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;incstack = 0
  6428  011B18  0100               	movlb	0	; () banked
  6429  011B1A  EE20 F002          	lfsr	2,2
  6430  011B1E  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  6431  011B20  26D9               	addwf	fsr2l,f,c
  6432  011B22  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6433  011B24  22DA               	addwfc	fsr2h,f,c
  6434  011B26  0E02               	movlw	2
  6435  011B28  18DE               	xorwf	postinc2,w,c
  6436  011B2A  A4D8               	btfss	status,2,c
  6437  011B2C  0012               	return	
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;mtouch_button.c: 328: {
  6441                           ;mtouch_button.c: 329: (button->counter)++;
  6442  011B2E  EE20 F00A          	lfsr	2,10
  6443  011B32  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  6444  011B34  26D9               	addwf	fsr2l,f,c
  6445  011B36  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6446  011B38  22DA               	addwfc	fsr2h,f,c
  6447  011B3A  2ADE               	incf	postinc2,f,c
  6448  011B3C  0E00               	movlw	0
  6449  011B3E  22DD               	addwfc	postdec2,f,c
  6450                           
  6451                           ;mtouch_button.c: 330: if (button->counter == (mtouch_button_statecounter_t)0)
  6452  011B40  EE20 F00A          	lfsr	2,10
  6453  011B44  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  6454  011B46  26D9               	addwf	fsr2l,f,c
  6455  011B48  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6456  011B4A  22DA               	addwfc	fsr2h,f,c
  6457  011B4C  50DE               	movf	postinc2,w,c
  6458  011B4E  10DE               	iorwf	postinc2,w,c
  6459  011B50  A4D8               	btfss	status,2,c
  6460  011B52  0012               	return	
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;mtouch_button.c: 331: {
  6464                           ;mtouch_button.c: 332: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6465  011B54  EE20 F00A          	lfsr	2,10
  6466  011B58  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  6467  011B5A  26D9               	addwf	fsr2l,f,c
  6468  011B5C  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6469  011B5E  22DA               	addwfc	fsr2h,f,c
  6470  011B60  0EFF               	movlw	255
  6471  011B62  6EDE               	movwf	postinc2,c
  6472  011B64  0EFF               	movlw	255
  6473  011B66  6EDD               	movwf	postdec2,c
  6474                           
  6475                           ; BSR set to: 0
  6476  011B68  0012               	return	
  6477  011B6A                     __end_of_Button_Tick_helper:
  6478                           	opt stack 0
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           intcon	equ	0xFF2
  6486                           postinc0	equ	0xFEE
  6487                           wreg	equ	0xFE8
  6488                           postdec1	equ	0xFE5
  6489                           fsr1l	equ	0xFE1
  6490                           indf2	equ	0xFDF
  6491                           postinc2	equ	0xFDE
  6492                           postdec2	equ	0xFDD
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6498 ;; Defined at:
  6499 ;;		line 811 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;		None
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  sensor          2    2[BANK0 ] PTR struct .
  6504 ;;		 -> mtouch_sensor(45), 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6518 ;;Total ram usage:        2 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    6
  6521 ;; This function calls:
  6522 ;;		_Sensor_Sampled_Reset
  6523 ;; This function is called by:
  6524 ;;		_MTOUCH_Initialize
  6525 ;;		_MTOUCH_Service_Mainloop
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text35
  6530  0120F6                     __ptext35:
  6531                           	opt stack 0
  6532  0120F6                     _MTOUCH_Sensor_Sampled_ResetAll:
  6533                           	opt stack 22
  6534                           
  6535                           ;mtouch_sensor.c: 813: mtouch_sensor_t* sensor;
  6536                           ;mtouch_sensor.c: 814: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[5-1];senso
      +                          r++)
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;incstack = 0
  6540  0120F6  0E82               	movlw	low _mtouch_sensor
  6541  0120F8  0100               	movlb	0	; () banked
  6542  0120FA  6FB1               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),b
  6543  0120FC  0E00               	movlw	high _mtouch_sensor
  6544  0120FE  6FB2               	movwf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),b
  6545  012100  51B2               	movf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),w,b
  6546  012102  0800               	sublw	high (_mtouch_sensor+36)
  6547  012104  E102               	bnz	u5405
  6548  012106  51B1               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),w,b
  6549  012108  08A6               	sublw	low (_mtouch_sensor+36)
  6550  01210A                     u5405:
  6551  01210A  A0D8               	btfss	status,0,c
  6552  01210C  0012               	return	
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;mtouch_sensor.c: 815: {
  6556                           ;mtouch_sensor.c: 816: Sensor_Sampled_Reset(sensor);
  6557                           
  6558                           ; BSR set to: 0
  6559                           
  6560                           ; BSR set to: 0
  6561  01210E  C0B1  F0AF         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  6562  012112  C0B2  F0B0         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor+1,Sensor_Sampled_Reset@sensor+1
  6563  012116  EC15  F092         	call	_Sensor_Sampled_Reset	;wreg free
  6564  01211A  0E09               	movlw	9
  6565  01211C  0100               	movlb	0	; () banked
  6566  01211E  27B1               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),f,b
  6567  012120  0E00               	movlw	0
  6568  012122  23B2               	addwfc	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),f,b
  6569  012124  D7ED               	goto	L2
  6570  012126                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  6571                           	opt stack 0
  6572                           tblptru	equ	0xFF8
  6573                           tblptrh	equ	0xFF7
  6574                           tblptrl	equ	0xFF6
  6575                           tablat	equ	0xFF5
  6576                           prodh	equ	0xFF4
  6577                           prodl	equ	0xFF3
  6578                           intcon	equ	0xFF2
  6579                           postinc0	equ	0xFEE
  6580                           wreg	equ	0xFE8
  6581                           postdec1	equ	0xFE5
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           postdec2	equ	0xFDD
  6586                           fsr2h	equ	0xFDA
  6587                           fsr2l	equ	0xFD9
  6588                           status	equ	0xFD8
  6589                           
  6590 ;; *************** function _Sensor_Sampled_Reset *****************
  6591 ;; Defined at:
  6592 ;;		line 828 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  sensor          2    0[BANK0 ] PTR struct .
  6595 ;;		 -> mtouch_sensor(45), 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6607 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6611 ;;Total ram usage:        2 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    5
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_MTOUCH_Sensor_Initialize
  6618 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text36
  6623  01242A                     __ptext36:
  6624                           	opt stack 0
  6625  01242A                     _Sensor_Sampled_Reset:
  6626                           	opt stack 22
  6627                           
  6628                           ;mtouch_sensor.c: 830: sensor->sampled = 0;
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;incstack = 0
  6632  01242A  0100               	movlb	0	; () banked
  6633  01242C  EE20 F008          	lfsr	2,8
  6634  012430  51AF               	movf	Sensor_Sampled_Reset@sensor& (0+255),w,b
  6635  012432  26D9               	addwf	fsr2l,f,c
  6636  012434  51B0               	movf	(Sensor_Sampled_Reset@sensor+1)& (0+255),w,b
  6637  012436  22DA               	addwfc	fsr2h,f,c
  6638  012438  92DF               	bcf	indf2,1,c
  6639                           
  6640                           ; BSR set to: 0
  6641  01243A  0012               	return		;funcret
  6642  01243C                     __end_of_Sensor_Sampled_Reset:
  6643                           	opt stack 0
  6644                           tblptru	equ	0xFF8
  6645                           tblptrh	equ	0xFF7
  6646                           tblptrl	equ	0xFF6
  6647                           tablat	equ	0xFF5
  6648                           prodh	equ	0xFF4
  6649                           prodl	equ	0xFF3
  6650                           intcon	equ	0xFF2
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           postdec1	equ	0xFE5
  6654                           fsr1l	equ	0xFE1
  6655                           indf2	equ	0xFDF
  6656                           postinc2	equ	0xFDE
  6657                           postdec2	equ	0xFDD
  6658                           fsr2h	equ	0xFDA
  6659                           fsr2l	equ	0xFD9
  6660                           status	equ	0xFD8
  6661                           
  6662 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6663 ;; Defined at:
  6664 ;;		line 302 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  sensor          1   21[BANK0 ] enum E17513
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      unsigned char 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6681 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6682 ;;Total ram usage:        1 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    9
  6685 ;; This function calls:
  6686 ;;		_MTOUCH_Sensor_isEnabled
  6687 ;;		_MTOUCH_Sensor_isSampling
  6688 ;;		_MTOUCH_Sensor_wasSampled
  6689 ;;		_Sensor_FrequencyHopping
  6690 ;;		_Sensor_scheduleNextScan
  6691 ;; This function is called by:
  6692 ;;		_MTOUCH_Service_Mainloop
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text37
  6697  011CA8                     __ptext37:
  6698                           	opt stack 0
  6699  011CA8                     _MTOUCH_Sensor_SampleAll:
  6700                           	opt stack 20
  6701                           
  6702                           ;mtouch_sensor.c: 304: enum mtouch_sensor_names sensor;
  6703                           ;mtouch_sensor.c: 306: for (sensor = 0; sensor < 5; sensor++)
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;incstack = 0
  6707  011CA8  0E00               	movlw	0
  6708  011CAA  0100               	movlb	0	; () banked
  6709  011CAC  6FC4               	movwf	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6710  011CAE                     l5113:
  6711                           
  6712                           ; BSR set to: 0
  6713  011CAE  0E04               	movlw	4
  6714  011CB0  65C4               	cpfsgt	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6715  011CB2  D001               	goto	l512
  6716  011CB4  D018               	goto	u5700
  6717  011CB6                     l512:
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;mtouch_sensor.c: 307: {
  6721                           ;mtouch_sensor.c: 308: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  6722                           
  6723                           ; BSR set to: 0
  6724  011CB6  51C4               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6725  011CB8  ECFC  F08F         	call	_MTOUCH_Sensor_wasSampled
  6726  011CBC  0900               	iorlw	0
  6727  011CBE  A4D8               	btfss	status,2,c
  6728  011CC0  D00F               	goto	l514
  6729  011CC2  0100               	movlb	0	; () banked
  6730  011CC4  51C4               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6731  011CC6  ECE2  F08F         	call	_MTOUCH_Sensor_isEnabled
  6732  011CCA  0900               	iorlw	0
  6733  011CCC  B4D8               	btfsc	status,2,c
  6734  011CCE  D008               	goto	l514
  6735                           
  6736                           ;mtouch_sensor.c: 309: {
  6737                           ;mtouch_sensor.c: 310: if(MTOUCH_Sensor_isSampling() == 0)
  6738  011CD0  EC87  F092         	call	_MTOUCH_Sensor_isSampling	;wreg free
  6739  011CD4  0900               	iorlw	0
  6740  011CD6  B4D8               	btfsc	status,2,c
  6741                           
  6742                           ;mtouch_sensor.c: 311: Sensor_scheduleNextScan();
  6743  011CD8  EC3E  F083         	call	_Sensor_scheduleNextScan	;wreg free
  6744                           
  6745                           ;mtouch_sensor.c: 312: return 0;
  6746  011CDC  0E00               	movlw	0
  6747  011CDE  0012               	return	
  6748  011CE0                     l514:
  6749  011CE0  0100               	movlb	0	; () banked
  6750  011CE2  2BC4               	incf	MTOUCH_Sensor_SampleAll@sensor& (0+255),f,b
  6751  011CE4  D7E4               	goto	l5113
  6752  011CE6                     u5700:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;mtouch_sensor.c: 313: }
  6756                           ;mtouch_sensor.c: 314: }
  6757                           ;mtouch_sensor.c: 316: Sensor_FrequencyHopping();
  6758                           
  6759                           ; BSR set to: 0
  6760  011CE6  EC61  F091         	call	_Sensor_FrequencyHopping	;wreg free
  6761                           
  6762                           ;mtouch_sensor.c: 318: return 1;
  6763  011CEA  0E01               	movlw	1
  6764  011CEC  0012               	return	
  6765  011CEE                     __end_of_MTOUCH_Sensor_SampleAll:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodh	equ	0xFF4
  6772                           prodl	equ	0xFF3
  6773                           intcon	equ	0xFF2
  6774                           postinc0	equ	0xFEE
  6775                           wreg	equ	0xFE8
  6776                           postdec1	equ	0xFE5
  6777                           fsr1l	equ	0xFE1
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function _Sensor_scheduleNextScan *****************
  6786 ;; Defined at:
  6787 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;		None
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  sensor          2    6[BANK0 ] PTR struct .
  6792 ;;		 -> mtouch_sensor(45), 
  6793 ;;  skipScan        1    5[BANK0 ] unsigned char 
  6794 ;;  state           1    4[BANK0 ] unsigned char 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6805 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6807 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;Total ram usage:        6 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    6
  6811 ;; This function calls:
  6812 ;;		_MTOUCH_Sensor_isEnabled
  6813 ;;		_MTOUCH_Sensor_wasSampled
  6814 ;;		_Sensor_SetTrisBit
  6815 ;;		_Sensor_isCalibrated
  6816 ;;		_Sensor_isCalibratingAcqTime
  6817 ;; This function is called by:
  6818 ;;		_MTOUCH_Sensor_SampleAll
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text38
  6823  01067C                     __ptext38:
  6824                           	opt stack 0
  6825  01067C                     _Sensor_scheduleNextScan:
  6826                           	opt stack 22
  6827                           
  6828                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
  6829                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
  6830                           
  6831                           ;incstack = 0
  6832  01067C  0E00               	movlw	0
  6833  01067E  0100               	movlb	0	; () banked
  6834  010680  6FB4               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6835                           
  6836                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
  6837  010682  0E00               	movlw	0
  6838  010684  BEF2               	btfsc	intcon,7,c	;volatile
  6839  010686  0E01               	movlw	1
  6840  010688  6FB3               	movwf	Sensor_scheduleNextScan@state& (0+255),b
  6841                           
  6842                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
  6843  01068A  D00D               	goto	l524
  6844  01068C                     
  6845                           ;mtouch_sensor.c: 347: {
  6846                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
  6847                           
  6848                           ; BSR set to: 0
  6849  01068C  2A3B               	incf	_currentScanSensor,f,c
  6850  01068E  0E05               	movlw	5
  6851  010690  183B               	xorwf	_currentScanSensor,w,c
  6852  010692  A4D8               	btfss	status,2,c
  6853  010694  D008               	goto	l524
  6854                           
  6855                           ;mtouch_sensor.c: 349: {
  6856                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
  6857  010696  0E00               	movlw	0
  6858  010698  6E3B               	movwf	_currentScanSensor,c
  6859                           
  6860                           ;mtouch_sensor.c: 351: sampling_flag = 0;
  6861  01069A  0E00               	movlw	0
  6862  01069C  6E3A               	movwf	_sampling_flag,c
  6863                           
  6864                           ;mtouch_sensor.c: 352: skipScan = 1;
  6865  01069E  0E01               	movlw	1
  6866  0106A0  0100               	movlb	0	; () banked
  6867  0106A2  6FB4               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6868                           
  6869                           ;mtouch_sensor.c: 353: break;
  6870  0106A4  D00C               	goto	u5460
  6871  0106A6                     l524:
  6872                           
  6873                           ; BSR set to: 0
  6874                           
  6875                           ; BSR set to: 0
  6876  0106A6  503B               	movf	_currentScanSensor,w,c
  6877  0106A8  ECFC  F08F         	call	_MTOUCH_Sensor_wasSampled
  6878  0106AC  0900               	iorlw	0
  6879  0106AE  A4D8               	btfss	status,2,c
  6880  0106B0  D7ED               	goto	l523
  6881  0106B2  503B               	movf	_currentScanSensor,w,c
  6882  0106B4  ECE2  F08F         	call	_MTOUCH_Sensor_isEnabled
  6883  0106B8  0900               	iorlw	0
  6884  0106BA  B4D8               	btfsc	status,2,c
  6885  0106BC  D7E7               	goto	l523
  6886  0106BE                     u5460:
  6887                           
  6888                           ;mtouch_sensor.c: 354: }
  6889                           ;mtouch_sensor.c: 355: }
  6890                           ;mtouch_sensor.c: 358: if(skipScan==0)
  6891  0106BE  0100               	movlb	0	; () banked
  6892  0106C0  51B4               	movf	Sensor_scheduleNextScan@skipScan& (0+255),w,b
  6893  0106C2  A4D8               	btfss	status,2,c
  6894  0106C4  0012               	return	
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;mtouch_sensor.c: 359: {
  6898                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
  6899  0106C6  503B               	movf	_currentScanSensor,w,c
  6900  0106C8  0D09               	mullw	9
  6901  0106CA  0E82               	movlw	low _mtouch_sensor
  6902  0106CC  24F3               	addwf	prodl,w,c
  6903  0106CE  6FB5               	movwf	Sensor_scheduleNextScan@sensor& (0+255),b
  6904  0106D0  0E00               	movlw	high _mtouch_sensor
  6905  0106D2  20F4               	addwfc	prodh,w,c
  6906  0106D4  6FB6               	movwf	(Sensor_scheduleNextScan@sensor+1)& (0+255),b
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
  6910  0106D6  C0B5  F0AF         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  6911  0106DA  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibrated@sensor+1
  6912  0106DE  ECCE  F091         	call	_Sensor_isCalibrated	;wreg free
  6913  0106E2  0900               	iorlw	0
  6914  0106E4  B4D8               	btfsc	status,2,c
  6915  0106E6  D015               	goto	l527
  6916                           
  6917                           ;mtouch_sensor.c: 362: {
  6918                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
  6919  0106E8  0100               	movlb	0	; () banked
  6920  0106EA  EE20 F003          	lfsr	2,3
  6921  0106EE  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6922  0106F0  26D9               	addwf	fsr2l,f,c
  6923  0106F2  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6924  0106F4  22DA               	addwfc	fsr2h,f,c
  6925  0106F6  50DF               	movf	indf2,w,c
  6926  0106F8  010F               	movlb	15	; () banked
  6927  0106FA  6F5C               	movwf	92,b	;volatile
  6928                           
  6929                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
  6930  0106FC  0100               	movlb	0	; () banked
  6931  0106FE  EE20 F002          	lfsr	2,2
  6932  010702  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6933  010704  26D9               	addwf	fsr2l,f,c
  6934  010706  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6935  010708  22DA               	addwfc	fsr2h,f,c
  6936  01070A  50DF               	movf	indf2,w,c
  6937  01070C  010F               	movlb	15	; () banked
  6938  01070E  6F5E               	movwf	94,b	;volatile
  6939                           
  6940                           ;mtouch_sensor.c: 365: }
  6941  010710  D022               	goto	l530
  6942  010712                     l527:
  6943                           
  6944                           ;mtouch_sensor.c: 366: else
  6945                           ;mtouch_sensor.c: 367: {
  6946                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
  6947                           
  6948                           ; BSR set to: 15
  6949  010712  C0B5  F0AF         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  6950  010716  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibratingAcqTime@sensor+1
  6951  01071A  ECC1  F091         	call	_Sensor_isCalibratingAcqTime	;wreg free
  6952  01071E  0900               	iorlw	0
  6953  010720  B4D8               	btfsc	status,2,c
  6954  010722  D014               	goto	l529
  6955                           
  6956                           ;mtouch_sensor.c: 369: {
  6957                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
  6958  010724  0100               	movlb	0	; () banked
  6959  010726  EE20 F002          	lfsr	2,2
  6960  01072A  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6961  01072C  26D9               	addwf	fsr2l,f,c
  6962  01072E  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6963  010730  22DA               	addwfc	fsr2h,f,c
  6964  010732  50DF               	movf	indf2,w,c
  6965  010734  010F               	movlb	15	; () banked
  6966  010736  6F5E               	movwf	94,b	;volatile
  6967                           
  6968                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
  6969  010738  0100               	movlb	0	; () banked
  6970  01073A  EE20 F003          	lfsr	2,3
  6971  01073E  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6972  010740  26D9               	addwf	fsr2l,f,c
  6973  010742  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6974  010744  22DA               	addwfc	fsr2h,f,c
  6975  010746  50DF               	movf	indf2,w,c
  6976  010748  010F               	movlb	15	; () banked
  6977  01074A  D004               	goto	L3
  6978  01074C                     l529:
  6979                           
  6980                           ;mtouch_sensor.c: 373: else
  6981                           ;mtouch_sensor.c: 374: {
  6982                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6983                           
  6984                           ; BSR set to: 15
  6985  01074C  0E80               	movlw	128
  6986  01074E  010F               	movlb	15	; () banked
  6987  010750  6F5E               	movwf	94,b	;volatile
  6988                           
  6989                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6990  010752  0E80               	movlw	128
  6991  010754                     L3:
  6992  010754  6F5C               	movwf	92,b	;volatile
  6993  010756                     l530:
  6994                           
  6995                           ; BSR set to: 15
  6996                           ;mtouch_sensor.c: 377: }
  6997                           ;mtouch_sensor.c: 378: }
  6998                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
  6999                           
  7000                           ; BSR set to: 15
  7001                           
  7002                           ; BSR set to: 15
  7003  010756  5038               	movf	_sample_delay,w,c
  7004  010758  275E               	addwf	94,f,b	;volatile
  7005                           
  7006                           ; BSR set to: 15
  7007                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
  7008  01075A  0100               	movlb	0	; () banked
  7009  01075C  EE20 F001          	lfsr	2,1
  7010  010760  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  7011  010762  26D9               	addwf	fsr2l,f,c
  7012  010764  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  7013  010766  22DA               	addwfc	fsr2h,f,c
  7014  010768  50DF               	movf	indf2,w,c
  7015  01076A  010F               	movlb	15	; () banked
  7016  01076C  6F5F               	movwf	95,b	;volatile
  7017                           
  7018                           ; BSR set to: 15
  7019                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
  7020  01076E  0100               	movlb	0	; () banked
  7021  010770  EE20 F004          	lfsr	2,4
  7022  010774  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  7023  010776  26D9               	addwf	fsr2l,f,c
  7024  010778  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  7025  01077A  22DA               	addwfc	fsr2h,f,c
  7026  01077C  50DF               	movf	indf2,w,c
  7027  01077E  6FB1               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  7028  010780  90D8               	bcf	status,0,c
  7029  010782  31B1               	rrcf	??_Sensor_scheduleNextScan& (0+255),w,b
  7030  010784  6E66               	movwf	3942,c	;volatile
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
  7034  010786  EE20 F005          	lfsr	2,5
  7035  01078A  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  7036  01078C  26D9               	addwf	fsr2l,f,c
  7037  01078E  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  7038  010790  22DA               	addwfc	fsr2h,f,c
  7039  010792  50DF               	movf	indf2,w,c
  7040  010794  010F               	movlb	15	; () banked
  7041  010796  6F5D               	movwf	93,b	;volatile
  7042                           
  7043                           ; BSR set to: 15
  7044                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
  7045  010798  8E60               	bsf	3936,7,c	;volatile
  7046                           
  7047                           ; BSR set to: 15
  7048                           ;mtouch_sensor.c: 385: sampling_flag= 1;
  7049  01079A  0E01               	movlw	1
  7050  01079C  6E3A               	movwf	_sampling_flag,c
  7051                           
  7052                           ; BSR set to: 15
  7053                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
  7054  01079E  0E01               	movlw	1
  7055  0107A0  0100               	movlb	0	; () banked
  7056  0107A2  6FAF               	movwf	Sensor_SetTrisBit@TrisBit& (0+255),b
  7057  0107A4  503B               	movf	_currentScanSensor,w,c
  7058  0107A6  EC9F  F08C         	call	_Sensor_SetTrisBit
  7059                           
  7060                           ;mtouch_sensor.c: 387: GIE = 0;
  7061  0107AA  9EF2               	bcf	intcon,7,c	;volatile
  7062                           
  7063                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
  7064  0107AC  8060               	bsf	3936,0,c	;volatile
  7065                           
  7066                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
  7067  0107AE  0100               	movlb	0	; () banked
  7068  0107B0  EE20 F004          	lfsr	2,4
  7069  0107B4  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  7070  0107B6  26D9               	addwf	fsr2l,f,c
  7071  0107B8  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  7072  0107BA  22DA               	addwfc	fsr2h,f,c
  7073  0107BC  50DF               	movf	indf2,w,c
  7074  0107BE  6FB1               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  7075  0107C0  6BB2               	clrf	(??_Sensor_scheduleNextScan+1)& (0+255),b
  7076  0107C2  0E09               	movlw	9
  7077  0107C4                     u5505:
  7078  0107C4  90D8               	bcf	status,0,c
  7079  0107C6  37B1               	rlcf	??_Sensor_scheduleNextScan& (0+255),f,b
  7080  0107C8  37B2               	rlcf	(??_Sensor_scheduleNextScan+1)& (0+255),f,b
  7081  0107CA  2EE8               	decfsz	wreg,f,c
  7082  0107CC  D7FB               	goto	u5505
  7083  0107CE  C0B1  FF70         	movff	??_Sensor_scheduleNextScan,3952	;volatile
  7084  0107D2  C0B2  FF71         	movff	??_Sensor_scheduleNextScan+1,3953	;volatile
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;mtouch_sensor.c: 390: GIE = state;
  7088  0107D6  A1B3               	btfss	Sensor_scheduleNextScan@state& (0+255),0,b
  7089  0107D8  D002               	goto	u5510
  7090  0107DA  8EF2               	bsf	intcon,7,c	;volatile
  7091  0107DC  D001               	goto	u5525
  7092  0107DE                     u5510:
  7093  0107DE  9EF2               	bcf	intcon,7,c	;volatile
  7094  0107E0                     u5525:
  7095                           
  7096                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
  7097  0107E0  0E00               	movlw	0
  7098  0107E2  6E39               	movwf	_scanInterrupted,c	;volatile
  7099  0107E4  0012               	return	
  7100  0107E6                     __end_of_Sensor_scheduleNextScan:
  7101                           	opt stack 0
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           intcon	equ	0xFF2
  7109                           postinc0	equ	0xFEE
  7110                           wreg	equ	0xFE8
  7111                           postdec1	equ	0xFE5
  7112                           fsr1l	equ	0xFE1
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  7121 ;; Defined at:
  7122 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  sensor          2    0[BANK0 ] PTR struct .
  7125 ;;		 -> mtouch_sensor(45), 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      unsigned char 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7137 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7141 ;;Total ram usage:        2 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    5
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_Sensor_scheduleNextScan
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text39
  7152  012382                     __ptext39:
  7153                           	opt stack 0
  7154  012382                     _Sensor_isCalibratingAcqTime:
  7155                           	opt stack 22
  7156                           
  7157                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
  7158                           
  7159                           ;incstack = 0
  7160  012382  0100               	movlb	0	; () banked
  7161  012384  EE20 F008          	lfsr	2,8
  7162  012388  51AF               	movf	Sensor_isCalibratingAcqTime@sensor& (0+255),w,b
  7163  01238A  26D9               	addwf	fsr2l,f,c
  7164  01238C  51B0               	movf	(Sensor_isCalibratingAcqTime@sensor+1)& (0+255),w,b
  7165  01238E  22DA               	addwfc	fsr2h,f,c
  7166  012390  A8DF               	btfss	indf2,4,c
  7167  012392  D002               	goto	u4810
  7168  012394  0E01               	movlw	1
  7169  012396  0012               	return	
  7170  012398                     u4810:
  7171  012398  0E00               	movlw	0
  7172  01239A  0012               	return	
  7173  01239C                     __end_of_Sensor_isCalibratingAcqTime:
  7174                           	opt stack 0
  7175                           tblptru	equ	0xFF8
  7176                           tblptrh	equ	0xFF7
  7177                           tblptrl	equ	0xFF6
  7178                           tablat	equ	0xFF5
  7179                           prodh	equ	0xFF4
  7180                           prodl	equ	0xFF3
  7181                           intcon	equ	0xFF2
  7182                           postinc0	equ	0xFEE
  7183                           wreg	equ	0xFE8
  7184                           postdec1	equ	0xFE5
  7185                           fsr1l	equ	0xFE1
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function _Sensor_isCalibrated *****************
  7194 ;; Defined at:
  7195 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  sensor          2    0[BANK0 ] PTR struct .
  7198 ;;		 -> mtouch_sensor(45), 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      unsigned char 
  7203 ;; Registers used:
  7204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;Total ram usage:        2 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    5
  7217 ;; This function calls:
  7218 ;;		Nothing
  7219 ;; This function is called by:
  7220 ;;		_Sensor_scheduleNextScan
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text40
  7225  01239C                     __ptext40:
  7226                           	opt stack 0
  7227  01239C                     _Sensor_isCalibrated:
  7228                           	opt stack 22
  7229                           
  7230                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234  01239C  0100               	movlb	0	; () banked
  7235  01239E  EE20 F008          	lfsr	2,8
  7236  0123A2  51AF               	movf	Sensor_isCalibrated@sensor& (0+255),w,b
  7237  0123A4  26D9               	addwf	fsr2l,f,c
  7238  0123A6  51B0               	movf	(Sensor_isCalibrated@sensor+1)& (0+255),w,b
  7239  0123A8  22DA               	addwfc	fsr2h,f,c
  7240  0123AA  A6DF               	btfss	indf2,3,c
  7241  0123AC  D002               	goto	u4800
  7242  0123AE  0E01               	movlw	1
  7243  0123B0  0012               	return	
  7244  0123B2                     u4800:
  7245  0123B2  0E00               	movlw	0
  7246  0123B4  0012               	return	
  7247  0123B6                     __end_of_Sensor_isCalibrated:
  7248                           	opt stack 0
  7249                           tblptru	equ	0xFF8
  7250                           tblptrh	equ	0xFF7
  7251                           tblptrl	equ	0xFF6
  7252                           tablat	equ	0xFF5
  7253                           prodh	equ	0xFF4
  7254                           prodl	equ	0xFF3
  7255                           intcon	equ	0xFF2
  7256                           postinc0	equ	0xFEE
  7257                           wreg	equ	0xFE8
  7258                           postdec1	equ	0xFE5
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _Sensor_SetTrisBit *****************
  7268 ;; Defined at:
  7269 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  sensor          1    wreg     enum E17513
  7272 ;;  TrisBit         1    0[BANK0 ] unsigned char 
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  sensor          1    1[BANK0 ] enum E17513
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg, status,2, status,0
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7284 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7288 ;;Total ram usage:        2 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    5
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		_Sensor_scheduleNextScan
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text41
  7299  01193E                     __ptext41:
  7300                           	opt stack 0
  7301  01193E                     _Sensor_SetTrisBit:
  7302                           	opt stack 22
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;incstack = 0
  7306                           ;Sensor_SetTrisBit@sensor stored from wreg
  7307  01193E  0100               	movlb	0	; () banked
  7308  011940  6FB0               	movwf	Sensor_SetTrisBit@sensor& (0+255),b
  7309                           
  7310                           ;mtouch_sensor.c: 224: switch(sensor)
  7311  011942  D01E               	goto	l493
  7312  011944                     l494:
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
  7316  011944  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7317  011946  D002               	bra	u4705
  7318  011948  9485               	bcf	3973,2,c	;volatile
  7319  01194A  D001               	bra	u4706
  7320  01194C                     u4705:
  7321  01194C  8485               	bsf	3973,2,c	;volatile
  7322  01194E                     u4706:
  7323                           
  7324                           ;mtouch_sensor.c: 228: break;
  7325  01194E  0012               	return	
  7326  011950                     l496:
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
  7330  011950  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7331  011952  D002               	bra	u4715
  7332  011954  9685               	bcf	3973,3,c	;volatile
  7333  011956  D001               	bra	u4716
  7334  011958                     u4715:
  7335  011958  8685               	bsf	3973,3,c	;volatile
  7336  01195A                     u4716:
  7337                           
  7338                           ;mtouch_sensor.c: 231: break;
  7339  01195A  0012               	return	
  7340  01195C                     l497:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
  7344  01195C  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7345  01195E  D002               	bra	u4725
  7346  011960  9885               	bcf	3973,4,c	;volatile
  7347  011962  D001               	bra	u4726
  7348  011964                     u4725:
  7349  011964  8885               	bsf	3973,4,c	;volatile
  7350  011966                     u4726:
  7351                           
  7352                           ;mtouch_sensor.c: 234: break;
  7353  011966  0012               	return	
  7354  011968                     l498:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
  7358  011968  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7359  01196A  D002               	bra	u4735
  7360  01196C  9A85               	bcf	3973,5,c	;volatile
  7361  01196E  D001               	bra	u4736
  7362  011970                     u4735:
  7363  011970  8A85               	bsf	3973,5,c	;volatile
  7364  011972                     u4736:
  7365                           
  7366                           ;mtouch_sensor.c: 237: break;
  7367  011972  0012               	return	
  7368  011974                     l499:
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
  7372  011974  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7373  011976  D002               	bra	u4745
  7374  011978  9C85               	bcf	3973,6,c	;volatile
  7375  01197A  D001               	bra	u4746
  7376  01197C                     u4745:
  7377  01197C  8C85               	bsf	3973,6,c	;volatile
  7378  01197E                     u4746:
  7379                           
  7380                           ;mtouch_sensor.c: 242: }
  7381                           
  7382                           ;mtouch_sensor.c: 241: default: break;
  7383                           
  7384                           ;mtouch_sensor.c: 240: break;
  7385  01197E  0012               	return	
  7386  011980                     l493:
  7387  011980  0100               	movlb	0	; () banked
  7388  011982  51B0               	movf	Sensor_SetTrisBit@sensor& (0+255),w,b
  7389                           
  7390                           ; Switch size 1, requested type "space"
  7391                           ; Number of cases is 5, Range of values is 0 to 4
  7392                           ; switch strategies available:
  7393                           ; Name         Instructions Cycles
  7394                           ; simple_byte           16     9 (average)
  7395                           ;	Chosen strategy is simple_byte
  7396  011984  0A00               	xorlw	0	; case 0
  7397  011986  B4D8               	btfsc	status,2,c
  7398  011988  D7DD               	goto	l494
  7399  01198A  0A01               	xorlw	1	; case 1
  7400  01198C  B4D8               	btfsc	status,2,c
  7401  01198E  D7E0               	goto	l496
  7402  011990  0A03               	xorlw	3	; case 2
  7403  011992  B4D8               	btfsc	status,2,c
  7404  011994  D7E3               	goto	l497
  7405  011996  0A01               	xorlw	1	; case 3
  7406  011998  B4D8               	btfsc	status,2,c
  7407  01199A  D7E6               	goto	l498
  7408  01199C  0A07               	xorlw	7	; case 4
  7409  01199E  A4D8               	btfss	status,2,c
  7410  0119A0  0012               	return	
  7411  0119A2  D7E8               	goto	l499
  7412  0119A4                     __end_of_Sensor_SetTrisBit:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           intcon	equ	0xFF2
  7421                           postinc0	equ	0xFEE
  7422                           wreg	equ	0xFE8
  7423                           postdec1	equ	0xFE5
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  7433 ;; Defined at:
  7434 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  sensor          1    wreg     enum E17513
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;  sensor          1    0[BANK0 ] enum E17513
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      unsigned char 
  7441 ;; Registers used:
  7442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7451 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7452 ;;Total ram usage:        1 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    5
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_MTOUCH_Sensor_SampleAll
  7459 ;;		_Sensor_scheduleNextScan
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text42
  7464  011FC4                     __ptext42:
  7465                           	opt stack 0
  7466  011FC4                     _MTOUCH_Sensor_isEnabled:
  7467                           	opt stack 22
  7468                           
  7469                           ;incstack = 0
  7470                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  7471  011FC4  0100               	movlb	0	; () banked
  7472  011FC6  6FAF               	movwf	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7473                           
  7474                           ;mtouch_sensor.c: 719: if(sensor < 5)
  7475  011FC8  0E05               	movlw	5
  7476  011FCA  0100               	movlb	0	; () banked
  7477  011FCC  61AF               	cpfslt	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7478  011FCE  D012               	goto	l641
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
  7482  011FD0  51AF               	movf	MTOUCH_Sensor_isEnabled@sensor& (0+255),w,b
  7483  011FD2  0D09               	mullw	9
  7484  011FD4  0E08               	movlw	8
  7485  011FD6  26F3               	addwf	prodl,f,c
  7486  011FD8  0E00               	movlw	0
  7487  011FDA  22F4               	addwfc	prodh,f,c
  7488  011FDC  0E82               	movlw	low _mtouch_sensor
  7489  011FDE  24F3               	addwf	prodl,w,c
  7490  011FE0  6ED9               	movwf	fsr2l,c
  7491  011FE2  0E00               	movlw	high _mtouch_sensor
  7492  011FE4  20F4               	addwfc	prodh,w,c
  7493  011FE6  6EDA               	movwf	fsr2h,c
  7494  011FE8  A0DF               	btfss	indf2,0,c
  7495  011FEA  D002               	goto	u4790
  7496  011FEC  0E01               	movlw	1
  7497  011FEE  0012               	return	
  7498  011FF0                     u4790:
  7499  011FF0  0E00               	movlw	0
  7500                           
  7501                           ; BSR set to: 0
  7502                           
  7503                           ; BSR set to: 0
  7504  011FF2  0012               	return	
  7505  011FF4                     l641:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;mtouch_sensor.c: 721: else
  7509                           ;mtouch_sensor.c: 722: return 0;
  7510                           
  7511                           ; BSR set to: 0
  7512  011FF4  0E00               	movlw	0
  7513                           
  7514                           ; BSR set to: 0
  7515  011FF6  0012               	return	
  7516  011FF8                     __end_of_MTOUCH_Sensor_isEnabled:
  7517                           	opt stack 0
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           postinc0	equ	0xFEE
  7526                           wreg	equ	0xFE8
  7527                           postdec1	equ	0xFE5
  7528                           fsr1l	equ	0xFE1
  7529                           indf2	equ	0xFDF
  7530                           postinc2	equ	0xFDE
  7531                           postdec2	equ	0xFDD
  7532                           fsr2h	equ	0xFDA
  7533                           fsr2l	equ	0xFD9
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _Sensor_FrequencyHopping *****************
  7537 ;; Defined at:
  7538 ;;		line 595 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  sensor          1   20[BANK0 ] enum E17513
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7555 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7556 ;;Total ram usage:        1 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    8
  7559 ;; This function calls:
  7560 ;;		_Sensor_FrequencyHopping_Autotune_Process
  7561 ;;		_Sensor_postAcquisitionProcess
  7562 ;;		_Sensor_setSamplePeriod
  7563 ;; This function is called by:
  7564 ;;		_MTOUCH_Sensor_SampleAll
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text43
  7569  0122C2                     __ptext43:
  7570                           	opt stack 0
  7571  0122C2                     _Sensor_FrequencyHopping:
  7572                           	opt stack 20
  7573                           
  7574                           ;mtouch_sensor.c: 597: enum mtouch_sensor_names sensor;
  7575                           ;mtouch_sensor.c: 599: Sensor_FrequencyHopping_Autotune_Process();
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;incstack = 0
  7579  0122C2  EC78  F082         	call	_Sensor_FrequencyHopping_Autotune_Process	;wreg free
  7580                           
  7581                           ;mtouch_sensor.c: 601: for (sensor = 0; sensor < 5; sensor++)
  7582  0122C6  0E00               	movlw	0
  7583  0122C8  0100               	movlb	0	; () banked
  7584  0122CA  6FC3               	movwf	Sensor_FrequencyHopping@sensor& (0+255),b
  7585  0122CC                     l4973:
  7586                           
  7587                           ; BSR set to: 0
  7588  0122CC  0E04               	movlw	4
  7589  0122CE  65C3               	cpfsgt	Sensor_FrequencyHopping@sensor& (0+255),b
  7590  0122D0  D001               	goto	l596
  7591  0122D2  D006               	goto	u5540
  7592  0122D4                     l596:
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;mtouch_sensor.c: 602: {
  7596                           ;mtouch_sensor.c: 603: Sensor_postAcquisitionProcess(sensor);
  7597                           
  7598                           ; BSR set to: 0
  7599  0122D4  51C3               	movf	Sensor_FrequencyHopping@sensor& (0+255),w,b
  7600  0122D6  EC20  F089         	call	_Sensor_postAcquisitionProcess
  7601  0122DA  0100               	movlb	0	; () banked
  7602  0122DC  2BC3               	incf	Sensor_FrequencyHopping@sensor& (0+255),f,b
  7603  0122DE  D7F6               	goto	l4973
  7604  0122E0                     u5540:
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;mtouch_sensor.c: 604: }
  7608                           ;mtouch_sensor.c: 606: Sensor_setSamplePeriod();
  7609                           
  7610                           ; BSR set to: 0
  7611  0122E0  EC73  F091         	call	_Sensor_setSamplePeriod	;wreg free
  7612  0122E4  0012               	return		;funcret
  7613  0122E6                     __end_of_Sensor_FrequencyHopping:
  7614                           	opt stack 0
  7615                           tblptru	equ	0xFF8
  7616                           tblptrh	equ	0xFF7
  7617                           tblptrl	equ	0xFF6
  7618                           tablat	equ	0xFF5
  7619                           prodh	equ	0xFF4
  7620                           prodl	equ	0xFF3
  7621                           intcon	equ	0xFF2
  7622                           postinc0	equ	0xFEE
  7623                           wreg	equ	0xFE8
  7624                           postdec1	equ	0xFE5
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _Sensor_setSamplePeriod *****************
  7634 ;; Defined at:
  7635 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;		None
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;		None
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7653 ;;Total ram usage:        0 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    5
  7656 ;; This function calls:
  7657 ;;		Nothing
  7658 ;; This function is called by:
  7659 ;;		_Sensor_FrequencyHopping
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text44
  7664  0122E6                     __ptext44:
  7665                           	opt stack 0
  7666  0122E6                     _Sensor_setSamplePeriod:
  7667                           	opt stack 22
  7668                           
  7669                           ;mtouch_sensor.c: 522: if(++freq_index >= sizeof(freq_hop) )
  7670                           
  7671                           ;incstack = 0
  7672  0122E6  0100               	movlb	0	; () banked
  7673  0122E8  2B81               	incf	_freq_index& (0+255),f,b
  7674  0122EA  0E02               	movlw	2
  7675  0122EC  6581               	cpfsgt	_freq_index& (0+255),b
  7676  0122EE  D002               	goto	l566
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;mtouch_sensor.c: 523: freq_index = 0;
  7680  0122F0  0E00               	movlw	0
  7681  0122F2  6F81               	movwf	_freq_index& (0+255),b
  7682  0122F4                     l566:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;mtouch_sensor.c: 525: sample_delay = freq_hop[freq_index];
  7686                           
  7687                           ; BSR set to: 0
  7688  0122F4  5181               	movf	_freq_index& (0+255),w,b
  7689  0122F6  0D01               	mullw	1
  7690  0122F8  0EDD               	movlw	low _freq_hop
  7691  0122FA  24F3               	addwf	prodl,w,c
  7692  0122FC  6ED9               	movwf	fsr2l,c
  7693  0122FE  0E00               	movlw	high _freq_hop
  7694  012300  20F4               	addwfc	prodh,w,c
  7695  012302  6EDA               	movwf	fsr2h,c
  7696  012304  50DF               	movf	indf2,w,c
  7697  012306  6E38               	movwf	_sample_delay,c
  7698                           
  7699                           ; BSR set to: 0
  7700  012308  0012               	return		;funcret
  7701  01230A                     __end_of_Sensor_setSamplePeriod:
  7702                           	opt stack 0
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           intcon	equ	0xFF2
  7710                           postinc0	equ	0xFEE
  7711                           wreg	equ	0xFE8
  7712                           postdec1	equ	0xFE5
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           fsr2h	equ	0xFDA
  7718                           fsr2l	equ	0xFD9
  7719                           status	equ	0xFD8
  7720                           
  7721 ;; *************** function _Sensor_postAcquisitionProcess *****************
  7722 ;; Defined at:
  7723 ;;		line 450 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  name            1    wreg     enum E17513
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  name            1   17[BANK0 ] enum E17513
  7728 ;;  sensor          2   18[BANK0 ] PTR struct .
  7729 ;;		 -> mtouch_sensor(45), 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7740 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7741 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7742 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7743 ;;Total ram usage:        9 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    7
  7746 ;; This function calls:
  7747 ;;		_Sensor_DefaultCallback
  7748 ;;		_Sensor_RawSample_Update
  7749 ;;		_Sensor_isEnabled
  7750 ;;		_Sensor_setActive
  7751 ;;		_Sensor_setInactive
  7752 ;;		_abs
  7753 ;; This function is called by:
  7754 ;;		_Sensor_FrequencyHopping
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text45
  7759  011240                     __ptext45:
  7760                           	opt stack 0
  7761  011240                     _Sensor_postAcquisitionProcess:
  7762                           	opt stack 20
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;incstack = 0
  7766                           ;Sensor_postAcquisitionProcess@name stored from wreg
  7767  011240  0100               	movlb	0	; () banked
  7768  011242  6FC0               	movwf	Sensor_postAcquisitionProcess@name& (0+255),b
  7769                           
  7770                           ;mtouch_sensor.c: 452: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  7771  011244  0100               	movlb	0	; () banked
  7772  011246  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7773  011248  0D09               	mullw	9
  7774  01124A  0E82               	movlw	low _mtouch_sensor
  7775  01124C  24F3               	addwf	prodl,w,c
  7776  01124E  6FC1               	movwf	Sensor_postAcquisitionProcess@sensor& (0+255),b
  7777  011250  0E00               	movlw	high _mtouch_sensor
  7778  011252  20F4               	addwfc	prodh,w,c
  7779  011254  6FC2               	movwf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),b
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;mtouch_sensor.c: 454: if(Sensor_isEnabled(sensor))
  7783  011256  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_isEnabled@sensor
  7784  01125A  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_isEnabled@sensor+1
  7785  01125E  EC4E  F091         	call	_Sensor_isEnabled	;wreg free
  7786  011262  0900               	iorlw	0
  7787  011264  B4D8               	btfsc	status,2,c
  7788  011266  D05A               	goto	l546
  7789                           
  7790                           ;mtouch_sensor.c: 455: {
  7791                           ;mtouch_sensor.c: 456: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - sensor
      +                          ->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<2))
  7792  011268  0100               	movlb	0	; () banked
  7793  01126A  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7794  01126C  0D02               	mullw	2
  7795  01126E  0E29               	movlw	low _packet_sample
  7796  011270  24F3               	addwf	prodl,w,c
  7797  011272  6ED9               	movwf	fsr2l,c
  7798  011274  0E00               	movlw	high _packet_sample
  7799  011276  20F4               	addwfc	prodh,w,c
  7800  011278  6EDA               	movwf	fsr2h,c
  7801  01127A  CFDE F0BA          	movff	postinc2,??_Sensor_postAcquisitionProcess
  7802  01127E  CFDD F0BB          	movff	postdec2,??_Sensor_postAcquisitionProcess+1
  7803  011282  EE20 F006          	lfsr	2,6
  7804  011286  51C1               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7805  011288  26D9               	addwf	fsr2l,f,c
  7806  01128A  51C2               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7807  01128C  22DA               	addwfc	fsr2h,f,c
  7808  01128E  CFDE F0BC          	movff	postinc2,??_Sensor_postAcquisitionProcess+2
  7809  011292  CFDD F0BD          	movff	postdec2,??_Sensor_postAcquisitionProcess+3
  7810  011296  1FBC               	comf	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7811  011298  1FBD               	comf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7812  01129A  4BBC               	infsnz	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7813  01129C  2BBD               	incf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7814  01129E  51BA               	movf	??_Sensor_postAcquisitionProcess& (0+255),w,b
  7815  0112A0  25BC               	addwf	(??_Sensor_postAcquisitionProcess+2)& (0+255),w,b
  7816  0112A2  6FAF               	movwf	abs@a& (0+255),b
  7817  0112A4  51BB               	movf	(??_Sensor_postAcquisitionProcess+1)& (0+255),w,b
  7818  0112A6  21BD               	addwfc	(??_Sensor_postAcquisitionProcess+3)& (0+255),w,b
  7819  0112A8  6FB0               	movwf	(abs@a+1)& (0+255),b
  7820  0112AA  ECC1  F090         	call	_abs	;wreg free
  7821  0112AE  0100               	movlb	0	; () banked
  7822  0112B0  EE20 F004          	lfsr	2,4
  7823  0112B4  51C1               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7824  0112B6  26D9               	addwf	fsr2l,f,c
  7825  0112B8  51C2               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7826  0112BA  22DA               	addwfc	fsr2h,f,c
  7827  0112BC  50DF               	movf	indf2,w,c
  7828  0112BE  6FBE               	movwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),b
  7829  0112C0  6BBF               	clrf	(??_Sensor_postAcquisitionProcess+5)& (0+255),b
  7830  0112C2  90D8               	bcf	status,0,c
  7831  0112C4  37BE               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7832  0112C6  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7833  0112C8  90D8               	bcf	status,0,c
  7834  0112CA  37BE               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7835  0112CC  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7836  0112CE  51AF               	movf	?_abs& (0+255),w,b
  7837  0112D0  5DBE               	subwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),w,b
  7838  0112D2  51B0               	movf	(?_abs+1)& (0+255),w,b
  7839  0112D4  59BF               	subwfb	(??_Sensor_postAcquisitionProcess+5)& (0+255),w,b
  7840  0112D6  B0D8               	btfsc	status,0,c
  7841  0112D8  D007               	goto	l547
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;mtouch_sensor.c: 457: Sensor_setActive(sensor);
  7845  0112DA  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setActive@sensor
  7846  0112DE  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setActive@sensor+1
  7847  0112E2  EC27  F092         	call	_Sensor_setActive	;wreg free
  7848  0112E6  D006               	goto	l548
  7849  0112E8                     l547:
  7850                           
  7851                           ;mtouch_sensor.c: 458: else
  7852                           ;mtouch_sensor.c: 459: Sensor_setInactive(sensor);
  7853  0112E8  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7854  0112EC  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7855  0112F0  EC1E  F092         	call	_Sensor_setInactive	;wreg free
  7856  0112F4                     l548:
  7857                           
  7858                           ;mtouch_sensor.c: 461: Sensor_RawSample_Update(sensor);
  7859  0112F4  C0C1  F0B6         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_RawSample_Update@sensor
  7860  0112F8  C0C2  F0B7         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_RawSample_Update@sensor+1
  7861  0112FC  EC2D  F08E         	call	_Sensor_RawSample_Update	;wreg free
  7862                           
  7863                           ;mtouch_sensor.c: 462: callback_sampled(name);
  7864  011300  D801               	call	u4848
  7865  011302  0012               	return	
  7866  011304                     u4848:
  7867  011304  0005               	push	
  7868  011306  6EFA               	movwf	pclath,c
  7869  011308  5048               	movf	_callback_sampled,w,c
  7870  01130A  6EFD               	movwf	tosl,c
  7871  01130C  5049               	movf	_callback_sampled+1,w,c
  7872  01130E  6EFE               	movwf	tosh,c
  7873  011310  504A               	movf	_callback_sampled+2,w,c
  7874  011312  6EFF               	movwf	tosu,c
  7875  011314  50FA               	movf	pclath,w,c
  7876  011316  0100               	movlb	0	; () banked
  7877  011318  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7878  01131A  0012               	return		;indir
  7879  01131C                     l546:
  7880                           
  7881                           ;mtouch_sensor.c: 464: else
  7882                           ;mtouch_sensor.c: 465: {
  7883                           ;mtouch_sensor.c: 466: Sensor_setInactive(sensor);
  7884  01131C  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7885  011320  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7886  011324  EC1E  F092         	call	_Sensor_setInactive
  7887  011328  0012               	return	
  7888  01132A                     __end_of_Sensor_postAcquisitionProcess:
  7889                           	opt stack 0
  7890                           tosu	equ	0xFFF
  7891                           tosh	equ	0xFFE
  7892                           tosl	equ	0xFFD
  7893                           pclath	equ	0xFFA
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           intcon	equ	0xFF2
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           postdec1	equ	0xFE5
  7904                           fsr1l	equ	0xFE1
  7905                           indf2	equ	0xFDF
  7906                           postinc2	equ	0xFDE
  7907                           postdec2	equ	0xFDD
  7908                           fsr2h	equ	0xFDA
  7909                           fsr2l	equ	0xFD9
  7910                           status	equ	0xFD8
  7911                           
  7912 ;; *************** function _Sensor_setInactive *****************
  7913 ;; Defined at:
  7914 ;;		line 745 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  sensor          2    0[BANK0 ] PTR struct .
  7917 ;;		 -> mtouch_sensor(45), 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7929 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    5
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Sensor_postAcquisitionProcess
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text46
  7944  01243C                     __ptext46:
  7945                           	opt stack 0
  7946  01243C                     _Sensor_setInactive:
  7947                           	opt stack 21
  7948                           
  7949                           ;mtouch_sensor.c: 747: sensor->acitve = 0;
  7950                           
  7951                           ;incstack = 0
  7952  01243C  0100               	movlb	0	; () banked
  7953  01243E  EE20 F008          	lfsr	2,8
  7954  012442  51AF               	movf	Sensor_setInactive@sensor& (0+255),w,b
  7955  012444  26D9               	addwf	fsr2l,f,c
  7956  012446  51B0               	movf	(Sensor_setInactive@sensor+1)& (0+255),w,b
  7957  012448  22DA               	addwfc	fsr2h,f,c
  7958  01244A  94DF               	bcf	indf2,2,c
  7959                           
  7960                           ; BSR set to: 0
  7961  01244C  0012               	return		;funcret
  7962  01244E                     __end_of_Sensor_setInactive:
  7963                           	opt stack 0
  7964                           tosu	equ	0xFFF
  7965                           tosh	equ	0xFFE
  7966                           tosl	equ	0xFFD
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           intcon	equ	0xFF2
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           postdec1	equ	0xFE5
  7978                           fsr1l	equ	0xFE1
  7979                           indf2	equ	0xFDF
  7980                           postinc2	equ	0xFDE
  7981                           postdec2	equ	0xFDD
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _Sensor_setActive *****************
  7987 ;; Defined at:
  7988 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  sensor          2    0[BANK0 ] PTR struct .
  7991 ;;		 -> mtouch_sensor(45), 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8003 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8007 ;;Total ram usage:        2 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    5
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_Sensor_postAcquisitionProcess
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text47
  8018  01244E                     __ptext47:
  8019                           	opt stack 0
  8020  01244E                     _Sensor_setActive:
  8021                           	opt stack 21
  8022                           
  8023                           ;mtouch_sensor.c: 742: sensor->acitve = 1;
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;incstack = 0
  8027  01244E  0100               	movlb	0	; () banked
  8028  012450  EE20 F008          	lfsr	2,8
  8029  012454  51AF               	movf	Sensor_setActive@sensor& (0+255),w,b
  8030  012456  26D9               	addwf	fsr2l,f,c
  8031  012458  51B0               	movf	(Sensor_setActive@sensor+1)& (0+255),w,b
  8032  01245A  22DA               	addwfc	fsr2h,f,c
  8033  01245C  84DF               	bsf	indf2,2,c
  8034                           
  8035                           ; BSR set to: 0
  8036  01245E  0012               	return		;funcret
  8037  012460                     __end_of_Sensor_setActive:
  8038                           	opt stack 0
  8039                           tosu	equ	0xFFF
  8040                           tosh	equ	0xFFE
  8041                           tosl	equ	0xFFD
  8042                           pclath	equ	0xFFA
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           intcon	equ	0xFF2
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           postdec1	equ	0xFE5
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           postdec2	equ	0xFDD
  8057                           fsr2h	equ	0xFDA
  8058                           fsr2l	equ	0xFD9
  8059                           status	equ	0xFD8
  8060                           
  8061 ;; *************** function _Sensor_isEnabled *****************
  8062 ;; Defined at:
  8063 ;;		line 725 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  sensor          2    0[BANK0 ] PTR struct .
  8066 ;;		 -> mtouch_sensor(45), 
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;		None
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;Total ram usage:        2 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    5
  8085 ;; This function calls:
  8086 ;;		Nothing
  8087 ;; This function is called by:
  8088 ;;		_Sensor_postAcquisitionProcess
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text48
  8093  01229C                     __ptext48:
  8094                           	opt stack 0
  8095  01229C                     _Sensor_isEnabled:
  8096                           	opt stack 21
  8097                           
  8098                           ;mtouch_sensor.c: 727: if(sensor!=(0))
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;incstack = 0
  8102  01229C  0100               	movlb	0	; () banked
  8103  01229E  51AF               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  8104  0122A0  11B0               	iorwf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  8105  0122A2  B4D8               	btfsc	status,2,c
  8106  0122A4  D00C               	goto	l646
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;mtouch_sensor.c: 728: return (bool)sensor->enabled;
  8110  0122A6  EE20 F008          	lfsr	2,8
  8111  0122AA  51AF               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  8112  0122AC  26D9               	addwf	fsr2l,f,c
  8113  0122AE  51B0               	movf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  8114  0122B0  22DA               	addwfc	fsr2h,f,c
  8115  0122B2  A0DF               	btfss	indf2,0,c
  8116  0122B4  D002               	goto	u4630
  8117  0122B6  0E01               	movlw	1
  8118  0122B8  0012               	return	
  8119  0122BA                     u4630:
  8120  0122BA  0E00               	movlw	0
  8121                           
  8122                           ; BSR set to: 0
  8123                           
  8124                           ; BSR set to: 0
  8125  0122BC  0012               	return	
  8126  0122BE                     l646:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;mtouch_sensor.c: 729: else
  8130                           ;mtouch_sensor.c: 730: return 0;
  8131                           
  8132                           ; BSR set to: 0
  8133  0122BE  0E00               	movlw	0
  8134                           
  8135                           ; BSR set to: 0
  8136  0122C0  0012               	return	
  8137  0122C2                     __end_of_Sensor_isEnabled:
  8138                           	opt stack 0
  8139                           tosu	equ	0xFFF
  8140                           tosh	equ	0xFFE
  8141                           tosl	equ	0xFFD
  8142                           pclath	equ	0xFFA
  8143                           tblptru	equ	0xFF8
  8144                           tblptrh	equ	0xFF7
  8145                           tblptrl	equ	0xFF6
  8146                           tablat	equ	0xFF5
  8147                           prodh	equ	0xFF4
  8148                           prodl	equ	0xFF3
  8149                           intcon	equ	0xFF2
  8150                           postinc0	equ	0xFEE
  8151                           wreg	equ	0xFE8
  8152                           postdec1	equ	0xFE5
  8153                           fsr1l	equ	0xFE1
  8154                           indf2	equ	0xFDF
  8155                           postinc2	equ	0xFDE
  8156                           postdec2	equ	0xFDD
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _Sensor_RawSample_Update *****************
  8162 ;; Defined at:
  8163 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;  sensor          2    7[BANK0 ] PTR struct .
  8166 ;;		 -> mtouch_sensor(45), 
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  result          2    9[BANK0 ] unsigned int 
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      void 
  8171 ;; Registers used:
  8172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8178 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8181 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8182 ;;Total ram usage:        4 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    6
  8185 ;; This function calls:
  8186 ;;		_medianFilter
  8187 ;; This function is called by:
  8188 ;;		_Sensor_postAcquisitionProcess
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           	psect	text49
  8193  011C5A                     __ptext49:
  8194                           	opt stack 0
  8195  011C5A                     _Sensor_RawSample_Update:
  8196                           	opt stack 20
  8197                           
  8198                           ;mtouch_sensor.c: 544: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;incstack = 0
  8202  011C5A  C0B6  FFD9         	movff	Sensor_RawSample_Update@sensor,fsr2l
  8203  011C5E  C0B7  FFDA         	movff	Sensor_RawSample_Update@sensor+1,fsr2h
  8204  011C62  50DF               	movf	indf2,w,c
  8205  011C64  EC4E  F081         	call	_medianFilter
  8206  011C68  C0AF  F0B8         	movff	?_medianFilter,Sensor_RawSample_Update@result
  8207  011C6C  C0B0  F0B9         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  8208                           
  8209                           ;mtouch_sensor.c: 546: if (GIE == (uint8_t)1)
  8210  011C70  AEF2               	btfss	intcon,7,c	;volatile
  8211  011C72  D00E               	goto	l575
  8212                           
  8213                           ;mtouch_sensor.c: 547: {
  8214                           ;mtouch_sensor.c: 548: GIE = (uint8_t)0;
  8215  011C74  9EF2               	bcf	intcon,7,c	;volatile
  8216                           
  8217                           ;mtouch_sensor.c: 549: sensor->rawSample = result;
  8218  011C76  0100               	movlb	0	; () banked
  8219  011C78  EE20 F006          	lfsr	2,6
  8220  011C7C  51B6               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  8221  011C7E  26D9               	addwf	fsr2l,f,c
  8222  011C80  51B7               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  8223  011C82  22DA               	addwfc	fsr2h,f,c
  8224  011C84  C0B8  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  8225  011C88  C0B9  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;mtouch_sensor.c: 550: GIE = (uint8_t)1;
  8229  011C8C  8EF2               	bsf	intcon,7,c	;volatile
  8230                           
  8231                           ;mtouch_sensor.c: 551: }
  8232  011C8E  0012               	return	
  8233  011C90                     l575:
  8234                           
  8235                           ;mtouch_sensor.c: 552: else
  8236                           ;mtouch_sensor.c: 553: {
  8237                           ;mtouch_sensor.c: 554: sensor->rawSample = result;
  8238                           
  8239                           ; BSR set to: 0
  8240  011C90  0100               	movlb	0	; () banked
  8241  011C92  EE20 F006          	lfsr	2,6
  8242  011C96  51B6               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  8243  011C98  26D9               	addwf	fsr2l,f,c
  8244  011C9A  51B7               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  8245  011C9C  22DA               	addwfc	fsr2h,f,c
  8246  011C9E  C0B8  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  8247  011CA2  C0B9  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  8248  011CA6  0012               	return	
  8249  011CA8                     __end_of_Sensor_RawSample_Update:
  8250                           	opt stack 0
  8251                           tosu	equ	0xFFF
  8252                           tosh	equ	0xFFE
  8253                           tosl	equ	0xFFD
  8254                           pclath	equ	0xFFA
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _medianFilter *****************
  8274 ;; Defined at:
  8275 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  sensor          1    wreg     enum E17513
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  sensor          1    6[BANK0 ] enum E17513
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  2    0[BANK0 ] unsigned int 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8291 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8292 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8293 ;;Total ram usage:        7 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    5
  8296 ;; This function calls:
  8297 ;;		Nothing
  8298 ;; This function is called by:
  8299 ;;		_Sensor_RawSample_Update
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text50
  8304  01029C                     __ptext50:
  8305                           	opt stack 0
  8306  01029C                     _medianFilter:
  8307                           	opt stack 20
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;incstack = 0
  8311                           ;medianFilter@sensor stored from wreg
  8312  01029C  0100               	movlb	0	; () banked
  8313  01029E  6FB5               	movwf	medianFilter@sensor& (0+255),b
  8314                           
  8315                           ;mtouch_sensor.c: 561: static uint8_t bufferIndex[5];
  8316                           ;mtouch_sensor.c: 563: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
  8317  0102A0  0100               	movlb	0	; () banked
  8318  0102A2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8319  0102A4  0D02               	mullw	2
  8320  0102A6  0E29               	movlw	low _packet_sample
  8321  0102A8  24F3               	addwf	prodl,w,c
  8322  0102AA  6ED9               	movwf	fsr2l,c
  8323  0102AC  0E00               	movlw	high _packet_sample
  8324  0102AE  20F4               	addwfc	prodh,w,c
  8325  0102B0  6EDA               	movwf	fsr2h,c
  8326  0102B2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8327  0102B4  0D06               	mullw	6
  8328  0102B6  0E60               	movlw	low _sensor_medianBuffer
  8329  0102B8  6FB1               	movwf	??_medianFilter& (0+255),b
  8330  0102BA  0E00               	movlw	high _sensor_medianBuffer
  8331  0102BC  6FB2               	movwf	(??_medianFilter+1)& (0+255),b
  8332  0102BE  50F3               	movf	prodl,w,c
  8333  0102C0  27B1               	addwf	??_medianFilter& (0+255),f,b
  8334  0102C2  50F4               	movf	prodh,w,c
  8335  0102C4  23B2               	addwfc	(??_medianFilter+1)& (0+255),f,b
  8336  0102C6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8337  0102C8  0D01               	mullw	1
  8338  0102CA  0E33               	movlw	low medianFilter@bufferIndex
  8339  0102CC  24F3               	addwf	prodl,w,c
  8340  0102CE  6EE1               	movwf	fsr1l,c
  8341  0102D0  0E00               	movlw	high medianFilter@bufferIndex
  8342  0102D2  20F4               	addwfc	prodh,w,c
  8343  0102D4  6EE2               	movwf	fsr1h,c
  8344  0102D6  CFE7 F0B3          	movff	indf1,??_medianFilter+2
  8345  0102DA  0E01               	movlw	1
  8346  0102DC  26E7               	addwf	indf1,f,c
  8347  0102DE  51B3               	movf	(??_medianFilter+2)& (0+255),w,b
  8348  0102E0  0D02               	mullw	2
  8349  0102E2  50F3               	movf	prodl,w,c
  8350  0102E4  25B1               	addwf	??_medianFilter& (0+255),w,b
  8351  0102E6  6EE1               	movwf	fsr1l,c
  8352  0102E8  50F4               	movf	prodh,w,c
  8353  0102EA  21B2               	addwfc	(??_medianFilter+1)& (0+255),w,b
  8354  0102EC  6EE2               	movwf	fsr1h,c
  8355  0102EE  CFDE FFE6          	movff	postinc2,postinc1
  8356  0102F2  CFDD FFE5          	movff	postdec2,postdec1
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;mtouch_sensor.c: 565: if(bufferIndex[sensor]>=3)
  8360  0102F6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8361  0102F8  0D01               	mullw	1
  8362  0102FA  0E33               	movlw	low medianFilter@bufferIndex
  8363  0102FC  24F3               	addwf	prodl,w,c
  8364  0102FE  6ED9               	movwf	fsr2l,c
  8365  010300  0E00               	movlw	high medianFilter@bufferIndex
  8366  010302  20F4               	addwfc	prodh,w,c
  8367  010304  6EDA               	movwf	fsr2h,c
  8368  010306  0E02               	movlw	2
  8369  010308  64DF               	cpfsgt	indf2,c
  8370  01030A  D00A               	goto	l582
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;mtouch_sensor.c: 566: bufferIndex[sensor] = 0;
  8374  01030C  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8375  01030E  0D01               	mullw	1
  8376  010310  0E33               	movlw	low medianFilter@bufferIndex
  8377  010312  24F3               	addwf	prodl,w,c
  8378  010314  6ED9               	movwf	fsr2l,c
  8379  010316  0E00               	movlw	high medianFilter@bufferIndex
  8380  010318  20F4               	addwfc	prodh,w,c
  8381  01031A  6EDA               	movwf	fsr2h,c
  8382  01031C  0E00               	movlw	0
  8383  01031E  6EDF               	movwf	indf2,c
  8384  010320                     l582:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;mtouch_sensor.c: 568: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
  8388                           
  8389                           ; BSR set to: 0
  8390  010320  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8391  010322  0D06               	mullw	6
  8392  010324  0E02               	movlw	2
  8393  010326  26F3               	addwf	prodl,f,c
  8394  010328  0E00               	movlw	0
  8395  01032A  22F4               	addwfc	prodh,f,c
  8396  01032C  0E60               	movlw	low _sensor_medianBuffer
  8397  01032E  24F3               	addwf	prodl,w,c
  8398  010330  6ED9               	movwf	fsr2l,c
  8399  010332  0E00               	movlw	high _sensor_medianBuffer
  8400  010334  20F4               	addwfc	prodh,w,c
  8401  010336  6EDA               	movwf	fsr2h,c
  8402  010338  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8403  01033A  0D06               	mullw	6
  8404  01033C  0E60               	movlw	low _sensor_medianBuffer
  8405  01033E  24F3               	addwf	prodl,w,c
  8406  010340  6EE1               	movwf	fsr1l,c
  8407  010342  0E00               	movlw	high _sensor_medianBuffer
  8408  010344  20F4               	addwfc	prodh,w,c
  8409  010346  6EE2               	movwf	fsr1h,c
  8410  010348  50DE               	movf	postinc2,w,c
  8411  01034A  5CE6               	subwf	postinc1,w,c
  8412  01034C  50DE               	movf	postinc2,w,c
  8413  01034E  58E6               	subwfb	postinc1,w,c
  8414  010350  A0D8               	btfss	status,0,c
  8415  010352  D067               	goto	l583
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;mtouch_sensor.c: 569: {
  8419                           ;mtouch_sensor.c: 570: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8420  010354  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8421  010356  0D06               	mullw	6
  8422  010358  0E04               	movlw	4
  8423  01035A  26F3               	addwf	prodl,f,c
  8424  01035C  0E00               	movlw	0
  8425  01035E  22F4               	addwfc	prodh,f,c
  8426  010360  0E60               	movlw	low _sensor_medianBuffer
  8427  010362  24F3               	addwf	prodl,w,c
  8428  010364  6ED9               	movwf	fsr2l,c
  8429  010366  0E00               	movlw	high _sensor_medianBuffer
  8430  010368  20F4               	addwfc	prodh,w,c
  8431  01036A  6EDA               	movwf	fsr2h,c
  8432  01036C  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8433  01036E  0D06               	mullw	6
  8434  010370  0E02               	movlw	2
  8435  010372  26F3               	addwf	prodl,f,c
  8436  010374  0E00               	movlw	0
  8437  010376  22F4               	addwfc	prodh,f,c
  8438  010378  0E60               	movlw	low _sensor_medianBuffer
  8439  01037A  24F3               	addwf	prodl,w,c
  8440  01037C  6EE1               	movwf	fsr1l,c
  8441  01037E  0E00               	movlw	high _sensor_medianBuffer
  8442  010380  20F4               	addwfc	prodh,w,c
  8443  010382  6EE2               	movwf	fsr1h,c
  8444  010384  50DE               	movf	postinc2,w,c
  8445  010386  5CE6               	subwf	postinc1,w,c
  8446  010388  50DE               	movf	postinc2,w,c
  8447  01038A  58E6               	subwfb	postinc1,w,c
  8448  01038C  A0D8               	btfss	status,0,c
  8449  01038E  D011               	goto	l584
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;mtouch_sensor.c: 571: return sensor_medianBuffer[sensor][1];
  8453  010390  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8454  010392  0D06               	mullw	6
  8455  010394  0E02               	movlw	2
  8456  010396  26F3               	addwf	prodl,f,c
  8457  010398  0E00               	movlw	0
  8458  01039A  22F4               	addwfc	prodh,f,c
  8459  01039C  0E60               	movlw	low _sensor_medianBuffer
  8460  01039E  24F3               	addwf	prodl,w,c
  8461  0103A0  6ED9               	movwf	fsr2l,c
  8462  0103A2  0E00               	movlw	high _sensor_medianBuffer
  8463  0103A4  20F4               	addwfc	prodh,w,c
  8464  0103A6  6EDA               	movwf	fsr2h,c
  8465  0103A8  CFDE F0AF          	movff	postinc2,?_medianFilter
  8466  0103AC  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8467                           
  8468                           ; BSR set to: 0
  8469                           
  8470                           ; BSR set to: 0
  8471  0103B0  0012               	return	
  8472  0103B2                     l584:
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;mtouch_sensor.c: 572: else
  8476                           ;mtouch_sensor.c: 573: {
  8477                           ;mtouch_sensor.c: 574: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8478                           
  8479                           ; BSR set to: 0
  8480  0103B2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8481  0103B4  0D06               	mullw	6
  8482  0103B6  0E04               	movlw	4
  8483  0103B8  26F3               	addwf	prodl,f,c
  8484  0103BA  0E00               	movlw	0
  8485  0103BC  22F4               	addwfc	prodh,f,c
  8486  0103BE  0E60               	movlw	low _sensor_medianBuffer
  8487  0103C0  24F3               	addwf	prodl,w,c
  8488  0103C2  6ED9               	movwf	fsr2l,c
  8489  0103C4  0E00               	movlw	high _sensor_medianBuffer
  8490  0103C6  20F4               	addwfc	prodh,w,c
  8491  0103C8  6EDA               	movwf	fsr2h,c
  8492  0103CA  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8493  0103CC  0D06               	mullw	6
  8494  0103CE  0E60               	movlw	low _sensor_medianBuffer
  8495  0103D0  24F3               	addwf	prodl,w,c
  8496  0103D2  6EE1               	movwf	fsr1l,c
  8497  0103D4  0E00               	movlw	high _sensor_medianBuffer
  8498  0103D6  20F4               	addwfc	prodh,w,c
  8499  0103D8  6EE2               	movwf	fsr1h,c
  8500  0103DA  50DE               	movf	postinc2,w,c
  8501  0103DC  5CE6               	subwf	postinc1,w,c
  8502  0103DE  50DE               	movf	postinc2,w,c
  8503  0103E0  58E6               	subwfb	postinc1,w,c
  8504  0103E2  A0D8               	btfss	status,0,c
  8505  0103E4  D011               	goto	l587
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;mtouch_sensor.c: 575: return sensor_medianBuffer[sensor][2];
  8509  0103E6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8510  0103E8  0D06               	mullw	6
  8511  0103EA  0E04               	movlw	4
  8512  0103EC  26F3               	addwf	prodl,f,c
  8513  0103EE  0E00               	movlw	0
  8514  0103F0  22F4               	addwfc	prodh,f,c
  8515  0103F2  0E60               	movlw	low _sensor_medianBuffer
  8516  0103F4  24F3               	addwf	prodl,w,c
  8517  0103F6  6ED9               	movwf	fsr2l,c
  8518  0103F8  0E00               	movlw	high _sensor_medianBuffer
  8519  0103FA  20F4               	addwfc	prodh,w,c
  8520  0103FC  6EDA               	movwf	fsr2h,c
  8521  0103FE  CFDE F0AF          	movff	postinc2,?_medianFilter
  8522  010402  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8523                           
  8524                           ; BSR set to: 0
  8525                           
  8526                           ; BSR set to: 0
  8527  010406  0012               	return	
  8528  010408                     l587:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;mtouch_sensor.c: 576: else
  8532                           ;mtouch_sensor.c: 577: return sensor_medianBuffer[sensor][0];
  8533                           
  8534                           ; BSR set to: 0
  8535  010408  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8536  01040A  0D06               	mullw	6
  8537  01040C  0E60               	movlw	low _sensor_medianBuffer
  8538  01040E  24F3               	addwf	prodl,w,c
  8539  010410  6ED9               	movwf	fsr2l,c
  8540  010412  0E00               	movlw	high _sensor_medianBuffer
  8541  010414  20F4               	addwfc	prodh,w,c
  8542  010416  6EDA               	movwf	fsr2h,c
  8543  010418  CFDE F0AF          	movff	postinc2,?_medianFilter
  8544  01041C  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;mtouch_sensor.c: 578: }
  8548                           ;mtouch_sensor.c: 580: }
  8549                           
  8550                           ; BSR set to: 0
  8551                           
  8552                           ; BSR set to: 0
  8553  010420  0012               	return	
  8554  010422                     l583:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;mtouch_sensor.c: 581: else
  8558                           ;mtouch_sensor.c: 582: {
  8559                           ;mtouch_sensor.c: 583: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8560                           
  8561                           ; BSR set to: 0
  8562  010422  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8563  010424  0D06               	mullw	6
  8564  010426  0E04               	movlw	4
  8565  010428  26F3               	addwf	prodl,f,c
  8566  01042A  0E00               	movlw	0
  8567  01042C  22F4               	addwfc	prodh,f,c
  8568  01042E  0E60               	movlw	low _sensor_medianBuffer
  8569  010430  24F3               	addwf	prodl,w,c
  8570  010432  6ED9               	movwf	fsr2l,c
  8571  010434  0E00               	movlw	high _sensor_medianBuffer
  8572  010436  20F4               	addwfc	prodh,w,c
  8573  010438  6EDA               	movwf	fsr2h,c
  8574  01043A  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8575  01043C  0D06               	mullw	6
  8576  01043E  0E60               	movlw	low _sensor_medianBuffer
  8577  010440  24F3               	addwf	prodl,w,c
  8578  010442  6EE1               	movwf	fsr1l,c
  8579  010444  0E00               	movlw	high _sensor_medianBuffer
  8580  010446  20F4               	addwfc	prodh,w,c
  8581  010448  6EE2               	movwf	fsr1h,c
  8582  01044A  50DE               	movf	postinc2,w,c
  8583  01044C  5CE6               	subwf	postinc1,w,c
  8584  01044E  50DE               	movf	postinc2,w,c
  8585  010450  58E6               	subwfb	postinc1,w,c
  8586  010452  A0D8               	btfss	status,0,c
  8587  010454  D00D               	goto	l590
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;mtouch_sensor.c: 584: return sensor_medianBuffer[sensor][0];
  8591  010456  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8592  010458  0D06               	mullw	6
  8593  01045A  0E60               	movlw	low _sensor_medianBuffer
  8594  01045C  24F3               	addwf	prodl,w,c
  8595  01045E  6ED9               	movwf	fsr2l,c
  8596  010460  0E00               	movlw	high _sensor_medianBuffer
  8597  010462  20F4               	addwfc	prodh,w,c
  8598  010464  6EDA               	movwf	fsr2h,c
  8599  010466  CFDE F0AF          	movff	postinc2,?_medianFilter
  8600  01046A  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8601                           
  8602                           ; BSR set to: 0
  8603                           
  8604                           ; BSR set to: 0
  8605  01046E  0012               	return	
  8606  010470                     l590:
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;mtouch_sensor.c: 585: else
  8610                           ;mtouch_sensor.c: 586: {
  8611                           ;mtouch_sensor.c: 587: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8612                           
  8613                           ; BSR set to: 0
  8614  010470  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8615  010472  0D06               	mullw	6
  8616  010474  0E04               	movlw	4
  8617  010476  26F3               	addwf	prodl,f,c
  8618  010478  0E00               	movlw	0
  8619  01047A  22F4               	addwfc	prodh,f,c
  8620  01047C  0E60               	movlw	low _sensor_medianBuffer
  8621  01047E  24F3               	addwf	prodl,w,c
  8622  010480  6ED9               	movwf	fsr2l,c
  8623  010482  0E00               	movlw	high _sensor_medianBuffer
  8624  010484  20F4               	addwfc	prodh,w,c
  8625  010486  6EDA               	movwf	fsr2h,c
  8626  010488  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8627  01048A  0D06               	mullw	6
  8628  01048C  0E02               	movlw	2
  8629  01048E  26F3               	addwf	prodl,f,c
  8630  010490  0E00               	movlw	0
  8631  010492  22F4               	addwfc	prodh,f,c
  8632  010494  0E60               	movlw	low _sensor_medianBuffer
  8633  010496  24F3               	addwf	prodl,w,c
  8634  010498  6EE1               	movwf	fsr1l,c
  8635  01049A  0E00               	movlw	high _sensor_medianBuffer
  8636  01049C  20F4               	addwfc	prodh,w,c
  8637  01049E  6EE2               	movwf	fsr1h,c
  8638  0104A0  50DE               	movf	postinc2,w,c
  8639  0104A2  5CE6               	subwf	postinc1,w,c
  8640  0104A4  50DE               	movf	postinc2,w,c
  8641  0104A6  58E6               	subwfb	postinc1,w,c
  8642  0104A8  A0D8               	btfss	status,0,c
  8643  0104AA  D011               	goto	l592
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;mtouch_sensor.c: 588: return sensor_medianBuffer[sensor][2];
  8647  0104AC  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8648  0104AE  0D06               	mullw	6
  8649  0104B0  0E04               	movlw	4
  8650  0104B2  26F3               	addwf	prodl,f,c
  8651  0104B4  0E00               	movlw	0
  8652  0104B6  22F4               	addwfc	prodh,f,c
  8653  0104B8  0E60               	movlw	low _sensor_medianBuffer
  8654  0104BA  24F3               	addwf	prodl,w,c
  8655  0104BC  6ED9               	movwf	fsr2l,c
  8656  0104BE  0E00               	movlw	high _sensor_medianBuffer
  8657  0104C0  20F4               	addwfc	prodh,w,c
  8658  0104C2  6EDA               	movwf	fsr2h,c
  8659  0104C4  CFDE F0AF          	movff	postinc2,?_medianFilter
  8660  0104C8  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  0104CC  0012               	return	
  8666  0104CE                     l592:
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;mtouch_sensor.c: 589: else
  8670                           ;mtouch_sensor.c: 590: return sensor_medianBuffer[sensor][1];
  8671                           
  8672                           ; BSR set to: 0
  8673  0104CE  51B5               	movf	medianFilter@sensor& (0+255),w,b
  8674  0104D0  0D06               	mullw	6
  8675  0104D2  0E02               	movlw	2
  8676  0104D4  26F3               	addwf	prodl,f,c
  8677  0104D6  0E00               	movlw	0
  8678  0104D8  22F4               	addwfc	prodh,f,c
  8679  0104DA  0E60               	movlw	low _sensor_medianBuffer
  8680  0104DC  24F3               	addwf	prodl,w,c
  8681  0104DE  6ED9               	movwf	fsr2l,c
  8682  0104E0  0E00               	movlw	high _sensor_medianBuffer
  8683  0104E2  20F4               	addwfc	prodh,w,c
  8684  0104E4  6EDA               	movwf	fsr2h,c
  8685  0104E6  CFDE F0AF          	movff	postinc2,?_medianFilter
  8686  0104EA  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  8687                           
  8688                           ; BSR set to: 0
  8689                           
  8690                           ; BSR set to: 0
  8691                           
  8692                           ; BSR set to: 0
  8693  0104EE  0012               	return	
  8694  0104F0                     __end_of_medianFilter:
  8695                           	opt stack 0
  8696                           tosu	equ	0xFFF
  8697                           tosh	equ	0xFFE
  8698                           tosl	equ	0xFFD
  8699                           pclath	equ	0xFFA
  8700                           tblptru	equ	0xFF8
  8701                           tblptrh	equ	0xFF7
  8702                           tblptrl	equ	0xFF6
  8703                           tablat	equ	0xFF5
  8704                           prodh	equ	0xFF4
  8705                           prodl	equ	0xFF3
  8706                           intcon	equ	0xFF2
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           indf1	equ	0xFE7
  8710                           postinc1	equ	0xFE6
  8711                           postdec1	equ	0xFE5
  8712                           fsr1h	equ	0xFE2
  8713                           fsr1l	equ	0xFE1
  8714                           indf2	equ	0xFDF
  8715                           postinc2	equ	0xFDE
  8716                           postdec2	equ	0xFDD
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721 ;; *************** function _Sensor_DefaultCallback *****************
  8722 ;; Defined at:
  8723 ;;		line 691 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  sensor          1    wreg     enum E17513
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  sensor          1    0[COMRAM] enum E17513
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      void 
  8730 ;; Registers used:
  8731 ;;		wreg
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8741 ;;Total ram usage:        0 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:    5
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_Sensor_postAcquisitionProcess
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           	psect	text51
  8752  012512                     __ptext51:
  8753                           	opt stack 0
  8754  012512                     _Sensor_DefaultCallback:
  8755                           	opt stack 21
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;incstack = 0
  8759  012512  0012               	return		;funcret
  8760  012514                     __end_of_Sensor_DefaultCallback:
  8761                           	opt stack 0
  8762                           tosu	equ	0xFFF
  8763                           tosh	equ	0xFFE
  8764                           tosl	equ	0xFFD
  8765                           pclath	equ	0xFFA
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           postinc0	equ	0xFEE
  8774                           wreg	equ	0xFE8
  8775                           indf1	equ	0xFE7
  8776                           postinc1	equ	0xFE6
  8777                           postdec1	equ	0xFE5
  8778                           fsr1h	equ	0xFE2
  8779                           fsr1l	equ	0xFE1
  8780                           indf2	equ	0xFDF
  8781                           postinc2	equ	0xFDE
  8782                           postdec2	equ	0xFDD
  8783                           fsr2h	equ	0xFDA
  8784                           fsr2l	equ	0xFD9
  8785                           status	equ	0xFD8
  8786                           
  8787 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
  8788 ;; Defined at:
  8789 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  maxVariance     2   13[BANK0 ] unsigned int 
  8794 ;;  variance        2   11[BANK0 ] unsigned int 
  8795 ;;  frequencyInd    1   17[BANK0 ] unsigned char 
  8796 ;;  sensor          1   16[BANK0 ] enum E17513
  8797 ;;  selectedFreq    1   15[BANK0 ] unsigned char 
  8798 ;;  newfrequency    1   10[BANK0 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8809 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8810 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8811 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8812 ;;Total ram usage:       14 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    6
  8815 ;; This function calls:
  8816 ;;		_abs
  8817 ;; This function is called by:
  8818 ;;		_Sensor_FrequencyHopping
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text52
  8823  0104F0                     __ptext52:
  8824                           	opt stack 0
  8825  0104F0                     _Sensor_FrequencyHopping_Autotune_Process:
  8826                           	opt stack 21
  8827                           
  8828                           ;mtouch_sensor.c: 617: enum mtouch_sensor_names sensor;
  8829                           ;mtouch_sensor.c: 618: uint8_t frequencyIndex;
  8830                           ;mtouch_sensor.c: 619: uint8_t newfrequencyFound,selectedFrequency;
  8831                           ;mtouch_sensor.c: 620: uint16_t variance,maxVariance;
  8832                           ;mtouch_sensor.c: 623: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
  8833                           ;mtouch_sensor.c: 625: maxVariance = 0;
  8834                           
  8835                           ;incstack = 0
  8836  0104F0  0E00               	movlw	0
  8837  0104F2  0100               	movlb	0	; () banked
  8838  0104F4  6FBD               	movwf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),b
  8839  0104F6  0E00               	movlw	0
  8840  0104F8  6FBC               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),b
  8841                           
  8842                           ;mtouch_sensor.c: 627: for(sensor = 0; sensor < 5; sensor++)
  8843  0104FA  0E00               	movlw	0
  8844  0104FC  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8845  0104FE                     l4621:
  8846                           
  8847                           ; BSR set to: 0
  8848  0104FE  0E04               	movlw	4
  8849  010500  65BF               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8850  010502  D001               	goto	l603
  8851  010504  D03F               	goto	u4880
  8852  010506                     l603:
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;mtouch_sensor.c: 628: {
  8856                           ;mtouch_sensor.c: 629: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
  8857                           
  8858                           ; BSR set to: 0
  8859  010506  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8860  010508  0D02               	mullw	2
  8861  01050A  0E29               	movlw	low _packet_sample
  8862  01050C  24F3               	addwf	prodl,w,c
  8863  01050E  6ED9               	movwf	fsr2l,c
  8864  010510  0E00               	movlw	high _packet_sample
  8865  010512  20F4               	addwfc	prodh,w,c
  8866  010514  6EDA               	movwf	fsr2h,c
  8867  010516  CFDE F0B3          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process
  8868  01051A  CFDD F0B4          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+1
  8869  01051E  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8870  010520  0D06               	mullw	6
  8871  010522  0E60               	movlw	low _sensor_medianBuffer
  8872  010524  6FB5               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),b
  8873  010526  0E00               	movlw	high _sensor_medianBuffer
  8874  010528  6FB6               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),b
  8875  01052A  50F3               	movf	prodl,w,c
  8876  01052C  27B5               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),f,b
  8877  01052E  50F4               	movf	prodh,w,c
  8878  010530  23B6               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),f,b
  8879  010532  5181               	movf	_freq_index& (0+255),w,b
  8880  010534  0D02               	mullw	2
  8881  010536  50F3               	movf	prodl,w,c
  8882  010538  25B5               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),w,b
  8883  01053A  6ED9               	movwf	fsr2l,c
  8884  01053C  50F4               	movf	prodh,w,c
  8885  01053E  21B6               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),w,b
  8886  010540  6EDA               	movwf	fsr2h,c
  8887  010542  CFDE F0B7          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process+4
  8888  010546  CFDD F0B8          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+5
  8889  01054A  1FB7               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8890  01054C  1FB8               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8891  01054E  4BB7               	infsnz	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8892  010550  2BB8               	incf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8893  010552  51B3               	movf	??_Sensor_FrequencyHopping_Autotune_Process& (0+255),w,b
  8894  010554  25B7               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),w,b
  8895  010556  6FAF               	movwf	abs@a& (0+255),b
  8896  010558  51B4               	movf	(??_Sensor_FrequencyHopping_Autotune_Process+1)& (0+255),w,b
  8897  01055A  21B8               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),w,b
  8898  01055C  6FB0               	movwf	(abs@a+1)& (0+255),b
  8899  01055E  ECC1  F090         	call	_abs	;wreg free
  8900  010562  C0AF  F0BA         	movff	?_abs,Sensor_FrequencyHopping_Autotune_Process@variance
  8901  010566  C0B0  F0BB         	movff	?_abs+1,Sensor_FrequencyHopping_Autotune_Process@variance+1
  8902                           
  8903                           ;mtouch_sensor.c: 630: if(variance > maxVariance)
  8904  01056A  0100               	movlb	0	; () banked
  8905  01056C  51BA               	movf	Sensor_FrequencyHopping_Autotune_Process@variance& (0+255),w,b
  8906  01056E  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8907  010570  51BB               	movf	(Sensor_FrequencyHopping_Autotune_Process@variance+1)& (0+255),w,b
  8908  010572  59BD               	subwfb	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8909  010574  B0D8               	btfsc	status,0,c
  8910  010576  D004               	goto	l605
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;mtouch_sensor.c: 631: maxVariance = variance;
  8914  010578  C0BA  F0BC         	movff	Sensor_FrequencyHopping_Autotune_Process@variance,Sensor_FrequencyHopping_Autotun
      +                          e_Process@maxVariance
  8915  01057C  C0BB  F0BD         	movff	Sensor_FrequencyHopping_Autotune_Process@variance+1,Sensor_FrequencyHopping_Autot
      +                          une_Process@maxVariance+1
  8916  010580                     l605:
  8917                           
  8918                           ; BSR set to: 0
  8919                           
  8920                           ; BSR set to: 0
  8921  010580  2BBF               	incf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),f,b
  8922  010582  D7BD               	goto	l4621
  8923  010584                     u4880:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;mtouch_sensor.c: 632: }
  8927                           ;mtouch_sensor.c: 634: if(maxVariance > (mtouch_sensor_packetsample_t)100)
  8928                           
  8929                           ; BSR set to: 0
  8930  010584  51BD               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8931  010586  E104               	bnz	u4890
  8932  010588  0E65               	movlw	101
  8933  01058A  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8934  01058C  A0D8               	btfss	status,0,c
  8935  01058E  D05A               	goto	l606
  8936  010590                     u4890:
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;mtouch_sensor.c: 635: {
  8940                           ;mtouch_sensor.c: 636: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
  8941  010590  5181               	movf	_freq_index& (0+255),w,b
  8942  010592  0D01               	mullw	1
  8943  010594  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8944  010596  24F3               	addwf	prodl,w,c
  8945  010598  6ED9               	movwf	fsr2l,c
  8946  01059A  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8947  01059C  20F4               	addwfc	prodh,w,c
  8948  01059E  6EDA               	movwf	fsr2h,c
  8949  0105A0  2ADF               	incf	indf2,f,c
  8950  0105A2  0E05               	movlw	5
  8951  0105A4  64DF               	cpfsgt	indf2,c
  8952  0105A6  0012               	return	
  8953                           
  8954                           ; BSR set to: 0
  8955                           ;mtouch_sensor.c: 637: {
  8956                           ;mtouch_sensor.c: 638: newfrequencyFound = 0;
  8957  0105A8  0E00               	movlw	0
  8958  0105AA  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;mtouch_sensor.c: 639: selectedFrequency = freq_hop[freq_index];
  8962  0105AC  5181               	movf	_freq_index& (0+255),w,b
  8963  0105AE  0D01               	mullw	1
  8964  0105B0  0EDD               	movlw	low _freq_hop
  8965  0105B2  24F3               	addwf	prodl,w,c
  8966  0105B4  6ED9               	movwf	fsr2l,c
  8967  0105B6  0E00               	movlw	high _freq_hop
  8968  0105B8  20F4               	addwfc	prodh,w,c
  8969  0105BA  6EDA               	movwf	fsr2h,c
  8970  0105BC  50DF               	movf	indf2,w,c
  8971  0105BE  6FBE               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8972  0105C0                     
  8973                           ; BSR set to: 0
  8974                           ;mtouch_sensor.c: 641: {
  8975                           ;mtouch_sensor.c: 642: if(selectedFrequency>(uint8_t)((mtouch_sensor_time_t)0 << (uint8_
      +                          t)3))
  8976                           
  8977                           ; BSR set to: 0
  8978  0105C0  51BE               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8979  0105C2  B4D8               	btfsc	status,2,c
  8980  0105C4  D002               	goto	l609
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;mtouch_sensor.c: 643: selectedFrequency--;
  8984  0105C6  07BE               	decf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),f,b
  8985  0105C8  D002               	goto	l610
  8986  0105CA                     l609:
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;mtouch_sensor.c: 644: else
  8990                           ;mtouch_sensor.c: 645: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)3);
  8991                           
  8992                           ; BSR set to: 0
  8993  0105CA  0E78               	movlw	120
  8994  0105CC  6FBE               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8995  0105CE                     l610:
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;mtouch_sensor.c: 646: newfrequencyFound = 1;
  8999  0105CE  0E01               	movlw	1
  9000  0105D0  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  9001                           
  9002                           ;mtouch_sensor.c: 648: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  9003  0105D2  0E00               	movlw	0
  9004  0105D4  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  9005  0105D6                     l4649:
  9006                           
  9007                           ; BSR set to: 0
  9008  0105D6  0E02               	movlw	2
  9009  0105D8  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  9010  0105DA  D001               	goto	l611
  9011  0105DC  D014               	goto	u4950
  9012  0105DE                     l611:
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;mtouch_sensor.c: 649: {
  9016                           ;mtouch_sensor.c: 650: if(frequencyIndex == freq_index)
  9017                           
  9018                           ; BSR set to: 0
  9019  0105DE  5181               	movf	_freq_index& (0+255),w,b
  9020  0105E0  19C0               	xorwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  9021  0105E2  B4D8               	btfsc	status,2,c
  9022  0105E4  D00E               	goto	l615
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;mtouch_sensor.c: 654: else if(selectedFrequency==freq_hop[frequencyIndex])
  9026                           
  9027                           ; BSR set to: 0
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;mtouch_sensor.c: 651: {
  9031                           ;mtouch_sensor.c: 653: }
  9032  0105E6  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  9033  0105E8  0D01               	mullw	1
  9034  0105EA  0EDD               	movlw	low _freq_hop
  9035  0105EC  24F3               	addwf	prodl,w,c
  9036  0105EE  6ED9               	movwf	fsr2l,c
  9037  0105F0  0E00               	movlw	high _freq_hop
  9038  0105F2  20F4               	addwfc	prodh,w,c
  9039  0105F4  6EDA               	movwf	fsr2h,c
  9040  0105F6  51BE               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  9041  0105F8  18DE               	xorwf	postinc2,w,c
  9042  0105FA  A4D8               	btfss	status,2,c
  9043  0105FC  D002               	goto	l615
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;mtouch_sensor.c: 655: {
  9047                           ;mtouch_sensor.c: 656: newfrequencyFound = 0;
  9048  0105FE  0E00               	movlw	0
  9049  010600  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  9050  010602                     l615:
  9051                           
  9052                           ; BSR set to: 0
  9053                           
  9054                           ; BSR set to: 0
  9055                           
  9056                           ; BSR set to: 0
  9057                           
  9058                           ;mtouch_sensor.c: 658: else
  9059                           ;mtouch_sensor.c: 659: {
  9060                           
  9061                           ; BSR set to: 0
  9062  010602  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  9063  010604  D7E8               	goto	l4649
  9064  010606                     u4950:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;mtouch_sensor.c: 661: }
  9068                           ;mtouch_sensor.c: 662: }
  9069                           ;mtouch_sensor.c: 664: }while(!newfrequencyFound);
  9070                           
  9071                           ; BSR set to: 0
  9072  010606  51B9               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),w,b
  9073  010608  B4D8               	btfsc	status,2,c
  9074  01060A  D7DA               	goto	l608
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;mtouch_sensor.c: 666: freq_hop[freq_index] = selectedFrequency;
  9078                           
  9079                           ; BSR set to: 0
  9080  01060C  5181               	movf	_freq_index& (0+255),w,b
  9081  01060E  0D01               	mullw	1
  9082  010610  0EDD               	movlw	low _freq_hop
  9083  010612  24F3               	addwf	prodl,w,c
  9084  010614  6ED9               	movwf	fsr2l,c
  9085  010616  0E00               	movlw	high _freq_hop
  9086  010618  20F4               	addwfc	prodh,w,c
  9087  01061A  6EDA               	movwf	fsr2h,c
  9088  01061C  C0BE  FFDF         	movff	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,indf2
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;mtouch_sensor.c: 668: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  9092  010620  0E00               	movlw	0
  9093  010622  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  9094  010624                     l4671:
  9095                           
  9096                           ; BSR set to: 0
  9097  010624  0E02               	movlw	2
  9098  010626  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  9099  010628  D001               	goto	l618
  9100  01062A  0012               	return	
  9101  01062C                     l618:
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;mtouch_sensor.c: 669: {
  9105                           ;mtouch_sensor.c: 670: varianceOverLimitCounter[frequencyIndex] = 0;
  9106                           
  9107                           ; BSR set to: 0
  9108  01062C  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  9109  01062E  0D01               	mullw	1
  9110  010630  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9111  010632  24F3               	addwf	prodl,w,c
  9112  010634  6ED9               	movwf	fsr2l,c
  9113  010636  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9114  010638  20F4               	addwfc	prodh,w,c
  9115  01063A  6EDA               	movwf	fsr2h,c
  9116  01063C  0E00               	movlw	0
  9117  01063E  6EDF               	movwf	indf2,c
  9118                           
  9119                           ; BSR set to: 0
  9120  010640  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  9121  010642  D7F0               	goto	l4671
  9122  010644                     l606:
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;mtouch_sensor.c: 674: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
  9126                           
  9127                           ; BSR set to: 0
  9128  010644  51BD               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  9129  010646  E119               	bnz	l624
  9130  010648  0E32               	movlw	50
  9131  01064A  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  9132  01064C  B0D8               	btfsc	status,0,c
  9133  01064E  0012               	return	
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;mtouch_sensor.c: 675: {
  9137                           ;mtouch_sensor.c: 677: if(varianceOverLimitCounter[freq_index] > 0)
  9138  010650  5181               	movf	_freq_index& (0+255),w,b
  9139  010652  0D01               	mullw	1
  9140  010654  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9141  010656  24F3               	addwf	prodl,w,c
  9142  010658  6ED9               	movwf	fsr2l,c
  9143  01065A  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9144  01065C  20F4               	addwfc	prodh,w,c
  9145  01065E  6EDA               	movwf	fsr2h,c
  9146  010660  50DF               	movf	indf2,w,c
  9147  010662  B4D8               	btfsc	status,2,c
  9148  010664  0012               	return	
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;mtouch_sensor.c: 678: varianceOverLimitCounter[freq_index]--;
  9152  010666  5181               	movf	_freq_index& (0+255),w,b
  9153  010668  0D01               	mullw	1
  9154  01066A  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9155  01066C  24F3               	addwf	prodl,w,c
  9156  01066E  6ED9               	movwf	fsr2l,c
  9157  010670  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9158  010672  20F4               	addwfc	prodh,w,c
  9159  010674  6EDA               	movwf	fsr2h,c
  9160  010676  06DF               	decf	indf2,f,c
  9161                           
  9162                           ; BSR set to: 0
  9163                           
  9164                           ;mtouch_sensor.c: 680: else
  9165                           ;mtouch_sensor.c: 681: {
  9166                           
  9167                           ; BSR set to: 0
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;mtouch_sensor.c: 679: }
  9171  010678  0012               	return	
  9172  01067A                     l624:
  9173                           
  9174                           ; BSR set to: 0
  9175  01067A  0012               	return		;funcret
  9176  01067C                     __end_of_Sensor_FrequencyHopping_Autotune_Process:
  9177                           	opt stack 0
  9178                           tosu	equ	0xFFF
  9179                           tosh	equ	0xFFE
  9180                           tosl	equ	0xFFD
  9181                           pclath	equ	0xFFA
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           postinc0	equ	0xFEE
  9190                           wreg	equ	0xFE8
  9191                           indf1	equ	0xFE7
  9192                           postinc1	equ	0xFE6
  9193                           postdec1	equ	0xFE5
  9194                           fsr1h	equ	0xFE2
  9195                           fsr1l	equ	0xFE1
  9196                           indf2	equ	0xFDF
  9197                           postinc2	equ	0xFDE
  9198                           postdec2	equ	0xFDD
  9199                           fsr2h	equ	0xFDA
  9200                           fsr2l	equ	0xFD9
  9201                           status	equ	0xFD8
  9202                           
  9203 ;; *************** function _abs *****************
  9204 ;; Defined at:
  9205 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  a               2    0[BANK0 ] int 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;		None
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  2    0[BANK0 ] int 
  9212 ;; Registers used:
  9213 ;;		wreg, status,2, status,0
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9219 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9223 ;;Total ram usage:        4 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    5
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_Sensor_postAcquisitionProcess
  9230 ;;		_Sensor_FrequencyHopping_Autotune_Process
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text53
  9235  012182                     __ptext53:
  9236                           	opt stack 0
  9237  012182                     _abs:
  9238                           	opt stack 21
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;incstack = 0
  9242  012182  0100               	movlb	0	; () banked
  9243  012184  AFB0               	btfss	(abs@a+1)& (0+255),7,b
  9244  012186  D00D               	goto	l1095
  9245                           
  9246                           ; BSR set to: 0
  9247  012188  C0AF  F0B1         	movff	abs@a,??_abs
  9248  01218C  C0B0  F0B2         	movff	abs@a+1,??_abs+1
  9249  012190  1FB1               	comf	??_abs& (0+255),f,b
  9250  012192  1FB2               	comf	(??_abs+1)& (0+255),f,b
  9251  012194  4BB1               	infsnz	??_abs& (0+255),f,b
  9252  012196  2BB2               	incf	(??_abs+1)& (0+255),f,b
  9253  012198  C0B1  F0AF         	movff	??_abs,?_abs
  9254  01219C  C0B2  F0B0         	movff	??_abs+1,?_abs+1
  9255  0121A0  0012               	return	
  9256  0121A2                     l1095:
  9257                           
  9258                           ; BSR set to: 0
  9259  0121A2  C0AF  F0AF         	movff	abs@a,?_abs
  9260  0121A6  C0B0  F0B0         	movff	abs@a+1,?_abs+1
  9261                           
  9262                           ; BSR set to: 0
  9263  0121AA  0012               	return		;funcret
  9264  0121AC                     __end_of_abs:
  9265                           	opt stack 0
  9266                           tosu	equ	0xFFF
  9267                           tosh	equ	0xFFE
  9268                           tosl	equ	0xFFD
  9269                           pclath	equ	0xFFA
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           intcon	equ	0xFF2
  9277                           postinc0	equ	0xFEE
  9278                           wreg	equ	0xFE8
  9279                           indf1	equ	0xFE7
  9280                           postinc1	equ	0xFE6
  9281                           postdec1	equ	0xFE5
  9282                           fsr1h	equ	0xFE2
  9283                           fsr1l	equ	0xFE1
  9284                           indf2	equ	0xFDF
  9285                           postinc2	equ	0xFDE
  9286                           postdec2	equ	0xFDD
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  9292 ;; Defined at:
  9293 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      unsigned char 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    5
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_MTOUCH_Sensor_SampleAll
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           	psect	text54
  9322  01250E                     __ptext54:
  9323                           	opt stack 0
  9324  01250E                     _MTOUCH_Sensor_isSampling:
  9325                           	opt stack 23
  9326                           
  9327                           ;mtouch_sensor.c: 840: return sampling_flag;
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;incstack = 0
  9331  01250E  503A               	movf	_sampling_flag,w,c
  9332  012510  0012               	return	
  9333  012512                     __end_of_MTOUCH_Sensor_isSampling:
  9334                           	opt stack 0
  9335                           tosu	equ	0xFFF
  9336                           tosh	equ	0xFFE
  9337                           tosl	equ	0xFFD
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           indf1	equ	0xFE7
  9349                           postinc1	equ	0xFE6
  9350                           postdec1	equ	0xFE5
  9351                           fsr1h	equ	0xFE2
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9361 ;; Defined at:
  9362 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  button          1   20[BANK0 ] enum E17454
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9379 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9380 ;;Total ram usage:        1 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    9
  9383 ;; This function calls:
  9384 ;;		_Button_Service
  9385 ;; This function is called by:
  9386 ;;		_MTOUCH_Service_Mainloop
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text55
  9391  0123B6                     __ptext55:
  9392                           	opt stack 0
  9393  0123B6                     _MTOUCH_Button_ServiceAll:
  9394                           	opt stack 20
  9395                           
  9396                           ;mtouch_button.c: 210: enum mtouch_button_names button;
  9397                           ;mtouch_button.c: 213: for (button = 0; button < 5; button++)
  9398                           
  9399                           ;incstack = 0
  9400  0123B6  0E00               	movlw	0
  9401  0123B8  0100               	movlb	0	; () banked
  9402  0123BA  6FC3               	movwf	MTOUCH_Button_ServiceAll@button& (0+255),b
  9403  0123BC                     l5141:
  9404                           
  9405                           ; BSR set to: 0
  9406  0123BC  0E04               	movlw	4
  9407  0123BE  65C3               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  9408  0123C0  D001               	goto	l770
  9409  0123C2  0012               	return	
  9410  0123C4                     l770:
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;mtouch_button.c: 214: {
  9414                           ;mtouch_button.c: 215: Button_Service(button);
  9415                           
  9416                           ; BSR set to: 0
  9417  0123C4  51C3               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  9418  0123C6  ECFB  F089         	call	_Button_Service
  9419  0123CA  0100               	movlb	0	; () banked
  9420  0123CC  2BC3               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  9421  0123CE  D7F6               	goto	l5141
  9422  0123D0                     __end_of_MTOUCH_Button_ServiceAll:
  9423                           	opt stack 0
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclath	equ	0xFFA
  9428                           tblptru	equ	0xFF8
  9429                           tblptrh	equ	0xFF7
  9430                           tblptrl	equ	0xFF6
  9431                           tablat	equ	0xFF5
  9432                           prodh	equ	0xFF4
  9433                           prodl	equ	0xFF3
  9434                           intcon	equ	0xFF2
  9435                           postinc0	equ	0xFEE
  9436                           wreg	equ	0xFE8
  9437                           indf1	equ	0xFE7
  9438                           postinc1	equ	0xFE6
  9439                           postdec1	equ	0xFE5
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           fsr2h	equ	0xFDA
  9446                           fsr2l	equ	0xFD9
  9447                           status	equ	0xFD8
  9448                           
  9449 ;; *************** function _Button_Service *****************
  9450 ;; Defined at:
  9451 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;  name            1    wreg     enum E17454
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;  name            1   17[BANK0 ] enum E17454
  9456 ;;  button          2   18[BANK0 ] PTR struct .
  9457 ;;		 -> mtouch_button(80), 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  1    wreg      void 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9468 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9470 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9471 ;;Total ram usage:        4 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    8
  9474 ;; This function calls:
  9475 ;;		_Button_Deviation_Update
  9476 ;;		_Button_Reading_Update
  9477 ;;		_Button_State_Initializing
  9478 ;;		_Button_State_NotPressed
  9479 ;;		_Button_State_Pressed
  9480 ;;		_MTOUCH_Button_Initialize
  9481 ;;		_MTOUCH_Sensor_isCalibrated
  9482 ;;		_MTOUCH_Sensor_wasSampled
  9483 ;; This function is called by:
  9484 ;;		_MTOUCH_Button_ServiceAll
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           	psect	text56
  9489  0113F6                     __ptext56:
  9490                           	opt stack 0
  9491  0113F6                     _Button_Service:
  9492                           	opt stack 20
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;incstack = 0
  9496                           ;Button_Service@name stored from wreg
  9497  0113F6  0100               	movlb	0	; () banked
  9498  0113F8  6FC0               	movwf	Button_Service@name& (0+255),b
  9499                           
  9500                           ;mtouch_button.c: 221: mtouch_button_t* button = &mtouch_button[name];
  9501  0113FA  0100               	movlb	0	; () banked
  9502  0113FC  51C0               	movf	Button_Service@name& (0+255),w,b
  9503  0113FE  0D10               	mullw	16
  9504  011400  0E40               	movlw	low _mtouch_button
  9505  011402  24F3               	addwf	prodl,w,c
  9506  011404  6FC1               	movwf	Button_Service@button& (0+255),b
  9507  011406  0E01               	movlw	high _mtouch_button
  9508  011408  20F4               	addwfc	prodh,w,c
  9509  01140A  6FC2               	movwf	(Button_Service@button+1)& (0+255),b
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;mtouch_button.c: 223: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  9513  01140C  EE20 F001          	lfsr	2,1
  9514  011410  51C1               	movf	Button_Service@button& (0+255),w,b
  9515  011412  26D9               	addwf	fsr2l,f,c
  9516  011414  51C2               	movf	(Button_Service@button+1)& (0+255),w,b
  9517  011416  22DA               	addwfc	fsr2h,f,c
  9518  011418  50DF               	movf	indf2,w,c
  9519  01141A  ECFC  F08F         	call	_MTOUCH_Sensor_wasSampled
  9520  01141E  0900               	iorlw	0
  9521  011420  B4D8               	btfsc	status,2,c
  9522  011422  0012               	return	
  9523  011424  0100               	movlb	0	; () banked
  9524  011426  EE20 F001          	lfsr	2,1
  9525  01142A  51C1               	movf	Button_Service@button& (0+255),w,b
  9526  01142C  26D9               	addwf	fsr2l,f,c
  9527  01142E  51C2               	movf	(Button_Service@button+1)& (0+255),w,b
  9528  011430  22DA               	addwfc	fsr2h,f,c
  9529  011432  50DF               	movf	indf2,w,c
  9530  011434  EC16  F090         	call	_MTOUCH_Sensor_isCalibrated
  9531  011438  0900               	iorlw	0
  9532  01143A  B4D8               	btfsc	status,2,c
  9533  01143C  0012               	return	
  9534                           
  9535                           ;mtouch_button.c: 224: {
  9536                           ;mtouch_button.c: 225: Button_Reading_Update(button);
  9537  01143E  C0C1  F0B6         	movff	Button_Service@button,Button_Reading_Update@button
  9538  011442  C0C2  F0B7         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  9539  011446  EC85  F091         	call	_Button_Reading_Update	;wreg free
  9540                           
  9541                           ;mtouch_button.c: 226: Button_Deviation_Update(button);
  9542  01144A  C0C1  F0AF         	movff	Button_Service@button,Button_Deviation_Update@button
  9543  01144E  C0C2  F0B0         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  9544  011452  ECA1  F087         	call	_Button_Deviation_Update	;wreg free
  9545                           
  9546                           ;mtouch_button.c: 228: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  9547  011456  0100               	movlb	0	; () banked
  9548  011458  EE20 F002          	lfsr	2,2
  9549  01145C  51C1               	movf	Button_Service@button& (0+255),w,b
  9550  01145E  26D9               	addwf	fsr2l,f,c
  9551  011460  51C2               	movf	(Button_Service@button+1)& (0+255),w,b
  9552  011462  22DA               	addwfc	fsr2h,f,c
  9553  011464  0E02               	movlw	2
  9554  011466  64DF               	cpfsgt	indf2,c
  9555  011468  D007               	goto	l776
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;mtouch_button.c: 229: {
  9559                           ;mtouch_button.c: 230: MTOUCH_Button_Initialize(button->name);
  9560  01146A  C0C1  FFD9         	movff	Button_Service@button,fsr2l
  9561  01146E  C0C2  FFDA         	movff	Button_Service@button+1,fsr2h
  9562  011472  50DF               	movf	indf2,w,c
  9563  011474  EC2C  F08C         	call	_MTOUCH_Button_Initialize
  9564  011478                     l776:
  9565                           
  9566                           ;mtouch_button.c: 231: }
  9567                           ;mtouch_button.c: 232: Button_StateMachine[button->state](button);
  9568  011478  C0C1  F0B8         	movff	Button_Service@button,Button_State_Pressed@button
  9569  01147C  C0C2  F0B9         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  9570  011480  0100               	movlb	0	; () banked
  9571  011482  EE20 F002          	lfsr	2,2
  9572  011486  51C1               	movf	Button_Service@button& (0+255),w,b
  9573  011488  26D9               	addwf	fsr2l,f,c
  9574  01148A  51C2               	movf	(Button_Service@button+1)& (0+255),w,b
  9575  01148C  22DA               	addwfc	fsr2h,f,c
  9576  01148E  50DF               	movf	indf2,w,c
  9577  011490  6FBF               	movwf	??_Button_Service& (0+255),b
  9578  011492  51BF               	movf	??_Button_Service& (0+255),w,b
  9579  011494  0D03               	mullw	3
  9580  011496  0ED4               	movlw	low _Button_StateMachine
  9581  011498  24F3               	addwf	prodl,w,c
  9582  01149A  6ED9               	movwf	fsr2l,c
  9583  01149C  0E00               	movlw	high _Button_StateMachine
  9584  01149E  20F4               	addwfc	prodh,w,c
  9585  0114A0  6EDA               	movwf	fsr2h,c
  9586  0114A2  D801               	call	u5588
  9587  0114A4  0012               	return	
  9588  0114A6                     u5588:
  9589  0114A6  0005               	push	
  9590  0114A8  6EFA               	movwf	pclath,c
  9591  0114AA  50DE               	movf	postinc2,w,c
  9592  0114AC  6EFD               	movwf	tosl,c
  9593  0114AE  50DE               	movf	postinc2,w,c
  9594  0114B0  6EFE               	movwf	tosh,c
  9595  0114B2  50DE               	movf	postinc2,w,c
  9596  0114B4  6EFF               	movwf	tosu,c
  9597  0114B6  50FA               	movf	pclath,w,c
  9598  0114B8  0012               	return		;indir
  9599  0114BA                     __end_of_Button_Service:
  9600                           	opt stack 0
  9601                           tosu	equ	0xFFF
  9602                           tosh	equ	0xFFE
  9603                           tosl	equ	0xFFD
  9604                           pclath	equ	0xFFA
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           intcon	equ	0xFF2
  9612                           postinc0	equ	0xFEE
  9613                           wreg	equ	0xFE8
  9614                           indf1	equ	0xFE7
  9615                           postinc1	equ	0xFE6
  9616                           postdec1	equ	0xFE5
  9617                           fsr1h	equ	0xFE2
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9627 ;; Defined at:
  9628 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  sensor          1    wreg     enum E17513
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  sensor          1    0[BANK0 ] enum E17513
  9633 ;; Return value:  Size  Location     Type
  9634 ;;                  1    wreg      unsigned char 
  9635 ;; Registers used:
  9636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9646 ;;Total ram usage:        1 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    5
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_MTOUCH_Sensor_SampleAll
  9653 ;;		_Sensor_scheduleNextScan
  9654 ;;		_Button_Service
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text57
  9659  011FF8                     __ptext57:
  9660                           	opt stack 0
  9661  011FF8                     _MTOUCH_Sensor_wasSampled:
  9662                           	opt stack 22
  9663                           
  9664                           ;incstack = 0
  9665                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9666  011FF8  0100               	movlb	0	; () banked
  9667  011FFA  6FAF               	movwf	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9668                           
  9669                           ;mtouch_sensor.c: 822: if(sensor < 5)
  9670  011FFC  0E05               	movlw	5
  9671  011FFE  0100               	movlb	0	; () banked
  9672  012000  61AF               	cpfslt	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9673  012002  D012               	goto	l687
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
  9677  012004  51AF               	movf	MTOUCH_Sensor_wasSampled@sensor& (0+255),w,b
  9678  012006  0D09               	mullw	9
  9679  012008  0E08               	movlw	8
  9680  01200A  26F3               	addwf	prodl,f,c
  9681  01200C  0E00               	movlw	0
  9682  01200E  22F4               	addwfc	prodh,f,c
  9683  012010  0E82               	movlw	low _mtouch_sensor
  9684  012012  24F3               	addwf	prodl,w,c
  9685  012014  6ED9               	movwf	fsr2l,c
  9686  012016  0E00               	movlw	high _mtouch_sensor
  9687  012018  20F4               	addwfc	prodh,w,c
  9688  01201A  6EDA               	movwf	fsr2h,c
  9689  01201C  A2DF               	btfss	indf2,1,c
  9690  01201E  D002               	goto	u4770
  9691  012020  0E01               	movlw	1
  9692  012022  0012               	return	
  9693  012024                     u4770:
  9694  012024  0E00               	movlw	0
  9695                           
  9696                           ; BSR set to: 0
  9697                           
  9698                           ; BSR set to: 0
  9699  012026  0012               	return	
  9700  012028                     l687:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;mtouch_sensor.c: 824: else
  9704                           ;mtouch_sensor.c: 825: return 0;
  9705                           
  9706                           ; BSR set to: 0
  9707  012028  0E00               	movlw	0
  9708                           
  9709                           ; BSR set to: 0
  9710  01202A  0012               	return	
  9711  01202C                     __end_of_MTOUCH_Sensor_wasSampled:
  9712                           	opt stack 0
  9713                           tosu	equ	0xFFF
  9714                           tosh	equ	0xFFE
  9715                           tosl	equ	0xFFD
  9716                           pclath	equ	0xFFA
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon	equ	0xFF2
  9724                           postinc0	equ	0xFEE
  9725                           wreg	equ	0xFE8
  9726                           indf1	equ	0xFE7
  9727                           postinc1	equ	0xFE6
  9728                           postdec1	equ	0xFE5
  9729                           fsr1h	equ	0xFE2
  9730                           fsr1l	equ	0xFE1
  9731                           indf2	equ	0xFDF
  9732                           postinc2	equ	0xFDE
  9733                           postdec2	equ	0xFDD
  9734                           fsr2h	equ	0xFDA
  9735                           fsr2l	equ	0xFD9
  9736                           status	equ	0xFD8
  9737                           
  9738 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9739 ;; Defined at:
  9740 ;;		line 772 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  sensor          1    wreg     enum E17513
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;  sensor          1    0[BANK0 ] enum E17513
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  1    wreg      unsigned char 
  9747 ;; Registers used:
  9748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9758 ;;Total ram usage:        1 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    5
  9761 ;; This function calls:
  9762 ;;		Nothing
  9763 ;; This function is called by:
  9764 ;;		_Button_Service
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           	psect	text58
  9769  01202C                     __ptext58:
  9770                           	opt stack 0
  9771  01202C                     _MTOUCH_Sensor_isCalibrated:
  9772                           	opt stack 22
  9773                           
  9774                           ; BSR set to: 0
  9775                           ;incstack = 0
  9776                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9777  01202C  0100               	movlb	0	; () banked
  9778  01202E  6FAF               	movwf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9779                           
  9780                           ;mtouch_sensor.c: 774: if(sensor < 5)
  9781  012030  0E05               	movlw	5
  9782  012032  0100               	movlb	0	; () banked
  9783  012034  61AF               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9784  012036  D012               	goto	l665
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;mtouch_sensor.c: 775: return (bool)mtouch_sensor[sensor].calibrated;
  9788  012038  51AF               	movf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),w,b
  9789  01203A  0D09               	mullw	9
  9790  01203C  0E08               	movlw	8
  9791  01203E  26F3               	addwf	prodl,f,c
  9792  012040  0E00               	movlw	0
  9793  012042  22F4               	addwfc	prodh,f,c
  9794  012044  0E82               	movlw	low _mtouch_sensor
  9795  012046  24F3               	addwf	prodl,w,c
  9796  012048  6ED9               	movwf	fsr2l,c
  9797  01204A  0E00               	movlw	high _mtouch_sensor
  9798  01204C  20F4               	addwfc	prodh,w,c
  9799  01204E  6EDA               	movwf	fsr2h,c
  9800  012050  A6DF               	btfss	indf2,3,c
  9801  012052  D002               	goto	u5020
  9802  012054  0E01               	movlw	1
  9803  012056  0012               	return	
  9804  012058                     u5020:
  9805  012058  0E00               	movlw	0
  9806                           
  9807                           ; BSR set to: 0
  9808                           
  9809                           ; BSR set to: 0
  9810  01205A  0012               	return	
  9811  01205C                     l665:
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;mtouch_sensor.c: 776: else
  9815                           ;mtouch_sensor.c: 777: return 0;
  9816                           
  9817                           ; BSR set to: 0
  9818  01205C  0E00               	movlw	0
  9819                           
  9820                           ; BSR set to: 0
  9821  01205E  0012               	return	
  9822  012060                     __end_of_MTOUCH_Sensor_isCalibrated:
  9823                           	opt stack 0
  9824                           tosu	equ	0xFFF
  9825                           tosh	equ	0xFFE
  9826                           tosl	equ	0xFFD
  9827                           pclath	equ	0xFFA
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           indf1	equ	0xFE7
  9838                           postinc1	equ	0xFE6
  9839                           postdec1	equ	0xFE5
  9840                           fsr1h	equ	0xFE2
  9841                           fsr1l	equ	0xFE1
  9842                           indf2	equ	0xFDF
  9843                           postinc2	equ	0xFDE
  9844                           postdec2	equ	0xFDD
  9845                           fsr2h	equ	0xFDA
  9846                           fsr2l	equ	0xFD9
  9847                           status	equ	0xFD8
  9848                           
  9849 ;; *************** function _Button_State_NotPressed *****************
  9850 ;; Defined at:
  9851 ;;		line 256 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  button          2    9[BANK0 ] PTR struct .
  9854 ;;		 -> mtouch_button(80), 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  1    wreg      void 
  9859 ;; Registers used:
  9860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9868 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9870 ;;Total ram usage:        5 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    7
  9873 ;; This function calls:
  9874 ;;		_Button_Baseline_Update
  9875 ;;		_Button_DefaultCallback
  9876 ;;		_MTOUCH_Button_Initialize
  9877 ;; This function is called by:
  9878 ;;		_Button_Service
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text59
  9883  0107E6                     __ptext59:
  9884                           	opt stack 0
  9885  0107E6                     _Button_State_NotPressed:
  9886                           	opt stack 20
  9887                           
  9888                           ;mtouch_button.c: 259: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;incstack = 0
  9892  0107E6  0100               	movlb	0	; () banked
  9893  0107E8  EE20 F00E          	lfsr	2,14
  9894  0107EC  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9895  0107EE  26D9               	addwf	fsr2l,f,c
  9896  0107F0  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9897  0107F2  22DA               	addwfc	fsr2h,f,c
  9898  0107F4  50DF               	movf	indf2,w,c
  9899  0107F6  0800               	sublw	0
  9900  0107F8  6FBA               	movwf	??_Button_State_NotPressed& (0+255),b
  9901  0107FA  EE20 F009          	lfsr	2,9
  9902  0107FE  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9903  010800  26D9               	addwf	fsr2l,f,c
  9904  010802  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9905  010804  22DA               	addwfc	fsr2h,f,c
  9906  010806  50DE               	movf	postinc2,w,c
  9907  010808  0A80               	xorlw	128
  9908  01080A  6FBC               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9909  01080C  51BA               	movf	??_Button_State_NotPressed& (0+255),w,b
  9910  01080E  0A80               	xorlw	128
  9911  010810  5DBC               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9912  010812  B0D8               	btfsc	status,0,c
  9913  010814  D028               	goto	l786
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;mtouch_button.c: 260: {
  9917                           ;mtouch_button.c: 261: (button->counter)++;
  9918  010816  EE20 F00A          	lfsr	2,10
  9919  01081A  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9920  01081C  26D9               	addwf	fsr2l,f,c
  9921  01081E  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9922  010820  22DA               	addwfc	fsr2h,f,c
  9923  010822  2ADE               	incf	postinc2,f,c
  9924  010824  0E00               	movlw	0
  9925  010826  22DD               	addwfc	postdec2,f,c
  9926                           
  9927                           ;mtouch_button.c: 262: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  9928  010828  EE20 F00A          	lfsr	2,10
  9929  01082C  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9930  01082E  26D9               	addwf	fsr2l,f,c
  9931  010830  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9932  010832  22DA               	addwfc	fsr2h,f,c
  9933  010834  0E01               	movlw	1
  9934  010836  50DB               	movf	plusw2,w,c
  9935  010838  E104               	bnz	u5120
  9936  01083A  0E41               	movlw	65
  9937  01083C  5CDE               	subwf	postinc2,w,c
  9938  01083E  A0D8               	btfss	status,0,c
  9939  010840  D055               	goto	l790
  9940  010842                     u5120:
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;mtouch_button.c: 263: {
  9944                           ;mtouch_button.c: 264: button->counter = (mtouch_button_statecounter_t)0;
  9945  010842  EE20 F00A          	lfsr	2,10
  9946  010846  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9947  010848  26D9               	addwf	fsr2l,f,c
  9948  01084A  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9949  01084C  22DA               	addwfc	fsr2h,f,c
  9950  01084E  0E00               	movlw	0
  9951  010850  6EDE               	movwf	postinc2,c
  9952  010852  0E00               	movlw	0
  9953  010854  6EDD               	movwf	postdec2,c
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;mtouch_button.c: 265: MTOUCH_Button_Initialize(button->name);
  9957  010856  C0B8  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9958  01085A  C0B9  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9959  01085E  50DF               	movf	indf2,w,c
  9960  010860  EC2C  F08C         	call	_MTOUCH_Button_Initialize
  9961                           
  9962                           ;mtouch_button.c: 266: }
  9963                           ;mtouch_button.c: 267: }
  9964  010864  D043               	goto	l790
  9965  010866                     l786:
  9966                           
  9967                           ;mtouch_button.c: 269: else if ((button->deviation) > (button->threshold))
  9968  010866  0100               	movlb	0	; () banked
  9969  010868  EE20 F009          	lfsr	2,9
  9970  01086C  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9971  01086E  26D9               	addwf	fsr2l,f,c
  9972  010870  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9973  010872  22DA               	addwfc	fsr2h,f,c
  9974  010874  EE10 F00E          	lfsr	1,14
  9975  010878  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9976  01087A  26E1               	addwf	fsr1l,f,c
  9977  01087C  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9978  01087E  22E2               	addwfc	fsr1h,f,c
  9979  010880  50E6               	movf	postinc1,w,c
  9980  010882  0A80               	xorlw	128
  9981  010884  6FBC               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9982  010886  50DE               	movf	postinc2,w,c
  9983  010888  0A80               	xorlw	128
  9984  01088A  5DBC               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9985  01088C  B0D8               	btfsc	status,0,c
  9986  01088E  D023               	goto	l789
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;mtouch_button.c: 270: {
  9990                           ;mtouch_button.c: 272: button->state = MTOUCH_BUTTON_STATE_pressed;
  9991  010890  EE20 F002          	lfsr	2,2
  9992  010894  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
  9993  010896  26D9               	addwf	fsr2l,f,c
  9994  010898  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9995  01089A  22DA               	addwfc	fsr2h,f,c
  9996  01089C  0E02               	movlw	2
  9997  01089E  6EDF               	movwf	indf2,c
  9998                           
  9999                           ;mtouch_button.c: 273: button->counter = (mtouch_button_statecounter_t)0;
 10000  0108A0  EE20 F00A          	lfsr	2,10
 10001  0108A4  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
 10002  0108A6  26D9               	addwf	fsr2l,f,c
 10003  0108A8  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
 10004  0108AA  22DA               	addwfc	fsr2h,f,c
 10005  0108AC  0E00               	movlw	0
 10006  0108AE  6EDE               	movwf	postinc2,c
 10007  0108B0  0E00               	movlw	0
 10008  0108B2  6EDD               	movwf	postdec2,c
 10009                           
 10010                           ; BSR set to: 0
 10011                           ;mtouch_button.c: 274: callback_pressed(button->name);
 10012  0108B4  D801               	call	u5148
 10013  0108B6  D01A               	goto	l790
 10014  0108B8                     u5148:
 10015  0108B8  0005               	push	
 10016  0108BA  6EFA               	movwf	pclath,c
 10017  0108BC  5045               	movf	_callback_pressed,w,c
 10018  0108BE  6EFD               	movwf	tosl,c
 10019  0108C0  5046               	movf	_callback_pressed+1,w,c
 10020  0108C2  6EFE               	movwf	tosh,c
 10021  0108C4  5047               	movf	_callback_pressed+2,w,c
 10022  0108C6  6EFF               	movwf	tosu,c
 10023  0108C8  50FA               	movf	pclath,w,c
 10024  0108CA  C0B8  FFD9         	movff	Button_State_NotPressed@button,fsr2l
 10025  0108CE  C0B9  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
 10026  0108D2  50DF               	movf	indf2,w,c
 10027  0108D4  0012               	return		;indir
 10028  0108D6                     l789:
 10029                           
 10030                           ;mtouch_button.c: 276: else
 10031                           ;mtouch_button.c: 277: {
 10032                           ;mtouch_button.c: 279: button->counter = (mtouch_button_statecounter_t)0;
 10033  0108D6  0100               	movlb	0	; () banked
 10034  0108D8  EE20 F00A          	lfsr	2,10
 10035  0108DC  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
 10036  0108DE  26D9               	addwf	fsr2l,f,c
 10037  0108E0  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
 10038  0108E2  22DA               	addwfc	fsr2h,f,c
 10039  0108E4  0E00               	movlw	0
 10040  0108E6  6EDE               	movwf	postinc2,c
 10041  0108E8  0E00               	movlw	0
 10042  0108EA  6EDD               	movwf	postdec2,c
 10043  0108EC                     l790:
 10044                           
 10045                           ;mtouch_button.c: 280: }
 10046                           ;mtouch_button.c: 284: (button->baseline_count)++;
 10047                           
 10048                           ; BSR set to: 0
 10049  0108EC  0100               	movlb	0	; () banked
 10050  0108EE  EE20 F00C          	lfsr	2,12
 10051  0108F2  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
 10052  0108F4  26D9               	addwf	fsr2l,f,c
 10053  0108F6  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
 10054  0108F8  22DA               	addwfc	fsr2h,f,c
 10055  0108FA  2ADE               	incf	postinc2,f,c
 10056  0108FC  0E00               	movlw	0
 10057  0108FE  22DD               	addwfc	postdec2,f,c
 10058                           
 10059                           ;mtouch_button.c: 285: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
 10060  010900  EE20 F00C          	lfsr	2,12
 10061  010904  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
 10062  010906  26D9               	addwf	fsr2l,f,c
 10063  010908  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
 10064  01090A  22DA               	addwfc	fsr2h,f,c
 10065  01090C  0E40               	movlw	64
 10066  01090E  18DE               	xorwf	postinc2,w,c
 10067  010910  10DE               	iorwf	postinc2,w,c
 10068  010912  A4D8               	btfss	status,2,c
 10069  010914  0012               	return	
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;mtouch_button.c: 286: {
 10073                           ;mtouch_button.c: 287: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10074  010916  EE20 F00C          	lfsr	2,12
 10075  01091A  51B8               	movf	Button_State_NotPressed@button& (0+255),w,b
 10076  01091C  26D9               	addwf	fsr2l,f,c
 10077  01091E  51B9               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
 10078  010920  22DA               	addwfc	fsr2h,f,c
 10079  010922  0E00               	movlw	0
 10080  010924  6EDE               	movwf	postinc2,c
 10081  010926  0E00               	movlw	0
 10082  010928  6EDD               	movwf	postdec2,c
 10083                           
 10084                           ; BSR set to: 0
 10085                           ;mtouch_button.c: 288: Button_Baseline_Update(button);
 10086  01092A  C0B8  F0AF         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
 10087  01092E  C0B9  F0B0         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
 10088  010932  EC2A  F088         	call	_Button_Baseline_Update
 10089  010936  0012               	return	
 10090  010938                     __end_of_Button_State_NotPressed:
 10091                           	opt stack 0
 10092                           tosu	equ	0xFFF
 10093                           tosh	equ	0xFFE
 10094                           tosl	equ	0xFFD
 10095                           pclath	equ	0xFFA
 10096                           tblptru	equ	0xFF8
 10097                           tblptrh	equ	0xFF7
 10098                           tblptrl	equ	0xFF6
 10099                           tablat	equ	0xFF5
 10100                           prodh	equ	0xFF4
 10101                           prodl	equ	0xFF3
 10102                           intcon	equ	0xFF2
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           indf1	equ	0xFE7
 10106                           postinc1	equ	0xFE6
 10107                           postdec1	equ	0xFE5
 10108                           fsr1h	equ	0xFE2
 10109                           fsr1l	equ	0xFE1
 10110                           indf2	equ	0xFDF
 10111                           postinc2	equ	0xFDE
 10112                           postdec2	equ	0xFDD
 10113                           plusw2	equ	0xFDB
 10114                           fsr2h	equ	0xFDA
 10115                           fsr2l	equ	0xFD9
 10116                           status	equ	0xFD8
 10117                           
 10118 ;; *************** function _Button_State_Initializing *****************
 10119 ;; Defined at:
 10120 ;;		line 236 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  button          2    9[BANK0 ] PTR struct .
 10123 ;;		 -> mtouch_button(80), 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  1    wreg      void 
 10128 ;; Registers used:
 10129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10137 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10138 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10139 ;;Total ram usage:        6 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    7
 10142 ;; This function calls:
 10143 ;;		_Button_Baseline_Initialize
 10144 ;;		_Button_Baseline_Update
 10145 ;; This function is called by:
 10146 ;;		_Button_Service
 10147 ;; This function uses a non-reentrant model
 10148 ;;
 10149                           
 10150                           	psect	text60
 10151  01132A                     __ptext60:
 10152                           	opt stack 0
 10153  01132A                     _Button_State_Initializing:
 10154                           	opt stack 20
 10155                           
 10156                           ;mtouch_button.c: 239: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
 10157                           
 10158                           ;incstack = 0
 10159  01132A  0100               	movlb	0	; () banked
 10160  01132C  EE20 F00A          	lfsr	2,10
 10161  011330  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10162  011332  26D9               	addwf	fsr2l,f,c
 10163  011334  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10164  011336  22DA               	addwfc	fsr2h,f,c
 10165  011338  0E01               	movlw	1
 10166  01133A  50DB               	movf	plusw2,w,c
 10167  01133C  E10B               	bnz	l4725
 10168  01133E  0E09               	movlw	9
 10169  011340  5CDE               	subwf	postinc2,w,c
 10170  011342  B0D8               	btfsc	status,0,c
 10171  011344  D007               	goto	l780
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;mtouch_button.c: 240: {
 10175                           ;mtouch_button.c: 241: Button_Baseline_Initialize(button);
 10176  011346  C0B8  F0B2         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
 10177  01134A  C0B9  F0B3         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
 10178  01134E  EC03  F08D         	call	_Button_Baseline_Initialize	;wreg free
 10179                           
 10180                           ;mtouch_button.c: 242: } else {
 10181  011352  D006               	goto	l781
 10182  011354                     l780:
 10183  011354                     l4725:
 10184                           
 10185                           ;mtouch_button.c: 243: Button_Baseline_Update(button);
 10186  011354  C0B8  F0AF         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
 10187  011358  C0B9  F0B0         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
 10188  01135C  EC2A  F088         	call	_Button_Baseline_Update	;wreg free
 10189  011360                     l781:
 10190                           
 10191                           ;mtouch_button.c: 244: }
 10192                           ;mtouch_button.c: 247: (button->counter)++;
 10193  011360  0100               	movlb	0	; () banked
 10194  011362  EE20 F00A          	lfsr	2,10
 10195  011366  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10196  011368  26D9               	addwf	fsr2l,f,c
 10197  01136A  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10198  01136C  22DA               	addwfc	fsr2h,f,c
 10199  01136E  2ADE               	incf	postinc2,f,c
 10200  011370  0E00               	movlw	0
 10201  011372  22DD               	addwfc	postdec2,f,c
 10202                           
 10203                           ; BSR set to: 0
 10204                           ;mtouch_button.c: 248: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
 10205  011374  EE20 F00A          	lfsr	2,10
 10206  011378  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10207  01137A  26D9               	addwf	fsr2l,f,c
 10208  01137C  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10209  01137E  22DA               	addwfc	fsr2h,f,c
 10210  011380  0E01               	movlw	1
 10211  011382  50DB               	movf	plusw2,w,c
 10212  011384  E104               	bnz	u5090
 10213  011386  0E10               	movlw	16
 10214  011388  5CDE               	subwf	postinc2,w,c
 10215  01138A  A0D8               	btfss	status,0,c
 10216  01138C  0012               	return	
 10217  01138E                     u5090:
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;mtouch_button.c: 249: {
 10221                           ;mtouch_button.c: 250: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
 10222  01138E  EE20 F005          	lfsr	2,5
 10223  011392  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10224  011394  26D9               	addwf	fsr2l,f,c
 10225  011396  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10226  011398  22DA               	addwfc	fsr2h,f,c
 10227  01139A  CFDE F0BA          	movff	postinc2,??_Button_State_Initializing
 10228  01139E  CFDE F0BB          	movff	postinc2,??_Button_State_Initializing+1
 10229  0113A2  CFDE F0BC          	movff	postinc2,??_Button_State_Initializing+2
 10230  0113A6  CFDE F0BD          	movff	postinc2,??_Button_State_Initializing+3
 10231  0113AA  0E05               	movlw	5
 10232  0113AC  D005               	goto	u5100
 10233  0113AE                     u5105:
 10234  0113AE  90D8               	bcf	status,0,c
 10235  0113B0  33BD               	rrcf	(??_Button_State_Initializing+3)& (0+255),f,b
 10236  0113B2  33BC               	rrcf	(??_Button_State_Initializing+2)& (0+255),f,b
 10237  0113B4  33BB               	rrcf	(??_Button_State_Initializing+1)& (0+255),f,b
 10238  0113B6  33BA               	rrcf	??_Button_State_Initializing& (0+255),f,b
 10239  0113B8                     u5100:
 10240  0113B8  2EE8               	decfsz	wreg,f,c
 10241  0113BA  D7F9               	goto	u5105
 10242  0113BC  EE20 F003          	lfsr	2,3
 10243  0113C0  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10244  0113C2  26D9               	addwf	fsr2l,f,c
 10245  0113C4  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10246  0113C6  22DA               	addwfc	fsr2h,f,c
 10247  0113C8  C0BA  FFDE         	movff	??_Button_State_Initializing,postinc2
 10248  0113CC  C0BB  FFDD         	movff	??_Button_State_Initializing+1,postdec2
 10249                           
 10250                           ;mtouch_button.c: 251: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10251  0113D0  EE20 F002          	lfsr	2,2
 10252  0113D4  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10253  0113D6  26D9               	addwf	fsr2l,f,c
 10254  0113D8  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10255  0113DA  22DA               	addwfc	fsr2h,f,c
 10256  0113DC  0E01               	movlw	1
 10257  0113DE  6EDF               	movwf	indf2,c
 10258                           
 10259                           ;mtouch_button.c: 252: button->counter = (mtouch_button_statecounter_t)0;
 10260  0113E0  EE20 F00A          	lfsr	2,10
 10261  0113E4  51B8               	movf	Button_State_Initializing@button& (0+255),w,b
 10262  0113E6  26D9               	addwf	fsr2l,f,c
 10263  0113E8  51B9               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10264  0113EA  22DA               	addwfc	fsr2h,f,c
 10265  0113EC  0E00               	movlw	0
 10266  0113EE  6EDE               	movwf	postinc2,c
 10267  0113F0  0E00               	movlw	0
 10268  0113F2  6EDD               	movwf	postdec2,c
 10269  0113F4  0012               	return	
 10270  0113F6                     __end_of_Button_State_Initializing:
 10271                           	opt stack 0
 10272                           tosu	equ	0xFFF
 10273                           tosh	equ	0xFFE
 10274                           tosl	equ	0xFFD
 10275                           pclath	equ	0xFFA
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           postinc0	equ	0xFEE
 10284                           wreg	equ	0xFE8
 10285                           indf1	equ	0xFE7
 10286                           postinc1	equ	0xFE6
 10287                           postdec1	equ	0xFE5
 10288                           fsr1h	equ	0xFE2
 10289                           fsr1l	equ	0xFE1
 10290                           indf2	equ	0xFDF
 10291                           postinc2	equ	0xFDE
 10292                           postdec2	equ	0xFDD
 10293                           plusw2	equ	0xFDB
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8
 10297                           
 10298 ;; *************** function _Button_State_Pressed *****************
 10299 ;; Defined at:
 10300 ;;		line 292 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;  button          2    9[BANK0 ] PTR struct .
 10303 ;;		 -> mtouch_button(80), 
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;		None
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10317 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10318 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10319 ;;Total ram usage:        7 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:    7
 10322 ;; This function calls:
 10323 ;;		_Button_DefaultCallback
 10324 ;;		_MTOUCH_Button_Initialize
 10325 ;; This function is called by:
 10326 ;;		_Button_Service
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           	psect	text61
 10331  011154                     __ptext61:
 10332                           	opt stack 0
 10333  011154                     _Button_State_Pressed:
 10334                           	opt stack 20
 10335                           
 10336                           ;mtouch_button.c: 295: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;incstack = 0
 10340  011154  0100               	movlb	0	; () banked
 10341  011156  EE20 F00A          	lfsr	2,10
 10342  01115A  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10343  01115C  26D9               	addwf	fsr2l,f,c
 10344  01115E  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10345  011160  22DA               	addwfc	fsr2h,f,c
 10346  011162  0EE8               	movlw	232
 10347  011164  5CDE               	subwf	postinc2,w,c
 10348  011166  0E03               	movlw	3
 10349  011168  58DE               	subwfb	postinc2,w,c
 10350  01116A  A0D8               	btfss	status,0,c
 10351  01116C  D018               	goto	l795
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;mtouch_button.c: 296: {
 10355                           ;mtouch_button.c: 297: MTOUCH_Button_Initialize(button->name);
 10356  01116E  C0B8  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10357  011172  C0B9  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10358  011176  50DF               	movf	indf2,w,c
 10359  011178  EC2C  F08C         	call	_MTOUCH_Button_Initialize
 10360                           
 10361                           ;mtouch_button.c: 298: callback_notPressed(button->name);
 10362  01117C  D801               	call	u5178
 10363  01117E  0012               	return	
 10364  011180                     u5178:
 10365  011180  0005               	push	
 10366  011182  6EFA               	movwf	pclath,c
 10367  011184  5042               	movf	_callback_notPressed,w,c
 10368  011186  6EFD               	movwf	tosl,c
 10369  011188  5043               	movf	_callback_notPressed+1,w,c
 10370  01118A  6EFE               	movwf	tosh,c
 10371  01118C  5044               	movf	_callback_notPressed+2,w,c
 10372  01118E  6EFF               	movwf	tosu,c
 10373  011190  50FA               	movf	pclath,w,c
 10374  011192  C0B8  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10375  011196  C0B9  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10376  01119A  50DF               	movf	indf2,w,c
 10377  01119C  0012               	return		;indir
 10378  01119E                     l795:
 10379                           
 10380                           ;mtouch_button.c: 302: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
 10381  01119E  0100               	movlb	0	; () banked
 10382  0111A0  EE20 F00E          	lfsr	2,14
 10383  0111A4  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10384  0111A6  26D9               	addwf	fsr2l,f,c
 10385  0111A8  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10386  0111AA  22DA               	addwfc	fsr2h,f,c
 10387  0111AC  50DF               	movf	indf2,w,c
 10388  0111AE  6FBA               	movwf	??_Button_State_Pressed& (0+255),b
 10389  0111B0  EE20 F00E          	lfsr	2,14
 10390  0111B4  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10391  0111B6  26D9               	addwf	fsr2l,f,c
 10392  0111B8  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10393  0111BA  22DA               	addwfc	fsr2h,f,c
 10394  0111BC  50DF               	movf	indf2,w,c
 10395  0111BE  6FBB               	movwf	(??_Button_State_Pressed+1)& (0+255),b
 10396  0111C0  35BB               	rlcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10397  0111C2  31BB               	rrcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10398  0111C4  0800               	sublw	0
 10399  0111C6  25BA               	addwf	??_Button_State_Pressed& (0+255),w,b
 10400  0111C8  6FBC               	movwf	(??_Button_State_Pressed+2)& (0+255),b
 10401  0111CA  EE20 F009          	lfsr	2,9
 10402  0111CE  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10403  0111D0  26D9               	addwf	fsr2l,f,c
 10404  0111D2  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10405  0111D4  22DA               	addwfc	fsr2h,f,c
 10406  0111D6  50DE               	movf	postinc2,w,c
 10407  0111D8  0A80               	xorlw	128
 10408  0111DA  6FBE               	movwf	(??_Button_State_Pressed+4)& (0+255),b
 10409  0111DC  51BC               	movf	(??_Button_State_Pressed+2)& (0+255),w,b
 10410  0111DE  0A80               	xorlw	128
 10411  0111E0  5DBE               	subwf	(??_Button_State_Pressed+4)& (0+255),w,b
 10412  0111E2  B0D8               	btfsc	status,0,c
 10413  0111E4  0012               	return	
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;mtouch_button.c: 303: {
 10417                           ;mtouch_button.c: 304: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10418  0111E6  EE20 F002          	lfsr	2,2
 10419  0111EA  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10420  0111EC  26D9               	addwf	fsr2l,f,c
 10421  0111EE  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10422  0111F0  22DA               	addwfc	fsr2h,f,c
 10423  0111F2  0E01               	movlw	1
 10424  0111F4  6EDF               	movwf	indf2,c
 10425                           
 10426                           ;mtouch_button.c: 305: button->counter = (mtouch_button_statecounter_t)0;
 10427  0111F6  EE20 F00A          	lfsr	2,10
 10428  0111FA  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10429  0111FC  26D9               	addwf	fsr2l,f,c
 10430  0111FE  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10431  011200  22DA               	addwfc	fsr2h,f,c
 10432  011202  0E00               	movlw	0
 10433  011204  6EDE               	movwf	postinc2,c
 10434  011206  0E00               	movlw	0
 10435  011208  6EDD               	movwf	postdec2,c
 10436                           
 10437                           ;mtouch_button.c: 306: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
 10438  01120A  EE20 F00C          	lfsr	2,12
 10439  01120E  51B8               	movf	Button_State_Pressed@button& (0+255),w,b
 10440  011210  26D9               	addwf	fsr2l,f,c
 10441  011212  51B9               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10442  011214  22DA               	addwfc	fsr2h,f,c
 10443  011216  0EFF               	movlw	255
 10444  011218  6EDE               	movwf	postinc2,c
 10445  01121A  0EFB               	movlw	251
 10446  01121C  6EDD               	movwf	postdec2,c
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;mtouch_button.c: 307: callback_notPressed(button->name);
 10450  01121E  D801               	call	u5198
 10451  011220  0012               	return	
 10452  011222                     u5198:
 10453  011222  0005               	push	
 10454  011224  6EFA               	movwf	pclath,c
 10455  011226  5042               	movf	_callback_notPressed,w,c
 10456  011228  6EFD               	movwf	tosl,c
 10457  01122A  5043               	movf	_callback_notPressed+1,w,c
 10458  01122C  6EFE               	movwf	tosh,c
 10459  01122E  5044               	movf	_callback_notPressed+2,w,c
 10460  011230  6EFF               	movwf	tosu,c
 10461  011232  50FA               	movf	pclath,w,c
 10462  011234  C0B8  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10463  011238  C0B9  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10464  01123C  50DF               	movf	indf2,w,c
 10465  01123E  0012               	return		;indir
 10466  011240                     __end_of_Button_State_Pressed:
 10467                           	opt stack 0
 10468                           tosu	equ	0xFFF
 10469                           tosh	equ	0xFFE
 10470                           tosl	equ	0xFFD
 10471                           pclath	equ	0xFFA
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           intcon	equ	0xFF2
 10479                           postinc0	equ	0xFEE
 10480                           wreg	equ	0xFE8
 10481                           indf1	equ	0xFE7
 10482                           postinc1	equ	0xFE6
 10483                           postdec1	equ	0xFE5
 10484                           fsr1h	equ	0xFE2
 10485                           fsr1l	equ	0xFE1
 10486                           indf2	equ	0xFDF
 10487                           postinc2	equ	0xFDE
 10488                           postdec2	equ	0xFDD
 10489                           plusw2	equ	0xFDB
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function _MTOUCH_Button_Initialize *****************
 10495 ;; Defined at:
 10496 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  name            1    wreg     enum E17454
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  name            1    1[BANK0 ] enum E17454
 10501 ;;  button          2    2[BANK0 ] PTR struct .
 10502 ;;		 -> mtouch_button(80), 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10513 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;Total ram usage:        3 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    6
 10519 ;; This function calls:
 10520 ;;		_MTOUCH_Sensor_Calibrate
 10521 ;; This function is called by:
 10522 ;;		_MTOUCH_Button_InitializeAll
 10523 ;;		_Button_Service
 10524 ;;		_Button_State_NotPressed
 10525 ;;		_Button_State_Pressed
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text62
 10530  011858                     __ptext62:
 10531                           	opt stack 0
 10532  011858                     _MTOUCH_Button_Initialize:
 10533                           	opt stack 21
 10534                           
 10535                           ;incstack = 0
 10536                           ;MTOUCH_Button_Initialize@name stored from wreg
 10537  011858  0100               	movlb	0	; () banked
 10538  01185A  6FB0               	movwf	MTOUCH_Button_Initialize@name& (0+255),b
 10539                           
 10540                           ;mtouch_button.c: 180: mtouch_button_t* button = &mtouch_button[name];
 10541  01185C  0100               	movlb	0	; () banked
 10542  01185E  51B0               	movf	MTOUCH_Button_Initialize@name& (0+255),w,b
 10543  011860  0D10               	mullw	16
 10544  011862  0E40               	movlw	low _mtouch_button
 10545  011864  24F3               	addwf	prodl,w,c
 10546  011866  6FB1               	movwf	MTOUCH_Button_Initialize@button& (0+255),b
 10547  011868  0E01               	movlw	high _mtouch_button
 10548  01186A  20F4               	addwfc	prodh,w,c
 10549  01186C  6FB2               	movwf	(MTOUCH_Button_Initialize@button+1)& (0+255),b
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;mtouch_button.c: 182: button->state = MTOUCH_BUTTON_STATE_initializing;
 10553  01186E  EE20 F002          	lfsr	2,2
 10554  011872  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10555  011874  26D9               	addwf	fsr2l,f,c
 10556  011876  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10557  011878  22DA               	addwfc	fsr2h,f,c
 10558  01187A  0E00               	movlw	0
 10559  01187C  6EDF               	movwf	indf2,c
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;mtouch_button.c: 183: button->baseline = (mtouch_button_baseline_t)0;
 10563  01187E  EE20 F005          	lfsr	2,5
 10564  011882  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10565  011884  26D9               	addwf	fsr2l,f,c
 10566  011886  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10567  011888  22DA               	addwfc	fsr2h,f,c
 10568  01188A  6ADE               	clrf	postinc2,c
 10569  01188C  6ADE               	clrf	postinc2,c
 10570  01188E  6ADE               	clrf	postinc2,c
 10571  011890  6ADD               	clrf	postdec2,c
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;mtouch_button.c: 184: button->counter = (mtouch_button_statecounter_t)0;
 10575  011892  EE20 F00A          	lfsr	2,10
 10576  011896  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10577  011898  26D9               	addwf	fsr2l,f,c
 10578  01189A  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10579  01189C  22DA               	addwfc	fsr2h,f,c
 10580  01189E  0E00               	movlw	0
 10581  0118A0  6EDE               	movwf	postinc2,c
 10582  0118A2  0E00               	movlw	0
 10583  0118A4  6EDD               	movwf	postdec2,c
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;mtouch_button.c: 185: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10587  0118A6  EE20 F00C          	lfsr	2,12
 10588  0118AA  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10589  0118AC  26D9               	addwf	fsr2l,f,c
 10590  0118AE  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10591  0118B0  22DA               	addwfc	fsr2h,f,c
 10592  0118B2  0E00               	movlw	0
 10593  0118B4  6EDE               	movwf	postinc2,c
 10594  0118B6  0E00               	movlw	0
 10595  0118B8  6EDD               	movwf	postdec2,c
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;mtouch_button.c: 187: MTOUCH_Sensor_Calibrate(button->sensor);
 10599  0118BA  EE20 F001          	lfsr	2,1
 10600  0118BE  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10601  0118C0  26D9               	addwf	fsr2l,f,c
 10602  0118C2  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10603  0118C4  22DA               	addwfc	fsr2h,f,c
 10604  0118C6  50DF               	movf	indf2,w,c
 10605  0118C8  EC12  F091         	call	_MTOUCH_Sensor_Calibrate
 10606  0118CC  0012               	return		;funcret
 10607  0118CE                     __end_of_MTOUCH_Button_Initialize:
 10608                           	opt stack 0
 10609                           tosu	equ	0xFFF
 10610                           tosh	equ	0xFFE
 10611                           tosl	equ	0xFFD
 10612                           pclath	equ	0xFFA
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           postinc0	equ	0xFEE
 10621                           wreg	equ	0xFE8
 10622                           indf1	equ	0xFE7
 10623                           postinc1	equ	0xFE6
 10624                           postdec1	equ	0xFE5
 10625                           fsr1h	equ	0xFE2
 10626                           fsr1l	equ	0xFE1
 10627                           indf2	equ	0xFDF
 10628                           postinc2	equ	0xFDE
 10629                           postdec2	equ	0xFDD
 10630                           plusw2	equ	0xFDB
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10636 ;; Defined at:
 10637 ;;		line 764 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  sensor          1    wreg     enum E17513
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  sensor          1    0[BANK0 ] enum E17513
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10655 ;;Total ram usage:        1 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    5
 10658 ;; This function calls:
 10659 ;;		Nothing
 10660 ;; This function is called by:
 10661 ;;		_MTOUCH_Sensor_Initialize
 10662 ;;		_MTOUCH_Button_Initialize
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text63
 10667  012224                     __ptext63:
 10668                           	opt stack 0
 10669  012224                     _MTOUCH_Sensor_Calibrate:
 10670                           	opt stack 21
 10671                           
 10672                           ;incstack = 0
 10673                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10674  012224  0100               	movlb	0	; () banked
 10675  012226  6FAF               	movwf	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10676                           
 10677                           ;mtouch_sensor.c: 766: if(sensor < 5)
 10678  012228  0E05               	movlw	5
 10679  01222A  0100               	movlb	0	; () banked
 10680  01222C  61AF               	cpfslt	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10681  01222E  0012               	return	
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;mtouch_sensor.c: 767: {
 10685                           ;mtouch_sensor.c: 768: mtouch_sensor[sensor].calibrated = 0;
 10686  012230  51AF               	movf	MTOUCH_Sensor_Calibrate@sensor& (0+255),w,b
 10687  012232  0D09               	mullw	9
 10688  012234  0E08               	movlw	8
 10689  012236  26F3               	addwf	prodl,f,c
 10690  012238  0E00               	movlw	0
 10691  01223A  22F4               	addwfc	prodh,f,c
 10692  01223C  0E82               	movlw	low _mtouch_sensor
 10693  01223E  24F3               	addwf	prodl,w,c
 10694  012240  6ED9               	movwf	fsr2l,c
 10695  012242  0E00               	movlw	high _mtouch_sensor
 10696  012244  20F4               	addwfc	prodh,w,c
 10697  012246  6EDA               	movwf	fsr2h,c
 10698  012248  96DF               	bcf	indf2,3,c
 10699  01224A  0012               	return	
 10700  01224C                     __end_of_MTOUCH_Sensor_Calibrate:
 10701                           	opt stack 0
 10702                           tosu	equ	0xFFF
 10703                           tosh	equ	0xFFE
 10704                           tosl	equ	0xFFD
 10705                           pclath	equ	0xFFA
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           intcon	equ	0xFF2
 10713                           postinc0	equ	0xFEE
 10714                           wreg	equ	0xFE8
 10715                           indf1	equ	0xFE7
 10716                           postinc1	equ	0xFE6
 10717                           postdec1	equ	0xFE5
 10718                           fsr1h	equ	0xFE2
 10719                           fsr1l	equ	0xFE1
 10720                           indf2	equ	0xFDF
 10721                           postinc2	equ	0xFDE
 10722                           postdec2	equ	0xFDD
 10723                           plusw2	equ	0xFDB
 10724                           fsr2h	equ	0xFDA
 10725                           fsr2l	equ	0xFD9
 10726                           status	equ	0xFD8
 10727                           
 10728 ;; *************** function _Button_DefaultCallback *****************
 10729 ;; Defined at:
 10730 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;  button          1    wreg     enum E17454
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;  button          1    0[COMRAM] enum E17454
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  1    wreg      void 
 10737 ;; Registers used:
 10738 ;;		wreg
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10748 ;;Total ram usage:        0 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    5
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_Button_State_NotPressed
 10755 ;;		_Button_State_Pressed
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text64
 10760  012514                     __ptext64:
 10761                           	opt stack 0
 10762  012514                     _Button_DefaultCallback:
 10763                           	opt stack 21
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;incstack = 0
 10767  012514  0012               	return		;funcret
 10768  012516                     __end_of_Button_DefaultCallback:
 10769                           	opt stack 0
 10770                           tosu	equ	0xFFF
 10771                           tosh	equ	0xFFE
 10772                           tosl	equ	0xFFD
 10773                           pclath	equ	0xFFA
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           postinc0	equ	0xFEE
 10782                           wreg	equ	0xFE8
 10783                           indf1	equ	0xFE7
 10784                           postinc1	equ	0xFE6
 10785                           postdec1	equ	0xFE5
 10786                           fsr1h	equ	0xFE2
 10787                           fsr1l	equ	0xFE1
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           plusw2	equ	0xFDB
 10792                           fsr2h	equ	0xFDA
 10793                           fsr2l	equ	0xFD9
 10794                           status	equ	0xFD8
 10795                           
 10796 ;; *************** function _Button_Baseline_Update *****************
 10797 ;; Defined at:
 10798 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;  button          2    0[BANK0 ] PTR struct .
 10801 ;;		 -> mtouch_button(80), 
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;		None
 10804 ;; Return value:  Size  Location     Type
 10805 ;;                  1    wreg      void 
 10806 ;; Registers used:
 10807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10808 ;; Tracked objects:
 10809 ;;		On entry : 0/0
 10810 ;;		On exit  : 0/0
 10811 ;;		Unchanged: 0/0
 10812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10813 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10816 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10817 ;;Total ram usage:        6 bytes
 10818 ;; Hardware stack levels used:    1
 10819 ;; Hardware stack levels required when called:    5
 10820 ;; This function calls:
 10821 ;;		Nothing
 10822 ;; This function is called by:
 10823 ;;		_Button_State_Initializing
 10824 ;;		_Button_State_NotPressed
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text65
 10829  011054                     __ptext65:
 10830                           	opt stack 0
 10831  011054                     _Button_Baseline_Update:
 10832                           	opt stack 21
 10833                           
 10834                           ;mtouch_button.c: 486: if (GIE == (uint8_t)1)
 10835                           
 10836                           ;incstack = 0
 10837  011054  AEF2               	btfss	intcon,7,c	;volatile
 10838  011056  D040               	goto	l875
 10839                           
 10840                           ;mtouch_button.c: 487: {
 10841                           ;mtouch_button.c: 488: GIE = (uint8_t)0;
 10842  011058  9EF2               	bcf	intcon,7,c	;volatile
 10843                           
 10844                           ;mtouch_button.c: 489: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10845  01105A  0100               	movlb	0	; () banked
 10846  01105C  EE20 F005          	lfsr	2,5
 10847  011060  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10848  011062  26D9               	addwf	fsr2l,f,c
 10849  011064  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10850  011066  22DA               	addwfc	fsr2h,f,c
 10851  011068  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 10852  01106C  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update+1
 10853  011070  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+2
 10854  011074  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+3
 10855  011078  0E05               	movlw	5
 10856  01107A  D005               	goto	u4670
 10857  01107C                     u4675:
 10858  01107C  90D8               	bcf	status,0,c
 10859  01107E  33B4               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10860  011080  33B3               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10861  011082  33B2               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10862  011084  33B1               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10863  011086                     u4670:
 10864  011086  2EE8               	decfsz	wreg,f,c
 10865  011088  D7F9               	goto	u4675
 10866  01108A  EE20 F005          	lfsr	2,5
 10867  01108E  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10868  011090  26D9               	addwf	fsr2l,f,c
 10869  011092  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10870  011094  22DA               	addwfc	fsr2h,f,c
 10871  011096  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 10872  011098  5EDE               	subwf	postinc2,f,c
 10873  01109A  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10874  01109C  5ADE               	subwfb	postinc2,f,c
 10875  01109E  51B3               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10876  0110A0  5ADE               	subwfb	postinc2,f,c
 10877  0110A2  51B4               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10878  0110A4  5ADE               	subwfb	postinc2,f,c
 10879                           
 10880                           ;mtouch_button.c: 490: button->baseline += button->reading;
 10881  0110A6  EE20 F003          	lfsr	2,3
 10882  0110AA  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10883  0110AC  26D9               	addwf	fsr2l,f,c
 10884  0110AE  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10885  0110B0  22DA               	addwfc	fsr2h,f,c
 10886  0110B2  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 10887  0110B6  CFDD F0B2          	movff	postdec2,??_Button_Baseline_Update+1
 10888  0110BA  EE20 F005          	lfsr	2,5
 10889  0110BE  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10890  0110C0  26D9               	addwf	fsr2l,f,c
 10891  0110C2  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10892  0110C4  22DA               	addwfc	fsr2h,f,c
 10893  0110C6  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 10894  0110C8  26DE               	addwf	postinc2,f,c
 10895  0110CA  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10896  0110CC  22DE               	addwfc	postinc2,f,c
 10897  0110CE  0E00               	movlw	0
 10898  0110D0  22DE               	addwfc	postinc2,f,c
 10899  0110D2  22DE               	addwfc	postinc2,f,c
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;mtouch_button.c: 491: GIE = (uint8_t)1;
 10903  0110D4  8EF2               	bsf	intcon,7,c	;volatile
 10904                           
 10905                           ;mtouch_button.c: 492: }
 10906  0110D6  0012               	return	
 10907  0110D8                     l875:
 10908                           
 10909                           ;mtouch_button.c: 493: else
 10910                           ;mtouch_button.c: 494: {
 10911                           ;mtouch_button.c: 495: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10912                           
 10913                           ; BSR set to: 0
 10914  0110D8  0100               	movlb	0	; () banked
 10915  0110DA  EE20 F005          	lfsr	2,5
 10916  0110DE  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10917  0110E0  26D9               	addwf	fsr2l,f,c
 10918  0110E2  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10919  0110E4  22DA               	addwfc	fsr2h,f,c
 10920  0110E6  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 10921  0110EA  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update+1
 10922  0110EE  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+2
 10923  0110F2  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+3
 10924  0110F6  0E05               	movlw	5
 10925  0110F8  D005               	goto	u4680
 10926  0110FA                     u4685:
 10927  0110FA  90D8               	bcf	status,0,c
 10928  0110FC  33B4               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10929  0110FE  33B3               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10930  011100  33B2               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10931  011102  33B1               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10932  011104                     u4680:
 10933  011104  2EE8               	decfsz	wreg,f,c
 10934  011106  D7F9               	goto	u4685
 10935  011108  EE20 F005          	lfsr	2,5
 10936  01110C  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10937  01110E  26D9               	addwf	fsr2l,f,c
 10938  011110  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10939  011112  22DA               	addwfc	fsr2h,f,c
 10940  011114  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 10941  011116  5EDE               	subwf	postinc2,f,c
 10942  011118  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10943  01111A  5ADE               	subwfb	postinc2,f,c
 10944  01111C  51B3               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10945  01111E  5ADE               	subwfb	postinc2,f,c
 10946  011120  51B4               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10947  011122  5ADE               	subwfb	postinc2,f,c
 10948                           
 10949                           ;mtouch_button.c: 496: button->baseline += button->reading;
 10950  011124  EE20 F003          	lfsr	2,3
 10951  011128  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10952  01112A  26D9               	addwf	fsr2l,f,c
 10953  01112C  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10954  01112E  22DA               	addwfc	fsr2h,f,c
 10955  011130  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 10956  011134  CFDD F0B2          	movff	postdec2,??_Button_Baseline_Update+1
 10957  011138  EE20 F005          	lfsr	2,5
 10958  01113C  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 10959  01113E  26D9               	addwf	fsr2l,f,c
 10960  011140  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10961  011142  22DA               	addwfc	fsr2h,f,c
 10962  011144  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 10963  011146  26DE               	addwf	postinc2,f,c
 10964  011148  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10965  01114A  22DE               	addwfc	postinc2,f,c
 10966  01114C  0E00               	movlw	0
 10967  01114E  22DE               	addwfc	postinc2,f,c
 10968  011150  22DE               	addwfc	postinc2,f,c
 10969  011152  0012               	return	
 10970  011154                     __end_of_Button_Baseline_Update:
 10971                           	opt stack 0
 10972                           tosu	equ	0xFFF
 10973                           tosh	equ	0xFFE
 10974                           tosl	equ	0xFFD
 10975                           pclath	equ	0xFFA
 10976                           tblptru	equ	0xFF8
 10977                           tblptrh	equ	0xFF7
 10978                           tblptrl	equ	0xFF6
 10979                           tablat	equ	0xFF5
 10980                           prodh	equ	0xFF4
 10981                           prodl	equ	0xFF3
 10982                           intcon	equ	0xFF2
 10983                           postinc0	equ	0xFEE
 10984                           wreg	equ	0xFE8
 10985                           indf1	equ	0xFE7
 10986                           postinc1	equ	0xFE6
 10987                           postdec1	equ	0xFE5
 10988                           fsr1h	equ	0xFE2
 10989                           fsr1l	equ	0xFE1
 10990                           indf2	equ	0xFDF
 10991                           postinc2	equ	0xFDE
 10992                           postdec2	equ	0xFDD
 10993                           plusw2	equ	0xFDB
 10994                           fsr2h	equ	0xFDA
 10995                           fsr2l	equ	0xFD9
 10996                           status	equ	0xFD8
 10997                           
 10998 ;; *************** function _Button_Baseline_Initialize *****************
 10999 ;; Defined at:
 11000 ;;		line 478 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  button          2    3[BANK0 ] PTR struct .
 11003 ;;		 -> mtouch_button(80), 
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;		None
 11006 ;; Return value:  Size  Location     Type
 11007 ;;                  1    wreg      void 
 11008 ;; Registers used:
 11009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11010 ;; Tracked objects:
 11011 ;;		On entry : 0/0
 11012 ;;		On exit  : 0/0
 11013 ;;		Unchanged: 0/0
 11014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11017 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11018 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11019 ;;Total ram usage:        6 bytes
 11020 ;; Hardware stack levels used:    1
 11021 ;; Hardware stack levels required when called:    6
 11022 ;; This function calls:
 11023 ;;		_MTOUCH_Sensor_RawSample_Get
 11024 ;; This function is called by:
 11025 ;;		_Button_State_Initializing
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           	psect	text66
 11030  011A06                     __ptext66:
 11031                           	opt stack 0
 11032  011A06                     _Button_Baseline_Initialize:
 11033                           	opt stack 20
 11034                           
 11035                           ;mtouch_button.c: 480: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;incstack = 0
 11039  011A06  0100               	movlb	0	; () banked
 11040  011A08  EE20 F001          	lfsr	2,1
 11041  011A0C  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11042  011A0E  26D9               	addwf	fsr2l,f,c
 11043  011A10  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11044  011A12  22DA               	addwfc	fsr2h,f,c
 11045  011A14  50DF               	movf	indf2,w,c
 11046  011A16  ECC6  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11047  011A1A  0100               	movlb	0	; () banked
 11048  011A1C  51AF               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 11049  011A1E  6FB4               	movwf	??_Button_Baseline_Initialize& (0+255),b
 11050  011A20  51B0               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 11051  011A22  6FB5               	movwf	(??_Button_Baseline_Initialize+1)& (0+255),b
 11052  011A24  6BB6               	clrf	(??_Button_Baseline_Initialize+2)& (0+255),b
 11053  011A26  6BB7               	clrf	(??_Button_Baseline_Initialize+3)& (0+255),b
 11054  011A28  EE20 F005          	lfsr	2,5
 11055  011A2C  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11056  011A2E  26D9               	addwf	fsr2l,f,c
 11057  011A30  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11058  011A32  22DA               	addwfc	fsr2h,f,c
 11059  011A34  C0B4  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
 11060  011A38  C0B5  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
 11061  011A3C  C0B6  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
 11062  011A40  C0B7  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;mtouch_button.c: 481: button->baseline <<= ((uint8_t)4);
 11066  011A44  EE20 F005          	lfsr	2,5
 11067  011A48  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11068  011A4A  26D9               	addwf	fsr2l,f,c
 11069  011A4C  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11070  011A4E  22DA               	addwfc	fsr2h,f,c
 11071  011A50  0E04               	movlw	4
 11072  011A52                     u4655:
 11073  011A52  90D8               	bcf	status,0,c
 11074  011A54  36DE               	rlcf	postinc2,f,c
 11075  011A56  36DE               	rlcf	postinc2,f,c
 11076  011A58  36DE               	rlcf	postinc2,f,c
 11077  011A5A  36DD               	rlcf	postdec2,f,c
 11078  011A5C  06D9               	decf	fsr2l,f,c
 11079  011A5E  06D9               	decf	fsr2l,f,c
 11080  011A60  2EE8               	decfsz	wreg,f,c
 11081  011A62  D7F7               	goto	u4655
 11082                           
 11083                           ; BSR set to: 0
 11084  011A64  0012               	return		;funcret
 11085  011A66                     __end_of_Button_Baseline_Initialize:
 11086                           	opt stack 0
 11087                           tosu	equ	0xFFF
 11088                           tosh	equ	0xFFE
 11089                           tosl	equ	0xFFD
 11090                           pclath	equ	0xFFA
 11091                           tblptru	equ	0xFF8
 11092                           tblptrh	equ	0xFF7
 11093                           tblptrl	equ	0xFF6
 11094                           tablat	equ	0xFF5
 11095                           prodh	equ	0xFF4
 11096                           prodl	equ	0xFF3
 11097                           intcon	equ	0xFF2
 11098                           postinc0	equ	0xFEE
 11099                           wreg	equ	0xFE8
 11100                           indf1	equ	0xFE7
 11101                           postinc1	equ	0xFE6
 11102                           postdec1	equ	0xFE5
 11103                           fsr1h	equ	0xFE2
 11104                           fsr1l	equ	0xFE1
 11105                           indf2	equ	0xFDF
 11106                           postinc2	equ	0xFDE
 11107                           postdec2	equ	0xFDD
 11108                           plusw2	equ	0xFDB
 11109                           fsr2h	equ	0xFDA
 11110                           fsr2l	equ	0xFD9
 11111                           status	equ	0xFD8
 11112                           
 11113 ;; *************** function _Button_Reading_Update *****************
 11114 ;; Defined at:
 11115 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;  button          2    7[BANK0 ] PTR struct .
 11118 ;;		 -> mtouch_button(80), 
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;		None
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      void 
 11123 ;; Registers used:
 11124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11134 ;;Total ram usage:        2 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    7
 11137 ;; This function calls:
 11138 ;;		_Button_Reading_Update_Helper
 11139 ;; This function is called by:
 11140 ;;		_Button_Service
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           	psect	text67
 11145  01230A                     __ptext67:
 11146                           	opt stack 0
 11147  01230A                     _Button_Reading_Update:
 11148                           	opt stack 20
 11149                           
 11150                           ;mtouch_button.c: 453: if (GIE == (uint8_t) 1)
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;incstack = 0
 11154  01230A  AEF2               	btfss	intcon,7,c	;volatile
 11155  01230C  D009               	goto	l862
 11156                           
 11157                           ;mtouch_button.c: 454: {
 11158                           ;mtouch_button.c: 455: GIE = (uint8_t) 0;
 11159  01230E  9EF2               	bcf	intcon,7,c	;volatile
 11160                           
 11161                           ;mtouch_button.c: 456: Button_Reading_Update_Helper(button);
 11162  012310  C0B6  F0B2         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 11163  012314  C0B7  F0B3         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 11164  012318  EC12  F08B         	call	_Button_Reading_Update_Helper	;wreg free
 11165                           
 11166                           ;mtouch_button.c: 457: GIE = (uint8_t) 1;
 11167  01231C  8EF2               	bsf	intcon,7,c	;volatile
 11168                           
 11169                           ;mtouch_button.c: 458: }
 11170  01231E  0012               	return	
 11171  012320                     l862:
 11172                           
 11173                           ;mtouch_button.c: 459: else
 11174                           ;mtouch_button.c: 460: {
 11175                           ;mtouch_button.c: 461: Button_Reading_Update_Helper(button);
 11176  012320  C0B6  F0B2         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 11177  012324  C0B7  F0B3         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 11178  012328  EC12  F08B         	call	_Button_Reading_Update_Helper	;wreg free
 11179  01232C  0012               	return	
 11180  01232E                     __end_of_Button_Reading_Update:
 11181                           	opt stack 0
 11182                           tosu	equ	0xFFF
 11183                           tosh	equ	0xFFE
 11184                           tosl	equ	0xFFD
 11185                           pclath	equ	0xFFA
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           prodh	equ	0xFF4
 11191                           prodl	equ	0xFF3
 11192                           intcon	equ	0xFF2
 11193                           postinc0	equ	0xFEE
 11194                           wreg	equ	0xFE8
 11195                           indf1	equ	0xFE7
 11196                           postinc1	equ	0xFE6
 11197                           postdec1	equ	0xFE5
 11198                           fsr1h	equ	0xFE2
 11199                           fsr1l	equ	0xFE1
 11200                           indf2	equ	0xFDF
 11201                           postinc2	equ	0xFDE
 11202                           postdec2	equ	0xFDD
 11203                           plusw2	equ	0xFDB
 11204                           fsr2h	equ	0xFDA
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _Button_Reading_Update_Helper *****************
 11209 ;; Defined at:
 11210 ;;		line 465 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;  button          2    3[BANK0 ] PTR struct .
 11213 ;;		 -> mtouch_button(80), 
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;		None
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  1    wreg      void 
 11218 ;; Registers used:
 11219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11228 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11229 ;;Total ram usage:        4 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    6
 11232 ;; This function calls:
 11233 ;;		_MTOUCH_Sensor_RawSample_Get
 11234 ;; This function is called by:
 11235 ;;		_Button_Reading_Update
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text68
 11240  011624                     __ptext68:
 11241                           	opt stack 0
 11242  011624                     _Button_Reading_Update_Helper:
 11243                           	opt stack 20
 11244                           
 11245                           ;mtouch_button.c: 467: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 11246                           
 11247                           ;incstack = 0
 11248  011624  0100               	movlb	0	; () banked
 11249  011626  EE20 F002          	lfsr	2,2
 11250  01162A  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11251  01162C  26D9               	addwf	fsr2l,f,c
 11252  01162E  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11253  011630  22DA               	addwfc	fsr2h,f,c
 11254  011632  50DF               	movf	indf2,w,c
 11255  011634  B4D8               	btfsc	status,2,c
 11256  011636  D035               	goto	l867
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;mtouch_button.c: 468: {
 11260                           ;mtouch_button.c: 469: button->reading -= button->reading>>(uint8_t)2;
 11261  011638  EE20 F003          	lfsr	2,3
 11262  01163C  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11263  01163E  26D9               	addwf	fsr2l,f,c
 11264  011640  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11265  011642  22DA               	addwfc	fsr2h,f,c
 11266  011644  CFDE F0B4          	movff	postinc2,??_Button_Reading_Update_Helper
 11267  011648  CFDD F0B5          	movff	postdec2,??_Button_Reading_Update_Helper+1
 11268  01164C  90D8               	bcf	status,0,c
 11269  01164E  33B5               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11270  011650  33B4               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11271  011652  90D8               	bcf	status,0,c
 11272  011654  33B5               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11273  011656  33B4               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11274  011658  EE20 F003          	lfsr	2,3
 11275  01165C  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11276  01165E  26D9               	addwf	fsr2l,f,c
 11277  011660  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11278  011662  22DA               	addwfc	fsr2h,f,c
 11279  011664  51B4               	movf	??_Button_Reading_Update_Helper& (0+255),w,b
 11280  011666  5EDE               	subwf	postinc2,f,c
 11281  011668  51B5               	movf	(??_Button_Reading_Update_Helper+1)& (0+255),w,b
 11282  01166A  5ADD               	subwfb	postdec2,f,c
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;mtouch_button.c: 470: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
 11286  01166C  EE20 F001          	lfsr	2,1
 11287  011670  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11288  011672  26D9               	addwf	fsr2l,f,c
 11289  011674  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11290  011676  22DA               	addwfc	fsr2h,f,c
 11291  011678  50DF               	movf	indf2,w,c
 11292  01167A  ECC6  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11293  01167E  0100               	movlb	0	; () banked
 11294  011680  90D8               	bcf	status,0,c
 11295  011682  33B0               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11296  011684  33AF               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11297  011686  90D8               	bcf	status,0,c
 11298  011688  33B0               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11299  01168A  33AF               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11300  01168C  EE20 F003          	lfsr	2,3
 11301  011690  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11302  011692  26D9               	addwf	fsr2l,f,c
 11303  011694  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11304  011696  22DA               	addwfc	fsr2h,f,c
 11305  011698  51AF               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 11306  01169A  26DE               	addwf	postinc2,f,c
 11307  01169C  51B0               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 11308  01169E  22DD               	addwfc	postdec2,f,c
 11309                           
 11310                           ;mtouch_button.c: 471: }
 11311  0116A0  0012               	return	
 11312  0116A2                     l867:
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;mtouch_button.c: 472: else
 11316                           ;mtouch_button.c: 473: {
 11317                           ;mtouch_button.c: 474: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11318                           
 11319                           ; BSR set to: 0
 11320  0116A2  EE20 F001          	lfsr	2,1
 11321  0116A6  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11322  0116A8  26D9               	addwf	fsr2l,f,c
 11323  0116AA  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11324  0116AC  22DA               	addwfc	fsr2h,f,c
 11325  0116AE  50DF               	movf	indf2,w,c
 11326  0116B0  ECC6  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11327  0116B4  0100               	movlb	0	; () banked
 11328  0116B6  EE20 F003          	lfsr	2,3
 11329  0116BA  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11330  0116BC  26D9               	addwf	fsr2l,f,c
 11331  0116BE  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11332  0116C0  22DA               	addwfc	fsr2h,f,c
 11333  0116C2  C0AF  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
 11334  0116C6  C0B0  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
 11335  0116CA  0012               	return	
 11336  0116CC                     __end_of_Button_Reading_Update_Helper:
 11337                           	opt stack 0
 11338                           tosu	equ	0xFFF
 11339                           tosh	equ	0xFFE
 11340                           tosl	equ	0xFFD
 11341                           pclath	equ	0xFFA
 11342                           tblptru	equ	0xFF8
 11343                           tblptrh	equ	0xFF7
 11344                           tblptrl	equ	0xFF6
 11345                           tablat	equ	0xFF5
 11346                           prodh	equ	0xFF4
 11347                           prodl	equ	0xFF3
 11348                           intcon	equ	0xFF2
 11349                           postinc0	equ	0xFEE
 11350                           wreg	equ	0xFE8
 11351                           indf1	equ	0xFE7
 11352                           postinc1	equ	0xFE6
 11353                           postdec1	equ	0xFE5
 11354                           fsr1h	equ	0xFE2
 11355                           fsr1l	equ	0xFE1
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           plusw2	equ	0xFDB
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11365 ;; Defined at:
 11366 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;  name            1    wreg     enum E17513
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  name            1    2[BANK0 ] enum E17513
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  2    0[BANK0 ] unsigned int 
 11373 ;; Registers used:
 11374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11384 ;;Total ram usage:        3 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    5
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_Button_Reading_Update_Helper
 11391 ;;		_Button_Baseline_Initialize
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text69
 11396  011F8C                     __ptext69:
 11397                           	opt stack 0
 11398  011F8C                     _MTOUCH_Sensor_RawSample_Get:
 11399                           	opt stack 20
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;incstack = 0
 11403                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11404  011F8C  0100               	movlb	0	; () banked
 11405  011F8E  6FB1               	movwf	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11406                           
 11407                           ;mtouch_sensor.c: 534: if (name < 5)
 11408  011F90  0E05               	movlw	5
 11409  011F92  0100               	movlb	0	; () banked
 11410  011F94  61B1               	cpfslt	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11411  011F96  D011               	goto	l570
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;mtouch_sensor.c: 535: {
 11415                           ;mtouch_sensor.c: 536: return mtouch_sensor[name].rawSample;
 11416  011F98  51B1               	movf	MTOUCH_Sensor_RawSample_Get@name& (0+255),w,b
 11417  011F9A  0D09               	mullw	9
 11418  011F9C  0E06               	movlw	6
 11419  011F9E  26F3               	addwf	prodl,f,c
 11420  011FA0  0E00               	movlw	0
 11421  011FA2  22F4               	addwfc	prodh,f,c
 11422  011FA4  0E82               	movlw	low _mtouch_sensor
 11423  011FA6  24F3               	addwf	prodl,w,c
 11424  011FA8  6ED9               	movwf	fsr2l,c
 11425  011FAA  0E00               	movlw	high _mtouch_sensor
 11426  011FAC  20F4               	addwfc	prodh,w,c
 11427  011FAE  6EDA               	movwf	fsr2h,c
 11428  011FB0  CFDE F0AF          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
 11429  011FB4  CFDD F0B0          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;mtouch_sensor.c: 537: }
 11433                           
 11434                           ; BSR set to: 0
 11435  011FB8  0012               	return	
 11436  011FBA                     l570:
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;mtouch_sensor.c: 538: else
 11440                           ;mtouch_sensor.c: 539: return (mtouch_sensor_sample_t)0;
 11441                           
 11442                           ; BSR set to: 0
 11443  011FBA  0E00               	movlw	0
 11444  011FBC  6FB0               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),b
 11445  011FBE  0E00               	movlw	0
 11446  011FC0  6FAF               	movwf	?_MTOUCH_Sensor_RawSample_Get& (0+255),b
 11447                           
 11448                           ; BSR set to: 0
 11449  011FC2  0012               	return	
 11450  011FC4                     __end_of_MTOUCH_Sensor_RawSample_Get:
 11451                           	opt stack 0
 11452                           tosu	equ	0xFFF
 11453                           tosh	equ	0xFFE
 11454                           tosl	equ	0xFFD
 11455                           pclath	equ	0xFFA
 11456                           tblptru	equ	0xFF8
 11457                           tblptrh	equ	0xFF7
 11458                           tblptrl	equ	0xFF6
 11459                           tablat	equ	0xFF5
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           intcon	equ	0xFF2
 11463                           postinc0	equ	0xFEE
 11464                           wreg	equ	0xFE8
 11465                           indf1	equ	0xFE7
 11466                           postinc1	equ	0xFE6
 11467                           postdec1	equ	0xFE5
 11468                           fsr1h	equ	0xFE2
 11469                           fsr1l	equ	0xFE1
 11470                           indf2	equ	0xFDF
 11471                           postinc2	equ	0xFDE
 11472                           postdec2	equ	0xFDD
 11473                           plusw2	equ	0xFDB
 11474                           fsr2h	equ	0xFDA
 11475                           fsr2l	equ	0xFD9
 11476                           status	equ	0xFD8
 11477                           
 11478 ;; *************** function _Button_Deviation_Update *****************
 11479 ;; Defined at:
 11480 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;  button          2    0[BANK0 ] PTR struct .
 11483 ;;		 -> mtouch_button(80), 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  deviation       4    8[BANK0 ] long 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11495 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11497 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11498 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11499 ;;Total ram usage:       12 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    5
 11502 ;; This function calls:
 11503 ;;		Nothing
 11504 ;; This function is called by:
 11505 ;;		_Button_Service
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text70
 11510  010F42                     __ptext70:
 11511                           	opt stack 0
 11512  010F42                     _Button_Deviation_Update:
 11513                           	opt stack 22
 11514                           
 11515                           ;mtouch_button.c: 404: int32_t deviation;
 11516                           ;mtouch_button.c: 406: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;incstack = 0
 11520  010F42  0100               	movlb	0	; () banked
 11521  010F44  EE20 F005          	lfsr	2,5
 11522  010F48  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 11523  010F4A  26D9               	addwf	fsr2l,f,c
 11524  010F4C  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11525  010F4E  22DA               	addwfc	fsr2h,f,c
 11526  010F50  CFDE F0B1          	movff	postinc2,??_Button_Deviation_Update
 11527  010F54  CFDE F0B2          	movff	postinc2,??_Button_Deviation_Update+1
 11528  010F58  CFDE F0B3          	movff	postinc2,??_Button_Deviation_Update+2
 11529  010F5C  CFDE F0B4          	movff	postinc2,??_Button_Deviation_Update+3
 11530  010F60  0E05               	movlw	5
 11531  010F62  D005               	goto	u5040
 11532  010F64                     u5045:
 11533  010F64  90D8               	bcf	status,0,c
 11534  010F66  33B4               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11535  010F68  33B3               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11536  010F6A  33B2               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11537  010F6C  33B1               	rrcf	??_Button_Deviation_Update& (0+255),f,b
 11538  010F6E                     u5040:
 11539  010F6E  2EE8               	decfsz	wreg,f,c
 11540  010F70  D7F9               	goto	u5045
 11541  010F72  1FB1               	comf	??_Button_Deviation_Update& (0+255),f,b
 11542  010F74  1FB2               	comf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11543  010F76  1FB3               	comf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11544  010F78  1FB4               	comf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11545  010F7A  2BB1               	incf	??_Button_Deviation_Update& (0+255),f,b
 11546  010F7C  0E00               	movlw	0
 11547  010F7E  23B2               	addwfc	(??_Button_Deviation_Update+1)& (0+255),f,b
 11548  010F80  23B3               	addwfc	(??_Button_Deviation_Update+2)& (0+255),f,b
 11549  010F82  23B4               	addwfc	(??_Button_Deviation_Update+3)& (0+255),f,b
 11550  010F84  EE20 F003          	lfsr	2,3
 11551  010F88  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 11552  010F8A  26D9               	addwf	fsr2l,f,c
 11553  010F8C  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11554  010F8E  22DA               	addwfc	fsr2h,f,c
 11555  010F90  CFDE F0B5          	movff	postinc2,??_Button_Deviation_Update+4
 11556  010F94  CFDD F0B6          	movff	postdec2,??_Button_Deviation_Update+5
 11557  010F98  51B5               	movf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11558  010F9A  25B1               	addwf	??_Button_Deviation_Update& (0+255),w,b
 11559  010F9C  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11560  010F9E  51B6               	movf	(??_Button_Deviation_Update+5)& (0+255),w,b
 11561  010FA0  21B2               	addwfc	(??_Button_Deviation_Update+1)& (0+255),w,b
 11562  010FA2  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11563  010FA4  0E00               	movlw	0
 11564  010FA6  21B3               	addwfc	(??_Button_Deviation_Update+2)& (0+255),w,b
 11565  010FA8  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11566  010FAA  0E00               	movlw	0
 11567  010FAC  21B4               	addwfc	(??_Button_Deviation_Update+3)& (0+255),w,b
 11568  010FAE  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11569                           
 11570                           ;mtouch_button.c: 409: deviation = deviation >> (button->scaling);
 11571  010FB0  EE20 F00F          	lfsr	2,15
 11572  010FB4  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 11573  010FB6  26D9               	addwf	fsr2l,f,c
 11574  010FB8  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11575  010FBA  22DA               	addwfc	fsr2h,f,c
 11576  010FBC  50DF               	movf	indf2,w,c
 11577  010FBE  6FB1               	movwf	??_Button_Deviation_Update& (0+255),b
 11578  010FC0  C0B7  F0B2         	movff	Button_Deviation_Update@deviation,??_Button_Deviation_Update+1
 11579  010FC4  C0B8  F0B3         	movff	Button_Deviation_Update@deviation+1,??_Button_Deviation_Update+2
 11580  010FC8  C0B9  F0B4         	movff	Button_Deviation_Update@deviation+2,??_Button_Deviation_Update+3
 11581  010FCC  C0BA  F0B5         	movff	Button_Deviation_Update@deviation+3,??_Button_Deviation_Update+4
 11582  010FD0                     u5055:
 11583  010FD0  67B1               	tstfsz	??_Button_Deviation_Update& (0+255),b
 11584  010FD2  D001               	goto	u5056
 11585  010FD4  D007               	goto	u5057
 11586  010FD6                     u5056:
 11587  010FD6  35B5               	rlcf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11588  010FD8  33B5               	rrcf	(??_Button_Deviation_Update+4)& (0+255),f,b
 11589  010FDA  33B4               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11590  010FDC  33B3               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11591  010FDE  33B2               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11592  010FE0  2FB1               	decfsz	??_Button_Deviation_Update& (0+255),f,b
 11593  010FE2  D7F6               	goto	u5055
 11594  010FE4                     u5057:
 11595  010FE4  C0B2  F0B7         	movff	??_Button_Deviation_Update+1,Button_Deviation_Update@deviation
 11596  010FE8  C0B3  F0B8         	movff	??_Button_Deviation_Update+2,Button_Deviation_Update@deviation+1
 11597  010FEC  C0B4  F0B9         	movff	??_Button_Deviation_Update+3,Button_Deviation_Update@deviation+2
 11598  010FF0  C0B5  F0BA         	movff	??_Button_Deviation_Update+4,Button_Deviation_Update@deviation+3
 11599                           
 11600                           ;mtouch_button.c: 412: if (deviation > ((127)))
 11601  010FF4  0100               	movlb	0	; () banked
 11602  010FF6  BFBA               	btfsc	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11603  010FF8  D010               	goto	l846
 11604  010FFA  51BA               	movf	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11605  010FFC  11B9               	iorwf	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11606  010FFE  11B8               	iorwf	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11607  011000  E104               	bnz	u5060
 11608  011002  0E80               	movlw	128
 11609  011004  5DB7               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11610  011006  A0D8               	btfss	status,0,c
 11611  011008  D008               	goto	l846
 11612  01100A                     u5060:
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;mtouch_button.c: 413: {
 11616                           ;mtouch_button.c: 414: deviation = ((127));
 11617  01100A  0E7F               	movlw	127
 11618  01100C  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11619  01100E  0E00               	movlw	0
 11620  011010  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11621  011012  0E00               	movlw	0
 11622  011014  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11623  011016  0E00               	movlw	0
 11624  011018  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11625  01101A                     l846:
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;mtouch_button.c: 415: }
 11629                           ;mtouch_button.c: 416: if (deviation < ((-128)))
 11630                           
 11631                           ; BSR set to: 0
 11632  01101A  AFBA               	btfss	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11633  01101C  D012               	goto	l847
 11634  01101E  0E80               	movlw	128
 11635  011020  5DB7               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11636  011022  0EFF               	movlw	255
 11637  011024  59B8               	subwfb	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11638  011026  0EFF               	movlw	255
 11639  011028  59B9               	subwfb	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11640  01102A  0EFF               	movlw	255
 11641  01102C  59BA               	subwfb	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11642  01102E  B0D8               	btfsc	status,0,c
 11643  011030  D008               	goto	l847
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;mtouch_button.c: 417: {
 11647                           ;mtouch_button.c: 418: deviation = ((-128));
 11648  011032  0E80               	movlw	128
 11649  011034  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11650  011036  0EFF               	movlw	255
 11651  011038  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11652  01103A  0EFF               	movlw	255
 11653  01103C  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11654  01103E  0EFF               	movlw	255
 11655  011040  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11656  011042                     l847:
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;mtouch_button.c: 419: }
 11660                           ;mtouch_button.c: 421: button->deviation = (mtouch_button_deviation_t)deviation;
 11661                           
 11662                           ; BSR set to: 0
 11663  011042  EE20 F009          	lfsr	2,9
 11664  011046  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 11665  011048  26D9               	addwf	fsr2l,f,c
 11666  01104A  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11667  01104C  22DA               	addwfc	fsr2h,f,c
 11668  01104E  C0B7  FFDF         	movff	Button_Deviation_Update@deviation,indf2
 11669                           
 11670                           ; BSR set to: 0
 11671  011052  0012               	return		;funcret
 11672  011054                     __end_of_Button_Deviation_Update:
 11673                           	opt stack 0
 11674                           tosu	equ	0xFFF
 11675                           tosh	equ	0xFFE
 11676                           tosl	equ	0xFFD
 11677                           pclath	equ	0xFFA
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           postinc0	equ	0xFEE
 11686                           wreg	equ	0xFE8
 11687                           indf1	equ	0xFE7
 11688                           postinc1	equ	0xFE6
 11689                           postdec1	equ	0xFE5
 11690                           fsr1h	equ	0xFE2
 11691                           fsr1l	equ	0xFE1
 11692                           indf2	equ	0xFDF
 11693                           postinc2	equ	0xFDE
 11694                           postdec2	equ	0xFDD
 11695                           plusw2	equ	0xFDB
 11696                           fsr2h	equ	0xFDA
 11697                           fsr2l	equ	0xFD9
 11698                           status	equ	0xFD8
 11699                           
 11700 ;; *************** function _MTOUCH_Button_State_Get *****************
 11701 ;; Defined at:
 11702 ;;		line 513 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;  name            1    wreg     enum E17454
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;  name            1    0[BANK0 ] enum E17454
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1    wreg      unsigned char 
 11709 ;; Registers used:
 11710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11720 ;;Total ram usage:        1 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    5
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;;		_main
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text71
 11731  012156                     __ptext71:
 11732                           	opt stack 0
 11733  012156                     _MTOUCH_Button_State_Get:
 11734                           	opt stack 25
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;incstack = 0
 11738                           ;MTOUCH_Button_State_Get@name stored from wreg
 11739  012156  0100               	movlb	0	; () banked
 11740  012158  6FAF               	movwf	MTOUCH_Button_State_Get@name& (0+255),b
 11741                           
 11742                           ;mtouch_button.c: 515: if(name < 5)
 11743  01215A  0E05               	movlw	5
 11744  01215C  0100               	movlb	0	; () banked
 11745  01215E  61AF               	cpfslt	MTOUCH_Button_State_Get@name& (0+255),b
 11746  012160  D00E               	goto	l888
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;mtouch_button.c: 516: return (uint8_t)mtouch_button[name].state;
 11750  012162  51AF               	movf	MTOUCH_Button_State_Get@name& (0+255),w,b
 11751  012164  0D10               	mullw	16
 11752  012166  0E02               	movlw	2
 11753  012168  26F3               	addwf	prodl,f,c
 11754  01216A  0E00               	movlw	0
 11755  01216C  22F4               	addwfc	prodh,f,c
 11756  01216E  0E40               	movlw	low _mtouch_button
 11757  012170  24F3               	addwf	prodl,w,c
 11758  012172  6ED9               	movwf	fsr2l,c
 11759  012174  0E01               	movlw	high _mtouch_button
 11760  012176  20F4               	addwfc	prodh,w,c
 11761  012178  6EDA               	movwf	fsr2h,c
 11762  01217A  50DF               	movf	indf2,w,c
 11763                           
 11764                           ; BSR set to: 0
 11765                           
 11766                           ; BSR set to: 0
 11767  01217C  0012               	return	
 11768  01217E                     l888:
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;mtouch_button.c: 517: else
 11772                           ;mtouch_button.c: 518: return 0;
 11773                           
 11774                           ; BSR set to: 0
 11775  01217E  0E00               	movlw	0
 11776                           
 11777                           ; BSR set to: 0
 11778  012180  0012               	return	
 11779  012182                     __end_of_MTOUCH_Button_State_Get:
 11780                           	opt stack 0
 11781                           tosu	equ	0xFFF
 11782                           tosh	equ	0xFFE
 11783                           tosl	equ	0xFFD
 11784                           pclath	equ	0xFFA
 11785                           tblptru	equ	0xFF8
 11786                           tblptrh	equ	0xFF7
 11787                           tblptrl	equ	0xFF6
 11788                           tablat	equ	0xFF5
 11789                           prodh	equ	0xFF4
 11790                           prodl	equ	0xFF3
 11791                           intcon	equ	0xFF2
 11792                           postinc0	equ	0xFEE
 11793                           wreg	equ	0xFE8
 11794                           indf1	equ	0xFE7
 11795                           postinc1	equ	0xFE6
 11796                           postdec1	equ	0xFE5
 11797                           fsr1h	equ	0xFE2
 11798                           fsr1l	equ	0xFE1
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           plusw2	equ	0xFDB
 11803                           fsr2h	equ	0xFDA
 11804                           fsr2l	equ	0xFD9
 11805                           status	equ	0xFD8
 11806                           
 11807 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 11808 ;; Defined at:
 11809 ;;		line 74 in file "mcc_generated_files/interrupt_manager.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      void 
 11816 ;; Registers used:
 11817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11825 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11826 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11827 ;;Total ram usage:       18 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    4
 11830 ;; This function calls:
 11831 ;;		Absolute function
 11832 ;;		_ADCC_ThresholdISR_mTouch
 11833 ;;		_EUSART2_Receive_ISR
 11834 ;;		_EUSART2_Transmit_ISR
 11835 ;;		_PIN_MANAGER_IOC
 11836 ;; This function is called by:
 11837 ;;		Interrupt level 2
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           	psect	intcode
 11842  000008                     __pintcode:
 11843                           	opt stack 0
 11844  000008                     _INTERRUPT_InterruptManagerHigh:
 11845                           	opt stack 20
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;incstack = 0
 11849  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11850  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 11851  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 11852  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 11853  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 11854  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 11855  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 11856  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 11857  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 11858  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 11859  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 11860  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 11861  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 11862  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 11863  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 11864  000042  C050  F025         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 11865  000046  C051  F026         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 11866  00004A  C052  F027         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 11867  00004E  C053  F028         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 11868                           
 11869                           ;interrupt_manager.c: 77: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 11870  000052  010E               	movlb	14	; () banked
 11871  000054  BD2C               	btfsc	44,6,b	;volatile
 11872                           
 11873                           ; BSR set to: 14
 11874  000056  AD36               	btfss	54,6,b	;volatile
 11875  000058  D00B               	goto	i2l149
 11876                           
 11877                           ; BSR set to: 14
 11878                           ;interrupt_manager.c: 78: {
 11879                           ;interrupt_manager.c: 79: EUSART2_TxDefaultInterruptHandler();
 11880  00005A  D801               	call	i2u428_48
 11881  00005C  D024               	goto	i2l155
 11882  00005E                     i2u428_48:
 11883  00005E  0005               	push	
 11884  000060  6EFA               	movwf	pclath,c
 11885  000062  0100               	movlb	0	; () banked
 11886  000064  51E3               	movf	_EUSART2_TxDefaultInterruptHandler& (0+255),w,b
 11887  000066  6EFD               	movwf	tosl,c
 11888  000068  51E4               	movf	(_EUSART2_TxDefaultInterruptHandler+1)& (0+255),w,b
 11889  00006A  6EFE               	movwf	tosh,c
 11890  00006C  51E5               	movf	(_EUSART2_TxDefaultInterruptHandler+2)& (0+255),w,b
 11891  00006E  D00D               	goto	L4
 11892  000070                     i2l149:
 11893                           
 11894                           ; BSR set to: 14
 11895                           ;interrupt_manager.c: 81: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 11896  000070  BF2C               	btfsc	44,7,b	;volatile
 11897                           
 11898                           ; BSR set to: 14
 11899  000072  AF36               	btfss	54,7,b	;volatile
 11900  000074  D00D               	goto	i2l151
 11901                           
 11902                           ; BSR set to: 14
 11903                           ;interrupt_manager.c: 82: {
 11904                           ;interrupt_manager.c: 83: EUSART2_RxDefaultInterruptHandler();
 11905  000076  D801               	call	i2u431_48
 11906  000078  D016               	goto	i2l155
 11907  00007A                     i2u431_48:
 11908  00007A  0005               	push	
 11909  00007C  6EFA               	movwf	pclath,c
 11910  00007E  0100               	movlb	0	; () banked
 11911  000080  51E0               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
 11912  000082  6EFD               	movwf	tosl,c
 11913  000084  51E1               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
 11914  000086  6EFE               	movwf	tosh,c
 11915  000088  51E2               	movf	(_EUSART2_RxDefaultInterruptHandler+2)& (0+255),w,b
 11916  00008A                     L4:
 11917  00008A  6EFF               	movwf	tosu,c
 11918  00008C  50FA               	movf	pclath,w,c
 11919  00008E  0012               	return		;indir
 11920  000090                     i2l151:
 11921                           
 11922                           ; BSR set to: 14
 11923                           ;interrupt_manager.c: 85: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 11924  000090  B32A               	btfsc	42,1,b	;volatile
 11925                           
 11926                           ; BSR set to: 14
 11927  000092  A334               	btfss	52,1,b	;volatile
 11928  000094  D003               	goto	i2l153
 11929                           
 11930                           ; BSR set to: 14
 11931                           ;interrupt_manager.c: 86: {
 11932                           ;interrupt_manager.c: 87: ADCC_ThresholdISR_mTouch();
 11933  000096  EC77  F092         	call	_ADCC_ThresholdISR_mTouch	;wreg free
 11934                           
 11935                           ;interrupt_manager.c: 88: }
 11936  00009A  D005               	goto	i2l155
 11937  00009C                     i2l153:
 11938                           
 11939                           ; BSR set to: 14
 11940                           ;interrupt_manager.c: 89: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 11941  00009C  B929               	btfsc	41,4,b	;volatile
 11942                           
 11943                           ; BSR set to: 14
 11944  00009E  A933               	btfss	51,4,b	;volatile
 11945  0000A0  D002               	goto	i2l155
 11946                           
 11947                           ; BSR set to: 14
 11948                           ;interrupt_manager.c: 90: {
 11949                           ;interrupt_manager.c: 91: PIN_MANAGER_IOC();
 11950  0000A2  EC61  F092         	call	_PIN_MANAGER_IOC	;wreg free
 11951  0000A6                     i2l155:
 11952                           
 11953                           ;interrupt_manager.c: 93: else
 11954                           ;interrupt_manager.c: 94: {
 11955  0000A6  C028  F053         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 11956  0000AA  C027  F052         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 11957  0000AE  C026  F051         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 11958  0000B2  C025  F050         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 11959  0000B6  C024  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 11960  0000BA  C023  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 11961  0000BE  C022  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 11962  0000C2  C021  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 11963  0000C6  C020  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 11964  0000CA  C01F  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 11965  0000CE  C01E  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 11966  0000D2  C01D  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 11967  0000D6  C01C  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 11968  0000DA  C01B  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 11969  0000DE  C01A  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 11970  0000E2  C019  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 11971  0000E6  C018  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 11972  0000EA  C017  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 11973  0000EE  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11974  0000F0  0011               	retfie		f
 11975  0000F2                     __end_of_INTERRUPT_InterruptManagerHigh:
 11976                           	opt stack 0
 11977                           tosu	equ	0xFFF
 11978                           tosh	equ	0xFFE
 11979                           tosl	equ	0xFFD
 11980                           pclatu	equ	0xFFB
 11981                           pclath	equ	0xFFA
 11982                           tblptru	equ	0xFF8
 11983                           tblptrh	equ	0xFF7
 11984                           tblptrl	equ	0xFF6
 11985                           tablat	equ	0xFF5
 11986                           prodh	equ	0xFF4
 11987                           prodl	equ	0xFF3
 11988                           intcon	equ	0xFF2
 11989                           postinc0	equ	0xFEE
 11990                           fsr0h	equ	0xFEA
 11991                           fsr0l	equ	0xFE9
 11992                           wreg	equ	0xFE8
 11993                           indf1	equ	0xFE7
 11994                           postinc1	equ	0xFE6
 11995                           postdec1	equ	0xFE5
 11996                           fsr1h	equ	0xFE2
 11997                           fsr1l	equ	0xFE1
 11998                           indf2	equ	0xFDF
 11999                           postinc2	equ	0xFDE
 12000                           postdec2	equ	0xFDD
 12001                           plusw2	equ	0xFDB
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function _PIN_MANAGER_IOC *****************
 12007 ;; Defined at:
 12008 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;		None
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;		None
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  1    wreg      void 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12026 ;;Total ram usage:        0 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    2
 12029 ;; This function calls:
 12030 ;;		_IOCBF2_ISR
 12031 ;; This function is called by:
 12032 ;;		_INTERRUPT_InterruptManagerHigh
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           	psect	text73
 12037  0124C2                     __ptext73:
 12038                           	opt stack 0
 12039  0124C2                     _PIN_MANAGER_IOC:
 12040                           	opt stack 21
 12041                           
 12042                           ;pin_manager.c: 146: if(IOCBFbits.IOCBF2 == 1)
 12043                           
 12044                           ;incstack = 0
 12045  0124C2  010E               	movlb	14	; () banked
 12046  0124C4  A593               	btfss	147,2,b	;volatile
 12047  0124C6  0012               	return	
 12048                           
 12049                           ; BSR set to: 14
 12050                           ;pin_manager.c: 147: {
 12051                           ;pin_manager.c: 148: IOCBF2_ISR();
 12052  0124C8  EC26  F091         	call	_IOCBF2_ISR	;wreg free
 12053  0124CC  0012               	return	
 12054  0124CE                     __end_of_PIN_MANAGER_IOC:
 12055                           	opt stack 0
 12056                           tosu	equ	0xFFF
 12057                           tosh	equ	0xFFE
 12058                           tosl	equ	0xFFD
 12059                           pclatu	equ	0xFFB
 12060                           pclath	equ	0xFFA
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           intcon	equ	0xFF2
 12068                           postinc0	equ	0xFEE
 12069                           fsr0h	equ	0xFEA
 12070                           fsr0l	equ	0xFE9
 12071                           wreg	equ	0xFE8
 12072                           indf1	equ	0xFE7
 12073                           postinc1	equ	0xFE6
 12074                           postdec1	equ	0xFE5
 12075                           fsr1h	equ	0xFE2
 12076                           fsr1l	equ	0xFE1
 12077                           indf2	equ	0xFDF
 12078                           postinc2	equ	0xFDE
 12079                           postdec2	equ	0xFDD
 12080                           plusw2	equ	0xFDB
 12081                           fsr2h	equ	0xFDA
 12082                           fsr2l	equ	0xFD9
 12083                           status	equ	0xFD8
 12084                           
 12085 ;; *************** function _IOCBF2_ISR *****************
 12086 ;; Defined at:
 12087 ;;		line 155 in file "mcc_generated_files/pin_manager.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;		None
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;		None
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      void 
 12094 ;; Registers used:
 12095 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12105 ;;Total ram usage:        0 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    1
 12108 ;; This function calls:
 12109 ;;		Absolute function
 12110 ;;		_DTR_Callback
 12111 ;;		_IOCBF2_DefaultInterruptHandler
 12112 ;; This function is called by:
 12113 ;;		_PIN_MANAGER_IOC
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           	psect	text74
 12118  01224C                     __ptext74:
 12119                           	opt stack 0
 12120  01224C                     _IOCBF2_ISR:
 12121                           	opt stack 21
 12122                           
 12123                           ;pin_manager.c: 160: if(IOCBF2_InterruptHandler)
 12124                           
 12125                           ;incstack = 0
 12126  01224C  504B               	movf	_IOCBF2_InterruptHandler,w,c
 12127  01224E  104C               	iorwf	_IOCBF2_InterruptHandler+1,w,c
 12128  012250  104D               	iorwf	_IOCBF2_InterruptHandler+2,w,c
 12129  012252  B4D8               	btfsc	status,2,c
 12130  012254  D00C               	goto	i2u378_49
 12131                           
 12132                           ;pin_manager.c: 161: {
 12133                           ;pin_manager.c: 162: IOCBF2_InterruptHandler();
 12134  012256  D801               	call	i2u378_48
 12135  012258  D00A               	goto	i2u378_49
 12136  01225A                     i2u378_48:
 12137  01225A  0005               	push	
 12138  01225C  6EFA               	movwf	pclath,c
 12139  01225E  504B               	movf	_IOCBF2_InterruptHandler,w,c
 12140  012260  6EFD               	movwf	tosl,c
 12141  012262  504C               	movf	_IOCBF2_InterruptHandler+1,w,c
 12142  012264  6EFE               	movwf	tosh,c
 12143  012266  504D               	movf	_IOCBF2_InterruptHandler+2,w,c
 12144  012268  6EFF               	movwf	tosu,c
 12145  01226A  50FA               	movf	pclath,w,c
 12146  01226C  0012               	return		;indir
 12147  01226E                     i2u378_49:
 12148                           
 12149                           ;pin_manager.c: 163: }
 12150                           ;pin_manager.c: 164: IOCBFbits.IOCBF2 = 0;
 12151  01226E  010E               	movlb	14	; () banked
 12152  012270  9593               	bcf	147,2,b	;volatile
 12153                           
 12154                           ; BSR set to: 14
 12155  012272  0012               	return		;funcret
 12156  012274                     __end_of_IOCBF2_ISR:
 12157                           	opt stack 0
 12158                           tosu	equ	0xFFF
 12159                           tosh	equ	0xFFE
 12160                           tosl	equ	0xFFD
 12161                           pclatu	equ	0xFFB
 12162                           pclath	equ	0xFFA
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           prodh	equ	0xFF4
 12168                           prodl	equ	0xFF3
 12169                           intcon	equ	0xFF2
 12170                           postinc0	equ	0xFEE
 12171                           fsr0h	equ	0xFEA
 12172                           fsr0l	equ	0xFE9
 12173                           wreg	equ	0xFE8
 12174                           indf1	equ	0xFE7
 12175                           postinc1	equ	0xFE6
 12176                           postdec1	equ	0xFE5
 12177                           fsr1h	equ	0xFE2
 12178                           fsr1l	equ	0xFE1
 12179                           indf2	equ	0xFDF
 12180                           postinc2	equ	0xFDE
 12181                           postdec2	equ	0xFDD
 12182                           plusw2	equ	0xFDB
 12183                           fsr2h	equ	0xFDA
 12184                           fsr2l	equ	0xFD9
 12185                           status	equ	0xFD8
 12186                           
 12187 ;; *************** function _DTR_Callback *****************
 12188 ;; Defined at:
 12189 ;;		line 58 in file "main.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;		None
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;		None
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  1    wreg      void 
 12196 ;; Registers used:
 12197 ;;		None
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12207 ;;Total ram usage:        0 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; This function calls:
 12210 ;;		Nothing
 12211 ;; This function is called by:
 12212 ;;		_main
 12213 ;;		_IOCBF2_ISR
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           	psect	text75
 12218  0124CE                     __ptext75:
 12219                           	opt stack 0
 12220  0124CE                     _DTR_Callback:
 12221                           	opt stack 21
 12222                           
 12223                           ;main.c: 60: if(PORTBbits.RB2 == 1) {
 12224                           
 12225                           ; BSR set to: 14
 12226                           ;incstack = 0
 12227  0124CE  A48A               	btfss	3978,2,c	;volatile
 12228  0124D0  D002               	goto	i2l932
 12229                           
 12230                           ;main.c: 61: USB_DTR = 1;
 12231  0124D2  804F               	bsf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 12232                           
 12233                           ;main.c: 62: }
 12234  0124D4  0012               	return	
 12235  0124D6                     i2l932:
 12236                           
 12237                           ;main.c: 64: else {
 12238                           ;main.c: 65: USB_DTR = 0;
 12239  0124D6  904F               	bcf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 12240  0124D8  0012               	return	
 12241  0124DA                     __end_of_DTR_Callback:
 12242                           	opt stack 0
 12243                           tosu	equ	0xFFF
 12244                           tosh	equ	0xFFE
 12245                           tosl	equ	0xFFD
 12246                           pclatu	equ	0xFFB
 12247                           pclath	equ	0xFFA
 12248                           tblptru	equ	0xFF8
 12249                           tblptrh	equ	0xFF7
 12250                           tblptrl	equ	0xFF6
 12251                           tablat	equ	0xFF5
 12252                           prodh	equ	0xFF4
 12253                           prodl	equ	0xFF3
 12254                           intcon	equ	0xFF2
 12255                           postinc0	equ	0xFEE
 12256                           fsr0h	equ	0xFEA
 12257                           fsr0l	equ	0xFE9
 12258                           wreg	equ	0xFE8
 12259                           indf1	equ	0xFE7
 12260                           postinc1	equ	0xFE6
 12261                           postdec1	equ	0xFE5
 12262                           fsr1h	equ	0xFE2
 12263                           fsr1l	equ	0xFE1
 12264                           indf2	equ	0xFDF
 12265                           postinc2	equ	0xFDE
 12266                           postdec2	equ	0xFDD
 12267                           plusw2	equ	0xFDB
 12268                           fsr2h	equ	0xFDA
 12269                           fsr2l	equ	0xFD9
 12270                           status	equ	0xFD8
 12271                           
 12272 ;; *************** function _IOCBF2_DefaultInterruptHandler *****************
 12273 ;; Defined at:
 12274 ;;		line 177 in file "mcc_generated_files/pin_manager.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;		None
 12279 ;; Return value:  Size  Location     Type
 12280 ;;                  1    wreg      void 
 12281 ;; Registers used:
 12282 ;;		None
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12292 ;;Total ram usage:        0 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; This function calls:
 12295 ;;		Nothing
 12296 ;; This function is called by:
 12297 ;;		_PIN_MANAGER_Initialize
 12298 ;;		_IOCBF2_ISR
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           	psect	text76
 12303  012516                     __ptext76:
 12304                           	opt stack 0
 12305  012516                     _IOCBF2_DefaultInterruptHandler:
 12306                           	opt stack 21
 12307                           
 12308                           ;incstack = 0
 12309  012516  0012               	return		;funcret
 12310  012518                     __end_of_IOCBF2_DefaultInterruptHandler:
 12311                           	opt stack 0
 12312                           tosu	equ	0xFFF
 12313                           tosh	equ	0xFFE
 12314                           tosl	equ	0xFFD
 12315                           pclatu	equ	0xFFB
 12316                           pclath	equ	0xFFA
 12317                           tblptru	equ	0xFF8
 12318                           tblptrh	equ	0xFF7
 12319                           tblptrl	equ	0xFF6
 12320                           tablat	equ	0xFF5
 12321                           prodh	equ	0xFF4
 12322                           prodl	equ	0xFF3
 12323                           intcon	equ	0xFF2
 12324                           postinc0	equ	0xFEE
 12325                           fsr0h	equ	0xFEA
 12326                           fsr0l	equ	0xFE9
 12327                           wreg	equ	0xFE8
 12328                           indf1	equ	0xFE7
 12329                           postinc1	equ	0xFE6
 12330                           postdec1	equ	0xFE5
 12331                           fsr1h	equ	0xFE2
 12332                           fsr1l	equ	0xFE1
 12333                           indf2	equ	0xFDF
 12334                           postinc2	equ	0xFDE
 12335                           postdec2	equ	0xFDD
 12336                           plusw2	equ	0xFDB
 12337                           fsr2h	equ	0xFDA
 12338                           fsr2l	equ	0xFD9
 12339                           status	equ	0xFD8
 12340                           
 12341 ;; *************** function _EUSART2_Transmit_ISR *****************
 12342 ;; Defined at:
 12343 ;;		line 183 in file "mcc_generated_files/eusart2.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;		None
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;		None
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      void 
 12350 ;; Registers used:
 12351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12361 ;;Total ram usage:        0 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; This function calls:
 12364 ;;		Nothing
 12365 ;; This function is called by:
 12366 ;;		_EUSART2_Initialize
 12367 ;;		_INTERRUPT_InterruptManagerHigh
 12368 ;; This function uses a non-reentrant model
 12369 ;;
 12370                           
 12371                           	psect	text77
 12372  012060                     __ptext77:
 12373                           	opt stack 0
 12374  012060                     _EUSART2_Transmit_ISR:
 12375                           	opt stack 23
 12376                           
 12377                           ;eusart2.c: 187: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 12378                           
 12379                           ;incstack = 0
 12380  012060  0E40               	movlw	64
 12381  012062  604E               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 12382  012064  D013               	goto	i2l246
 12383                           
 12384                           ;eusart2.c: 188: {
 12385                           ;eusart2.c: 189: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 12386  012066  5040               	movf	_eusart2TxTail,w,c	;volatile
 12387  012068  0D01               	mullw	1
 12388  01206A  0E00               	movlw	low _eusart2TxBuffer
 12389  01206C  24F3               	addwf	prodl,w,c
 12390  01206E  6ED9               	movwf	fsr2l,c
 12391  012070  0E02               	movlw	high _eusart2TxBuffer
 12392  012072  20F4               	addwfc	prodh,w,c
 12393  012074  6EDA               	movwf	fsr2h,c
 12394  012076  50DF               	movf	indf2,w,c
 12395  012078  010E               	movlb	14	; () banked
 12396  01207A  6FF2               	movwf	242,b	;volatile
 12397                           
 12398                           ; BSR set to: 14
 12399  01207C  2A40               	incf	_eusart2TxTail,f,c	;volatile
 12400                           
 12401                           ; BSR set to: 14
 12402                           ;eusart2.c: 190: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 12403  01207E  0E3F               	movlw	63
 12404  012080  6440               	cpfsgt	_eusart2TxTail,c	;volatile
 12405  012082  D002               	goto	i2l247
 12406                           
 12407                           ; BSR set to: 14
 12408                           ;eusart2.c: 191: {
 12409                           ;eusart2.c: 192: eusart2TxTail = 0;
 12410  012084  0E00               	movlw	0
 12411  012086  6E40               	movwf	_eusart2TxTail,c	;volatile
 12412  012088                     i2l247:
 12413                           
 12414                           ; BSR set to: 14
 12415                           ;eusart2.c: 193: }
 12416                           ;eusart2.c: 194: eusart2TxBufferRemaining++;
 12417                           
 12418                           ; BSR set to: 14
 12419  012088  2A4E               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 12420                           
 12421                           ;eusart2.c: 195: }
 12422  01208A  0012               	return	
 12423  01208C                     i2l246:
 12424                           
 12425                           ;eusart2.c: 196: else
 12426                           ;eusart2.c: 197: {
 12427                           ;eusart2.c: 198: PIE3bits.TX2IE = 0;
 12428  01208C  010E               	movlb	14	; () banked
 12429  01208E  9D2C               	bcf	44,6,b	;volatile
 12430  012090  0012               	return	
 12431  012092                     __end_of_EUSART2_Transmit_ISR:
 12432                           	opt stack 0
 12433                           tosu	equ	0xFFF
 12434                           tosh	equ	0xFFE
 12435                           tosl	equ	0xFFD
 12436                           pclatu	equ	0xFFB
 12437                           pclath	equ	0xFFA
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           postinc0	equ	0xFEE
 12446                           fsr0h	equ	0xFEA
 12447                           fsr0l	equ	0xFE9
 12448                           wreg	equ	0xFE8
 12449                           indf1	equ	0xFE7
 12450                           postinc1	equ	0xFE6
 12451                           postdec1	equ	0xFE5
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           plusw2	equ	0xFDB
 12458                           fsr2h	equ	0xFDA
 12459                           fsr2l	equ	0xFD9
 12460                           status	equ	0xFD8
 12461                           
 12462 ;; *************** function _EUSART2_Receive_ISR *****************
 12463 ;; Defined at:
 12464 ;;		line 202 in file "mcc_generated_files/eusart2.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;		None
 12467 ;; Auto vars:     Size  Location     Type
 12468 ;;		None
 12469 ;; Return value:  Size  Location     Type
 12470 ;;                  1    wreg      void 
 12471 ;; Registers used:
 12472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12473 ;; Tracked objects:
 12474 ;;		On entry : 0/0
 12475 ;;		On exit  : 0/0
 12476 ;;		Unchanged: 0/0
 12477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12482 ;;Total ram usage:        0 bytes
 12483 ;; Hardware stack levels used:    1
 12484 ;; Hardware stack levels required when called:    3
 12485 ;; This function calls:
 12486 ;;		i2_printf
 12487 ;; This function is called by:
 12488 ;;		_EUSART2_Initialize
 12489 ;;		_INTERRUPT_InterruptManagerHigh
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text78
 12494  0116CC                     __ptext78:
 12495                           	opt stack 0
 12496  0116CC                     _EUSART2_Receive_ISR:
 12497                           	opt stack 20
 12498                           
 12499                           ;eusart2.c: 205: if(1 == RC2STAbits.OERR)
 12500                           
 12501                           ; BSR set to: 14
 12502                           ;incstack = 0
 12503  0116CC  010E               	movlb	14	; () banked
 12504  0116CE  A3F5               	btfss	245,1,b	;volatile
 12505  0116D0  D002               	goto	i2l252
 12506                           
 12507                           ; BSR set to: 14
 12508                           ;eusart2.c: 206: {
 12509                           ;eusart2.c: 209: RC2STAbits.CREN = 0;
 12510  0116D2  99F5               	bcf	245,4,b	;volatile
 12511                           
 12512                           ;eusart2.c: 210: RC2STAbits.CREN = 1;
 12513  0116D4  89F5               	bsf	245,4,b	;volatile
 12514  0116D6                     i2l252:
 12515                           
 12516                           ; BSR set to: 14
 12517                           ;eusart2.c: 211: }
 12518                           ;eusart2.c: 214: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 12519                           
 12520                           ; BSR set to: 14
 12521  0116D6  503F               	movf	_eusart2RxHead,w,c	;volatile
 12522  0116D8  0D01               	mullw	1
 12523  0116DA  0E00               	movlw	low _eusart2RxBuffer
 12524  0116DC  24F3               	addwf	prodl,w,c
 12525  0116DE  6ED9               	movwf	fsr2l,c
 12526  0116E0  0E01               	movlw	high _eusart2RxBuffer
 12527  0116E2  20F4               	addwfc	prodh,w,c
 12528  0116E4  6EDA               	movwf	fsr2h,c
 12529  0116E6  CEF1 FFDF          	movff	3825,indf2	;volatile
 12530                           
 12531                           ; BSR set to: 14
 12532  0116EA  2A3F               	incf	_eusart2RxHead,f,c	;volatile
 12533                           
 12534                           ; BSR set to: 14
 12535                           ;eusart2.c: 215: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 12536  0116EC  0E3F               	movlw	63
 12537  0116EE  643F               	cpfsgt	_eusart2RxHead,c	;volatile
 12538  0116F0  D002               	goto	i2l253
 12539                           
 12540                           ; BSR set to: 14
 12541                           ;eusart2.c: 216: {
 12542                           ;eusart2.c: 217: eusart2RxHead = 0;
 12543  0116F2  0E00               	movlw	0
 12544  0116F4  6E3F               	movwf	_eusart2RxHead,c	;volatile
 12545  0116F6                     i2l253:
 12546                           
 12547                           ; BSR set to: 14
 12548                           ;eusart2.c: 218: }
 12549                           ;eusart2.c: 219: eusart2RxCount++;
 12550                           
 12551                           ; BSR set to: 14
 12552  0116F6  2A3D               	incf	_eusart2RxCount,f,c	;volatile
 12553                           
 12554                           ; BSR set to: 14
 12555                           ;eusart2.c: 221: if((RC2REG == (int) '\n') || (RC2REG == (int) '\r')) {
 12556  0116F8  0E0A               	movlw	10
 12557  0116FA  19F1               	xorwf	241,w,b	;volatile
 12558  0116FC  B4D8               	btfsc	status,2,c
 12559  0116FE  D004               	goto	i2u414_40
 12560                           
 12561                           ; BSR set to: 14
 12562  011700  0E0D               	movlw	13
 12563  011702  19F1               	xorwf	241,w,b	;volatile
 12564  011704  A4D8               	btfss	status,2,c
 12565  011706  D004               	goto	i2l254
 12566  011708                     i2u414_40:
 12567                           
 12568                           ; BSR set to: 14
 12569                           ;eusart2.c: 223: eusart2RxStringReady = 1;
 12570  011708  824F               	bsf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
 12571                           
 12572                           ; BSR set to: 14
 12573                           ;eusart2.c: 226: RC2REG = 0;
 12574  01170A  0E00               	movlw	0
 12575  01170C  6FF1               	movwf	241,b	;volatile
 12576                           
 12577                           ;eusart2.c: 228: }
 12578  01170E  D001               	goto	i2l257
 12579  011710                     i2l254:
 12580                           
 12581                           ; BSR set to: 14
 12582                           ;eusart2.c: 230: else {
 12583                           ;eusart2.c: 232: eusart2RxStringReady = 0;
 12584  011710  924F               	bcf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
 12585  011712                     i2l257:
 12586                           
 12587                           ; BSR set to: 14
 12588                           ;eusart2.c: 234: }
 12589                           ;eusart2.c: 237: if((RC2REG == (int) '\b')) {
 12590                           
 12591                           ; BSR set to: 14
 12592  011712  0E08               	movlw	8
 12593  011714  19F1               	xorwf	241,w,b	;volatile
 12594  011716  A4D8               	btfss	status,2,c
 12595  011718  0012               	return	
 12596                           
 12597                           ; BSR set to: 14
 12598                           ;eusart2.c: 239: eusart2RxBuffer[eusart2RxHead] = '\0';
 12599  01171A  503F               	movf	_eusart2RxHead,w,c	;volatile
 12600  01171C  0D01               	mullw	1
 12601  01171E  0E00               	movlw	low _eusart2RxBuffer
 12602  011720  24F3               	addwf	prodl,w,c
 12603  011722  6ED9               	movwf	fsr2l,c
 12604  011724  0E01               	movlw	high _eusart2RxBuffer
 12605  011726  20F4               	addwfc	prodh,w,c
 12606  011728  6EDA               	movwf	fsr2h,c
 12607  01172A  0E00               	movlw	0
 12608  01172C  6EDF               	movwf	indf2,c
 12609                           
 12610                           ; BSR set to: 14
 12611                           ;eusart2.c: 240: eusart2RxHead--;
 12612  01172E  063F               	decf	_eusart2RxHead,f,c	;volatile
 12613                           
 12614                           ; BSR set to: 14
 12615                           ;eusart2.c: 243: printf("\033[K");
 12616  011730  0EFB               	movlw	low STR_1
 12617  011732  6E0D               	movwf	i2printf@f,c
 12618  011734  0EFF               	movlw	high STR_1
 12619  011736  6E0E               	movwf	i2printf@f+1,c
 12620  011738  EC7C  F086         	call	i2_printf	;wreg free
 12621                           
 12622                           ;eusart2.c: 245: if(eusart2RxHead != eusart2RxTail) {
 12623  01173C  503E               	movf	_eusart2RxTail,w,c	;volatile
 12624  01173E  183F               	xorwf	_eusart2RxHead,w,c	;volatile
 12625  011740  B4D8               	btfsc	status,2,c
 12626  011742  D00B               	goto	i2l259
 12627                           
 12628                           ;eusart2.c: 247: eusart2RxBuffer[eusart2RxHead] = '\0';
 12629  011744  503F               	movf	_eusart2RxHead,w,c	;volatile
 12630  011746  0D01               	mullw	1
 12631  011748  0E00               	movlw	low _eusart2RxBuffer
 12632  01174A  24F3               	addwf	prodl,w,c
 12633  01174C  6ED9               	movwf	fsr2l,c
 12634  01174E  0E01               	movlw	high _eusart2RxBuffer
 12635  011750  20F4               	addwfc	prodh,w,c
 12636  011752  6EDA               	movwf	fsr2h,c
 12637  011754  0E00               	movlw	0
 12638  011756  6EDF               	movwf	indf2,c
 12639                           
 12640                           ;eusart2.c: 248: eusart2RxHead--;
 12641  011758  063F               	decf	_eusart2RxHead,f,c	;volatile
 12642  01175A                     i2l259:
 12643                           
 12644                           ;eusart2.c: 250: }
 12645                           ;eusart2.c: 252: RC2REG = 0;
 12646  01175A  0E00               	movlw	0
 12647  01175C  010E               	movlb	14	; () banked
 12648  01175E  6FF1               	movwf	241,b	;volatile
 12649  011760  0012               	return	
 12650  011762                     __end_of_EUSART2_Receive_ISR:
 12651                           	opt stack 0
 12652                           tosu	equ	0xFFF
 12653                           tosh	equ	0xFFE
 12654                           tosl	equ	0xFFD
 12655                           pclatu	equ	0xFFB
 12656                           pclath	equ	0xFFA
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           intcon	equ	0xFF2
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           postinc1	equ	0xFE6
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           plusw2	equ	0xFDB
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function i2_printf *****************
 12682 ;; Defined at:
 12683 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12686 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
 12687 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
 12688 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
 12689 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
 12690 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
 12691 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
 12692 ;;		 -> STR_4(365), STR_3(4), STR_2(5), STR_1(4), 
 12693 ;; Auto vars:     Size  Location     Type
 12694 ;;  printf          4    0        struct .
 12695 ;;  printf          3    0        PTR const unsigned char 
 12696 ;;  printf          2   19[COMRAM] unsigned int 
 12697 ;;  printf          2   15[COMRAM] PTR void [1]
 12698 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12699 ;;  printf          2    0        unsigned int 
 12700 ;;  printf          1   21[COMRAM] char 
 12701 ;;  printf          1   18[COMRAM] char 
 12702 ;;  printf          1   17[COMRAM] unsigned char 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  2   12[COMRAM] int 
 12705 ;; Registers used:
 12706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12713 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12715 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12716 ;;Total ram usage:       10 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    2
 12719 ;; This function calls:
 12720 ;;		i2___lwdiv
 12721 ;;		i2___lwmod
 12722 ;;		i2_putch
 12723 ;; This function is called by:
 12724 ;;		_EUSART2_Receive_ISR
 12725 ;; This function uses a non-reentrant model
 12726 ;;
 12727                           
 12728                           	psect	text79
 12729  010CF8                     __ptext79:
 12730                           	opt stack 0
 12731  010CF8                     i2_printf:
 12732                           	opt stack 20
 12733                           
 12734                           ;doprnt.c: 466: va_list ap;
 12735                           ;doprnt.c: 499: signed char c;
 12736                           ;doprnt.c: 506: signed char prec;
 12737                           ;doprnt.c: 508: unsigned char flag;
 12738                           ;doprnt.c: 523: union {
 12739                           ;doprnt.c: 524: unsigned long vd;
 12740                           ;doprnt.c: 525: double integ;
 12741                           ;doprnt.c: 526: } tmpval;
 12742                           ;doprnt.c: 528: unsigned int val;
 12743                           ;doprnt.c: 529: unsigned len;
 12744                           ;doprnt.c: 530: const char * cp;
 12745                           ;doprnt.c: 533: *ap = __va_start();
 12746                           
 12747                           ; BSR set to: 14
 12748                           ;incstack = 0
 12749  010CF8  0E0F               	movlw	low (?i2_printf+2)
 12750  010CFA  6E10               	movwf	i2printf@ap,c
 12751  010CFC  0E00               	movlw	high (?i2_printf+2)
 12752  010CFE  6E11               	movwf	i2printf@ap+1,c
 12753                           
 12754                           ;doprnt.c: 536: while(c = *f++) {
 12755  010D00  D085               	goto	i2u406_40
 12756  010D02                     
 12757                           ;doprnt.c: 538: if(c != '%')
 12758  010D02  0E25               	movlw	37
 12759  010D04  1816               	xorwf	i2printf@c,w,c
 12760  010D06  B4D8               	btfsc	status,2,c
 12761  010D08  D004               	goto	i2l1028
 12762                           
 12763                           ;doprnt.c: 540: {
 12764                           ;doprnt.c: 541: (putch(c) );
 12765  010D0A  5016               	movf	i2printf@c,w,c
 12766  010D0C  EC72  F092         	call	i2_putch
 12767                           
 12768                           ;doprnt.c: 542: continue;
 12769  010D10  D07D               	goto	i2u406_40
 12770  010D12                     i2l1028:
 12771                           
 12772                           ;doprnt.c: 543: }
 12773                           ;doprnt.c: 548: flag = 0;
 12774  010D12  0E00               	movlw	0
 12775  010D14  6E12               	movwf	i2printf@flag,c
 12776                           
 12777                           ;doprnt.c: 822: }
 12778                           
 12779                           ;doprnt.c: 813: continue;
 12780                           
 12781                           ;doprnt.c: 802: default:
 12782                           
 12783                           ;doprnt.c: 698: case 'i':
 12784                           ;doprnt.c: 699: break;
 12785                           
 12786                           ;doprnt.c: 697: case 'd':
 12787                           
 12788                           ;doprnt.c: 638: goto alldone;
 12789                           
 12790                           ;doprnt.c: 637: case 0:
 12791                           
 12792                           ;doprnt.c: 635: switch(c = *f++) {
 12793  010D16  C00D  FFF6         	movff	i2printf@f,tblptrl
 12794  010D1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12795  010D1E  4A0D               	infsnz	i2printf@f,f,c
 12796  010D20  2A0E               	incf	i2printf@f+1,f,c
 12797  010D22                     	if	0	;tblptru may be non-zero
 12798  010D22                     	endif
 12799  010D22                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12800  010D22  0E00               	movlw	low (__mediumconst shr (0+16))
 12801  010D24  6EF8               	movwf	tblptru,c
 12802  010D26                     	endif
 12803  010D26  0008               	tblrd		*
 12804  010D28  CFF5 F016          	movff	tablat,i2printf@c
 12805  010D2C  5016               	movf	i2printf@c,w,c
 12806                           
 12807                           ; Switch size 1, requested type "space"
 12808                           ; Number of cases is 3, Range of values is 0 to 105
 12809                           ; switch strategies available:
 12810                           ; Name         Instructions Cycles
 12811                           ; simple_byte           10     6 (average)
 12812                           ;	Chosen strategy is simple_byte
 12813  010D2E  0A00               	xorlw	0	; case 0
 12814  010D30  B4D8               	btfsc	status,2,c
 12815  010D32  0012               	return	
 12816  010D34  0A64               	xorlw	100	; case 100
 12817  010D36  B4D8               	btfsc	status,2,c
 12818  010D38  D003               	goto	i2l1034
 12819  010D3A  0A0D               	xorlw	13	; case 105
 12820  010D3C  A4D8               	btfss	status,2,c
 12821  010D3E  D066               	goto	i2u406_40
 12822  010D40                     i2l1034:
 12823                           
 12824                           ;doprnt.c: 1253: {
 12825                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12826  010D40  C010  FFD9         	movff	i2printf@ap,fsr2l
 12827  010D44  C011  FFDA         	movff	i2printf@ap+1,fsr2h
 12828  010D48  CFDE F014          	movff	postinc2,i2printf@val
 12829  010D4C  CFDD F015          	movff	postdec2,i2printf@val+1
 12830  010D50  0E02               	movlw	2
 12831  010D52  2610               	addwf	i2printf@ap,f,c
 12832  010D54  0E00               	movlw	0
 12833  010D56  2211               	addwfc	i2printf@ap+1,f,c
 12834                           
 12835                           ;doprnt.c: 1261: if((int)val < 0) {
 12836  010D58  AE15               	btfss	i2printf@val+1,7,c
 12837  010D5A  D006               	goto	i2l1036
 12838                           
 12839                           ;doprnt.c: 1262: flag |= 0x03;
 12840  010D5C  0E03               	movlw	3
 12841  010D5E  1212               	iorwf	i2printf@flag,f,c
 12842                           
 12843                           ;doprnt.c: 1263: val = -val;
 12844  010D60  6C14               	negf	i2printf@val,c
 12845  010D62  1E15               	comf	i2printf@val+1,f,c
 12846  010D64  B0D8               	btfsc	status,0,c
 12847  010D66  2A15               	incf	i2printf@val+1,f,c
 12848  010D68                     i2l1036:
 12849                           
 12850                           ;doprnt.c: 1264: }
 12851                           ;doprnt.c: 1266: }
 12852                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12853  010D68  0E01               	movlw	1
 12854  010D6A  6E16               	movwf	i2printf@c,c
 12855  010D6C                     i2l4125:
 12856  010D6C  0E05               	movlw	5
 12857  010D6E  1816               	xorwf	i2printf@c,w,c
 12858  010D70  B4D8               	btfsc	status,2,c
 12859  010D72  D015               	goto	i2u404_40
 12860                           
 12861                           ;doprnt.c: 1306: if(val < dpowers[c])
 12862  010D74  5016               	movf	i2printf@c,w,c
 12863  010D76  0D02               	mullw	2
 12864  010D78  0ECB               	movlw	low _dpowers
 12865  010D7A  24F3               	addwf	prodl,w,c
 12866  010D7C  6EF6               	movwf	tblptrl,c
 12867  010D7E  0EFB               	movlw	high _dpowers
 12868  010D80  20F4               	addwfc	prodh,w,c
 12869  010D82  6EF7               	movwf	tblptrh,c
 12870  010D84                     	if	1	;There are 3 active tblptr bytes
 12871  010D84  6AF8               	clrf	tblptru,c
 12872  010D86  0E00               	movlw	low (__mediumconst shr (0+16))
 12873  010D88  22F8               	addwfc	tblptru,f,c
 12874  010D8A                     	endif
 12875  010D8A  0009               	tblrd		*+
 12876  010D8C  50F5               	movf	tablat,w,c
 12877  010D8E  5C14               	subwf	i2printf@val,w,c
 12878  010D90  0009               	tblrd		*+
 12879  010D92  50F5               	movf	tablat,w,c
 12880  010D94  5815               	subwfb	i2printf@val+1,w,c
 12881  010D96  A0D8               	btfss	status,0,c
 12882  010D98  D002               	goto	i2u404_40
 12883                           
 12884                           ;doprnt.c: 1307: break;
 12885  010D9A  2A16               	incf	i2printf@c,f,c
 12886  010D9C  D7E7               	goto	i2l4125
 12887  010D9E                     i2u404_40:
 12888                           
 12889                           ;doprnt.c: 1422: {
 12890                           ;doprnt.c: 1438: if(flag & 0x03)
 12891  010D9E  C012  F00F         	movff	i2printf@flag,??i2_printf
 12892  010DA2  0E03               	movlw	3
 12893  010DA4  160F               	andwf	??i2_printf,f,c
 12894  010DA6  B4D8               	btfsc	status,2,c
 12895  010DA8  D003               	goto	i2l1040
 12896                           
 12897                           ;doprnt.c: 1439: (putch('-') );
 12898  010DAA  0E2D               	movlw	45
 12899  010DAC  EC72  F092         	call	i2_putch
 12900  010DB0                     i2l1040:
 12901                           
 12902                           ;doprnt.c: 1469: }
 12903                           ;doprnt.c: 1472: prec = c;
 12904  010DB0  C016  F013         	movff	i2printf@c,i2printf@prec
 12905                           
 12906                           ;doprnt.c: 1474: while(prec--) {
 12907  010DB4  D027               	goto	i2l1041
 12908  010DB6                     
 12909                           ;doprnt.c: 1478: {
 12910                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12911  010DB6  5013               	movf	i2printf@prec,w,c
 12912  010DB8  0D02               	mullw	2
 12913  010DBA  0ECB               	movlw	low _dpowers
 12914  010DBC  24F3               	addwf	prodl,w,c
 12915  010DBE  6EF6               	movwf	tblptrl,c
 12916  010DC0  0EFB               	movlw	high _dpowers
 12917  010DC2  20F4               	addwfc	prodh,w,c
 12918  010DC4  6EF7               	movwf	tblptrh,c
 12919  010DC6                     	if	1	;There are 3 active tblptr bytes
 12920  010DC6  6AF8               	clrf	tblptru,c
 12921  010DC8  0E00               	movlw	low (__mediumconst shr (0+16))
 12922  010DCA  22F8               	addwfc	tblptru,f,c
 12923  010DCC                     	endif
 12924  010DCC  0009               	tblrd		*+
 12925  010DCE  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12926  010DD2  000A               	tblrd		*-
 12927  010DD4  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12928  010DD8  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12929  010DDC  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12930  010DE0  ECB5  F08D         	call	i2___lwdiv	;wreg free
 12931  010DE4  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12932  010DE8  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12933  010DEC  0E00               	movlw	0
 12934  010DEE  6E0B               	movwf	i2___lwmod@divisor+1,c
 12935  010DF0  0E0A               	movlw	10
 12936  010DF2  6E0A               	movwf	i2___lwmod@divisor,c
 12937  010DF4  EC99  F08E         	call	i2___lwmod	;wreg free
 12938  010DF8  5008               	movf	?i2___lwmod,w,c
 12939  010DFA  0F30               	addlw	48
 12940  010DFC  6E16               	movwf	i2printf@c,c
 12941                           
 12942                           ;doprnt.c: 1523: }
 12943                           ;doprnt.c: 1524: (putch(c) );
 12944  010DFE  5016               	movf	i2printf@c,w,c
 12945  010E00  EC72  F092         	call	i2_putch
 12946  010E04                     i2l1041:
 12947  010E04  0613               	decf	i2printf@prec,f,c
 12948  010E06  2813               	incf	i2printf@prec,w,c
 12949  010E08  A4D8               	btfss	status,2,c
 12950  010E0A  D7D5               	goto	i2l1042
 12951  010E0C                     i2u406_40:
 12952  010E0C  C00D  FFF6         	movff	i2printf@f,tblptrl
 12953  010E10  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12954  010E14  4A0D               	infsnz	i2printf@f,f,c
 12955  010E16  2A0E               	incf	i2printf@f+1,f,c
 12956  010E18                     	if	0	;tblptru may be non-zero
 12957  010E18                     	endif
 12958  010E18                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12959  010E18  0E00               	movlw	low (__mediumconst shr (0+16))
 12960  010E1A  6EF8               	movwf	tblptru,c
 12961  010E1C                     	endif
 12962  010E1C  0008               	tblrd		*
 12963  010E1E  CFF5 F016          	movff	tablat,i2printf@c
 12964  010E22  5016               	movf	i2printf@c,w,c
 12965  010E24  B4D8               	btfsc	status,2,c
 12966  010E26  0012               	return	
 12967  010E28  D76C               	goto	i2l1027
 12968  010E2A                     __end_ofi2_printf:
 12969                           	opt stack 0
 12970                           tosu	equ	0xFFF
 12971                           tosh	equ	0xFFE
 12972                           tosl	equ	0xFFD
 12973                           pclatu	equ	0xFFB
 12974                           pclath	equ	0xFFA
 12975                           tblptru	equ	0xFF8
 12976                           tblptrh	equ	0xFF7
 12977                           tblptrl	equ	0xFF6
 12978                           tablat	equ	0xFF5
 12979                           prodh	equ	0xFF4
 12980                           prodl	equ	0xFF3
 12981                           intcon	equ	0xFF2
 12982                           postinc0	equ	0xFEE
 12983                           fsr0h	equ	0xFEA
 12984                           fsr0l	equ	0xFE9
 12985                           wreg	equ	0xFE8
 12986                           indf1	equ	0xFE7
 12987                           postinc1	equ	0xFE6
 12988                           postdec1	equ	0xFE5
 12989                           fsr1h	equ	0xFE2
 12990                           fsr1l	equ	0xFE1
 12991                           indf2	equ	0xFDF
 12992                           postinc2	equ	0xFDE
 12993                           postdec2	equ	0xFDD
 12994                           plusw2	equ	0xFDB
 12995                           fsr2h	equ	0xFDA
 12996                           fsr2l	equ	0xFD9
 12997                           status	equ	0xFD8
 12998                           
 12999 ;; *************** function i2_putch *****************
 13000 ;; Defined at:
 13001 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 13002 ;; Parameters:    Size  Location     Type
 13003 ;;  txData          1    wreg     unsigned char 
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;  txData          1    1[COMRAM] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  1    wreg      void 
 13008 ;; Registers used:
 13009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13019 ;;Total ram usage:        1 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    1
 13022 ;; This function calls:
 13023 ;;		i2_EUSART2_Write
 13024 ;; This function is called by:
 13025 ;;		i2_printf
 13026 ;; This function uses a non-reentrant model
 13027 ;;
 13028                           
 13029                           	psect	text80
 13030  0124E4                     __ptext80:
 13031                           	opt stack 0
 13032  0124E4                     i2_putch:
 13033                           	opt stack 20
 13034                           
 13035                           ;incstack = 0
 13036                           ;i2putch@txData stored from wreg
 13037  0124E4  6E02               	movwf	i2putch@txData,c
 13038                           
 13039                           ;eusart2.c: 180: EUSART2_Write(txData);
 13040  0124E6  5002               	movf	i2putch@txData,w,c
 13041  0124E8  EC54  F08F         	call	i2_EUSART2_Write
 13042  0124EC  0012               	return		;funcret
 13043  0124EE                     __end_ofi2_putch:
 13044                           	opt stack 0
 13045                           tosu	equ	0xFFF
 13046                           tosh	equ	0xFFE
 13047                           tosl	equ	0xFFD
 13048                           pclatu	equ	0xFFB
 13049                           pclath	equ	0xFFA
 13050                           tblptru	equ	0xFF8
 13051                           tblptrh	equ	0xFF7
 13052                           tblptrl	equ	0xFF6
 13053                           tablat	equ	0xFF5
 13054                           prodh	equ	0xFF4
 13055                           prodl	equ	0xFF3
 13056                           intcon	equ	0xFF2
 13057                           postinc0	equ	0xFEE
 13058                           fsr0h	equ	0xFEA
 13059                           fsr0l	equ	0xFE9
 13060                           wreg	equ	0xFE8
 13061                           indf1	equ	0xFE7
 13062                           postinc1	equ	0xFE6
 13063                           postdec1	equ	0xFE5
 13064                           fsr1h	equ	0xFE2
 13065                           fsr1l	equ	0xFE1
 13066                           indf2	equ	0xFDF
 13067                           postinc2	equ	0xFDE
 13068                           postdec2	equ	0xFDD
 13069                           plusw2	equ	0xFDB
 13070                           fsr2h	equ	0xFDA
 13071                           fsr2l	equ	0xFD9
 13072                           status	equ	0xFD8
 13073                           
 13074 ;; *************** function i2_EUSART2_Write *****************
 13075 ;; Defined at:
 13076 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 13077 ;; Parameters:    Size  Location     Type
 13078 ;;  txData          1    wreg     unsigned char 
 13079 ;; Auto vars:     Size  Location     Type
 13080 ;;  txData          1    0[COMRAM] unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      void 
 13083 ;; Registers used:
 13084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13094 ;;Total ram usage:        1 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; This function calls:
 13097 ;;		Nothing
 13098 ;; This function is called by:
 13099 ;;		i2_putch
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           	psect	text81
 13104  011EA8                     __ptext81:
 13105                           	opt stack 0
 13106  011EA8                     i2_EUSART2_Write:
 13107                           	opt stack 20
 13108                           
 13109                           ;incstack = 0
 13110                           ;i2EUSART2_Write@txData stored from wreg
 13111  011EA8  6E01               	movwf	i2EUSART2_Write@txData,c
 13112  011EAA                     
 13113                           ;eusart2.c: 153: {
 13114                           
 13115                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 13116  011EAA  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 13117  011EAC  B4D8               	btfsc	status,2,c
 13118  011EAE  D7FD               	goto	i2l3509
 13119                           
 13120                           ;eusart2.c: 154: }
 13121                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 13122  011EB0  010E               	movlb	14	; () banked
 13123  011EB2  BD2C               	btfsc	44,6,b	;volatile
 13124  011EB4  D003               	goto	i2l234
 13125                           
 13126                           ; BSR set to: 14
 13127                           ;eusart2.c: 157: {
 13128                           ;eusart2.c: 158: TX2REG = txData;
 13129  011EB6  C001  FEF2         	movff	i2EUSART2_Write@txData,3826	;volatile
 13130                           
 13131                           ;eusart2.c: 159: }
 13132  011EBA  D012               	goto	i2l235
 13133  011EBC                     i2l234:
 13134                           
 13135                           ; BSR set to: 14
 13136                           ;eusart2.c: 160: else
 13137                           ;eusart2.c: 161: {
 13138                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 13139  011EBC  9D2C               	bcf	44,6,b	;volatile
 13140                           
 13141                           ; BSR set to: 14
 13142                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 13143  011EBE  5041               	movf	_eusart2TxHead,w,c	;volatile
 13144  011EC0  0D01               	mullw	1
 13145  011EC2  0E00               	movlw	low _eusart2TxBuffer
 13146  011EC4  24F3               	addwf	prodl,w,c
 13147  011EC6  6ED9               	movwf	fsr2l,c
 13148  011EC8  0E02               	movlw	high _eusart2TxBuffer
 13149  011ECA  20F4               	addwfc	prodh,w,c
 13150  011ECC  6EDA               	movwf	fsr2h,c
 13151  011ECE  C001  FFDF         	movff	i2EUSART2_Write@txData,indf2
 13152                           
 13153                           ; BSR set to: 14
 13154  011ED2  2A41               	incf	_eusart2TxHead,f,c	;volatile
 13155                           
 13156                           ; BSR set to: 14
 13157                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 13158  011ED4  0E3F               	movlw	63
 13159  011ED6  6441               	cpfsgt	_eusart2TxHead,c	;volatile
 13160  011ED8  D002               	goto	i2l236
 13161                           
 13162                           ; BSR set to: 14
 13163                           ;eusart2.c: 165: {
 13164                           ;eusart2.c: 166: eusart2TxHead = 0;
 13165  011EDA  0E00               	movlw	0
 13166  011EDC  6E41               	movwf	_eusart2TxHead,c	;volatile
 13167  011EDE                     i2l236:
 13168                           
 13169                           ; BSR set to: 14
 13170                           ;eusart2.c: 167: }
 13171                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 13172                           
 13173                           ; BSR set to: 14
 13174  011EDE  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 13175  011EE0                     i2l235:
 13176                           
 13177                           ; BSR set to: 14
 13178                           ;eusart2.c: 169: }
 13179                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 13180                           
 13181                           ; BSR set to: 14
 13182  011EE0  8D2C               	bsf	44,6,b	;volatile
 13183                           
 13184                           ; BSR set to: 14
 13185  011EE2  0012               	return		;funcret
 13186  011EE4                     __end_ofi2_EUSART2_Write:
 13187                           	opt stack 0
 13188                           tosu	equ	0xFFF
 13189                           tosh	equ	0xFFE
 13190                           tosl	equ	0xFFD
 13191                           pclatu	equ	0xFFB
 13192                           pclath	equ	0xFFA
 13193                           tblptru	equ	0xFF8
 13194                           tblptrh	equ	0xFF7
 13195                           tblptrl	equ	0xFF6
 13196                           tablat	equ	0xFF5
 13197                           prodh	equ	0xFF4
 13198                           prodl	equ	0xFF3
 13199                           intcon	equ	0xFF2
 13200                           postinc0	equ	0xFEE
 13201                           fsr0h	equ	0xFEA
 13202                           fsr0l	equ	0xFE9
 13203                           wreg	equ	0xFE8
 13204                           indf1	equ	0xFE7
 13205                           postinc1	equ	0xFE6
 13206                           postdec1	equ	0xFE5
 13207                           fsr1h	equ	0xFE2
 13208                           fsr1l	equ	0xFE1
 13209                           indf2	equ	0xFDF
 13210                           postinc2	equ	0xFDE
 13211                           postdec2	equ	0xFDD
 13212                           plusw2	equ	0xFDB
 13213                           fsr2h	equ	0xFDA
 13214                           fsr2l	equ	0xFD9
 13215                           status	equ	0xFD8
 13216                           
 13217 ;; *************** function i2___lwmod *****************
 13218 ;; Defined at:
 13219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;  dividend        2    7[COMRAM] unsigned int 
 13222 ;;  divisor         2    9[COMRAM] unsigned int 
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  2    7[COMRAM] unsigned int 
 13227 ;; Registers used:
 13228 ;;		wreg, status,2, status,0
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13238 ;;Total ram usage:        5 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; This function calls:
 13241 ;;		Nothing
 13242 ;; This function is called by:
 13243 ;;		i2_printf
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           	psect	text82
 13248  011D32                     __ptext82:
 13249                           	opt stack 0
 13250  011D32                     i2___lwmod:
 13251                           	opt stack 21
 13252                           
 13253                           ; BSR set to: 14
 13254                           ;incstack = 0
 13255  011D32  500A               	movf	i2___lwmod@divisor,w,c
 13256  011D34  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13257  011D36  B4D8               	btfsc	status,2,c
 13258  011D38  D018               	goto	i2l1468
 13259  011D3A  0E01               	movlw	1
 13260  011D3C  6E0C               	movwf	i2___lwmod@counter,c
 13261  011D3E  D004               	goto	i2l1463
 13262  011D40  90D8               	bcf	status,0,c
 13263  011D42  360A               	rlcf	i2___lwmod@divisor,f,c
 13264  011D44  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13265  011D46  2A0C               	incf	i2___lwmod@counter,f,c
 13266  011D48                     i2l1463:
 13267  011D48  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13268  011D4A  D7FA               	goto	i2l1464
 13269  011D4C                     i2u375_40:
 13270  011D4C  500A               	movf	i2___lwmod@divisor,w,c
 13271  011D4E  5C08               	subwf	i2___lwmod@dividend,w,c
 13272  011D50  500B               	movf	i2___lwmod@divisor+1,w,c
 13273  011D52  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13274  011D54  A0D8               	btfss	status,0,c
 13275  011D56  D004               	goto	i2l1467
 13276  011D58  500A               	movf	i2___lwmod@divisor,w,c
 13277  011D5A  5E08               	subwf	i2___lwmod@dividend,f,c
 13278  011D5C  500B               	movf	i2___lwmod@divisor+1,w,c
 13279  011D5E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13280  011D60                     i2l1467:
 13281  011D60  90D8               	bcf	status,0,c
 13282  011D62  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13283  011D64  320A               	rrcf	i2___lwmod@divisor,f,c
 13284  011D66  2E0C               	decfsz	i2___lwmod@counter,f,c
 13285  011D68  D7F1               	goto	i2u375_40
 13286  011D6A                     i2l1468:
 13287  011D6A  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 13288  011D6E  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13289  011D72  0012               	return		;funcret
 13290  011D74                     __end_ofi2___lwmod:
 13291                           	opt stack 0
 13292                           tosu	equ	0xFFF
 13293                           tosh	equ	0xFFE
 13294                           tosl	equ	0xFFD
 13295                           pclatu	equ	0xFFB
 13296                           pclath	equ	0xFFA
 13297                           tblptru	equ	0xFF8
 13298                           tblptrh	equ	0xFF7
 13299                           tblptrl	equ	0xFF6
 13300                           tablat	equ	0xFF5
 13301                           prodh	equ	0xFF4
 13302                           prodl	equ	0xFF3
 13303                           intcon	equ	0xFF2
 13304                           postinc0	equ	0xFEE
 13305                           fsr0h	equ	0xFEA
 13306                           fsr0l	equ	0xFE9
 13307                           wreg	equ	0xFE8
 13308                           indf1	equ	0xFE7
 13309                           postinc1	equ	0xFE6
 13310                           postdec1	equ	0xFE5
 13311                           fsr1h	equ	0xFE2
 13312                           fsr1l	equ	0xFE1
 13313                           indf2	equ	0xFDF
 13314                           postinc2	equ	0xFDE
 13315                           postdec2	equ	0xFDD
 13316                           plusw2	equ	0xFDB
 13317                           fsr2h	equ	0xFDA
 13318                           fsr2l	equ	0xFD9
 13319                           status	equ	0xFD8
 13320                           
 13321 ;; *************** function i2___lwdiv *****************
 13322 ;; Defined at:
 13323 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  dividend        2    0[COMRAM] unsigned int 
 13326 ;;  divisor         2    2[COMRAM] unsigned int 
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13329 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  2    0[COMRAM] unsigned int 
 13332 ;; Registers used:
 13333 ;;		wreg, status,2, status,0
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13342 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13343 ;;Total ram usage:        7 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; This function calls:
 13346 ;;		Nothing
 13347 ;; This function is called by:
 13348 ;;		i2_printf
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           	psect	text83
 13353  011B6A                     __ptext83:
 13354                           	opt stack 0
 13355  011B6A                     i2___lwdiv:
 13356                           	opt stack 21
 13357                           
 13358                           ;incstack = 0
 13359  011B6A  0E00               	movlw	0
 13360  011B6C  6E06               	movwf	i2___lwdiv@quotient+1,c
 13361  011B6E  0E00               	movlw	0
 13362  011B70  6E05               	movwf	i2___lwdiv@quotient,c
 13363  011B72  5003               	movf	i2___lwdiv@divisor,w,c
 13364  011B74  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13365  011B76  B4D8               	btfsc	status,2,c
 13366  011B78  D01C               	goto	i2l1458
 13367  011B7A  0E01               	movlw	1
 13368  011B7C  6E07               	movwf	i2___lwdiv@counter,c
 13369  011B7E  D004               	goto	i2l1453
 13370  011B80  90D8               	bcf	status,0,c
 13371  011B82  3603               	rlcf	i2___lwdiv@divisor,f,c
 13372  011B84  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13373  011B86  2A07               	incf	i2___lwdiv@counter,f,c
 13374  011B88                     i2l1453:
 13375  011B88  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13376  011B8A  D7FA               	goto	i2l1454
 13377  011B8C                     i2u372_40:
 13378  011B8C  90D8               	bcf	status,0,c
 13379  011B8E  3605               	rlcf	i2___lwdiv@quotient,f,c
 13380  011B90  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13381  011B92  5003               	movf	i2___lwdiv@divisor,w,c
 13382  011B94  5C01               	subwf	i2___lwdiv@dividend,w,c
 13383  011B96  5004               	movf	i2___lwdiv@divisor+1,w,c
 13384  011B98  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13385  011B9A  A0D8               	btfss	status,0,c
 13386  011B9C  D005               	goto	i2l1457
 13387  011B9E  5003               	movf	i2___lwdiv@divisor,w,c
 13388  011BA0  5E01               	subwf	i2___lwdiv@dividend,f,c
 13389  011BA2  5004               	movf	i2___lwdiv@divisor+1,w,c
 13390  011BA4  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13391  011BA6  8005               	bsf	i2___lwdiv@quotient,0,c
 13392  011BA8                     i2l1457:
 13393  011BA8  90D8               	bcf	status,0,c
 13394  011BAA  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13395  011BAC  3203               	rrcf	i2___lwdiv@divisor,f,c
 13396  011BAE  2E07               	decfsz	i2___lwdiv@counter,f,c
 13397  011BB0  D7ED               	goto	i2u372_40
 13398  011BB2                     i2l1458:
 13399  011BB2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13400  011BB6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13401  011BBA  0012               	return		;funcret
 13402  011BBC                     __end_ofi2___lwdiv:
 13403                           	opt stack 0
 13404                           tosu	equ	0xFFF
 13405                           tosh	equ	0xFFE
 13406                           tosl	equ	0xFFD
 13407                           pclatu	equ	0xFFB
 13408                           pclath	equ	0xFFA
 13409                           tblptru	equ	0xFF8
 13410                           tblptrh	equ	0xFF7
 13411                           tblptrl	equ	0xFF6
 13412                           tablat	equ	0xFF5
 13413                           prodh	equ	0xFF4
 13414                           prodl	equ	0xFF3
 13415                           intcon	equ	0xFF2
 13416                           postinc0	equ	0xFEE
 13417                           fsr0h	equ	0xFEA
 13418                           fsr0l	equ	0xFE9
 13419                           wreg	equ	0xFE8
 13420                           indf1	equ	0xFE7
 13421                           postinc1	equ	0xFE6
 13422                           postdec1	equ	0xFE5
 13423                           fsr1h	equ	0xFE2
 13424                           fsr1l	equ	0xFE1
 13425                           indf2	equ	0xFDF
 13426                           postinc2	equ	0xFDE
 13427                           postdec2	equ	0xFDD
 13428                           plusw2	equ	0xFDB
 13429                           fsr2h	equ	0xFDA
 13430                           fsr2l	equ	0xFD9
 13431                           status	equ	0xFD8
 13432                           
 13433 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 13434 ;; Defined at:
 13435 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;		None
 13438 ;; Auto vars:     Size  Location     Type
 13439 ;;		None
 13440 ;; Return value:  Size  Location     Type
 13441 ;;                  1    wreg      void 
 13442 ;; Registers used:
 13443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13444 ;; Tracked objects:
 13445 ;;		On entry : 0/0
 13446 ;;		On exit  : 0/0
 13447 ;;		Unchanged: 0/0
 13448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13453 ;;Total ram usage:        0 bytes
 13454 ;; Hardware stack levels used:    1
 13455 ;; Hardware stack levels required when called:    3
 13456 ;; This function calls:
 13457 ;;		_MTOUCH_Sensor_Service
 13458 ;; This function is called by:
 13459 ;;		_INTERRUPT_InterruptManagerHigh
 13460 ;; This function uses a non-reentrant model
 13461 ;;
 13462                           
 13463                           	psect	text84
 13464  0124EE                     __ptext84:
 13465                           	opt stack 0
 13466  0124EE                     _ADCC_ThresholdISR_mTouch:
 13467                           	opt stack 20
 13468                           
 13469                           ;mtouch_sensor.c: 478: PIR1bits.ADTIF = 0;
 13470                           
 13471                           ;incstack = 0
 13472  0124EE  010E               	movlb	14	; () banked
 13473  0124F0  9334               	bcf	52,1,b	;volatile
 13474                           
 13475                           ; BSR set to: 14
 13476                           ;mtouch_sensor.c: 479: MTOUCH_Sensor_Service();
 13477  0124F2  EC67  F08C         	call	_MTOUCH_Sensor_Service	;wreg free
 13478  0124F6  0012               	return		;funcret
 13479  0124F8                     __end_of_ADCC_ThresholdISR_mTouch:
 13480                           	opt stack 0
 13481                           tosu	equ	0xFFF
 13482                           tosh	equ	0xFFE
 13483                           tosl	equ	0xFFD
 13484                           pclatu	equ	0xFFB
 13485                           pclath	equ	0xFFA
 13486                           tblptru	equ	0xFF8
 13487                           tblptrh	equ	0xFF7
 13488                           tblptrl	equ	0xFF6
 13489                           tablat	equ	0xFF5
 13490                           prodh	equ	0xFF4
 13491                           prodl	equ	0xFF3
 13492                           intcon	equ	0xFF2
 13493                           postinc0	equ	0xFEE
 13494                           fsr0h	equ	0xFEA
 13495                           fsr0l	equ	0xFE9
 13496                           wreg	equ	0xFE8
 13497                           indf1	equ	0xFE7
 13498                           postinc1	equ	0xFE6
 13499                           postdec1	equ	0xFE5
 13500                           fsr1h	equ	0xFE2
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           plusw2	equ	0xFDB
 13506                           fsr2h	equ	0xFDA
 13507                           fsr2l	equ	0xFD9
 13508                           status	equ	0xFD8
 13509                           
 13510 ;; *************** function _MTOUCH_Sensor_Service *****************
 13511 ;; Defined at:
 13512 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;		None
 13515 ;; Auto vars:     Size  Location     Type
 13516 ;;  sensor          2   13[COMRAM] PTR struct .
 13517 ;;		 -> mtouch_sensor(45), 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13531 ;;Total ram usage:        2 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    2
 13534 ;; This function calls:
 13535 ;;		_Sensor_autoCalibration
 13536 ;;		_Sensor_setSampled
 13537 ;;		i2_Sensor_SetTrisBit
 13538 ;;		i2_Sensor_isCalibrated
 13539 ;;		i2_Sensor_scheduleNextScan
 13540 ;; This function is called by:
 13541 ;;		_ADCC_ThresholdISR_mTouch
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           	psect	text85
 13546  0118CE                     __ptext85:
 13547                           	opt stack 0
 13548  0118CE                     _MTOUCH_Sensor_Service:
 13549                           	opt stack 20
 13550                           
 13551                           ;mtouch_sensor.c: 490: mtouch_sensor_t* sensor;
 13552                           ;mtouch_sensor.c: 492: Sensor_SetTrisBit(currentScanSensor,0);
 13553                           
 13554                           ;incstack = 0
 13555  0118CE  0E00               	movlw	0
 13556  0118D0  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 13557  0118D2  503B               	movf	_currentScanSensor,w,c
 13558  0118D4  ECD2  F08C         	call	i2_Sensor_SetTrisBit
 13559                           
 13560                           ;mtouch_sensor.c: 494: if(scanInterrupted)
 13561  0118D8  5039               	movf	_scanInterrupted,w,c	;volatile
 13562  0118DA  B4D8               	btfsc	status,2,c
 13563  0118DC  D002               	goto	i2l559
 13564                           
 13565                           ;mtouch_sensor.c: 495: {
 13566                           ;mtouch_sensor.c: 496: ADCON0bits.ADON = 0;
 13567  0118DE  9E60               	bcf	3936,7,c	;volatile
 13568                           
 13569                           ;mtouch_sensor.c: 497: }
 13570  0118E0  D02B               	goto	i2l560
 13571  0118E2                     i2l559:
 13572                           
 13573                           ;mtouch_sensor.c: 498: else
 13574                           ;mtouch_sensor.c: 499: {
 13575                           ;mtouch_sensor.c: 500: ADCON0bits.ADON = 0;
 13576  0118E2  9E60               	bcf	3936,7,c	;volatile
 13577                           
 13578                           ;mtouch_sensor.c: 501: sensor = &mtouch_sensor[currentScanSensor];
 13579  0118E4  503B               	movf	_currentScanSensor,w,c
 13580  0118E6  0D09               	mullw	9
 13581  0118E8  0E82               	movlw	low _mtouch_sensor
 13582  0118EA  24F3               	addwf	prodl,w,c
 13583  0118EC  6E0E               	movwf	MTOUCH_Sensor_Service@sensor,c
 13584  0118EE  0E00               	movlw	high _mtouch_sensor
 13585  0118F0  20F4               	addwfc	prodh,w,c
 13586  0118F2  6E0F               	movwf	MTOUCH_Sensor_Service@sensor+1,c
 13587                           
 13588                           ;mtouch_sensor.c: 502: if(!Sensor_isCalibrated(sensor))
 13589  0118F4  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 13590  0118F8  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,i2Sensor_isCalibrated@sensor+1
 13591  0118FC  ECF4  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13592  011900  0900               	iorlw	0
 13593  011902  A4D8               	btfss	status,2,c
 13594  011904  D007               	goto	i2l561
 13595                           
 13596                           ;mtouch_sensor.c: 503: {
 13597                           ;mtouch_sensor.c: 504: Sensor_autoCalibration(sensor);
 13598  011906  C00E  F005         	movff	MTOUCH_Sensor_Service@sensor,Sensor_autoCalibration@sensor
 13599  01190A  C00F  F006         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_autoCalibration@sensor+1
 13600  01190E  ECE2  F085         	call	_Sensor_autoCalibration	;wreg free
 13601                           
 13602                           ;mtouch_sensor.c: 505: }
 13603  011912  D006               	goto	i2l562
 13604  011914                     i2l561:
 13605                           
 13606                           ;mtouch_sensor.c: 506: else
 13607                           ;mtouch_sensor.c: 507: {
 13608                           ;mtouch_sensor.c: 508: Sensor_setSampled(sensor);
 13609  011914  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 13610  011918  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_setSampled@sensor+1
 13611  01191C  EC30  F092         	call	_Sensor_setSampled	;wreg free
 13612  011920                     i2l562:
 13613                           
 13614                           ;mtouch_sensor.c: 509: }
 13615                           ;mtouch_sensor.c: 510: packet_sample[currentScanSensor] = ADFLTR;
 13616  011920  503B               	movf	_currentScanSensor,w,c
 13617  011922  0D02               	mullw	2
 13618  011924  0E29               	movlw	low _packet_sample
 13619  011926  24F3               	addwf	prodl,w,c
 13620  011928  6ED9               	movwf	fsr2l,c
 13621  01192A  0E00               	movlw	high _packet_sample
 13622  01192C  20F4               	addwfc	prodh,w,c
 13623  01192E  6EDA               	movwf	fsr2h,c
 13624  011930  CF72 FFDE          	movff	3954,postinc2	;volatile
 13625  011934  CF73 FFDD          	movff	3955,postdec2	;volatile
 13626  011938                     i2l560:
 13627                           
 13628                           ;mtouch_sensor.c: 511: }
 13629                           ;mtouch_sensor.c: 512: Sensor_scheduleNextScan();
 13630  011938  EC9C  F084         	call	i2_Sensor_scheduleNextScan	;wreg free
 13631  01193C  0012               	return		;funcret
 13632  01193E                     __end_of_MTOUCH_Sensor_Service:
 13633                           	opt stack 0
 13634                           tosu	equ	0xFFF
 13635                           tosh	equ	0xFFE
 13636                           tosl	equ	0xFFD
 13637                           pclatu	equ	0xFFB
 13638                           pclath	equ	0xFFA
 13639                           tblptru	equ	0xFF8
 13640                           tblptrh	equ	0xFF7
 13641                           tblptrl	equ	0xFF6
 13642                           tablat	equ	0xFF5
 13643                           prodh	equ	0xFF4
 13644                           prodl	equ	0xFF3
 13645                           intcon	equ	0xFF2
 13646                           postinc0	equ	0xFEE
 13647                           fsr0h	equ	0xFEA
 13648                           fsr0l	equ	0xFE9
 13649                           wreg	equ	0xFE8
 13650                           indf1	equ	0xFE7
 13651                           postinc1	equ	0xFE6
 13652                           postdec1	equ	0xFE5
 13653                           fsr1h	equ	0xFE2
 13654                           fsr1l	equ	0xFE1
 13655                           indf2	equ	0xFDF
 13656                           postinc2	equ	0xFDE
 13657                           postdec2	equ	0xFDD
 13658                           plusw2	equ	0xFDB
 13659                           fsr2h	equ	0xFDA
 13660                           fsr2l	equ	0xFD9
 13661                           status	equ	0xFD8
 13662                           
 13663 ;; *************** function i2_Sensor_scheduleNextScan *****************
 13664 ;; Defined at:
 13665 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13666 ;; Parameters:    Size  Location     Type
 13667 ;;		None
 13668 ;; Auto vars:     Size  Location     Type
 13669 ;;  Sensor_sched    2    6[COMRAM] PTR struct .
 13670 ;;		 -> mtouch_sensor(45), 
 13671 ;;  Sensor_sched    1    5[COMRAM] unsigned char 
 13672 ;;  Sensor_sched    1    4[COMRAM] unsigned char 
 13673 ;; Return value:  Size  Location     Type
 13674 ;;                  1    wreg      void 
 13675 ;; Registers used:
 13676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13677 ;; Tracked objects:
 13678 ;;		On entry : 0/0
 13679 ;;		On exit  : 0/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13683 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13684 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13686 ;;Total ram usage:        6 bytes
 13687 ;; Hardware stack levels used:    1
 13688 ;; Hardware stack levels required when called:    1
 13689 ;; This function calls:
 13690 ;;		i2_MTOUCH_Sensor_isEnabled
 13691 ;;		i2_MTOUCH_Sensor_wasSampled
 13692 ;;		i2_Sensor_SetTrisBit
 13693 ;;		i2_Sensor_isCalibrated
 13694 ;;		i2_Sensor_isCalibratingAcqTime
 13695 ;; This function is called by:
 13696 ;;		_MTOUCH_Sensor_Service
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           	psect	text86
 13701  010938                     __ptext86:
 13702                           	opt stack 0
 13703  010938                     i2_Sensor_scheduleNextScan:
 13704                           	opt stack 20
 13705                           
 13706                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
 13707                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
 13708                           
 13709                           ;incstack = 0
 13710  010938  0E00               	movlw	0
 13711  01093A  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13712                           
 13713                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
 13714  01093C  0E00               	movlw	0
 13715  01093E  BEF2               	btfsc	intcon,7,c	;volatile
 13716  010940  0E01               	movlw	1
 13717  010942  6E05               	movwf	i2Sensor_scheduleNextScan@state,c
 13718                           
 13719                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 13720  010944  D00C               	goto	i2l524
 13721  010946                     
 13722                           ;mtouch_sensor.c: 347: {
 13723                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
 13724  010946  2A3B               	incf	_currentScanSensor,f,c
 13725  010948  0E05               	movlw	5
 13726  01094A  183B               	xorwf	_currentScanSensor,w,c
 13727  01094C  A4D8               	btfss	status,2,c
 13728  01094E  D007               	goto	i2l524
 13729                           
 13730                           ;mtouch_sensor.c: 349: {
 13731                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
 13732  010950  0E00               	movlw	0
 13733  010952  6E3B               	movwf	_currentScanSensor,c
 13734                           
 13735                           ;mtouch_sensor.c: 351: sampling_flag = 0;
 13736  010954  0E00               	movlw	0
 13737  010956  6E3A               	movwf	_sampling_flag,c
 13738                           
 13739                           ;mtouch_sensor.c: 352: skipScan = 1;
 13740  010958  0E01               	movlw	1
 13741  01095A  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13742                           
 13743                           ;mtouch_sensor.c: 353: break;
 13744  01095C  D00C               	goto	i2u364_40
 13745  01095E                     i2l524:
 13746  01095E  503B               	movf	_currentScanSensor,w,c
 13747  010960  EC49  F090         	call	i2_MTOUCH_Sensor_wasSampled
 13748  010964  0900               	iorlw	0
 13749  010966  A4D8               	btfss	status,2,c
 13750  010968  D7EE               	goto	i2l523
 13751  01096A  503B               	movf	_currentScanSensor,w,c
 13752  01096C  EC62  F090         	call	i2_MTOUCH_Sensor_isEnabled
 13753  010970  0900               	iorlw	0
 13754  010972  B4D8               	btfsc	status,2,c
 13755  010974  D7E8               	goto	i2l523
 13756  010976                     i2u364_40:
 13757                           
 13758                           ;mtouch_sensor.c: 354: }
 13759                           ;mtouch_sensor.c: 355: }
 13760                           ;mtouch_sensor.c: 358: if(skipScan==0)
 13761  010976  5006               	movf	i2Sensor_scheduleNextScan@skipScan,w,c
 13762  010978  A4D8               	btfss	status,2,c
 13763  01097A  0012               	return	
 13764                           
 13765                           ;mtouch_sensor.c: 359: {
 13766                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
 13767  01097C  503B               	movf	_currentScanSensor,w,c
 13768  01097E  0D09               	mullw	9
 13769  010980  0E82               	movlw	low _mtouch_sensor
 13770  010982  24F3               	addwf	prodl,w,c
 13771  010984  6E07               	movwf	i2Sensor_scheduleNextScan@sensor,c
 13772  010986  0E00               	movlw	high _mtouch_sensor
 13773  010988  20F4               	addwfc	prodh,w,c
 13774  01098A  6E08               	movwf	i2Sensor_scheduleNextScan@sensor+1,c
 13775                           
 13776                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
 13777  01098C  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 13778  010990  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibrated@sensor+1
 13779  010994  ECF4  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13780  010998  0900               	iorlw	0
 13781  01099A  B4D8               	btfsc	status,2,c
 13782  01099C  D012               	goto	i2l527
 13783                           
 13784                           ;mtouch_sensor.c: 362: {
 13785                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
 13786  01099E  EE20 F003          	lfsr	2,3
 13787  0109A2  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13788  0109A4  26D9               	addwf	fsr2l,f,c
 13789  0109A6  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13790  0109A8  22DA               	addwfc	fsr2h,f,c
 13791  0109AA  50DF               	movf	indf2,w,c
 13792  0109AC  010F               	movlb	15	; () banked
 13793  0109AE  6F5C               	movwf	92,b	;volatile
 13794                           
 13795                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
 13796  0109B0  EE20 F002          	lfsr	2,2
 13797  0109B4  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13798  0109B6  26D9               	addwf	fsr2l,f,c
 13799  0109B8  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13800  0109BA  22DA               	addwfc	fsr2h,f,c
 13801  0109BC  50DF               	movf	indf2,w,c
 13802  0109BE  6F5E               	movwf	94,b	;volatile
 13803                           
 13804                           ;mtouch_sensor.c: 365: }
 13805  0109C0  D01F               	goto	i2l530
 13806  0109C2                     i2l527:
 13807                           
 13808                           ;mtouch_sensor.c: 366: else
 13809                           ;mtouch_sensor.c: 367: {
 13810                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
 13811                           
 13812                           ; BSR set to: 15
 13813  0109C2  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 13814  0109C6  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 13815  0109CA  EC00  F092         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 13816  0109CE  0900               	iorlw	0
 13817  0109D0  B4D8               	btfsc	status,2,c
 13818  0109D2  D011               	goto	i2l529
 13819                           
 13820                           ;mtouch_sensor.c: 369: {
 13821                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
 13822  0109D4  EE20 F002          	lfsr	2,2
 13823  0109D8  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13824  0109DA  26D9               	addwf	fsr2l,f,c
 13825  0109DC  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13826  0109DE  22DA               	addwfc	fsr2h,f,c
 13827  0109E0  50DF               	movf	indf2,w,c
 13828  0109E2  010F               	movlb	15	; () banked
 13829  0109E4  6F5E               	movwf	94,b	;volatile
 13830                           
 13831                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
 13832  0109E6  EE20 F003          	lfsr	2,3
 13833  0109EA  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13834  0109EC  26D9               	addwf	fsr2l,f,c
 13835  0109EE  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13836  0109F0  22DA               	addwfc	fsr2h,f,c
 13837  0109F2  50DF               	movf	indf2,w,c
 13838  0109F4  D004               	goto	L5
 13839  0109F6                     i2l529:
 13840                           
 13841                           ;mtouch_sensor.c: 373: else
 13842                           ;mtouch_sensor.c: 374: {
 13843                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13844                           
 13845                           ; BSR set to: 15
 13846  0109F6  0E80               	movlw	128
 13847  0109F8  010F               	movlb	15	; () banked
 13848  0109FA  6F5E               	movwf	94,b	;volatile
 13849                           
 13850                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13851  0109FC  0E80               	movlw	128
 13852  0109FE                     L5:
 13853  0109FE  6F5C               	movwf	92,b	;volatile
 13854  010A00                     i2l530:
 13855                           
 13856                           ; BSR set to: 15
 13857                           ;mtouch_sensor.c: 377: }
 13858                           ;mtouch_sensor.c: 378: }
 13859                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
 13860                           
 13861                           ; BSR set to: 15
 13862                           
 13863                           ; BSR set to: 15
 13864  010A00  5038               	movf	_sample_delay,w,c
 13865  010A02  275E               	addwf	94,f,b	;volatile
 13866                           
 13867                           ; BSR set to: 15
 13868                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
 13869  010A04  EE20 F001          	lfsr	2,1
 13870  010A08  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13871  010A0A  26D9               	addwf	fsr2l,f,c
 13872  010A0C  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13873  010A0E  22DA               	addwfc	fsr2h,f,c
 13874  010A10  50DF               	movf	indf2,w,c
 13875  010A12  6F5F               	movwf	95,b	;volatile
 13876                           
 13877                           ; BSR set to: 15
 13878                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
 13879  010A14  EE20 F004          	lfsr	2,4
 13880  010A18  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13881  010A1A  26D9               	addwf	fsr2l,f,c
 13882  010A1C  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13883  010A1E  22DA               	addwfc	fsr2h,f,c
 13884  010A20  50DF               	movf	indf2,w,c
 13885  010A22  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13886  010A24  90D8               	bcf	status,0,c
 13887  010A26  3003               	rrcf	??i2_Sensor_scheduleNextScan,w,c
 13888  010A28  6E66               	movwf	3942,c	;volatile
 13889                           
 13890                           ; BSR set to: 15
 13891                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
 13892  010A2A  EE20 F005          	lfsr	2,5
 13893  010A2E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13894  010A30  26D9               	addwf	fsr2l,f,c
 13895  010A32  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13896  010A34  22DA               	addwfc	fsr2h,f,c
 13897  010A36  50DF               	movf	indf2,w,c
 13898  010A38  6F5D               	movwf	93,b	;volatile
 13899                           
 13900                           ; BSR set to: 15
 13901                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
 13902  010A3A  8E60               	bsf	3936,7,c	;volatile
 13903                           
 13904                           ; BSR set to: 15
 13905                           ;mtouch_sensor.c: 385: sampling_flag= 1;
 13906  010A3C  0E01               	movlw	1
 13907  010A3E  6E3A               	movwf	_sampling_flag,c
 13908                           
 13909                           ; BSR set to: 15
 13910                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
 13911  010A40  0E01               	movlw	1
 13912  010A42  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 13913  010A44  503B               	movf	_currentScanSensor,w,c
 13914  010A46  ECD2  F08C         	call	i2_Sensor_SetTrisBit
 13915                           
 13916                           ;mtouch_sensor.c: 387: GIE = 0;
 13917  010A4A  9EF2               	bcf	intcon,7,c	;volatile
 13918                           
 13919                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
 13920  010A4C  8060               	bsf	3936,0,c	;volatile
 13921                           
 13922                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 13923  010A4E  EE20 F004          	lfsr	2,4
 13924  010A52  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13925  010A54  26D9               	addwf	fsr2l,f,c
 13926  010A56  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13927  010A58  22DA               	addwfc	fsr2h,f,c
 13928  010A5A  50DF               	movf	indf2,w,c
 13929  010A5C  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13930  010A5E  6A04               	clrf	(??i2_Sensor_scheduleNextScan+1)& (0+255),c
 13931  010A60  0E09               	movlw	9
 13932  010A62                     i2u368_45:
 13933  010A62  90D8               	bcf	status,0,c
 13934  010A64  3603               	rlcf	??i2_Sensor_scheduleNextScan,f,c
 13935  010A66  3604               	rlcf	??i2_Sensor_scheduleNextScan+1,f,c
 13936  010A68  2EE8               	decfsz	wreg,f,c
 13937  010A6A  D7FB               	goto	i2u368_45
 13938  010A6C  C003  FF70         	movff	??i2_Sensor_scheduleNextScan,3952	;volatile
 13939  010A70  C004  FF71         	movff	??i2_Sensor_scheduleNextScan+1,3953	;volatile
 13940                           
 13941                           ;mtouch_sensor.c: 390: GIE = state;
 13942  010A74  A005               	btfss	i2Sensor_scheduleNextScan@state,0,c
 13943  010A76  D002               	goto	i2u369_40
 13944  010A78  8EF2               	bsf	intcon,7,c	;volatile
 13945  010A7A  D001               	goto	i2u370_45
 13946  010A7C                     i2u369_40:
 13947  010A7C  9EF2               	bcf	intcon,7,c	;volatile
 13948  010A7E                     i2u370_45:
 13949                           
 13950                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
 13951  010A7E  0E00               	movlw	0
 13952  010A80  6E39               	movwf	_scanInterrupted,c	;volatile
 13953  010A82  0012               	return	
 13954  010A84                     __end_ofi2_Sensor_scheduleNextScan:
 13955                           	opt stack 0
 13956                           tosu	equ	0xFFF
 13957                           tosh	equ	0xFFE
 13958                           tosl	equ	0xFFD
 13959                           pclatu	equ	0xFFB
 13960                           pclath	equ	0xFFA
 13961                           tblptru	equ	0xFF8
 13962                           tblptrh	equ	0xFF7
 13963                           tblptrl	equ	0xFF6
 13964                           tablat	equ	0xFF5
 13965                           prodh	equ	0xFF4
 13966                           prodl	equ	0xFF3
 13967                           intcon	equ	0xFF2
 13968                           postinc0	equ	0xFEE
 13969                           fsr0h	equ	0xFEA
 13970                           fsr0l	equ	0xFE9
 13971                           wreg	equ	0xFE8
 13972                           indf1	equ	0xFE7
 13973                           postinc1	equ	0xFE6
 13974                           postdec1	equ	0xFE5
 13975                           fsr1h	equ	0xFE2
 13976                           fsr1l	equ	0xFE1
 13977                           indf2	equ	0xFDF
 13978                           postinc2	equ	0xFDE
 13979                           postdec2	equ	0xFDD
 13980                           plusw2	equ	0xFDB
 13981                           fsr2h	equ	0xFDA
 13982                           fsr2l	equ	0xFD9
 13983                           status	equ	0xFD8
 13984                           
 13985 ;; *************** function i2_Sensor_isCalibrated *****************
 13986 ;; Defined at:
 13987 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13988 ;; Parameters:    Size  Location     Type
 13989 ;;  sensor          2    0[COMRAM] PTR struct .
 13990 ;;		 -> mtouch_sensor(45), 
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;		None
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      unsigned char 
 13995 ;; Registers used:
 13996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13997 ;; Tracked objects:
 13998 ;;		On entry : 0/0
 13999 ;;		On exit  : 0/0
 14000 ;;		Unchanged: 0/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14006 ;;Total ram usage:        2 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; This function calls:
 14009 ;;		Nothing
 14010 ;; This function is called by:
 14011 ;;		_MTOUCH_Sensor_Service
 14012 ;;		i2_Sensor_scheduleNextScan
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text87
 14017  0123E8                     __ptext87:
 14018                           	opt stack 0
 14019  0123E8                     i2_Sensor_isCalibrated:
 14020                           	opt stack 20
 14021                           
 14022                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
 14023                           
 14024                           ;incstack = 0
 14025  0123E8  EE20 F008          	lfsr	2,8
 14026  0123EC  5001               	movf	i2Sensor_isCalibrated@sensor,w,c
 14027  0123EE  26D9               	addwf	fsr2l,f,c
 14028  0123F0  5002               	movf	i2Sensor_isCalibrated@sensor+1,w,c
 14029  0123F2  22DA               	addwfc	fsr2h,f,c
 14030  0123F4  A6DF               	btfss	indf2,3,c
 14031  0123F6  D002               	goto	i2u314_40
 14032  0123F8  0E01               	movlw	1
 14033  0123FA  0012               	return	
 14034  0123FC                     i2u314_40:
 14035  0123FC  0E00               	movlw	0
 14036  0123FE  0012               	return	
 14037  012400                     __end_ofi2_Sensor_isCalibrated:
 14038                           	opt stack 0
 14039                           tosu	equ	0xFFF
 14040                           tosh	equ	0xFFE
 14041                           tosl	equ	0xFFD
 14042                           pclatu	equ	0xFFB
 14043                           pclath	equ	0xFFA
 14044                           tblptru	equ	0xFF8
 14045                           tblptrh	equ	0xFF7
 14046                           tblptrl	equ	0xFF6
 14047                           tablat	equ	0xFF5
 14048                           prodh	equ	0xFF4
 14049                           prodl	equ	0xFF3
 14050                           intcon	equ	0xFF2
 14051                           postinc0	equ	0xFEE
 14052                           fsr0h	equ	0xFEA
 14053                           fsr0l	equ	0xFE9
 14054                           wreg	equ	0xFE8
 14055                           indf1	equ	0xFE7
 14056                           postinc1	equ	0xFE6
 14057                           postdec1	equ	0xFE5
 14058                           fsr1h	equ	0xFE2
 14059                           fsr1l	equ	0xFE1
 14060                           indf2	equ	0xFDF
 14061                           postinc2	equ	0xFDE
 14062                           postdec2	equ	0xFDD
 14063                           plusw2	equ	0xFDB
 14064                           fsr2h	equ	0xFDA
 14065                           fsr2l	equ	0xFD9
 14066                           status	equ	0xFD8
 14067                           
 14068 ;; *************** function i2_Sensor_SetTrisBit *****************
 14069 ;; Defined at:
 14070 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;  sensor          1    wreg     enum E17513
 14073 ;;  TrisBit         1    0[COMRAM] unsigned char 
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;  sensor          1    1[COMRAM] enum E17513
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  1    wreg      void 
 14078 ;; Registers used:
 14079 ;;		wreg, status,2, status,0
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14085 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14089 ;;Total ram usage:        2 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_MTOUCH_Sensor_Service
 14095 ;;		i2_Sensor_scheduleNextScan
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           	psect	text88
 14100  0119A4                     __ptext88:
 14101                           	opt stack 0
 14102  0119A4                     i2_Sensor_SetTrisBit:
 14103                           	opt stack 20
 14104                           
 14105                           ;incstack = 0
 14106                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 14107  0119A4  6E02               	movwf	i2Sensor_SetTrisBit@sensor,c
 14108                           
 14109                           ;mtouch_sensor.c: 224: switch(sensor)
 14110  0119A6  D01E               	goto	i2l493
 14111  0119A8                     i2l494:
 14112                           
 14113                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
 14114  0119A8  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 14115  0119AA  D002               	bra	i2u307_45
 14116  0119AC  9485               	bcf	3973,2,c	;volatile
 14117  0119AE  D001               	bra	i2u307_46
 14118  0119B0                     i2u307_45:
 14119  0119B0  8485               	bsf	3973,2,c	;volatile
 14120  0119B2                     i2u307_46:
 14121                           
 14122                           ;mtouch_sensor.c: 228: break;
 14123  0119B2  0012               	return	
 14124  0119B4                     i2l496:
 14125                           
 14126                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
 14127  0119B4  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 14128  0119B6  D002               	bra	i2u308_45
 14129  0119B8  9685               	bcf	3973,3,c	;volatile
 14130  0119BA  D001               	bra	i2u308_46
 14131  0119BC                     i2u308_45:
 14132  0119BC  8685               	bsf	3973,3,c	;volatile
 14133  0119BE                     i2u308_46:
 14134                           
 14135                           ;mtouch_sensor.c: 231: break;
 14136  0119BE  0012               	return	
 14137  0119C0                     i2l497:
 14138                           
 14139                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
 14140  0119C0  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 14141  0119C2  D002               	bra	i2u309_45
 14142  0119C4  9885               	bcf	3973,4,c	;volatile
 14143  0119C6  D001               	bra	i2u309_46
 14144  0119C8                     i2u309_45:
 14145  0119C8  8885               	bsf	3973,4,c	;volatile
 14146  0119CA                     i2u309_46:
 14147                           
 14148                           ;mtouch_sensor.c: 234: break;
 14149  0119CA  0012               	return	
 14150  0119CC                     i2l498:
 14151                           
 14152                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
 14153  0119CC  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 14154  0119CE  D002               	bra	i2u310_45
 14155  0119D0  9A85               	bcf	3973,5,c	;volatile
 14156  0119D2  D001               	bra	i2u310_46
 14157  0119D4                     i2u310_45:
 14158  0119D4  8A85               	bsf	3973,5,c	;volatile
 14159  0119D6                     i2u310_46:
 14160                           
 14161                           ;mtouch_sensor.c: 237: break;
 14162  0119D6  0012               	return	
 14163  0119D8                     i2l499:
 14164                           
 14165                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
 14166  0119D8  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 14167  0119DA  D002               	bra	i2u311_45
 14168  0119DC  9C85               	bcf	3973,6,c	;volatile
 14169  0119DE  D001               	bra	i2u311_46
 14170  0119E0                     i2u311_45:
 14171  0119E0  8C85               	bsf	3973,6,c	;volatile
 14172  0119E2                     i2u311_46:
 14173                           
 14174                           ;mtouch_sensor.c: 242: }
 14175                           
 14176                           ;mtouch_sensor.c: 241: default: break;
 14177                           
 14178                           ;mtouch_sensor.c: 240: break;
 14179  0119E2  0012               	return	
 14180  0119E4                     i2l493:
 14181  0119E4  5002               	movf	i2Sensor_SetTrisBit@sensor,w,c
 14182                           
 14183                           ; Switch size 1, requested type "space"
 14184                           ; Number of cases is 5, Range of values is 0 to 4
 14185                           ; switch strategies available:
 14186                           ; Name         Instructions Cycles
 14187                           ; simple_byte           16     9 (average)
 14188                           ;	Chosen strategy is simple_byte
 14189  0119E6  0A00               	xorlw	0	; case 0
 14190  0119E8  B4D8               	btfsc	status,2,c
 14191  0119EA  D7DE               	goto	i2l494
 14192  0119EC  0A01               	xorlw	1	; case 1
 14193  0119EE  B4D8               	btfsc	status,2,c
 14194  0119F0  D7E1               	goto	i2l496
 14195  0119F2  0A03               	xorlw	3	; case 2
 14196  0119F4  B4D8               	btfsc	status,2,c
 14197  0119F6  D7E4               	goto	i2l497
 14198  0119F8  0A01               	xorlw	1	; case 3
 14199  0119FA  B4D8               	btfsc	status,2,c
 14200  0119FC  D7E7               	goto	i2l498
 14201  0119FE  0A07               	xorlw	7	; case 4
 14202  011A00  A4D8               	btfss	status,2,c
 14203  011A02  0012               	return	
 14204  011A04  D7E9               	goto	i2l499
 14205  011A06                     __end_ofi2_Sensor_SetTrisBit:
 14206                           	opt stack 0
 14207                           tosu	equ	0xFFF
 14208                           tosh	equ	0xFFE
 14209                           tosl	equ	0xFFD
 14210                           pclatu	equ	0xFFB
 14211                           pclath	equ	0xFFA
 14212                           tblptru	equ	0xFF8
 14213                           tblptrh	equ	0xFF7
 14214                           tblptrl	equ	0xFF6
 14215                           tablat	equ	0xFF5
 14216                           prodh	equ	0xFF4
 14217                           prodl	equ	0xFF3
 14218                           intcon	equ	0xFF2
 14219                           postinc0	equ	0xFEE
 14220                           fsr0h	equ	0xFEA
 14221                           fsr0l	equ	0xFE9
 14222                           wreg	equ	0xFE8
 14223                           indf1	equ	0xFE7
 14224                           postinc1	equ	0xFE6
 14225                           postdec1	equ	0xFE5
 14226                           fsr1h	equ	0xFE2
 14227                           fsr1l	equ	0xFE1
 14228                           indf2	equ	0xFDF
 14229                           postinc2	equ	0xFDE
 14230                           postdec2	equ	0xFDD
 14231                           plusw2	equ	0xFDB
 14232                           fsr2h	equ	0xFDA
 14233                           fsr2l	equ	0xFD9
 14234                           status	equ	0xFD8
 14235                           
 14236 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 14237 ;; Defined at:
 14238 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;  sensor          1    wreg     enum E17513
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;  sensor          1    0[COMRAM] enum E17513
 14243 ;; Return value:  Size  Location     Type
 14244 ;;                  1    wreg      unsigned char 
 14245 ;; Registers used:
 14246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14247 ;; Tracked objects:
 14248 ;;		On entry : 0/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14256 ;;Total ram usage:        1 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; This function calls:
 14259 ;;		Nothing
 14260 ;; This function is called by:
 14261 ;;		i2_Sensor_scheduleNextScan
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           	psect	text89
 14266  012092                     __ptext89:
 14267                           	opt stack 0
 14268  012092                     i2_MTOUCH_Sensor_wasSampled:
 14269                           	opt stack 20
 14270                           
 14271                           ;incstack = 0
 14272                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 14273  012092  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor,c
 14274                           
 14275                           ;mtouch_sensor.c: 822: if(sensor < 5)
 14276  012094  0E05               	movlw	5
 14277  012096  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor,c
 14278  012098  D013               	goto	i2l687
 14279                           
 14280                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
 14281  01209A  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor,w,c
 14282  01209C  0D09               	mullw	9
 14283  01209E  0E08               	movlw	8
 14284  0120A0  26F3               	addwf	prodl,f,c
 14285  0120A2  0E00               	movlw	0
 14286  0120A4  22F4               	addwfc	prodh,f,c
 14287  0120A6  0E82               	movlw	low _mtouch_sensor
 14288  0120A8  24F3               	addwf	prodl,w,c
 14289  0120AA  6ED9               	movwf	fsr2l,c
 14290  0120AC  0E00               	movlw	high _mtouch_sensor
 14291  0120AE  20F4               	addwfc	prodh,w,c
 14292  0120B0  6EDA               	movwf	fsr2h,c
 14293  0120B2  0100               	movlb	0	; () banked
 14294  0120B4  A2DF               	btfss	indf2,1,c
 14295  0120B6  D002               	goto	i2u317_40
 14296  0120B8  0E01               	movlw	1
 14297  0120BA  0012               	return	
 14298  0120BC                     i2u317_40:
 14299  0120BC  0E00               	movlw	0
 14300                           
 14301                           ; BSR set to: 0
 14302                           
 14303                           ; BSR set to: 0
 14304  0120BE  0012               	return	
 14305  0120C0                     i2l687:
 14306                           
 14307                           ;mtouch_sensor.c: 824: else
 14308                           ;mtouch_sensor.c: 825: return 0;
 14309                           
 14310                           ; BSR set to: 0
 14311  0120C0  0E00               	movlw	0
 14312  0120C2  0012               	return	
 14313  0120C4                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 14314                           	opt stack 0
 14315                           tosu	equ	0xFFF
 14316                           tosh	equ	0xFFE
 14317                           tosl	equ	0xFFD
 14318                           pclatu	equ	0xFFB
 14319                           pclath	equ	0xFFA
 14320                           tblptru	equ	0xFF8
 14321                           tblptrh	equ	0xFF7
 14322                           tblptrl	equ	0xFF6
 14323                           tablat	equ	0xFF5
 14324                           prodh	equ	0xFF4
 14325                           prodl	equ	0xFF3
 14326                           intcon	equ	0xFF2
 14327                           postinc0	equ	0xFEE
 14328                           fsr0h	equ	0xFEA
 14329                           fsr0l	equ	0xFE9
 14330                           wreg	equ	0xFE8
 14331                           indf1	equ	0xFE7
 14332                           postinc1	equ	0xFE6
 14333                           postdec1	equ	0xFE5
 14334                           fsr1h	equ	0xFE2
 14335                           fsr1l	equ	0xFE1
 14336                           indf2	equ	0xFDF
 14337                           postinc2	equ	0xFDE
 14338                           postdec2	equ	0xFDD
 14339                           plusw2	equ	0xFDB
 14340                           fsr2h	equ	0xFDA
 14341                           fsr2l	equ	0xFD9
 14342                           status	equ	0xFD8
 14343                           
 14344 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 14345 ;; Defined at:
 14346 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;  sensor          1    wreg     enum E17513
 14349 ;; Auto vars:     Size  Location     Type
 14350 ;;  sensor          1    0[COMRAM] enum E17513
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  1    wreg      unsigned char 
 14353 ;; Registers used:
 14354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14364 ;;Total ram usage:        1 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		i2_Sensor_scheduleNextScan
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text90
 14374  0120C4                     __ptext90:
 14375                           	opt stack 0
 14376  0120C4                     i2_MTOUCH_Sensor_isEnabled:
 14377                           	opt stack 20
 14378                           
 14379                           ;incstack = 0
 14380                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 14381  0120C4  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor,c
 14382                           
 14383                           ;mtouch_sensor.c: 719: if(sensor < 5)
 14384  0120C6  0E05               	movlw	5
 14385  0120C8  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor,c
 14386  0120CA  D013               	goto	i2l641
 14387                           
 14388                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
 14389  0120CC  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor,w,c
 14390  0120CE  0D09               	mullw	9
 14391  0120D0  0E08               	movlw	8
 14392  0120D2  26F3               	addwf	prodl,f,c
 14393  0120D4  0E00               	movlw	0
 14394  0120D6  22F4               	addwfc	prodh,f,c
 14395  0120D8  0E82               	movlw	low _mtouch_sensor
 14396  0120DA  24F3               	addwf	prodl,w,c
 14397  0120DC  6ED9               	movwf	fsr2l,c
 14398  0120DE  0E00               	movlw	high _mtouch_sensor
 14399  0120E0  20F4               	addwfc	prodh,w,c
 14400  0120E2  6EDA               	movwf	fsr2h,c
 14401  0120E4  0100               	movlb	0	; () banked
 14402  0120E6  A0DF               	btfss	indf2,0,c
 14403  0120E8  D002               	goto	i2u313_40
 14404  0120EA  0E01               	movlw	1
 14405  0120EC  0012               	return	
 14406  0120EE                     i2u313_40:
 14407  0120EE  0E00               	movlw	0
 14408                           
 14409                           ; BSR set to: 0
 14410                           
 14411                           ; BSR set to: 0
 14412  0120F0  0012               	return	
 14413  0120F2                     i2l641:
 14414                           
 14415                           ;mtouch_sensor.c: 721: else
 14416                           ;mtouch_sensor.c: 722: return 0;
 14417                           
 14418                           ; BSR set to: 0
 14419  0120F2  0E00               	movlw	0
 14420  0120F4  0012               	return	
 14421  0120F6                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 14422                           	opt stack 0
 14423                           tosu	equ	0xFFF
 14424                           tosh	equ	0xFFE
 14425                           tosl	equ	0xFFD
 14426                           pclatu	equ	0xFFB
 14427                           pclath	equ	0xFFA
 14428                           tblptru	equ	0xFF8
 14429                           tblptrh	equ	0xFF7
 14430                           tblptrl	equ	0xFF6
 14431                           tablat	equ	0xFF5
 14432                           prodh	equ	0xFF4
 14433                           prodl	equ	0xFF3
 14434                           intcon	equ	0xFF2
 14435                           postinc0	equ	0xFEE
 14436                           fsr0h	equ	0xFEA
 14437                           fsr0l	equ	0xFE9
 14438                           wreg	equ	0xFE8
 14439                           indf1	equ	0xFE7
 14440                           postinc1	equ	0xFE6
 14441                           postdec1	equ	0xFE5
 14442                           fsr1h	equ	0xFE2
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           plusw2	equ	0xFDB
 14448                           fsr2h	equ	0xFDA
 14449                           fsr2l	equ	0xFD9
 14450                           status	equ	0xFD8
 14451                           
 14452 ;; *************** function _Sensor_setSampled *****************
 14453 ;; Defined at:
 14454 ;;		line 833 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14455 ;; Parameters:    Size  Location     Type
 14456 ;;  sensor          2    0[COMRAM] PTR struct .
 14457 ;;		 -> mtouch_sensor(45), 
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;		None
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      void 
 14462 ;; Registers used:
 14463 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14472 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14473 ;;Total ram usage:        2 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; This function calls:
 14476 ;;		Nothing
 14477 ;; This function is called by:
 14478 ;;		_MTOUCH_Sensor_Service
 14479 ;; This function uses a non-reentrant model
 14480 ;;
 14481                           
 14482                           	psect	text91
 14483  012460                     __ptext91:
 14484                           	opt stack 0
 14485  012460                     _Sensor_setSampled:
 14486                           	opt stack 21
 14487                           
 14488                           ;mtouch_sensor.c: 835: sensor->sampled = 1;
 14489                           
 14490                           ;incstack = 0
 14491  012460  EE20 F008          	lfsr	2,8
 14492  012464  5001               	movf	Sensor_setSampled@sensor,w,c
 14493  012466  26D9               	addwf	fsr2l,f,c
 14494  012468  5002               	movf	Sensor_setSampled@sensor+1,w,c
 14495  01246A  22DA               	addwfc	fsr2h,f,c
 14496  01246C  82DF               	bsf	indf2,1,c
 14497  01246E  0012               	return		;funcret
 14498  012470                     __end_of_Sensor_setSampled:
 14499                           	opt stack 0
 14500                           tosu	equ	0xFFF
 14501                           tosh	equ	0xFFE
 14502                           tosl	equ	0xFFD
 14503                           pclatu	equ	0xFFB
 14504                           pclath	equ	0xFFA
 14505                           tblptru	equ	0xFF8
 14506                           tblptrh	equ	0xFF7
 14507                           tblptrl	equ	0xFF6
 14508                           tablat	equ	0xFF5
 14509                           prodh	equ	0xFF4
 14510                           prodl	equ	0xFF3
 14511                           intcon	equ	0xFF2
 14512                           postinc0	equ	0xFEE
 14513                           fsr0h	equ	0xFEA
 14514                           fsr0l	equ	0xFE9
 14515                           wreg	equ	0xFE8
 14516                           indf1	equ	0xFE7
 14517                           postinc1	equ	0xFE6
 14518                           postdec1	equ	0xFE5
 14519                           fsr1h	equ	0xFE2
 14520                           fsr1l	equ	0xFE1
 14521                           indf2	equ	0xFDF
 14522                           postinc2	equ	0xFDE
 14523                           postdec2	equ	0xFDD
 14524                           plusw2	equ	0xFDB
 14525                           fsr2h	equ	0xFDA
 14526                           fsr2l	equ	0xFD9
 14527                           status	equ	0xFD8
 14528                           
 14529 ;; *************** function _Sensor_autoCalibration *****************
 14530 ;; Defined at:
 14531 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  sensor          2    4[COMRAM] PTR struct .
 14534 ;;		 -> mtouch_sensor(45), 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  name            1   12[COMRAM] enum E17513
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  1    wreg      enum E17519
 14539 ;; Registers used:
 14540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14548 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14549 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14550 ;;Total ram usage:        9 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    1
 14553 ;; This function calls:
 14554 ;;		_Sensor_setCalibratAcqTime
 14555 ;;		_Sensor_setCalibrated
 14556 ;;		i2_Sensor_isCalibratingAcqTime
 14557 ;;		i2_abs
 14558 ;; This function is called by:
 14559 ;;		_MTOUCH_Sensor_Service
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           	psect	text92
 14564  010BC4                     __ptext92:
 14565                           	opt stack 0
 14566  010BC4                     _Sensor_autoCalibration:
 14567                           	opt stack 20
 14568                           
 14569                           ;mtouch_sensor.c: 404: enum mtouch_sensor_names name = sensor->sensor_name;
 14570                           
 14571                           ;incstack = 0
 14572  010BC4  C005  FFD9         	movff	Sensor_autoCalibration@sensor,fsr2l
 14573  010BC8  C006  FFDA         	movff	Sensor_autoCalibration@sensor+1,fsr2h
 14574  010BCC  50DF               	movf	indf2,w,c
 14575  010BCE  6E0D               	movwf	Sensor_autoCalibration@name,c
 14576                           
 14577                           ;mtouch_sensor.c: 406: if(!Sensor_isCalibratingAcqTime(sensor))
 14578  010BD0  C005  F001         	movff	Sensor_autoCalibration@sensor,i2Sensor_isCalibratingAcqTime@sensor
 14579  010BD4  C006  F002         	movff	Sensor_autoCalibration@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 14580  010BD8  EC00  F092         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 14581  010BDC  0900               	iorlw	0
 14582  010BDE  A4D8               	btfss	status,2,c
 14583  010BE0  D02D               	goto	i2l534
 14584                           
 14585                           ;mtouch_sensor.c: 407: {
 14586                           ;mtouch_sensor.c: 408: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 14587  010BE2  EE20 F004          	lfsr	2,4
 14588  010BE6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14589  010BE8  26D9               	addwf	fsr2l,f,c
 14590  010BEA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14591  010BEC  22DA               	addwfc	fsr2h,f,c
 14592  010BEE  50DF               	movf	indf2,w,c
 14593  010BF0  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14594  010BF2  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14595  010BF4  0E09               	movlw	9
 14596  010BF6                     i2u347_45:
 14597  010BF6  90D8               	bcf	status,0,c
 14598  010BF8  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14599  010BFA  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14600  010BFC  2EE8               	decfsz	wreg,f,c
 14601  010BFE  D7FB               	goto	i2u347_45
 14602  010C00  5072               	movf	3954,w,c	;volatile
 14603  010C02  5C07               	subwf	??_Sensor_autoCalibration,w,c
 14604  010C04  5073               	movf	3955,w,c	;volatile
 14605  010C06  5808               	subwfb	??_Sensor_autoCalibration+1,w,c
 14606  010C08  B0D8               	btfsc	status,0,c
 14607  010C0A  D011               	goto	i2l535
 14608                           
 14609                           ;mtouch_sensor.c: 409: {
 14610                           ;mtouch_sensor.c: 410: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 14611  010C0C  EE20 F005          	lfsr	2,5
 14612  010C10  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14613  010C12  26D9               	addwf	fsr2l,f,c
 14614  010C14  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14615  010C16  22DA               	addwfc	fsr2h,f,c
 14616  010C18  2ADF               	incf	indf2,f,c
 14617  010C1A  0E1E               	movlw	30
 14618  010C1C  64DF               	cpfsgt	indf2,c
 14619  010C1E  0012               	return	
 14620                           
 14621                           ;mtouch_sensor.c: 411: Sensor_setCalibratAcqTime(sensor);
 14622  010C20  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14623  010C24  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14624  010C28  EC93  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14625                           
 14626                           ;mtouch_sensor.c: 412: }
 14627  010C2C  0012               	return	
 14628  010C2E                     i2l535:
 14629                           
 14630                           ;mtouch_sensor.c: 413: else
 14631                           ;mtouch_sensor.c: 414: {
 14632                           ;mtouch_sensor.c: 415: Sensor_setCalibratAcqTime(sensor);
 14633  010C2E  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14634  010C32  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14635  010C36  EC93  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14636                           
 14637                           ;mtouch_sensor.c: 416: }
 14638                           ;mtouch_sensor.c: 417: }
 14639  010C3A  0012               	return	
 14640  010C3C                     i2l534:
 14641                           
 14642                           ;mtouch_sensor.c: 418: else
 14643                           ;mtouch_sensor.c: 419: {
 14644                           ;mtouch_sensor.c: 420: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 14645  010C3C  EE20 F004          	lfsr	2,4
 14646  010C40  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14647  010C42  26D9               	addwf	fsr2l,f,c
 14648  010C44  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14649  010C46  22DA               	addwfc	fsr2h,f,c
 14650  010C48  50DF               	movf	indf2,w,c
 14651  010C4A  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14652  010C4C  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14653  010C4E  90D8               	bcf	status,0,c
 14654  010C50  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14655  010C52  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14656  010C54  500D               	movf	Sensor_autoCalibration@name,w,c
 14657  010C56  0D02               	mullw	2
 14658  010C58  0E29               	movlw	low _packet_sample
 14659  010C5A  24F3               	addwf	prodl,w,c
 14660  010C5C  6ED9               	movwf	fsr2l,c
 14661  010C5E  0E00               	movlw	high _packet_sample
 14662  010C60  20F4               	addwfc	prodh,w,c
 14663  010C62  6EDA               	movwf	fsr2h,c
 14664  010C64  CFDE F009          	movff	postinc2,??_Sensor_autoCalibration+2
 14665  010C68  CFDD F00A          	movff	postdec2,??_Sensor_autoCalibration+3
 14666  010C6C  CF72 F00B          	movff	3954,??_Sensor_autoCalibration+4	;volatile
 14667  010C70  CF73 F00C          	movff	3955,??_Sensor_autoCalibration+5	;volatile
 14668  010C74  1E0B               	comf	??_Sensor_autoCalibration+4,f,c
 14669  010C76  1E0C               	comf	??_Sensor_autoCalibration+5,f,c
 14670  010C78  4A0B               	infsnz	??_Sensor_autoCalibration+4,f,c
 14671  010C7A  2A0C               	incf	??_Sensor_autoCalibration+5,f,c
 14672  010C7C  5009               	movf	??_Sensor_autoCalibration+2,w,c
 14673  010C7E  240B               	addwf	??_Sensor_autoCalibration+4,w,c
 14674  010C80  6E01               	movwf	i2abs@a,c
 14675  010C82  500A               	movf	??_Sensor_autoCalibration+3,w,c
 14676  010C84  200C               	addwfc	??_Sensor_autoCalibration+5,w,c
 14677  010C86  6E02               	movwf	i2abs@a+1,c
 14678  010C88  EC3A  F091         	call	i2_abs	;wreg free
 14679  010C8C  5007               	movf	??_Sensor_autoCalibration,w,c
 14680  010C8E  5C01               	subwf	?i2_abs,w,c
 14681  010C90  5008               	movf	??_Sensor_autoCalibration+1,w,c
 14682  010C92  5802               	subwfb	?i2_abs+1,w,c
 14683  010C94  B0D8               	btfsc	status,0,c
 14684  010C96  D00F               	goto	i2l539
 14685                           
 14686                           ;mtouch_sensor.c: 421: {
 14687                           ;mtouch_sensor.c: 422: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14688  010C98  EE20 F002          	lfsr	2,2
 14689  010C9C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14690  010C9E  26D9               	addwf	fsr2l,f,c
 14691  010CA0  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14692  010CA2  22DA               	addwfc	fsr2h,f,c
 14693  010CA4  0E80               	movlw	128
 14694  010CA6  6EDF               	movwf	indf2,c
 14695                           
 14696                           ;mtouch_sensor.c: 423: Sensor_setCalibrated(sensor);
 14697  010CA8  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14698  010CAC  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14699  010CB0  EC97  F091         	call	_Sensor_setCalibrated	;wreg free
 14700                           
 14701                           ;mtouch_sensor.c: 424: }
 14702  010CB4  0012               	return	
 14703  010CB6                     i2l539:
 14704                           
 14705                           ;mtouch_sensor.c: 425: else
 14706                           ;mtouch_sensor.c: 426: {
 14707                           ;mtouch_sensor.c: 428: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)3)) - ((mtouch_sensor_time_t)1 << (u
      +                          int8_t)3)))
 14708  010CB6  EE20 F003          	lfsr	2,3
 14709  010CBA  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14710  010CBC  26D9               	addwf	fsr2l,f,c
 14711  010CBE  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14712  010CC0  22DA               	addwfc	fsr2h,f,c
 14713  010CC2  0E77               	movlw	119
 14714  010CC4  64DF               	cpfsgt	indf2,c
 14715  010CC6  D00F               	goto	i2l541
 14716                           
 14717                           ;mtouch_sensor.c: 429: {
 14718                           ;mtouch_sensor.c: 430: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14719  010CC8  EE20 F002          	lfsr	2,2
 14720  010CCC  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14721  010CCE  26D9               	addwf	fsr2l,f,c
 14722  010CD0  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14723  010CD2  22DA               	addwfc	fsr2h,f,c
 14724  010CD4  0E80               	movlw	128
 14725  010CD6  6EDF               	movwf	indf2,c
 14726                           
 14727                           ;mtouch_sensor.c: 431: Sensor_setCalibrated(sensor);
 14728  010CD8  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14729  010CDC  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14730  010CE0  EC97  F091         	call	_Sensor_setCalibrated	;wreg free
 14731                           
 14732                           ;mtouch_sensor.c: 432: }
 14733  010CE4  0012               	return	
 14734  010CE6                     i2l541:
 14735                           
 14736                           ;mtouch_sensor.c: 433: else
 14737                           ;mtouch_sensor.c: 434: {
 14738                           ;mtouch_sensor.c: 435: sensor->acquisition_time += ((mtouch_sensor_time_t)1 << (uint8_t)
      +                          3);
 14739  010CE6  EE20 F003          	lfsr	2,3
 14740  010CEA  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14741  010CEC  26D9               	addwf	fsr2l,f,c
 14742  010CEE  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14743  010CF0  22DA               	addwfc	fsr2h,f,c
 14744  010CF2  0E08               	movlw	8
 14745  010CF4  26DF               	addwf	indf2,f,c
 14746  010CF6  0012               	return	
 14747  010CF8                     __end_of_Sensor_autoCalibration:
 14748                           	opt stack 0
 14749                           tosu	equ	0xFFF
 14750                           tosh	equ	0xFFE
 14751                           tosl	equ	0xFFD
 14752                           pclatu	equ	0xFFB
 14753                           pclath	equ	0xFFA
 14754                           tblptru	equ	0xFF8
 14755                           tblptrh	equ	0xFF7
 14756                           tblptrl	equ	0xFF6
 14757                           tablat	equ	0xFF5
 14758                           prodh	equ	0xFF4
 14759                           prodl	equ	0xFF3
 14760                           intcon	equ	0xFF2
 14761                           postinc0	equ	0xFEE
 14762                           fsr0h	equ	0xFEA
 14763                           fsr0l	equ	0xFE9
 14764                           wreg	equ	0xFE8
 14765                           indf1	equ	0xFE7
 14766                           postinc1	equ	0xFE6
 14767                           postdec1	equ	0xFE5
 14768                           fsr1h	equ	0xFE2
 14769                           fsr1l	equ	0xFE1
 14770                           indf2	equ	0xFDF
 14771                           postinc2	equ	0xFDE
 14772                           postdec2	equ	0xFDD
 14773                           plusw2	equ	0xFDB
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function i2_abs *****************
 14779 ;; Defined at:
 14780 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  a               2    0[COMRAM] int 
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;		None
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  2    0[COMRAM] int 
 14787 ;; Registers used:
 14788 ;;		wreg, status,2, status,0
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14798 ;;Total ram usage:        4 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; This function calls:
 14801 ;;		Nothing
 14802 ;; This function is called by:
 14803 ;;		_Sensor_autoCalibration
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           	psect	text93
 14808  012274                     __ptext93:
 14809                           	opt stack 0
 14810  012274                     i2_abs:
 14811                           	opt stack 20
 14812                           
 14813                           ;incstack = 0
 14814  012274  AE02               	btfss	i2abs@a+1,7,c
 14815  012276  D00D               	goto	i2l1095
 14816  012278  C001  F003         	movff	i2abs@a,??i2_abs
 14817  01227C  C002  F004         	movff	i2abs@a+1,??i2_abs+1
 14818  012280  1E03               	comf	??i2_abs,f,c
 14819  012282  1E04               	comf	??i2_abs+1,f,c
 14820  012284  4A03               	infsnz	??i2_abs,f,c
 14821  012286  2A04               	incf	??i2_abs+1,f,c
 14822  012288  C003  F001         	movff	??i2_abs,?i2_abs
 14823  01228C  C004  F002         	movff	??i2_abs+1,?i2_abs+1
 14824  012290  0012               	return	
 14825  012292                     i2l1095:
 14826  012292  C001  F001         	movff	i2abs@a,?i2_abs
 14827  012296  C002  F002         	movff	i2abs@a+1,?i2_abs+1
 14828  01229A  0012               	return		;funcret
 14829  01229C                     __end_ofi2_abs:
 14830                           	opt stack 0
 14831                           tosu	equ	0xFFF
 14832                           tosh	equ	0xFFE
 14833                           tosl	equ	0xFFD
 14834                           pclatu	equ	0xFFB
 14835                           pclath	equ	0xFFA
 14836                           tblptru	equ	0xFF8
 14837                           tblptrh	equ	0xFF7
 14838                           tblptrl	equ	0xFF6
 14839                           tablat	equ	0xFF5
 14840                           prodh	equ	0xFF4
 14841                           prodl	equ	0xFF3
 14842                           intcon	equ	0xFF2
 14843                           postinc0	equ	0xFEE
 14844                           fsr0h	equ	0xFEA
 14845                           fsr0l	equ	0xFE9
 14846                           wreg	equ	0xFE8
 14847                           indf1	equ	0xFE7
 14848                           postinc1	equ	0xFE6
 14849                           postdec1	equ	0xFE5
 14850                           fsr1h	equ	0xFE2
 14851                           fsr1l	equ	0xFE1
 14852                           indf2	equ	0xFDF
 14853                           postinc2	equ	0xFDE
 14854                           postdec2	equ	0xFDD
 14855                           plusw2	equ	0xFDB
 14856                           fsr2h	equ	0xFDA
 14857                           fsr2l	equ	0xFD9
 14858                           status	equ	0xFD8
 14859                           
 14860 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 14861 ;; Defined at:
 14862 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14863 ;; Parameters:    Size  Location     Type
 14864 ;;  sensor          2    0[COMRAM] PTR struct .
 14865 ;;		 -> mtouch_sensor(45), 
 14866 ;; Auto vars:     Size  Location     Type
 14867 ;;		None
 14868 ;; Return value:  Size  Location     Type
 14869 ;;                  1    wreg      unsigned char 
 14870 ;; Registers used:
 14871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14872 ;; Tracked objects:
 14873 ;;		On entry : 0/0
 14874 ;;		On exit  : 0/0
 14875 ;;		Unchanged: 0/0
 14876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14881 ;;Total ram usage:        2 bytes
 14882 ;; Hardware stack levels used:    1
 14883 ;; This function calls:
 14884 ;;		Nothing
 14885 ;; This function is called by:
 14886 ;;		_Sensor_autoCalibration
 14887 ;;		i2_Sensor_scheduleNextScan
 14888 ;; This function uses a non-reentrant model
 14889 ;;
 14890                           
 14891                           	psect	text94
 14892  012400                     __ptext94:
 14893                           	opt stack 0
 14894  012400                     i2_Sensor_isCalibratingAcqTime:
 14895                           	opt stack 20
 14896                           
 14897                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
 14898                           
 14899                           ;incstack = 0
 14900  012400  EE20 F008          	lfsr	2,8
 14901  012404  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor,w,c
 14902  012406  26D9               	addwf	fsr2l,f,c
 14903  012408  5002               	movf	i2Sensor_isCalibratingAcqTime@sensor+1,w,c
 14904  01240A  22DA               	addwfc	fsr2h,f,c
 14905  01240C  A8DF               	btfss	indf2,4,c
 14906  01240E  D002               	goto	i2u315_40
 14907  012410  0E01               	movlw	1
 14908  012412  0012               	return	
 14909  012414                     i2u315_40:
 14910  012414  0E00               	movlw	0
 14911  012416  0012               	return	
 14912  012418                     __end_ofi2_Sensor_isCalibratingAcqTime:
 14913                           	opt stack 0
 14914                           tosu	equ	0xFFF
 14915                           tosh	equ	0xFFE
 14916                           tosl	equ	0xFFD
 14917                           pclatu	equ	0xFFB
 14918                           pclath	equ	0xFFA
 14919                           tblptru	equ	0xFF8
 14920                           tblptrh	equ	0xFF7
 14921                           tblptrl	equ	0xFF6
 14922                           tablat	equ	0xFF5
 14923                           prodh	equ	0xFF4
 14924                           prodl	equ	0xFF3
 14925                           intcon	equ	0xFF2
 14926                           postinc0	equ	0xFEE
 14927                           fsr0h	equ	0xFEA
 14928                           fsr0l	equ	0xFE9
 14929                           wreg	equ	0xFE8
 14930                           indf1	equ	0xFE7
 14931                           postinc1	equ	0xFE6
 14932                           postdec1	equ	0xFE5
 14933                           fsr1h	equ	0xFE2
 14934                           fsr1l	equ	0xFE1
 14935                           indf2	equ	0xFDF
 14936                           postinc2	equ	0xFDE
 14937                           postdec2	equ	0xFDD
 14938                           plusw2	equ	0xFDB
 14939                           fsr2h	equ	0xFDA
 14940                           fsr2l	equ	0xFD9
 14941                           status	equ	0xFD8
 14942                           
 14943 ;; *************** function _Sensor_setCalibrated *****************
 14944 ;; Defined at:
 14945 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;  sensor          2    0[COMRAM] PTR struct .
 14948 ;;		 -> mtouch_sensor(45), 
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;		None
 14951 ;; Return value:  Size  Location     Type
 14952 ;;                  1    wreg      void 
 14953 ;; Registers used:
 14954 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14955 ;; Tracked objects:
 14956 ;;		On entry : 0/0
 14957 ;;		On exit  : 0/0
 14958 ;;		Unchanged: 0/0
 14959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14960 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14964 ;;Total ram usage:        2 bytes
 14965 ;; Hardware stack levels used:    1
 14966 ;; This function calls:
 14967 ;;		Nothing
 14968 ;; This function is called by:
 14969 ;;		_Sensor_autoCalibration
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text95
 14974  01232E                     __ptext95:
 14975                           	opt stack 0
 14976  01232E                     _Sensor_setCalibrated:
 14977                           	opt stack 20
 14978                           
 14979                           ;mtouch_sensor.c: 787: sensor->calibrated = 1;
 14980                           
 14981                           ;incstack = 0
 14982  01232E  EE20 F008          	lfsr	2,8
 14983  012332  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14984  012334  26D9               	addwf	fsr2l,f,c
 14985  012336  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14986  012338  22DA               	addwfc	fsr2h,f,c
 14987  01233A  86DF               	bsf	indf2,3,c
 14988                           
 14989                           ;mtouch_sensor.c: 788: sensor->acqTime_cal = 0;
 14990  01233C  EE20 F008          	lfsr	2,8
 14991  012340  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14992  012342  26D9               	addwf	fsr2l,f,c
 14993  012344  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14994  012346  22DA               	addwfc	fsr2h,f,c
 14995  012348  98DF               	bcf	indf2,4,c
 14996  01234A  0012               	return		;funcret
 14997  01234C                     __end_of_Sensor_setCalibrated:
 14998                           	opt stack 0
 14999                           tosu	equ	0xFFF
 15000                           tosh	equ	0xFFE
 15001                           tosl	equ	0xFFD
 15002                           pclatu	equ	0xFFB
 15003                           pclath	equ	0xFFA
 15004                           tblptru	equ	0xFF8
 15005                           tblptrh	equ	0xFF7
 15006                           tblptrl	equ	0xFF6
 15007                           tablat	equ	0xFF5
 15008                           prodh	equ	0xFF4
 15009                           prodl	equ	0xFF3
 15010                           intcon	equ	0xFF2
 15011                           postinc0	equ	0xFEE
 15012                           fsr0h	equ	0xFEA
 15013                           fsr0l	equ	0xFE9
 15014                           wreg	equ	0xFE8
 15015                           indf1	equ	0xFE7
 15016                           postinc1	equ	0xFE6
 15017                           postdec1	equ	0xFE5
 15018                           fsr1h	equ	0xFE2
 15019                           fsr1l	equ	0xFE1
 15020                           indf2	equ	0xFDF
 15021                           postinc2	equ	0xFDE
 15022                           postdec2	equ	0xFDD
 15023                           plusw2	equ	0xFDB
 15024                           fsr2h	equ	0xFDA
 15025                           fsr2l	equ	0xFD9
 15026                           status	equ	0xFD8
 15027                           
 15028 ;; *************** function _Sensor_setCalibratAcqTime *****************
 15029 ;; Defined at:
 15030 ;;		line 791 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15031 ;; Parameters:    Size  Location     Type
 15032 ;;  sensor          2    0[COMRAM] PTR struct .
 15033 ;;		 -> mtouch_sensor(45), 
 15034 ;; Auto vars:     Size  Location     Type
 15035 ;;		None
 15036 ;; Return value:  Size  Location     Type
 15037 ;;                  1    wreg      void 
 15038 ;; Registers used:
 15039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15040 ;; Tracked objects:
 15041 ;;		On entry : 0/0
 15042 ;;		On exit  : 0/0
 15043 ;;		Unchanged: 0/0
 15044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15049 ;;Total ram usage:        2 bytes
 15050 ;; Hardware stack levels used:    1
 15051 ;; This function calls:
 15052 ;;		Nothing
 15053 ;; This function is called by:
 15054 ;;		_Sensor_autoCalibration
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           	psect	text96
 15059  012126                     __ptext96:
 15060                           	opt stack 0
 15061  012126                     _Sensor_setCalibratAcqTime:
 15062                           	opt stack 20
 15063                           
 15064                           ;mtouch_sensor.c: 793: sensor->acqTime_cal = 1;
 15065                           
 15066                           ;incstack = 0
 15067  012126  EE20 F008          	lfsr	2,8
 15068  01212A  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15069  01212C  26D9               	addwf	fsr2l,f,c
 15070  01212E  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15071  012130  22DA               	addwfc	fsr2h,f,c
 15072  012132  88DF               	bsf	indf2,4,c
 15073                           
 15074                           ;mtouch_sensor.c: 794: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)3));
 15075  012134  EE20 F003          	lfsr	2,3
 15076  012138  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15077  01213A  26D9               	addwf	fsr2l,f,c
 15078  01213C  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15079  01213E  22DA               	addwfc	fsr2h,f,c
 15080  012140  0E08               	movlw	8
 15081  012142  6EDF               	movwf	indf2,c
 15082                           
 15083                           ;mtouch_sensor.c: 795: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 15084  012144  EE20 F002          	lfsr	2,2
 15085  012148  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15086  01214A  26D9               	addwf	fsr2l,f,c
 15087  01214C  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15088  01214E  22DA               	addwfc	fsr2h,f,c
 15089  012150  0E80               	movlw	128
 15090  012152  6EDF               	movwf	indf2,c
 15091  012154  0012               	return		;funcret
 15092  012156                     __end_of_Sensor_setCalibratAcqTime:
 15093                           	opt stack 0
 15094                           tosu	equ	0xFFF
 15095                           tosh	equ	0xFFE
 15096                           tosl	equ	0xFFD
 15097                           pclatu	equ	0xFFB
 15098                           pclath	equ	0xFFA
 15099                           tblptru	equ	0xFF8
 15100                           tblptrh	equ	0xFF7
 15101                           tblptrl	equ	0xFF6
 15102                           tablat	equ	0xFF5
 15103                           prodh	equ	0xFF4
 15104                           prodl	equ	0xFF3
 15105                           intcon	equ	0xFF2
 15106                           postinc0	equ	0xFEE
 15107                           fsr0h	equ	0xFEA
 15108                           fsr0l	equ	0xFE9
 15109                           wreg	equ	0xFE8
 15110                           indf1	equ	0xFE7
 15111                           postinc1	equ	0xFE6
 15112                           postdec1	equ	0xFE5
 15113                           fsr1h	equ	0xFE2
 15114                           fsr1l	equ	0xFE1
 15115                           indf2	equ	0xFDF
 15116                           postinc2	equ	0xFDE
 15117                           postdec2	equ	0xFDD
 15118                           plusw2	equ	0xFDB
 15119                           fsr2h	equ	0xFDA
 15120                           fsr2l	equ	0xFD9
 15121                           status	equ	0xFD8
 15122                           tosu	equ	0xFFF
 15123                           tosh	equ	0xFFE
 15124                           tosl	equ	0xFFD
 15125                           pclatu	equ	0xFFB
 15126                           pclath	equ	0xFFA
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           postinc0	equ	0xFEE
 15135                           fsr0h	equ	0xFEA
 15136                           fsr0l	equ	0xFE9
 15137                           wreg	equ	0xFE8
 15138                           indf1	equ	0xFE7
 15139                           postinc1	equ	0xFE6
 15140                           postdec1	equ	0xFE5
 15141                           fsr1h	equ	0xFE2
 15142                           fsr1l	equ	0xFE1
 15143                           indf2	equ	0xFDF
 15144                           postinc2	equ	0xFDE
 15145                           postdec2	equ	0xFDD
 15146                           plusw2	equ	0xFDB
 15147                           fsr2h	equ	0xFDA
 15148                           fsr2l	equ	0xFD9
 15149                           status	equ	0xFD8
 15150                           
 15151                           	psect	text97
 15152  000000                     __ptext97:
 15153                           	opt stack 0
 15154                           tosu	equ	0xFFF
 15155                           tosh	equ	0xFFE
 15156                           tosl	equ	0xFFD
 15157                           pclatu	equ	0xFFB
 15158                           pclath	equ	0xFFA
 15159                           tblptru	equ	0xFF8
 15160                           tblptrh	equ	0xFF7
 15161                           tblptrl	equ	0xFF6
 15162                           tablat	equ	0xFF5
 15163                           prodh	equ	0xFF4
 15164                           prodl	equ	0xFF3
 15165                           intcon	equ	0xFF2
 15166                           postinc0	equ	0xFEE
 15167                           fsr0h	equ	0xFEA
 15168                           fsr0l	equ	0xFE9
 15169                           wreg	equ	0xFE8
 15170                           indf1	equ	0xFE7
 15171                           postinc1	equ	0xFE6
 15172                           postdec1	equ	0xFE5
 15173                           fsr1h	equ	0xFE2
 15174                           fsr1l	equ	0xFE1
 15175                           indf2	equ	0xFDF
 15176                           postinc2	equ	0xFDE
 15177                           postdec2	equ	0xFDD
 15178                           plusw2	equ	0xFDB
 15179                           fsr2h	equ	0xFDA
 15180                           fsr2l	equ	0xFD9
 15181                           status	equ	0xFD8
 15182                           
 15183                           	psect	rparam
 15184  0000                     tosu	equ	0xFFF
 15185                           tosh	equ	0xFFE
 15186                           tosl	equ	0xFFD
 15187                           pclatu	equ	0xFFB
 15188                           pclath	equ	0xFFA
 15189                           tblptru	equ	0xFF8
 15190                           tblptrh	equ	0xFF7
 15191                           tblptrl	equ	0xFF6
 15192                           tablat	equ	0xFF5
 15193                           prodh	equ	0xFF4
 15194                           prodl	equ	0xFF3
 15195                           intcon	equ	0xFF2
 15196                           postinc0	equ	0xFEE
 15197                           fsr0h	equ	0xFEA
 15198                           fsr0l	equ	0xFE9
 15199                           wreg	equ	0xFE8
 15200                           indf1	equ	0xFE7
 15201                           postinc1	equ	0xFE6
 15202                           postdec1	equ	0xFE5
 15203                           fsr1h	equ	0xFE2
 15204                           fsr1l	equ	0xFE1
 15205                           indf2	equ	0xFDF
 15206                           postinc2	equ	0xFDE
 15207                           postdec2	equ	0xFDD
 15208                           plusw2	equ	0xFDB
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213                           	psect	temp
 15214  000050                     btemp:
 15215                           	opt stack 0
 15216  000050                     	ds	1
 15217  0000                     int$flags	set	btemp
 15218  0000                     wtemp6	set	btemp+1
 15219                           tosu	equ	0xFFF
 15220                           tosh	equ	0xFFE
 15221                           tosl	equ	0xFFD
 15222                           pclatu	equ	0xFFB
 15223                           pclath	equ	0xFFA
 15224                           tblptru	equ	0xFF8
 15225                           tblptrh	equ	0xFF7
 15226                           tblptrl	equ	0xFF6
 15227                           tablat	equ	0xFF5
 15228                           prodh	equ	0xFF4
 15229                           prodl	equ	0xFF3
 15230                           intcon	equ	0xFF2
 15231                           postinc0	equ	0xFEE
 15232                           fsr0h	equ	0xFEA
 15233                           fsr0l	equ	0xFE9
 15234                           wreg	equ	0xFE8
 15235                           indf1	equ	0xFE7
 15236                           postinc1	equ	0xFE6
 15237                           postdec1	equ	0xFE5
 15238                           fsr1h	equ	0xFE2
 15239                           fsr1l	equ	0xFE1
 15240                           indf2	equ	0xFDF
 15241                           postinc2	equ	0xFDE
 15242                           postdec2	equ	0xFDD
 15243                           plusw2	equ	0xFDB
 15244                           fsr2h	equ	0xFDA
 15245                           fsr2l	equ	0xFD9
 15246                           status	equ	0xFD8


Data Sizes:
    Strings     941
    Constant    135
    Data        21
    BSS         376
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160     37     134
    BANK1           256      0     208
    BANK2           256      0      64
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Button_StateMachine$0	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_33(CODE[5]), STR_29(CODE[4]), STR_28(CODE[6]), STR_25(CODE[6]), 
		 -> STR_22(CODE[6]), STR_14(CODE[15]), STR_10(CODE[9]), STR_6(CODE[8]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 365
		 -> STR_36(CODE[3]), STR_35(CODE[349]), STR_34(CODE[3]), STR_32(CODE[3]), 
		 -> STR_31(CODE[28]), STR_30(CODE[3]), STR_27(CODE[4]), STR_26(CODE[5]), 
		 -> STR_24(CODE[4]), STR_23(CODE[5]), STR_21(CODE[3]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_12(CODE[14]), STR_11(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[18]), STR_7(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[365]), STR_3(CODE[4]), STR_2(CODE[5]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    ringBufferLUT@line	PTR unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Service@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setInactive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setActive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isEnabled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    callback_sampled	PTR FTN(enum E17513,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), Absolute function(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), Absolute function(), 

    IOCBF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> DTR_Callback(), IOCBF2_DefaultInterruptHandler(), 

    IOCBF2_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> DTR_Callback(), Absolute function(), IOCBF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _EUSART2_Receive_ISR->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_EUSART2_Write
    i2___lwmod->i2___lwdiv
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->_Sensor_autoCalibration
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibrated
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->i2_abs

Critical Paths under _main in BANK0

    _main->_ringBufferPull
    _ringBufferPull->_ringBufferLUT
    _ringBufferLUT->_printf
    _printResetMessage->_printf
    _printf->___lwmod
    _putch->_EUSART2_Write
    ___lwmod->___lwdiv
    _PIN_MANAGER_Initialize->_IOCBF2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _Sensor_scheduleNextScan->_Sensor_isCalibrated
    _Sensor_scheduleNextScan->_Sensor_isCalibratingAcqTime
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23896
                                             36 BANK0      1     1      0
         _IOCBF2_SetInterruptHandler
            _MTOUCH_Button_State_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                  _printResetMessage
                     _ringBufferPull
 ---------------------------------------------------------------------------------
 (1) _ringBufferPull                                       9     9      0    6695
                                             27 BANK0      9     9      0
                       _EUSART2_Read
                      _ringBufferLUT
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     400
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _ringBufferLUT                                        3     1      2    6057
                                             24 BANK0      3     1      2
            _MTOUCH_Button_isPressed
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1573
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_isPressed                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printResetMessage                                    0     0      0    4084
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4084
                                             12 BANK0     12     8      4
            _MTOUCH_Button_isPressed (ARG)
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     531
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3167
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF2_SetInterruptHandler                           3     0      3     211
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2714
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1306
                                             11 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     459
                                              2 BANK0      1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             11 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    9677
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                              4 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     310
                                              2 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    4561
                                             21 BANK0      1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              6     6      0    1191
                                              2 BANK0      6     6      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     331
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              1     1      0    3116
                                             20 BANK0      1     1      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        9     9      0    2024
                                             11 BANK0      9     9      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              4     2      2     899
                                              7 BANK0      4     2      2
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         7     5      2     651
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            14    14      0     993
                                              4 BANK0     14    14      0
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     328
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    4470
                                             20 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    4371
                                             16 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     626
                                              9 BANK0      7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    1175
                                              9 BANK0      5     3      2
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                              1 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                              9 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                              3 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                              7 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                              3 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             12    10      2     350
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_State_Get                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                      18    18      0    2979
                                             22 COMRAM    18    18      0
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCBF2_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCBF2_ISR                                           0     0      0       0
                   Absolute function *
                       _DTR_Callback *
     _IOCBF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCBF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _DTR_Callback                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  0     0      0     903
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            19    17      2     903
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0      66
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (11) i2_EUSART2_Write                                     1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _ADCC_ThresholdISR_mTouch                             0     0      0    2076
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (9) _MTOUCH_Sensor_Service                                2     2      0    2076
                                             13 COMRAM     2     2      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (10) i2_Sensor_scheduleNextScan                           6     6      0     688
                                              2 COMRAM     6     6      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibrated                               2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Sensor_setSampled                                   2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _Sensor_autoCalibration                              9     7      2     965
                                              4 COMRAM     9     7      2
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i2_Sensor_isCalibratingAcqTime
                              i2_abs
 ---------------------------------------------------------------------------------
 (11) i2_abs                                               4     2      2      92
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibratingAcqTime                       2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibrated                                2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibratAcqTime                           2     0      2     218
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCBF2_SetInterruptHandler
   _MTOUCH_Button_State_Get
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           _abs
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback *
           _Sensor_RawSample_Update *
             _medianFilter
           _Sensor_isEnabled *
           _Sensor_setActive *
           _Sensor_setInactive *
           _abs *
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_wasSampled
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF2_SetInterruptHandler
     _PMD_Initialize
   _printResetMessage
     _printf
       _MTOUCH_Button_isPressed (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _putch (ARG)
         _EUSART2_Write
   _ringBufferPull
     _EUSART2_Read
     _ringBufferLUT
       _MTOUCH_Button_isPressed
       _printf
         _MTOUCH_Button_isPressed (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         _putch (ARG)
           _EUSART2_Write
       _strcmp
     _strlen

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i2_Sensor_isCalibratingAcqTime
         i2_abs
       _Sensor_setSampled
       i2_Sensor_SetTrisBit
       i2_Sensor_isCalibrated
       i2_Sensor_scheduleNextScan
         i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_isCalibratingAcqTime
   _EUSART2_Receive_ISR *
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_EUSART2_Write
   _EUSART2_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCBF2_ISR
       Absolute function(Fake) *
       _DTR_Callback *
       _IOCBF2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      40      10       25.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     25      86       5       83.8%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E5       8        0.0%
DATA                 0      0     1E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 18:34:07 2018

                                    ?_MTOUCH_Sensor_RawSample_Get 00AF  
                                   Sensor_FrequencyHopping@sensor 00C3  
                                                     __CFG_CP$OFF 000000  
                                         ?_Sensor_autoCalibration 0005  
                                      __end_of_Sensor_setInactive 244E  
                                              i2___lwdiv@dividend 0001  
                                       _Sensor_setCalibratAcqTime 2126  
                                                             l225 1E72  
                                                             l234 1E06  
                                                             l235 1E2A  
                                                             l227 1E9A  
                                                             l236 1E28  
                                                             l512 1CB6  
                                                             l610 05CE  
                                                             l530 0756  
                                                             l514 1CE0  
                                                             l611 05DE  
                                                             l603 0506  
                                                             l523 068C  
                                                             l507 1F48  
                                                             l524 06A6  
                                                             l605 0580  
                                                             l606 0644  
                                                             l615 0602  
                                                             l527 0712  
                                                             l608 05C0  
                                                             l624 067A  
                                                             l609 05CA  
                                                             l641 1FF4  
                                                             l529 074C  
                                                             l801 220A  
                                                             l570 1FBA  
                                                             l618 062C  
                                                             l546 131C  
                                                             l482 180C  
                                                             l547 12E8  
                                                             l483 17E4  
                                                             l548 12F4  
                                                             l484 1830  
                                                             l493 1980  
                                                             l485 17EC  
                                                             l590 0470  
                                                             l582 0320  
                                                             l646 22BE  
                                                             l566 22F4  
                                                             l494 1944  
                                                             l486 17F4  
                                                             l583 0422  
                                                             l575 1C90  
                                                             l487 17FC  
                                                             l831 1F18  
                                                             l592 04CE  
                                                             l584 03B2  
                                                             l496 1950  
                                                             l488 1804  
                                                             l665 205C  
                                                             l497 195C  
                                                             l770 23C4  
                                                             l498 1968  
                                                             l587 0408  
                                                             l499 1974  
                                                             l780 1354  
                                                             l596 22D4  
                                                             l781 1360  
                                                             l765 1F80  
                                                             l846 101A  
                                                             l862 2320  
                                                             l790 08EC  
                                                             l847 1042  
                                                             l687 2028  
                                                             l776 1478  
                                                             l786 0866  
                                                             l970 0E4A  
                                                             l867 16A2  
                                                             l875 10D8  
                                                             l795 119E  
                                                             l939 159A  
                                                             l972 0E86  
                                                             l789 08D6  
                                                             l973 0E6A  
                                                             l975 0ECE  
                                                             l888 217E  
                                                             l976 0EA0  
                                                             _GIE 007F97  
                                                    __CFG_CPD$OFF 000000  
                                                             _abs 2182  
                                                             fsr2 000FD9  
                                         __size_of_PMD_Initialize 001C  
                                                             prod 000FF3  
                                                             tosl 000FFD  
                                                             wreg 000FE8  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 00B1  
                                __size_of_MTOUCH_Sensor_SampleAll 0046  
                                         __size_of_ringBufferPull 0118  
                               __size_of_MTOUCH_Sensor_Initialize 007A  
                                       ?_MTOUCH_Sensor_Initialize 0001  
                                 __size_of_Sensor_setSamplePeriod 0024  
                                                    __CFG_LVP$OFF 000000  
                                                    __CFG_ZCD$OFF 000000  
                                                            l1000 0052  
                                                            l1010 0252  
                                                            l1002 009E  
                                                            l1004 0170  
                                                            l1006 01AE  
                                                            l1040 0B40  
                                                            l1008 01EA  
                                                            l1041 0B9A  
                                                            l1042 0B46  
                                                            l1034 0AD0  
                                                            l1027 0A90  
                                                            ?_abs 00AF  
                                                            l1036 0AF8  
                                                            l1028 0AA0  
                                                            l1095 21A2  
                                                            l1603 1BC8  
                                                            l1611 1D84  
                                                            l1604 1BBE  
                                                            l1612 1D7E  
                                                            l1453 1AE4  
                                                            l1454 1ADC  
                                                            l1463 1D06  
                                                            l1464 1CFE  
                                                            l1457 1B04  
                                                            l1458 1B0E  
                                                            l1467 1D1E  
                                                            l1468 1D28  
                                                            l1477 1C46  
                                                            l1478 1C1E  
                                                            l5113 1CAE  
                                                            l5141 23BC  
                                                            l4621 04FE  
                                                            l4439 1DF4  
                                                            l5257 0E3A  
                                                            l4555 1C1E  
                                                            l5267 0E60  
                                                            l4725 1354  
                                                            l4671 0624  
                                                            l4649 05D6  
                                                            l4907 2202  
                                                            l4839 0AFC  
                                                            l4883 1F78  
                                                            l4973 22CC  
                                                            l4869 1F40  
                                                            STR_1 FFFB  
                                                            STR_2 FFEE  
                                                            STR_3 FFF7  
                                                            STR_4 FC52  
                                                            STR_5 FFA6  
                                                            STR_6 FFCF  
                                                            STR_7 FFA6  
                                                            STR_8 FF97  
                                                            STR_9 FFA6  
                                   ?_Button_Reading_Update_Helper 00B2  
                                                            _LATA 000F79  
                                                            _LATB 000F7A  
                                                            _LATC 000F7B  
                                                            _LATD 000F7C  
                                                            _LATE 000F7D  
                                                            _LATF 000F7E  
                                                            _LATG 000F7F  
                                                            _LATH 000F80  
                                                            u5100 13B8  
                                                            u5020 2058  
                                                            u5040 0F6E  
                                                            u5120 0842  
                                                            u5105 13AE  
                                                            u5060 100A  
                                                            u5045 0F64  
                                                            u5230 1AE8  
                                                            u5055 0FD0  
                                                            u5056 0FD6  
                                                            u5320 0B2E  
                                                            u5057 0FE4  
                                                            u5090 138E  
                                                            u5148 08B8  
                                                            u5260 1D0A  
                                                            u5340 0BA4  
                                                            _PMD0 000E4C  
                                                            u5405 210A  
                                                            _PMD1 000E4D  
                                                            u4630 22BA  
                                                            u5510 07DE  
                                                            _PMD2 000E4E  
                                                            _PMD3 000E4F  
                                                            u4800 23B2  
                                                            u5600 1F14  
                                                            _PMD4 000E50  
                                                            u4705 194C  
                                                            u5505 07C4  
                                                            _PMD5 000E51  
                                                            u5178 1180  
                                                            u4706 194E  
                                                            u4810 2398  
                                                            u4715 1958  
                                                            u5540 22E0  
                                                            u4716 195A  
                                                            u5460 06BE  
                                                            u5700 1CE6  
                                                            u4725 1964  
                                                            u5525 07E0  
                                                            u4670 1086  
                                                            u5198 1222  
                                                            u4726 1966  
                                                            u5630 1C00  
                                                            u4655 1A52  
                                                            u4735 1970  
                                                            u4680 1104  
                                                            u4736 1972  
                                                            u4745 197C  
                                                            u4770 2024  
                                                            u4746 197E  
                                                            u5810 0228  
                                                            u4675 107C  
                                                            u4685 10FA  
                                                            u4950 0606  
                                                            u4790 1FF0  
                                                            u4880 0584  
                                                            u4848 1304  
                                                            u4890 0590  
                                                            u5588 14A6  
                                                            u5880 0E60  
                                      Button_State_Pressed@button 00B8  
                                                            _WPUA 000E91  
                                                            _WPUB 000E99  
                                                            _WPUC 000EA1  
                                                            _WPUD 000EA6  
                                                            _WPUE 000EAE  
                                                            _WPUF 000EB3  
                                                            _WPUG 000EBB  
                                                            _WPUH 000EC0  
                                           ??_EUSART2_Receive_ISR 0017  
                                             _sensor_medianBuffer 0060  
                                                   __CFG_FCMEN$ON 000000  
                                                   _EUSART2_Write 1DF0  
                                              _MTOUCH_needReburst 24DA  
                                                            abs@a 00AF  
                                                            _main 157C  
                            __size_of_MTOUCH_Button_InitializeAll 0038  
                                                            _line 0190  
                                                   ?_EUSART2_Read 0001  
                                                            fsr0h 000FEA  
                                                            fsr1h 000FE2  
                                              i2___lwdiv@quotient 0005  
                                                            fsr2h 000FDA  
                                                            fsr0l 000FE9  
                                                            indf1 000FE7  
                                                            indf2 000FDF  
                                                            fsr1l 000FE1  
                                                            fsr2l 000FD9  
                                                            btemp 0050  
                            __size_of_MTOUCH_Sensor_InitializeAll 0038  
                                                            prodh 000FF4  
                                                            prodl 000FF3  
                                                            start 00F2  
                              __size_ofi2_Sensor_scheduleNextScan 014C  
                                    __end_of_EUSART2_Transmit_ISR 2092  
                                       ??_Sensor_FrequencyHopping 00C3  
                                                 __end_ofi2_putch 24EE  
                                                   __CFG_CSWEN$ON 000000  
                                             ?_MTOUCH_needReburst 0001  
                                                    ___param_bank 000000  
                                                   ?_medianFilter 00AF  
                                  __end_of_Sensor_autoCalibration 0CF8  
                                                   __CFG_SCANE$ON 000000  
                                        __size_ofi2_EUSART2_Write 003C  
                                        ?_MTOUCH_Service_Mainloop 0001  
                                __size_of_MTOUCH_Button_isPressed 0038  
                                   __size_of_Button_State_Pressed 00EC  
                                                           ??_abs 00B1  
                                     ?_Button_Baseline_Initialize 00B2  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 007E  
                                   ??_MTOUCH_Sensor_RawSample_Get 00B1  
                                   Sensor_RawSample_Update@sensor 00B6  
                                   Sensor_RawSample_Update@result 00B8  
                                       __size_of_Sensor_isEnabled 0026  
                                  __size_of_OSCILLATOR_Initialize 0018  
                                             ringBufferPull@index 00D1  
                                             __size_of_IOCBF2_ISR 0028  
                                   __end_of_OSCILLATOR_Initialize 23E8  
                             __end_of_Sensor_isCalibratingAcqTime 239C  
                                  ?i2_Sensor_isCalibratingAcqTime 0001  
                                     _Sensor_isCalibratingAcqTime 2382  
                                                           _ADACC 000F70  
                                                           _ADACQ 000F5C  
                                                           _ADCAP 000F5D  
                                                           ?_main 0001  
                                                           _ADCLK 000F57  
                                                           _ADPCH 000F5F  
                                                           _ADREF 000F58  
                                                           _ADPRE 000F5E  
                                                           STR_10 FFC6  
                                                           STR_11 FFA6  
                                                           STR_12 FFB8  
                                                           STR_20 FF84  
                                                           STR_21 FFA6  
                                                           STR_13 FFA6  
                                                           STR_30 FFA6  
                                                           STR_22 FFE3  
                                                           STR_14 FFA9  
                                                           STR_15 FFA6  
                                                           STR_23 FFEE  
                                                           STR_31 FF1C  
                                                           STR_32 FFA6  
                                                           STR_24 FFF7  
                                                           STR_16 FF38  
                                                           STR_33 FFE9  
                                                           STR_25 FFDD  
                                                           STR_17 FF4B  
                                                   __CFG_WDTE$OFF 000000  
                                                           STR_34 FFA6  
                                                           STR_26 FFEE  
                                                           STR_18 FF5E  
                                                           STR_27 FFF7  
                                                           STR_19 FF71  
                                                           STR_35 FDBF  
                                                           STR_36 FFA6  
                                                           STR_28 FFD7  
                                                           STR_29 FFF3  
                                                           _ADRPT 000F66  
                                                  __CFG_DEBUG$OFF 000000  
                                         __size_of_Button_Service 00C4  
                                                 __end_of___lwdiv 1B18  
                                                 __end_of___lwmod 1D32  
                                                           i2l151 0090  
                                                           i2l153 009C  
                                                           i2l234 1EBC  
                                                           i2l235 1EE0  
                                                           i2l155 00A6  
                                                           i2l236 1EDE  
                                                           i2l252 16D6  
                                                           i2l253 16F6  
                                                           i2l149 0070  
                                                           i2l254 1710  
                                                           i2l246 208C  
                                                           i2l247 2088  
                                                           i2l257 1712  
                                                           i2l530 0A00  
                                                           i2l523 0946  
                                                           i2l259 175A  
                                                           i2l524 095E  
                                                           i2l541 0CE6  
                                                           i2l534 0C3C  
                                                           i2l535 0C2E  
                                                           i2l527 09C2  
                                                           i2l560 1938  
                                                           i2l641 20F2  
                                                           i2l529 09F6  
                                                           i2l561 1914  
                                                           i2l562 1920  
                                                           i2l539 0CB6  
                                                           i2l493 19E4  
                                                           i2l494 19A8  
                                                           i2l559 18E2  
                                                           i2l496 19B4  
                                                           i2l497 19C0  
                                                           i2l498 19CC  
                                                           i2l499 19D8  
                                                           i2l932 24D6  
                                                           i2l687 20C0  
                                                           _OSCEN 000E47  
                                                           _TRISA 000F81  
                                                           _TRISB 000F82  
                                                           _TRISC 000F83  
                                                           _TRISD 000F84  
                                                           _TRISE 000F85  
                                                           _TRISF 000F86  
                                                           _TRISG 000F87  
                                                           _TRISH 000F88  
                                                           i2_abs 2274  
                                 __size_of_Button_DefaultCallback 0002  
                                             i2_Sensor_SetTrisBit 19A4  
                                                   __CFG_WRT0$OFF 000000  
                                                   __CFG_WRT1$OFF 000000  
                                                   __CFG_WRT2$OFF 000000  
                                                   __CFG_WRT3$OFF 000000  
                                                   __CFG_WRT4$OFF 000000  
                                                   __CFG_WRT5$OFF 000000  
                                                   __CFG_WRT6$OFF 000000  
                                                   __CFG_WRT7$OFF 000000  
                                            ??_MTOUCH_needReburst 00AF  
                                                  __CFG_EBTR0$OFF 000000  
                                                  __CFG_EBTR1$OFF 000000  
                                                  __CFG_EBTR2$OFF 000000  
                                                  __CFG_EBTR3$OFF 000000  
                                                  __CFG_EBTR4$OFF 000000  
                                                  __CFG_EBTR5$OFF 000000  
                                                  __CFG_EBTR6$OFF 000000  
                                                  __CFG_EBTR7$OFF 000000  
                                                   __CFG_WRTB$OFF 000000  
                                                   __CFG_WRTC$OFF 000000  
                                                   __CFG_WRTD$OFF 000000  
                                 __size_of_Sensor_DefaultCallback 0002  
                                                  __CFG_EBTRB$OFF 000000  
                                         __end_of_PIN_MANAGER_IOC 24CE  
                                                 __end_of_dpowers FBD5  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 2508  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
                                   _MTOUCH_Sensor_Scan_Initialize 2502  
                                         Sensor_setSampled@sensor 0001  
                                 __end_of_Sensor_scheduleNextScan 07E6  
                                              __CFG_MCLRE$EXTMCLR 000000  
                                                           _putch 2470  
                                __size_of_Button_State_NotPressed 0152  
                                                  __pbitbssCOMRAM 0278  
                                                  ?_EUSART2_Write 0001  
                                                           pclath 000FFA  
                                                           tablat 000FF5  
                                            _Sensor_Sampled_Reset 242A  
                                                           plusw2 000FDB  
                                                  ??_EUSART2_Read 00AF  
                                                           status 000FD8  
                                __size_of_MTOUCH_Sensor_isEnabled 0034  
                                                           wtemp6 0051  
                                       __size_of_Sensor_setActive 0012  
                                          ?i2_Sensor_isCalibrated 0001  
                                          Sensor_isEnabled@sensor 00AF  
                                            ?i2_Sensor_SetTrisBit 0001  
                                                __end_ofi2_printf 0E2A  
                                              __size_ofi2___lwdiv 0052  
                                              __size_ofi2___lwmod 0042  
                           __end_of_EUSART2_SetTxInterruptHandler 24A8  
                          __size_of_EUSART2_SetTxInterruptHandler 000E  
                                   _EUSART2_SetTxInterruptHandler 249A  
                                                  ??_medianFilter 00B1  
                                                 __initialization 1762  
                                          _Sensor_setSamplePeriod 22E6  
                                                    __end_of_main 1624  
                                            _Sensor_setCalibrated 232E  
                                                      i2printf@ap 0010  
                                                   ?_DTR_Callback 0001  
                                           __end_of_ringBufferLUT 029C  
                                __end_of_MTOUCH_Button_Initialize 18CE  
                                                          ??_main 00D3  
                                                   __activetblptr 000003  
                                         _MTOUCH_Sensor_Calibrate 2224  
                                         ??_Button_Reading_Update 00B8  
                                                          ?i2_abs 0001  
                                __end_of_ADCC_ThresholdISR_mTouch 24F8  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 00B1  
                                        ?_Button_Deviation_Update 00AF  
                                                    ?_MTOUCH_Tick 0001  
                                    Button_Baseline_Update@button 00AF  
                                      __end_of_EUSART2_Initialize 1AC4  
                                    ??_IOCBF2_SetInterruptHandler 00B2  
                                                          _ADCON0 000F60  
                                                          _ADCON1 000F59  
                                                          _ADCON2 000F5A  
                                                          _ADCON3 000F5B  
                                        _eusart2TxBufferRemaining 004E  
                                                          _ADFLTR 000F72  
                            __size_of_MTOUCH_Sensor_RawSample_Get 0038  
                                                          _ADLTHH 000F6B  
                                                          _ADLTHL 000F6A  
                                                          _ADUTHH 000F6D  
                                                          _ADUTHL 000F6C  
                                                          _ANSELA 000E92  
                                                          ?_putch 0001  
                                                          _ANSELB 000E9A  
                                                          _ANSELD 000EA7  
                                                          _ANSELE 000EAF  
                                                          _ANSELF 000EB4  
                                                          _ANSELG 000EBC  
                                                          _RC2REG 000EF1  
                                                          _RC2STA 000EF5  
                                                          _ODCONA 000E90  
                                                          _ODCONB 000E98  
                                                          _ODCONC 000EA0  
                                                          _ODCOND 000EA5  
                                                          _ODCONE 000EAD  
                                                          _ODCONF 000EB2  
                                                          _ODCONG 000EBA  
                                                          _ODCONH 000EBF  
                                                          i2l1040 0DB0  
                                                          i2l1041 0E04  
                                                          i2l1042 0DB6  
                                                          i2l1034 0D40  
                                                          i2l1027 0D02  
                                                          i2l1036 0D68  
                                                          i2l1028 0D12  
                                                          i2l1095 2292  
                                                  __CFG_WDTCCS$SC 000000  
                                                          i2l1453 1B88  
                                                          i2l1454 1B80  
                                                          i2l1463 1D48  
                                                          i2l1464 1D40  
                                                          i2l1457 1BA8  
                                                          i2l1458 1BB2  
                                                          i2l1467 1D60  
                                                          i2l1468 1D6A  
                                                          i2l4125 0D6C  
                                                          i2l3509 1EAA  
                                           ?_Sensor_Sampled_Reset 00AF  
                                                          _RG7PPS 000E89  
                                                   i2putch@txData 0002  
                                                          _OSCFRQ 000E49  
                                                       ??i2_putch 0002  
                                                          _TX2REG 000EF2  
                                                          _TX2STA 000EF6  
                               MTOUCH_Button_InitializeAll@button 00BA  
                                                          i2abs@a 0001  
                                  ??_Button_Reading_Update_Helper 00B4  
                                           ??i2_Sensor_SetTrisBit 0002  
                                         _MTOUCH_Button_State_Get 2156  
                                          _Button_DefaultCallback 2514  
                                 __end_of_MTOUCH_Service_Mainloop 21FC  
                                                  __CFG_PWRTE$OFF 000000  
                                                  __CFG_XINST$OFF 000000  
                                             _Sensor_isCalibrated 239C  
                                     MTOUCH_Sensor_Service@sensor 000E  
                                          _Sensor_DefaultCallback 2512  
                                       __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                                                   _packet_sample 0029  
                                                  ??_DTR_Callback 0001  
                                           ?_Sensor_setCalibrated 0001  
                                    Sensor_DefaultCallback@sensor 0001  
                                                  __CFG_STVREN$ON 000000  
                                                       ??___lwdiv 00B3  
                                                       ??___lwmod 00BA  
                                                          _memcpy 1C0C  
                                                          clear_0 17A8  
                                                          clear_1 17B4  
                                                          clear_2 17C0  
                                                          clear_3 17CE  
                                            _eusart2RxStringReady 0279  
                                __end_of_MTOUCH_Button_ServiceAll 23D0  
                                  __size_of_MTOUCH_Sensor_Service 0070  
                                                          _printf 0A84  
                             __size_of_IOCBF2_SetInterruptHandler 000E  
                                   __end_of_MTOUCH_Sensor_Service 193E  
                                    Sensor_autoCalibration@sensor 0005  
                                                          _strcmp 1BBC  
                                                          _strlen 1D74  
                                  i2Sensor_scheduleNextScan@state 0005  
                                               ??i2_EUSART2_Write 0001  
                                                  _PMD_Initialize 234C  
                                                    __pdataCOMRAM 0042  
                                         _MTOUCH_Sensor_SampleAll 1CA8  
                                    Button_DefaultCallback@button 0001  
                                               __end_ofi2___lwdiv 1BBC  
                                                    __mediumconst FBCA  
                                               __end_ofi2___lwmod 1D74  
                                                  _ringBufferPull 0E2A  
                                            ?_Sensor_isCalibrated 00AF  
                                                          tblptrh 000FF7  
                                                          tblptrl 000FF6  
                                                          tblptru 000FF8  
                                        ?_Sensor_RawSample_Update 00B6  
                                            _EUSART2_Transmit_ISR 2060  
                                         ?_Button_Baseline_Update 00AF  
                             Sensor_postAcquisitionProcess@sensor 00C1  
                                                 ??_EUSART2_Write 00AF  
                      IOCBF2_SetInterruptHandler@InterruptHandler 00AF  
                                                ?_PIN_MANAGER_IOC 0001  
                              __size_of_Sensor_setCalibratAcqTime 0030  
                                                    ??_IOCBF2_ISR 0001  
                                 MTOUCH_Sensor_RawSample_Get@name 00B1  
                                   __size_of_INTERRUPT_Initialize 000E  
                                                 _eusart2RxBuffer 0100  
                                ??_INTERRUPT_InterruptManagerHigh 0017  
                                 ?_INTERRUPT_InterruptManagerHigh 0001  
                                               _SYSTEM_Initialize 2368  
                                                 _eusart2TxBuffer 0200  
                                                      __accesstop 0060  
                                         __end_of__initialization 17D4  
                             __size_of_Button_Baseline_Initialize 0060  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                 ??_Sensor_postAcquisitionProcess 00BA  
                                              ?_SYSTEM_Initialize 0001  
                                             _Button_StateMachine 00D4  
                                                   ___rparam_used 000001  
                                      __end_of_Button_Tick_helper 1B6A  
                                   MTOUCH_Sensor_Calibrate@sensor 00AF  
                                                   __end_ofi2_abs 229C  
                               __size_of_MTOUCH_Sensor_isSampling 0004  
                                              i2___lwmod@dividend 0008  
                                       ?_MTOUCH_Sensor_isSampling 0001  
                                                  __pcstackCOMRAM 0001  
                                         _MTOUCH_Button_isPressed 1EE4  
                                                    __pidataBANK0 24B6  
                                             ??_SYSTEM_Initialize 00BB  
                                      __end_of_MTOUCH_Button_Tick 2224  
                                __end_of_MTOUCH_Sensor_Initialize 1858  
                                  ?_EUSART2_SetTxInterruptHandler 00AF  
                                                   __end_of_putch 247E  
                                       ??_MTOUCH_Sensor_Calibrate 00AF  
                                                _Sensor_isEnabled 229C  
                                __size_of_Sensor_scheduleNextScan 016A  
                                                     i2printf@val 0014  
                                    ??i2_MTOUCH_Sensor_wasSampled 0001  
                                 __end_of_Button_Deviation_Update 1054  
                                          __end_of_PMD_Initialize 2368  
                                        Sensor_setInactive@sensor 00AF  
                                              __end_of_IOCBF2_ISR 2274  
                                                  _Button_Service 13F6  
                                            __end_of_EUSART2_Read 1EA8  
                                          __end_of_ringBufferPull 0F42  
                                      ?_Button_State_Initializing 00B8  
                                            Button_Service@button 00C1  
                                                         ??i2_abs 0003  
                                           ??_Sensor_isCalibrated 00B1  
                                  __end_of_Button_Baseline_Update 1154  
                                           ?_EUSART2_Transmit_ISR 0001  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 00BE  
                                        _MTOUCH_Button_Initialize 1858  
                                                       ?i2_printf 000D  
                                            __end_of_medianFilter 04F0  
                                         _Button_State_NotPressed 07E6  
                                   __size_of_MTOUCH_Sensor_Enable 0028  
                                              _Sensor_setInactive 243C  
                                       __end_of_SYSTEM_Initialize 2382  
                                MTOUCH_Sensor_isCalibrated@sensor 00AF  
                                          ??_Sensor_Sampled_Reset 00B1  
                                                         ??_putch 00B0  
                                        _ADCC_ThresholdISR_mTouch 24EE  
                                                   _eusart2RxHead 003F  
                              __size_ofi2_MTOUCH_Sensor_isEnabled 0032  
                                                   _eusart2TxHead 0041  
                                                      __pbssBANK0 0060  
                                                      __pbssBANK1 0100  
                                                      __pbssBANK2 0200  
                                                   _eusart2RxTail 003E  
                                                   _eusart2TxTail 0040  
                                      ?i2_MTOUCH_Sensor_isEnabled 0001  
                                         _MTOUCH_Sensor_isEnabled 1FC4  
                                       ??_MTOUCH_Button_State_Get 00AF  
                                                      __pnvCOMRAM 004B  
                                             ?_Sensor_setInactive 00AF  
                                                _Sensor_setActive 244E  
                                      __end_of_mtouch_button_init FC25  
                                           EUSART2_Read@readValue 00AF  
                             __size_ofi2_MTOUCH_Sensor_wasSampled 0032  
                                          ??_Sensor_setCalibrated 0003  
                                         Sensor_SetTrisBit@sensor 00B0  
                                i2MTOUCH_Sensor_wasSampled@sensor 0001  
                                  MTOUCH_Sensor_wasSampled@sensor 00AF  
                                          __end_of_Button_Service 14BA  
                                                         ?_memcpy 00AF  
                             __end_of_MTOUCH_Button_InitializeAll 1F8C  
                                     _MTOUCH_Button_InitializeAll 1F54  
                                                         _ADSTPTH 000F69  
                                                         _ADSTPTL 000F68  
                             __end_of_MTOUCH_Sensor_InitializeAll 1F54  
                                     _MTOUCH_Sensor_InitializeAll 1F1C  
                                       ??_MTOUCH_Sensor_SampleAll 00C4  
                                                         ?_printf 00BB  
                                                 ?_PMD_Initialize 0001  
                                 __end_of_Sensor_RawSample_Update 1CA8  
                                            ??_Sensor_setInactive 00B1  
                                                         ?_strcmp 00AF  
                                                         ?_strlen 00AF  
                               __size_of_MTOUCH_Sensor_wasSampled 0034  
                                       ?_MTOUCH_Sensor_wasSampled 0001  
                                                 ?_ringBufferPull 0001  
                                       Sensor_isCalibrated@sensor 00AF  
                               __end_of_Button_State_Initializing 13F6  
                                                         _SP2BRGH 000EF4  
                                                         _SP2BRGL 000EF3  
                                        _MTOUCH_Button_ServiceAll 23B6  
                                                         _OSCCON1 000E43  
                                                         _OSCCON3 000E45  
                                     __end_of_EUSART2_Receive_ISR 1762  
                              __end_of_IOCBF2_SetInterruptHandler 248C  
                                      _IOCBF2_SetInterruptHandler 247E  
                                   MTOUCH_Sensor_SampleAll@sensor 00C4  
                                                      ??i2_printf 000F  
                                                         _OSCTUNE 000E48  
                                __size_of_MTOUCH_Service_Mainloop 0028  
                                    __end_of_Button_State_Pressed 1240  
                                      i2Sensor_SetTrisBit@TrisBit 0001  
                                            __end_of_DTR_Callback 24DA  
                                                         _USB_DTR 0278  
                                Button_Baseline_Initialize@button 00B2  
                                 Sensor_setCalibratAcqTime@sensor 0001  
                                            __size_of_MTOUCH_Tick 0006  
                            __size_of_Sensor_isCalibratingAcqTime 001A  
                                 ??i2_Sensor_isCalibratingAcqTime 0003  
                                         ??i2_Sensor_isCalibrated 0003  
                                                         i2_putch 24E4  
                               __end_ofi2_MTOUCH_Sensor_isEnabled 20F6  
                                         ?_Sensor_setSamplePeriod 0001  
                                       ??_MTOUCH_Button_isPressed 00AF  
                                                      _freq_index 0081  
                                                         __Hparam 0000  
                                               _Sensor_SetTrisBit 193E  
                                                         __Lparam 0000  
                           __end_of_Sensor_postAcquisitionProcess 132A  
                          __size_of_Sensor_postAcquisitionProcess 00EA  
                                   _Sensor_postAcquisitionProcess 1240  
                                              ?_Sensor_SetTrisBit 00AF  
                                  MTOUCH_Button_Initialize@button 00B1  
                                                         ___lwdiv 1AC4  
                                                         ___lwmod 1CEE  
                                                 ?_Button_Service 0001  
                                                         __pcinit 1762  
                                                 __size_of_memcpy 004E  
                                                         __ramtop 0E00  
                                                 _scanInterrupted 0039  
                                                         __ptext0 157C  
                                                         __ptext1 0E2A  
                                                         __ptext2 1D74  
                                                         __ptext3 0000  
                                                         __ptext4 1BBC  
                                                         __ptext5 1EE4  
                                                         __ptext6 1E6C  
                                                         __ptext7 1DB2  
                                                         __ptext8 0A84  
                                                         __ptext9 2470  
                                                 __size_of_printf 0140  
                                     Button_Reading_Update@button 00B6  
                                             ??_Sensor_SetTrisBit 00B0  
                                                 __size_of_strcmp 0050  
                                                 __size_of_strlen 003E  
                                        _MTOUCH_Sensor_Initialize 17DE  
                                                         _dpowers FBCB  
                                           _OSCILLATOR_Initialize 23D0  
                                          ??_EUSART2_Transmit_ISR 0001  
                                                    __size_of_abs 002A  
                                       ??_Button_State_NotPressed 00BA  
                                        ??_PIN_MANAGER_Initialize 00B2  
                                                       _IOCBFbits 000E93  
                                  __size_of_Button_Reading_Update 0024  
                                                       _IOCBNbits 000E94  
                                     __size_of_MTOUCH_needReburst 000A  
                                                       _IOCBPbits 000E95  
                                   __end_of_Button_Reading_Update 232E  
                               MTOUCH_Sensor_InitializeAll@sensor 00BA  
                                                _callback_sampled 0048  
                                       ??_MTOUCH_Sensor_isEnabled 00AF  
                                      __size_of_SYSTEM_Initialize 001A  
                                           i2EUSART2_Write@txData 0001  
                                                _callback_pressed 0045  
                                  MTOUCH_Sensor_Initialize@sensor 00B1  
                                               _printResetMessage 1DB2  
                                 i2Sensor_scheduleNextScan@sensor 0007  
                                   Sensor_scheduleNextScan@sensor 00B5  
                                            end_of_initialization 17D4  
                                         ?_Button_DefaultCallback 0001  
                                                         memcpy@d 00B6  
                                                         memcpy@n 00B3  
                                                         memcpy@s 00B8  
                                  __end_of_Sensor_setSamplePeriod 230A  
                                              ?_printResetMessage 0001  
                                      __end_of_mtouch_sensor_init FC52  
                                        ?_Sensor_FrequencyHopping 0001  
                                       __end_of_Sensor_SetTrisBit 19A4  
                                         ?_Sensor_DefaultCallback 0001  
                                __size_of_Button_Deviation_Update 0112  
                                    ??_MTOUCH_Sensor_isCalibrated 00AF  
                                              _EUSART2_Initialize 1A66  
                                             ??_printResetMessage 00C7  
                             __end_of_MTOUCH_Sensor_RawSample_Get 1FC4  
                                     _MTOUCH_Sensor_RawSample_Get 1F8C  
                                                 i2_EUSART2_Write 1EA8  
                                                         printf@c 00C6  
                                                         printf@f 00BB  
                                                         postdec1 000FE5  
                                                         postdec2 000FDD  
                                                         postinc0 000FEE  
                                                         postinc1 000FE6  
                                                         postinc2 000FDE  
                                           __size_of_EUSART2_Read 003C  
                                      ?i2_Sensor_scheduleNextScan 0001  
                                         _Sensor_scheduleNextScan 067C  
                              __end_ofi2_MTOUCH_Sensor_wasSampled 20C4  
                                      i2_MTOUCH_Sensor_wasSampled 2092  
                                                         strcmp@r 00B4  
                                           __CFG_WDTCPS$WDTCPS_31 000000  
                                             ?_EUSART2_Initialize 0001  
                                                         strlen@s 00AF  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 00BF  
                                                       _PORTBbits 000F8A  
                                           __size_of_medianFilter 0254  
                                          Sensor_setActive@sensor 00AF  
                                         _IOCBF2_InterruptHandler 004B  
                                   Button_Deviation_Update@button 00AF  
                                                       _TRISEbits 000F85  
                                 i2MTOUCH_Sensor_isEnabled@sensor 0001  
                                   MTOUCH_Sensor_isEnabled@sensor 00AF  
                                       __end_of_printResetMessage 1DF0  
                                      MTOUCH_Sensor_Enable@sensor 00AF  
                                             _callback_notPressed 0042  
                                                __CFG_FEXTOSC$OFF 000000  
                                               i2___lwdiv@divisor 0003  
                                __end_of_MTOUCH_Sensor_isSampling 2512  
                             __size_of_MTOUCH_Sensor_isCalibrated 0034  
                                  __end_of_Button_DefaultCallback 2516  
                                                       i2___lwdiv 1B6A  
                                                       i2___lwmod 1D32  
                                               i2___lwdiv@counter 0007  
                                     __end_ofi2_Sensor_SetTrisBit 1A06  
                                            ??_EUSART2_Initialize 00B2  
                                        __end_of_Sensor_isEnabled 22C2  
                                          __size_of_ringBufferLUT 029C  
                                      Sensor_setCalibrated@sensor 0001  
                                  __end_of_Sensor_DefaultCallback 2514  
                                     MTOUCH_Button_State_Get@name 00AF  
                                        ??_Sensor_autoCalibration 0007  
                                                    _EUSART2_Read 1E6C  
                                              medianFilter@sensor 00B5  
                                __size_of_Sensor_RawSample_Update 004E  
                           __end_ofi2_Sensor_isCalibratingAcqTime 2418  
                          __size_ofi2_Sensor_isCalibratingAcqTime 0018  
                                   i2_Sensor_isCalibratingAcqTime 2400  
                                        ringBufferPull@charNumber 00CD  
                                                    _medianFilter 029C  
                                    __end_of_INTERRUPT_Initialize 249A  
                                            _Button_State_Pressed 1154  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 1E6C  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 003E  
                                   _MTOUCH_Sensor_ADCC_Initialize 1E2E  
                               __end_ofi2_Sensor_scheduleNextScan 0A84  
                                      ??_MTOUCH_Button_Initialize 00B0  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 067C  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 018C  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0001  
                      ??_Sensor_FrequencyHopping_Autotune_Process 00B3  
                        _Sensor_FrequencyHopping_Autotune_Process 04F0  
                                 ??_MTOUCH_Sensor_Scan_Initialize 00AF  
                                  ?_Sensor_postAcquisitionProcess 0001  
                                                   __pidataCOMRAM 24F8  
                                              _Button_Tick_helper 1B18  
                                                  __end_of_memcpy 1C5A  
                                          ?_OSCILLATOR_Initialize 0001  
                                             MTOUCH_Button_Tick@i 00B3  
                                      ??_ADCC_ThresholdISR_mTouch 0010  
                                        __end_of_Sensor_setActive 2460  
                                                  __end_of_printf 0BC4  
                                     ??_Button_State_Initializing 00BA  
                                           __size_of_DTR_Callback 000C  
                                                  __end_of_strcmp 1C0C  
                                                    i2printf@flag 0012  
                                                  __end_of_strlen 1DB2  
                                           _MTOUCH_Sensor_Service 18CE  
                                                    i2printf@prec 0013  
                                             start_initialization 1762  
                                         _MTOUCH_Service_Mainloop 21D4  
                                 __size_of_PIN_MANAGER_Initialize 00C2  
                                              _MTOUCH_Button_Tick 21FC  
                                             ?_Button_Tick_helper 00AF  
                                                     __end_of_abs 21AC  
                                                       i2printf@c 0016  
                                                       i2printf@f 000D  
                                 __end_of_Sensor_FrequencyHopping 22E6  
                   EUSART2_SetRxInterruptHandler@interruptHandler 00AF  
                   EUSART2_SetTxInterruptHandler@interruptHandler 00AF  
                                                     putch@txData 00B0  
                                                      ?i2___lwdiv 0001  
                                                      ?i2___lwmod 0008  
                                               __size_ofi2_printf 0132  
                                           __end_of_EUSART2_Write 1E2E  
                                     ??i2_MTOUCH_Sensor_isEnabled 0001  
                                             ?_MTOUCH_Button_Tick 0001  
                                 Button_State_Initializing@button 00B8  
                                         __end_ofi2_EUSART2_Write 1EE4  
                                      __size_of_Sensor_SetTrisBit 0066  
                                         medianFilter@bufferIndex 0033  
                                        __size_of_PIN_MANAGER_IOC 000C  
                                __end_of_MTOUCH_Sensor_wasSampled 202C  
                                                __CFG_LPBOREN$OFF 000000  
                                       ??_Sensor_scheduleNextScan 00B1  
                                            ??_Button_Tick_helper 00B1  
                                    __end_of_MTOUCH_Sensor_Enable 21D4  
                                                ??_PMD_Initialize 00AF  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 00BC  
                                        ringBufferPull@index_1970 00CF  
                                           ?_Button_State_Pressed 00B8  
                                                    _DTR_Callback 24CE  
                                                ??_ringBufferPull 00CA  
                                      ??_MTOUCH_Button_ServiceAll 00C3  
                                                     __pdataBANK0 00D4  
                                                        ??_memcpy 00B5  
                                                   _ringBufferLUT 0000  
                                     __end_of_Sensor_isCalibrated 23B6  
                                    ??_Button_Baseline_Initialize 00B4  
                                            ??_MTOUCH_Button_Tick 00B3  
                                              _mtouch_button_init FBD5  
                                      Sensor_Sampled_Reset@sensor 00AF  
                                                        ??_printf 00BF  
                                                        ??_strcmp 00B3  
                                                        ??_strlen 00B1  
                                    ?_Sensor_isCalibratingAcqTime 00AF  
                                                  _eusart2RxCount 003D  
                                                     __pbssCOMRAM 0029  
                                                   _sampling_flag 003A  
                                                   __pcstackBANK0 00AF  
                                      __size_of_printResetMessage 003E  
                                     ?_IOCBF2_SetInterruptHandler 00AF  
                                               i2___lwmod@divisor 000A  
                                               i2___lwmod@counter 000C  
                                        Sensor_SetTrisBit@TrisBit 00AF  
                                  MTOUCH_Button_ServiceAll@button 00C3  
                                             EUSART2_Write@txData 00AF  
                                 ??_EUSART2_SetRxInterruptHandler 00B2  
                                   __size_of_Sensor_Sampled_Reset 0012  
                                                        ?i2_putch 0001  
                                         _Button_Deviation_Update 0F42  
                                      ?_Sensor_setCalibratAcqTime 0001  
                                  __size_ofi2_Sensor_isCalibrated 0018  
                                   __end_ofi2_Sensor_isCalibrated 2400  
                                       _Button_State_Initializing 132A  
                                        _MTOUCH_Sensor_isSampling 250E  
                              __end_of_MTOUCH_Sensor_isCalibrated 2060  
                                      _MTOUCH_Sensor_isCalibrated 202C  
                                                       __pnvBANK0 00E0  
                                 __size_of_Sensor_autoCalibration 0134  
                                               _Sensor_setSampled 2460  
                                                ___lwdiv@dividend 00AF  
                                          _PIN_MANAGER_Initialize 14BA  
                                                ??_Button_Service 00BF  
                                ??_IOCBF2_DefaultInterruptHandler 0001  
                                 ?_IOCBF2_DefaultInterruptHandler 0001  
                                        ?_MTOUCH_Sensor_Calibrate 0001  
                                              ?_Sensor_setSampled 0001  
                                                       __pintcode 0008  
                              Button_Reading_Update_Helper@button 00B2  
                                                   __pmediumconst FBCA  
                                      ??_MTOUCH_Sensor_Initialize 00B1  
                                   __size_of_Sensor_setCalibrated 001E  
                                                        ?___lwdiv 00AF  
                                                        ?___lwmod 00B6  
                                                  ?_ringBufferLUT 00C7  
                               _EUSART2_TxDefaultInterruptHandler 00E3  
                                                __CFG_PPS1WAY$OFF 000000  
                                       i2_MTOUCH_Sensor_isEnabled 20C4  
                                             ??_Sensor_setSampled 0003  
                                       ??_MTOUCH_Service_Mainloop 00C5  
                                          ?_MTOUCH_Sensor_Service 0001  
                                     __size_of_Sensor_setInactive 0012  
                                                        _BAUD2CON 000EF7  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0001  
                                                  __size_ofi2_abs 0028  
                                   ??_Sensor_isCalibratingAcqTime 00B1  
                                                   ??_MTOUCH_Tick 00B4  
                                       i2Sensor_SetTrisBit@sensor 0002  
                                        ?_MTOUCH_Button_State_Get 0001  
                                                ___lwdiv@quotient 00B4  
                                                     ??i2___lwdiv 0005  
                                                     ??i2___lwmod 000C  
                                                  __size_of_putch 000E  
                                            _INTERRUPT_Initialize 248C  
                                    __size_of_EUSART2_Receive_ISR 0096  
                                       __end_of_Sensor_setSampled 2470  
                                                ?i2_EUSART2_Write 0001  
                                                        _LATFbits 000F7E  
                                         _Sensor_RawSample_Update 1C5A  
                               __end_of_Sensor_setCalibratAcqTime 2156  
                                                        _IPR0bits 000E1F  
                                                        _IPR1bits 000E20  
                                                        _PIE0bits 000E29  
                                                        _IPR3bits 000E22  
                                                        _PIE1bits 000E2A  
                                                        _PIE3bits 000E2C  
                                                        i2u310_45 19D4  
                                                        i2u310_46 19D6  
                                                        i2u311_45 19E0  
                                                        i2u311_46 19E2  
                                                        i2u313_40 20EE  
                                                        i2u314_40 23FC  
                                                        i2u315_40 2414  
                                                        i2u307_45 19B0  
                                                        i2u307_46 19B2  
                                                        i2u404_40 0D9E  
                                                        i2u308_45 19BC  
                                                        i2u308_46 19BE  
                                                        i2u317_40 20BC  
                                                        i2u309_45 19C8  
                                                        i2u309_46 19CA  
                                                        i2u406_40 0E0C  
                                                        i2u414_40 1708  
                                                        _PIR0bits 000E33  
                                                        i2u431_48 007A  
                                                        _PIR1bits 000E34  
                                                        i2u370_45 0A7E  
                                                        i2u347_45 0BF6  
                                                        i2u364_40 0976  
                                                        i2u372_40 1B8C  
                                                        i2u428_48 005E  
                                                        _PIR3bits 000E36  
                                                        i2u375_40 1D4C  
                                                        i2u368_45 0A62  
                                                        i2u369_40 0A7C  
                                                        i2u378_48 225A  
                                                        i2u378_49 226E  
                                          ??_Button_State_Pressed 00BA  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 2126  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0030  
                                  _MTOUCH_Sensor_Sampled_ResetAll 20F6  
                                        ?_MTOUCH_Sensor_SampleAll 0001  
                                               ??_PIN_MANAGER_IOC 0001  
                                              _mtouch_sensor_init FC25  
                                     ??i2_Sensor_scheduleNextScan 0003  
                                     ?i2_MTOUCH_Sensor_wasSampled 0001  
                                        _MTOUCH_Sensor_wasSampled 1FF8  
                                              _mtouch_time_toScan 003C  
                                __size_of_Sensor_FrequencyHopping 0024  
                                        ??_Button_Baseline_Update 00B1  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 00C0  
                                                      _ADCON0bits 000F60  
                                          _Sensor_autoCalibration 0BC4  
                                      __end_of_MTOUCH_needReburst 24E4  
                                                      printf@flag 00C2  
                                                      printf@prec 00C3  
                                                        _WPUEbits 000EAE  
                                   __size_of_EUSART2_Transmit_ISR 0032  
                                                        i2_printf 0CF8  
                                            _MTOUCH_Sensor_Enable 21AC  
                                                       copy_data0 1776  
                                                       copy_data1 1796  
                                        Button_Tick_helper@button 00AF  
                                       ??_Button_Deviation_Update 00B1  
                                           ?_INTERRUPT_Initialize 0001  
                                           _Button_Reading_Update 230A  
                                        ?_MTOUCH_Button_isPressed 0001  
                                               ?_Sensor_isEnabled 00AF  
                                             __end_of_MTOUCH_Tick 250E  
                                               _MTOUCH_Initialize 2418  
                                 __end_of_MTOUCH_Sensor_Calibrate 224C  
                                                __size_ofi2_putch 000A  
                                              ??_Sensor_isEnabled 00B1  
                                              ?_MTOUCH_Initialize 0001  
                                                        __Hrparam 0000  
                           __end_of_EUSART2_SetRxInterruptHandler 24B6  
                          __size_of_EUSART2_SetRxInterruptHandler 000E  
                                   _EUSART2_SetRxInterruptHandler 24A8  
                                                       memcpy@tmp 00B5  
                                                        __Lrparam 0000  
                                              __CFG_BOREN$SBORDIS 000000  
                                                 ??_ringBufferLUT 00C9  
                                                    _sample_delay 0038  
                               Sensor_postAcquisitionProcess@name 00C0  
                                         ??_OSCILLATOR_Initialize 00AF  
                              __end_of_Button_Baseline_Initialize 1A66  
                                      _Button_Baseline_Initialize 1A06  
                                             ??_MTOUCH_Initialize 00BB  
                                                __size_of___lwdiv 0054  
                                                __size_of___lwmod 0044  
                                        ?_Button_State_NotPressed 00B8  
                                     i2Sensor_isCalibrated@sensor 0001  
                                              Button_Service@name 00C0  
                                                      _ANSELEbits 000EAF  
                                 __end_of_MTOUCH_Button_State_Get 2182  
                                        ?_MTOUCH_Sensor_isEnabled 0001  
                                               ?_Sensor_setActive 00AF  
                                                 ___lwdiv@divisor 00B1  
                                              ??_Sensor_setActive 00B1  
                                                 ___lwdiv@counter 00B3  
                                           ?_MTOUCH_Sensor_Enable 0001  
                                                        __ptext10 1DF0  
                                                        __ptext11 1CEE  
                                                        __ptext20 1E2E  
                                                        __ptext12 1AC4  
                                                        __ptext21 1F1C  
                                                        __ptext13 2368  
                                                        __ptext30 21D4  
                                                        __ptext22 17DE  
                                                        __ptext14 234C  
                                                        __ptext31 24DA  
                                                        __ptext23 21AC  
                                                        __ptext15 14BA  
                                                        __ptext40 239C  
                                                        __ptext32 2508  
                                                        __ptext24 1F54  
                                                        __ptext16 247E  
                                                        __ptext41 193E  
                                                        __ptext33 21FC  
                                                        __ptext25 1C0C  
                                                        __ptext17 23D0  
                                                        __ptext50 029C  
                                                        __ptext42 1FC4  
                                                        __ptext34 1B18  
                                                        __ptext26 248C  
                                                        __ptext18 2418  
                                                        __ptext51 2512  
                                                        __ptext43 22C2  
                                                        __ptext35 20F6  
                                                        __ptext27 1A66  
                                                        __ptext19 2502  
                                                        __ptext60 132A  
                                                        __ptext52 04F0  
                                                        __ptext44 22E6  
                                                        __ptext36 242A  
                                                        __ptext28 249A  
                                                        __ptext61 1154  
                                                        __ptext53 2182  
                                                        __ptext45 1240  
                                                        __ptext37 1CA8  
                                                        __ptext29 24A8  
                                                        __ptext70 0F42  
                                                        __ptext62 1858  
                                                        __ptext54 250E  
                                                        __ptext46 243C  
                                                        __ptext38 067C  
                                                        __ptext71 2156  
                                                        __ptext63 2224  
                                                        __ptext55 23B6  
                                                        __ptext47 244E  
                                                        __ptext39 2382  
                                                        __ptext80 24E4  
                                                        __ptext64 2514  
                                                        __ptext56 13F6  
                                                        __ptext48 229C  
                                                        __ptext81 1EA8  
                                                        __ptext73 24C2  
                                                        __ptext65 1054  
                                                        __ptext57 1FF8  
                                                        __ptext49 1C5A  
                                                        __ptext90 20C4  
                                                        __ptext82 1D32  
                                                        __ptext74 224C  
                                                        __ptext66 1A06  
                                                        __ptext58 202C  
                                                        __ptext91 2460  
                                                        __ptext83 1B6A  
                                                        __ptext75 24CE  
                                                        __ptext67 230A  
                                                        __ptext59 07E6  
                                                        __ptext92 0BC4  
                                                        __ptext84 24EE  
                                                        __ptext76 2516  
                                                        __ptext68 1624  
                                                        __ptext93 2274  
                                                        __ptext85 18CE  
                                                        __ptext77 2060  
                                                        __ptext69 1F8C  
                                                        __ptext94 2400  
                                                        __ptext86 0938  
                                                        __ptext78 16CC  
                                                        __ptext95 232E  
                                                        __ptext87 23E8  
                                                        __ptext79 0CF8  
                                                        __ptext96 2126  
                                                        __ptext88 19A4  
                                                        __ptext97 0000  
                                                        __ptext89 2092  
                                       i2_Sensor_scheduleNextScan 0938  
                                                      _IOCBF2_ISR 224C  
                                       __end_of_MTOUCH_Initialize 242A  
                                       ??_Sensor_RawSample_Update 00B8  
                                     __size_of_EUSART2_Initialize 005E  
                                                        _freq_hop 00DD  
                                      __size_of_Sensor_setSampled 0010  
                                               _currentScanSensor 003B  
                                                   __size_of_main 00A8  
                                 __end_of_MTOUCH_Sensor_SampleAll 1CEE  
                                            __CFG_WDTCWS$WDTCWS_7 000000  
                                      Sensor_autoCalibration@name 000D  
                                    __size_ofi2_Sensor_SetTrisBit 0062  
                                   MTOUCH_needReburst@needReburst 00AF  
                                              __CFG_BORV$VBOR_190 000000  
                                                      _RC2STAbits 000EF5  
                                                        int$flags 0050  
                              __size_of_Button_State_Initializing 00CC  
                                                       printf@val 00C4  
                                 __size_of_Button_Baseline_Update 0100  
                                    ?_MTOUCH_Button_InitializeAll 0001  
                                    ?_MTOUCH_Sensor_InitializeAll 0001  
                                                   _mtouch_button 0140  
                                                      _INTCONbits 000FF2  
                                                   _mtouch_sensor 0082  
                                                        memcpy@d1 00AF  
                                                        memcpy@s1 00B1  
                                 __end_of_MTOUCH_Button_isPressed 1F1C  
                                        ??_Sensor_setSamplePeriod 00AF  
                                      ??_MTOUCH_Sensor_isSampling 00AF  
                                          ??_INTERRUPT_Initialize 00AF  
                                                     _MTOUCH_Tick 2508  
                                          ?_Button_Reading_Update 00B6  
                                Button_Deviation_Update@deviation 00B7  
                                    MTOUCH_Button_Initialize@name 00B0  
                               __size_of_MTOUCH_Button_Initialize 0076  
                                                        intlevel2 0000  
                                       ?_MTOUCH_Button_Initialize 0001  
                                                ___lwmod@dividend 00B6  
                                         ?_PIN_MANAGER_Initialize 0001  
                               __size_of_ADCC_ThresholdISR_mTouch 000A  
                                     ??_Sensor_setCalibratAcqTime 0003  
                                       ?_ADCC_ThresholdISR_mTouch 0001  
                                               __CFG_CLKOUTEN$OFF 000000  
                                     ?_MTOUCH_Sensor_isCalibrated 0001  
                Sensor_FrequencyHopping_Autotune_Process@variance 00BA  
                                    Sensor_scheduleNextScan@state 00B3  
                                     __size_of_Button_Tick_helper 0052  
                                 __end_of_Button_State_NotPressed 0938  
                                                        printf@ap 00C0  
                                         _Sensor_FrequencyHopping 22C2  
                                         ??_MTOUCH_Sensor_Service 000E  
                                  ?_EUSART2_SetRxInterruptHandler 00AF  
                                    __end_of_Sensor_Sampled_Reset 243C  
                                 __end_of_MTOUCH_Sensor_isEnabled 1FF8  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                          __size_of_EUSART2_Write 003E  
                                             _EUSART2_Receive_ISR 16CC  
                               i2Sensor_scheduleNextScan@skipScan 0006  
                                 Sensor_scheduleNextScan@skipScan 00B4  
                          __end_of_INTERRUPT_InterruptManagerHigh 00F2  
                         __size_of_INTERRUPT_InterruptManagerHigh 00EA  
                                  _INTERRUPT_InterruptManagerHigh 0008  
                                                      _RX2PPSbits 000E11  
                                   ??_MTOUCH_Button_InitializeAll 00BA  
                                                        strcmp@s1 00AF  
                                                        strcmp@s2 00B1  
                                               ringBufferLUT@line 00C7  
                                        ??_Button_DefaultCallback 00AF  
                                                 ___lwmod@divisor 00B8  
                                   ??_MTOUCH_Sensor_InitializeAll 00BA  
                          __end_of_IOCBF2_DefaultInterruptHandler 2518  
                         __size_of_IOCBF2_DefaultInterruptHandler 0002  
                                  _IOCBF2_DefaultInterruptHandler 2516  
                                __size_of_MTOUCH_Sensor_Calibrate 0028  
                                                        strlen@cp 00B3  
                                                 ___lwmod@counter 00BA  
                                          ??_MTOUCH_Sensor_Enable 00AF  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 00B9  
                             i2Sensor_isCalibratingAcqTime@sensor 0001  
                               Sensor_isCalibratingAcqTime@sensor 00AF  
                                    __size_of_Sensor_isCalibrated 001A  
                                        ??_Sensor_DefaultCallback 00AF  
                                    __end_of_Sensor_setCalibrated 234C  
                            __end_of_Button_Reading_Update_Helper 16CC  
                           __size_of_Button_Reading_Update_Helper 00A8  
                                    _Button_Reading_Update_Helper 1624  
                                                      _TX2STAbits 000EF6  
                               __size_of_MTOUCH_Button_ServiceAll 001A  
                                       ?_MTOUCH_Button_ServiceAll 0001  
                                   Button_State_NotPressed@button 00B8  
                                                     ?_IOCBF2_ISR 0001  
                                      __size_of_MTOUCH_Initialize 0012  
                                  __end_of_PIN_MANAGER_Initialize 157C  
                                          _Button_Baseline_Update 1054  
                                 ??_EUSART2_SetTxInterruptHandler 00B2  
                                            ?_EUSART2_Receive_ISR 0001  
                                        ?_Sensor_scheduleNextScan 0001  
                                                 _PIN_MANAGER_IOC 24C2  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 00AF  
                                     MTOUCH_Button_isPressed@name 00B0  
                                      ??_MTOUCH_Sensor_wasSampled 00AF  
                               _EUSART2_RxDefaultInterruptHandler 00E0  
                                __size_of_MTOUCH_Button_State_Get 002C  
                                           i2_Sensor_isCalibrated 23E8  
