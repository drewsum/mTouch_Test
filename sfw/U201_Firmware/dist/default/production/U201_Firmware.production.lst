

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 14:47:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,inline
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1,inline
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1,inline
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.45 (B)
   112                           ; Generated 30/01/2018 GMT
   113                           ; 
   114                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18LF67K40 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataCOMRAM
   147  011FEC                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _callback_notPressed
   151  011FEC  3E                 	db	low _Button_DefaultCallback
   152  011FED  20                 	db	high _Button_DefaultCallback
   153  011FEE  01                 	db	low (_Button_DefaultCallback shr (0+16))
   154                           
   155                           ;initializer for _callback_pressed
   156  011FEF  3E                 	db	low _Button_DefaultCallback
   157  011FF0  20                 	db	high _Button_DefaultCallback
   158  011FF1  01                 	db	low (_Button_DefaultCallback shr (0+16))
   159                           
   160                           ;initializer for _freq_hop
   161  011FF2  00                 	db	0
   162  011FF3  3C                 	db	60
   163  011FF4  78                 	db	120
   164                           
   165                           ;initializer for _callback_sampled
   166  011FF5  3C                 	db	low _Sensor_DefaultCallback
   167  011FF6  20                 	db	high _Sensor_DefaultCallback
   168  011FF7  01                 	db	low (_Sensor_DefaultCallback shr (0+16))
   169                           
   170                           	psect	idataBANK0
   171  012022                     __pidataBANK0:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _Button_StateMachine
   175  012022  E4                 	db	low _Button_State_Initializing
   176  012023  0F                 	db	high _Button_State_Initializing
   177  012024  01                 	db	low (_Button_State_Initializing shr (0+16))
   178  012025  10                 	db	low _Button_State_NotPressed
   179  012026  07                 	db	high _Button_State_NotPressed
   180  012027  01                 	db	low (_Button_State_NotPressed shr (0+16))
   181  012028  0E                 	db	low _Button_State_Pressed
   182  012029  0E                 	db	high _Button_State_Pressed
   183  01202A  01                 	db	low (_Button_State_Pressed shr (0+16))
   184                           
   185                           	psect	mediumconst
   186  00FD3E                     __pmediumconst:
   187                           	opt stack 0
   188  00FD3E  00                 	db	0
   189  00FD3F                     _mtouch_button_init:
   190                           	opt stack 0
   191  00FD3F  00                 	db	0
   192  00FD40  00                 	db	0
   193  00FD41  00                 	db	0
   194  00FD42  0000               	dw	0
   195  00FD44  0000               	dw	0
   196  00FD46  0000               	dw	0
   197  00FD48  00                 	db	0
   198  00FD49  0000               	dw	0
   199  00FD4B  0000               	dw	0
   200  00FD4D  64                 	db	100
   201  00FD4E  01                 	db	1
   202  00FD4F  01                 	db	1
   203  00FD50  01                 	db	1
   204  00FD51  00                 	db	0
   205  00FD52  0000               	dw	0
   206  00FD54  0000               	dw	0
   207  00FD56  0000               	dw	0
   208  00FD58  00                 	db	0
   209  00FD59  0000               	dw	0
   210  00FD5B  0000               	dw	0
   211  00FD5D  64                 	db	100
   212  00FD5E  01                 	db	1
   213  00FD5F  02                 	db	2
   214  00FD60  02                 	db	2
   215  00FD61  00                 	db	0
   216  00FD62  0000               	dw	0
   217  00FD64  0000               	dw	0
   218  00FD66  0000               	dw	0
   219  00FD68  00                 	db	0
   220  00FD69  0000               	dw	0
   221  00FD6B  0000               	dw	0
   222  00FD6D  64                 	db	100
   223  00FD6E  01                 	db	1
   224  00FD6F  03                 	db	3
   225  00FD70  03                 	db	3
   226  00FD71  00                 	db	0
   227  00FD72  0000               	dw	0
   228  00FD74  0000               	dw	0
   229  00FD76  0000               	dw	0
   230  00FD78  00                 	db	0
   231  00FD79  0000               	dw	0
   232  00FD7B  0000               	dw	0
   233  00FD7D  64                 	db	100
   234  00FD7E  01                 	db	1
   235  00FD7F  04                 	db	4
   236  00FD80  04                 	db	4
   237  00FD81  00                 	db	0
   238  00FD82  0000               	dw	0
   239  00FD84  0000               	dw	0
   240  00FD86  0000               	dw	0
   241  00FD88  00                 	db	0
   242  00FD89  0000               	dw	0
   243  00FD8B  0000               	dw	0
   244  00FD8D  64                 	db	100
   245  00FD8E  01                 	db	1
   246  00FD8F                     __end_of_mtouch_button_init:
   247                           	opt stack 0
   248  00FD8F                     _mtouch_sensor_init:
   249                           	opt stack 0
   250  00FD8F  00                 	db	0
   251  00FD90  22                 	db	34
   252  00FD91  50                 	db	80
   253  00FD92  28                 	db	40
   254  00FD93  20                 	db	32
   255  00FD94  00                 	db	0
   256  00FD95  0000               	dw	0
   257  00FD97  00                 	db	0
   258  00FD98  01                 	db	1
   259  00FD99  23                 	db	35
   260  00FD9A  50                 	db	80
   261  00FD9B  28                 	db	40
   262  00FD9C  20                 	db	32
   263  00FD9D  00                 	db	0
   264  00FD9E  0000               	dw	0
   265  00FDA0  00                 	db	0
   266  00FDA1  02                 	db	2
   267  00FDA2  24                 	db	36
   268  00FDA3  50                 	db	80
   269  00FDA4  28                 	db	40
   270  00FDA5  20                 	db	32
   271  00FDA6  00                 	db	0
   272  00FDA7  0000               	dw	0
   273  00FDA9  00                 	db	0
   274  00FDAA  03                 	db	3
   275  00FDAB  25                 	db	37
   276  00FDAC  50                 	db	80
   277  00FDAD  28                 	db	40
   278  00FDAE  20                 	db	32
   279  00FDAF  00                 	db	0
   280  00FDB0  0000               	dw	0
   281  00FDB2  00                 	db	0
   282  00FDB3  04                 	db	4
   283  00FDB4  26                 	db	38
   284  00FDB5  50                 	db	80
   285  00FDB6  28                 	db	40
   286  00FDB7  20                 	db	32
   287  00FDB8  00                 	db	0
   288  00FDB9  0000               	dw	0
   289  00FDBB  00                 	db	0
   290  00FDBC                     __end_of_mtouch_sensor_init:
   291                           	opt stack 0
   292  00FDBC                     STR_27:
   293  00FDBC  20                 	db	32
   294  00FDBD  20                 	db	32
   295  00FDBE  20                 	db	32
   296  00FDBF  4C                 	db	76	;'L'
   297  00FDC0  69                 	db	105	;'i'
   298  00FDC1  73                 	db	115	;'s'
   299  00FDC2  74                 	db	116	;'t'
   300  00FDC3  20                 	db	32
   301  00FDC4  6F                 	db	111	;'o'
   302  00FDC5  66                 	db	102	;'f'
   303  00FDC6  20                 	db	32
   304  00FDC7  73                 	db	115	;'s'
   305  00FDC8  75                 	db	117	;'u'
   306  00FDC9  70                 	db	112	;'p'
   307  00FDCA  70                 	db	112	;'p'
   308  00FDCB  6F                 	db	111	;'o'
   309  00FDCC  72                 	db	114	;'r'
   310  00FDCD  74                 	db	116	;'t'
   311  00FDCE  65                 	db	101	;'e'
   312  00FDCF  64                 	db	100	;'d'
   313  00FDD0  20                 	db	32
   314  00FDD1  63                 	db	99	;'c'
   315  00FDD2  6F                 	db	111	;'o'
   316  00FDD3  6D                 	db	109	;'m'
   317  00FDD4  6D                 	db	109	;'m'
   318  00FDD5  61                 	db	97	;'a'
   319  00FDD6  6E                 	db	110	;'n'
   320  00FDD7  64                 	db	100	;'d'
   321  00FDD8  73                 	db	115	;'s'
   322  00FDD9  3A                 	db	58	;':'
   323  00FDDA  0A                 	db	10
   324  00FDDB  0D                 	db	13
   325  00FDDC  20                 	db	32
   326  00FDDD  20                 	db	32
   327  00FDDE  20                 	db	32
   328  00FDDF  4C                 	db	76	;'L'
   329  00FDE0  45                 	db	69	;'E'
   330  00FDE1  44                 	db	68	;'D'
   331  00FDE2  73                 	db	115	;'s'
   332  00FDE3  20                 	db	32
   333  00FDE4  4F                 	db	79	;'O'
   334  00FDE5  6E                 	db	110	;'n'
   335  00FDE6  3A                 	db	58	;':'
   336  00FDE7  20                 	db	32
   337  00FDE8  54                 	db	84	;'T'
   338  00FDE9  75                 	db	117	;'u'
   339  00FDEA  72                 	db	114	;'r'
   340  00FDEB  6E                 	db	110	;'n'
   341  00FDEC  73                 	db	115	;'s'
   342  00FDED  20                 	db	32
   343  00FDEE  61                 	db	97	;'a'
   344  00FDEF  6C                 	db	108	;'l'
   345  00FDF0  6C                 	db	108	;'l'
   346  00FDF1  20                 	db	32
   347  00FDF2  4C                 	db	76	;'L'
   348  00FDF3  45                 	db	69	;'E'
   349  00FDF4  44                 	db	68	;'D'
   350  00FDF5  73                 	db	115	;'s'
   351  00FDF6  20                 	db	32
   352  00FDF7  4F                 	db	79	;'O'
   353  00FDF8  6E                 	db	110	;'n'
   354  00FDF9  0A                 	db	10
   355  00FDFA  0D                 	db	13
   356  00FDFB  20                 	db	32
   357  00FDFC  20                 	db	32
   358  00FDFD  20                 	db	32
   359  00FDFE  4C                 	db	76	;'L'
   360  00FDFF  45                 	db	69	;'E'
   361  00FE00  44                 	db	68	;'D'
   362  00FE01  73                 	db	115	;'s'
   363  00FE02  20                 	db	32
   364  00FE03  4F                 	db	79	;'O'
   365  00FE04  66                 	db	102	;'f'
   366  00FE05  66                 	db	102	;'f'
   367  00FE06  3A                 	db	58	;':'
   368  00FE07  20                 	db	32
   369  00FE08  54                 	db	84	;'T'
   370  00FE09  75                 	db	117	;'u'
   371  00FE0A  72                 	db	114	;'r'
   372  00FE0B  6E                 	db	110	;'n'
   373  00FE0C  73                 	db	115	;'s'
   374  00FE0D  20                 	db	32
   375  00FE0E  61                 	db	97	;'a'
   376  00FE0F  6C                 	db	108	;'l'
   377  00FE10  6C                 	db	108	;'l'
   378  00FE11  20                 	db	32
   379  00FE12  4C                 	db	76	;'L'
   380  00FE13  45                 	db	69	;'E'
   381  00FE14  44                 	db	68	;'D'
   382  00FE15  73                 	db	115	;'s'
   383  00FE16  20                 	db	32
   384  00FE17  4F                 	db	79	;'O'
   385  00FE18  66                 	db	102	;'f'
   386  00FE19  66                 	db	102	;'f'
   387  00FE1A  0A                 	db	10
   388  00FE1B  0D                 	db	13
   389  00FE1C  20                 	db	32
   390  00FE1D  20                 	db	32
   391  00FE1E  20                 	db	32
   392  00FE1F  52                 	db	82	;'R'
   393  00FE20  65                 	db	101	;'e'
   394  00FE21  73                 	db	115	;'s'
   395  00FE22  65                 	db	101	;'e'
   396  00FE23  74                 	db	116	;'t'
   397  00FE24  3A                 	db	58	;':'
   398  00FE25  20                 	db	32
   399  00FE26  43                 	db	67	;'C'
   400  00FE27  6C                 	db	108	;'l'
   401  00FE28  65                 	db	101	;'e'
   402  00FE29  61                 	db	97	;'a'
   403  00FE2A  72                 	db	114	;'r'
   404  00FE2B  73                 	db	115	;'s'
   405  00FE2C  20                 	db	32
   406  00FE2D  74                 	db	116	;'t'
   407  00FE2E  68                 	db	104	;'h'
   408  00FE2F  65                 	db	101	;'e'
   409  00FE30  20                 	db	32
   410  00FE31  74                 	db	116	;'t'
   411  00FE32  65                 	db	101	;'e'
   412  00FE33  72                 	db	114	;'r'
   413  00FE34  6D                 	db	109	;'m'
   414  00FE35  69                 	db	105	;'i'
   415  00FE36  6E                 	db	110	;'n'
   416  00FE37  61                 	db	97	;'a'
   417  00FE38  6C                 	db	108	;'l'
   418  00FE39  20                 	db	32
   419  00FE3A  61                 	db	97	;'a'
   420  00FE3B  6E                 	db	110	;'n'
   421  00FE3C  64                 	db	100	;'d'
   422  00FE3D  20                 	db	32
   423  00FE3E  72                 	db	114	;'r'
   424  00FE3F  65                 	db	101	;'e'
   425  00FE40  73                 	db	115	;'s'
   426  00FE41  65                 	db	101	;'e'
   427  00FE42  74                 	db	116	;'t'
   428  00FE43  73                 	db	115	;'s'
   429  00FE44  20                 	db	32
   430  00FE45  74                 	db	116	;'t'
   431  00FE46  68                 	db	104	;'h'
   432  00FE47  65                 	db	101	;'e'
   433  00FE48  20                 	db	32
   434  00FE49  6D                 	db	109	;'m'
   435  00FE4A  69                 	db	105	;'i'
   436  00FE4B  63                 	db	99	;'c'
   437  00FE4C  72                 	db	114	;'r'
   438  00FE4D  6F                 	db	111	;'o'
   439  00FE4E  0A                 	db	10
   440  00FE4F  0D                 	db	13
   441  00FE50  20                 	db	32
   442  00FE51  20                 	db	32
   443  00FE52  20                 	db	32
   444  00FE53  43                 	db	67	;'C'
   445  00FE54  6C                 	db	108	;'l'
   446  00FE55  65                 	db	101	;'e'
   447  00FE56  61                 	db	97	;'a'
   448  00FE57  72                 	db	114	;'r'
   449  00FE58  3A                 	db	58	;':'
   450  00FE59  20                 	db	32
   451  00FE5A  43                 	db	67	;'C'
   452  00FE5B  6C                 	db	108	;'l'
   453  00FE5C  65                 	db	101	;'e'
   454  00FE5D  61                 	db	97	;'a'
   455  00FE5E  72                 	db	114	;'r'
   456  00FE5F  73                 	db	115	;'s'
   457  00FE60  20                 	db	32
   458  00FE61  74                 	db	116	;'t'
   459  00FE62  68                 	db	104	;'h'
   460  00FE63  65                 	db	101	;'e'
   461  00FE64  20                 	db	32
   462  00FE65  74                 	db	116	;'t'
   463  00FE66  65                 	db	101	;'e'
   464  00FE67  72                 	db	114	;'r'
   465  00FE68  6D                 	db	109	;'m'
   466  00FE69  69                 	db	105	;'i'
   467  00FE6A  6E                 	db	110	;'n'
   468  00FE6B  61                 	db	97	;'a'
   469  00FE6C  6C                 	db	108	;'l'
   470  00FE6D  20                 	db	32
   471  00FE6E  62                 	db	98	;'b'
   472  00FE6F  75                 	db	117	;'u'
   473  00FE70  74                 	db	116	;'t'
   474  00FE71  20                 	db	32
   475  00FE72  64                 	db	100	;'d'
   476  00FE73  6F                 	db	111	;'o'
   477  00FE74  65                 	db	101	;'e'
   478  00FE75  73                 	db	115	;'s'
   479  00FE76  6E                 	db	110	;'n'
   480  00FE77  27                 	db	39
   481  00FE78  74                 	db	116	;'t'
   482  00FE79  20                 	db	32
   483  00FE7A  72                 	db	114	;'r'
   484  00FE7B  65                 	db	101	;'e'
   485  00FE7C  73                 	db	115	;'s'
   486  00FE7D  65                 	db	101	;'e'
   487  00FE7E  74                 	db	116	;'t'
   488  00FE7F  20                 	db	32
   489  00FE80  74                 	db	116	;'t'
   490  00FE81  68                 	db	104	;'h'
   491  00FE82  65                 	db	101	;'e'
   492  00FE83  20                 	db	32
   493  00FE84  6D                 	db	109	;'m'
   494  00FE85  69                 	db	105	;'i'
   495  00FE86  63                 	db	99	;'c'
   496  00FE87  72                 	db	114	;'r'
   497  00FE88  6F                 	db	111	;'o'
   498  00FE89  0A                 	db	10
   499  00FE8A  0D                 	db	13
   500  00FE8B  20                 	db	32
   501  00FE8C  20                 	db	32
   502  00FE8D  20                 	db	32
   503  00FE8E  2A                 	db	42
   504  00FE8F  49                 	db	73	;'I'
   505  00FE90  44                 	db	68	;'D'
   506  00FE91  4E                 	db	78	;'N'
   507  00FE92  3F                 	db	63	;'?'
   508  00FE93  3A                 	db	58	;':'
   509  00FE94  20                 	db	32
   510  00FE95  52                 	db	82	;'R'
   511  00FE96  65                 	db	101	;'e'
   512  00FE97  74                 	db	116	;'t'
   513  00FE98  75                 	db	117	;'u'
   514  00FE99  72                 	db	114	;'r'
   515  00FE9A  6E                 	db	110	;'n'
   516  00FE9B  73                 	db	115	;'s'
   517  00FE9C  20                 	db	32
   518  00FE9D  64                 	db	100	;'d'
   519  00FE9E  65                 	db	101	;'e'
   520  00FE9F  76                 	db	118	;'v'
   521  00FEA0  69                 	db	105	;'i'
   522  00FEA1  63                 	db	99	;'c'
   523  00FEA2  65                 	db	101	;'e'
   524  00FEA3  20                 	db	32
   525  00FEA4  69                 	db	105	;'i'
   526  00FEA5  64                 	db	100	;'d'
   527  00FEA6  65                 	db	101	;'e'
   528  00FEA7  6E                 	db	110	;'n'
   529  00FEA8  74                 	db	116	;'t'
   530  00FEA9  69                 	db	105	;'i'
   531  00FEAA  66                 	db	102	;'f'
   532  00FEAB  69                 	db	105	;'i'
   533  00FEAC  63                 	db	99	;'c'
   534  00FEAD  61                 	db	97	;'a'
   535  00FEAE  74                 	db	116	;'t'
   536  00FEAF  69                 	db	105	;'i'
   537  00FEB0  6F                 	db	111	;'o'
   538  00FEB1  6E                 	db	110	;'n'
   539  00FEB2  0A                 	db	10
   540  00FEB3  0D                 	db	13
   541  00FEB4  20                 	db	32
   542  00FEB5  20                 	db	32
   543  00FEB6  20                 	db	32
   544  00FEB7  48                 	db	72	;'H'
   545  00FEB8  65                 	db	101	;'e'
   546  00FEB9  6C                 	db	108	;'l'
   547  00FEBA  70                 	db	112	;'p'
   548  00FEBB  3A                 	db	58	;':'
   549  00FEBC  20                 	db	32
   550  00FEBD  54                 	db	84	;'T'
   551  00FEBE  68                 	db	104	;'h'
   552  00FEBF  69                 	db	105	;'i'
   553  00FEC0  73                 	db	115	;'s'
   554  00FEC1  20                 	db	32
   555  00FEC2  6D                 	db	109	;'m'
   556  00FEC3  65                 	db	101	;'e'
   557  00FEC4  73                 	db	115	;'s'
   558  00FEC5  73                 	db	115	;'s'
   559  00FEC6  61                 	db	97	;'a'
   560  00FEC7  67                 	db	103	;'g'
   561  00FEC8  65                 	db	101	;'e'
   562  00FEC9  2C                 	db	44
   563  00FECA  20                 	db	32
   564  00FECB  6C                 	db	108	;'l'
   565  00FECC  69                 	db	105	;'i'
   566  00FECD  73                 	db	115	;'s'
   567  00FECE  74                 	db	116	;'t'
   568  00FECF  73                 	db	115	;'s'
   569  00FED0  20                 	db	32
   570  00FED1  63                 	db	99	;'c'
   571  00FED2  6F                 	db	111	;'o'
   572  00FED3  6D                 	db	109	;'m'
   573  00FED4  6D                 	db	109	;'m'
   574  00FED5  61                 	db	97	;'a'
   575  00FED6  6E                 	db	110	;'n'
   576  00FED7  64                 	db	100	;'d'
   577  00FED8  73                 	db	115	;'s'
   578  00FED9  0A                 	db	10
   579  00FEDA  0D                 	db	13
   580  00FEDB  00                 	db	0
   581  00FEDC                     STR_4:
   582  00FEDC  50                 	db	80	;'P'
   583  00FEDD  49                 	db	73	;'I'
   584  00FEDE  43                 	db	67	;'C'
   585  00FEDF  31                 	db	49	;'1'
   586  00FEE0  38                 	db	56	;'8'
   587  00FEE1  46                 	db	70	;'F'
   588  00FEE2  36                 	db	54	;'6'
   589  00FEE3  37                 	db	55	;'7'
   590  00FEE4  4B                 	db	75	;'K'
   591  00FEE5  34                 	db	52	;'4'
   592  00FEE6  30                 	db	48	;'0'
   593  00FEE7  20                 	db	32
   594  00FEE8  6D                 	db	109	;'m'
   595  00FEE9  54                 	db	84	;'T'
   596  00FEEA  6F                 	db	111	;'o'
   597  00FEEB  75                 	db	117	;'u'
   598  00FEEC  63                 	db	99	;'c'
   599  00FEED  68                 	db	104	;'h'
   600  00FEEE  20                 	db	32
   601  00FEEF  44                 	db	68	;'D'
   602  00FEF0  65                 	db	101	;'e'
   603  00FEF1  6D                 	db	109	;'m'
   604  00FEF2  6F                 	db	111	;'o'
   605  00FEF3  0A                 	db	10
   606  00FEF4  0D                 	db	13
   607  00FEF5  42                 	db	66	;'B'
   608  00FEF6  61                 	db	97	;'a'
   609  00FEF7  75                 	db	117	;'u'
   610  00FEF8  64                 	db	100	;'d'
   611  00FEF9  20                 	db	32
   612  00FEFA  72                 	db	114	;'r'
   613  00FEFB  61                 	db	97	;'a'
   614  00FEFC  74                 	db	116	;'t'
   615  00FEFD  65                 	db	101	;'e'
   616  00FEFE  3A                 	db	58	;':'
   617  00FEFF  20                 	db	32
   618  00FF00  31                 	db	49	;'1'
   619  00FF01  31                 	db	49	;'1'
   620  00FF02  35                 	db	53	;'5'
   621  00FF03  32                 	db	50	;'2'
   622  00FF04  30                 	db	48	;'0'
   623  00FF05  30                 	db	48	;'0'
   624  00FF06  20                 	db	32
   625  00FF07  6B                 	db	107	;'k'
   626  00FF08  62                 	db	98	;'b'
   627  00FF09  70                 	db	112	;'p'
   628  00FF0A  73                 	db	115	;'s'
   629  00FF0B  0A                 	db	10
   630  00FF0C  0D                 	db	13
   631  00FF0D  4E                 	db	78	;'N'
   632  00FF0E  6F                 	db	111	;'o'
   633  00FF0F  20                 	db	32
   634  00FF10  70                 	db	112	;'p'
   635  00FF11  61                 	db	97	;'a'
   636  00FF12  72                 	db	114	;'r'
   637  00FF13  69                 	db	105	;'i'
   638  00FF14  74                 	db	116	;'t'
   639  00FF15  79                 	db	121	;'y'
   640  00FF16  2C                 	db	44
   641  00FF17  20                 	db	32
   642  00FF18  38                 	db	56	;'8'
   643  00FF19  20                 	db	32
   644  00FF1A  62                 	db	98	;'b'
   645  00FF1B  69                 	db	105	;'i'
   646  00FF1C  74                 	db	116	;'t'
   647  00FF1D  73                 	db	115	;'s'
   648  00FF1E  2C                 	db	44
   649  00FF1F  20                 	db	32
   650  00FF20  6E                 	db	110	;'n'
   651  00FF21  6F                 	db	111	;'o'
   652  00FF22  20                 	db	32
   653  00FF23  66                 	db	102	;'f'
   654  00FF24  6C                 	db	108	;'l'
   655  00FF25  6F                 	db	111	;'o'
   656  00FF26  77                 	db	119	;'w'
   657  00FF27  20                 	db	32
   658  00FF28  63                 	db	99	;'c'
   659  00FF29  6F                 	db	111	;'o'
   660  00FF2A  6E                 	db	110	;'n'
   661  00FF2B  74                 	db	116	;'t'
   662  00FF2C  72                 	db	114	;'r'
   663  00FF2D  6F                 	db	111	;'o'
   664  00FF2E  6C                 	db	108	;'l'
   665  00FF2F  2C                 	db	44
   666  00FF30  20                 	db	32
   667  00FF31  31                 	db	49	;'1'
   668  00FF32  20                 	db	32
   669  00FF33  73                 	db	115	;'s'
   670  00FF34  74                 	db	116	;'t'
   671  00FF35  6F                 	db	111	;'o'
   672  00FF36  70                 	db	112	;'p'
   673  00FF37  20                 	db	32
   674  00FF38  62                 	db	98	;'b'
   675  00FF39  69                 	db	105	;'i'
   676  00FF3A  74                 	db	116	;'t'
   677  00FF3B  0A                 	db	10
   678  00FF3C  0D                 	db	13
   679  00FF3D  43                 	db	67	;'C'
   680  00FF3E  6F                 	db	111	;'o'
   681  00FF3F  6D                 	db	109	;'m'
   682  00FF40  6D                 	db	109	;'m'
   683  00FF41  61                 	db	97	;'a'
   684  00FF42  6E                 	db	110	;'n'
   685  00FF43  64                 	db	100	;'d'
   686  00FF44  73                 	db	115	;'s'
   687  00FF45  20                 	db	32
   688  00FF46  61                 	db	97	;'a'
   689  00FF47  72                 	db	114	;'r'
   690  00FF48  65                 	db	101	;'e'
   691  00FF49  20                 	db	32
   692  00FF4A  63                 	db	99	;'c'
   693  00FF4B  61                 	db	97	;'a'
   694  00FF4C  73                 	db	115	;'s'
   695  00FF4D  65                 	db	101	;'e'
   696  00FF4E  20                 	db	32
   697  00FF4F  73                 	db	115	;'s'
   698  00FF50  65                 	db	101	;'e'
   699  00FF51  6E                 	db	110	;'n'
   700  00FF52  73                 	db	115	;'s'
   701  00FF53  69                 	db	105	;'i'
   702  00FF54  74                 	db	116	;'t'
   703  00FF55  69                 	db	105	;'i'
   704  00FF56  76                 	db	118	;'v'
   705  00FF57  65                 	db	101	;'e'
   706  00FF58  0A                 	db	10
   707  00FF59  0D                 	db	13
   708  00FF5A  45                 	db	69	;'E'
   709  00FF5B  6E                 	db	110	;'n'
   710  00FF5C  74                 	db	116	;'t'
   711  00FF5D  65                 	db	101	;'e'
   712  00FF5E  72                 	db	114	;'r'
   713  00FF5F  20                 	db	32
   714  00FF60  61                 	db	97	;'a'
   715  00FF61  20                 	db	32
   716  00FF62  63                 	db	99	;'c'
   717  00FF63  6F                 	db	111	;'o'
   718  00FF64  6D                 	db	109	;'m'
   719  00FF65  6D                 	db	109	;'m'
   720  00FF66  61                 	db	97	;'a'
   721  00FF67  6E                 	db	110	;'n'
   722  00FF68  64                 	db	100	;'d'
   723  00FF69  2C                 	db	44
   724  00FF6A  20                 	db	32
   725  00FF6B  6F                 	db	111	;'o'
   726  00FF6C  72                 	db	114	;'r'
   727  00FF6D  20                 	db	32
   728  00FF6E  48                 	db	72	;'H'
   729  00FF6F  65                 	db	101	;'e'
   730  00FF70  6C                 	db	108	;'l'
   731  00FF71  70                 	db	112	;'p'
   732  00FF72  20                 	db	32
   733  00FF73  66                 	db	102	;'f'
   734  00FF74  6F                 	db	111	;'o'
   735  00FF75  72                 	db	114	;'r'
   736  00FF76  20                 	db	32
   737  00FF77  6C                 	db	108	;'l'
   738  00FF78  69                 	db	105	;'i'
   739  00FF79  73                 	db	115	;'s'
   740  00FF7A  74                 	db	116	;'t'
   741  00FF7B  20                 	db	32
   742  00FF7C  6F                 	db	111	;'o'
   743  00FF7D  66                 	db	102	;'f'
   744  00FF7E  20                 	db	32
   745  00FF7F  63                 	db	99	;'c'
   746  00FF80  6F                 	db	111	;'o'
   747  00FF81  6D                 	db	109	;'m'
   748  00FF82  6D                 	db	109	;'m'
   749  00FF83  61                 	db	97	;'a'
   750  00FF84  6E                 	db	110	;'n'
   751  00FF85  64                 	db	100	;'d'
   752  00FF86  73                 	db	115	;'s'
   753  00FF87  0A                 	db	10
   754  00FF88  0D                 	db	13
   755  00FF89  00                 	db	0
   756  00FF8A                     STR_23:
   757  00FF8A  20                 	db	32
   758  00FF8B  20                 	db	32
   759  00FF8C  20                 	db	32
   760  00FF8D  20                 	db	32
   761  00FF8E  6D                 	db	109	;'m'
   762  00FF8F  54                 	db	84	;'T'
   763  00FF90  6F                 	db	111	;'o'
   764  00FF91  75                 	db	117	;'u'
   765  00FF92  63                 	db	99	;'c'
   766  00FF93  68                 	db	104	;'h'
   767  00FF94  20                 	db	32
   768  00FF95  54                 	db	84	;'T'
   769  00FF96  65                 	db	101	;'e'
   770  00FF97  73                 	db	115	;'s'
   771  00FF98  74                 	db	116	;'t'
   772  00FF99  20                 	db	32
   773  00FF9A  42                 	db	66	;'B'
   774  00FF9B  6F                 	db	111	;'o'
   775  00FF9C  61                 	db	97	;'a'
   776  00FF9D  72                 	db	114	;'r'
   777  00FF9E  64                 	db	100	;'d'
   778  00FF9F  2C                 	db	44
   779  00FFA0  20                 	db	32
   780  00FFA1  52                 	db	82	;'R'
   781  00FFA2  45                 	db	69	;'E'
   782  00FFA3  56                 	db	86	;'V'
   783  00FFA4  41                 	db	65	;'A'
   784  00FFA5  00                 	db	0
   785  00FFA6                     STR_8:
   786  00FFA6  20                 	db	32
   787  00FFA7  20                 	db	32
   788  00FFA8  20                 	db	32
   789  00FFA9  20                 	db	32
   790  00FFAA  4C                 	db	76	;'L'
   791  00FFAB  41                 	db	65	;'A'
   792  00FFAC  54                 	db	84	;'T'
   793  00FFAD  46                 	db	70	;'F'
   794  00FFAE  20                 	db	32
   795  00FFAF  3D                 	db	61	;'='
   796  00FFB0  20                 	db	32
   797  00FFB1  30                 	db	48	;'0'
   798  00FFB2  78                 	db	120	;'x'
   799  00FFB3  30                 	db	48	;'0'
   800  00FFB4  30                 	db	48	;'0'
   801  00FFB5  0A                 	db	10
   802  00FFB6  0D                 	db	13
   803  00FFB7  00                 	db	0
   804  00FFB8                     STR_12:
   805  00FFB8  4C                 	db	76	;'L'
   806  00FFB9  41                 	db	65	;'A'
   807  00FFBA  54                 	db	84	;'T'
   808  00FFBB  46                 	db	70	;'F'
   809  00FFBC  20                 	db	32
   810  00FFBD  3D                 	db	61	;'='
   811  00FFBE  20                 	db	32
   812  00FFBF  30                 	db	48	;'0'
   813  00FFC0  78                 	db	120	;'x'
   814  00FFC1  46                 	db	70	;'F'
   815  00FFC2  46                 	db	70	;'F'
   816  00FFC3  0A                 	db	10
   817  00FFC4  0D                 	db	13
   818  00FFC5  00                 	db	0
   819  00FFC6                     STR_10:
   820  00FFC6  4C                 	db	76	;'L'
   821  00FFC7  45                 	db	69	;'E'
   822  00FFC8  44                 	db	68	;'D'
   823  00FFC9  73                 	db	115	;'s'
   824  00FFCA  20                 	db	32
   825  00FFCB  4F                 	db	79	;'O'
   826  00FFCC  66                 	db	102	;'f'
   827  00FFCD  66                 	db	102	;'f'
   828  00FFCE  00                 	db	0
   829  00FFCF                     STR_6:
   830  00FFCF  4C                 	db	76	;'L'
   831  00FFD0  45                 	db	69	;'E'
   832  00FFD1  44                 	db	68	;'D'
   833  00FFD2  73                 	db	115	;'s'
   834  00FFD3  20                 	db	32
   835  00FFD4  4F                 	db	79	;'O'
   836  00FFD5  6E                 	db	110	;'n'
   837  00FFD6  00                 	db	0
   838  00FFD7                     STR_20:
   839  00FFD7  2A                 	db	42
   840  00FFD8  49                 	db	73	;'I'
   841  00FFD9  44                 	db	68	;'D'
   842  00FFDA  4E                 	db	78	;'N'
   843  00FFDB  3F                 	db	63	;'?'
   844  00FFDC  00                 	db	0
   845  00FFDD                     STR_17:
   846  00FFDD  43                 	db	67	;'C'
   847  00FFDE  6C                 	db	108	;'l'
   848  00FFDF  65                 	db	101	;'e'
   849  00FFE0  61                 	db	97	;'a'
   850  00FFE1  72                 	db	114	;'r'
   851  00FFE2  00                 	db	0
   852  00FFE3                     STR_14:
   853  00FFE3  52                 	db	82	;'R'
   854  00FFE4  65                 	db	101	;'e'
   855  00FFE5  73                 	db	115	;'s'
   856  00FFE6  65                 	db	101	;'e'
   857  00FFE7  74                 	db	116	;'t'
   858  00FFE8  00                 	db	0
   859  00FFE9                     STR_25:
   860  00FFE9  48                 	db	72	;'H'
   861  00FFEA  65                 	db	101	;'e'
   862  00FFEB  6C                 	db	108	;'l'
   863  00FFEC  70                 	db	112	;'p'
   864  00FFED  00                 	db	0
   865  00FFEE                     STR_2:
   866  00FFEE  1B                 	db	27
   867  00FFEF  5B                 	db	91	;'['
   868  00FFF0  32                 	db	50	;'2'
   869  00FFF1  4A                 	db	74	;'J'
   870  00FFF2  00                 	db	0
   871  00FFF3                     STR_21:
   872  00FFF3  49                 	db	73	;'I'
   873  00FFF4  44                 	db	68	;'D'
   874  00FFF5  4E                 	db	78	;'N'
   875  00FFF6  00                 	db	0
   876  00FFF7                     STR_3:
   877  00FFF7  1B                 	db	27
   878  00FFF8  5B                 	db	91	;'['
   879  00FFF9  48                 	db	72	;'H'
   880  00FFFA  00                 	db	0
   881  00FFFB                     STR_1:
   882  00FFFB  1B                 	db	27
   883  00FFFC  5B                 	db	91	;'['
   884  00FFFD  4B                 	db	75	;'K'
   885  00FFFE  00                 	db	0
   886  0000                     
   887                           ; #config settings
   888  00FFFF  00                 	db	0	; dummy byte at the end
   889  0000                     
   890                           	psect	nvCOMRAM
   891  000042                     __pnvCOMRAM:
   892                           	opt stack 0
   893  000042                     _EUSART2_TxDefaultInterruptHandler:
   894                           	opt stack 0
   895  000042                     	ds	3
   896  000045                     _eusart2TxBufferRemaining:
   897                           	opt stack 0
   898  000045                     	ds	1
   899                           
   900                           	psect	nvBANK0
   901  0000D5                     __pnvBANK0:
   902                           	opt stack 0
   903  0000D5                     _EUSART2_RxDefaultInterruptHandler:
   904                           	opt stack 0
   905  0000D5                     	ds	3
   906  0000                     _ANSELEbits	set	3759
   907  0000                     _WPUEbits	set	3758
   908  0000                     _PMD5	set	3665
   909  0000                     _PMD4	set	3664
   910  0000                     _PMD3	set	3663
   911  0000                     _PMD2	set	3662
   912  0000                     _PMD1	set	3661
   913  0000                     _PMD0	set	3660
   914  0000                     _OSCTUNE	set	3656
   915  0000                     _OSCFRQ	set	3657
   916  0000                     _OSCEN	set	3655
   917  0000                     _OSCCON3	set	3653
   918  0000                     _OSCCON1	set	3651
   919  0000                     _RC2REG	set	3825
   920  0000                     _RC2STAbits	set	3829
   921  0000                     _TX2REG	set	3826
   922  0000                     _TX2STAbits	set	3830
   923  0000                     _SP2BRGH	set	3828
   924  0000                     _SP2BRGL	set	3827
   925  0000                     _TX2STA	set	3830
   926  0000                     _RC2STA	set	3829
   927  0000                     _BAUD2CON	set	3831
   928  0000                     _PIR1bits	set	3636
   929  0000                     _PIE1bits	set	3626
   930  0000                     _PIR3bits	set	3638
   931  0000                     _PIE3bits	set	3628
   932  0000                     _IPR1bits	set	3616
   933  0000                     _IPR3bits	set	3618
   934  0000                     _RX2PPSbits	set	3601
   935  0000                     _RG7PPS	set	3721
   936  0000                     _ODCOND	set	3749
   937  0000                     _ODCONC	set	3744
   938  0000                     _ODCONH	set	3775
   939  0000                     _ODCONB	set	3736
   940  0000                     _ODCONG	set	3770
   941  0000                     _ODCONA	set	3728
   942  0000                     _ODCONF	set	3762
   943  0000                     _ODCONE	set	3757
   944  0000                     _WPUH	set	3776
   945  0000                     _WPUC	set	3745
   946  0000                     _WPUA	set	3729
   947  0000                     _WPUG	set	3771
   948  0000                     _WPUB	set	3737
   949  0000                     _WPUE	set	3758
   950  0000                     _WPUF	set	3763
   951  0000                     _WPUD	set	3750
   952  0000                     _ANSELA	set	3730
   953  0000                     _ANSELF	set	3764
   954  0000                     _ANSELG	set	3772
   955  0000                     _ANSELE	set	3759
   956  0000                     _ANSELB	set	3738
   957  0000                     _ANSELD	set	3751
   958  0000                     _ADPCH	set	3935
   959  0000                     _ADPRE	set	3934
   960  0000                     _ADACQ	set	3932
   961  0000                     _ADCON3	set	3931
   962  0000                     _ADCON2	set	3930
   963  0000                     _ADCON1	set	3929
   964  0000                     _ADCAP	set	3933
   965  0000                     _ADREF	set	3928
   966  0000                     _ADCLK	set	3927
   967  0000                     _ADFLTR	set	3954
   968  0000                     _ADACC	set	3952
   969  0000                     _ADCON0bits	set	3936
   970  0000                     _ADRPT	set	3942
   971  0000                     _ADCON0	set	3936
   972  0000                     _ADSTPTH	set	3945
   973  0000                     _ADSTPTL	set	3944
   974  0000                     _ADUTHH	set	3949
   975  0000                     _ADUTHL	set	3948
   976  0000                     _ADLTHH	set	3947
   977  0000                     _ADLTHL	set	3946
   978  0000                     _TRISEbits	set	3973
   979  0000                     _LATFbits	set	3966
   980  0000                     _INTCONbits	set	4082
   981  0000                     _TRISD	set	3972
   982  0000                     _TRISC	set	3971
   983  0000                     _TRISH	set	3976
   984  0000                     _TRISB	set	3970
   985  0000                     _TRISG	set	3975
   986  0000                     _TRISA	set	3969
   987  0000                     _TRISF	set	3974
   988  0000                     _TRISE	set	3973
   989  0000                     _LATH	set	3968
   990  0000                     _LATC	set	3963
   991  0000                     _LATG	set	3967
   992  0000                     _LATB	set	3962
   993  0000                     _LATF	set	3966
   994  0000                     _LATA	set	3961
   995  0000                     _LATD	set	3964
   996  0000                     _LATE	set	3965
   997  0000                     _GIE	set	32663
   998                           
   999                           	psect	cinit
  1000  0113E8                     __pcinit:
  1001                           	opt stack 0
  1002  0113E8                     start_initialization:
  1003                           	opt stack 0
  1004  0113E8                     __initialization:
  1005                           	opt stack 0
  1006                           
  1007                           ; Initialize objects allocated to BANK0 (9 bytes)
  1008                           ; load TBLPTR registers with __pidataBANK0
  1009  0113E8  0E22               	movlw	low __pidataBANK0
  1010  0113EA  6EF6               	movwf	tblptrl,c
  1011  0113EC  0E20               	movlw	high __pidataBANK0
  1012  0113EE  6EF7               	movwf	tblptrh,c
  1013  0113F0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1014  0113F2  6EF8               	movwf	tblptru,c
  1015  0113F4  EE00  F0CC         	lfsr	0,__pdataBANK0
  1016  0113F8  EE10 F009          	lfsr	1,9
  1017  0113FC                     copy_data0:
  1018  0113FC  0009               	tblrd		*+
  1019  0113FE  CFF5 FFEE          	movff	tablat,postinc0
  1020  011402  50E5               	movf	postdec1,w,c
  1021  011404  50E1               	movf	fsr1l,w,c
  1022  011406  E1FA               	bnz	copy_data0
  1023                           
  1024                           ; Initialize objects allocated to COMRAM (12 bytes)
  1025                           ; load TBLPTR registers with __pidataCOMRAM
  1026  011408  0EEC               	movlw	low __pidataCOMRAM
  1027  01140A  6EF6               	movwf	tblptrl,c
  1028  01140C  0E1F               	movlw	high __pidataCOMRAM
  1029  01140E  6EF7               	movwf	tblptrh,c
  1030  011410  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1031  011412  6EF8               	movwf	tblptru,c
  1032  011414  EE00  F036         	lfsr	0,__pdataCOMRAM
  1033  011418  EE10 F00C          	lfsr	1,12
  1034  01141C                     copy_data1:
  1035  01141C  0009               	tblrd		*+
  1036  01141E  CFF5 FFEE          	movff	tablat,postinc0
  1037  011422  50E5               	movf	postdec1,w,c
  1038  011424  50E1               	movf	fsr1l,w,c
  1039  011426  E1FA               	bnz	copy_data1
  1040                           
  1041                           ; Clear objects allocated to BANK2 (64 bytes)
  1042  011428  EE02  F000         	lfsr	0,__pbssBANK2
  1043  01142C  0E40               	movlw	64
  1044  01142E                     clear_0:
  1045  01142E  6AEE               	clrf	postinc0,c
  1046  011430  06E8               	decf	wreg,f,c
  1047  011432  E1FD               	bnz	clear_0
  1048                           
  1049                           ; Clear objects allocated to BANK1 (208 bytes)
  1050  011434  EE01  F000         	lfsr	0,__pbssBANK1
  1051  011438  0ED0               	movlw	208
  1052  01143A                     clear_1:
  1053  01143A  6AEE               	clrf	postinc0,c
  1054  01143C  06E8               	decf	wreg,f,c
  1055  01143E  E1FD               	bnz	clear_1
  1056                           
  1057                           ; Clear objects allocated to BANK0 (85 bytes)
  1058  011440  EE00  F060         	lfsr	0,__pbssBANK0
  1059  011444  0E55               	movlw	85
  1060  011446                     clear_2:
  1061  011446  6AEE               	clrf	postinc0,c
  1062  011448  06E8               	decf	wreg,f,c
  1063  01144A  E1FD               	bnz	clear_2
  1064                           
  1065                           ; Clear objects allocated to COMRAM (20 bytes)
  1066  01144C  EE00  F022         	lfsr	0,__pbssCOMRAM
  1067  011450  0E14               	movlw	20
  1068  011452                     clear_3:
  1069  011452  6AEE               	clrf	postinc0,c
  1070  011454  06E8               	decf	wreg,f,c
  1071  011456  E1FD               	bnz	clear_3
  1072  011458                     end_of_initialization:
  1073                           	opt stack 0
  1074  011458                     __end_of__initialization:
  1075                           	opt stack 0
  1076  011458  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1077  01145A  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1078  01145C  0100               	movlb	0
  1079  01145E  EFA8  F089         	goto	_main	;jump to C main() function
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	bssCOMRAM
  1090  000022                     __pbssCOMRAM:
  1091                           	opt stack 0
  1092  000022                     medianFilter@bufferIndex:
  1093                           	opt stack 0
  1094  000022                     	ds	5
  1095  000027                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:
  1096                           	opt stack 0
  1097  000027                     	ds	3
  1098  00002A                     _sample_delay:
  1099                           	opt stack 0
  1100  00002A                     	ds	1
  1101  00002B                     _freq_index:
  1102                           	opt stack 0
  1103  00002B                     	ds	1
  1104  00002C                     _scanInterrupted:
  1105                           	opt stack 0
  1106  00002C                     	ds	1
  1107  00002D                     _sampling_flag:
  1108                           	opt stack 0
  1109  00002D                     	ds	1
  1110  00002E                     _currentScanSensor:
  1111                           	opt stack 0
  1112  00002E                     	ds	1
  1113  00002F                     _mtouch_time_toScan:
  1114                           	opt stack 0
  1115  00002F                     	ds	1
  1116  000030                     _eusart2RxStringReady:
  1117                           	opt stack 0
  1118  000030                     	ds	1
  1119  000031                     _eusart2RxCount:
  1120                           	opt stack 0
  1121  000031                     	ds	1
  1122  000032                     _eusart2RxTail:
  1123                           	opt stack 0
  1124  000032                     	ds	1
  1125  000033                     _eusart2RxHead:
  1126                           	opt stack 0
  1127  000033                     	ds	1
  1128  000034                     _eusart2TxTail:
  1129                           	opt stack 0
  1130  000034                     	ds	1
  1131  000035                     _eusart2TxHead:
  1132                           	opt stack 0
  1133  000035                     	ds	1
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postdec1	equ	0xFE5
  1141                           fsr1l	equ	0xFE1
  1142                           
  1143                           	psect	dataCOMRAM
  1144  000036                     __pdataCOMRAM:
  1145                           	opt stack 0
  1146  000036                     _callback_notPressed:
  1147                           	opt stack 0
  1148  000036                     	ds	3
  1149  000039                     _callback_pressed:
  1150                           	opt stack 0
  1151  000039                     	ds	3
  1152  00003C                     _freq_hop:
  1153                           	opt stack 0
  1154  00003C                     	ds	3
  1155  00003F                     _callback_sampled:
  1156                           	opt stack 0
  1157  00003F                     	ds	3
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postdec1	equ	0xFE5
  1165                           fsr1l	equ	0xFE1
  1166                           
  1167                           	psect	bssBANK0
  1168  000060                     __pbssBANK0:
  1169                           	opt stack 0
  1170  000060                     _sensor_medianBuffer:
  1171                           	opt stack 0
  1172  000060                     	ds	30
  1173  00007E                     _packet_sample:
  1174                           	opt stack 0
  1175  00007E                     	ds	10
  1176  000088                     _mtouch_sensor:
  1177                           	opt stack 0
  1178  000088                     	ds	45
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           postdec1	equ	0xFE5
  1186                           fsr1l	equ	0xFE1
  1187                           
  1188                           	psect	dataBANK0
  1189  0000CC                     __pdataBANK0:
  1190                           	opt stack 0
  1191  0000CC                     _Button_StateMachine:
  1192                           	opt stack 0
  1193  0000CC                     	ds	9
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           postdec1	equ	0xFE5
  1201                           fsr1l	equ	0xFE1
  1202                           
  1203                           	psect	bssBANK1
  1204  000100                     __pbssBANK1:
  1205                           	opt stack 0
  1206  000100                     _eusart2RxBuffer:
  1207                           	opt stack 0
  1208  000100                     	ds	64
  1209  000140                     _mtouch_button:
  1210                           	opt stack 0
  1211  000140                     	ds	80
  1212  000190                     _line:
  1213                           	opt stack 0
  1214  000190                     	ds	64
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           postdec1	equ	0xFE5
  1222                           fsr1l	equ	0xFE1
  1223                           
  1224                           	psect	bssBANK2
  1225  000200                     __pbssBANK2:
  1226                           	opt stack 0
  1227  000200                     _eusart2TxBuffer:
  1228                           	opt stack 0
  1229  000200                     	ds	64
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           
  1239                           	psect	cstackBANK0
  1240  0000B5                     __pcstackBANK0:
  1241                           	opt stack 0
  1242  0000B5                     ?_strlen:
  1243                           	opt stack 0
  1244  0000B5                     ?_strcmp:
  1245                           	opt stack 0
  1246  0000B5                     ?_abs:
  1247                           	opt stack 0
  1248  0000B5                     ?_medianFilter:
  1249                           	opt stack 0
  1250  0000B5                     ?_MTOUCH_Sensor_RawSample_Get:
  1251                           	opt stack 0
  1252  0000B5                     EUSART2_Read@readValue:
  1253                           	opt stack 0
  1254  0000B5                     EUSART2_Write@txData:
  1255                           	opt stack 0
  1256  0000B5                     MTOUCH_needReburst@needReburst:
  1257                           	opt stack 0
  1258  0000B5                     Sensor_SetTrisBit@TrisBit:
  1259                           	opt stack 0
  1260  0000B5                     MTOUCH_Sensor_Enable@sensor:
  1261                           	opt stack 0
  1262  0000B5                     MTOUCH_Sensor_isEnabled@sensor:
  1263                           	opt stack 0
  1264  0000B5                     MTOUCH_Sensor_Calibrate@sensor:
  1265                           	opt stack 0
  1266  0000B5                     MTOUCH_Sensor_isCalibrated@sensor:
  1267                           	opt stack 0
  1268  0000B5                     MTOUCH_Sensor_wasSampled@sensor:
  1269                           	opt stack 0
  1270  0000B5                     MTOUCH_Button_State_Get@name:
  1271                           	opt stack 0
  1272  0000B5                     Sensor_isEnabled@sensor:
  1273                           	opt stack 0
  1274  0000B5                     Sensor_setActive@sensor:
  1275                           	opt stack 0
  1276  0000B5                     Sensor_setInactive@sensor:
  1277                           	opt stack 0
  1278  0000B5                     Sensor_isCalibrated@sensor:
  1279                           	opt stack 0
  1280  0000B5                     Sensor_isCalibratingAcqTime@sensor:
  1281                           	opt stack 0
  1282  0000B5                     Sensor_Sampled_Reset@sensor:
  1283                           	opt stack 0
  1284  0000B5                     Button_Tick_helper@button:
  1285                           	opt stack 0
  1286  0000B5                     Button_Deviation_Update@button:
  1287                           	opt stack 0
  1288  0000B5                     Button_Baseline_Update@button:
  1289                           	opt stack 0
  1290  0000B5                     abs@a:
  1291                           	opt stack 0
  1292  0000B5                     memcpy@d1:
  1293                           	opt stack 0
  1294  0000B5                     strcmp@s1:
  1295                           	opt stack 0
  1296  0000B5                     strlen@s:
  1297                           	opt stack 0
  1298  0000B5                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1299                           	opt stack 0
  1300  0000B5                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x0
  1304  0000B5                     	ds	1
  1305  0000B6                     putch@txData:
  1306                           	opt stack 0
  1307  0000B6                     Sensor_SetTrisBit@sensor:
  1308                           	opt stack 0
  1309  0000B6                     MTOUCH_Button_Initialize@name:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x1
  1313  0000B6                     	ds	1
  1314  0000B7                     ??_strlen:
  1315  0000B7                     ??_Sensor_scheduleNextScan:
  1316  0000B7                     ??_abs:
  1317  0000B7                     ??_medianFilter:
  1318  0000B7                     ??_Button_Deviation_Update:
  1319  0000B7                     ??_Button_Baseline_Update:
  1320  0000B7                     ?_printf:
  1321                           	opt stack 0
  1322  0000B7                     MTOUCH_Sensor_Initialize@sensor:
  1323                           	opt stack 0
  1324  0000B7                     MTOUCH_Sensor_RawSample_Get@name:
  1325                           	opt stack 0
  1326  0000B7                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
  1327                           	opt stack 0
  1328  0000B7                     MTOUCH_Button_Initialize@button:
  1329                           	opt stack 0
  1330  0000B7                     printf@f:
  1331                           	opt stack 0
  1332  0000B7                     memcpy@s1:
  1333                           	opt stack 0
  1334  0000B7                     strcmp@s2:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x2
  1338  0000B7                     	ds	1
  1339  0000B8                     Button_Reading_Update_Helper@button:
  1340                           	opt stack 0
  1341  0000B8                     Button_Baseline_Initialize@button:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x3
  1345  0000B8                     	ds	1
  1346  0000B9                     ??_strcmp:
  1347  0000B9                     ??_Sensor_FrequencyHopping_Autotune_Process:
  1348  0000B9                     Sensor_scheduleNextScan@state:
  1349                           	opt stack 0
  1350  0000B9                     MTOUCH_Button_Tick@i:
  1351                           	opt stack 0
  1352  0000B9                     printf@ap:
  1353                           	opt stack 0
  1354  0000B9                     memcpy@n:
  1355                           	opt stack 0
  1356  0000B9                     strlen@cp:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x4
  1360  0000B9                     	ds	1
  1361  0000BA                     ??_Button_Baseline_Initialize:
  1362  0000BA                     ??_Button_Reading_Update_Helper:
  1363  0000BA                     Sensor_scheduleNextScan@skipScan:
  1364                           	opt stack 0
  1365  0000BA                     strcmp@r:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x5
  1369  0000BA                     	ds	1
  1370  0000BB                     medianFilter@sensor:
  1371                           	opt stack 0
  1372  0000BB                     printf@c:
  1373                           	opt stack 0
  1374  0000BB                     memcpy@tmp:
  1375                           	opt stack 0
  1376  0000BB                     Sensor_scheduleNextScan@sensor:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x6
  1380  0000BB                     	ds	1
  1381  0000BC                     ringBufferLUT@line:
  1382                           	opt stack 0
  1383  0000BC                     Sensor_RawSample_Update@sensor:
  1384                           	opt stack 0
  1385  0000BC                     Button_Reading_Update@button:
  1386                           	opt stack 0
  1387  0000BC                     memcpy@d:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x7
  1391  0000BC                     	ds	1
  1392  0000BD                     Button_Deviation_Update@deviation:
  1393                           	opt stack 0
  1394                           
  1395                           ; 4 bytes @ 0x8
  1396  0000BD                     	ds	1
  1397  0000BE                     ??_ringBufferPull:
  1398  0000BE                     Sensor_RawSample_Update@result:
  1399                           	opt stack 0
  1400  0000BE                     Button_State_Initializing@button:
  1401                           	opt stack 0
  1402  0000BE                     Button_State_NotPressed@button:
  1403                           	opt stack 0
  1404  0000BE                     Button_State_Pressed@button:
  1405                           	opt stack 0
  1406  0000BE                     memcpy@s:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x9
  1410  0000BE                     	ds	1
  1411  0000BF                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0xA
  1415  0000BF                     	ds	1
  1416  0000C0                     ??_Button_State_Initializing:
  1417  0000C0                     ??_Button_State_NotPressed:
  1418  0000C0                     ??_Button_State_Pressed:
  1419  0000C0                     ??_Sensor_postAcquisitionProcess:
  1420  0000C0                     MTOUCH_Sensor_InitializeAll@sensor:
  1421                           	opt stack 0
  1422  0000C0                     MTOUCH_Button_InitializeAll@button:
  1423                           	opt stack 0
  1424  0000C0                     Sensor_FrequencyHopping_Autotune_Process@variance:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0xB
  1428  0000C0                     	ds	1
  1429  0000C1                     ringBufferPull@charNumber:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0xC
  1433  0000C1                     	ds	1
  1434  0000C2                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0xD
  1438  0000C2                     	ds	1
  1439  0000C3                     ringBufferPull@index_724:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0xE
  1443  0000C3                     	ds	1
  1444  0000C4                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0xF
  1448  0000C4                     	ds	1
  1449  0000C5                     ??_Button_Service:
  1450  0000C5                     Sensor_FrequencyHopping_Autotune_Process@sensor:
  1451                           	opt stack 0
  1452  0000C5                     ringBufferPull@index:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x10
  1456  0000C5                     	ds	1
  1457  0000C6                     Sensor_postAcquisitionProcess@name:
  1458                           	opt stack 0
  1459  0000C6                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:
  1460                           	opt stack 0
  1461  0000C6                     Button_Service@name:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x11
  1465  0000C6                     	ds	1
  1466  0000C7                     Sensor_postAcquisitionProcess@sensor:
  1467                           	opt stack 0
  1468  0000C7                     Button_Service@button:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x12
  1472  0000C7                     	ds	2
  1473  0000C9                     Sensor_FrequencyHopping@sensor:
  1474                           	opt stack 0
  1475  0000C9                     MTOUCH_Button_ServiceAll@button:
  1476                           	opt stack 0
  1477                           
  1478                           ; 1 bytes @ 0x14
  1479  0000C9                     	ds	1
  1480  0000CA                     MTOUCH_Sensor_SampleAll@sensor:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x15
  1484  0000CA                     	ds	1
  1485  0000CB                     ??_main:
  1486                           
  1487                           ; 1 bytes @ 0x16
  1488  0000CB                     	ds	1
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1l	equ	0xFE1
  1497                           
  1498                           	psect	cstackCOMRAM
  1499  000001                     __pcstackCOMRAM:
  1500                           	opt stack 0
  1501  000001                     ?i2_abs:
  1502                           	opt stack 0
  1503  000001                     i2EUSART2_Write@txData:
  1504                           	opt stack 0
  1505  000001                     i2Sensor_SetTrisBit@TrisBit:
  1506                           	opt stack 0
  1507  000001                     i2MTOUCH_Sensor_isEnabled@sensor:
  1508                           	opt stack 0
  1509  000001                     i2MTOUCH_Sensor_wasSampled@sensor:
  1510                           	opt stack 0
  1511  000001                     Sensor_setCalibrated@sensor:
  1512                           	opt stack 0
  1513  000001                     Sensor_setCalibratAcqTime@sensor:
  1514                           	opt stack 0
  1515  000001                     Sensor_setSampled@sensor:
  1516                           	opt stack 0
  1517  000001                     i2Sensor_isCalibrated@sensor:
  1518                           	opt stack 0
  1519  000001                     i2Sensor_isCalibratingAcqTime@sensor:
  1520                           	opt stack 0
  1521  000001                     i2abs@a:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x0
  1525  000001                     	ds	1
  1526  000002                     i2putch@txData:
  1527                           	opt stack 0
  1528  000002                     i2Sensor_SetTrisBit@sensor:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x1
  1532  000002                     	ds	1
  1533  000003                     ??i2_Sensor_scheduleNextScan:
  1534  000003                     ??i2_abs:
  1535  000003                     ?i2_printf:
  1536                           	opt stack 0
  1537  000003                     i2printf@f:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x2
  1541  000003                     	ds	2
  1542  000005                     i2Sensor_scheduleNextScan@state:
  1543                           	opt stack 0
  1544  000005                     Sensor_autoCalibration@sensor:
  1545                           	opt stack 0
  1546  000005                     i2printf@ap:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x4
  1550  000005                     	ds	1
  1551  000006                     i2Sensor_scheduleNextScan@skipScan:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x5
  1555  000006                     	ds	1
  1556  000007                     ??_Sensor_autoCalibration:
  1557  000007                     i2printf@c:
  1558                           	opt stack 0
  1559  000007                     i2Sensor_scheduleNextScan@sensor:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x6
  1563  000007                     	ds	1
  1564  000008                     
  1565                           ; 1 bytes @ 0x7
  1566  000008                     	ds	5
  1567  00000D                     Sensor_autoCalibration@name:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0xC
  1571  00000D                     	ds	1
  1572  00000E                     MTOUCH_Sensor_Service@sensor:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0xD
  1576  00000E                     	ds	2
  1577  000010                     ??_INTERRUPT_InterruptManagerHigh:
  1578                           
  1579                           ; 1 bytes @ 0xF
  1580  000010                     	ds	18
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           
  1590 ;;
  1591 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1592 ;;
  1593 ;; *************** function _main *****************
  1594 ;; Defined at:
  1595 ;;		line 58 in file "main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;Total ram usage:        1 bytes
  1614 ;; Hardware stack levels required when called:   11
  1615 ;; This function calls:
  1616 ;;		_MTOUCH_Button_State_Get
  1617 ;;		_MTOUCH_Service_Mainloop
  1618 ;;		_SYSTEM_Initialize
  1619 ;;		_printResetMessage
  1620 ;;		_ringBufferPull
  1621 ;; This function is called by:
  1622 ;;		Startup code after reset
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text0
  1627  011350                     __ptext0:
  1628                           	opt stack 0
  1629  011350                     _main:
  1630                           	opt stack 20
  1631                           
  1632                           ;main.c: 61: SYSTEM_Initialize();
  1633                           
  1634                           ;incstack = 0
  1635  011350  EC5D  F08F         	call	_SYSTEM_Initialize	;wreg free
  1636                           
  1637                           ;main.c: 68: (INTCONbits.GIEH = 1);
  1638  011354  8EF2               	bsf	intcon,7,c	;volatile
  1639                           
  1640                           ;main.c: 71: (INTCONbits.GIEL = 1);
  1641  011356  8CF2               	bsf	intcon,6,c	;volatile
  1642                           
  1643                           ;main.c: 74: printResetMessage();
  1644  011358  ECFF  F08C         	call	_printResetMessage	;wreg free
  1645  01135C                     
  1646                           ;main.c: 77: {
  1647                           ;main.c: 80: if (eusart2RxStringReady) {
  1648  01135C  5030               	movf	_eusart2RxStringReady,w,c	;volatile
  1649  01135E  A4D8               	btfss	status,2,c
  1650                           
  1651                           ;main.c: 82: ringBufferPull();
  1652  011360  EC71  F085         	call	_ringBufferPull	;wreg free
  1653                           
  1654                           ;main.c: 84: }
  1655                           ;main.c: 87: MTOUCH_Service_Mainloop();
  1656  011364  ECA8  F08E         	call	_MTOUCH_Service_Mainloop	;wreg free
  1657                           
  1658                           ;main.c: 90: LATFbits.LATF0 = ~MTOUCH_Button_State_Get(Button0);
  1659  011368  0E00               	movlw	0
  1660  01136A  EC69  F08E         	call	_MTOUCH_Button_State_Get
  1661  01136E  0AFF               	xorlw	255
  1662  011370  0100               	movlb	0	; () banked
  1663  011372  6FCB               	movwf	??_main& (0+255),b
  1664  011374  507E               	movf	3966,w,c	;volatile
  1665  011376  19CB               	xorwf	??_main& (0+255),w,b
  1666  011378  0BFE               	andlw	-2
  1667  01137A  19CB               	xorwf	??_main& (0+255),w,b
  1668  01137C  6E7E               	movwf	3966,c	;volatile
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 91: LATFbits.LATF1 = ~MTOUCH_Button_State_Get(Button1);
  1672  01137E  0E01               	movlw	1
  1673  011380  EC69  F08E         	call	_MTOUCH_Button_State_Get
  1674  011384  0AFF               	xorlw	255
  1675  011386  0100               	movlb	0	; () banked
  1676  011388  6FCB               	movwf	??_main& (0+255),b
  1677  01138A  47CB               	rlncf	??_main& (0+255),f,b
  1678  01138C  507E               	movf	3966,w,c	;volatile
  1679  01138E  19CB               	xorwf	??_main& (0+255),w,b
  1680  011390  0BFD               	andlw	-3
  1681  011392  19CB               	xorwf	??_main& (0+255),w,b
  1682  011394  6E7E               	movwf	3966,c	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 92: LATFbits.LATF2 = ~MTOUCH_Button_State_Get(Button2);
  1686  011396  0E02               	movlw	2
  1687  011398  EC69  F08E         	call	_MTOUCH_Button_State_Get
  1688  01139C  0AFF               	xorlw	255
  1689  01139E  0100               	movlb	0	; () banked
  1690  0113A0  6FCB               	movwf	??_main& (0+255),b
  1691  0113A2  47CB               	rlncf	??_main& (0+255),f,b
  1692  0113A4  47CB               	rlncf	??_main& (0+255),f,b
  1693  0113A6  507E               	movf	3966,w,c	;volatile
  1694  0113A8  19CB               	xorwf	??_main& (0+255),w,b
  1695  0113AA  0BFB               	andlw	-5
  1696  0113AC  19CB               	xorwf	??_main& (0+255),w,b
  1697  0113AE  6E7E               	movwf	3966,c	;volatile
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 93: LATFbits.LATF3 = ~MTOUCH_Button_State_Get(Button3);
  1701  0113B0  0E03               	movlw	3
  1702  0113B2  EC69  F08E         	call	_MTOUCH_Button_State_Get
  1703  0113B6  0AFF               	xorlw	255
  1704  0113B8  0100               	movlb	0	; () banked
  1705  0113BA  6FCB               	movwf	??_main& (0+255),b
  1706  0113BC  47CB               	rlncf	??_main& (0+255),f,b
  1707  0113BE  47CB               	rlncf	??_main& (0+255),f,b
  1708  0113C0  47CB               	rlncf	??_main& (0+255),f,b
  1709  0113C2  507E               	movf	3966,w,c	;volatile
  1710  0113C4  19CB               	xorwf	??_main& (0+255),w,b
  1711  0113C6  0BF7               	andlw	-9
  1712  0113C8  19CB               	xorwf	??_main& (0+255),w,b
  1713  0113CA  6E7E               	movwf	3966,c	;volatile
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 94: LATFbits.LATF4 = ~MTOUCH_Button_State_Get(Button4);
  1717  0113CC  0E04               	movlw	4
  1718  0113CE  EC69  F08E         	call	_MTOUCH_Button_State_Get
  1719  0113D2  0AFF               	xorlw	255
  1720  0113D4  0100               	movlb	0	; () banked
  1721  0113D6  6FCB               	movwf	??_main& (0+255),b
  1722  0113D8  3BCB               	swapf	??_main& (0+255),f,b
  1723  0113DA  507E               	movf	3966,w,c	;volatile
  1724  0113DC  19CB               	xorwf	??_main& (0+255),w,b
  1725  0113DE  0BEF               	andlw	-17
  1726  0113E0  19CB               	xorwf	??_main& (0+255),w,b
  1727  0113E2  6E7E               	movwf	3966,c	;volatile
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 98: __nop();
  1731  0113E4  F000               	nop	
  1732  0113E6  D7BA               	goto	l305
  1733  0113E8                     __end_of_main:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           intcon	equ	0xFF2
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1l	equ	0xFE1
  1744                           status	equ	0xFD8
  1745                           
  1746 ;; *************** function _ringBufferPull *****************
  1747 ;; Defined at:
  1748 ;;		line 8 in file "ring_buffer_interface.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  index           2   14[BANK0 ] int 
  1753 ;;  index           2   16[BANK0 ] int 
  1754 ;;  charNumber      2   12[BANK0 ] int 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1766 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1767 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;Total ram usage:        9 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    9
  1771 ;; This function calls:
  1772 ;;		_EUSART2_Read
  1773 ;;		_ringBufferLUT
  1774 ;;		_strlen
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text1
  1781  010AE2                     __ptext1:
  1782                           	opt stack 0
  1783  010AE2                     _ringBufferPull:
  1784                           	opt stack 21
  1785                           
  1786                           ;ring_buffer_interface.c: 10: int charNumber = eusart2RxCount;
  1787                           
  1788                           ;incstack = 0
  1789  010AE2  C031  F0C1         	movff	_eusart2RxCount,ringBufferPull@charNumber	;volatile
  1790  010AE6  0100               	movlb	0	; () banked
  1791  010AE8  6BC2               	clrf	(ringBufferPull@charNumber+1)& (0+255),b
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;ring_buffer_interface.c: 13: for (int index = 0; index < 64; index++) {
  1795  010AEA  0E00               	movlw	0
  1796  010AEC  6FC6               	movwf	(ringBufferPull@index+1)& (0+255),b
  1797  010AEE  0E00               	movlw	0
  1798  010AF0  6FC5               	movwf	ringBufferPull@index& (0+255),b
  1799  010AF2                     l4629:
  1800                           
  1801                           ; BSR set to: 0
  1802  010AF2  BFC6               	btfsc	(ringBufferPull@index+1)& (0+255),7,b
  1803  010AF4  D006               	goto	l334
  1804  010AF6  51C6               	movf	(ringBufferPull@index+1)& (0+255),w,b
  1805  010AF8  E10F               	bnz	l4639
  1806  010AFA  0E40               	movlw	64
  1807  010AFC  5DC5               	subwf	ringBufferPull@index& (0+255),w,b
  1808  010AFE  B0D8               	btfsc	status,0,c
  1809  010B00  D00B               	goto	u4950
  1810  010B02                     l334:
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;ring_buffer_interface.c: 15: line[index] = '\0';
  1814                           
  1815                           ; BSR set to: 0
  1816  010B02  0E90               	movlw	low _line
  1817  010B04  25C5               	addwf	ringBufferPull@index& (0+255),w,b
  1818  010B06  6ED9               	movwf	fsr2l,c
  1819  010B08  0E01               	movlw	high _line
  1820  010B0A  21C6               	addwfc	(ringBufferPull@index+1)& (0+255),w,b
  1821  010B0C  6EDA               	movwf	fsr2h,c
  1822  010B0E  0E00               	movlw	0
  1823  010B10  6EDF               	movwf	indf2,c
  1824                           
  1825                           ; BSR set to: 0
  1826  010B12  4BC5               	infsnz	ringBufferPull@index& (0+255),f,b
  1827  010B14  2BC6               	incf	(ringBufferPull@index+1)& (0+255),f,b
  1828  010B16  D7ED               	goto	l4629
  1829  010B18                     u4950:
  1830  010B18                     l4639:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;ring_buffer_interface.c: 17: }
  1834                           ;ring_buffer_interface.c: 20: for(int index = 0; index < charNumber; index++){
  1835  010B18  0E00               	movlw	0
  1836  010B1A  6FC4               	movwf	(ringBufferPull@index_724+1)& (0+255),b
  1837  010B1C  0E00               	movlw	0
  1838  010B1E  6FC3               	movwf	ringBufferPull@index_724& (0+255),b
  1839  010B20  D00E               	goto	l336
  1840  010B22                     
  1841                           ; BSR set to: 0
  1842                           ;ring_buffer_interface.c: 22: line[index] = EUSART2_Read();
  1843                           
  1844                           ; BSR set to: 0
  1845  010B22  ECC3  F08C         	call	_EUSART2_Read	;wreg free
  1846  010B26  0100               	movlb	0	; () banked
  1847  010B28  6FBE               	movwf	??_ringBufferPull& (0+255),b
  1848  010B2A  0E90               	movlw	low _line
  1849  010B2C  25C3               	addwf	ringBufferPull@index_724& (0+255),w,b
  1850  010B2E  6ED9               	movwf	fsr2l,c
  1851  010B30  0E01               	movlw	high _line
  1852  010B32  21C4               	addwfc	(ringBufferPull@index_724+1)& (0+255),w,b
  1853  010B34  6EDA               	movwf	fsr2h,c
  1854  010B36  C0BE  FFDF         	movff	??_ringBufferPull,indf2
  1855                           
  1856                           ; BSR set to: 0
  1857  010B3A  4BC3               	infsnz	ringBufferPull@index_724& (0+255),f,b
  1858  010B3C  2BC4               	incf	(ringBufferPull@index_724+1)& (0+255),f,b
  1859  010B3E                     l336:
  1860                           
  1861                           ; BSR set to: 0
  1862                           
  1863                           ; BSR set to: 0
  1864  010B3E  51C1               	movf	ringBufferPull@charNumber& (0+255),w,b
  1865  010B40  5DC3               	subwf	ringBufferPull@index_724& (0+255),w,b
  1866  010B42  51C4               	movf	(ringBufferPull@index_724+1)& (0+255),w,b
  1867  010B44  0A80               	xorlw	128
  1868  010B46  6FBE               	movwf	??_ringBufferPull& (0+255),b
  1869  010B48  51C2               	movf	(ringBufferPull@charNumber+1)& (0+255),w,b
  1870  010B4A  0A80               	xorlw	128
  1871  010B4C  59BE               	subwfb	??_ringBufferPull& (0+255),w,b
  1872  010B4E  A0D8               	btfss	status,0,c
  1873  010B50  D7E8               	goto	l337
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;ring_buffer_interface.c: 24: }
  1877                           ;ring_buffer_interface.c: 27: eusart2RxTail = eusart2RxHead;
  1878  010B52  C033  F032         	movff	_eusart2RxHead,_eusart2RxTail	;volatile
  1879                           
  1880                           ;ring_buffer_interface.c: 30: while((line[strlen(line) - 1] == (int) '\n') ||
  1881                           ;ring_buffer_interface.c: 31: (line[strlen(line) - 1] == (int) '\r')) {
  1882  010B56  D017               	goto	l339
  1883  010B58                     
  1884                           ; BSR set to: 0
  1885                           ;ring_buffer_interface.c: 34: line[strlen(line) - 1] = '\0';
  1886                           
  1887                           ; BSR set to: 0
  1888  010B58  0EFF               	movlw	255
  1889  010B5A  6FBE               	movwf	??_ringBufferPull& (0+255),b
  1890  010B5C  0EFF               	movlw	255
  1891  010B5E  6FBF               	movwf	(??_ringBufferPull+1)& (0+255),b
  1892  010B60  0E90               	movlw	low _line
  1893  010B62  6FB5               	movwf	strlen@s& (0+255),b
  1894  010B64  0E01               	movlw	high _line
  1895  010B66  6FB6               	movwf	(strlen@s+1)& (0+255),b
  1896  010B68  EC66  F08C         	call	_strlen	;wreg free
  1897  010B6C  0100               	movlb	0	; () banked
  1898  010B6E  51BE               	movf	??_ringBufferPull& (0+255),w,b
  1899  010B70  27B5               	addwf	?_strlen& (0+255),f,b
  1900  010B72  51BF               	movf	(??_ringBufferPull+1)& (0+255),w,b
  1901  010B74  23B6               	addwfc	(?_strlen+1)& (0+255),f,b
  1902  010B76  0E90               	movlw	low _line
  1903  010B78  25B5               	addwf	?_strlen& (0+255),w,b
  1904  010B7A  6ED9               	movwf	fsr2l,c
  1905  010B7C  0E01               	movlw	high _line
  1906  010B7E  21B6               	addwfc	(?_strlen+1)& (0+255),w,b
  1907  010B80  6EDA               	movwf	fsr2h,c
  1908  010B82  0E00               	movlw	0
  1909  010B84  6EDF               	movwf	indf2,c
  1910  010B86                     l339:
  1911                           
  1912                           ; BSR set to: 0
  1913  010B86  0EFF               	movlw	255
  1914  010B88  6FBE               	movwf	??_ringBufferPull& (0+255),b
  1915  010B8A  0EFF               	movlw	255
  1916  010B8C  6FBF               	movwf	(??_ringBufferPull+1)& (0+255),b
  1917  010B8E  0E90               	movlw	low _line
  1918  010B90  6FB5               	movwf	strlen@s& (0+255),b
  1919  010B92  0E01               	movlw	high _line
  1920  010B94  6FB6               	movwf	(strlen@s+1)& (0+255),b
  1921  010B96  EC66  F08C         	call	_strlen	;wreg free
  1922  010B9A  0100               	movlb	0	; () banked
  1923  010B9C  51BE               	movf	??_ringBufferPull& (0+255),w,b
  1924  010B9E  27B5               	addwf	?_strlen& (0+255),f,b
  1925  010BA0  51BF               	movf	(??_ringBufferPull+1)& (0+255),w,b
  1926  010BA2  23B6               	addwfc	(?_strlen+1)& (0+255),f,b
  1927  010BA4  0E90               	movlw	low _line
  1928  010BA6  25B5               	addwf	?_strlen& (0+255),w,b
  1929  010BA8  6ED9               	movwf	fsr2l,c
  1930  010BAA  0E01               	movlw	high _line
  1931  010BAC  21B6               	addwfc	(?_strlen+1)& (0+255),w,b
  1932  010BAE  6EDA               	movwf	fsr2h,c
  1933  010BB0  0E0A               	movlw	10
  1934  010BB2  18DE               	xorwf	postinc2,w,c
  1935  010BB4  B4D8               	btfsc	status,2,c
  1936  010BB6  D7D0               	goto	l340
  1937                           
  1938                           ; BSR set to: 0
  1939  010BB8  0EFF               	movlw	255
  1940  010BBA  6FBE               	movwf	??_ringBufferPull& (0+255),b
  1941  010BBC  0EFF               	movlw	255
  1942  010BBE  6FBF               	movwf	(??_ringBufferPull+1)& (0+255),b
  1943  010BC0  0E90               	movlw	low _line
  1944  010BC2  6FB5               	movwf	strlen@s& (0+255),b
  1945  010BC4  0E01               	movlw	high _line
  1946  010BC6  6FB6               	movwf	(strlen@s+1)& (0+255),b
  1947  010BC8  EC66  F08C         	call	_strlen	;wreg free
  1948  010BCC  0100               	movlb	0	; () banked
  1949  010BCE  51BE               	movf	??_ringBufferPull& (0+255),w,b
  1950  010BD0  27B5               	addwf	?_strlen& (0+255),f,b
  1951  010BD2  51BF               	movf	(??_ringBufferPull+1)& (0+255),w,b
  1952  010BD4  23B6               	addwfc	(?_strlen+1)& (0+255),f,b
  1953  010BD6  0E90               	movlw	low _line
  1954  010BD8  25B5               	addwf	?_strlen& (0+255),w,b
  1955  010BDA  6ED9               	movwf	fsr2l,c
  1956  010BDC  0E01               	movlw	high _line
  1957  010BDE  21B6               	addwfc	(?_strlen+1)& (0+255),w,b
  1958  010BE0  6EDA               	movwf	fsr2h,c
  1959  010BE2  0E0D               	movlw	13
  1960  010BE4  18DE               	xorwf	postinc2,w,c
  1961  010BE6  B4D8               	btfsc	status,2,c
  1962  010BE8  D7B7               	goto	l340
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;ring_buffer_interface.c: 36: }
  1966                           ;ring_buffer_interface.c: 40: eusart2RxStringReady = 0;
  1967                           
  1968                           ; BSR set to: 0
  1969  010BEA  0E00               	movlw	0
  1970  010BEC  6E30               	movwf	_eusart2RxStringReady,c	;volatile
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;ring_buffer_interface.c: 43: ringBufferLUT(line);
  1974  010BEE  0E90               	movlw	low _line
  1975  010BF0  6FBC               	movwf	ringBufferLUT@line& (0+255),b
  1976  010BF2  0E01               	movlw	high _line
  1977  010BF4  6FBD               	movwf	(ringBufferLUT@line+1)& (0+255),b
  1978  010BF6  EC2A  F081         	call	_ringBufferLUT	;wreg free
  1979  010BFA  0012               	return		;funcret
  1980  010BFC                     __end_of_ringBufferPull:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           intcon	equ	0xFF2
  1987                           postinc0	equ	0xFEE
  1988                           wreg	equ	0xFE8
  1989                           postdec1	equ	0xFE5
  1990                           fsr1l	equ	0xFE1
  1991                           indf2	equ	0xFDF
  1992                           postinc2	equ	0xFDE
  1993                           fsr2h	equ	0xFDA
  1994                           fsr2l	equ	0xFD9
  1995                           status	equ	0xFD8
  1996                           
  1997 ;; *************** function _strlen *****************
  1998 ;; Defined at:
  1999 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2002 ;;		 -> line(64), 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  2005 ;;		 -> line(64), 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  2    0[BANK0 ] unsigned int 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2018 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2019 ;;Total ram usage:        6 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    5
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_ringBufferPull
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text2
  2030  0118CC                     __ptext2:
  2031                           	opt stack 0
  2032  0118CC                     _strlen:
  2033                           	opt stack 24
  2034                           
  2035                           ;incstack = 0
  2036  0118CC  C0B5  F0B9         	movff	strlen@s,strlen@cp
  2037  0118D0  C0B6  F0BA         	movff	strlen@s+1,strlen@cp+1
  2038  0118D4  D003               	goto	l1533
  2039  0118D6  0100               	movlb	0	; () banked
  2040  0118D8  4BB9               	infsnz	strlen@cp& (0+255),f,b
  2041  0118DA  2BBA               	incf	(strlen@cp+1)& (0+255),f,b
  2042  0118DC                     l1533:
  2043                           
  2044                           ; BSR set to: 0
  2045  0118DC  C0B9  FFD9         	movff	strlen@cp,fsr2l
  2046  0118E0  C0BA  FFDA         	movff	strlen@cp+1,fsr2h
  2047  0118E4  50DF               	movf	indf2,w,c
  2048  0118E6  A4D8               	btfss	status,2,c
  2049  0118E8  D7F6               	goto	l1534
  2050  0118EA  C0B5  F0B7         	movff	strlen@s,??_strlen
  2051  0118EE  C0B6  F0B8         	movff	strlen@s+1,??_strlen+1
  2052  0118F2  0100               	movlb	0	; () banked
  2053  0118F4  1FB7               	comf	??_strlen& (0+255),f,b
  2054  0118F6  1FB8               	comf	(??_strlen+1)& (0+255),f,b
  2055  0118F8  4BB7               	infsnz	??_strlen& (0+255),f,b
  2056  0118FA  2BB8               	incf	(??_strlen+1)& (0+255),f,b
  2057  0118FC  51B9               	movf	strlen@cp& (0+255),w,b
  2058  0118FE  25B7               	addwf	??_strlen& (0+255),w,b
  2059  011900  6FB5               	movwf	?_strlen& (0+255),b
  2060  011902  51BA               	movf	(strlen@cp+1)& (0+255),w,b
  2061  011904  21B8               	addwfc	(??_strlen+1)& (0+255),w,b
  2062  011906  6FB6               	movwf	(?_strlen+1)& (0+255),b
  2063  011908  0012               	return	
  2064  01190A                     __end_of_strlen:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           tblptrh	equ	0xFF7
  2068                           tblptrl	equ	0xFF6
  2069                           tablat	equ	0xFF5
  2070                           intcon	equ	0xFF2
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postdec1	equ	0xFE5
  2074                           fsr1l	equ	0xFE1
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _ringBufferLUT *****************
  2082 ;; Defined at:
  2083 ;;		line 7 in file "ring_buffer_LUT.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  line            2    7[BANK0 ] PTR unsigned char 
  2086 ;;		 -> line(64), 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2098 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2102 ;;Total ram usage:        2 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    8
  2105 ;; This function calls:
  2106 ;;		_printf
  2107 ;;		_strcmp
  2108 ;; This function is called by:
  2109 ;;		_ringBufferPull
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text3
  2114  010254                     __ptext3:
  2115                           	opt stack 0
  2116  010254                     _ringBufferLUT:
  2117                           	opt stack 21
  2118                           
  2119                           ;ring_buffer_LUT.c: 13: if((0 == strcmp(line, "LEDs On"))) {
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;incstack = 0
  2123  010254  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2124  010258  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2125  01025C  0ECF               	movlw	low STR_6
  2126  01025E  0100               	movlb	0	; () banked
  2127  010260  6FB7               	movwf	strcmp@s2& (0+255),b
  2128  010262  0EFF               	movlw	high STR_6
  2129  010264  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2130  010266  ECCD  F08B         	call	_strcmp	;wreg free
  2131  01026A  0100               	movlb	0	; () banked
  2132  01026C  51B5               	movf	?_strcmp& (0+255),w,b
  2133  01026E  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2134  010270  A4D8               	btfss	status,2,c
  2135  010272  D017               	goto	l358
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;ring_buffer_LUT.c: 16: LATF = 0x00;
  2139  010274  0E00               	movlw	0
  2140  010276  6E7E               	movwf	3966,c	;volatile
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;ring_buffer_LUT.c: 19: printf("\n\r");
  2144  010278  0EB5               	movlw	low (STR_8+15)
  2145  01027A  6FB7               	movwf	printf@f& (0+255),b
  2146  01027C  0EFF               	movlw	high (STR_8+15)
  2147  01027E  6FB8               	movwf	(printf@f+1)& (0+255),b
  2148  010280  ECBE  F08D         	call	_printf	;wreg free
  2149                           
  2150                           ;ring_buffer_LUT.c: 21: printf("    LATF = 0x00\n\r");
  2151  010284  0EA6               	movlw	low STR_8
  2152  010286  0100               	movlb	0	; () banked
  2153  010288  6FB7               	movwf	printf@f& (0+255),b
  2154  01028A  0EFF               	movlw	high STR_8
  2155  01028C  6FB8               	movwf	(printf@f+1)& (0+255),b
  2156  01028E  ECBE  F08D         	call	_printf	;wreg free
  2157                           
  2158                           ;ring_buffer_LUT.c: 24: printf("\n\r");
  2159  010292  0EB5               	movlw	low (STR_8+15)
  2160  010294  0100               	movlb	0	; () banked
  2161  010296  6FB7               	movwf	printf@f& (0+255),b
  2162  010298  0EFF               	movlw	high (STR_8+15)
  2163  01029A  6FB8               	movwf	(printf@f+1)& (0+255),b
  2164  01029C  ECBE  F08D         	call	_printf	;wreg free
  2165                           
  2166                           ;ring_buffer_LUT.c: 26: }
  2167  0102A0  0012               	return	
  2168  0102A2                     l358:
  2169                           
  2170                           ;ring_buffer_LUT.c: 30: else if((0 == strcmp(line, "LEDs Off"))) {
  2171  0102A2  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2172  0102A6  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2173  0102AA  0EC6               	movlw	low STR_10
  2174  0102AC  0100               	movlb	0	; () banked
  2175  0102AE  6FB7               	movwf	strcmp@s2& (0+255),b
  2176  0102B0  0EFF               	movlw	high STR_10
  2177  0102B2  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2178  0102B4  ECCD  F08B         	call	_strcmp	;wreg free
  2179  0102B8  0100               	movlb	0	; () banked
  2180  0102BA  51B5               	movf	?_strcmp& (0+255),w,b
  2181  0102BC  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2182  0102BE  A4D8               	btfss	status,2,c
  2183  0102C0  D016               	goto	l360
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;ring_buffer_LUT.c: 33: LATF = 0xFF;
  2187  0102C2  687E               	setf	3966,c	;volatile
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;ring_buffer_LUT.c: 36: printf("\n\r");
  2191  0102C4  0EB5               	movlw	low (STR_8+15)
  2192  0102C6  6FB7               	movwf	printf@f& (0+255),b
  2193  0102C8  0EFF               	movlw	high (STR_8+15)
  2194  0102CA  6FB8               	movwf	(printf@f+1)& (0+255),b
  2195  0102CC  ECBE  F08D         	call	_printf	;wreg free
  2196                           
  2197                           ;ring_buffer_LUT.c: 38: printf("LATF = 0xFF\n\r");
  2198  0102D0  0EB8               	movlw	low STR_12
  2199  0102D2  0100               	movlb	0	; () banked
  2200  0102D4  6FB7               	movwf	printf@f& (0+255),b
  2201  0102D6  0EFF               	movlw	high STR_12
  2202  0102D8  6FB8               	movwf	(printf@f+1)& (0+255),b
  2203  0102DA  ECBE  F08D         	call	_printf	;wreg free
  2204                           
  2205                           ;ring_buffer_LUT.c: 41: printf("\n\r");
  2206  0102DE  0EB5               	movlw	low (STR_8+15)
  2207  0102E0  0100               	movlb	0	; () banked
  2208  0102E2  6FB7               	movwf	printf@f& (0+255),b
  2209  0102E4  0EFF               	movlw	high (STR_8+15)
  2210  0102E6  6FB8               	movwf	(printf@f+1)& (0+255),b
  2211  0102E8  ECBE  F08D         	call	_printf	;wreg free
  2212                           
  2213                           ;ring_buffer_LUT.c: 43: }
  2214  0102EC  0012               	return	
  2215  0102EE                     l360:
  2216                           
  2217                           ;ring_buffer_LUT.c: 47: else if((0 == strcmp(line, "Reset"))) {
  2218  0102EE  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2219  0102F2  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2220  0102F6  0EE3               	movlw	low STR_14
  2221  0102F8  0100               	movlb	0	; () banked
  2222  0102FA  6FB7               	movwf	strcmp@s2& (0+255),b
  2223  0102FC  0EFF               	movlw	high STR_14
  2224  0102FE  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2225  010300  ECCD  F08B         	call	_strcmp	;wreg free
  2226  010304  0100               	movlb	0	; () banked
  2227  010306  51B5               	movf	?_strcmp& (0+255),w,b
  2228  010308  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2229  01030A  A4D8               	btfss	status,2,c
  2230  01030C  D00F               	goto	l362
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;ring_buffer_LUT.c: 50: printf("\033[2J");
  2234  01030E  0EEE               	movlw	low STR_2
  2235  010310  6FB7               	movwf	printf@f& (0+255),b
  2236  010312  0EFF               	movlw	high STR_2
  2237  010314  6FB8               	movwf	(printf@f+1)& (0+255),b
  2238  010316  ECBE  F08D         	call	_printf	;wreg free
  2239                           
  2240                           ;ring_buffer_LUT.c: 53: printf("\033[H");
  2241  01031A  0EF7               	movlw	low STR_3
  2242  01031C  0100               	movlb	0	; () banked
  2243  01031E  6FB7               	movwf	printf@f& (0+255),b
  2244  010320  0EFF               	movlw	high STR_3
  2245  010322  6FB8               	movwf	(printf@f+1)& (0+255),b
  2246  010324  ECBE  F08D         	call	_printf	;wreg free
  2247  010328  00FF               	reset		;# 
  2248                           
  2249                           ;ring_buffer_LUT.c: 58: }
  2250  01032A  0012               	return	
  2251  01032C                     l362:
  2252                           
  2253                           ;ring_buffer_LUT.c: 61: else if((0 == strcmp(line, "Clear"))) {
  2254  01032C  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2255  010330  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2256  010334  0EDD               	movlw	low STR_17
  2257  010336  0100               	movlb	0	; () banked
  2258  010338  6FB7               	movwf	strcmp@s2& (0+255),b
  2259  01033A  0EFF               	movlw	high STR_17
  2260  01033C  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2261  01033E  ECCD  F08B         	call	_strcmp	;wreg free
  2262  010342  0100               	movlb	0	; () banked
  2263  010344  51B5               	movf	?_strcmp& (0+255),w,b
  2264  010346  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2265  010348  A4D8               	btfss	status,2,c
  2266  01034A  D00E               	goto	l364
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;ring_buffer_LUT.c: 64: printf("\033[2J");
  2270  01034C  0EEE               	movlw	low STR_2
  2271  01034E  6FB7               	movwf	printf@f& (0+255),b
  2272  010350  0EFF               	movlw	high STR_2
  2273  010352  6FB8               	movwf	(printf@f+1)& (0+255),b
  2274  010354  ECBE  F08D         	call	_printf	;wreg free
  2275                           
  2276                           ;ring_buffer_LUT.c: 67: printf("\033[H");
  2277  010358  0EF7               	movlw	low STR_3
  2278  01035A  0100               	movlb	0	; () banked
  2279  01035C  6FB7               	movwf	printf@f& (0+255),b
  2280  01035E  0EFF               	movlw	high STR_3
  2281  010360  6FB8               	movwf	(printf@f+1)& (0+255),b
  2282  010362  ECBE  F08D         	call	_printf	;wreg free
  2283                           
  2284                           ;ring_buffer_LUT.c: 69: }
  2285  010366  0012               	return	
  2286  010368                     l364:
  2287                           
  2288                           ;ring_buffer_LUT.c: 72: else if((0 == strcmp(line, "*IDN?")) || (0 == strcmp(line, "IDN"
      +                          ))) {
  2289  010368  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2290  01036C  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2291  010370  0ED7               	movlw	low STR_20
  2292  010372  0100               	movlb	0	; () banked
  2293  010374  6FB7               	movwf	strcmp@s2& (0+255),b
  2294  010376  0EFF               	movlw	high STR_20
  2295  010378  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2296  01037A  ECCD  F08B         	call	_strcmp	;wreg free
  2297  01037E  0100               	movlb	0	; () banked
  2298  010380  51B5               	movf	?_strcmp& (0+255),w,b
  2299  010382  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2300  010384  B4D8               	btfsc	status,2,c
  2301  010386  D00F               	goto	u4850
  2302                           
  2303                           ; BSR set to: 0
  2304  010388  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2305  01038C  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2306  010390  0EF3               	movlw	low STR_21
  2307  010392  6FB7               	movwf	strcmp@s2& (0+255),b
  2308  010394  0EFF               	movlw	high STR_21
  2309  010396  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2310  010398  ECCD  F08B         	call	_strcmp	;wreg free
  2311  01039C  0100               	movlb	0	; () banked
  2312  01039E  51B5               	movf	?_strcmp& (0+255),w,b
  2313  0103A0  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2314  0103A2  A4D8               	btfss	status,2,c
  2315  0103A4  D015               	goto	l366
  2316  0103A6                     u4850:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;ring_buffer_LUT.c: 75: printf("\n\r");
  2320                           
  2321                           ; BSR set to: 0
  2322  0103A6  0EB5               	movlw	low (STR_8+15)
  2323  0103A8  6FB7               	movwf	printf@f& (0+255),b
  2324  0103AA  0EFF               	movlw	high (STR_8+15)
  2325  0103AC  6FB8               	movwf	(printf@f+1)& (0+255),b
  2326  0103AE  ECBE  F08D         	call	_printf	;wreg free
  2327                           
  2328                           ;ring_buffer_LUT.c: 78: printf("    mTouch Test Board, REVA");
  2329  0103B2  0E8A               	movlw	low STR_23
  2330  0103B4  0100               	movlb	0	; () banked
  2331  0103B6  6FB7               	movwf	printf@f& (0+255),b
  2332  0103B8  0EFF               	movlw	high STR_23
  2333  0103BA  6FB8               	movwf	(printf@f+1)& (0+255),b
  2334  0103BC  ECBE  F08D         	call	_printf	;wreg free
  2335                           
  2336                           ;ring_buffer_LUT.c: 81: printf("\n\r");
  2337  0103C0  0EB5               	movlw	low (STR_8+15)
  2338  0103C2  0100               	movlb	0	; () banked
  2339  0103C4  6FB7               	movwf	printf@f& (0+255),b
  2340  0103C6  0EFF               	movlw	high (STR_8+15)
  2341  0103C8  6FB8               	movwf	(printf@f+1)& (0+255),b
  2342  0103CA  ECBE  F08D         	call	_printf	;wreg free
  2343                           
  2344                           ;ring_buffer_LUT.c: 83: }
  2345  0103CE  0012               	return	
  2346  0103D0                     l366:
  2347                           
  2348                           ;ring_buffer_LUT.c: 86: else if((0 == strcmp(line, "Help"))) {
  2349  0103D0  C0BC  F0B5         	movff	ringBufferLUT@line,strcmp@s1
  2350  0103D4  C0BD  F0B6         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2351  0103D8  0EE9               	movlw	low STR_25
  2352  0103DA  0100               	movlb	0	; () banked
  2353  0103DC  6FB7               	movwf	strcmp@s2& (0+255),b
  2354  0103DE  0EFF               	movlw	high STR_25
  2355  0103E0  6FB8               	movwf	(strcmp@s2+1)& (0+255),b
  2356  0103E2  ECCD  F08B         	call	_strcmp	;wreg free
  2357  0103E6  0100               	movlb	0	; () banked
  2358  0103E8  51B5               	movf	?_strcmp& (0+255),w,b
  2359  0103EA  11B6               	iorwf	(?_strcmp+1)& (0+255),w,b
  2360  0103EC  A4D8               	btfss	status,2,c
  2361  0103EE  0012               	return	
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;ring_buffer_LUT.c: 89: printf("\n\r");
  2365  0103F0  0EB5               	movlw	low (STR_8+15)
  2366  0103F2  6FB7               	movwf	printf@f& (0+255),b
  2367  0103F4  0EFF               	movlw	high (STR_8+15)
  2368  0103F6  6FB8               	movwf	(printf@f+1)& (0+255),b
  2369  0103F8  ECBE  F08D         	call	_printf	;wreg free
  2370                           
  2371                           ;ring_buffer_LUT.c: 91: printf("   List of supported commands:\n\r"
  2372                           ;ring_buffer_LUT.c: 92: "   LEDs On: Turns all LEDs On\n\r"
  2373                           ;ring_buffer_LUT.c: 93: "   LEDs Off: Turns all LEDs Off\n\r"
  2374                           ;ring_buffer_LUT.c: 94: "   Reset: Clears the terminal and resets the micro\n\r"
  2375                           ;ring_buffer_LUT.c: 95: "   Clear: Clears the terminal but doesn't reset the micro\n\r"
  2376                           ;ring_buffer_LUT.c: 96: "   *IDN?: Returns device identification\n\r"
  2377                           ;ring_buffer_LUT.c: 97: "   Help: This message, lists commands\n\r");
  2378  0103FC  0EBC               	movlw	low STR_27
  2379  0103FE  0100               	movlb	0	; () banked
  2380  010400  6FB7               	movwf	printf@f& (0+255),b
  2381  010402  0EFD               	movlw	high STR_27
  2382  010404  6FB8               	movwf	(printf@f+1)& (0+255),b
  2383  010406  ECBE  F08D         	call	_printf	;wreg free
  2384                           
  2385                           ;ring_buffer_LUT.c: 100: printf("\n\r");
  2386  01040A  0EB5               	movlw	low (STR_8+15)
  2387  01040C  0100               	movlb	0	; () banked
  2388  01040E  6FB7               	movwf	printf@f& (0+255),b
  2389  010410  0EFF               	movlw	high (STR_8+15)
  2390  010412  6FB8               	movwf	(printf@f+1)& (0+255),b
  2391  010414  ECBE  F08D         	call	_printf	;wreg free
  2392  010418  0012               	return	
  2393  01041A                     __end_of_ringBufferLUT:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           intcon	equ	0xFF2
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postdec1	equ	0xFE5
  2403                           fsr1l	equ	0xFE1
  2404                           indf2	equ	0xFDF
  2405                           postinc2	equ	0xFDE
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function _strcmp *****************
  2411 ;; Defined at:
  2412 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  2415 ;;		 -> line(64), 
  2416 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  2417 ;;		 -> STR_25(5), STR_21(4), STR_20(6), STR_17(6), 
  2418 ;;		 -> STR_14(6), STR_10(9), STR_6(8), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  r               1    5[BANK0 ] char 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  2    0[BANK0 ] int 
  2423 ;; Registers used:
  2424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2430 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2433 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;Total ram usage:        6 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    5
  2437 ;; This function calls:
  2438 ;;		Nothing
  2439 ;; This function is called by:
  2440 ;;		_ringBufferLUT
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text4
  2445  01179A                     __ptext4:
  2446                           	opt stack 0
  2447  01179A                     _strcmp:
  2448                           	opt stack 23
  2449                           
  2450                           ;incstack = 0
  2451  01179A  D005               	goto	l1525
  2452  01179C  0100               	movlb	0	; () banked
  2453  01179E  4BB5               	infsnz	strcmp@s1& (0+255),f,b
  2454  0117A0  2BB6               	incf	(strcmp@s1+1)& (0+255),f,b
  2455  0117A2  4BB7               	infsnz	strcmp@s2& (0+255),f,b
  2456  0117A4  2BB8               	incf	(strcmp@s2+1)& (0+255),f,b
  2457  0117A6                     l1525:
  2458                           
  2459                           ; BSR set to: 0
  2460  0117A6  C0B5  FFD9         	movff	strcmp@s1,fsr2l
  2461  0117AA  C0B6  FFDA         	movff	strcmp@s1+1,fsr2h
  2462  0117AE  50DF               	movf	indf2,w,c
  2463  0117B0  0100               	movlb	0	; () banked
  2464  0117B2  6FB9               	movwf	??_strcmp& (0+255),b
  2465  0117B4  C0B7  FFF6         	movff	strcmp@s2,tblptrl
  2466  0117B8  C0B8  FFF7         	movff	strcmp@s2+1,tblptrh
  2467  0117BC                     	if	0	;tblptru may be non-zero
  2468  0117BC                     	endif
  2469  0117BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2470  0117BC  0E00               	movlw	low (__mediumconst shr (0+16))
  2471  0117BE  6EF8               	movwf	tblptru,c
  2472  0117C0                     	endif
  2473  0117C0  0008               	tblrd		*
  2474  0117C2  50F5               	movf	tablat,w,c
  2475  0117C4  0800               	sublw	0
  2476  0117C6  25B9               	addwf	??_strcmp& (0+255),w,b
  2477  0117C8  6FBA               	movwf	strcmp@r& (0+255),b
  2478  0117CA  51BA               	movf	strcmp@r& (0+255),w,b
  2479  0117CC  A4D8               	btfss	status,2,c
  2480  0117CE  D007               	goto	u4530
  2481                           
  2482                           ; BSR set to: 0
  2483  0117D0  C0B5  FFD9         	movff	strcmp@s1,fsr2l
  2484  0117D4  C0B6  FFDA         	movff	strcmp@s1+1,fsr2h
  2485  0117D8  50DF               	movf	indf2,w,c
  2486  0117DA  A4D8               	btfss	status,2,c
  2487  0117DC  D7DF               	goto	l1526
  2488  0117DE                     u4530:
  2489                           
  2490                           ; BSR set to: 0
  2491                           
  2492                           ; BSR set to: 0
  2493                           
  2494                           ; BSR set to: 0
  2495  0117DE  51BA               	movf	strcmp@r& (0+255),w,b
  2496  0117E0  6FB5               	movwf	?_strcmp& (0+255),b
  2497  0117E2  6BB6               	clrf	(?_strcmp+1)& (0+255),b
  2498  0117E4  BFB5               	btfsc	?_strcmp& (0+255),7,b
  2499  0117E6  07B6               	decf	(?_strcmp+1)& (0+255),f,b
  2500  0117E8  0012               	return	
  2501  0117EA                     __end_of_strcmp:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           intcon	equ	0xFF2
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _EUSART2_Read *****************
  2519 ;; Defined at:
  2520 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  readValue       1    0[BANK0 ] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      unsigned char 
  2527 ;; Registers used:
  2528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;Total ram usage:        1 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    5
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_ringBufferPull
  2545 ;;		_getch
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text5
  2550  011986                     __ptext5:
  2551                           	opt stack 0
  2552  011986                     _EUSART2_Read:
  2553                           	opt stack 24
  2554                           
  2555                           ;eusart2.c: 132: uint8_t readValue = 0;
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;incstack = 0
  2559  011986  0E00               	movlw	0
  2560  011988  0100               	movlb	0	; () banked
  2561  01198A  6FB5               	movwf	EUSART2_Read@readValue& (0+255),b
  2562  01198C                     
  2563                           ; BSR set to: 0
  2564                           
  2565                           ;eusart2.c: 135: {
  2566                           
  2567                           ; BSR set to: 0
  2568  01198C  5031               	movf	_eusart2RxCount,w,c	;volatile
  2569  01198E  B4D8               	btfsc	status,2,c
  2570  011990  D7FD               	goto	l188
  2571                           
  2572                           ;eusart2.c: 136: }
  2573                           ;eusart2.c: 138: readValue = eusart2RxBuffer[eusart2RxTail++];
  2574  011992  5032               	movf	_eusart2RxTail,w,c	;volatile
  2575  011994  0D01               	mullw	1
  2576  011996  0E00               	movlw	low _eusart2RxBuffer
  2577  011998  24F3               	addwf	prodl,w,c
  2578  01199A  6ED9               	movwf	fsr2l,c
  2579  01199C  0E01               	movlw	high _eusart2RxBuffer
  2580  01199E  20F4               	addwfc	prodh,w,c
  2581  0119A0  6EDA               	movwf	fsr2h,c
  2582  0119A2  50DF               	movf	indf2,w,c
  2583  0119A4  0100               	movlb	0	; () banked
  2584  0119A6  6FB5               	movwf	EUSART2_Read@readValue& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587  0119A8  2A32               	incf	_eusart2RxTail,f,c	;volatile
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;eusart2.c: 139: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  2591  0119AA  0E3F               	movlw	63
  2592  0119AC  6432               	cpfsgt	_eusart2RxTail,c	;volatile
  2593  0119AE  D002               	goto	l190
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;eusart2.c: 140: {
  2597                           ;eusart2.c: 141: eusart2RxTail = 0;
  2598  0119B0  0E00               	movlw	0
  2599  0119B2  6E32               	movwf	_eusart2RxTail,c	;volatile
  2600  0119B4                     l190:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;eusart2.c: 142: }
  2604                           ;eusart2.c: 143: PIE3bits.RC2IE = 0;
  2605                           
  2606                           ; BSR set to: 0
  2607  0119B4  010E               	movlb	14	; () banked
  2608  0119B6  9F2C               	bcf	44,7,b	;volatile
  2609                           
  2610                           ; BSR set to: 14
  2611                           ;eusart2.c: 144: eusart2RxCount--;
  2612  0119B8  0631               	decf	_eusart2RxCount,f,c	;volatile
  2613                           
  2614                           ; BSR set to: 14
  2615                           ;eusart2.c: 145: PIE3bits.RC2IE = 1;
  2616  0119BA  8F2C               	bsf	44,7,b	;volatile
  2617                           
  2618                           ; BSR set to: 14
  2619                           ;eusart2.c: 147: return readValue;
  2620  0119BC  0100               	movlb	0	; () banked
  2621  0119BE  51B5               	movf	EUSART2_Read@readValue& (0+255),w,b
  2622  0119C0  0012               	return	
  2623  0119C2                     __end_of_EUSART2_Read:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           prodh	equ	0xFF4
  2630                           prodl	equ	0xFF3
  2631                           intcon	equ	0xFF2
  2632                           postinc0	equ	0xFEE
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _printResetMessage *****************
  2643 ;; Defined at:
  2644 ;;		line 50 in file "ring_buffer_interface.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2662 ;;Total ram usage:        0 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    8
  2665 ;; This function calls:
  2666 ;;		_printf
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text6
  2673  0119FE                     __ptext6:
  2674                           	opt stack 0
  2675  0119FE                     _printResetMessage:
  2676                           	opt stack 22
  2677                           
  2678                           ;ring_buffer_interface.c: 53: printf("\033[2J");
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;incstack = 0
  2682  0119FE  0EEE               	movlw	low STR_2
  2683  011A00  0100               	movlb	0	; () banked
  2684  011A02  6FB7               	movwf	printf@f& (0+255),b
  2685  011A04  0EFF               	movlw	high STR_2
  2686  011A06  6FB8               	movwf	(printf@f+1)& (0+255),b
  2687  011A08  ECBE  F08D         	call	_printf	;wreg free
  2688                           
  2689                           ;ring_buffer_interface.c: 56: printf("\033[H");
  2690  011A0C  0EF7               	movlw	low STR_3
  2691  011A0E  0100               	movlb	0	; () banked
  2692  011A10  6FB7               	movwf	printf@f& (0+255),b
  2693  011A12  0EFF               	movlw	high STR_3
  2694  011A14  6FB8               	movwf	(printf@f+1)& (0+255),b
  2695  011A16  ECBE  F08D         	call	_printf	;wreg free
  2696                           
  2697                           ;ring_buffer_interface.c: 59: printf("PIC18F67K40 mTouch Demo\n\r"
  2698                           ;ring_buffer_interface.c: 60: "Baud rate: 115200 kbps\n\r"
  2699                           ;ring_buffer_interface.c: 61: "No parity, 8 bits, no flow control, 1 stop bit\n\r"
  2700                           ;ring_buffer_interface.c: 62: "Commands are case sensitive\n\r"
  2701                           ;ring_buffer_interface.c: 63: "Enter a command, or Help for list of commands\n\r");
  2702  011A1A  0EDC               	movlw	low STR_4
  2703  011A1C  0100               	movlb	0	; () banked
  2704  011A1E  6FB7               	movwf	printf@f& (0+255),b
  2705  011A20  0EFE               	movlw	high STR_4
  2706  011A22  6FB8               	movwf	(printf@f+1)& (0+255),b
  2707  011A24  ECBE  F08D         	call	_printf	;wreg free
  2708                           
  2709                           ;ring_buffer_interface.c: 67: printf("\n\r");
  2710  011A28  0EB5               	movlw	low (STR_8+15)
  2711  011A2A  0100               	movlb	0	; () banked
  2712  011A2C  6FB7               	movwf	printf@f& (0+255),b
  2713  011A2E  0EFF               	movlw	high (STR_8+15)
  2714  011A30  6FB8               	movwf	(printf@f+1)& (0+255),b
  2715  011A32  ECBE  F08D         	call	_printf	;wreg free
  2716  011A36  0012               	return		;funcret
  2717  011A38                     __end_of_printResetMessage:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           intcon	equ	0xFF2
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           postdec1	equ	0xFE5
  2729                           fsr1l	equ	0xFE1
  2730                           indf2	equ	0xFDF
  2731                           postinc2	equ	0xFDE
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _printf *****************
  2737 ;; Defined at:
  2738 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2741 ;;		 -> STR_28(3), STR_27(288), STR_26(3), STR_24(3), 
  2742 ;;		 -> STR_23(28), STR_22(3), STR_19(4), STR_18(5), 
  2743 ;;		 -> STR_16(4), STR_15(5), STR_13(3), STR_12(14), 
  2744 ;;		 -> STR_11(3), STR_9(3), STR_8(18), STR_7(3), 
  2745 ;;		 -> STR_5(3), STR_4(174), STR_3(4), STR_2(5), 
  2746 ;;		 -> STR_1(4), 
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;  tmpval          4    0        struct .
  2749 ;;  cp              3    0        PTR const unsigned char 
  2750 ;;  ap              2    4[BANK0 ] PTR void [1]
  2751 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2752 ;;  len             2    0        unsigned int 
  2753 ;;  val             2    0        unsigned int 
  2754 ;;  c               1    6[BANK0 ] char 
  2755 ;;  flag            1    0        unsigned char 
  2756 ;;  prec            1    0        char 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  2    2[BANK0 ] int 
  2759 ;; Registers used:
  2760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2766 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2767 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;Total ram usage:        5 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    7
  2773 ;; This function calls:
  2774 ;;		_putch
  2775 ;; This function is called by:
  2776 ;;		_printResetMessage
  2777 ;;		_ringBufferLUT
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text7
  2782  011B7C                     __ptext7:
  2783                           	opt stack 0
  2784  011B7C                     _printf:
  2785                           	opt stack 21
  2786                           
  2787                           ;doprnt.c: 466: va_list ap;
  2788                           ;doprnt.c: 499: signed char c;
  2789                           ;doprnt.c: 506: signed char prec;
  2790                           ;doprnt.c: 508: unsigned char flag;
  2791                           ;doprnt.c: 523: union {
  2792                           ;doprnt.c: 524: unsigned long vd;
  2793                           ;doprnt.c: 525: double integ;
  2794                           ;doprnt.c: 526: } tmpval;
  2795                           ;doprnt.c: 528: unsigned int val;
  2796                           ;doprnt.c: 529: unsigned len;
  2797                           ;doprnt.c: 530: const char * cp;
  2798                           ;doprnt.c: 533: *ap = __va_start();
  2799                           
  2800                           ;incstack = 0
  2801  011B7C  0EB9               	movlw	low (?_printf+2)
  2802  011B7E  0100               	movlb	0	; () banked
  2803  011B80  6FB9               	movwf	printf@ap& (0+255),b
  2804  011B82  0E00               	movlw	high (?_printf+2)
  2805  011B84  6FBA               	movwf	(printf@ap+1)& (0+255),b
  2806                           
  2807                           ;doprnt.c: 536: while(c = *f++) {
  2808  011B86  D003               	goto	l964
  2809  011B88                     
  2810                           ; BSR set to: 0
  2811                           ;doprnt.c: 540: {
  2812                           ;doprnt.c: 541: (putch(c) );
  2813                           
  2814                           ; BSR set to: 0
  2815  011B88  51BB               	movf	printf@c& (0+255),w,b
  2816  011B8A  ECE1  F08F         	call	_putch
  2817  011B8E                     l964:
  2818  011B8E  C0B7  FFF6         	movff	printf@f,tblptrl
  2819  011B92  C0B8  FFF7         	movff	printf@f+1,tblptrh
  2820  011B96  0100               	movlb	0	; () banked
  2821  011B98  4BB7               	infsnz	printf@f& (0+255),f,b
  2822  011B9A  2BB8               	incf	(printf@f+1)& (0+255),f,b
  2823  011B9C                     	if	0	;tblptru may be non-zero
  2824  011B9C                     	endif
  2825  011B9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2826  011B9C  0E00               	movlw	low (__mediumconst shr (0+16))
  2827  011B9E  6EF8               	movwf	tblptru,c
  2828  011BA0                     	endif
  2829  011BA0  0008               	tblrd		*
  2830  011BA2  CFF5 F0BB          	movff	tablat,printf@c
  2831  011BA6  51BB               	movf	printf@c& (0+255),w,b
  2832  011BA8  B4D8               	btfsc	status,2,c
  2833  011BAA  0012               	return	
  2834  011BAC  D7ED               	goto	l965
  2835  011BAE                     __end_of_printf:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1l	equ	0xFE1
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           fsr2h	equ	0xFDA
  2851                           fsr2l	equ	0xFD9
  2852                           status	equ	0xFD8
  2853                           
  2854 ;; *************** function _putch *****************
  2855 ;; Defined at:
  2856 ;;		line 178 in file "mcc_generated_files/eusart2.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  txData          1    wreg     unsigned char 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  txData          1    1[BANK0 ] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2873 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2874 ;;Total ram usage:        1 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    6
  2877 ;; This function calls:
  2878 ;;		_EUSART2_Write
  2879 ;; This function is called by:
  2880 ;;		_printf
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text8
  2885  011FC2                     __ptext8:
  2886                           	opt stack 0
  2887  011FC2                     _putch:
  2888                           	opt stack 21
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;incstack = 0
  2892                           ;putch@txData stored from wreg
  2893  011FC2  0100               	movlb	0	; () banked
  2894  011FC4  6FB6               	movwf	putch@txData& (0+255),b
  2895                           
  2896                           ;eusart2.c: 180: EUSART2_Write(txData);
  2897  011FC6  0100               	movlb	0	; () banked
  2898  011FC8  51B6               	movf	putch@txData& (0+255),w,b
  2899  011FCA  EC85  F08C         	call	_EUSART2_Write
  2900  011FCE  0012               	return		;funcret
  2901  011FD0                     __end_of_putch:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _EUSART2_Write *****************
  2921 ;; Defined at:
  2922 ;;		line 150 in file "mcc_generated_files/eusart2.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  txData          1    wreg     unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  txData          1    0[BANK0 ] unsigned char 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2939 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2940 ;;Total ram usage:        1 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    5
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_putch
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text9
  2951  01190A                     __ptext9:
  2952                           	opt stack 0
  2953  01190A                     _EUSART2_Write:
  2954                           	opt stack 21
  2955                           
  2956                           ;incstack = 0
  2957                           ;EUSART2_Write@txData stored from wreg
  2958  01190A  0100               	movlb	0	; () banked
  2959  01190C  6FB5               	movwf	EUSART2_Write@txData& (0+255),b
  2960  01190E                     
  2961                           ;eusart2.c: 153: {
  2962                           
  2963                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
  2964  01190E  5045               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  2965  011910  B4D8               	btfsc	status,2,c
  2966  011912  D7FD               	goto	l3945
  2967                           
  2968                           ;eusart2.c: 154: }
  2969                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
  2970  011914  010E               	movlb	14	; () banked
  2971  011916  BD2C               	btfsc	44,6,b	;volatile
  2972  011918  D003               	goto	l197
  2973                           
  2974                           ; BSR set to: 14
  2975                           ;eusart2.c: 157: {
  2976                           ;eusart2.c: 158: TX2REG = txData;
  2977  01191A  C0B5  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
  2978                           
  2979                           ;eusart2.c: 159: }
  2980  01191E  D012               	goto	l198
  2981  011920                     l197:
  2982                           
  2983                           ; BSR set to: 14
  2984                           ;eusart2.c: 160: else
  2985                           ;eusart2.c: 161: {
  2986                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
  2987  011920  9D2C               	bcf	44,6,b	;volatile
  2988                           
  2989                           ; BSR set to: 14
  2990                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
  2991  011922  5035               	movf	_eusart2TxHead,w,c	;volatile
  2992  011924  0D01               	mullw	1
  2993  011926  0E00               	movlw	low _eusart2TxBuffer
  2994  011928  24F3               	addwf	prodl,w,c
  2995  01192A  6ED9               	movwf	fsr2l,c
  2996  01192C  0E02               	movlw	high _eusart2TxBuffer
  2997  01192E  20F4               	addwfc	prodh,w,c
  2998  011930  6EDA               	movwf	fsr2h,c
  2999  011932  C0B5  FFDF         	movff	EUSART2_Write@txData,indf2
  3000                           
  3001                           ; BSR set to: 14
  3002  011936  2A35               	incf	_eusart2TxHead,f,c	;volatile
  3003                           
  3004                           ; BSR set to: 14
  3005                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  3006  011938  0E3F               	movlw	63
  3007  01193A  6435               	cpfsgt	_eusart2TxHead,c	;volatile
  3008  01193C  D002               	goto	l199
  3009                           
  3010                           ; BSR set to: 14
  3011                           ;eusart2.c: 165: {
  3012                           ;eusart2.c: 166: eusart2TxHead = 0;
  3013  01193E  0E00               	movlw	0
  3014  011940  6E35               	movwf	_eusart2TxHead,c	;volatile
  3015  011942                     l199:
  3016                           
  3017                           ; BSR set to: 14
  3018                           ;eusart2.c: 167: }
  3019                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
  3020                           
  3021                           ; BSR set to: 14
  3022  011942  0645               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  3023  011944                     l198:
  3024                           
  3025                           ; BSR set to: 14
  3026                           ;eusart2.c: 169: }
  3027                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
  3028                           
  3029                           ; BSR set to: 14
  3030  011944  8D2C               	bsf	44,6,b	;volatile
  3031                           
  3032                           ; BSR set to: 14
  3033  011946  0012               	return		;funcret
  3034  011948                     __end_of_EUSART2_Write:
  3035                           	opt stack 0
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           intcon	equ	0xFF2
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _SYSTEM_Initialize *****************
  3054 ;; Defined at:
  3055 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3073 ;;Total ram usage:        0 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    9
  3076 ;; This function calls:
  3077 ;;		_EUSART2_Initialize
  3078 ;;		_INTERRUPT_Initialize
  3079 ;;		_MTOUCH_Initialize
  3080 ;;		_OSCILLATOR_Initialize
  3081 ;;		_PIN_MANAGER_Initialize
  3082 ;;		_PMD_Initialize
  3083 ;; This function is called by:
  3084 ;;		_main
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text10
  3089  011EBA                     __ptext10:
  3090                           	opt stack 0
  3091  011EBA                     _SYSTEM_Initialize:
  3092                           	opt stack 21
  3093                           
  3094                           ;mcc.c: 52: INTERRUPT_Initialize();
  3095                           
  3096                           ; BSR set to: 14
  3097                           ;incstack = 0
  3098  011EBA  ECFC  F08F         	call	_INTERRUPT_Initialize	;wreg free
  3099                           
  3100                           ;mcc.c: 53: PMD_Initialize();
  3101  011EBE  EC4F  F08F         	call	_PMD_Initialize	;wreg free
  3102                           
  3103                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3104  011EC2  EC0E  F089         	call	_PIN_MANAGER_Initialize	;wreg free
  3105                           
  3106                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3107  011EC6  EC91  F08F         	call	_OSCILLATOR_Initialize	;wreg free
  3108                           
  3109                           ;mcc.c: 56: EUSART2_Initialize();
  3110  011ECA  EC75  F08B         	call	_EUSART2_Initialize	;wreg free
  3111                           
  3112                           ;mcc.c: 57: MTOUCH_Initialize();
  3113  011ECE  ECB5  F08F         	call	_MTOUCH_Initialize	;wreg free
  3114  011ED2  0012               	return		;funcret
  3115  011ED4                     __end_of_SYSTEM_Initialize:
  3116                           	opt stack 0
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           prodh	equ	0xFF4
  3122                           prodl	equ	0xFF3
  3123                           intcon	equ	0xFF2
  3124                           postinc0	equ	0xFEE
  3125                           wreg	equ	0xFE8
  3126                           postdec1	equ	0xFE5
  3127                           fsr1l	equ	0xFE1
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _PMD_Initialize *****************
  3135 ;; Defined at:
  3136 ;;		line 74 in file "mcc_generated_files/mcc.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    5
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_SYSTEM_Initialize
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text11
  3165  011E9E                     __ptext11:
  3166                           	opt stack 0
  3167  011E9E                     _PMD_Initialize:
  3168                           	opt stack 24
  3169                           
  3170                           ;mcc.c: 77: PMD0 = 0x00;
  3171                           
  3172                           ;incstack = 0
  3173  011E9E  0E00               	movlw	0
  3174  011EA0  010E               	movlb	14	; () banked
  3175  011EA2  6F4C               	movwf	76,b	;volatile
  3176                           
  3177                           ;mcc.c: 79: PMD1 = 0x00;
  3178  011EA4  0E00               	movlw	0
  3179  011EA6  6F4D               	movwf	77,b	;volatile
  3180                           
  3181                           ;mcc.c: 81: PMD2 = 0x00;
  3182  011EA8  0E00               	movlw	0
  3183  011EAA  6F4E               	movwf	78,b	;volatile
  3184                           
  3185                           ;mcc.c: 83: PMD3 = 0x00;
  3186  011EAC  0E00               	movlw	0
  3187  011EAE  6F4F               	movwf	79,b	;volatile
  3188                           
  3189                           ;mcc.c: 85: PMD4 = 0x00;
  3190  011EB0  0E00               	movlw	0
  3191  011EB2  6F50               	movwf	80,b	;volatile
  3192                           
  3193                           ;mcc.c: 87: PMD5 = 0x00;
  3194  011EB4  0E00               	movlw	0
  3195  011EB6  6F51               	movwf	81,b	;volatile
  3196                           
  3197                           ; BSR set to: 14
  3198  011EB8  0012               	return		;funcret
  3199  011EBA                     __end_of_PMD_Initialize:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           intcon	equ	0xFF2
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _PIN_MANAGER_Initialize *****************
  3219 ;; Defined at:
  3220 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    5
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_SYSTEM_Initialize
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text12
  3249  01121C                     __ptext12:
  3250                           	opt stack 0
  3251  01121C                     _PIN_MANAGER_Initialize:
  3252                           	opt stack 24
  3253                           
  3254                           ;pin_manager.c: 62: LATE = 0x00;
  3255                           
  3256                           ; BSR set to: 14
  3257                           ;incstack = 0
  3258  01121C  0E00               	movlw	0
  3259  01121E  6E7D               	movwf	3965,c	;volatile
  3260                           
  3261                           ;pin_manager.c: 63: LATD = 0x00;
  3262  011220  0E00               	movlw	0
  3263  011222  6E7C               	movwf	3964,c	;volatile
  3264                           
  3265                           ;pin_manager.c: 64: LATA = 0x00;
  3266  011224  0E00               	movlw	0
  3267  011226  6E79               	movwf	3961,c	;volatile
  3268                           
  3269                           ;pin_manager.c: 65: LATF = 0x1F;
  3270  011228  0E1F               	movlw	31
  3271  01122A  6E7E               	movwf	3966,c	;volatile
  3272                           
  3273                           ;pin_manager.c: 66: LATB = 0x00;
  3274  01122C  0E00               	movlw	0
  3275  01122E  6E7A               	movwf	3962,c	;volatile
  3276                           
  3277                           ;pin_manager.c: 67: LATG = 0x00;
  3278  011230  0E00               	movlw	0
  3279  011232  6E7F               	movwf	3967,c	;volatile
  3280                           
  3281                           ;pin_manager.c: 68: LATC = 0x00;
  3282  011234  0E00               	movlw	0
  3283  011236  6E7B               	movwf	3963,c	;volatile
  3284                           
  3285                           ;pin_manager.c: 69: LATH = 0x00;
  3286  011238  0E00               	movlw	0
  3287  01123A  6E80               	movwf	3968,c	;volatile
  3288                           
  3289                           ;pin_manager.c: 74: TRISE = 0xFF;
  3290  01123C  6885               	setf	3973,c	;volatile
  3291                           
  3292                           ;pin_manager.c: 75: TRISF = 0xE0;
  3293  01123E  0EE0               	movlw	224
  3294  011240  6E86               	movwf	3974,c	;volatile
  3295                           
  3296                           ;pin_manager.c: 76: TRISA = 0xFF;
  3297  011242  6881               	setf	3969,c	;volatile
  3298                           
  3299                           ;pin_manager.c: 77: TRISG = 0x5F;
  3300  011244  0E5F               	movlw	95
  3301  011246  6E87               	movwf	3975,c	;volatile
  3302                           
  3303                           ;pin_manager.c: 78: TRISB = 0xFF;
  3304  011248  6882               	setf	3970,c	;volatile
  3305                           
  3306                           ;pin_manager.c: 79: TRISH = 0x0F;
  3307  01124A  0E0F               	movlw	15
  3308  01124C  6E88               	movwf	3976,c	;volatile
  3309                           
  3310                           ;pin_manager.c: 80: TRISC = 0xFF;
  3311  01124E  6883               	setf	3971,c	;volatile
  3312                           
  3313                           ;pin_manager.c: 81: TRISD = 0xFF;
  3314  011250  6884               	setf	3972,c	;volatile
  3315                           
  3316                           ;pin_manager.c: 86: ANSELD = 0xFF;
  3317  011252  010E               	movlb	14	; () banked
  3318  011254  69A7               	setf	167,b	;volatile
  3319                           
  3320                           ; BSR set to: 14
  3321                           ;pin_manager.c: 87: ANSELB = 0xFF;
  3322  011256  699A               	setf	154,b	;volatile
  3323                           
  3324                           ; BSR set to: 14
  3325                           ;pin_manager.c: 88: ANSELE = 0xFF;
  3326  011258  69AF               	setf	175,b	;volatile
  3327                           
  3328                           ;pin_manager.c: 89: ANSELG = 0xBF;
  3329  01125A  0EBF               	movlw	191
  3330  01125C  6FBC               	movwf	188,b	;volatile
  3331                           
  3332                           ;pin_manager.c: 90: ANSELF = 0xE0;
  3333  01125E  0EE0               	movlw	224
  3334  011260  6FB4               	movwf	180,b	;volatile
  3335                           
  3336                           ; BSR set to: 14
  3337                           ;pin_manager.c: 91: ANSELA = 0xFF;
  3338  011262  6992               	setf	146,b	;volatile
  3339                           
  3340                           ;pin_manager.c: 96: WPUD = 0x00;
  3341  011264  0E00               	movlw	0
  3342  011266  6FA6               	movwf	166,b	;volatile
  3343                           
  3344                           ;pin_manager.c: 97: WPUF = 0x00;
  3345  011268  0E00               	movlw	0
  3346  01126A  6FB3               	movwf	179,b	;volatile
  3347                           
  3348                           ;pin_manager.c: 98: WPUE = 0x00;
  3349  01126C  0E00               	movlw	0
  3350  01126E  6FAE               	movwf	174,b	;volatile
  3351                           
  3352                           ;pin_manager.c: 99: WPUB = 0x00;
  3353  011270  0E00               	movlw	0
  3354  011272  6F99               	movwf	153,b	;volatile
  3355                           
  3356                           ;pin_manager.c: 100: WPUG = 0x00;
  3357  011274  0E00               	movlw	0
  3358  011276  6FBB               	movwf	187,b	;volatile
  3359                           
  3360                           ;pin_manager.c: 101: WPUA = 0x00;
  3361  011278  0E00               	movlw	0
  3362  01127A  6F91               	movwf	145,b	;volatile
  3363                           
  3364                           ;pin_manager.c: 102: WPUC = 0x00;
  3365  01127C  0E00               	movlw	0
  3366  01127E  6FA1               	movwf	161,b	;volatile
  3367                           
  3368                           ;pin_manager.c: 103: WPUH = 0x00;
  3369  011280  0E00               	movlw	0
  3370  011282  6FC0               	movwf	192,b	;volatile
  3371                           
  3372                           ;pin_manager.c: 108: ODCONE = 0x00;
  3373  011284  0E00               	movlw	0
  3374  011286  6FAD               	movwf	173,b	;volatile
  3375                           
  3376                           ;pin_manager.c: 109: ODCONF = 0x1F;
  3377  011288  0E1F               	movlw	31
  3378  01128A  6FB2               	movwf	178,b	;volatile
  3379                           
  3380                           ;pin_manager.c: 110: ODCONA = 0x00;
  3381  01128C  0E00               	movlw	0
  3382  01128E  6F90               	movwf	144,b	;volatile
  3383                           
  3384                           ;pin_manager.c: 111: ODCONG = 0x00;
  3385  011290  0E00               	movlw	0
  3386  011292  6FBA               	movwf	186,b	;volatile
  3387                           
  3388                           ;pin_manager.c: 112: ODCONB = 0x00;
  3389  011294  0E00               	movlw	0
  3390  011296  6F98               	movwf	152,b	;volatile
  3391                           
  3392                           ;pin_manager.c: 113: ODCONH = 0x00;
  3393  011298  0E00               	movlw	0
  3394  01129A  6FBF               	movwf	191,b	;volatile
  3395                           
  3396                           ;pin_manager.c: 114: ODCONC = 0x00;
  3397  01129C  0E00               	movlw	0
  3398  01129E  6FA0               	movwf	160,b	;volatile
  3399                           
  3400                           ;pin_manager.c: 115: ODCOND = 0x00;
  3401  0112A0  0E00               	movlw	0
  3402  0112A2  6FA5               	movwf	165,b	;volatile
  3403                           
  3404                           ;pin_manager.c: 124: RG7PPS = 0x0E;
  3405  0112A4  0E0E               	movlw	14
  3406  0112A6  6F89               	movwf	137,b	;volatile
  3407                           
  3408                           ; BSR set to: 14
  3409                           ;pin_manager.c: 125: RX2PPSbits.RX2PPS = 0x36;
  3410  0112A8  9111               	bcf	17,0,b	;volatile
  3411  0112AA  8311               	bsf	17,1,b	;volatile
  3412  0112AC  8511               	bsf	17,2,b	;volatile
  3413  0112AE  9711               	bcf	17,3,b	;volatile
  3414  0112B0  8911               	bsf	17,4,b	;volatile
  3415  0112B2  8B11               	bsf	17,5,b	;volatile
  3416                           
  3417                           ; BSR set to: 14
  3418  0112B4  0012               	return		;funcret
  3419  0112B6                     __end_of_PIN_MANAGER_Initialize:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function _OSCILLATOR_Initialize *****************
  3439 ;; Defined at:
  3440 ;;		line 60 in file "mcc_generated_files/mcc.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, status,2
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    5
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_SYSTEM_Initialize
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text13
  3469  011F22                     __ptext13:
  3470                           	opt stack 0
  3471  011F22                     _OSCILLATOR_Initialize:
  3472                           	opt stack 24
  3473                           
  3474                           ;mcc.c: 63: OSCCON1 = 0x60;
  3475                           
  3476                           ; BSR set to: 14
  3477                           ;incstack = 0
  3478  011F22  0E60               	movlw	96
  3479  011F24  010E               	movlb	14	; () banked
  3480  011F26  6F43               	movwf	67,b	;volatile
  3481                           
  3482                           ;mcc.c: 65: OSCCON3 = 0x00;
  3483  011F28  0E00               	movlw	0
  3484  011F2A  6F45               	movwf	69,b	;volatile
  3485                           
  3486                           ;mcc.c: 67: OSCEN = 0x00;
  3487  011F2C  0E00               	movlw	0
  3488  011F2E  6F47               	movwf	71,b	;volatile
  3489                           
  3490                           ;mcc.c: 69: OSCFRQ = 0x08;
  3491  011F30  0E08               	movlw	8
  3492  011F32  6F49               	movwf	73,b	;volatile
  3493                           
  3494                           ;mcc.c: 71: OSCTUNE = 0x00;
  3495  011F34  0E00               	movlw	0
  3496  011F36  6F48               	movwf	72,b	;volatile
  3497                           
  3498                           ; BSR set to: 14
  3499  011F38  0012               	return		;funcret
  3500  011F3A                     __end_of_OSCILLATOR_Initialize:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           postdec1	equ	0xFE5
  3512                           fsr1l	equ	0xFE1
  3513                           indf2	equ	0xFDF
  3514                           postinc2	equ	0xFDE
  3515                           fsr2h	equ	0xFDA
  3516                           fsr2l	equ	0xFD9
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _MTOUCH_Initialize *****************
  3520 ;; Defined at:
  3521 ;;		line 75 in file "mcc_generated_files/mtouch/mtouch.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    8
  3542 ;; This function calls:
  3543 ;;		_MTOUCH_Button_InitializeAll
  3544 ;;		_MTOUCH_Sensor_InitializeAll
  3545 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3546 ;;		_MTOUCH_Sensor_Scan_Initialize
  3547 ;; This function is called by:
  3548 ;;		_SYSTEM_Initialize
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text14
  3553  011F6A                     __ptext14:
  3554                           	opt stack 0
  3555  011F6A                     _MTOUCH_Initialize:
  3556                           	opt stack 21
  3557                           
  3558                           ;mtouch.c: 77: MTOUCH_Sensor_InitializeAll();
  3559                           
  3560                           ; BSR set to: 14
  3561                           ;incstack = 0
  3562  011F6A  EC1C  F08D         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  3563                           
  3564                           ;mtouch.c: 78: MTOUCH_Button_InitializeAll();
  3565  011F6E  EC38  F08D         	call	_MTOUCH_Button_InitializeAll	;wreg free
  3566                           
  3567                           ;mtouch.c: 79: MTOUCH_Sensor_Sampled_ResetAll();
  3568  011F72  EC22  F08E         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  3569                           
  3570                           ;mtouch.c: 80: MTOUCH_Sensor_Scan_Initialize();
  3571  011F76  EC16  F090         	call	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  3572  011F7A  0012               	return		;funcret
  3573  011F7C                     __end_of_MTOUCH_Initialize:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           postinc0	equ	0xFEE
  3583                           wreg	equ	0xFE8
  3584                           postdec1	equ	0xFE5
  3585                           fsr1l	equ	0xFE1
  3586                           indf2	equ	0xFDF
  3587                           postinc2	equ	0xFDE
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  3593 ;; Defined at:
  3594 ;;		line 327 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      void 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, cstack
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    6
  3615 ;; This function calls:
  3616 ;;		_MTOUCH_Sensor_ADCC_Initialize
  3617 ;; This function is called by:
  3618 ;;		_MTOUCH_Initialize
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text15
  3623  01202C                     __ptext15:
  3624                           	opt stack 0
  3625  01202C                     _MTOUCH_Sensor_Scan_Initialize:
  3626                           	opt stack 22
  3627                           
  3628                           ;mtouch_sensor.c: 329: MTOUCH_Sensor_ADCC_Initialize();
  3629                           
  3630                           ;incstack = 0
  3631  01202C  ECA4  F08C         	call	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  3632  012030  0012               	return		;funcret
  3633  012032                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  3653 ;; Defined at:
  3654 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;Total ram usage:        0 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    5
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_MTOUCH_Sensor_Scan_Initialize
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text16
  3683  011948                     __ptext16:
  3684                           	opt stack 0
  3685  011948                     _MTOUCH_Sensor_ADCC_Initialize:
  3686                           	opt stack 22
  3687                           
  3688                           ;mtouch_sensor.c: 254: ADCLK = 0x1f;
  3689                           
  3690                           ;incstack = 0
  3691  011948  0E1F               	movlw	31
  3692  01194A  010F               	movlb	15	; () banked
  3693  01194C  6F57               	movwf	87,b	;volatile
  3694                           
  3695                           ;mtouch_sensor.c: 256: ADREF = 0x00;
  3696  01194E  0E00               	movlw	0
  3697  011950  6F58               	movwf	88,b	;volatile
  3698                           
  3699                           ;mtouch_sensor.c: 258: ADCAP = 0x00;
  3700  011952  0E00               	movlw	0
  3701  011954  6F5D               	movwf	93,b	;volatile
  3702                           
  3703                           ;mtouch_sensor.c: 260: ADLTHL = 0x00;
  3704  011956  0E00               	movlw	0
  3705  011958  6E6A               	movwf	3946,c	;volatile
  3706                           
  3707                           ;mtouch_sensor.c: 262: ADLTHH = 0x00;
  3708  01195A  0E00               	movlw	0
  3709  01195C  6E6B               	movwf	3947,c	;volatile
  3710                           
  3711                           ;mtouch_sensor.c: 264: ADUTHL = 0x00;
  3712  01195E  0E00               	movlw	0
  3713  011960  6E6C               	movwf	3948,c	;volatile
  3714                           
  3715                           ;mtouch_sensor.c: 266: ADUTHH = 0x00;
  3716  011962  0E00               	movlw	0
  3717  011964  6E6D               	movwf	3949,c	;volatile
  3718                           
  3719                           ;mtouch_sensor.c: 268: ADSTPTL = 0x00;
  3720  011966  0E00               	movlw	0
  3721  011968  6E68               	movwf	3944,c	;volatile
  3722                           
  3723                           ;mtouch_sensor.c: 270: ADSTPTH = 0x00;
  3724  01196A  0E00               	movlw	0
  3725  01196C  6E69               	movwf	3945,c	;volatile
  3726                           
  3727                           ;mtouch_sensor.c: 273: ADCON1 = 0x41;
  3728  01196E  0E41               	movlw	65
  3729  011970  6F59               	movwf	89,b	;volatile
  3730                           
  3731                           ;mtouch_sensor.c: 275: ADCON2 = 0x8B;
  3732  011972  0E8B               	movlw	139
  3733  011974  6F5A               	movwf	90,b	;volatile
  3734                           
  3735                           ;mtouch_sensor.c: 278: ADCON3 = 0x0F;
  3736  011976  0E0F               	movlw	15
  3737  011978  6F5B               	movwf	91,b	;volatile
  3738                           
  3739                           ;mtouch_sensor.c: 281: ADCON0 = 0xC4;
  3740  01197A  0EC4               	movlw	196
  3741  01197C  6E60               	movwf	3936,c	;volatile
  3742                           
  3743                           ; BSR set to: 15
  3744                           ;mtouch_sensor.c: 284: PIR1bits.ADTIF = 0;
  3745  01197E  010E               	movlb	14	; () banked
  3746  011980  9334               	bcf	52,1,b	;volatile
  3747                           
  3748                           ; BSR set to: 14
  3749                           ;mtouch_sensor.c: 286: PIE1bits.ADTIE = 1;
  3750  011982  832A               	bsf	42,1,b	;volatile
  3751                           
  3752                           ; BSR set to: 14
  3753  011984  0012               	return		;funcret
  3754  011986                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  3755                           	opt stack 0
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           postdec1	equ	0xFE5
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3774 ;; Defined at:
  3775 ;;		line 290 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  sensor          1   11[BANK0 ] enum E17513
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;Total ram usage:        1 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    7
  3796 ;; This function calls:
  3797 ;;		_MTOUCH_Sensor_Initialize
  3798 ;;		_memcpy
  3799 ;; This function is called by:
  3800 ;;		_MTOUCH_Initialize
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text17
  3805  011A38                     __ptext17:
  3806                           	opt stack 0
  3807  011A38                     _MTOUCH_Sensor_InitializeAll:
  3808                           	opt stack 21
  3809                           
  3810                           ;mtouch_sensor.c: 292: enum mtouch_sensor_names sensor;
  3811                           ;mtouch_sensor.c: 294: memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init
      +                          ));
  3812                           
  3813                           ; BSR set to: 14
  3814                           ;incstack = 0
  3815  011A38  0E88               	movlw	low _mtouch_sensor
  3816  011A3A  0100               	movlb	0	; () banked
  3817  011A3C  6FB5               	movwf	memcpy@d1& (0+255),b
  3818  011A3E  0E00               	movlw	high _mtouch_sensor
  3819  011A40  6FB6               	movwf	(memcpy@d1+1)& (0+255),b
  3820  011A42  0E8F               	movlw	low _mtouch_sensor_init
  3821  011A44  6FB7               	movwf	memcpy@s1& (0+255),b
  3822  011A46  0EFD               	movlw	high _mtouch_sensor_init
  3823  011A48  6FB8               	movwf	(memcpy@s1+1)& (0+255),b
  3824  011A4A  0E00               	movlw	0
  3825  011A4C  6FBA               	movwf	(memcpy@n+1)& (0+255),b
  3826  011A4E  0E2D               	movlw	45
  3827  011A50  6FB9               	movwf	memcpy@n& (0+255),b
  3828  011A52  ECF5  F08B         	call	_memcpy	;wreg free
  3829                           
  3830                           ;mtouch_sensor.c: 296: for (sensor = 0; sensor < 5; sensor++)
  3831  011A56  0E00               	movlw	0
  3832  011A58  0100               	movlb	0	; () banked
  3833  011A5A  6FC0               	movwf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  3834  011A5C                     l4303:
  3835                           
  3836                           ; BSR set to: 0
  3837  011A5C  0E04               	movlw	4
  3838  011A5E  65C0               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  3839  011A60  D001               	goto	l565
  3840  011A62  0012               	return	
  3841  011A64                     l565:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;mtouch_sensor.c: 297: {
  3845                           ;mtouch_sensor.c: 298: MTOUCH_Sensor_Initialize(sensor);
  3846                           
  3847                           ; BSR set to: 0
  3848  011A64  51C0               	movf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),w,b
  3849  011A66  EC31  F08A         	call	_MTOUCH_Sensor_Initialize
  3850  011A6A  0100               	movlb	0	; () banked
  3851  011A6C  2BC0               	incf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),f,b
  3852  011A6E  D7F6               	goto	l4303
  3853  011A70                     __end_of_MTOUCH_Sensor_InitializeAll:
  3854                           	opt stack 0
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           intcon	equ	0xFF2
  3862                           postinc0	equ	0xFEE
  3863                           wreg	equ	0xFE8
  3864                           postdec1	equ	0xFE5
  3865                           fsr1l	equ	0xFE1
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3873 ;; Defined at:
  3874 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  sensor          1    wreg     enum E17513
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  sensor          1    2[BANK0 ] enum E17513
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      enum E17519
  3881 ;; Registers used:
  3882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3891 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3892 ;;Total ram usage:        1 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    6
  3895 ;; This function calls:
  3896 ;;		_MTOUCH_Sensor_Calibrate
  3897 ;;		_MTOUCH_Sensor_Enable
  3898 ;;		_Sensor_Sampled_Reset
  3899 ;; This function is called by:
  3900 ;;		_MTOUCH_Sensor_InitializeAll
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text18
  3905  011462                     __ptext18:
  3906                           	opt stack 0
  3907  011462                     _MTOUCH_Sensor_Initialize:
  3908                           	opt stack 21
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;incstack = 0
  3912                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3913  011462  0100               	movlb	0	; () banked
  3914  011464  6FB7               	movwf	MTOUCH_Sensor_Initialize@sensor& (0+255),b
  3915                           
  3916                           ;mtouch_sensor.c: 191: switch(sensor)
  3917  011466  D014               	goto	l540
  3918  011468                     l541:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;mtouch_sensor.c: 194: WPUEbits.WPUE2 = 0;
  3922  011468  010E               	movlb	14	; () banked
  3923  01146A  95AE               	bcf	174,2,b	;volatile
  3924                           
  3925                           ;mtouch_sensor.c: 195: ANSELEbits.ANSELE2 = 0;
  3926  01146C  95AF               	bcf	175,2,b	;volatile
  3927                           
  3928                           ;mtouch_sensor.c: 196: break;
  3929  01146E  D022               	goto	l542
  3930  011470                     l543:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;mtouch_sensor.c: 198: WPUEbits.WPUE3 = 0;
  3934  011470  010E               	movlb	14	; () banked
  3935  011472  97AE               	bcf	174,3,b	;volatile
  3936                           
  3937                           ;mtouch_sensor.c: 199: ANSELEbits.ANSELE3 = 0;
  3938  011474  97AF               	bcf	175,3,b	;volatile
  3939                           
  3940                           ;mtouch_sensor.c: 200: break;
  3941  011476  D01E               	goto	l542
  3942  011478                     l544:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;mtouch_sensor.c: 202: WPUEbits.WPUE4 = 0;
  3946  011478  010E               	movlb	14	; () banked
  3947  01147A  99AE               	bcf	174,4,b	;volatile
  3948                           
  3949                           ;mtouch_sensor.c: 203: ANSELEbits.ANSELE4 = 0;
  3950  01147C  99AF               	bcf	175,4,b	;volatile
  3951                           
  3952                           ;mtouch_sensor.c: 204: break;
  3953  01147E  D01A               	goto	l542
  3954  011480                     l545:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;mtouch_sensor.c: 206: WPUEbits.WPUE5 = 0;
  3958  011480  010E               	movlb	14	; () banked
  3959  011482  9BAE               	bcf	174,5,b	;volatile
  3960                           
  3961                           ;mtouch_sensor.c: 207: ANSELEbits.ANSELE5 = 0;
  3962  011484  9BAF               	bcf	175,5,b	;volatile
  3963                           
  3964                           ;mtouch_sensor.c: 208: break;
  3965  011486  D016               	goto	l542
  3966  011488                     l546:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;mtouch_sensor.c: 210: WPUEbits.WPUE6 = 0;
  3970  011488  010E               	movlb	14	; () banked
  3971  01148A  9DAE               	bcf	174,6,b	;volatile
  3972                           
  3973                           ;mtouch_sensor.c: 211: ANSELEbits.ANSELE6 = 0;
  3974  01148C  9DAF               	bcf	175,6,b	;volatile
  3975                           
  3976                           ;mtouch_sensor.c: 212: break;
  3977  01148E  D012               	goto	l542
  3978  011490                     l540:
  3979                           
  3980                           ; BSR set to: 14
  3981  011490  0100               	movlb	0	; () banked
  3982  011492  51B7               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  3983                           
  3984                           ; Switch size 1, requested type "space"
  3985                           ; Number of cases is 5, Range of values is 0 to 4
  3986                           ; switch strategies available:
  3987                           ; Name         Instructions Cycles
  3988                           ; simple_byte           16     9 (average)
  3989                           ;	Chosen strategy is simple_byte
  3990  011494  0A00               	xorlw	0	; case 0
  3991  011496  B4D8               	btfsc	status,2,c
  3992  011498  D7E7               	goto	l541
  3993  01149A  0A01               	xorlw	1	; case 1
  3994  01149C  B4D8               	btfsc	status,2,c
  3995  01149E  D7E8               	goto	l543
  3996  0114A0  0A03               	xorlw	3	; case 2
  3997  0114A2  B4D8               	btfsc	status,2,c
  3998  0114A4  D7E9               	goto	l544
  3999  0114A6  0A01               	xorlw	1	; case 3
  4000  0114A8  B4D8               	btfsc	status,2,c
  4001  0114AA  D7EA               	goto	l545
  4002  0114AC  0A07               	xorlw	7	; case 4
  4003  0114AE  A4D8               	btfss	status,2,c
  4004  0114B0  0012               	return	
  4005  0114B2  D7EA               	goto	l546
  4006  0114B4                     l542:
  4007                           
  4008                           ;mtouch_sensor.c: 215: MTOUCH_Sensor_Enable(sensor);
  4009                           
  4010                           ; BSR set to: 0
  4011  0114B4  0100               	movlb	0	; () banked
  4012  0114B6  51B7               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4013  0114B8  EC94  F08E         	call	_MTOUCH_Sensor_Enable
  4014                           
  4015                           ;mtouch_sensor.c: 216: MTOUCH_Sensor_Calibrate(sensor);
  4016  0114BC  0100               	movlb	0	; () banked
  4017  0114BE  51B7               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4018  0114C0  ECD0  F08E         	call	_MTOUCH_Sensor_Calibrate
  4019                           
  4020                           ;mtouch_sensor.c: 217: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  4021  0114C4  0100               	movlb	0	; () banked
  4022  0114C6  51B7               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4023  0114C8  0D09               	mullw	9
  4024  0114CA  0E88               	movlw	low _mtouch_sensor
  4025  0114CC  24F3               	addwf	prodl,w,c
  4026  0114CE  6FB5               	movwf	Sensor_Sampled_Reset@sensor& (0+255),b
  4027  0114D0  0E00               	movlw	high _mtouch_sensor
  4028  0114D2  20F4               	addwfc	prodh,w,c
  4029  0114D4  6FB6               	movwf	(Sensor_Sampled_Reset@sensor+1)& (0+255),b
  4030  0114D6  ECBE  F08F         	call	_Sensor_Sampled_Reset	;wreg free
  4031  0114DA  0012               	return	
  4032  0114DC                     __end_of_MTOUCH_Sensor_Initialize:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           postdec1	equ	0xFE5
  4044                           fsr1l	equ	0xFE1
  4045                           indf2	equ	0xFDF
  4046                           postinc2	equ	0xFDE
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4052 ;; Defined at:
  4053 ;;		line 711 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  sensor          1    wreg     enum E17513
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  sensor          1    0[BANK0 ] enum E17513
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  1    wreg      void 
  4060 ;; Registers used:
  4061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4071 ;;Total ram usage:        1 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    5
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_MTOUCH_Sensor_Initialize
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text19
  4082  011D28                     __ptext19:
  4083                           	opt stack 0
  4084  011D28                     _MTOUCH_Sensor_Enable:
  4085                           	opt stack 21
  4086                           
  4087                           ;incstack = 0
  4088                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4089  011D28  0100               	movlb	0	; () banked
  4090  011D2A  6FB5               	movwf	MTOUCH_Sensor_Enable@sensor& (0+255),b
  4091                           
  4092                           ;mtouch_sensor.c: 713: if(sensor < 5)
  4093  011D2C  0E05               	movlw	5
  4094  011D2E  0100               	movlb	0	; () banked
  4095  011D30  61B5               	cpfslt	MTOUCH_Sensor_Enable@sensor& (0+255),b
  4096  011D32  0012               	return	
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;mtouch_sensor.c: 714: mtouch_sensor[sensor].enabled = 1;
  4100  011D34  51B5               	movf	MTOUCH_Sensor_Enable@sensor& (0+255),w,b
  4101  011D36  0D09               	mullw	9
  4102  011D38  0E08               	movlw	8
  4103  011D3A  26F3               	addwf	prodl,f,c
  4104  011D3C  0E00               	movlw	0
  4105  011D3E  22F4               	addwfc	prodh,f,c
  4106  011D40  0E88               	movlw	low _mtouch_sensor
  4107  011D42  24F3               	addwf	prodl,w,c
  4108  011D44  6ED9               	movwf	fsr2l,c
  4109  011D46  0E00               	movlw	high _mtouch_sensor
  4110  011D48  20F4               	addwfc	prodh,w,c
  4111  011D4A  6EDA               	movwf	fsr2h,c
  4112  011D4C  80DF               	bsf	indf2,0,c
  4113  011D4E  0012               	return	
  4114  011D50                     __end_of_MTOUCH_Sensor_Enable:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4134 ;; Defined at:
  4135 ;;		line 190 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  button          1   11[BANK0 ] enum E17454
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4153 ;;Total ram usage:        1 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    7
  4156 ;; This function calls:
  4157 ;;		_MTOUCH_Button_Initialize
  4158 ;;		_memcpy
  4159 ;; This function is called by:
  4160 ;;		_MTOUCH_Initialize
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text20
  4165  011A70                     __ptext20:
  4166                           	opt stack 0
  4167  011A70                     _MTOUCH_Button_InitializeAll:
  4168                           	opt stack 21
  4169                           
  4170                           ;mtouch_button.c: 192: enum mtouch_button_names button;
  4171                           ;mtouch_button.c: 194: memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init
      +                          ));
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;incstack = 0
  4175  011A70  0E40               	movlw	low _mtouch_button
  4176  011A72  0100               	movlb	0	; () banked
  4177  011A74  6FB5               	movwf	memcpy@d1& (0+255),b
  4178  011A76  0E01               	movlw	high _mtouch_button
  4179  011A78  6FB6               	movwf	(memcpy@d1+1)& (0+255),b
  4180  011A7A  0E3F               	movlw	low _mtouch_button_init
  4181  011A7C  6FB7               	movwf	memcpy@s1& (0+255),b
  4182  011A7E  0EFD               	movlw	high _mtouch_button_init
  4183  011A80  6FB8               	movwf	(memcpy@s1+1)& (0+255),b
  4184  011A82  0E00               	movlw	0
  4185  011A84  6FBA               	movwf	(memcpy@n+1)& (0+255),b
  4186  011A86  0E50               	movlw	80
  4187  011A88  6FB9               	movwf	memcpy@n& (0+255),b
  4188  011A8A  ECF5  F08B         	call	_memcpy	;wreg free
  4189                           
  4190                           ;mtouch_button.c: 196: for (button = 0; button < 5; button++)
  4191  011A8E  0E00               	movlw	0
  4192  011A90  0100               	movlb	0	; () banked
  4193  011A92  6FC0               	movwf	MTOUCH_Button_InitializeAll@button& (0+255),b
  4194  011A94                     l4317:
  4195                           
  4196                           ; BSR set to: 0
  4197  011A94  0E04               	movlw	4
  4198  011A96  65C0               	cpfsgt	MTOUCH_Button_InitializeAll@button& (0+255),b
  4199  011A98  D001               	goto	l823
  4200  011A9A  0012               	return	
  4201  011A9C                     l823:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;mtouch_button.c: 197: {
  4205                           ;mtouch_button.c: 198: MTOUCH_Button_Initialize(button);
  4206                           
  4207                           ; BSR set to: 0
  4208  011A9C  51C0               	movf	MTOUCH_Button_InitializeAll@button& (0+255),w,b
  4209  011A9E  EC6E  F08A         	call	_MTOUCH_Button_Initialize
  4210  011AA2  0100               	movlb	0	; () banked
  4211  011AA4  2BC0               	incf	MTOUCH_Button_InitializeAll@button& (0+255),f,b
  4212  011AA6  D7F6               	goto	l4317
  4213  011AA8                     __end_of_MTOUCH_Button_InitializeAll:
  4214                           	opt stack 0
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _memcpy *****************
  4233 ;; Defined at:
  4234 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  d1              2    0[BANK0 ] PTR void 
  4237 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  4238 ;;  s1              2    2[BANK0 ] PTR const void 
  4239 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  4240 ;;  n               2    4[BANK0 ] unsigned int 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  4243 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  4244 ;;  d               2    7[BANK0 ] PTR unsigned char 
  4245 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  4246 ;;  tmp             1    6[BANK0 ] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  2    0[BANK0 ] PTR void 
  4249 ;; Registers used:
  4250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4256 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4259 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4260 ;;Total ram usage:       11 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    5
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_MTOUCH_Sensor_InitializeAll
  4267 ;;		_MTOUCH_Button_InitializeAll
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text21
  4272  0117EA                     __ptext21:
  4273                           	opt stack 0
  4274  0117EA                     _memcpy:
  4275                           	opt stack 22
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;incstack = 0
  4279  0117EA  C0B7  F0BE         	movff	memcpy@s1,memcpy@s
  4280  0117EE  C0B8  F0BF         	movff	memcpy@s1+1,memcpy@s+1
  4281  0117F2  C0B5  F0BC         	movff	memcpy@d1,memcpy@d
  4282  0117F6  C0B6  F0BD         	movff	memcpy@d1+1,memcpy@d+1
  4283  0117FA  D014               	goto	l1399
  4284  0117FC                     l4061:
  4285  0117FC  C0BE  FFF6         	movff	memcpy@s,tblptrl
  4286  011800  C0BF  FFF7         	movff	memcpy@s+1,tblptrh
  4287  011804                     	if	0	;tblptru may be non-zero
  4288  011804                     	endif
  4289  011804                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4290  011804  0E00               	movlw	low (__mediumconst shr (0+16))
  4291  011806  6EF8               	movwf	tblptru,c
  4292  011808                     	endif
  4293  011808  0008               	tblrd		*
  4294  01180A  CFF5 F0BB          	movff	tablat,memcpy@tmp
  4295  01180E  0100               	movlb	0	; () banked
  4296  011810  4BBE               	infsnz	memcpy@s& (0+255),f,b
  4297  011812  2BBF               	incf	(memcpy@s+1)& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300  011814  C0BC  FFD9         	movff	memcpy@d,fsr2l
  4301  011818  C0BD  FFDA         	movff	memcpy@d+1,fsr2h
  4302  01181C  C0BB  FFDF         	movff	memcpy@tmp,indf2
  4303                           
  4304                           ; BSR set to: 0
  4305  011820  4BBC               	infsnz	memcpy@d& (0+255),f,b
  4306  011822  2BBD               	incf	(memcpy@d+1)& (0+255),f,b
  4307  011824                     l1399:
  4308                           
  4309                           ; BSR set to: 0
  4310  011824  0100               	movlb	0	; () banked
  4311  011826  07B9               	decf	memcpy@n& (0+255),f,b
  4312  011828  A0D8               	btfss	status,0,c
  4313  01182A  07BA               	decf	(memcpy@n+1)& (0+255),f,b
  4314  01182C  29B9               	incf	memcpy@n& (0+255),w,b
  4315  01182E  E1E6               	bnz	l4061
  4316  011830  29BA               	incf	(memcpy@n+1)& (0+255),w,b
  4317  011832  B4D8               	btfsc	status,2,c
  4318  011834  0012               	return	
  4319  011836  D7E2               	goto	l1400
  4320  011838                     __end_of_memcpy:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           postdec1	equ	0xFE5
  4332                           fsr1l	equ	0xFE1
  4333                           indf2	equ	0xFDF
  4334                           postinc2	equ	0xFDE
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _INTERRUPT_Initialize *****************
  4340 ;; Defined at:
  4341 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		None
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_SYSTEM_Initialize
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text22
  4370  011FF8                     __ptext22:
  4371                           	opt stack 0
  4372  011FF8                     _INTERRUPT_Initialize:
  4373                           	opt stack 24
  4374                           
  4375                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 1;
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;incstack = 0
  4379  011FF8  8AF2               	bsf	intcon,5,c	;volatile
  4380                           
  4381                           ;interrupt_manager.c: 60: IPR3bits.TX2IP = 1;
  4382  011FFA  010E               	movlb	14	; () banked
  4383  011FFC  8D22               	bsf	34,6,b	;volatile
  4384                           
  4385                           ;interrupt_manager.c: 63: IPR3bits.RC2IP = 1;
  4386  011FFE  8F22               	bsf	34,7,b	;volatile
  4387                           
  4388                           ;interrupt_manager.c: 66: IPR1bits.ADTIP = 1;
  4389  012000  8320               	bsf	32,1,b	;volatile
  4390                           
  4391                           ; BSR set to: 14
  4392  012002  0012               	return		;funcret
  4393  012004                     __end_of_INTERRUPT_Initialize:
  4394                           	opt stack 0
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           postdec1	equ	0xFE5
  4405                           fsr1l	equ	0xFE1
  4406                           indf2	equ	0xFDF
  4407                           postinc2	equ	0xFDE
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _EUSART2_Initialize *****************
  4413 ;; Defined at:
  4414 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      void 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    6
  4435 ;; This function calls:
  4436 ;;		_EUSART2_SetRxInterruptHandler
  4437 ;;		_EUSART2_SetTxInterruptHandler
  4438 ;; This function is called by:
  4439 ;;		_SYSTEM_Initialize
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text23
  4444  0116EA                     __ptext23:
  4445                           	opt stack 0
  4446  0116EA                     _EUSART2_Initialize:
  4447                           	opt stack 23
  4448                           
  4449                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  4450                           
  4451                           ; BSR set to: 14
  4452                           ;incstack = 0
  4453  0116EA  010E               	movlb	14	; () banked
  4454  0116EC  9F2C               	bcf	44,7,b	;volatile
  4455                           
  4456                           ; BSR set to: 14
  4457                           ;eusart2.c: 81: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  4458  0116EE  0EB6               	movlw	low _EUSART2_Receive_ISR
  4459  0116F0  0100               	movlb	0	; () banked
  4460  0116F2  6FB5               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  4461  0116F4  0E12               	movlw	high _EUSART2_Receive_ISR
  4462  0116F6  6FB6               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  4463  0116F8  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
  4464  0116FA  6FB7               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  4465  0116FC  ECEF  F08F         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  4466                           
  4467                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  4468  011700  010E               	movlb	14	; () banked
  4469  011702  9D2C               	bcf	44,6,b	;volatile
  4470                           
  4471                           ;eusart2.c: 83: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  4472  011704  0EAE               	movlw	low _EUSART2_Transmit_ISR
  4473  011706  0100               	movlb	0	; () banked
  4474  011708  6FB5               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  4475  01170A  0E1B               	movlw	high _EUSART2_Transmit_ISR
  4476  01170C  6FB6               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  4477  01170E  0E01               	movlw	low (_EUSART2_Transmit_ISR shr (0+16))
  4478  011710  6FB7               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  4479  011712  ECE8  F08F         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  4480                           
  4481                           ;eusart2.c: 87: BAUD2CON = 0x08;
  4482  011716  0E08               	movlw	8
  4483  011718  010E               	movlb	14	; () banked
  4484  01171A  6FF7               	movwf	247,b	;volatile
  4485                           
  4486                           ; BSR set to: 14
  4487                           ;eusart2.c: 90: RC2STA = 0x90;
  4488  01171C  0E90               	movlw	144
  4489  01171E  6FF5               	movwf	245,b	;volatile
  4490                           
  4491                           ; BSR set to: 14
  4492                           ;eusart2.c: 93: TX2STA = 0x24;
  4493  011720  0E24               	movlw	36
  4494  011722  6FF6               	movwf	246,b	;volatile
  4495                           
  4496                           ; BSR set to: 14
  4497                           ;eusart2.c: 96: SP2BRGL = 0x8A;
  4498  011724  0E8A               	movlw	138
  4499  011726  6FF3               	movwf	243,b	;volatile
  4500                           
  4501                           ; BSR set to: 14
  4502                           ;eusart2.c: 99: SP2BRGH = 0x00;
  4503  011728  0E00               	movlw	0
  4504  01172A  6FF4               	movwf	244,b	;volatile
  4505                           
  4506                           ; BSR set to: 14
  4507                           ;eusart2.c: 103: eusart2TxHead = 0;
  4508  01172C  0E00               	movlw	0
  4509  01172E  6E35               	movwf	_eusart2TxHead,c	;volatile
  4510                           
  4511                           ; BSR set to: 14
  4512                           ;eusart2.c: 104: eusart2TxTail = 0;
  4513  011730  0E00               	movlw	0
  4514  011732  6E34               	movwf	_eusart2TxTail,c	;volatile
  4515                           
  4516                           ; BSR set to: 14
  4517                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  4518  011734  0E40               	movlw	64
  4519  011736  6E45               	movwf	_eusart2TxBufferRemaining,c	;volatile
  4520                           
  4521                           ; BSR set to: 14
  4522                           ;eusart2.c: 107: eusart2RxHead = 0;
  4523  011738  0E00               	movlw	0
  4524  01173A  6E33               	movwf	_eusart2RxHead,c	;volatile
  4525                           
  4526                           ; BSR set to: 14
  4527                           ;eusart2.c: 108: eusart2RxTail = 0;
  4528  01173C  0E00               	movlw	0
  4529  01173E  6E32               	movwf	_eusart2RxTail,c	;volatile
  4530                           
  4531                           ; BSR set to: 14
  4532                           ;eusart2.c: 109: eusart2RxCount = 0;
  4533  011740  0E00               	movlw	0
  4534  011742  6E31               	movwf	_eusart2RxCount,c	;volatile
  4535                           
  4536                           ; BSR set to: 14
  4537                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  4538  011744  8F2C               	bsf	44,7,b	;volatile
  4539                           
  4540                           ; BSR set to: 14
  4541  011746  0012               	return		;funcret
  4542  011748                     __end_of_EUSART2_Initialize:
  4543                           	opt stack 0
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           intcon	equ	0xFF2
  4551                           postinc0	equ	0xFEE
  4552                           wreg	equ	0xFE8
  4553                           postdec1	equ	0xFE5
  4554                           fsr1l	equ	0xFE1
  4555                           indf2	equ	0xFDF
  4556                           postinc2	equ	0xFDE
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  4562 ;; Defined at:
  4563 ;;		line 258 in file "mcc_generated_files/eusart2.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  4566 ;;		 -> EUSART2_Transmit_ISR(1), 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4578 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4581 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4582 ;;Total ram usage:        3 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    5
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_EUSART2_Initialize
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text24
  4593  011FD0                     __ptext24:
  4594                           	opt stack 0
  4595  011FD0                     _EUSART2_SetTxInterruptHandler:
  4596                           	opt stack 23
  4597                           
  4598                           ;eusart2.c: 259: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  4599                           
  4600                           ; BSR set to: 14
  4601                           ;incstack = 0
  4602  011FD0  C0B5  F042         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  4603  011FD4  C0B6  F043         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  4604  011FD8  C0B7  F044         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+2,_EUSART2_TxDefaultInterruptHandl
      +                          er+2
  4605  011FDC  0012               	return		;funcret
  4606  011FDE                     __end_of_EUSART2_SetTxInterruptHandler:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           intcon	equ	0xFF2
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postdec1	equ	0xFE5
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  4626 ;; Defined at:
  4627 ;;		line 262 in file "mcc_generated_files/eusart2.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  4630 ;;		 -> EUSART2_Receive_ISR(1), 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4642 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4646 ;;Total ram usage:        3 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    5
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_EUSART2_Initialize
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text25
  4657  011FDE                     __ptext25:
  4658                           	opt stack 0
  4659  011FDE                     _EUSART2_SetRxInterruptHandler:
  4660                           	opt stack 23
  4661                           
  4662                           ;eusart2.c: 263: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  4663                           
  4664                           ;incstack = 0
  4665  011FDE  C0B5  F0D5         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  4666  011FE2  C0B6  F0D6         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  4667  011FE6  C0B7  F0D7         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
  4668  011FEA  0012               	return		;funcret
  4669  011FEC                     __end_of_EUSART2_SetRxInterruptHandler:
  4670                           	opt stack 0
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           intcon	equ	0xFF2
  4678                           postinc0	equ	0xFEE
  4679                           wreg	equ	0xFE8
  4680                           postdec1	equ	0xFE5
  4681                           fsr1l	equ	0xFE1
  4682                           indf2	equ	0xFDF
  4683                           postinc2	equ	0xFDE
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4689 ;; Defined at:
  4690 ;;		line 89 in file "mcc_generated_files/mtouch/mtouch.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;		None
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  1    wreg      unsigned char 
  4697 ;; Registers used:
  4698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4708 ;;Total ram usage:        0 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:   10
  4711 ;; This function calls:
  4712 ;;		_MTOUCH_Button_ServiceAll
  4713 ;;		_MTOUCH_Sensor_SampleAll
  4714 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4715 ;;		_MTOUCH_Tick
  4716 ;;		_MTOUCH_needReburst
  4717 ;; This function is called by:
  4718 ;;		_main
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text26
  4723  011D50                     __ptext26:
  4724                           	opt stack 0
  4725  011D50                     _MTOUCH_Service_Mainloop:
  4726                           	opt stack 20
  4727                           
  4728                           ;mtouch.c: 93: mtouch_time_toScan = 1;
  4729                           
  4730                           ;incstack = 0
  4731  011D50  0E01               	movlw	1
  4732  011D52  6E2F               	movwf	_mtouch_time_toScan,c
  4733                           
  4734                           ;mtouch.c: 95: if(mtouch_time_toScan)
  4735  011D54  502F               	movf	_mtouch_time_toScan,w,c
  4736  011D56  B4D8               	btfsc	status,2,c
  4737  011D58  0012               	return	
  4738                           
  4739                           ;mtouch.c: 96: {
  4740                           ;mtouch.c: 97: if(MTOUCH_Sensor_SampleAll() == 0)
  4741  011D5A  EC43  F08C         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  4742  011D5E  0900               	iorlw	0
  4743  011D60  B4D8               	btfsc	status,2,c
  4744  011D62  0012               	return	
  4745                           
  4746                           ;mtouch.c: 99: MTOUCH_Button_ServiceAll();
  4747                           
  4748                           ;mtouch.c: 98: return 0;
  4749                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4750  011D64  EC84  F08F         	call	_MTOUCH_Button_ServiceAll	;wreg free
  4751                           
  4752                           ;mtouch.c: 100: mtouch_time_toScan = MTOUCH_needReburst();
  4753  011D68  EC02  F090         	call	_MTOUCH_needReburst	;wreg free
  4754  011D6C  6E2F               	movwf	_mtouch_time_toScan,c
  4755                           
  4756                           ;mtouch.c: 101: MTOUCH_Sensor_Sampled_ResetAll();
  4757  011D6E  EC22  F08E         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  4758                           
  4759                           ;mtouch.c: 102: MTOUCH_Tick();
  4760  011D72  EC19  F090         	call	_MTOUCH_Tick	;wreg free
  4761                           
  4762                           ;mtouch.c: 105: else
  4763                           ;mtouch.c: 106: {
  4764                           ;mtouch.c: 107: return 0;
  4765                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4766                           
  4767                           ;mtouch.c: 104: }
  4768                           
  4769                           ;mtouch.c: 103: return 1;
  4770                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4771  011D76  0012               	return	
  4772  011D78                     __end_of_MTOUCH_Service_Mainloop:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           postdec1	equ	0xFE5
  4784                           fsr1l	equ	0xFE1
  4785                           indf2	equ	0xFDF
  4786                           postinc2	equ	0xFDE
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function _MTOUCH_needReburst *****************
  4792 ;; Defined at:
  4793 ;;		line 126 in file "mcc_generated_files/mtouch/mtouch.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  needReburst     1    0[BANK0 ] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      unsigned char 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        1 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    5
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_MTOUCH_Service_Mainloop
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text27
  4822  012004                     __ptext27:
  4823                           	opt stack 0
  4824  012004                     _MTOUCH_needReburst:
  4825                           	opt stack 24
  4826                           
  4827                           ;mtouch.c: 128: bool needReburst = 0;
  4828                           
  4829                           ;incstack = 0
  4830  012004  0E00               	movlw	0
  4831  012006  0100               	movlb	0	; () banked
  4832  012008  6FB5               	movwf	MTOUCH_needReburst@needReburst& (0+255),b
  4833                           
  4834                           ;mtouch.c: 130: return needReburst;
  4835  01200A  51B5               	movf	MTOUCH_needReburst@needReburst& (0+255),w,b
  4836  01200C  0012               	return	
  4837  01200E                     __end_of_MTOUCH_needReburst:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           postinc0	equ	0xFEE
  4847                           wreg	equ	0xFE8
  4848                           postdec1	equ	0xFE5
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _MTOUCH_Tick *****************
  4857 ;; Defined at:
  4858 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    7
  4879 ;; This function calls:
  4880 ;;		_MTOUCH_Button_Tick
  4881 ;; This function is called by:
  4882 ;;		_MTOUCH_Service_Mainloop
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text28
  4887  012032                     __ptext28:
  4888                           	opt stack 0
  4889  012032                     _MTOUCH_Tick:
  4890                           	opt stack 22
  4891                           
  4892                           ;mtouch.c: 118: MTOUCH_Button_Tick();
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;incstack = 0
  4896  012032  ECBC  F08E         	call	_MTOUCH_Button_Tick	;wreg free
  4897  012036  0012               	return		;funcret
  4898  012038                     __end_of_MTOUCH_Tick:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           postinc0	equ	0xFEE
  4908                           wreg	equ	0xFE8
  4909                           postdec1	equ	0xFE5
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _MTOUCH_Button_Tick *****************
  4918 ;; Defined at:
  4919 ;;		line 316 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  i               1    4[BANK0 ] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4937 ;;Total ram usage:        1 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    6
  4940 ;; This function calls:
  4941 ;;		_Button_Tick_helper
  4942 ;; This function is called by:
  4943 ;;		_MTOUCH_Tick
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text29
  4948  011D78                     __ptext29:
  4949                           	opt stack 0
  4950  011D78                     _MTOUCH_Button_Tick:
  4951                           	opt stack 22
  4952                           
  4953                           ;mtouch_button.c: 318: uint8_t i;
  4954                           ;mtouch_button.c: 319: for (i = 0; i < 5; i++)
  4955                           
  4956                           ;incstack = 0
  4957  011D78  0E00               	movlw	0
  4958  011D7A  0100               	movlb	0	; () banked
  4959  011D7C  6FB9               	movwf	MTOUCH_Button_Tick@i& (0+255),b
  4960  011D7E                     l4341:
  4961                           
  4962                           ; BSR set to: 0
  4963  011D7E  0E04               	movlw	4
  4964  011D80  65B9               	cpfsgt	MTOUCH_Button_Tick@i& (0+255),b
  4965  011D82  D001               	goto	l859
  4966  011D84  0012               	return	
  4967  011D86                     l859:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;mtouch_button.c: 320: {
  4971                           ;mtouch_button.c: 321: Button_Tick_helper(&mtouch_button[i]);
  4972                           
  4973                           ; BSR set to: 0
  4974  011D86  51B9               	movf	MTOUCH_Button_Tick@i& (0+255),w,b
  4975  011D88  0D10               	mullw	16
  4976  011D8A  0E40               	movlw	low _mtouch_button
  4977  011D8C  24F3               	addwf	prodl,w,c
  4978  011D8E  6FB5               	movwf	Button_Tick_helper@button& (0+255),b
  4979  011D90  0E01               	movlw	high _mtouch_button
  4980  011D92  20F4               	addwfc	prodh,w,c
  4981  011D94  6FB6               	movwf	(Button_Tick_helper@button+1)& (0+255),b
  4982  011D96  ECA4  F08B         	call	_Button_Tick_helper	;wreg free
  4983  011D9A  0100               	movlb	0	; () banked
  4984  011D9C  2BB9               	incf	MTOUCH_Button_Tick@i& (0+255),f,b
  4985  011D9E  D7EF               	goto	l4341
  4986  011DA0                     __end_of_MTOUCH_Button_Tick:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           postdec1	equ	0xFE5
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005 ;; *************** function _Button_Tick_helper *****************
  5006 ;; Defined at:
  5007 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  button          2    0[BANK0 ] PTR struct .
  5010 ;;		 -> mtouch_button(80), 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5026 ;;Total ram usage:        4 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    5
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_MTOUCH_Button_Tick
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text30
  5037  011748                     __ptext30:
  5038                           	opt stack 0
  5039  011748                     _Button_Tick_helper:
  5040                           	opt stack 22
  5041                           
  5042                           ;mtouch_button.c: 327: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;incstack = 0
  5046  011748  0100               	movlb	0	; () banked
  5047  01174A  EE20 F002          	lfsr	2,2
  5048  01174E  51B5               	movf	Button_Tick_helper@button& (0+255),w,b
  5049  011750  26D9               	addwf	fsr2l,f,c
  5050  011752  51B6               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5051  011754  22DA               	addwfc	fsr2h,f,c
  5052  011756  0E02               	movlw	2
  5053  011758  18DE               	xorwf	postinc2,w,c
  5054  01175A  A4D8               	btfss	status,2,c
  5055  01175C  0012               	return	
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;mtouch_button.c: 328: {
  5059                           ;mtouch_button.c: 329: (button->counter)++;
  5060  01175E  EE20 F00A          	lfsr	2,10
  5061  011762  51B5               	movf	Button_Tick_helper@button& (0+255),w,b
  5062  011764  26D9               	addwf	fsr2l,f,c
  5063  011766  51B6               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5064  011768  22DA               	addwfc	fsr2h,f,c
  5065  01176A  2ADE               	incf	postinc2,f,c
  5066  01176C  0E00               	movlw	0
  5067  01176E  22DD               	addwfc	postdec2,f,c
  5068                           
  5069                           ;mtouch_button.c: 330: if (button->counter == (mtouch_button_statecounter_t)0)
  5070  011770  EE20 F00A          	lfsr	2,10
  5071  011774  51B5               	movf	Button_Tick_helper@button& (0+255),w,b
  5072  011776  26D9               	addwf	fsr2l,f,c
  5073  011778  51B6               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5074  01177A  22DA               	addwfc	fsr2h,f,c
  5075  01177C  50DE               	movf	postinc2,w,c
  5076  01177E  10DE               	iorwf	postinc2,w,c
  5077  011780  A4D8               	btfss	status,2,c
  5078  011782  0012               	return	
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;mtouch_button.c: 331: {
  5082                           ;mtouch_button.c: 332: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  5083  011784  EE20 F00A          	lfsr	2,10
  5084  011788  51B5               	movf	Button_Tick_helper@button& (0+255),w,b
  5085  01178A  26D9               	addwf	fsr2l,f,c
  5086  01178C  51B6               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5087  01178E  22DA               	addwfc	fsr2h,f,c
  5088  011790  0EFF               	movlw	255
  5089  011792  6EDE               	movwf	postinc2,c
  5090  011794  0EFF               	movlw	255
  5091  011796  6EDD               	movwf	postdec2,c
  5092                           
  5093                           ; BSR set to: 0
  5094  011798  0012               	return	
  5095  01179A                     __end_of_Button_Tick_helper:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5116 ;; Defined at:
  5117 ;;		line 811 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  sensor          2    2[BANK0 ] PTR struct .
  5122 ;;		 -> mtouch_sensor(45), 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5135 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5136 ;;Total ram usage:        2 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    6
  5139 ;; This function calls:
  5140 ;;		_Sensor_Sampled_Reset
  5141 ;; This function is called by:
  5142 ;;		_MTOUCH_Initialize
  5143 ;;		_MTOUCH_Service_Mainloop
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text31
  5148  011C44                     __ptext31:
  5149                           	opt stack 0
  5150  011C44                     _MTOUCH_Sensor_Sampled_ResetAll:
  5151                           	opt stack 22
  5152                           
  5153                           ;mtouch_sensor.c: 813: mtouch_sensor_t* sensor;
  5154                           ;mtouch_sensor.c: 814: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[5-1];senso
      +                          r++)
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;incstack = 0
  5158  011C44  0E88               	movlw	low _mtouch_sensor
  5159  011C46  0100               	movlb	0	; () banked
  5160  011C48  6FB7               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),b
  5161  011C4A  0E00               	movlw	high _mtouch_sensor
  5162  011C4C  6FB8               	movwf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),b
  5163  011C4E  51B8               	movf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),w,b
  5164  011C50  0800               	sublw	high (_mtouch_sensor+36)
  5165  011C52  E102               	bnz	u4585
  5166  011C54  51B7               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),w,b
  5167  011C56  08AC               	sublw	low (_mtouch_sensor+36)
  5168  011C58                     u4585:
  5169  011C58  A0D8               	btfss	status,0,c
  5170  011C5A  0012               	return	
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;mtouch_sensor.c: 815: {
  5174                           ;mtouch_sensor.c: 816: Sensor_Sampled_Reset(sensor);
  5175                           
  5176                           ; BSR set to: 0
  5177                           
  5178                           ; BSR set to: 0
  5179  011C5C  C0B7  F0B5         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  5180  011C60  C0B8  F0B6         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor+1,Sensor_Sampled_Reset@sensor+1
  5181  011C64  ECBE  F08F         	call	_Sensor_Sampled_Reset	;wreg free
  5182  011C68  0E09               	movlw	9
  5183  011C6A  0100               	movlb	0	; () banked
  5184  011C6C  27B7               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),f,b
  5185  011C6E  0E00               	movlw	0
  5186  011C70  23B8               	addwfc	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),f,b
  5187  011C72  D7ED               	goto	L2
  5188  011C74                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           postdec1	equ	0xFE5
  5200                           fsr1l	equ	0xFE1
  5201                           indf2	equ	0xFDF
  5202                           postinc2	equ	0xFDE
  5203                           postdec2	equ	0xFDD
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _Sensor_Sampled_Reset *****************
  5209 ;; Defined at:
  5210 ;;		line 828 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  sensor          2    0[BANK0 ] PTR struct .
  5213 ;;		 -> mtouch_sensor(45), 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5229 ;;Total ram usage:        2 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    5
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_MTOUCH_Sensor_Initialize
  5236 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text32
  5241  011F7C                     __ptext32:
  5242                           	opt stack 0
  5243  011F7C                     _Sensor_Sampled_Reset:
  5244                           	opt stack 22
  5245                           
  5246                           ;mtouch_sensor.c: 830: sensor->sampled = 0;
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;incstack = 0
  5250  011F7C  0100               	movlb	0	; () banked
  5251  011F7E  EE20 F008          	lfsr	2,8
  5252  011F82  51B5               	movf	Sensor_Sampled_Reset@sensor& (0+255),w,b
  5253  011F84  26D9               	addwf	fsr2l,f,c
  5254  011F86  51B6               	movf	(Sensor_Sampled_Reset@sensor+1)& (0+255),w,b
  5255  011F88  22DA               	addwfc	fsr2h,f,c
  5256  011F8A  92DF               	bcf	indf2,1,c
  5257                           
  5258                           ; BSR set to: 0
  5259  011F8C  0012               	return		;funcret
  5260  011F8E                     __end_of_Sensor_Sampled_Reset:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           postdec1	equ	0xFE5
  5272                           fsr1l	equ	0xFE1
  5273                           indf2	equ	0xFDF
  5274                           postinc2	equ	0xFDE
  5275                           postdec2	equ	0xFDD
  5276                           fsr2h	equ	0xFDA
  5277                           fsr2l	equ	0xFD9
  5278                           status	equ	0xFD8
  5279                           
  5280 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5281 ;; Defined at:
  5282 ;;		line 302 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  sensor          1   21[BANK0 ] enum E17513
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      unsigned char 
  5289 ;; Registers used:
  5290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;Total ram usage:        1 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    9
  5303 ;; This function calls:
  5304 ;;		_MTOUCH_Sensor_isEnabled
  5305 ;;		_MTOUCH_Sensor_isSampling
  5306 ;;		_MTOUCH_Sensor_wasSampled
  5307 ;;		_Sensor_FrequencyHopping
  5308 ;;		_Sensor_scheduleNextScan
  5309 ;; This function is called by:
  5310 ;;		_MTOUCH_Service_Mainloop
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text33
  5315  011886                     __ptext33:
  5316                           	opt stack 0
  5317  011886                     _MTOUCH_Sensor_SampleAll:
  5318                           	opt stack 20
  5319                           
  5320                           ;mtouch_sensor.c: 304: enum mtouch_sensor_names sensor;
  5321                           ;mtouch_sensor.c: 306: for (sensor = 0; sensor < 5; sensor++)
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;incstack = 0
  5325  011886  0E00               	movlw	0
  5326  011888  0100               	movlb	0	; () banked
  5327  01188A  6FCA               	movwf	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  5328  01188C                     l4567:
  5329                           
  5330                           ; BSR set to: 0
  5331  01188C  0E04               	movlw	4
  5332  01188E  65CA               	cpfsgt	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  5333  011890  D001               	goto	l570
  5334  011892  D018               	goto	u4910
  5335  011894                     l570:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;mtouch_sensor.c: 307: {
  5339                           ;mtouch_sensor.c: 308: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  5340                           
  5341                           ; BSR set to: 0
  5342  011894  51CA               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  5343  011896  EC8A  F08D         	call	_MTOUCH_Sensor_wasSampled
  5344  01189A  0900               	iorlw	0
  5345  01189C  A4D8               	btfss	status,2,c
  5346  01189E  D00F               	goto	l572
  5347  0118A0  0100               	movlb	0	; () banked
  5348  0118A2  51CA               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  5349  0118A4  EC70  F08D         	call	_MTOUCH_Sensor_isEnabled
  5350  0118A8  0900               	iorlw	0
  5351  0118AA  B4D8               	btfsc	status,2,c
  5352  0118AC  D008               	goto	l572
  5353                           
  5354                           ;mtouch_sensor.c: 309: {
  5355                           ;mtouch_sensor.c: 310: if(MTOUCH_Sensor_isSampling() == 0)
  5356  0118AE  EC1C  F090         	call	_MTOUCH_Sensor_isSampling	;wreg free
  5357  0118B2  0900               	iorlw	0
  5358  0118B4  B4D8               	btfsc	status,2,c
  5359                           
  5360                           ;mtouch_sensor.c: 311: Sensor_scheduleNextScan();
  5361  0118B6  ECD3  F082         	call	_Sensor_scheduleNextScan	;wreg free
  5362                           
  5363                           ;mtouch_sensor.c: 312: return 0;
  5364  0118BA  0E00               	movlw	0
  5365  0118BC  0012               	return	
  5366  0118BE                     l572:
  5367  0118BE  0100               	movlb	0	; () banked
  5368  0118C0  2BCA               	incf	MTOUCH_Sensor_SampleAll@sensor& (0+255),f,b
  5369  0118C2  D7E4               	goto	l4567
  5370  0118C4                     u4910:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;mtouch_sensor.c: 313: }
  5374                           ;mtouch_sensor.c: 314: }
  5375                           ;mtouch_sensor.c: 316: Sensor_FrequencyHopping();
  5376                           
  5377                           ; BSR set to: 0
  5378  0118C4  EC0B  F08F         	call	_Sensor_FrequencyHopping	;wreg free
  5379                           
  5380                           ;mtouch_sensor.c: 318: return 1;
  5381  0118C8  0E01               	movlw	1
  5382  0118CA  0012               	return	
  5383  0118CC                     __end_of_MTOUCH_Sensor_SampleAll:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _Sensor_scheduleNextScan *****************
  5404 ;; Defined at:
  5405 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;		None
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  sensor          2    6[BANK0 ] PTR struct .
  5410 ;;		 -> mtouch_sensor(45), 
  5411 ;;  skipScan        1    5[BANK0 ] unsigned char 
  5412 ;;  state           1    4[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5426 ;;Total ram usage:        6 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    6
  5429 ;; This function calls:
  5430 ;;		_MTOUCH_Sensor_isEnabled
  5431 ;;		_MTOUCH_Sensor_wasSampled
  5432 ;;		_Sensor_SetTrisBit
  5433 ;;		_Sensor_isCalibrated
  5434 ;;		_Sensor_isCalibratingAcqTime
  5435 ;; This function is called by:
  5436 ;;		_MTOUCH_Sensor_SampleAll
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text34
  5441  0105A6                     __ptext34:
  5442                           	opt stack 0
  5443  0105A6                     _Sensor_scheduleNextScan:
  5444                           	opt stack 22
  5445                           
  5446                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
  5447                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
  5448                           
  5449                           ;incstack = 0
  5450  0105A6  0E00               	movlw	0
  5451  0105A8  0100               	movlb	0	; () banked
  5452  0105AA  6FBA               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  5453                           
  5454                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
  5455  0105AC  0E00               	movlw	0
  5456  0105AE  BEF2               	btfsc	intcon,7,c	;volatile
  5457  0105B0  0E01               	movlw	1
  5458  0105B2  6FB9               	movwf	Sensor_scheduleNextScan@state& (0+255),b
  5459                           
  5460                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
  5461  0105B4  D00D               	goto	l582
  5462  0105B6                     
  5463                           ;mtouch_sensor.c: 347: {
  5464                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
  5465                           
  5466                           ; BSR set to: 0
  5467  0105B6  2A2E               	incf	_currentScanSensor,f,c
  5468  0105B8  0E05               	movlw	5
  5469  0105BA  182E               	xorwf	_currentScanSensor,w,c
  5470  0105BC  A4D8               	btfss	status,2,c
  5471  0105BE  D008               	goto	l582
  5472                           
  5473                           ;mtouch_sensor.c: 349: {
  5474                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
  5475  0105C0  0E00               	movlw	0
  5476  0105C2  6E2E               	movwf	_currentScanSensor,c
  5477                           
  5478                           ;mtouch_sensor.c: 351: sampling_flag = 0;
  5479  0105C4  0E00               	movlw	0
  5480  0105C6  6E2D               	movwf	_sampling_flag,c
  5481                           
  5482                           ;mtouch_sensor.c: 352: skipScan = 1;
  5483  0105C8  0E01               	movlw	1
  5484  0105CA  0100               	movlb	0	; () banked
  5485  0105CC  6FBA               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  5486                           
  5487                           ;mtouch_sensor.c: 353: break;
  5488  0105CE  D00C               	goto	u4640
  5489  0105D0                     l582:
  5490                           
  5491                           ; BSR set to: 0
  5492                           
  5493                           ; BSR set to: 0
  5494  0105D0  502E               	movf	_currentScanSensor,w,c
  5495  0105D2  EC8A  F08D         	call	_MTOUCH_Sensor_wasSampled
  5496  0105D6  0900               	iorlw	0
  5497  0105D8  A4D8               	btfss	status,2,c
  5498  0105DA  D7ED               	goto	l581
  5499  0105DC  502E               	movf	_currentScanSensor,w,c
  5500  0105DE  EC70  F08D         	call	_MTOUCH_Sensor_isEnabled
  5501  0105E2  0900               	iorlw	0
  5502  0105E4  B4D8               	btfsc	status,2,c
  5503  0105E6  D7E7               	goto	l581
  5504  0105E8                     u4640:
  5505                           
  5506                           ;mtouch_sensor.c: 354: }
  5507                           ;mtouch_sensor.c: 355: }
  5508                           ;mtouch_sensor.c: 358: if(skipScan==0)
  5509  0105E8  0100               	movlb	0	; () banked
  5510  0105EA  51BA               	movf	Sensor_scheduleNextScan@skipScan& (0+255),w,b
  5511  0105EC  A4D8               	btfss	status,2,c
  5512  0105EE  0012               	return	
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;mtouch_sensor.c: 359: {
  5516                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
  5517  0105F0  502E               	movf	_currentScanSensor,w,c
  5518  0105F2  0D09               	mullw	9
  5519  0105F4  0E88               	movlw	low _mtouch_sensor
  5520  0105F6  24F3               	addwf	prodl,w,c
  5521  0105F8  6FBB               	movwf	Sensor_scheduleNextScan@sensor& (0+255),b
  5522  0105FA  0E00               	movlw	high _mtouch_sensor
  5523  0105FC  20F4               	addwfc	prodh,w,c
  5524  0105FE  6FBC               	movwf	(Sensor_scheduleNextScan@sensor+1)& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
  5528  010600  C0BB  F0B5         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  5529  010604  C0BC  F0B6         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibrated@sensor+1
  5530  010608  EC77  F08F         	call	_Sensor_isCalibrated	;wreg free
  5531  01060C  0900               	iorlw	0
  5532  01060E  B4D8               	btfsc	status,2,c
  5533  010610  D015               	goto	l585
  5534                           
  5535                           ;mtouch_sensor.c: 362: {
  5536                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
  5537  010612  0100               	movlb	0	; () banked
  5538  010614  EE20 F003          	lfsr	2,3
  5539  010618  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5540  01061A  26D9               	addwf	fsr2l,f,c
  5541  01061C  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5542  01061E  22DA               	addwfc	fsr2h,f,c
  5543  010620  50DF               	movf	indf2,w,c
  5544  010622  010F               	movlb	15	; () banked
  5545  010624  6F5C               	movwf	92,b	;volatile
  5546                           
  5547                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
  5548  010626  0100               	movlb	0	; () banked
  5549  010628  EE20 F002          	lfsr	2,2
  5550  01062C  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5551  01062E  26D9               	addwf	fsr2l,f,c
  5552  010630  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5553  010632  22DA               	addwfc	fsr2h,f,c
  5554  010634  50DF               	movf	indf2,w,c
  5555  010636  010F               	movlb	15	; () banked
  5556  010638  6F5E               	movwf	94,b	;volatile
  5557                           
  5558                           ;mtouch_sensor.c: 365: }
  5559  01063A  D022               	goto	l588
  5560  01063C                     l585:
  5561                           
  5562                           ;mtouch_sensor.c: 366: else
  5563                           ;mtouch_sensor.c: 367: {
  5564                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
  5565                           
  5566                           ; BSR set to: 15
  5567  01063C  C0BB  F0B5         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  5568  010640  C0BC  F0B6         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibratingAcqTime@sensor+1
  5569  010644  EC6A  F08F         	call	_Sensor_isCalibratingAcqTime	;wreg free
  5570  010648  0900               	iorlw	0
  5571  01064A  B4D8               	btfsc	status,2,c
  5572  01064C  D014               	goto	l587
  5573                           
  5574                           ;mtouch_sensor.c: 369: {
  5575                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
  5576  01064E  0100               	movlb	0	; () banked
  5577  010650  EE20 F002          	lfsr	2,2
  5578  010654  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5579  010656  26D9               	addwf	fsr2l,f,c
  5580  010658  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5581  01065A  22DA               	addwfc	fsr2h,f,c
  5582  01065C  50DF               	movf	indf2,w,c
  5583  01065E  010F               	movlb	15	; () banked
  5584  010660  6F5E               	movwf	94,b	;volatile
  5585                           
  5586                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
  5587  010662  0100               	movlb	0	; () banked
  5588  010664  EE20 F003          	lfsr	2,3
  5589  010668  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5590  01066A  26D9               	addwf	fsr2l,f,c
  5591  01066C  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5592  01066E  22DA               	addwfc	fsr2h,f,c
  5593  010670  50DF               	movf	indf2,w,c
  5594  010672  010F               	movlb	15	; () banked
  5595  010674  D004               	goto	L3
  5596  010676                     l587:
  5597                           
  5598                           ;mtouch_sensor.c: 373: else
  5599                           ;mtouch_sensor.c: 374: {
  5600                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  5601                           
  5602                           ; BSR set to: 15
  5603  010676  0E80               	movlw	128
  5604  010678  010F               	movlb	15	; () banked
  5605  01067A  6F5E               	movwf	94,b	;volatile
  5606                           
  5607                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  5608  01067C  0E80               	movlw	128
  5609  01067E                     L3:
  5610  01067E  6F5C               	movwf	92,b	;volatile
  5611  010680                     l588:
  5612                           
  5613                           ; BSR set to: 15
  5614                           ;mtouch_sensor.c: 377: }
  5615                           ;mtouch_sensor.c: 378: }
  5616                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
  5617                           
  5618                           ; BSR set to: 15
  5619                           
  5620                           ; BSR set to: 15
  5621  010680  502A               	movf	_sample_delay,w,c
  5622  010682  275E               	addwf	94,f,b	;volatile
  5623                           
  5624                           ; BSR set to: 15
  5625                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
  5626  010684  0100               	movlb	0	; () banked
  5627  010686  EE20 F001          	lfsr	2,1
  5628  01068A  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5629  01068C  26D9               	addwf	fsr2l,f,c
  5630  01068E  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5631  010690  22DA               	addwfc	fsr2h,f,c
  5632  010692  50DF               	movf	indf2,w,c
  5633  010694  010F               	movlb	15	; () banked
  5634  010696  6F5F               	movwf	95,b	;volatile
  5635                           
  5636                           ; BSR set to: 15
  5637                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
  5638  010698  0100               	movlb	0	; () banked
  5639  01069A  EE20 F004          	lfsr	2,4
  5640  01069E  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5641  0106A0  26D9               	addwf	fsr2l,f,c
  5642  0106A2  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5643  0106A4  22DA               	addwfc	fsr2h,f,c
  5644  0106A6  50DF               	movf	indf2,w,c
  5645  0106A8  6FB7               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  5646  0106AA  90D8               	bcf	status,0,c
  5647  0106AC  31B7               	rrcf	??_Sensor_scheduleNextScan& (0+255),w,b
  5648  0106AE  6E66               	movwf	3942,c	;volatile
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
  5652  0106B0  EE20 F005          	lfsr	2,5
  5653  0106B4  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5654  0106B6  26D9               	addwf	fsr2l,f,c
  5655  0106B8  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5656  0106BA  22DA               	addwfc	fsr2h,f,c
  5657  0106BC  50DF               	movf	indf2,w,c
  5658  0106BE  010F               	movlb	15	; () banked
  5659  0106C0  6F5D               	movwf	93,b	;volatile
  5660                           
  5661                           ; BSR set to: 15
  5662                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
  5663  0106C2  8E60               	bsf	3936,7,c	;volatile
  5664                           
  5665                           ; BSR set to: 15
  5666                           ;mtouch_sensor.c: 385: sampling_flag= 1;
  5667  0106C4  0E01               	movlw	1
  5668  0106C6  6E2D               	movwf	_sampling_flag,c
  5669                           
  5670                           ; BSR set to: 15
  5671                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
  5672  0106C8  0E01               	movlw	1
  5673  0106CA  0100               	movlb	0	; () banked
  5674  0106CC  6FB5               	movwf	Sensor_SetTrisBit@TrisBit& (0+255),b
  5675  0106CE  502E               	movf	_currentScanSensor,w,c
  5676  0106D0  ECE1  F08A         	call	_Sensor_SetTrisBit
  5677                           
  5678                           ;mtouch_sensor.c: 387: GIE = 0;
  5679  0106D4  9EF2               	bcf	intcon,7,c	;volatile
  5680                           
  5681                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
  5682  0106D6  8060               	bsf	3936,0,c	;volatile
  5683                           
  5684                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
  5685  0106D8  0100               	movlb	0	; () banked
  5686  0106DA  EE20 F004          	lfsr	2,4
  5687  0106DE  51BB               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  5688  0106E0  26D9               	addwf	fsr2l,f,c
  5689  0106E2  51BC               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  5690  0106E4  22DA               	addwfc	fsr2h,f,c
  5691  0106E6  50DF               	movf	indf2,w,c
  5692  0106E8  6FB7               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  5693  0106EA  6BB8               	clrf	(??_Sensor_scheduleNextScan+1)& (0+255),b
  5694  0106EC  0E09               	movlw	9
  5695  0106EE                     u4685:
  5696  0106EE  90D8               	bcf	status,0,c
  5697  0106F0  37B7               	rlcf	??_Sensor_scheduleNextScan& (0+255),f,b
  5698  0106F2  37B8               	rlcf	(??_Sensor_scheduleNextScan+1)& (0+255),f,b
  5699  0106F4  2EE8               	decfsz	wreg,f,c
  5700  0106F6  D7FB               	goto	u4685
  5701  0106F8  C0B7  FF70         	movff	??_Sensor_scheduleNextScan,3952	;volatile
  5702  0106FC  C0B8  FF71         	movff	??_Sensor_scheduleNextScan+1,3953	;volatile
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;mtouch_sensor.c: 390: GIE = state;
  5706  010700  A1B9               	btfss	Sensor_scheduleNextScan@state& (0+255),0,b
  5707  010702  D002               	goto	u4690
  5708  010704  8EF2               	bsf	intcon,7,c	;volatile
  5709  010706  D001               	goto	u4705
  5710  010708                     u4690:
  5711  010708  9EF2               	bcf	intcon,7,c	;volatile
  5712  01070A                     u4705:
  5713                           
  5714                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
  5715  01070A  0E00               	movlw	0
  5716  01070C  6E2C               	movwf	_scanInterrupted,c	;volatile
  5717  01070E  0012               	return	
  5718  010710                     __end_of_Sensor_scheduleNextScan:
  5719                           	opt stack 0
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  5739 ;; Defined at:
  5740 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  sensor          2    0[BANK0 ] PTR struct .
  5743 ;;		 -> mtouch_sensor(45), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      unsigned char 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    5
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_Sensor_scheduleNextScan
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text35
  5770  011ED4                     __ptext35:
  5771                           	opt stack 0
  5772  011ED4                     _Sensor_isCalibratingAcqTime:
  5773                           	opt stack 22
  5774                           
  5775                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
  5776                           
  5777                           ;incstack = 0
  5778  011ED4  0100               	movlb	0	; () banked
  5779  011ED6  EE20 F008          	lfsr	2,8
  5780  011EDA  51B5               	movf	Sensor_isCalibratingAcqTime@sensor& (0+255),w,b
  5781  011EDC  26D9               	addwf	fsr2l,f,c
  5782  011EDE  51B6               	movf	(Sensor_isCalibratingAcqTime@sensor+1)& (0+255),w,b
  5783  011EE0  22DA               	addwfc	fsr2h,f,c
  5784  011EE2  A8DF               	btfss	indf2,4,c
  5785  011EE4  D002               	goto	u4100
  5786  011EE6  0E01               	movlw	1
  5787  011EE8  0012               	return	
  5788  011EEA                     u4100:
  5789  011EEA  0E00               	movlw	0
  5790  011EEC  0012               	return	
  5791  011EEE                     __end_of_Sensor_isCalibratingAcqTime:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _Sensor_isCalibrated *****************
  5812 ;; Defined at:
  5813 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  sensor          2    0[BANK0 ] PTR struct .
  5816 ;;		 -> mtouch_sensor(45), 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5828 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5832 ;;Total ram usage:        2 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_Sensor_scheduleNextScan
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text36
  5843  011EEE                     __ptext36:
  5844                           	opt stack 0
  5845  011EEE                     _Sensor_isCalibrated:
  5846                           	opt stack 22
  5847                           
  5848                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;incstack = 0
  5852  011EEE  0100               	movlb	0	; () banked
  5853  011EF0  EE20 F008          	lfsr	2,8
  5854  011EF4  51B5               	movf	Sensor_isCalibrated@sensor& (0+255),w,b
  5855  011EF6  26D9               	addwf	fsr2l,f,c
  5856  011EF8  51B6               	movf	(Sensor_isCalibrated@sensor+1)& (0+255),w,b
  5857  011EFA  22DA               	addwfc	fsr2h,f,c
  5858  011EFC  A6DF               	btfss	indf2,3,c
  5859  011EFE  D002               	goto	u4090
  5860  011F00  0E01               	movlw	1
  5861  011F02  0012               	return	
  5862  011F04                     u4090:
  5863  011F04  0E00               	movlw	0
  5864  011F06  0012               	return	
  5865  011F08                     __end_of_Sensor_isCalibrated:
  5866                           	opt stack 0
  5867                           tblptru	equ	0xFF8
  5868                           tblptrh	equ	0xFF7
  5869                           tblptrl	equ	0xFF6
  5870                           tablat	equ	0xFF5
  5871                           prodh	equ	0xFF4
  5872                           prodl	equ	0xFF3
  5873                           intcon	equ	0xFF2
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _Sensor_SetTrisBit *****************
  5886 ;; Defined at:
  5887 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  sensor          1    wreg     enum E17513
  5890 ;;  TrisBit         1    0[BANK0 ] unsigned char 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  sensor          1    1[BANK0 ] enum E17513
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      void 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5906 ;;Total ram usage:        2 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    5
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_Sensor_scheduleNextScan
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text37
  5917  0115C2                     __ptext37:
  5918                           	opt stack 0
  5919  0115C2                     _Sensor_SetTrisBit:
  5920                           	opt stack 22
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;incstack = 0
  5924                           ;Sensor_SetTrisBit@sensor stored from wreg
  5925  0115C2  0100               	movlb	0	; () banked
  5926  0115C4  6FB6               	movwf	Sensor_SetTrisBit@sensor& (0+255),b
  5927                           
  5928                           ;mtouch_sensor.c: 224: switch(sensor)
  5929  0115C6  D01E               	goto	l551
  5930  0115C8                     l552:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
  5934  0115C8  B1B5               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  5935  0115CA  D002               	bra	u3995
  5936  0115CC  9485               	bcf	3973,2,c	;volatile
  5937  0115CE  D001               	bra	u3996
  5938  0115D0                     u3995:
  5939  0115D0  8485               	bsf	3973,2,c	;volatile
  5940  0115D2                     u3996:
  5941                           
  5942                           ;mtouch_sensor.c: 228: break;
  5943  0115D2  0012               	return	
  5944  0115D4                     l554:
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
  5948  0115D4  B1B5               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  5949  0115D6  D002               	bra	u4005
  5950  0115D8  9685               	bcf	3973,3,c	;volatile
  5951  0115DA  D001               	bra	u4006
  5952  0115DC                     u4005:
  5953  0115DC  8685               	bsf	3973,3,c	;volatile
  5954  0115DE                     u4006:
  5955                           
  5956                           ;mtouch_sensor.c: 231: break;
  5957  0115DE  0012               	return	
  5958  0115E0                     l555:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
  5962  0115E0  B1B5               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  5963  0115E2  D002               	bra	u4015
  5964  0115E4  9885               	bcf	3973,4,c	;volatile
  5965  0115E6  D001               	bra	u4016
  5966  0115E8                     u4015:
  5967  0115E8  8885               	bsf	3973,4,c	;volatile
  5968  0115EA                     u4016:
  5969                           
  5970                           ;mtouch_sensor.c: 234: break;
  5971  0115EA  0012               	return	
  5972  0115EC                     l556:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
  5976  0115EC  B1B5               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  5977  0115EE  D002               	bra	u4025
  5978  0115F0  9A85               	bcf	3973,5,c	;volatile
  5979  0115F2  D001               	bra	u4026
  5980  0115F4                     u4025:
  5981  0115F4  8A85               	bsf	3973,5,c	;volatile
  5982  0115F6                     u4026:
  5983                           
  5984                           ;mtouch_sensor.c: 237: break;
  5985  0115F6  0012               	return	
  5986  0115F8                     l557:
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
  5990  0115F8  B1B5               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  5991  0115FA  D002               	bra	u4035
  5992  0115FC  9C85               	bcf	3973,6,c	;volatile
  5993  0115FE  D001               	bra	u4036
  5994  011600                     u4035:
  5995  011600  8C85               	bsf	3973,6,c	;volatile
  5996  011602                     u4036:
  5997                           
  5998                           ;mtouch_sensor.c: 242: }
  5999                           
  6000                           ;mtouch_sensor.c: 241: default: break;
  6001                           
  6002                           ;mtouch_sensor.c: 240: break;
  6003  011602  0012               	return	
  6004  011604                     l551:
  6005  011604  0100               	movlb	0	; () banked
  6006  011606  51B6               	movf	Sensor_SetTrisBit@sensor& (0+255),w,b
  6007                           
  6008                           ; Switch size 1, requested type "space"
  6009                           ; Number of cases is 5, Range of values is 0 to 4
  6010                           ; switch strategies available:
  6011                           ; Name         Instructions Cycles
  6012                           ; simple_byte           16     9 (average)
  6013                           ;	Chosen strategy is simple_byte
  6014  011608  0A00               	xorlw	0	; case 0
  6015  01160A  B4D8               	btfsc	status,2,c
  6016  01160C  D7DD               	goto	l552
  6017  01160E  0A01               	xorlw	1	; case 1
  6018  011610  B4D8               	btfsc	status,2,c
  6019  011612  D7E0               	goto	l554
  6020  011614  0A03               	xorlw	3	; case 2
  6021  011616  B4D8               	btfsc	status,2,c
  6022  011618  D7E3               	goto	l555
  6023  01161A  0A01               	xorlw	1	; case 3
  6024  01161C  B4D8               	btfsc	status,2,c
  6025  01161E  D7E6               	goto	l556
  6026  011620  0A07               	xorlw	7	; case 4
  6027  011622  A4D8               	btfss	status,2,c
  6028  011624  0012               	return	
  6029  011626  D7E8               	goto	l557
  6030  011628                     __end_of_Sensor_SetTrisBit:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           intcon	equ	0xFF2
  6039                           postinc0	equ	0xFEE
  6040                           wreg	equ	0xFE8
  6041                           postdec1	equ	0xFE5
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  6051 ;; Defined at:
  6052 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  sensor          1    wreg     enum E17513
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  sensor          1    0[BANK0 ] enum E17513
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      unsigned char 
  6059 ;; Registers used:
  6060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6070 ;;Total ram usage:        1 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    5
  6073 ;; This function calls:
  6074 ;;		Nothing
  6075 ;; This function is called by:
  6076 ;;		_MTOUCH_Sensor_SampleAll
  6077 ;;		_Sensor_scheduleNextScan
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text38
  6082  011AE0                     __ptext38:
  6083                           	opt stack 0
  6084  011AE0                     _MTOUCH_Sensor_isEnabled:
  6085                           	opt stack 22
  6086                           
  6087                           ;incstack = 0
  6088                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  6089  011AE0  0100               	movlb	0	; () banked
  6090  011AE2  6FB5               	movwf	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  6091                           
  6092                           ;mtouch_sensor.c: 719: if(sensor < 5)
  6093  011AE4  0E05               	movlw	5
  6094  011AE6  0100               	movlb	0	; () banked
  6095  011AE8  61B5               	cpfslt	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  6096  011AEA  D012               	goto	l699
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
  6100  011AEC  51B5               	movf	MTOUCH_Sensor_isEnabled@sensor& (0+255),w,b
  6101  011AEE  0D09               	mullw	9
  6102  011AF0  0E08               	movlw	8
  6103  011AF2  26F3               	addwf	prodl,f,c
  6104  011AF4  0E00               	movlw	0
  6105  011AF6  22F4               	addwfc	prodh,f,c
  6106  011AF8  0E88               	movlw	low _mtouch_sensor
  6107  011AFA  24F3               	addwf	prodl,w,c
  6108  011AFC  6ED9               	movwf	fsr2l,c
  6109  011AFE  0E00               	movlw	high _mtouch_sensor
  6110  011B00  20F4               	addwfc	prodh,w,c
  6111  011B02  6EDA               	movwf	fsr2h,c
  6112  011B04  A0DF               	btfss	indf2,0,c
  6113  011B06  D002               	goto	u4080
  6114  011B08  0E01               	movlw	1
  6115  011B0A  0012               	return	
  6116  011B0C                     u4080:
  6117  011B0C  0E00               	movlw	0
  6118                           
  6119                           ; BSR set to: 0
  6120                           
  6121                           ; BSR set to: 0
  6122  011B0E  0012               	return	
  6123  011B10                     l699:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;mtouch_sensor.c: 721: else
  6127                           ;mtouch_sensor.c: 722: return 0;
  6128                           
  6129                           ; BSR set to: 0
  6130  011B10  0E00               	movlw	0
  6131                           
  6132                           ; BSR set to: 0
  6133  011B12  0012               	return	
  6134  011B14                     __end_of_MTOUCH_Sensor_isEnabled:
  6135                           	opt stack 0
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           intcon	equ	0xFF2
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           postdec1	equ	0xFE5
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _Sensor_FrequencyHopping *****************
  6155 ;; Defined at:
  6156 ;;		line 595 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  sensor          1   20[BANK0 ] enum E17513
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6174 ;;Total ram usage:        1 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    8
  6177 ;; This function calls:
  6178 ;;		_Sensor_FrequencyHopping_Autotune_Process
  6179 ;;		_Sensor_postAcquisitionProcess
  6180 ;;		_Sensor_setSamplePeriod
  6181 ;; This function is called by:
  6182 ;;		_MTOUCH_Sensor_SampleAll
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text39
  6187  011E16                     __ptext39:
  6188                           	opt stack 0
  6189  011E16                     _Sensor_FrequencyHopping:
  6190                           	opt stack 20
  6191                           
  6192                           ;mtouch_sensor.c: 597: enum mtouch_sensor_names sensor;
  6193                           ;mtouch_sensor.c: 599: Sensor_FrequencyHopping_Autotune_Process();
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;incstack = 0
  6197  011E16  EC0D  F082         	call	_Sensor_FrequencyHopping_Autotune_Process	;wreg free
  6198                           
  6199                           ;mtouch_sensor.c: 601: for (sensor = 0; sensor < 5; sensor++)
  6200  011E1A  0E00               	movlw	0
  6201  011E1C  0100               	movlb	0	; () banked
  6202  011E1E  6FC9               	movwf	Sensor_FrequencyHopping@sensor& (0+255),b
  6203  011E20                     l4407:
  6204                           
  6205                           ; BSR set to: 0
  6206  011E20  0E04               	movlw	4
  6207  011E22  65C9               	cpfsgt	Sensor_FrequencyHopping@sensor& (0+255),b
  6208  011E24  D001               	goto	l654
  6209  011E26  D006               	goto	u4720
  6210  011E28                     l654:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;mtouch_sensor.c: 602: {
  6214                           ;mtouch_sensor.c: 603: Sensor_postAcquisitionProcess(sensor);
  6215                           
  6216                           ; BSR set to: 0
  6217  011E28  51C9               	movf	Sensor_FrequencyHopping@sensor& (0+255),w,b
  6218  011E2A  EC7D  F087         	call	_Sensor_postAcquisitionProcess
  6219  011E2E  0100               	movlb	0	; () banked
  6220  011E30  2BC9               	incf	Sensor_FrequencyHopping@sensor& (0+255),f,b
  6221  011E32  D7F6               	goto	l4407
  6222  011E34                     u4720:
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;mtouch_sensor.c: 604: }
  6226                           ;mtouch_sensor.c: 606: Sensor_setSamplePeriod();
  6227                           
  6228                           ; BSR set to: 0
  6229  011E34  EC2F  F08F         	call	_Sensor_setSamplePeriod	;wreg free
  6230  011E38  0012               	return		;funcret
  6231  011E3A                     __end_of_Sensor_FrequencyHopping:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           postinc0	equ	0xFEE
  6241                           wreg	equ	0xFE8
  6242                           postdec1	equ	0xFE5
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _Sensor_setSamplePeriod *****************
  6252 ;; Defined at:
  6253 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    5
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_Sensor_FrequencyHopping
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text40
  6282  011E5E                     __ptext40:
  6283                           	opt stack 0
  6284  011E5E                     _Sensor_setSamplePeriod:
  6285                           	opt stack 22
  6286                           
  6287                           ;mtouch_sensor.c: 522: if(++freq_index >= sizeof(freq_hop) )
  6288                           
  6289                           ;incstack = 0
  6290  011E5E  2A2B               	incf	_freq_index,f,c
  6291  011E60  0E02               	movlw	2
  6292  011E62  642B               	cpfsgt	_freq_index,c
  6293  011E64  D002               	goto	l624
  6294                           
  6295                           ;mtouch_sensor.c: 523: freq_index = 0;
  6296  011E66  0E00               	movlw	0
  6297  011E68  6E2B               	movwf	_freq_index,c
  6298  011E6A                     l624:
  6299                           
  6300                           ;mtouch_sensor.c: 525: sample_delay = freq_hop[freq_index];
  6301  011E6A  502B               	movf	_freq_index,w,c
  6302  011E6C  0D01               	mullw	1
  6303  011E6E  0E3C               	movlw	low _freq_hop
  6304  011E70  24F3               	addwf	prodl,w,c
  6305  011E72  6ED9               	movwf	fsr2l,c
  6306  011E74  0E00               	movlw	high _freq_hop
  6307  011E76  20F4               	addwfc	prodh,w,c
  6308  011E78  6EDA               	movwf	fsr2h,c
  6309  011E7A  50DF               	movf	indf2,w,c
  6310  011E7C  6E2A               	movwf	_sample_delay,c
  6311  011E7E  0012               	return		;funcret
  6312  011E80                     __end_of_Sensor_setSamplePeriod:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           postinc0	equ	0xFEE
  6322                           wreg	equ	0xFE8
  6323                           postdec1	equ	0xFE5
  6324                           fsr1l	equ	0xFE1
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6333 ;; Defined at:
  6334 ;;		line 450 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  name            1    wreg     enum E17513
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  name            1   17[BANK0 ] enum E17513
  6339 ;;  sensor          2   18[BANK0 ] PTR struct .
  6340 ;;		 -> mtouch_sensor(45), 
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      void 
  6343 ;; Registers used:
  6344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6353 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6354 ;;Total ram usage:        9 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    7
  6357 ;; This function calls:
  6358 ;;		_Sensor_DefaultCallback
  6359 ;;		_Sensor_RawSample_Update
  6360 ;;		_Sensor_isEnabled
  6361 ;;		_Sensor_setActive
  6362 ;;		_Sensor_setInactive
  6363 ;;		_abs
  6364 ;; This function is called by:
  6365 ;;		_Sensor_FrequencyHopping
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text41
  6370  010EFA                     __ptext41:
  6371                           	opt stack 0
  6372  010EFA                     _Sensor_postAcquisitionProcess:
  6373                           	opt stack 20
  6374                           
  6375                           ;incstack = 0
  6376                           ;Sensor_postAcquisitionProcess@name stored from wreg
  6377  010EFA  0100               	movlb	0	; () banked
  6378  010EFC  6FC6               	movwf	Sensor_postAcquisitionProcess@name& (0+255),b
  6379                           
  6380                           ;mtouch_sensor.c: 452: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  6381  010EFE  0100               	movlb	0	; () banked
  6382  010F00  51C6               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  6383  010F02  0D09               	mullw	9
  6384  010F04  0E88               	movlw	low _mtouch_sensor
  6385  010F06  24F3               	addwf	prodl,w,c
  6386  010F08  6FC7               	movwf	Sensor_postAcquisitionProcess@sensor& (0+255),b
  6387  010F0A  0E00               	movlw	high _mtouch_sensor
  6388  010F0C  20F4               	addwfc	prodh,w,c
  6389  010F0E  6FC8               	movwf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),b
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;mtouch_sensor.c: 454: if(Sensor_isEnabled(sensor))
  6393  010F10  C0C7  F0B5         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_isEnabled@sensor
  6394  010F14  C0C8  F0B6         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_isEnabled@sensor+1
  6395  010F18  ECF8  F08E         	call	_Sensor_isEnabled	;wreg free
  6396  010F1C  0900               	iorlw	0
  6397  010F1E  B4D8               	btfsc	status,2,c
  6398  010F20  D05A               	goto	l604
  6399                           
  6400                           ;mtouch_sensor.c: 455: {
  6401                           ;mtouch_sensor.c: 456: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - sensor
      +                          ->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<2))
  6402  010F22  0100               	movlb	0	; () banked
  6403  010F24  51C6               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  6404  010F26  0D02               	mullw	2
  6405  010F28  0E7E               	movlw	low _packet_sample
  6406  010F2A  24F3               	addwf	prodl,w,c
  6407  010F2C  6ED9               	movwf	fsr2l,c
  6408  010F2E  0E00               	movlw	high _packet_sample
  6409  010F30  20F4               	addwfc	prodh,w,c
  6410  010F32  6EDA               	movwf	fsr2h,c
  6411  010F34  CFDE F0C0          	movff	postinc2,??_Sensor_postAcquisitionProcess
  6412  010F38  CFDD F0C1          	movff	postdec2,??_Sensor_postAcquisitionProcess+1
  6413  010F3C  EE20 F006          	lfsr	2,6
  6414  010F40  51C7               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  6415  010F42  26D9               	addwf	fsr2l,f,c
  6416  010F44  51C8               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  6417  010F46  22DA               	addwfc	fsr2h,f,c
  6418  010F48  CFDE F0C2          	movff	postinc2,??_Sensor_postAcquisitionProcess+2
  6419  010F4C  CFDD F0C3          	movff	postdec2,??_Sensor_postAcquisitionProcess+3
  6420  010F50  1FC2               	comf	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  6421  010F52  1FC3               	comf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  6422  010F54  4BC2               	infsnz	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  6423  010F56  2BC3               	incf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  6424  010F58  51C0               	movf	??_Sensor_postAcquisitionProcess& (0+255),w,b
  6425  010F5A  25C2               	addwf	(??_Sensor_postAcquisitionProcess+2)& (0+255),w,b
  6426  010F5C  6FB5               	movwf	abs@a& (0+255),b
  6427  010F5E  51C1               	movf	(??_Sensor_postAcquisitionProcess+1)& (0+255),w,b
  6428  010F60  21C3               	addwfc	(??_Sensor_postAcquisitionProcess+3)& (0+255),w,b
  6429  010F62  6FB6               	movwf	(abs@a+1)& (0+255),b
  6430  010F64  EC7F  F08E         	call	_abs	;wreg free
  6431  010F68  0100               	movlb	0	; () banked
  6432  010F6A  EE20 F004          	lfsr	2,4
  6433  010F6E  51C7               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  6434  010F70  26D9               	addwf	fsr2l,f,c
  6435  010F72  51C8               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  6436  010F74  22DA               	addwfc	fsr2h,f,c
  6437  010F76  50DF               	movf	indf2,w,c
  6438  010F78  6FC4               	movwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),b
  6439  010F7A  6BC5               	clrf	(??_Sensor_postAcquisitionProcess+5)& (0+255),b
  6440  010F7C  90D8               	bcf	status,0,c
  6441  010F7E  37C4               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  6442  010F80  37C5               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  6443  010F82  90D8               	bcf	status,0,c
  6444  010F84  37C4               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  6445  010F86  37C5               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  6446  010F88  51B5               	movf	?_abs& (0+255),w,b
  6447  010F8A  5DC4               	subwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),w,b
  6448  010F8C  51B6               	movf	(?_abs+1)& (0+255),w,b
  6449  010F8E  59C5               	subwfb	(??_Sensor_postAcquisitionProcess+5)& (0+255),w,b
  6450  010F90  B0D8               	btfsc	status,0,c
  6451  010F92  D007               	goto	l605
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;mtouch_sensor.c: 457: Sensor_setActive(sensor);
  6455  010F94  C0C7  F0B5         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setActive@sensor
  6456  010F98  C0C8  F0B6         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setActive@sensor+1
  6457  010F9C  ECD0  F08F         	call	_Sensor_setActive	;wreg free
  6458  010FA0  D006               	goto	l606
  6459  010FA2                     l605:
  6460                           
  6461                           ;mtouch_sensor.c: 458: else
  6462                           ;mtouch_sensor.c: 459: Sensor_setInactive(sensor);
  6463  010FA2  C0C7  F0B5         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  6464  010FA6  C0C8  F0B6         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  6465  010FAA  ECC7  F08F         	call	_Sensor_setInactive	;wreg free
  6466  010FAE                     l606:
  6467                           
  6468                           ;mtouch_sensor.c: 461: Sensor_RawSample_Update(sensor);
  6469  010FAE  C0C7  F0BC         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_RawSample_Update@sensor
  6470  010FB2  C0C8  F0BD         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_RawSample_Update@sensor+1
  6471  010FB6  EC1C  F08C         	call	_Sensor_RawSample_Update	;wreg free
  6472                           
  6473                           ;mtouch_sensor.c: 462: callback_sampled(name);
  6474  010FBA  D801               	call	u4138
  6475  010FBC  0012               	return	
  6476  010FBE                     u4138:
  6477  010FBE  0005               	push	
  6478  010FC0  6EFA               	movwf	pclath,c
  6479  010FC2  503F               	movf	_callback_sampled,w,c
  6480  010FC4  6EFD               	movwf	tosl,c
  6481  010FC6  5040               	movf	_callback_sampled+1,w,c
  6482  010FC8  6EFE               	movwf	tosh,c
  6483  010FCA  5041               	movf	_callback_sampled+2,w,c
  6484  010FCC  6EFF               	movwf	tosu,c
  6485  010FCE  50FA               	movf	pclath,w,c
  6486  010FD0  0100               	movlb	0	; () banked
  6487  010FD2  51C6               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  6488  010FD4  0012               	return		;indir
  6489  010FD6                     l604:
  6490                           
  6491                           ;mtouch_sensor.c: 464: else
  6492                           ;mtouch_sensor.c: 465: {
  6493                           ;mtouch_sensor.c: 466: Sensor_setInactive(sensor);
  6494  010FD6  C0C7  F0B5         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  6495  010FDA  C0C8  F0B6         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  6496  010FDE  ECC7  F08F         	call	_Sensor_setInactive
  6497  010FE2  0012               	return	
  6498  010FE4                     __end_of_Sensor_postAcquisitionProcess:
  6499                           	opt stack 0
  6500                           tosu	equ	0xFFF
  6501                           tosh	equ	0xFFE
  6502                           tosl	equ	0xFFD
  6503                           pclath	equ	0xFFA
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           postdec1	equ	0xFE5
  6514                           fsr1l	equ	0xFE1
  6515                           indf2	equ	0xFDF
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function _Sensor_setInactive *****************
  6523 ;; Defined at:
  6524 ;;		line 745 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  sensor          2    0[BANK0 ] PTR struct .
  6527 ;;		 -> mtouch_sensor(45), 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6543 ;;Total ram usage:        2 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    5
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_Sensor_postAcquisitionProcess
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text42
  6554  011F8E                     __ptext42:
  6555                           	opt stack 0
  6556  011F8E                     _Sensor_setInactive:
  6557                           	opt stack 21
  6558                           
  6559                           ;mtouch_sensor.c: 747: sensor->acitve = 0;
  6560                           
  6561                           ;incstack = 0
  6562  011F8E  0100               	movlb	0	; () banked
  6563  011F90  EE20 F008          	lfsr	2,8
  6564  011F94  51B5               	movf	Sensor_setInactive@sensor& (0+255),w,b
  6565  011F96  26D9               	addwf	fsr2l,f,c
  6566  011F98  51B6               	movf	(Sensor_setInactive@sensor+1)& (0+255),w,b
  6567  011F9A  22DA               	addwfc	fsr2h,f,c
  6568  011F9C  94DF               	bcf	indf2,2,c
  6569                           
  6570                           ; BSR set to: 0
  6571  011F9E  0012               	return		;funcret
  6572  011FA0                     __end_of_Sensor_setInactive:
  6573                           	opt stack 0
  6574                           tosu	equ	0xFFF
  6575                           tosh	equ	0xFFE
  6576                           tosl	equ	0xFFD
  6577                           pclath	equ	0xFFA
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           postinc0	equ	0xFEE
  6586                           wreg	equ	0xFE8
  6587                           postdec1	equ	0xFE5
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _Sensor_setActive *****************
  6597 ;; Defined at:
  6598 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  sensor          2    0[BANK0 ] PTR struct .
  6601 ;;		 -> mtouch_sensor(45), 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6613 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;Total ram usage:        2 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    5
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_Sensor_postAcquisitionProcess
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text43
  6628  011FA0                     __ptext43:
  6629                           	opt stack 0
  6630  011FA0                     _Sensor_setActive:
  6631                           	opt stack 21
  6632                           
  6633                           ;mtouch_sensor.c: 742: sensor->acitve = 1;
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;incstack = 0
  6637  011FA0  0100               	movlb	0	; () banked
  6638  011FA2  EE20 F008          	lfsr	2,8
  6639  011FA6  51B5               	movf	Sensor_setActive@sensor& (0+255),w,b
  6640  011FA8  26D9               	addwf	fsr2l,f,c
  6641  011FAA  51B6               	movf	(Sensor_setActive@sensor+1)& (0+255),w,b
  6642  011FAC  22DA               	addwfc	fsr2h,f,c
  6643  011FAE  84DF               	bsf	indf2,2,c
  6644                           
  6645                           ; BSR set to: 0
  6646  011FB0  0012               	return		;funcret
  6647  011FB2                     __end_of_Sensor_setActive:
  6648                           	opt stack 0
  6649                           tosu	equ	0xFFF
  6650                           tosh	equ	0xFFE
  6651                           tosl	equ	0xFFD
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _Sensor_isEnabled *****************
  6672 ;; Defined at:
  6673 ;;		line 725 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  sensor          2    0[BANK0 ] PTR struct .
  6676 ;;		 -> mtouch_sensor(45), 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      unsigned char 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6692 ;;Total ram usage:        2 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    5
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_Sensor_postAcquisitionProcess
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text44
  6703  011DF0                     __ptext44:
  6704                           	opt stack 0
  6705  011DF0                     _Sensor_isEnabled:
  6706                           	opt stack 21
  6707                           
  6708                           ;mtouch_sensor.c: 727: if(sensor!=(0))
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;incstack = 0
  6712  011DF0  0100               	movlb	0	; () banked
  6713  011DF2  51B5               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  6714  011DF4  11B6               	iorwf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  6715  011DF6  B4D8               	btfsc	status,2,c
  6716  011DF8  D00C               	goto	l704
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;mtouch_sensor.c: 728: return (bool)sensor->enabled;
  6720  011DFA  EE20 F008          	lfsr	2,8
  6721  011DFE  51B5               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  6722  011E00  26D9               	addwf	fsr2l,f,c
  6723  011E02  51B6               	movf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  6724  011E04  22DA               	addwfc	fsr2h,f,c
  6725  011E06  A0DF               	btfss	indf2,0,c
  6726  011E08  D002               	goto	u3920
  6727  011E0A  0E01               	movlw	1
  6728  011E0C  0012               	return	
  6729  011E0E                     u3920:
  6730  011E0E  0E00               	movlw	0
  6731                           
  6732                           ; BSR set to: 0
  6733                           
  6734                           ; BSR set to: 0
  6735  011E10  0012               	return	
  6736  011E12                     l704:
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;mtouch_sensor.c: 729: else
  6740                           ;mtouch_sensor.c: 730: return 0;
  6741                           
  6742                           ; BSR set to: 0
  6743  011E12  0E00               	movlw	0
  6744                           
  6745                           ; BSR set to: 0
  6746  011E14  0012               	return	
  6747  011E16                     __end_of_Sensor_isEnabled:
  6748                           	opt stack 0
  6749                           tosu	equ	0xFFF
  6750                           tosh	equ	0xFFE
  6751                           tosl	equ	0xFFD
  6752                           pclath	equ	0xFFA
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           intcon	equ	0xFF2
  6760                           postinc0	equ	0xFEE
  6761                           wreg	equ	0xFE8
  6762                           postdec1	equ	0xFE5
  6763                           fsr1l	equ	0xFE1
  6764                           indf2	equ	0xFDF
  6765                           postinc2	equ	0xFDE
  6766                           postdec2	equ	0xFDD
  6767                           fsr2h	equ	0xFDA
  6768                           fsr2l	equ	0xFD9
  6769                           status	equ	0xFD8
  6770                           
  6771 ;; *************** function _Sensor_RawSample_Update *****************
  6772 ;; Defined at:
  6773 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  sensor          2    7[BANK0 ] PTR struct .
  6776 ;;		 -> mtouch_sensor(45), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  result          2    9[BANK0 ] unsigned int 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6788 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6791 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6792 ;;Total ram usage:        4 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    6
  6795 ;; This function calls:
  6796 ;;		_medianFilter
  6797 ;; This function is called by:
  6798 ;;		_Sensor_postAcquisitionProcess
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text45
  6803  011838                     __ptext45:
  6804                           	opt stack 0
  6805  011838                     _Sensor_RawSample_Update:
  6806                           	opt stack 20
  6807                           
  6808                           ;mtouch_sensor.c: 544: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;incstack = 0
  6812  011838  C0BC  FFD9         	movff	Sensor_RawSample_Update@sensor,fsr2l
  6813  01183C  C0BD  FFDA         	movff	Sensor_RawSample_Update@sensor+1,fsr2h
  6814  011840  50DF               	movf	indf2,w,c
  6815  011842  EC00  F080         	call	_medianFilter
  6816  011846  C0B5  F0BE         	movff	?_medianFilter,Sensor_RawSample_Update@result
  6817  01184A  C0B6  F0BF         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  6818                           
  6819                           ;mtouch_sensor.c: 546: if (GIE == (uint8_t)1)
  6820  01184E  AEF2               	btfss	intcon,7,c	;volatile
  6821  011850  D00E               	goto	l633
  6822                           
  6823                           ;mtouch_sensor.c: 547: {
  6824                           ;mtouch_sensor.c: 548: GIE = (uint8_t)0;
  6825  011852  9EF2               	bcf	intcon,7,c	;volatile
  6826                           
  6827                           ;mtouch_sensor.c: 549: sensor->rawSample = result;
  6828  011854  0100               	movlb	0	; () banked
  6829  011856  EE20 F006          	lfsr	2,6
  6830  01185A  51BC               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  6831  01185C  26D9               	addwf	fsr2l,f,c
  6832  01185E  51BD               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  6833  011860  22DA               	addwfc	fsr2h,f,c
  6834  011862  C0BE  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  6835  011866  C0BF  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;mtouch_sensor.c: 550: GIE = (uint8_t)1;
  6839  01186A  8EF2               	bsf	intcon,7,c	;volatile
  6840                           
  6841                           ;mtouch_sensor.c: 551: }
  6842  01186C  0012               	return	
  6843  01186E                     l633:
  6844                           
  6845                           ;mtouch_sensor.c: 552: else
  6846                           ;mtouch_sensor.c: 553: {
  6847                           ;mtouch_sensor.c: 554: sensor->rawSample = result;
  6848                           
  6849                           ; BSR set to: 0
  6850  01186E  0100               	movlb	0	; () banked
  6851  011870  EE20 F006          	lfsr	2,6
  6852  011874  51BC               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  6853  011876  26D9               	addwf	fsr2l,f,c
  6854  011878  51BD               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  6855  01187A  22DA               	addwfc	fsr2h,f,c
  6856  01187C  C0BE  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  6857  011880  C0BF  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  6858  011884  0012               	return	
  6859  011886                     __end_of_Sensor_RawSample_Update:
  6860                           	opt stack 0
  6861                           tosu	equ	0xFFF
  6862                           tosh	equ	0xFFE
  6863                           tosl	equ	0xFFD
  6864                           pclath	equ	0xFFA
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postdec1	equ	0xFE5
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _medianFilter *****************
  6884 ;; Defined at:
  6885 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  sensor          1    wreg     enum E17513
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  sensor          1    6[BANK0 ] enum E17513
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  2    0[BANK0 ] unsigned int 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6901 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;Total ram usage:        7 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    5
  6906 ;; This function calls:
  6907 ;;		Nothing
  6908 ;; This function is called by:
  6909 ;;		_Sensor_RawSample_Update
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text46
  6914  010000                     __ptext46:
  6915                           	opt stack 0
  6916  010000                     _medianFilter:
  6917                           	opt stack 20
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;incstack = 0
  6921                           ;medianFilter@sensor stored from wreg
  6922  010000  0100               	movlb	0	; () banked
  6923  010002  6FBB               	movwf	medianFilter@sensor& (0+255),b
  6924                           
  6925                           ;mtouch_sensor.c: 561: static uint8_t bufferIndex[5];
  6926                           ;mtouch_sensor.c: 563: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
  6927  010004  0100               	movlb	0	; () banked
  6928  010006  51BB               	movf	medianFilter@sensor& (0+255),w,b
  6929  010008  0D02               	mullw	2
  6930  01000A  0E7E               	movlw	low _packet_sample
  6931  01000C  24F3               	addwf	prodl,w,c
  6932  01000E  6ED9               	movwf	fsr2l,c
  6933  010010  0E00               	movlw	high _packet_sample
  6934  010012  20F4               	addwfc	prodh,w,c
  6935  010014  6EDA               	movwf	fsr2h,c
  6936  010016  51BB               	movf	medianFilter@sensor& (0+255),w,b
  6937  010018  0D06               	mullw	6
  6938  01001A  0E60               	movlw	low _sensor_medianBuffer
  6939  01001C  6FB7               	movwf	??_medianFilter& (0+255),b
  6940  01001E  0E00               	movlw	high _sensor_medianBuffer
  6941  010020  6FB8               	movwf	(??_medianFilter+1)& (0+255),b
  6942  010022  50F3               	movf	prodl,w,c
  6943  010024  27B7               	addwf	??_medianFilter& (0+255),f,b
  6944  010026  50F4               	movf	prodh,w,c
  6945  010028  23B8               	addwfc	(??_medianFilter+1)& (0+255),f,b
  6946  01002A  51BB               	movf	medianFilter@sensor& (0+255),w,b
  6947  01002C  0D01               	mullw	1
  6948  01002E  0E22               	movlw	low medianFilter@bufferIndex
  6949  010030  24F3               	addwf	prodl,w,c
  6950  010032  6EE1               	movwf	fsr1l,c
  6951  010034  0E00               	movlw	high medianFilter@bufferIndex
  6952  010036  20F4               	addwfc	prodh,w,c
  6953  010038  6EE2               	movwf	fsr1h,c
  6954  01003A  CFE7 F0B9          	movff	indf1,??_medianFilter+2
  6955  01003E  0E01               	movlw	1
  6956  010040  26E7               	addwf	indf1,f,c
  6957  010042  51B9               	movf	(??_medianFilter+2)& (0+255),w,b
  6958  010044  0D02               	mullw	2
  6959  010046  50F3               	movf	prodl,w,c
  6960  010048  25B7               	addwf	??_medianFilter& (0+255),w,b
  6961  01004A  6EE1               	movwf	fsr1l,c
  6962  01004C  50F4               	movf	prodh,w,c
  6963  01004E  21B8               	addwfc	(??_medianFilter+1)& (0+255),w,b
  6964  010050  6EE2               	movwf	fsr1h,c
  6965  010052  CFDE FFE6          	movff	postinc2,postinc1
  6966  010056  CFDD FFE5          	movff	postdec2,postdec1
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;mtouch_sensor.c: 565: if(bufferIndex[sensor]>=3)
  6970  01005A  51BB               	movf	medianFilter@sensor& (0+255),w,b
  6971  01005C  0D01               	mullw	1
  6972  01005E  0E22               	movlw	low medianFilter@bufferIndex
  6973  010060  24F3               	addwf	prodl,w,c
  6974  010062  6ED9               	movwf	fsr2l,c
  6975  010064  0E00               	movlw	high medianFilter@bufferIndex
  6976  010066  20F4               	addwfc	prodh,w,c
  6977  010068  6EDA               	movwf	fsr2h,c
  6978  01006A  0E02               	movlw	2
  6979  01006C  64DF               	cpfsgt	indf2,c
  6980  01006E  D00A               	goto	l640
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;mtouch_sensor.c: 566: bufferIndex[sensor] = 0;
  6984  010070  51BB               	movf	medianFilter@sensor& (0+255),w,b
  6985  010072  0D01               	mullw	1
  6986  010074  0E22               	movlw	low medianFilter@bufferIndex
  6987  010076  24F3               	addwf	prodl,w,c
  6988  010078  6ED9               	movwf	fsr2l,c
  6989  01007A  0E00               	movlw	high medianFilter@bufferIndex
  6990  01007C  20F4               	addwfc	prodh,w,c
  6991  01007E  6EDA               	movwf	fsr2h,c
  6992  010080  0E00               	movlw	0
  6993  010082  6EDF               	movwf	indf2,c
  6994  010084                     l640:
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;mtouch_sensor.c: 568: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
  6998                           
  6999                           ; BSR set to: 0
  7000  010084  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7001  010086  0D06               	mullw	6
  7002  010088  0E02               	movlw	2
  7003  01008A  26F3               	addwf	prodl,f,c
  7004  01008C  0E00               	movlw	0
  7005  01008E  22F4               	addwfc	prodh,f,c
  7006  010090  0E60               	movlw	low _sensor_medianBuffer
  7007  010092  24F3               	addwf	prodl,w,c
  7008  010094  6ED9               	movwf	fsr2l,c
  7009  010096  0E00               	movlw	high _sensor_medianBuffer
  7010  010098  20F4               	addwfc	prodh,w,c
  7011  01009A  6EDA               	movwf	fsr2h,c
  7012  01009C  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7013  01009E  0D06               	mullw	6
  7014  0100A0  0E60               	movlw	low _sensor_medianBuffer
  7015  0100A2  24F3               	addwf	prodl,w,c
  7016  0100A4  6EE1               	movwf	fsr1l,c
  7017  0100A6  0E00               	movlw	high _sensor_medianBuffer
  7018  0100A8  20F4               	addwfc	prodh,w,c
  7019  0100AA  6EE2               	movwf	fsr1h,c
  7020  0100AC  50DE               	movf	postinc2,w,c
  7021  0100AE  5CE6               	subwf	postinc1,w,c
  7022  0100B0  50DE               	movf	postinc2,w,c
  7023  0100B2  58E6               	subwfb	postinc1,w,c
  7024  0100B4  A0D8               	btfss	status,0,c
  7025  0100B6  D067               	goto	l641
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;mtouch_sensor.c: 569: {
  7029                           ;mtouch_sensor.c: 570: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  7030  0100B8  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7031  0100BA  0D06               	mullw	6
  7032  0100BC  0E04               	movlw	4
  7033  0100BE  26F3               	addwf	prodl,f,c
  7034  0100C0  0E00               	movlw	0
  7035  0100C2  22F4               	addwfc	prodh,f,c
  7036  0100C4  0E60               	movlw	low _sensor_medianBuffer
  7037  0100C6  24F3               	addwf	prodl,w,c
  7038  0100C8  6ED9               	movwf	fsr2l,c
  7039  0100CA  0E00               	movlw	high _sensor_medianBuffer
  7040  0100CC  20F4               	addwfc	prodh,w,c
  7041  0100CE  6EDA               	movwf	fsr2h,c
  7042  0100D0  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7043  0100D2  0D06               	mullw	6
  7044  0100D4  0E02               	movlw	2
  7045  0100D6  26F3               	addwf	prodl,f,c
  7046  0100D8  0E00               	movlw	0
  7047  0100DA  22F4               	addwfc	prodh,f,c
  7048  0100DC  0E60               	movlw	low _sensor_medianBuffer
  7049  0100DE  24F3               	addwf	prodl,w,c
  7050  0100E0  6EE1               	movwf	fsr1l,c
  7051  0100E2  0E00               	movlw	high _sensor_medianBuffer
  7052  0100E4  20F4               	addwfc	prodh,w,c
  7053  0100E6  6EE2               	movwf	fsr1h,c
  7054  0100E8  50DE               	movf	postinc2,w,c
  7055  0100EA  5CE6               	subwf	postinc1,w,c
  7056  0100EC  50DE               	movf	postinc2,w,c
  7057  0100EE  58E6               	subwfb	postinc1,w,c
  7058  0100F0  A0D8               	btfss	status,0,c
  7059  0100F2  D011               	goto	l642
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;mtouch_sensor.c: 571: return sensor_medianBuffer[sensor][1];
  7063  0100F4  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7064  0100F6  0D06               	mullw	6
  7065  0100F8  0E02               	movlw	2
  7066  0100FA  26F3               	addwf	prodl,f,c
  7067  0100FC  0E00               	movlw	0
  7068  0100FE  22F4               	addwfc	prodh,f,c
  7069  010100  0E60               	movlw	low _sensor_medianBuffer
  7070  010102  24F3               	addwf	prodl,w,c
  7071  010104  6ED9               	movwf	fsr2l,c
  7072  010106  0E00               	movlw	high _sensor_medianBuffer
  7073  010108  20F4               	addwfc	prodh,w,c
  7074  01010A  6EDA               	movwf	fsr2h,c
  7075  01010C  CFDE F0B5          	movff	postinc2,?_medianFilter
  7076  010110  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7077                           
  7078                           ; BSR set to: 0
  7079                           
  7080                           ; BSR set to: 0
  7081  010114  0012               	return	
  7082  010116                     l642:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;mtouch_sensor.c: 572: else
  7086                           ;mtouch_sensor.c: 573: {
  7087                           ;mtouch_sensor.c: 574: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  7088                           
  7089                           ; BSR set to: 0
  7090  010116  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7091  010118  0D06               	mullw	6
  7092  01011A  0E04               	movlw	4
  7093  01011C  26F3               	addwf	prodl,f,c
  7094  01011E  0E00               	movlw	0
  7095  010120  22F4               	addwfc	prodh,f,c
  7096  010122  0E60               	movlw	low _sensor_medianBuffer
  7097  010124  24F3               	addwf	prodl,w,c
  7098  010126  6ED9               	movwf	fsr2l,c
  7099  010128  0E00               	movlw	high _sensor_medianBuffer
  7100  01012A  20F4               	addwfc	prodh,w,c
  7101  01012C  6EDA               	movwf	fsr2h,c
  7102  01012E  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7103  010130  0D06               	mullw	6
  7104  010132  0E60               	movlw	low _sensor_medianBuffer
  7105  010134  24F3               	addwf	prodl,w,c
  7106  010136  6EE1               	movwf	fsr1l,c
  7107  010138  0E00               	movlw	high _sensor_medianBuffer
  7108  01013A  20F4               	addwfc	prodh,w,c
  7109  01013C  6EE2               	movwf	fsr1h,c
  7110  01013E  50DE               	movf	postinc2,w,c
  7111  010140  5CE6               	subwf	postinc1,w,c
  7112  010142  50DE               	movf	postinc2,w,c
  7113  010144  58E6               	subwfb	postinc1,w,c
  7114  010146  A0D8               	btfss	status,0,c
  7115  010148  D011               	goto	l645
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;mtouch_sensor.c: 575: return sensor_medianBuffer[sensor][2];
  7119  01014A  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7120  01014C  0D06               	mullw	6
  7121  01014E  0E04               	movlw	4
  7122  010150  26F3               	addwf	prodl,f,c
  7123  010152  0E00               	movlw	0
  7124  010154  22F4               	addwfc	prodh,f,c
  7125  010156  0E60               	movlw	low _sensor_medianBuffer
  7126  010158  24F3               	addwf	prodl,w,c
  7127  01015A  6ED9               	movwf	fsr2l,c
  7128  01015C  0E00               	movlw	high _sensor_medianBuffer
  7129  01015E  20F4               	addwfc	prodh,w,c
  7130  010160  6EDA               	movwf	fsr2h,c
  7131  010162  CFDE F0B5          	movff	postinc2,?_medianFilter
  7132  010166  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7133                           
  7134                           ; BSR set to: 0
  7135                           
  7136                           ; BSR set to: 0
  7137  01016A  0012               	return	
  7138  01016C                     l645:
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;mtouch_sensor.c: 576: else
  7142                           ;mtouch_sensor.c: 577: return sensor_medianBuffer[sensor][0];
  7143                           
  7144                           ; BSR set to: 0
  7145  01016C  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7146  01016E  0D06               	mullw	6
  7147  010170  0E60               	movlw	low _sensor_medianBuffer
  7148  010172  24F3               	addwf	prodl,w,c
  7149  010174  6ED9               	movwf	fsr2l,c
  7150  010176  0E00               	movlw	high _sensor_medianBuffer
  7151  010178  20F4               	addwfc	prodh,w,c
  7152  01017A  6EDA               	movwf	fsr2h,c
  7153  01017C  CFDE F0B5          	movff	postinc2,?_medianFilter
  7154  010180  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;mtouch_sensor.c: 578: }
  7158                           ;mtouch_sensor.c: 580: }
  7159                           
  7160                           ; BSR set to: 0
  7161                           
  7162                           ; BSR set to: 0
  7163  010184  0012               	return	
  7164  010186                     l641:
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;mtouch_sensor.c: 581: else
  7168                           ;mtouch_sensor.c: 582: {
  7169                           ;mtouch_sensor.c: 583: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  7170                           
  7171                           ; BSR set to: 0
  7172  010186  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7173  010188  0D06               	mullw	6
  7174  01018A  0E04               	movlw	4
  7175  01018C  26F3               	addwf	prodl,f,c
  7176  01018E  0E00               	movlw	0
  7177  010190  22F4               	addwfc	prodh,f,c
  7178  010192  0E60               	movlw	low _sensor_medianBuffer
  7179  010194  24F3               	addwf	prodl,w,c
  7180  010196  6ED9               	movwf	fsr2l,c
  7181  010198  0E00               	movlw	high _sensor_medianBuffer
  7182  01019A  20F4               	addwfc	prodh,w,c
  7183  01019C  6EDA               	movwf	fsr2h,c
  7184  01019E  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7185  0101A0  0D06               	mullw	6
  7186  0101A2  0E60               	movlw	low _sensor_medianBuffer
  7187  0101A4  24F3               	addwf	prodl,w,c
  7188  0101A6  6EE1               	movwf	fsr1l,c
  7189  0101A8  0E00               	movlw	high _sensor_medianBuffer
  7190  0101AA  20F4               	addwfc	prodh,w,c
  7191  0101AC  6EE2               	movwf	fsr1h,c
  7192  0101AE  50DE               	movf	postinc2,w,c
  7193  0101B0  5CE6               	subwf	postinc1,w,c
  7194  0101B2  50DE               	movf	postinc2,w,c
  7195  0101B4  58E6               	subwfb	postinc1,w,c
  7196  0101B6  A0D8               	btfss	status,0,c
  7197  0101B8  D00D               	goto	l648
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;mtouch_sensor.c: 584: return sensor_medianBuffer[sensor][0];
  7201  0101BA  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7202  0101BC  0D06               	mullw	6
  7203  0101BE  0E60               	movlw	low _sensor_medianBuffer
  7204  0101C0  24F3               	addwf	prodl,w,c
  7205  0101C2  6ED9               	movwf	fsr2l,c
  7206  0101C4  0E00               	movlw	high _sensor_medianBuffer
  7207  0101C6  20F4               	addwfc	prodh,w,c
  7208  0101C8  6EDA               	movwf	fsr2h,c
  7209  0101CA  CFDE F0B5          	movff	postinc2,?_medianFilter
  7210  0101CE  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7211                           
  7212                           ; BSR set to: 0
  7213                           
  7214                           ; BSR set to: 0
  7215  0101D2  0012               	return	
  7216  0101D4                     l648:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;mtouch_sensor.c: 585: else
  7220                           ;mtouch_sensor.c: 586: {
  7221                           ;mtouch_sensor.c: 587: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  7222                           
  7223                           ; BSR set to: 0
  7224  0101D4  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7225  0101D6  0D06               	mullw	6
  7226  0101D8  0E04               	movlw	4
  7227  0101DA  26F3               	addwf	prodl,f,c
  7228  0101DC  0E00               	movlw	0
  7229  0101DE  22F4               	addwfc	prodh,f,c
  7230  0101E0  0E60               	movlw	low _sensor_medianBuffer
  7231  0101E2  24F3               	addwf	prodl,w,c
  7232  0101E4  6ED9               	movwf	fsr2l,c
  7233  0101E6  0E00               	movlw	high _sensor_medianBuffer
  7234  0101E8  20F4               	addwfc	prodh,w,c
  7235  0101EA  6EDA               	movwf	fsr2h,c
  7236  0101EC  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7237  0101EE  0D06               	mullw	6
  7238  0101F0  0E02               	movlw	2
  7239  0101F2  26F3               	addwf	prodl,f,c
  7240  0101F4  0E00               	movlw	0
  7241  0101F6  22F4               	addwfc	prodh,f,c
  7242  0101F8  0E60               	movlw	low _sensor_medianBuffer
  7243  0101FA  24F3               	addwf	prodl,w,c
  7244  0101FC  6EE1               	movwf	fsr1l,c
  7245  0101FE  0E00               	movlw	high _sensor_medianBuffer
  7246  010200  20F4               	addwfc	prodh,w,c
  7247  010202  6EE2               	movwf	fsr1h,c
  7248  010204  50DE               	movf	postinc2,w,c
  7249  010206  5CE6               	subwf	postinc1,w,c
  7250  010208  50DE               	movf	postinc2,w,c
  7251  01020A  58E6               	subwfb	postinc1,w,c
  7252  01020C  A0D8               	btfss	status,0,c
  7253  01020E  D011               	goto	l650
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;mtouch_sensor.c: 588: return sensor_medianBuffer[sensor][2];
  7257  010210  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7258  010212  0D06               	mullw	6
  7259  010214  0E04               	movlw	4
  7260  010216  26F3               	addwf	prodl,f,c
  7261  010218  0E00               	movlw	0
  7262  01021A  22F4               	addwfc	prodh,f,c
  7263  01021C  0E60               	movlw	low _sensor_medianBuffer
  7264  01021E  24F3               	addwf	prodl,w,c
  7265  010220  6ED9               	movwf	fsr2l,c
  7266  010222  0E00               	movlw	high _sensor_medianBuffer
  7267  010224  20F4               	addwfc	prodh,w,c
  7268  010226  6EDA               	movwf	fsr2h,c
  7269  010228  CFDE F0B5          	movff	postinc2,?_medianFilter
  7270  01022C  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275  010230  0012               	return	
  7276  010232                     l650:
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;mtouch_sensor.c: 589: else
  7280                           ;mtouch_sensor.c: 590: return sensor_medianBuffer[sensor][1];
  7281                           
  7282                           ; BSR set to: 0
  7283  010232  51BB               	movf	medianFilter@sensor& (0+255),w,b
  7284  010234  0D06               	mullw	6
  7285  010236  0E02               	movlw	2
  7286  010238  26F3               	addwf	prodl,f,c
  7287  01023A  0E00               	movlw	0
  7288  01023C  22F4               	addwfc	prodh,f,c
  7289  01023E  0E60               	movlw	low _sensor_medianBuffer
  7290  010240  24F3               	addwf	prodl,w,c
  7291  010242  6ED9               	movwf	fsr2l,c
  7292  010244  0E00               	movlw	high _sensor_medianBuffer
  7293  010246  20F4               	addwfc	prodh,w,c
  7294  010248  6EDA               	movwf	fsr2h,c
  7295  01024A  CFDE F0B5          	movff	postinc2,?_medianFilter
  7296  01024E  CFDD F0B6          	movff	postdec2,?_medianFilter+1
  7297                           
  7298                           ; BSR set to: 0
  7299                           
  7300                           ; BSR set to: 0
  7301                           
  7302                           ; BSR set to: 0
  7303  010252  0012               	return	
  7304  010254                     __end_of_medianFilter:
  7305                           	opt stack 0
  7306                           tosu	equ	0xFFF
  7307                           tosh	equ	0xFFE
  7308                           tosl	equ	0xFFD
  7309                           pclath	equ	0xFFA
  7310                           tblptru	equ	0xFF8
  7311                           tblptrh	equ	0xFF7
  7312                           tblptrl	equ	0xFF6
  7313                           tablat	equ	0xFF5
  7314                           prodh	equ	0xFF4
  7315                           prodl	equ	0xFF3
  7316                           intcon	equ	0xFF2
  7317                           postinc0	equ	0xFEE
  7318                           wreg	equ	0xFE8
  7319                           indf1	equ	0xFE7
  7320                           postinc1	equ	0xFE6
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           fsr2h	equ	0xFDA
  7328                           fsr2l	equ	0xFD9
  7329                           status	equ	0xFD8
  7330                           
  7331 ;; *************** function _Sensor_DefaultCallback *****************
  7332 ;; Defined at:
  7333 ;;		line 691 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  sensor          1    wreg     enum E17513
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;  sensor          1    0[COMRAM] enum E17513
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      void 
  7340 ;; Registers used:
  7341 ;;		wreg
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    5
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_Sensor_postAcquisitionProcess
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text47
  7362  01203C                     __ptext47:
  7363                           	opt stack 0
  7364  01203C                     _Sensor_DefaultCallback:
  7365                           	opt stack 21
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;incstack = 0
  7369  01203C  0012               	return		;funcret
  7370  01203E                     __end_of_Sensor_DefaultCallback:
  7371                           	opt stack 0
  7372                           tosu	equ	0xFFF
  7373                           tosh	equ	0xFFE
  7374                           tosl	equ	0xFFD
  7375                           pclath	equ	0xFFA
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           intcon	equ	0xFF2
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           indf1	equ	0xFE7
  7386                           postinc1	equ	0xFE6
  7387                           postdec1	equ	0xFE5
  7388                           fsr1h	equ	0xFE2
  7389                           fsr1l	equ	0xFE1
  7390                           indf2	equ	0xFDF
  7391                           postinc2	equ	0xFDE
  7392                           postdec2	equ	0xFDD
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
  7398 ;; Defined at:
  7399 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;		None
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  maxVariance     2   13[BANK0 ] unsigned int 
  7404 ;;  variance        2   11[BANK0 ] unsigned int 
  7405 ;;  frequencyInd    1   17[BANK0 ] unsigned char 
  7406 ;;  sensor          1   16[BANK0 ] enum E17513
  7407 ;;  selectedFreq    1   15[BANK0 ] unsigned char 
  7408 ;;  newfrequency    1   10[BANK0 ] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  1    wreg      void 
  7411 ;; Registers used:
  7412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7419 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7420 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;Total ram usage:       14 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    6
  7425 ;; This function calls:
  7426 ;;		_abs
  7427 ;; This function is called by:
  7428 ;;		_Sensor_FrequencyHopping
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text48
  7433  01041A                     __ptext48:
  7434                           	opt stack 0
  7435  01041A                     _Sensor_FrequencyHopping_Autotune_Process:
  7436                           	opt stack 21
  7437                           
  7438                           ;mtouch_sensor.c: 617: enum mtouch_sensor_names sensor;
  7439                           ;mtouch_sensor.c: 618: uint8_t frequencyIndex;
  7440                           ;mtouch_sensor.c: 619: uint8_t newfrequencyFound,selectedFrequency;
  7441                           ;mtouch_sensor.c: 620: uint16_t variance,maxVariance;
  7442                           ;mtouch_sensor.c: 623: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
  7443                           ;mtouch_sensor.c: 625: maxVariance = 0;
  7444                           
  7445                           ;incstack = 0
  7446  01041A  0E00               	movlw	0
  7447  01041C  0100               	movlb	0	; () banked
  7448  01041E  6FC3               	movwf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),b
  7449  010420  0E00               	movlw	0
  7450  010422  6FC2               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),b
  7451                           
  7452                           ;mtouch_sensor.c: 627: for(sensor = 0; sensor < 5; sensor++)
  7453  010424  0E00               	movlw	0
  7454  010426  6FC5               	movwf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  7455  010428                     l4127:
  7456                           
  7457                           ; BSR set to: 0
  7458  010428  0E04               	movlw	4
  7459  01042A  65C5               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  7460  01042C  D001               	goto	l661
  7461  01042E  D03F               	goto	u4170
  7462  010430                     l661:
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;mtouch_sensor.c: 628: {
  7466                           ;mtouch_sensor.c: 629: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
  7467                           
  7468                           ; BSR set to: 0
  7469  010430  51C5               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  7470  010432  0D02               	mullw	2
  7471  010434  0E7E               	movlw	low _packet_sample
  7472  010436  24F3               	addwf	prodl,w,c
  7473  010438  6ED9               	movwf	fsr2l,c
  7474  01043A  0E00               	movlw	high _packet_sample
  7475  01043C  20F4               	addwfc	prodh,w,c
  7476  01043E  6EDA               	movwf	fsr2h,c
  7477  010440  CFDE F0B9          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process
  7478  010444  CFDD F0BA          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+1
  7479  010448  51C5               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  7480  01044A  0D06               	mullw	6
  7481  01044C  0E60               	movlw	low _sensor_medianBuffer
  7482  01044E  6FBB               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),b
  7483  010450  0E00               	movlw	high _sensor_medianBuffer
  7484  010452  6FBC               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),b
  7485  010454  50F3               	movf	prodl,w,c
  7486  010456  27BB               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),f,b
  7487  010458  50F4               	movf	prodh,w,c
  7488  01045A  23BC               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),f,b
  7489  01045C  502B               	movf	_freq_index,w,c
  7490  01045E  0D02               	mullw	2
  7491  010460  50F3               	movf	prodl,w,c
  7492  010462  25BB               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),w,b
  7493  010464  6ED9               	movwf	fsr2l,c
  7494  010466  50F4               	movf	prodh,w,c
  7495  010468  21BC               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),w,b
  7496  01046A  6EDA               	movwf	fsr2h,c
  7497  01046C  CFDE F0BD          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process+4
  7498  010470  CFDD F0BE          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+5
  7499  010474  1FBD               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  7500  010476  1FBE               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  7501  010478  4BBD               	infsnz	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  7502  01047A  2BBE               	incf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  7503  01047C  51B9               	movf	??_Sensor_FrequencyHopping_Autotune_Process& (0+255),w,b
  7504  01047E  25BD               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),w,b
  7505  010480  6FB5               	movwf	abs@a& (0+255),b
  7506  010482  51BA               	movf	(??_Sensor_FrequencyHopping_Autotune_Process+1)& (0+255),w,b
  7507  010484  21BE               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),w,b
  7508  010486  6FB6               	movwf	(abs@a+1)& (0+255),b
  7509  010488  EC7F  F08E         	call	_abs	;wreg free
  7510  01048C  C0B5  F0C0         	movff	?_abs,Sensor_FrequencyHopping_Autotune_Process@variance
  7511  010490  C0B6  F0C1         	movff	?_abs+1,Sensor_FrequencyHopping_Autotune_Process@variance+1
  7512                           
  7513                           ;mtouch_sensor.c: 630: if(variance > maxVariance)
  7514  010494  0100               	movlb	0	; () banked
  7515  010496  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@variance& (0+255),w,b
  7516  010498  5DC2               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  7517  01049A  51C1               	movf	(Sensor_FrequencyHopping_Autotune_Process@variance+1)& (0+255),w,b
  7518  01049C  59C3               	subwfb	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  7519  01049E  B0D8               	btfsc	status,0,c
  7520  0104A0  D004               	goto	l663
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;mtouch_sensor.c: 631: maxVariance = variance;
  7524  0104A2  C0C0  F0C2         	movff	Sensor_FrequencyHopping_Autotune_Process@variance,Sensor_FrequencyHopping_Autotun
      +                          e_Process@maxVariance
  7525  0104A6  C0C1  F0C3         	movff	Sensor_FrequencyHopping_Autotune_Process@variance+1,Sensor_FrequencyHopping_Autot
      +                          une_Process@maxVariance+1
  7526  0104AA                     l663:
  7527                           
  7528                           ; BSR set to: 0
  7529                           
  7530                           ; BSR set to: 0
  7531  0104AA  2BC5               	incf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),f,b
  7532  0104AC  D7BD               	goto	l4127
  7533  0104AE                     u4170:
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;mtouch_sensor.c: 632: }
  7537                           ;mtouch_sensor.c: 634: if(maxVariance > (mtouch_sensor_packetsample_t)100)
  7538                           
  7539                           ; BSR set to: 0
  7540  0104AE  51C3               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  7541  0104B0  E104               	bnz	u4180
  7542  0104B2  0E65               	movlw	101
  7543  0104B4  5DC2               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  7544  0104B6  A0D8               	btfss	status,0,c
  7545  0104B8  D05A               	goto	l664
  7546  0104BA                     u4180:
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;mtouch_sensor.c: 635: {
  7550                           ;mtouch_sensor.c: 636: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
  7551  0104BA  502B               	movf	_freq_index,w,c
  7552  0104BC  0D01               	mullw	1
  7553  0104BE  0E27               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7554  0104C0  24F3               	addwf	prodl,w,c
  7555  0104C2  6ED9               	movwf	fsr2l,c
  7556  0104C4  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7557  0104C6  20F4               	addwfc	prodh,w,c
  7558  0104C8  6EDA               	movwf	fsr2h,c
  7559  0104CA  2ADF               	incf	indf2,f,c
  7560  0104CC  0E05               	movlw	5
  7561  0104CE  64DF               	cpfsgt	indf2,c
  7562  0104D0  0012               	return	
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;mtouch_sensor.c: 637: {
  7566                           ;mtouch_sensor.c: 638: newfrequencyFound = 0;
  7567  0104D2  0E00               	movlw	0
  7568  0104D4  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;mtouch_sensor.c: 639: selectedFrequency = freq_hop[freq_index];
  7572  0104D6  502B               	movf	_freq_index,w,c
  7573  0104D8  0D01               	mullw	1
  7574  0104DA  0E3C               	movlw	low _freq_hop
  7575  0104DC  24F3               	addwf	prodl,w,c
  7576  0104DE  6ED9               	movwf	fsr2l,c
  7577  0104E0  0E00               	movlw	high _freq_hop
  7578  0104E2  20F4               	addwfc	prodh,w,c
  7579  0104E4  6EDA               	movwf	fsr2h,c
  7580  0104E6  50DF               	movf	indf2,w,c
  7581  0104E8  6FC4               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  7582  0104EA                     
  7583                           ; BSR set to: 0
  7584                           ;mtouch_sensor.c: 641: {
  7585                           ;mtouch_sensor.c: 642: if(selectedFrequency>(uint8_t)((mtouch_sensor_time_t)0 << (uint8_
      +                          t)3))
  7586                           
  7587                           ; BSR set to: 0
  7588  0104EA  51C4               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  7589  0104EC  B4D8               	btfsc	status,2,c
  7590  0104EE  D002               	goto	l667
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;mtouch_sensor.c: 643: selectedFrequency--;
  7594  0104F0  07C4               	decf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),f,b
  7595  0104F2  D002               	goto	l668
  7596  0104F4                     l667:
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;mtouch_sensor.c: 644: else
  7600                           ;mtouch_sensor.c: 645: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)3);
  7601                           
  7602                           ; BSR set to: 0
  7603  0104F4  0E78               	movlw	120
  7604  0104F6  6FC4               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  7605  0104F8                     l668:
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;mtouch_sensor.c: 646: newfrequencyFound = 1;
  7609  0104F8  0E01               	movlw	1
  7610  0104FA  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  7611                           
  7612                           ;mtouch_sensor.c: 648: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  7613  0104FC  0E00               	movlw	0
  7614  0104FE  6FC6               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  7615  010500                     l4155:
  7616                           
  7617                           ; BSR set to: 0
  7618  010500  0E02               	movlw	2
  7619  010502  65C6               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  7620  010504  D001               	goto	l669
  7621  010506  D014               	goto	u4240
  7622  010508                     l669:
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;mtouch_sensor.c: 649: {
  7626                           ;mtouch_sensor.c: 650: if(frequencyIndex == freq_index)
  7627                           
  7628                           ; BSR set to: 0
  7629  010508  502B               	movf	_freq_index,w,c
  7630  01050A  19C6               	xorwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  7631  01050C  B4D8               	btfsc	status,2,c
  7632  01050E  D00E               	goto	l673
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;mtouch_sensor.c: 654: else if(selectedFrequency==freq_hop[frequencyIndex])
  7636                           
  7637                           ; BSR set to: 0
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;mtouch_sensor.c: 651: {
  7641                           ;mtouch_sensor.c: 653: }
  7642  010510  51C6               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  7643  010512  0D01               	mullw	1
  7644  010514  0E3C               	movlw	low _freq_hop
  7645  010516  24F3               	addwf	prodl,w,c
  7646  010518  6ED9               	movwf	fsr2l,c
  7647  01051A  0E00               	movlw	high _freq_hop
  7648  01051C  20F4               	addwfc	prodh,w,c
  7649  01051E  6EDA               	movwf	fsr2h,c
  7650  010520  51C4               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  7651  010522  18DE               	xorwf	postinc2,w,c
  7652  010524  A4D8               	btfss	status,2,c
  7653  010526  D002               	goto	l673
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;mtouch_sensor.c: 655: {
  7657                           ;mtouch_sensor.c: 656: newfrequencyFound = 0;
  7658  010528  0E00               	movlw	0
  7659  01052A  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  7660  01052C                     l673:
  7661                           
  7662                           ; BSR set to: 0
  7663                           
  7664                           ; BSR set to: 0
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ;mtouch_sensor.c: 658: else
  7669                           ;mtouch_sensor.c: 659: {
  7670                           
  7671                           ; BSR set to: 0
  7672  01052C  2BC6               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  7673  01052E  D7E8               	goto	l4155
  7674  010530                     u4240:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;mtouch_sensor.c: 661: }
  7678                           ;mtouch_sensor.c: 662: }
  7679                           ;mtouch_sensor.c: 664: }while(!newfrequencyFound);
  7680                           
  7681                           ; BSR set to: 0
  7682  010530  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),w,b
  7683  010532  B4D8               	btfsc	status,2,c
  7684  010534  D7DA               	goto	l666
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;mtouch_sensor.c: 666: freq_hop[freq_index] = selectedFrequency;
  7688                           
  7689                           ; BSR set to: 0
  7690  010536  502B               	movf	_freq_index,w,c
  7691  010538  0D01               	mullw	1
  7692  01053A  0E3C               	movlw	low _freq_hop
  7693  01053C  24F3               	addwf	prodl,w,c
  7694  01053E  6ED9               	movwf	fsr2l,c
  7695  010540  0E00               	movlw	high _freq_hop
  7696  010542  20F4               	addwfc	prodh,w,c
  7697  010544  6EDA               	movwf	fsr2h,c
  7698  010546  C0C4  FFDF         	movff	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,indf2
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;mtouch_sensor.c: 668: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  7702  01054A  0E00               	movlw	0
  7703  01054C  6FC6               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  7704  01054E                     l4177:
  7705                           
  7706                           ; BSR set to: 0
  7707  01054E  0E02               	movlw	2
  7708  010550  65C6               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  7709  010552  D001               	goto	l676
  7710  010554  0012               	return	
  7711  010556                     l676:
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;mtouch_sensor.c: 669: {
  7715                           ;mtouch_sensor.c: 670: varianceOverLimitCounter[frequencyIndex] = 0;
  7716                           
  7717                           ; BSR set to: 0
  7718  010556  51C6               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  7719  010558  0D01               	mullw	1
  7720  01055A  0E27               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7721  01055C  24F3               	addwf	prodl,w,c
  7722  01055E  6ED9               	movwf	fsr2l,c
  7723  010560  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7724  010562  20F4               	addwfc	prodh,w,c
  7725  010564  6EDA               	movwf	fsr2h,c
  7726  010566  0E00               	movlw	0
  7727  010568  6EDF               	movwf	indf2,c
  7728                           
  7729                           ; BSR set to: 0
  7730  01056A  2BC6               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  7731  01056C  D7F0               	goto	l4177
  7732  01056E                     l664:
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;mtouch_sensor.c: 674: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
  7736                           
  7737                           ; BSR set to: 0
  7738  01056E  51C3               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  7739  010570  E119               	bnz	l682
  7740  010572  0E32               	movlw	50
  7741  010574  5DC2               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  7742  010576  B0D8               	btfsc	status,0,c
  7743  010578  0012               	return	
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;mtouch_sensor.c: 675: {
  7747                           ;mtouch_sensor.c: 677: if(varianceOverLimitCounter[freq_index] > 0)
  7748  01057A  502B               	movf	_freq_index,w,c
  7749  01057C  0D01               	mullw	1
  7750  01057E  0E27               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7751  010580  24F3               	addwf	prodl,w,c
  7752  010582  6ED9               	movwf	fsr2l,c
  7753  010584  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7754  010586  20F4               	addwfc	prodh,w,c
  7755  010588  6EDA               	movwf	fsr2h,c
  7756  01058A  50DF               	movf	indf2,w,c
  7757  01058C  B4D8               	btfsc	status,2,c
  7758  01058E  0012               	return	
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;mtouch_sensor.c: 678: varianceOverLimitCounter[freq_index]--;
  7762  010590  502B               	movf	_freq_index,w,c
  7763  010592  0D01               	mullw	1
  7764  010594  0E27               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7765  010596  24F3               	addwf	prodl,w,c
  7766  010598  6ED9               	movwf	fsr2l,c
  7767  01059A  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  7768  01059C  20F4               	addwfc	prodh,w,c
  7769  01059E  6EDA               	movwf	fsr2h,c
  7770  0105A0  06DF               	decf	indf2,f,c
  7771                           
  7772                           ; BSR set to: 0
  7773                           
  7774                           ;mtouch_sensor.c: 680: else
  7775                           ;mtouch_sensor.c: 681: {
  7776                           
  7777                           ; BSR set to: 0
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;mtouch_sensor.c: 679: }
  7781  0105A2  0012               	return	
  7782  0105A4                     l682:
  7783                           
  7784                           ; BSR set to: 0
  7785  0105A4  0012               	return		;funcret
  7786  0105A6                     __end_of_Sensor_FrequencyHopping_Autotune_Process:
  7787                           	opt stack 0
  7788                           tosu	equ	0xFFF
  7789                           tosh	equ	0xFFE
  7790                           tosl	equ	0xFFD
  7791                           pclath	equ	0xFFA
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           postinc0	equ	0xFEE
  7800                           wreg	equ	0xFE8
  7801                           indf1	equ	0xFE7
  7802                           postinc1	equ	0xFE6
  7803                           postdec1	equ	0xFE5
  7804                           fsr1h	equ	0xFE2
  7805                           fsr1l	equ	0xFE1
  7806                           indf2	equ	0xFDF
  7807                           postinc2	equ	0xFDE
  7808                           postdec2	equ	0xFDD
  7809                           fsr2h	equ	0xFDA
  7810                           fsr2l	equ	0xFD9
  7811                           status	equ	0xFD8
  7812                           
  7813 ;; *************** function _abs *****************
  7814 ;; Defined at:
  7815 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  a               2    0[BANK0 ] int 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;		None
  7820 ;; Return value:  Size  Location     Type
  7821 ;;                  2    0[BANK0 ] int 
  7822 ;; Registers used:
  7823 ;;		wreg, status,2, status,0
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7831 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7832 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7833 ;;Total ram usage:        4 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:    5
  7836 ;; This function calls:
  7837 ;;		Nothing
  7838 ;; This function is called by:
  7839 ;;		_Sensor_postAcquisitionProcess
  7840 ;;		_Sensor_FrequencyHopping_Autotune_Process
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text49
  7845  011CFE                     __ptext49:
  7846                           	opt stack 0
  7847  011CFE                     _abs:
  7848                           	opt stack 21
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;incstack = 0
  7852  011CFE  0100               	movlb	0	; () banked
  7853  011D00  AFB6               	btfss	(abs@a+1)& (0+255),7,b
  7854  011D02  D00D               	goto	l1017
  7855                           
  7856                           ; BSR set to: 0
  7857  011D04  C0B5  F0B7         	movff	abs@a,??_abs
  7858  011D08  C0B6  F0B8         	movff	abs@a+1,??_abs+1
  7859  011D0C  1FB7               	comf	??_abs& (0+255),f,b
  7860  011D0E  1FB8               	comf	(??_abs+1)& (0+255),f,b
  7861  011D10  4BB7               	infsnz	??_abs& (0+255),f,b
  7862  011D12  2BB8               	incf	(??_abs+1)& (0+255),f,b
  7863  011D14  C0B7  F0B5         	movff	??_abs,?_abs
  7864  011D18  C0B8  F0B6         	movff	??_abs+1,?_abs+1
  7865  011D1C  0012               	return	
  7866  011D1E                     l1017:
  7867                           
  7868                           ; BSR set to: 0
  7869  011D1E  C0B5  F0B5         	movff	abs@a,?_abs
  7870  011D22  C0B6  F0B6         	movff	abs@a+1,?_abs+1
  7871                           
  7872                           ; BSR set to: 0
  7873  011D26  0012               	return		;funcret
  7874  011D28                     __end_of_abs:
  7875                           	opt stack 0
  7876                           tosu	equ	0xFFF
  7877                           tosh	equ	0xFFE
  7878                           tosl	equ	0xFFD
  7879                           pclath	equ	0xFFA
  7880                           tblptru	equ	0xFF8
  7881                           tblptrh	equ	0xFF7
  7882                           tblptrl	equ	0xFF6
  7883                           tablat	equ	0xFF5
  7884                           prodh	equ	0xFF4
  7885                           prodl	equ	0xFF3
  7886                           intcon	equ	0xFF2
  7887                           postinc0	equ	0xFEE
  7888                           wreg	equ	0xFE8
  7889                           indf1	equ	0xFE7
  7890                           postinc1	equ	0xFE6
  7891                           postdec1	equ	0xFE5
  7892                           fsr1h	equ	0xFE2
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  7902 ;; Defined at:
  7903 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;		None
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;		None
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      unsigned char 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7921 ;;Total ram usage:        0 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    5
  7924 ;; This function calls:
  7925 ;;		Nothing
  7926 ;; This function is called by:
  7927 ;;		_MTOUCH_Sensor_SampleAll
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text50
  7932  012038                     __ptext50:
  7933                           	opt stack 0
  7934  012038                     _MTOUCH_Sensor_isSampling:
  7935                           	opt stack 23
  7936                           
  7937                           ;mtouch_sensor.c: 840: return sampling_flag;
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;incstack = 0
  7941  012038  502D               	movf	_sampling_flag,w,c
  7942  01203A  0012               	return	
  7943  01203C                     __end_of_MTOUCH_Sensor_isSampling:
  7944                           	opt stack 0
  7945                           tosu	equ	0xFFF
  7946                           tosh	equ	0xFFE
  7947                           tosl	equ	0xFFD
  7948                           pclath	equ	0xFFA
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           prodh	equ	0xFF4
  7954                           prodl	equ	0xFF3
  7955                           intcon	equ	0xFF2
  7956                           postinc0	equ	0xFEE
  7957                           wreg	equ	0xFE8
  7958                           indf1	equ	0xFE7
  7959                           postinc1	equ	0xFE6
  7960                           postdec1	equ	0xFE5
  7961                           fsr1h	equ	0xFE2
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7971 ;; Defined at:
  7972 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  button          1   20[BANK0 ] enum E17454
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;Total ram usage:        1 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    9
  7993 ;; This function calls:
  7994 ;;		_Button_Service
  7995 ;; This function is called by:
  7996 ;;		_MTOUCH_Service_Mainloop
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text51
  8001  011F08                     __ptext51:
  8002                           	opt stack 0
  8003  011F08                     _MTOUCH_Button_ServiceAll:
  8004                           	opt stack 20
  8005                           
  8006                           ;mtouch_button.c: 210: enum mtouch_button_names button;
  8007                           ;mtouch_button.c: 213: for (button = 0; button < 5; button++)
  8008                           
  8009                           ;incstack = 0
  8010  011F08  0E00               	movlw	0
  8011  011F0A  0100               	movlb	0	; () banked
  8012  011F0C  6FC9               	movwf	MTOUCH_Button_ServiceAll@button& (0+255),b
  8013  011F0E                     l4595:
  8014                           
  8015                           ; BSR set to: 0
  8016  011F0E  0E04               	movlw	4
  8017  011F10  65C9               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  8018  011F12  D001               	goto	l828
  8019  011F14  0012               	return	
  8020  011F16                     l828:
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;mtouch_button.c: 214: {
  8024                           ;mtouch_button.c: 215: Button_Service(button);
  8025                           
  8026                           ; BSR set to: 0
  8027  011F16  51C9               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  8028  011F18  EC58  F088         	call	_Button_Service
  8029  011F1C  0100               	movlb	0	; () banked
  8030  011F1E  2BC9               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  8031  011F20  D7F6               	goto	l4595
  8032  011F22                     __end_of_MTOUCH_Button_ServiceAll:
  8033                           	opt stack 0
  8034                           tosu	equ	0xFFF
  8035                           tosh	equ	0xFFE
  8036                           tosl	equ	0xFFD
  8037                           pclath	equ	0xFFA
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodh	equ	0xFF4
  8043                           prodl	equ	0xFF3
  8044                           intcon	equ	0xFF2
  8045                           postinc0	equ	0xFEE
  8046                           wreg	equ	0xFE8
  8047                           indf1	equ	0xFE7
  8048                           postinc1	equ	0xFE6
  8049                           postdec1	equ	0xFE5
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _Button_Service *****************
  8060 ;; Defined at:
  8061 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  name            1    wreg     enum E17454
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  name            1   17[BANK0 ] enum E17454
  8066 ;;  button          2   18[BANK0 ] PTR struct .
  8067 ;;		 -> mtouch_button(80), 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      void 
  8070 ;; Registers used:
  8071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8078 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8080 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8081 ;;Total ram usage:        4 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    8
  8084 ;; This function calls:
  8085 ;;		_Button_Deviation_Update
  8086 ;;		_Button_Reading_Update
  8087 ;;		_Button_State_Initializing
  8088 ;;		_Button_State_NotPressed
  8089 ;;		_Button_State_Pressed
  8090 ;;		_MTOUCH_Button_Initialize
  8091 ;;		_MTOUCH_Sensor_isCalibrated
  8092 ;;		_MTOUCH_Sensor_wasSampled
  8093 ;; This function is called by:
  8094 ;;		_MTOUCH_Button_ServiceAll
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text52
  8099  0110B0                     __ptext52:
  8100                           	opt stack 0
  8101  0110B0                     _Button_Service:
  8102                           	opt stack 20
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;incstack = 0
  8106                           ;Button_Service@name stored from wreg
  8107  0110B0  0100               	movlb	0	; () banked
  8108  0110B2  6FC6               	movwf	Button_Service@name& (0+255),b
  8109                           
  8110                           ;mtouch_button.c: 221: mtouch_button_t* button = &mtouch_button[name];
  8111  0110B4  0100               	movlb	0	; () banked
  8112  0110B6  51C6               	movf	Button_Service@name& (0+255),w,b
  8113  0110B8  0D10               	mullw	16
  8114  0110BA  0E40               	movlw	low _mtouch_button
  8115  0110BC  24F3               	addwf	prodl,w,c
  8116  0110BE  6FC7               	movwf	Button_Service@button& (0+255),b
  8117  0110C0  0E01               	movlw	high _mtouch_button
  8118  0110C2  20F4               	addwfc	prodh,w,c
  8119  0110C4  6FC8               	movwf	(Button_Service@button+1)& (0+255),b
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;mtouch_button.c: 223: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  8123  0110C6  EE20 F001          	lfsr	2,1
  8124  0110CA  51C7               	movf	Button_Service@button& (0+255),w,b
  8125  0110CC  26D9               	addwf	fsr2l,f,c
  8126  0110CE  51C8               	movf	(Button_Service@button+1)& (0+255),w,b
  8127  0110D0  22DA               	addwfc	fsr2h,f,c
  8128  0110D2  50DF               	movf	indf2,w,c
  8129  0110D4  EC8A  F08D         	call	_MTOUCH_Sensor_wasSampled
  8130  0110D8  0900               	iorlw	0
  8131  0110DA  B4D8               	btfsc	status,2,c
  8132  0110DC  0012               	return	
  8133  0110DE  0100               	movlb	0	; () banked
  8134  0110E0  EE20 F001          	lfsr	2,1
  8135  0110E4  51C7               	movf	Button_Service@button& (0+255),w,b
  8136  0110E6  26D9               	addwf	fsr2l,f,c
  8137  0110E8  51C8               	movf	(Button_Service@button+1)& (0+255),w,b
  8138  0110EA  22DA               	addwfc	fsr2h,f,c
  8139  0110EC  50DF               	movf	indf2,w,c
  8140  0110EE  ECA4  F08D         	call	_MTOUCH_Sensor_isCalibrated
  8141  0110F2  0900               	iorlw	0
  8142  0110F4  B4D8               	btfsc	status,2,c
  8143  0110F6  0012               	return	
  8144                           
  8145                           ;mtouch_button.c: 224: {
  8146                           ;mtouch_button.c: 225: Button_Reading_Update(button);
  8147  0110F8  C0C7  F0BC         	movff	Button_Service@button,Button_Reading_Update@button
  8148  0110FC  C0C8  F0BD         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  8149  011100  EC1D  F08F         	call	_Button_Reading_Update	;wreg free
  8150                           
  8151                           ;mtouch_button.c: 226: Button_Deviation_Update(button);
  8152  011104  C0C7  F0B5         	movff	Button_Service@button,Button_Deviation_Update@button
  8153  011108  C0C8  F0B6         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  8154  01110C  ECFE  F085         	call	_Button_Deviation_Update	;wreg free
  8155                           
  8156                           ;mtouch_button.c: 228: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  8157  011110  0100               	movlb	0	; () banked
  8158  011112  EE20 F002          	lfsr	2,2
  8159  011116  51C7               	movf	Button_Service@button& (0+255),w,b
  8160  011118  26D9               	addwf	fsr2l,f,c
  8161  01111A  51C8               	movf	(Button_Service@button+1)& (0+255),w,b
  8162  01111C  22DA               	addwfc	fsr2h,f,c
  8163  01111E  0E02               	movlw	2
  8164  011120  64DF               	cpfsgt	indf2,c
  8165  011122  D007               	goto	l834
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;mtouch_button.c: 229: {
  8169                           ;mtouch_button.c: 230: MTOUCH_Button_Initialize(button->name);
  8170  011124  C0C7  FFD9         	movff	Button_Service@button,fsr2l
  8171  011128  C0C8  FFDA         	movff	Button_Service@button+1,fsr2h
  8172  01112C  50DF               	movf	indf2,w,c
  8173  01112E  EC6E  F08A         	call	_MTOUCH_Button_Initialize
  8174  011132                     l834:
  8175                           
  8176                           ;mtouch_button.c: 231: }
  8177                           ;mtouch_button.c: 232: Button_StateMachine[button->state](button);
  8178  011132  C0C7  F0BE         	movff	Button_Service@button,Button_State_Pressed@button
  8179  011136  C0C8  F0BF         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  8180  01113A  0100               	movlb	0	; () banked
  8181  01113C  EE20 F002          	lfsr	2,2
  8182  011140  51C7               	movf	Button_Service@button& (0+255),w,b
  8183  011142  26D9               	addwf	fsr2l,f,c
  8184  011144  51C8               	movf	(Button_Service@button+1)& (0+255),w,b
  8185  011146  22DA               	addwfc	fsr2h,f,c
  8186  011148  50DF               	movf	indf2,w,c
  8187  01114A  6FC5               	movwf	??_Button_Service& (0+255),b
  8188  01114C  51C5               	movf	??_Button_Service& (0+255),w,b
  8189  01114E  0D03               	mullw	3
  8190  011150  0ECC               	movlw	low _Button_StateMachine
  8191  011152  24F3               	addwf	prodl,w,c
  8192  011154  6ED9               	movwf	fsr2l,c
  8193  011156  0E00               	movlw	high _Button_StateMachine
  8194  011158  20F4               	addwfc	prodh,w,c
  8195  01115A  6EDA               	movwf	fsr2h,c
  8196  01115C  D801               	call	u4768
  8197  01115E  0012               	return	
  8198  011160                     u4768:
  8199  011160  0005               	push	
  8200  011162  6EFA               	movwf	pclath,c
  8201  011164  50DE               	movf	postinc2,w,c
  8202  011166  6EFD               	movwf	tosl,c
  8203  011168  50DE               	movf	postinc2,w,c
  8204  01116A  6EFE               	movwf	tosh,c
  8205  01116C  50DE               	movf	postinc2,w,c
  8206  01116E  6EFF               	movwf	tosu,c
  8207  011170  50FA               	movf	pclath,w,c
  8208  011172  0012               	return		;indir
  8209  011174                     __end_of_Button_Service:
  8210                           	opt stack 0
  8211                           tosu	equ	0xFFF
  8212                           tosh	equ	0xFFE
  8213                           tosl	equ	0xFFD
  8214                           pclath	equ	0xFFA
  8215                           tblptru	equ	0xFF8
  8216                           tblptrh	equ	0xFF7
  8217                           tblptrl	equ	0xFF6
  8218                           tablat	equ	0xFF5
  8219                           prodh	equ	0xFF4
  8220                           prodl	equ	0xFF3
  8221                           intcon	equ	0xFF2
  8222                           postinc0	equ	0xFEE
  8223                           wreg	equ	0xFE8
  8224                           indf1	equ	0xFE7
  8225                           postinc1	equ	0xFE6
  8226                           postdec1	equ	0xFE5
  8227                           fsr1h	equ	0xFE2
  8228                           fsr1l	equ	0xFE1
  8229                           indf2	equ	0xFDF
  8230                           postinc2	equ	0xFDE
  8231                           postdec2	equ	0xFDD
  8232                           fsr2h	equ	0xFDA
  8233                           fsr2l	equ	0xFD9
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  8237 ;; Defined at:
  8238 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  sensor          1    wreg     enum E17513
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  sensor          1    0[BANK0 ] enum E17513
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  1    wreg      unsigned char 
  8245 ;; Registers used:
  8246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8256 ;;Total ram usage:        1 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    5
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		_MTOUCH_Sensor_SampleAll
  8263 ;;		_Sensor_scheduleNextScan
  8264 ;;		_Button_Service
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text53
  8269  011B14                     __ptext53:
  8270                           	opt stack 0
  8271  011B14                     _MTOUCH_Sensor_wasSampled:
  8272                           	opt stack 22
  8273                           
  8274                           ;incstack = 0
  8275                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8276  011B14  0100               	movlb	0	; () banked
  8277  011B16  6FB5               	movwf	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  8278                           
  8279                           ;mtouch_sensor.c: 822: if(sensor < 5)
  8280  011B18  0E05               	movlw	5
  8281  011B1A  0100               	movlb	0	; () banked
  8282  011B1C  61B5               	cpfslt	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  8283  011B1E  D012               	goto	l745
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
  8287  011B20  51B5               	movf	MTOUCH_Sensor_wasSampled@sensor& (0+255),w,b
  8288  011B22  0D09               	mullw	9
  8289  011B24  0E08               	movlw	8
  8290  011B26  26F3               	addwf	prodl,f,c
  8291  011B28  0E00               	movlw	0
  8292  011B2A  22F4               	addwfc	prodh,f,c
  8293  011B2C  0E88               	movlw	low _mtouch_sensor
  8294  011B2E  24F3               	addwf	prodl,w,c
  8295  011B30  6ED9               	movwf	fsr2l,c
  8296  011B32  0E00               	movlw	high _mtouch_sensor
  8297  011B34  20F4               	addwfc	prodh,w,c
  8298  011B36  6EDA               	movwf	fsr2h,c
  8299  011B38  A2DF               	btfss	indf2,1,c
  8300  011B3A  D002               	goto	u4060
  8301  011B3C  0E01               	movlw	1
  8302  011B3E  0012               	return	
  8303  011B40                     u4060:
  8304  011B40  0E00               	movlw	0
  8305                           
  8306                           ; BSR set to: 0
  8307                           
  8308                           ; BSR set to: 0
  8309  011B42  0012               	return	
  8310  011B44                     l745:
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;mtouch_sensor.c: 824: else
  8314                           ;mtouch_sensor.c: 825: return 0;
  8315                           
  8316                           ; BSR set to: 0
  8317  011B44  0E00               	movlw	0
  8318                           
  8319                           ; BSR set to: 0
  8320  011B46  0012               	return	
  8321  011B48                     __end_of_MTOUCH_Sensor_wasSampled:
  8322                           	opt stack 0
  8323                           tosu	equ	0xFFF
  8324                           tosh	equ	0xFFE
  8325                           tosl	equ	0xFFD
  8326                           pclath	equ	0xFFA
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           intcon	equ	0xFF2
  8334                           postinc0	equ	0xFEE
  8335                           wreg	equ	0xFE8
  8336                           indf1	equ	0xFE7
  8337                           postinc1	equ	0xFE6
  8338                           postdec1	equ	0xFE5
  8339                           fsr1h	equ	0xFE2
  8340                           fsr1l	equ	0xFE1
  8341                           indf2	equ	0xFDF
  8342                           postinc2	equ	0xFDE
  8343                           postdec2	equ	0xFDD
  8344                           fsr2h	equ	0xFDA
  8345                           fsr2l	equ	0xFD9
  8346                           status	equ	0xFD8
  8347                           
  8348 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8349 ;; Defined at:
  8350 ;;		line 772 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  sensor          1    wreg     enum E17513
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  sensor          1    0[BANK0 ] enum E17513
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      unsigned char 
  8357 ;; Registers used:
  8358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8368 ;;Total ram usage:        1 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:    5
  8371 ;; This function calls:
  8372 ;;		Nothing
  8373 ;; This function is called by:
  8374 ;;		_Button_Service
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text54
  8379  011B48                     __ptext54:
  8380                           	opt stack 0
  8381  011B48                     _MTOUCH_Sensor_isCalibrated:
  8382                           	opt stack 22
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;incstack = 0
  8386                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8387  011B48  0100               	movlb	0	; () banked
  8388  011B4A  6FB5               	movwf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  8389                           
  8390                           ;mtouch_sensor.c: 774: if(sensor < 5)
  8391  011B4C  0E05               	movlw	5
  8392  011B4E  0100               	movlb	0	; () banked
  8393  011B50  61B5               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  8394  011B52  D012               	goto	l723
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;mtouch_sensor.c: 775: return (bool)mtouch_sensor[sensor].calibrated;
  8398  011B54  51B5               	movf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),w,b
  8399  011B56  0D09               	mullw	9
  8400  011B58  0E08               	movlw	8
  8401  011B5A  26F3               	addwf	prodl,f,c
  8402  011B5C  0E00               	movlw	0
  8403  011B5E  22F4               	addwfc	prodh,f,c
  8404  011B60  0E88               	movlw	low _mtouch_sensor
  8405  011B62  24F3               	addwf	prodl,w,c
  8406  011B64  6ED9               	movwf	fsr2l,c
  8407  011B66  0E00               	movlw	high _mtouch_sensor
  8408  011B68  20F4               	addwfc	prodh,w,c
  8409  011B6A  6EDA               	movwf	fsr2h,c
  8410  011B6C  A6DF               	btfss	indf2,3,c
  8411  011B6E  D002               	goto	u4310
  8412  011B70  0E01               	movlw	1
  8413  011B72  0012               	return	
  8414  011B74                     u4310:
  8415  011B74  0E00               	movlw	0
  8416                           
  8417                           ; BSR set to: 0
  8418                           
  8419                           ; BSR set to: 0
  8420  011B76  0012               	return	
  8421  011B78                     l723:
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;mtouch_sensor.c: 776: else
  8425                           ;mtouch_sensor.c: 777: return 0;
  8426                           
  8427                           ; BSR set to: 0
  8428  011B78  0E00               	movlw	0
  8429                           
  8430                           ; BSR set to: 0
  8431  011B7A  0012               	return	
  8432  011B7C                     __end_of_MTOUCH_Sensor_isCalibrated:
  8433                           	opt stack 0
  8434                           tosu	equ	0xFFF
  8435                           tosh	equ	0xFFE
  8436                           tosl	equ	0xFFD
  8437                           pclath	equ	0xFFA
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           prodh	equ	0xFF4
  8443                           prodl	equ	0xFF3
  8444                           intcon	equ	0xFF2
  8445                           postinc0	equ	0xFEE
  8446                           wreg	equ	0xFE8
  8447                           indf1	equ	0xFE7
  8448                           postinc1	equ	0xFE6
  8449                           postdec1	equ	0xFE5
  8450                           fsr1h	equ	0xFE2
  8451                           fsr1l	equ	0xFE1
  8452                           indf2	equ	0xFDF
  8453                           postinc2	equ	0xFDE
  8454                           postdec2	equ	0xFDD
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function _Button_State_NotPressed *****************
  8460 ;; Defined at:
  8461 ;;		line 256 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  button          2    9[BANK0 ] PTR struct .
  8464 ;;		 -> mtouch_button(80), 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8478 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8479 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8480 ;;Total ram usage:        5 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    7
  8483 ;; This function calls:
  8484 ;;		_Button_Baseline_Update
  8485 ;;		_Button_DefaultCallback
  8486 ;;		_MTOUCH_Button_Initialize
  8487 ;; This function is called by:
  8488 ;;		_Button_Service
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text55
  8493  010710                     __ptext55:
  8494                           	opt stack 0
  8495  010710                     _Button_State_NotPressed:
  8496                           	opt stack 20
  8497                           
  8498                           ;mtouch_button.c: 259: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;incstack = 0
  8502  010710  0100               	movlb	0	; () banked
  8503  010712  EE20 F00E          	lfsr	2,14
  8504  010716  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8505  010718  26D9               	addwf	fsr2l,f,c
  8506  01071A  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8507  01071C  22DA               	addwfc	fsr2h,f,c
  8508  01071E  50DF               	movf	indf2,w,c
  8509  010720  0800               	sublw	0
  8510  010722  6FC0               	movwf	??_Button_State_NotPressed& (0+255),b
  8511  010724  EE20 F009          	lfsr	2,9
  8512  010728  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8513  01072A  26D9               	addwf	fsr2l,f,c
  8514  01072C  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8515  01072E  22DA               	addwfc	fsr2h,f,c
  8516  010730  50DE               	movf	postinc2,w,c
  8517  010732  0A80               	xorlw	128
  8518  010734  6FC2               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  8519  010736  51C0               	movf	??_Button_State_NotPressed& (0+255),w,b
  8520  010738  0A80               	xorlw	128
  8521  01073A  5DC2               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  8522  01073C  B0D8               	btfsc	status,0,c
  8523  01073E  D028               	goto	l844
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;mtouch_button.c: 260: {
  8527                           ;mtouch_button.c: 261: (button->counter)++;
  8528  010740  EE20 F00A          	lfsr	2,10
  8529  010744  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8530  010746  26D9               	addwf	fsr2l,f,c
  8531  010748  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8532  01074A  22DA               	addwfc	fsr2h,f,c
  8533  01074C  2ADE               	incf	postinc2,f,c
  8534  01074E  0E00               	movlw	0
  8535  010750  22DD               	addwfc	postdec2,f,c
  8536                           
  8537                           ;mtouch_button.c: 262: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  8538  010752  EE20 F00A          	lfsr	2,10
  8539  010756  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8540  010758  26D9               	addwf	fsr2l,f,c
  8541  01075A  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8542  01075C  22DA               	addwfc	fsr2h,f,c
  8543  01075E  0E01               	movlw	1
  8544  010760  50DB               	movf	plusw2,w,c
  8545  010762  E104               	bnz	u4410
  8546  010764  0E41               	movlw	65
  8547  010766  5CDE               	subwf	postinc2,w,c
  8548  010768  A0D8               	btfss	status,0,c
  8549  01076A  D055               	goto	l848
  8550  01076C                     u4410:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;mtouch_button.c: 263: {
  8554                           ;mtouch_button.c: 264: button->counter = (mtouch_button_statecounter_t)0;
  8555  01076C  EE20 F00A          	lfsr	2,10
  8556  010770  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8557  010772  26D9               	addwf	fsr2l,f,c
  8558  010774  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8559  010776  22DA               	addwfc	fsr2h,f,c
  8560  010778  0E00               	movlw	0
  8561  01077A  6EDE               	movwf	postinc2,c
  8562  01077C  0E00               	movlw	0
  8563  01077E  6EDD               	movwf	postdec2,c
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;mtouch_button.c: 265: MTOUCH_Button_Initialize(button->name);
  8567  010780  C0BE  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  8568  010784  C0BF  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  8569  010788  50DF               	movf	indf2,w,c
  8570  01078A  EC6E  F08A         	call	_MTOUCH_Button_Initialize
  8571                           
  8572                           ;mtouch_button.c: 266: }
  8573                           ;mtouch_button.c: 267: }
  8574  01078E  D043               	goto	l848
  8575  010790                     l844:
  8576                           
  8577                           ;mtouch_button.c: 269: else if ((button->deviation) > (button->threshold))
  8578  010790  0100               	movlb	0	; () banked
  8579  010792  EE20 F009          	lfsr	2,9
  8580  010796  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8581  010798  26D9               	addwf	fsr2l,f,c
  8582  01079A  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8583  01079C  22DA               	addwfc	fsr2h,f,c
  8584  01079E  EE10 F00E          	lfsr	1,14
  8585  0107A2  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8586  0107A4  26E1               	addwf	fsr1l,f,c
  8587  0107A6  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8588  0107A8  22E2               	addwfc	fsr1h,f,c
  8589  0107AA  50E6               	movf	postinc1,w,c
  8590  0107AC  0A80               	xorlw	128
  8591  0107AE  6FC2               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  8592  0107B0  50DE               	movf	postinc2,w,c
  8593  0107B2  0A80               	xorlw	128
  8594  0107B4  5DC2               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  8595  0107B6  B0D8               	btfsc	status,0,c
  8596  0107B8  D023               	goto	l847
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;mtouch_button.c: 270: {
  8600                           ;mtouch_button.c: 272: button->state = MTOUCH_BUTTON_STATE_pressed;
  8601  0107BA  EE20 F002          	lfsr	2,2
  8602  0107BE  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8603  0107C0  26D9               	addwf	fsr2l,f,c
  8604  0107C2  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8605  0107C4  22DA               	addwfc	fsr2h,f,c
  8606  0107C6  0E02               	movlw	2
  8607  0107C8  6EDF               	movwf	indf2,c
  8608                           
  8609                           ;mtouch_button.c: 273: button->counter = (mtouch_button_statecounter_t)0;
  8610  0107CA  EE20 F00A          	lfsr	2,10
  8611  0107CE  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8612  0107D0  26D9               	addwf	fsr2l,f,c
  8613  0107D2  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8614  0107D4  22DA               	addwfc	fsr2h,f,c
  8615  0107D6  0E00               	movlw	0
  8616  0107D8  6EDE               	movwf	postinc2,c
  8617  0107DA  0E00               	movlw	0
  8618  0107DC  6EDD               	movwf	postdec2,c
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;mtouch_button.c: 274: callback_pressed(button->name);
  8622  0107DE  D801               	call	u4438
  8623  0107E0  D01A               	goto	l848
  8624  0107E2                     u4438:
  8625  0107E2  0005               	push	
  8626  0107E4  6EFA               	movwf	pclath,c
  8627  0107E6  5039               	movf	_callback_pressed,w,c
  8628  0107E8  6EFD               	movwf	tosl,c
  8629  0107EA  503A               	movf	_callback_pressed+1,w,c
  8630  0107EC  6EFE               	movwf	tosh,c
  8631  0107EE  503B               	movf	_callback_pressed+2,w,c
  8632  0107F0  6EFF               	movwf	tosu,c
  8633  0107F2  50FA               	movf	pclath,w,c
  8634  0107F4  C0BE  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  8635  0107F8  C0BF  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  8636  0107FC  50DF               	movf	indf2,w,c
  8637  0107FE  0012               	return		;indir
  8638  010800                     l847:
  8639                           
  8640                           ;mtouch_button.c: 276: else
  8641                           ;mtouch_button.c: 277: {
  8642                           ;mtouch_button.c: 279: button->counter = (mtouch_button_statecounter_t)0;
  8643  010800  0100               	movlb	0	; () banked
  8644  010802  EE20 F00A          	lfsr	2,10
  8645  010806  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8646  010808  26D9               	addwf	fsr2l,f,c
  8647  01080A  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8648  01080C  22DA               	addwfc	fsr2h,f,c
  8649  01080E  0E00               	movlw	0
  8650  010810  6EDE               	movwf	postinc2,c
  8651  010812  0E00               	movlw	0
  8652  010814  6EDD               	movwf	postdec2,c
  8653  010816                     l848:
  8654                           
  8655                           ;mtouch_button.c: 280: }
  8656                           ;mtouch_button.c: 284: (button->baseline_count)++;
  8657                           
  8658                           ; BSR set to: 0
  8659  010816  0100               	movlb	0	; () banked
  8660  010818  EE20 F00C          	lfsr	2,12
  8661  01081C  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8662  01081E  26D9               	addwf	fsr2l,f,c
  8663  010820  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8664  010822  22DA               	addwfc	fsr2h,f,c
  8665  010824  2ADE               	incf	postinc2,f,c
  8666  010826  0E00               	movlw	0
  8667  010828  22DD               	addwfc	postdec2,f,c
  8668                           
  8669                           ;mtouch_button.c: 285: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
  8670  01082A  EE20 F00C          	lfsr	2,12
  8671  01082E  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8672  010830  26D9               	addwf	fsr2l,f,c
  8673  010832  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8674  010834  22DA               	addwfc	fsr2h,f,c
  8675  010836  0E40               	movlw	64
  8676  010838  18DE               	xorwf	postinc2,w,c
  8677  01083A  10DE               	iorwf	postinc2,w,c
  8678  01083C  A4D8               	btfss	status,2,c
  8679  01083E  0012               	return	
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;mtouch_button.c: 286: {
  8683                           ;mtouch_button.c: 287: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8684  010840  EE20 F00C          	lfsr	2,12
  8685  010844  51BE               	movf	Button_State_NotPressed@button& (0+255),w,b
  8686  010846  26D9               	addwf	fsr2l,f,c
  8687  010848  51BF               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  8688  01084A  22DA               	addwfc	fsr2h,f,c
  8689  01084C  0E00               	movlw	0
  8690  01084E  6EDE               	movwf	postinc2,c
  8691  010850  0E00               	movlw	0
  8692  010852  6EDD               	movwf	postdec2,c
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;mtouch_button.c: 288: Button_Baseline_Update(button);
  8696  010854  C0BE  F0B5         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
  8697  010858  C0BF  F0B6         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
  8698  01085C  EC87  F086         	call	_Button_Baseline_Update
  8699  010860  0012               	return	
  8700  010862                     __end_of_Button_State_NotPressed:
  8701                           	opt stack 0
  8702                           tosu	equ	0xFFF
  8703                           tosh	equ	0xFFE
  8704                           tosl	equ	0xFFD
  8705                           pclath	equ	0xFFA
  8706                           tblptru	equ	0xFF8
  8707                           tblptrh	equ	0xFF7
  8708                           tblptrl	equ	0xFF6
  8709                           tablat	equ	0xFF5
  8710                           prodh	equ	0xFF4
  8711                           prodl	equ	0xFF3
  8712                           intcon	equ	0xFF2
  8713                           postinc0	equ	0xFEE
  8714                           wreg	equ	0xFE8
  8715                           indf1	equ	0xFE7
  8716                           postinc1	equ	0xFE6
  8717                           postdec1	equ	0xFE5
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           plusw2	equ	0xFDB
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _Button_State_Initializing *****************
  8729 ;; Defined at:
  8730 ;;		line 236 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  button          2    9[BANK0 ] PTR struct .
  8733 ;;		 -> mtouch_button(80), 
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8747 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8749 ;;Total ram usage:        6 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    7
  8752 ;; This function calls:
  8753 ;;		_Button_Baseline_Initialize
  8754 ;;		_Button_Baseline_Update
  8755 ;; This function is called by:
  8756 ;;		_Button_Service
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text56
  8761  010FE4                     __ptext56:
  8762                           	opt stack 0
  8763  010FE4                     _Button_State_Initializing:
  8764                           	opt stack 20
  8765                           
  8766                           ;mtouch_button.c: 239: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
  8767                           
  8768                           ;incstack = 0
  8769  010FE4  0100               	movlb	0	; () banked
  8770  010FE6  EE20 F00A          	lfsr	2,10
  8771  010FEA  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8772  010FEC  26D9               	addwf	fsr2l,f,c
  8773  010FEE  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8774  010FF0  22DA               	addwfc	fsr2h,f,c
  8775  010FF2  0E01               	movlw	1
  8776  010FF4  50DB               	movf	plusw2,w,c
  8777  010FF6  E10B               	bnz	l4231
  8778  010FF8  0E09               	movlw	9
  8779  010FFA  5CDE               	subwf	postinc2,w,c
  8780  010FFC  B0D8               	btfsc	status,0,c
  8781  010FFE  D007               	goto	l838
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;mtouch_button.c: 240: {
  8785                           ;mtouch_button.c: 241: Button_Baseline_Initialize(button);
  8786  011000  C0BE  F0B8         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
  8787  011004  C0BF  F0B9         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
  8788  011008  EC45  F08B         	call	_Button_Baseline_Initialize	;wreg free
  8789                           
  8790                           ;mtouch_button.c: 242: } else {
  8791  01100C  D006               	goto	l839
  8792  01100E                     l838:
  8793  01100E                     l4231:
  8794                           
  8795                           ;mtouch_button.c: 243: Button_Baseline_Update(button);
  8796  01100E  C0BE  F0B5         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
  8797  011012  C0BF  F0B6         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
  8798  011016  EC87  F086         	call	_Button_Baseline_Update	;wreg free
  8799  01101A                     l839:
  8800                           
  8801                           ;mtouch_button.c: 244: }
  8802                           ;mtouch_button.c: 247: (button->counter)++;
  8803  01101A  0100               	movlb	0	; () banked
  8804  01101C  EE20 F00A          	lfsr	2,10
  8805  011020  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8806  011022  26D9               	addwf	fsr2l,f,c
  8807  011024  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8808  011026  22DA               	addwfc	fsr2h,f,c
  8809  011028  2ADE               	incf	postinc2,f,c
  8810  01102A  0E00               	movlw	0
  8811  01102C  22DD               	addwfc	postdec2,f,c
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;mtouch_button.c: 248: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
  8815  01102E  EE20 F00A          	lfsr	2,10
  8816  011032  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8817  011034  26D9               	addwf	fsr2l,f,c
  8818  011036  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8819  011038  22DA               	addwfc	fsr2h,f,c
  8820  01103A  0E01               	movlw	1
  8821  01103C  50DB               	movf	plusw2,w,c
  8822  01103E  E104               	bnz	u4380
  8823  011040  0E10               	movlw	16
  8824  011042  5CDE               	subwf	postinc2,w,c
  8825  011044  A0D8               	btfss	status,0,c
  8826  011046  0012               	return	
  8827  011048                     u4380:
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;mtouch_button.c: 249: {
  8831                           ;mtouch_button.c: 250: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
  8832  011048  EE20 F005          	lfsr	2,5
  8833  01104C  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8834  01104E  26D9               	addwf	fsr2l,f,c
  8835  011050  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8836  011052  22DA               	addwfc	fsr2h,f,c
  8837  011054  CFDE F0C0          	movff	postinc2,??_Button_State_Initializing
  8838  011058  CFDE F0C1          	movff	postinc2,??_Button_State_Initializing+1
  8839  01105C  CFDE F0C2          	movff	postinc2,??_Button_State_Initializing+2
  8840  011060  CFDE F0C3          	movff	postinc2,??_Button_State_Initializing+3
  8841  011064  0E05               	movlw	5
  8842  011066  D005               	goto	u4390
  8843  011068                     u4395:
  8844  011068  90D8               	bcf	status,0,c
  8845  01106A  33C3               	rrcf	(??_Button_State_Initializing+3)& (0+255),f,b
  8846  01106C  33C2               	rrcf	(??_Button_State_Initializing+2)& (0+255),f,b
  8847  01106E  33C1               	rrcf	(??_Button_State_Initializing+1)& (0+255),f,b
  8848  011070  33C0               	rrcf	??_Button_State_Initializing& (0+255),f,b
  8849  011072                     u4390:
  8850  011072  2EE8               	decfsz	wreg,f,c
  8851  011074  D7F9               	goto	u4395
  8852  011076  EE20 F003          	lfsr	2,3
  8853  01107A  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8854  01107C  26D9               	addwf	fsr2l,f,c
  8855  01107E  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8856  011080  22DA               	addwfc	fsr2h,f,c
  8857  011082  C0C0  FFDE         	movff	??_Button_State_Initializing,postinc2
  8858  011086  C0C1  FFDD         	movff	??_Button_State_Initializing+1,postdec2
  8859                           
  8860                           ;mtouch_button.c: 251: button->state = MTOUCH_BUTTON_STATE_notPressed;
  8861  01108A  EE20 F002          	lfsr	2,2
  8862  01108E  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8863  011090  26D9               	addwf	fsr2l,f,c
  8864  011092  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8865  011094  22DA               	addwfc	fsr2h,f,c
  8866  011096  0E01               	movlw	1
  8867  011098  6EDF               	movwf	indf2,c
  8868                           
  8869                           ;mtouch_button.c: 252: button->counter = (mtouch_button_statecounter_t)0;
  8870  01109A  EE20 F00A          	lfsr	2,10
  8871  01109E  51BE               	movf	Button_State_Initializing@button& (0+255),w,b
  8872  0110A0  26D9               	addwf	fsr2l,f,c
  8873  0110A2  51BF               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  8874  0110A4  22DA               	addwfc	fsr2h,f,c
  8875  0110A6  0E00               	movlw	0
  8876  0110A8  6EDE               	movwf	postinc2,c
  8877  0110AA  0E00               	movlw	0
  8878  0110AC  6EDD               	movwf	postdec2,c
  8879  0110AE  0012               	return	
  8880  0110B0                     __end_of_Button_State_Initializing:
  8881                           	opt stack 0
  8882                           tosu	equ	0xFFF
  8883                           tosh	equ	0xFFE
  8884                           tosl	equ	0xFFD
  8885                           pclath	equ	0xFFA
  8886                           tblptru	equ	0xFF8
  8887                           tblptrh	equ	0xFF7
  8888                           tblptrl	equ	0xFF6
  8889                           tablat	equ	0xFF5
  8890                           prodh	equ	0xFF4
  8891                           prodl	equ	0xFF3
  8892                           intcon	equ	0xFF2
  8893                           postinc0	equ	0xFEE
  8894                           wreg	equ	0xFE8
  8895                           indf1	equ	0xFE7
  8896                           postinc1	equ	0xFE6
  8897                           postdec1	equ	0xFE5
  8898                           fsr1h	equ	0xFE2
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           plusw2	equ	0xFDB
  8904                           fsr2h	equ	0xFDA
  8905                           fsr2l	equ	0xFD9
  8906                           status	equ	0xFD8
  8907                           
  8908 ;; *************** function _Button_State_Pressed *****************
  8909 ;; Defined at:
  8910 ;;		line 292 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  button          2    9[BANK0 ] PTR struct .
  8913 ;;		 -> mtouch_button(80), 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  1    wreg      void 
  8918 ;; Registers used:
  8919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8927 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8928 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8929 ;;Total ram usage:        7 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    7
  8932 ;; This function calls:
  8933 ;;		_Button_DefaultCallback
  8934 ;;		_MTOUCH_Button_Initialize
  8935 ;; This function is called by:
  8936 ;;		_Button_Service
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text57
  8941  010E0E                     __ptext57:
  8942                           	opt stack 0
  8943  010E0E                     _Button_State_Pressed:
  8944                           	opt stack 20
  8945                           
  8946                           ;mtouch_button.c: 295: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;incstack = 0
  8950  010E0E  0100               	movlb	0	; () banked
  8951  010E10  EE20 F00A          	lfsr	2,10
  8952  010E14  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  8953  010E16  26D9               	addwf	fsr2l,f,c
  8954  010E18  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  8955  010E1A  22DA               	addwfc	fsr2h,f,c
  8956  010E1C  0EE8               	movlw	232
  8957  010E1E  5CDE               	subwf	postinc2,w,c
  8958  010E20  0E03               	movlw	3
  8959  010E22  58DE               	subwfb	postinc2,w,c
  8960  010E24  A0D8               	btfss	status,0,c
  8961  010E26  D018               	goto	l853
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;mtouch_button.c: 296: {
  8965                           ;mtouch_button.c: 297: MTOUCH_Button_Initialize(button->name);
  8966  010E28  C0BE  FFD9         	movff	Button_State_Pressed@button,fsr2l
  8967  010E2C  C0BF  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  8968  010E30  50DF               	movf	indf2,w,c
  8969  010E32  EC6E  F08A         	call	_MTOUCH_Button_Initialize
  8970                           
  8971                           ;mtouch_button.c: 298: callback_notPressed(button->name);
  8972  010E36  D801               	call	u4468
  8973  010E38  0012               	return	
  8974  010E3A                     u4468:
  8975  010E3A  0005               	push	
  8976  010E3C  6EFA               	movwf	pclath,c
  8977  010E3E  5036               	movf	_callback_notPressed,w,c
  8978  010E40  6EFD               	movwf	tosl,c
  8979  010E42  5037               	movf	_callback_notPressed+1,w,c
  8980  010E44  6EFE               	movwf	tosh,c
  8981  010E46  5038               	movf	_callback_notPressed+2,w,c
  8982  010E48  6EFF               	movwf	tosu,c
  8983  010E4A  50FA               	movf	pclath,w,c
  8984  010E4C  C0BE  FFD9         	movff	Button_State_Pressed@button,fsr2l
  8985  010E50  C0BF  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  8986  010E54  50DF               	movf	indf2,w,c
  8987  010E56  0012               	return		;indir
  8988  010E58                     l853:
  8989                           
  8990                           ;mtouch_button.c: 302: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
  8991  010E58  0100               	movlb	0	; () banked
  8992  010E5A  EE20 F00E          	lfsr	2,14
  8993  010E5E  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  8994  010E60  26D9               	addwf	fsr2l,f,c
  8995  010E62  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  8996  010E64  22DA               	addwfc	fsr2h,f,c
  8997  010E66  50DF               	movf	indf2,w,c
  8998  010E68  6FC0               	movwf	??_Button_State_Pressed& (0+255),b
  8999  010E6A  EE20 F00E          	lfsr	2,14
  9000  010E6E  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  9001  010E70  26D9               	addwf	fsr2l,f,c
  9002  010E72  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9003  010E74  22DA               	addwfc	fsr2h,f,c
  9004  010E76  50DF               	movf	indf2,w,c
  9005  010E78  6FC1               	movwf	(??_Button_State_Pressed+1)& (0+255),b
  9006  010E7A  35C1               	rlcf	(??_Button_State_Pressed+1)& (0+255),w,b
  9007  010E7C  31C1               	rrcf	(??_Button_State_Pressed+1)& (0+255),w,b
  9008  010E7E  0800               	sublw	0
  9009  010E80  25C0               	addwf	??_Button_State_Pressed& (0+255),w,b
  9010  010E82  6FC2               	movwf	(??_Button_State_Pressed+2)& (0+255),b
  9011  010E84  EE20 F009          	lfsr	2,9
  9012  010E88  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  9013  010E8A  26D9               	addwf	fsr2l,f,c
  9014  010E8C  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9015  010E8E  22DA               	addwfc	fsr2h,f,c
  9016  010E90  50DE               	movf	postinc2,w,c
  9017  010E92  0A80               	xorlw	128
  9018  010E94  6FC4               	movwf	(??_Button_State_Pressed+4)& (0+255),b
  9019  010E96  51C2               	movf	(??_Button_State_Pressed+2)& (0+255),w,b
  9020  010E98  0A80               	xorlw	128
  9021  010E9A  5DC4               	subwf	(??_Button_State_Pressed+4)& (0+255),w,b
  9022  010E9C  B0D8               	btfsc	status,0,c
  9023  010E9E  0012               	return	
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;mtouch_button.c: 303: {
  9027                           ;mtouch_button.c: 304: button->state = MTOUCH_BUTTON_STATE_notPressed;
  9028  010EA0  EE20 F002          	lfsr	2,2
  9029  010EA4  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  9030  010EA6  26D9               	addwf	fsr2l,f,c
  9031  010EA8  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9032  010EAA  22DA               	addwfc	fsr2h,f,c
  9033  010EAC  0E01               	movlw	1
  9034  010EAE  6EDF               	movwf	indf2,c
  9035                           
  9036                           ;mtouch_button.c: 305: button->counter = (mtouch_button_statecounter_t)0;
  9037  010EB0  EE20 F00A          	lfsr	2,10
  9038  010EB4  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  9039  010EB6  26D9               	addwf	fsr2l,f,c
  9040  010EB8  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9041  010EBA  22DA               	addwfc	fsr2h,f,c
  9042  010EBC  0E00               	movlw	0
  9043  010EBE  6EDE               	movwf	postinc2,c
  9044  010EC0  0E00               	movlw	0
  9045  010EC2  6EDD               	movwf	postdec2,c
  9046                           
  9047                           ;mtouch_button.c: 306: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
  9048  010EC4  EE20 F00C          	lfsr	2,12
  9049  010EC8  51BE               	movf	Button_State_Pressed@button& (0+255),w,b
  9050  010ECA  26D9               	addwf	fsr2l,f,c
  9051  010ECC  51BF               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9052  010ECE  22DA               	addwfc	fsr2h,f,c
  9053  010ED0  0EFF               	movlw	255
  9054  010ED2  6EDE               	movwf	postinc2,c
  9055  010ED4  0EFB               	movlw	251
  9056  010ED6  6EDD               	movwf	postdec2,c
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;mtouch_button.c: 307: callback_notPressed(button->name);
  9060  010ED8  D801               	call	u4488
  9061  010EDA  0012               	return	
  9062  010EDC                     u4488:
  9063  010EDC  0005               	push	
  9064  010EDE  6EFA               	movwf	pclath,c
  9065  010EE0  5036               	movf	_callback_notPressed,w,c
  9066  010EE2  6EFD               	movwf	tosl,c
  9067  010EE4  5037               	movf	_callback_notPressed+1,w,c
  9068  010EE6  6EFE               	movwf	tosh,c
  9069  010EE8  5038               	movf	_callback_notPressed+2,w,c
  9070  010EEA  6EFF               	movwf	tosu,c
  9071  010EEC  50FA               	movf	pclath,w,c
  9072  010EEE  C0BE  FFD9         	movff	Button_State_Pressed@button,fsr2l
  9073  010EF2  C0BF  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  9074  010EF6  50DF               	movf	indf2,w,c
  9075  010EF8  0012               	return		;indir
  9076  010EFA                     __end_of_Button_State_Pressed:
  9077                           	opt stack 0
  9078                           tosu	equ	0xFFF
  9079                           tosh	equ	0xFFE
  9080                           tosl	equ	0xFFD
  9081                           pclath	equ	0xFFA
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           intcon	equ	0xFF2
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           indf1	equ	0xFE7
  9092                           postinc1	equ	0xFE6
  9093                           postdec1	equ	0xFE5
  9094                           fsr1h	equ	0xFE2
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           plusw2	equ	0xFDB
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _MTOUCH_Button_Initialize *****************
  9105 ;; Defined at:
  9106 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  name            1    wreg     enum E17454
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  name            1    1[BANK0 ] enum E17454
  9111 ;;  button          2    2[BANK0 ] PTR struct .
  9112 ;;		 -> mtouch_button(80), 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9123 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9125 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9126 ;;Total ram usage:        3 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    6
  9129 ;; This function calls:
  9130 ;;		_MTOUCH_Sensor_Calibrate
  9131 ;; This function is called by:
  9132 ;;		_MTOUCH_Button_InitializeAll
  9133 ;;		_Button_Service
  9134 ;;		_Button_State_NotPressed
  9135 ;;		_Button_State_Pressed
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text58
  9140  0114DC                     __ptext58:
  9141                           	opt stack 0
  9142  0114DC                     _MTOUCH_Button_Initialize:
  9143                           	opt stack 21
  9144                           
  9145                           ;incstack = 0
  9146                           ;MTOUCH_Button_Initialize@name stored from wreg
  9147  0114DC  0100               	movlb	0	; () banked
  9148  0114DE  6FB6               	movwf	MTOUCH_Button_Initialize@name& (0+255),b
  9149                           
  9150                           ;mtouch_button.c: 180: mtouch_button_t* button = &mtouch_button[name];
  9151  0114E0  0100               	movlb	0	; () banked
  9152  0114E2  51B6               	movf	MTOUCH_Button_Initialize@name& (0+255),w,b
  9153  0114E4  0D10               	mullw	16
  9154  0114E6  0E40               	movlw	low _mtouch_button
  9155  0114E8  24F3               	addwf	prodl,w,c
  9156  0114EA  6FB7               	movwf	MTOUCH_Button_Initialize@button& (0+255),b
  9157  0114EC  0E01               	movlw	high _mtouch_button
  9158  0114EE  20F4               	addwfc	prodh,w,c
  9159  0114F0  6FB8               	movwf	(MTOUCH_Button_Initialize@button+1)& (0+255),b
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;mtouch_button.c: 182: button->state = MTOUCH_BUTTON_STATE_initializing;
  9163  0114F2  EE20 F002          	lfsr	2,2
  9164  0114F6  51B7               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
  9165  0114F8  26D9               	addwf	fsr2l,f,c
  9166  0114FA  51B8               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
  9167  0114FC  22DA               	addwfc	fsr2h,f,c
  9168  0114FE  0E00               	movlw	0
  9169  011500  6EDF               	movwf	indf2,c
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;mtouch_button.c: 183: button->baseline = (mtouch_button_baseline_t)0;
  9173  011502  EE20 F005          	lfsr	2,5
  9174  011506  51B7               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
  9175  011508  26D9               	addwf	fsr2l,f,c
  9176  01150A  51B8               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
  9177  01150C  22DA               	addwfc	fsr2h,f,c
  9178  01150E  6ADE               	clrf	postinc2,c
  9179  011510  6ADE               	clrf	postinc2,c
  9180  011512  6ADE               	clrf	postinc2,c
  9181  011514  6ADD               	clrf	postdec2,c
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;mtouch_button.c: 184: button->counter = (mtouch_button_statecounter_t)0;
  9185  011516  EE20 F00A          	lfsr	2,10
  9186  01151A  51B7               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
  9187  01151C  26D9               	addwf	fsr2l,f,c
  9188  01151E  51B8               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
  9189  011520  22DA               	addwfc	fsr2h,f,c
  9190  011522  0E00               	movlw	0
  9191  011524  6EDE               	movwf	postinc2,c
  9192  011526  0E00               	movlw	0
  9193  011528  6EDD               	movwf	postdec2,c
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;mtouch_button.c: 185: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9197  01152A  EE20 F00C          	lfsr	2,12
  9198  01152E  51B7               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
  9199  011530  26D9               	addwf	fsr2l,f,c
  9200  011532  51B8               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
  9201  011534  22DA               	addwfc	fsr2h,f,c
  9202  011536  0E00               	movlw	0
  9203  011538  6EDE               	movwf	postinc2,c
  9204  01153A  0E00               	movlw	0
  9205  01153C  6EDD               	movwf	postdec2,c
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;mtouch_button.c: 187: MTOUCH_Sensor_Calibrate(button->sensor);
  9209  01153E  EE20 F001          	lfsr	2,1
  9210  011542  51B7               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
  9211  011544  26D9               	addwf	fsr2l,f,c
  9212  011546  51B8               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
  9213  011548  22DA               	addwfc	fsr2h,f,c
  9214  01154A  50DF               	movf	indf2,w,c
  9215  01154C  ECD0  F08E         	call	_MTOUCH_Sensor_Calibrate
  9216  011550  0012               	return		;funcret
  9217  011552                     __end_of_MTOUCH_Button_Initialize:
  9218                           	opt stack 0
  9219                           tosu	equ	0xFFF
  9220                           tosh	equ	0xFFE
  9221                           tosl	equ	0xFFD
  9222                           pclath	equ	0xFFA
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           postinc0	equ	0xFEE
  9231                           wreg	equ	0xFE8
  9232                           indf1	equ	0xFE7
  9233                           postinc1	equ	0xFE6
  9234                           postdec1	equ	0xFE5
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           plusw2	equ	0xFDB
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  9246 ;; Defined at:
  9247 ;;		line 764 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  sensor          1    wreg     enum E17513
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;  sensor          1    0[BANK0 ] enum E17513
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9265 ;;Total ram usage:        1 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    5
  9268 ;; This function calls:
  9269 ;;		Nothing
  9270 ;; This function is called by:
  9271 ;;		_MTOUCH_Sensor_Initialize
  9272 ;;		_MTOUCH_Button_Initialize
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text59
  9277  011DA0                     __ptext59:
  9278                           	opt stack 0
  9279  011DA0                     _MTOUCH_Sensor_Calibrate:
  9280                           	opt stack 21
  9281                           
  9282                           ;incstack = 0
  9283                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
  9284  011DA0  0100               	movlb	0	; () banked
  9285  011DA2  6FB5               	movwf	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
  9286                           
  9287                           ;mtouch_sensor.c: 766: if(sensor < 5)
  9288  011DA4  0E05               	movlw	5
  9289  011DA6  0100               	movlb	0	; () banked
  9290  011DA8  61B5               	cpfslt	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
  9291  011DAA  0012               	return	
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;mtouch_sensor.c: 767: {
  9295                           ;mtouch_sensor.c: 768: mtouch_sensor[sensor].calibrated = 0;
  9296  011DAC  51B5               	movf	MTOUCH_Sensor_Calibrate@sensor& (0+255),w,b
  9297  011DAE  0D09               	mullw	9
  9298  011DB0  0E08               	movlw	8
  9299  011DB2  26F3               	addwf	prodl,f,c
  9300  011DB4  0E00               	movlw	0
  9301  011DB6  22F4               	addwfc	prodh,f,c
  9302  011DB8  0E88               	movlw	low _mtouch_sensor
  9303  011DBA  24F3               	addwf	prodl,w,c
  9304  011DBC  6ED9               	movwf	fsr2l,c
  9305  011DBE  0E00               	movlw	high _mtouch_sensor
  9306  011DC0  20F4               	addwfc	prodh,w,c
  9307  011DC2  6EDA               	movwf	fsr2h,c
  9308  011DC4  96DF               	bcf	indf2,3,c
  9309  011DC6  0012               	return	
  9310  011DC8                     __end_of_MTOUCH_Sensor_Calibrate:
  9311                           	opt stack 0
  9312                           tosu	equ	0xFFF
  9313                           tosh	equ	0xFFE
  9314                           tosl	equ	0xFFD
  9315                           pclath	equ	0xFFA
  9316                           tblptru	equ	0xFF8
  9317                           tblptrh	equ	0xFF7
  9318                           tblptrl	equ	0xFF6
  9319                           tablat	equ	0xFF5
  9320                           prodh	equ	0xFF4
  9321                           prodl	equ	0xFF3
  9322                           intcon	equ	0xFF2
  9323                           postinc0	equ	0xFEE
  9324                           wreg	equ	0xFE8
  9325                           indf1	equ	0xFE7
  9326                           postinc1	equ	0xFE6
  9327                           postdec1	equ	0xFE5
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           plusw2	equ	0xFDB
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _Button_DefaultCallback *****************
  9339 ;; Defined at:
  9340 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  button          1    wreg     enum E17454
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  button          1    0[COMRAM] enum E17454
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9358 ;;Total ram usage:        0 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    5
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_Button_State_NotPressed
  9365 ;;		_Button_State_Pressed
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           	psect	text60
  9370  01203E                     __ptext60:
  9371                           	opt stack 0
  9372  01203E                     _Button_DefaultCallback:
  9373                           	opt stack 21
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;incstack = 0
  9377  01203E  0012               	return		;funcret
  9378  012040                     __end_of_Button_DefaultCallback:
  9379                           	opt stack 0
  9380                           tosu	equ	0xFFF
  9381                           tosh	equ	0xFFE
  9382                           tosl	equ	0xFFD
  9383                           pclath	equ	0xFFA
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodh	equ	0xFF4
  9389                           prodl	equ	0xFF3
  9390                           intcon	equ	0xFF2
  9391                           postinc0	equ	0xFEE
  9392                           wreg	equ	0xFE8
  9393                           indf1	equ	0xFE7
  9394                           postinc1	equ	0xFE6
  9395                           postdec1	equ	0xFE5
  9396                           fsr1h	equ	0xFE2
  9397                           fsr1l	equ	0xFE1
  9398                           indf2	equ	0xFDF
  9399                           postinc2	equ	0xFDE
  9400                           postdec2	equ	0xFDD
  9401                           plusw2	equ	0xFDB
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function _Button_Baseline_Update *****************
  9407 ;; Defined at:
  9408 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  button          2    0[BANK0 ] PTR struct .
  9411 ;;		 -> mtouch_button(80), 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9426 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9427 ;;Total ram usage:        6 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    5
  9430 ;; This function calls:
  9431 ;;		Nothing
  9432 ;; This function is called by:
  9433 ;;		_Button_State_Initializing
  9434 ;;		_Button_State_NotPressed
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text61
  9439  010D0E                     __ptext61:
  9440                           	opt stack 0
  9441  010D0E                     _Button_Baseline_Update:
  9442                           	opt stack 21
  9443                           
  9444                           ;mtouch_button.c: 486: if (GIE == (uint8_t)1)
  9445                           
  9446                           ;incstack = 0
  9447  010D0E  AEF2               	btfss	intcon,7,c	;volatile
  9448  010D10  D040               	goto	l933
  9449                           
  9450                           ;mtouch_button.c: 487: {
  9451                           ;mtouch_button.c: 488: GIE = (uint8_t)0;
  9452  010D12  9EF2               	bcf	intcon,7,c	;volatile
  9453                           
  9454                           ;mtouch_button.c: 489: button->baseline -= (button->baseline) >> ((uint8_t)4);
  9455  010D14  0100               	movlb	0	; () banked
  9456  010D16  EE20 F005          	lfsr	2,5
  9457  010D1A  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9458  010D1C  26D9               	addwf	fsr2l,f,c
  9459  010D1E  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9460  010D20  22DA               	addwfc	fsr2h,f,c
  9461  010D22  CFDE F0B7          	movff	postinc2,??_Button_Baseline_Update
  9462  010D26  CFDE F0B8          	movff	postinc2,??_Button_Baseline_Update+1
  9463  010D2A  CFDE F0B9          	movff	postinc2,??_Button_Baseline_Update+2
  9464  010D2E  CFDE F0BA          	movff	postinc2,??_Button_Baseline_Update+3
  9465  010D32  0E05               	movlw	5
  9466  010D34  D005               	goto	u3960
  9467  010D36                     u3965:
  9468  010D36  90D8               	bcf	status,0,c
  9469  010D38  33BA               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
  9470  010D3A  33B9               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
  9471  010D3C  33B8               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
  9472  010D3E  33B7               	rrcf	??_Button_Baseline_Update& (0+255),f,b
  9473  010D40                     u3960:
  9474  010D40  2EE8               	decfsz	wreg,f,c
  9475  010D42  D7F9               	goto	u3965
  9476  010D44  EE20 F005          	lfsr	2,5
  9477  010D48  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9478  010D4A  26D9               	addwf	fsr2l,f,c
  9479  010D4C  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9480  010D4E  22DA               	addwfc	fsr2h,f,c
  9481  010D50  51B7               	movf	??_Button_Baseline_Update& (0+255),w,b
  9482  010D52  5EDE               	subwf	postinc2,f,c
  9483  010D54  51B8               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
  9484  010D56  5ADE               	subwfb	postinc2,f,c
  9485  010D58  51B9               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
  9486  010D5A  5ADE               	subwfb	postinc2,f,c
  9487  010D5C  51BA               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
  9488  010D5E  5ADE               	subwfb	postinc2,f,c
  9489                           
  9490                           ;mtouch_button.c: 490: button->baseline += button->reading;
  9491  010D60  EE20 F003          	lfsr	2,3
  9492  010D64  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9493  010D66  26D9               	addwf	fsr2l,f,c
  9494  010D68  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9495  010D6A  22DA               	addwfc	fsr2h,f,c
  9496  010D6C  CFDE F0B7          	movff	postinc2,??_Button_Baseline_Update
  9497  010D70  CFDD F0B8          	movff	postdec2,??_Button_Baseline_Update+1
  9498  010D74  EE20 F005          	lfsr	2,5
  9499  010D78  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9500  010D7A  26D9               	addwf	fsr2l,f,c
  9501  010D7C  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9502  010D7E  22DA               	addwfc	fsr2h,f,c
  9503  010D80  51B7               	movf	??_Button_Baseline_Update& (0+255),w,b
  9504  010D82  26DE               	addwf	postinc2,f,c
  9505  010D84  51B8               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
  9506  010D86  22DE               	addwfc	postinc2,f,c
  9507  010D88  0E00               	movlw	0
  9508  010D8A  22DE               	addwfc	postinc2,f,c
  9509  010D8C  22DE               	addwfc	postinc2,f,c
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;mtouch_button.c: 491: GIE = (uint8_t)1;
  9513  010D8E  8EF2               	bsf	intcon,7,c	;volatile
  9514                           
  9515                           ;mtouch_button.c: 492: }
  9516  010D90  0012               	return	
  9517  010D92                     l933:
  9518                           
  9519                           ;mtouch_button.c: 493: else
  9520                           ;mtouch_button.c: 494: {
  9521                           ;mtouch_button.c: 495: button->baseline -= (button->baseline) >> ((uint8_t)4);
  9522                           
  9523                           ; BSR set to: 0
  9524  010D92  0100               	movlb	0	; () banked
  9525  010D94  EE20 F005          	lfsr	2,5
  9526  010D98  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9527  010D9A  26D9               	addwf	fsr2l,f,c
  9528  010D9C  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9529  010D9E  22DA               	addwfc	fsr2h,f,c
  9530  010DA0  CFDE F0B7          	movff	postinc2,??_Button_Baseline_Update
  9531  010DA4  CFDE F0B8          	movff	postinc2,??_Button_Baseline_Update+1
  9532  010DA8  CFDE F0B9          	movff	postinc2,??_Button_Baseline_Update+2
  9533  010DAC  CFDE F0BA          	movff	postinc2,??_Button_Baseline_Update+3
  9534  010DB0  0E05               	movlw	5
  9535  010DB2  D005               	goto	u3970
  9536  010DB4                     u3975:
  9537  010DB4  90D8               	bcf	status,0,c
  9538  010DB6  33BA               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
  9539  010DB8  33B9               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
  9540  010DBA  33B8               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
  9541  010DBC  33B7               	rrcf	??_Button_Baseline_Update& (0+255),f,b
  9542  010DBE                     u3970:
  9543  010DBE  2EE8               	decfsz	wreg,f,c
  9544  010DC0  D7F9               	goto	u3975
  9545  010DC2  EE20 F005          	lfsr	2,5
  9546  010DC6  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9547  010DC8  26D9               	addwf	fsr2l,f,c
  9548  010DCA  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9549  010DCC  22DA               	addwfc	fsr2h,f,c
  9550  010DCE  51B7               	movf	??_Button_Baseline_Update& (0+255),w,b
  9551  010DD0  5EDE               	subwf	postinc2,f,c
  9552  010DD2  51B8               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
  9553  010DD4  5ADE               	subwfb	postinc2,f,c
  9554  010DD6  51B9               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
  9555  010DD8  5ADE               	subwfb	postinc2,f,c
  9556  010DDA  51BA               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
  9557  010DDC  5ADE               	subwfb	postinc2,f,c
  9558                           
  9559                           ;mtouch_button.c: 496: button->baseline += button->reading;
  9560  010DDE  EE20 F003          	lfsr	2,3
  9561  010DE2  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9562  010DE4  26D9               	addwf	fsr2l,f,c
  9563  010DE6  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9564  010DE8  22DA               	addwfc	fsr2h,f,c
  9565  010DEA  CFDE F0B7          	movff	postinc2,??_Button_Baseline_Update
  9566  010DEE  CFDD F0B8          	movff	postdec2,??_Button_Baseline_Update+1
  9567  010DF2  EE20 F005          	lfsr	2,5
  9568  010DF6  51B5               	movf	Button_Baseline_Update@button& (0+255),w,b
  9569  010DF8  26D9               	addwf	fsr2l,f,c
  9570  010DFA  51B6               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
  9571  010DFC  22DA               	addwfc	fsr2h,f,c
  9572  010DFE  51B7               	movf	??_Button_Baseline_Update& (0+255),w,b
  9573  010E00  26DE               	addwf	postinc2,f,c
  9574  010E02  51B8               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
  9575  010E04  22DE               	addwfc	postinc2,f,c
  9576  010E06  0E00               	movlw	0
  9577  010E08  22DE               	addwfc	postinc2,f,c
  9578  010E0A  22DE               	addwfc	postinc2,f,c
  9579  010E0C  0012               	return	
  9580  010E0E                     __end_of_Button_Baseline_Update:
  9581                           	opt stack 0
  9582                           tosu	equ	0xFFF
  9583                           tosh	equ	0xFFE
  9584                           tosl	equ	0xFFD
  9585                           pclath	equ	0xFFA
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           intcon	equ	0xFF2
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           indf1	equ	0xFE7
  9596                           postinc1	equ	0xFE6
  9597                           postdec1	equ	0xFE5
  9598                           fsr1h	equ	0xFE2
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           postdec2	equ	0xFDD
  9603                           plusw2	equ	0xFDB
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _Button_Baseline_Initialize *****************
  9609 ;; Defined at:
  9610 ;;		line 478 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  button          2    3[BANK0 ] PTR struct .
  9613 ;;		 -> mtouch_button(80), 
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9625 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9627 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9628 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9629 ;;Total ram usage:        6 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    6
  9632 ;; This function calls:
  9633 ;;		_MTOUCH_Sensor_RawSample_Get
  9634 ;; This function is called by:
  9635 ;;		_Button_State_Initializing
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text62
  9640  01168A                     __ptext62:
  9641                           	opt stack 0
  9642  01168A                     _Button_Baseline_Initialize:
  9643                           	opt stack 20
  9644                           
  9645                           ;mtouch_button.c: 480: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;incstack = 0
  9649  01168A  0100               	movlb	0	; () banked
  9650  01168C  EE20 F001          	lfsr	2,1
  9651  011690  51B8               	movf	Button_Baseline_Initialize@button& (0+255),w,b
  9652  011692  26D9               	addwf	fsr2l,f,c
  9653  011694  51B9               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
  9654  011696  22DA               	addwfc	fsr2h,f,c
  9655  011698  50DF               	movf	indf2,w,c
  9656  01169A  EC54  F08D         	call	_MTOUCH_Sensor_RawSample_Get
  9657  01169E  0100               	movlb	0	; () banked
  9658  0116A0  51B5               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
  9659  0116A2  6FBA               	movwf	??_Button_Baseline_Initialize& (0+255),b
  9660  0116A4  51B6               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
  9661  0116A6  6FBB               	movwf	(??_Button_Baseline_Initialize+1)& (0+255),b
  9662  0116A8  6BBC               	clrf	(??_Button_Baseline_Initialize+2)& (0+255),b
  9663  0116AA  6BBD               	clrf	(??_Button_Baseline_Initialize+3)& (0+255),b
  9664  0116AC  EE20 F005          	lfsr	2,5
  9665  0116B0  51B8               	movf	Button_Baseline_Initialize@button& (0+255),w,b
  9666  0116B2  26D9               	addwf	fsr2l,f,c
  9667  0116B4  51B9               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
  9668  0116B6  22DA               	addwfc	fsr2h,f,c
  9669  0116B8  C0BA  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
  9670  0116BC  C0BB  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
  9671  0116C0  C0BC  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
  9672  0116C4  C0BD  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;mtouch_button.c: 481: button->baseline <<= ((uint8_t)4);
  9676  0116C8  EE20 F005          	lfsr	2,5
  9677  0116CC  51B8               	movf	Button_Baseline_Initialize@button& (0+255),w,b
  9678  0116CE  26D9               	addwf	fsr2l,f,c
  9679  0116D0  51B9               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
  9680  0116D2  22DA               	addwfc	fsr2h,f,c
  9681  0116D4  0E04               	movlw	4
  9682  0116D6                     u3945:
  9683  0116D6  90D8               	bcf	status,0,c
  9684  0116D8  36DE               	rlcf	postinc2,f,c
  9685  0116DA  36DE               	rlcf	postinc2,f,c
  9686  0116DC  36DE               	rlcf	postinc2,f,c
  9687  0116DE  36DD               	rlcf	postdec2,f,c
  9688  0116E0  06D9               	decf	fsr2l,f,c
  9689  0116E2  06D9               	decf	fsr2l,f,c
  9690  0116E4  2EE8               	decfsz	wreg,f,c
  9691  0116E6  D7F7               	goto	u3945
  9692                           
  9693                           ; BSR set to: 0
  9694  0116E8  0012               	return		;funcret
  9695  0116EA                     __end_of_Button_Baseline_Initialize:
  9696                           	opt stack 0
  9697                           tosu	equ	0xFFF
  9698                           tosh	equ	0xFFE
  9699                           tosl	equ	0xFFD
  9700                           pclath	equ	0xFFA
  9701                           tblptru	equ	0xFF8
  9702                           tblptrh	equ	0xFF7
  9703                           tblptrl	equ	0xFF6
  9704                           tablat	equ	0xFF5
  9705                           prodh	equ	0xFF4
  9706                           prodl	equ	0xFF3
  9707                           intcon	equ	0xFF2
  9708                           postinc0	equ	0xFEE
  9709                           wreg	equ	0xFE8
  9710                           indf1	equ	0xFE7
  9711                           postinc1	equ	0xFE6
  9712                           postdec1	equ	0xFE5
  9713                           fsr1h	equ	0xFE2
  9714                           fsr1l	equ	0xFE1
  9715                           indf2	equ	0xFDF
  9716                           postinc2	equ	0xFDE
  9717                           postdec2	equ	0xFDD
  9718                           plusw2	equ	0xFDB
  9719                           fsr2h	equ	0xFDA
  9720                           fsr2l	equ	0xFD9
  9721                           status	equ	0xFD8
  9722                           
  9723 ;; *************** function _Button_Reading_Update *****************
  9724 ;; Defined at:
  9725 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;  button          2    7[BANK0 ] PTR struct .
  9728 ;;		 -> mtouch_button(80), 
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;		None
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  1    wreg      void 
  9733 ;; Registers used:
  9734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9740 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9744 ;;Total ram usage:        2 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:    7
  9747 ;; This function calls:
  9748 ;;		_Button_Reading_Update_Helper
  9749 ;; This function is called by:
  9750 ;;		_Button_Service
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           	psect	text63
  9755  011E3A                     __ptext63:
  9756                           	opt stack 0
  9757  011E3A                     _Button_Reading_Update:
  9758                           	opt stack 20
  9759                           
  9760                           ;mtouch_button.c: 453: if (GIE == (uint8_t) 1)
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;incstack = 0
  9764  011E3A  AEF2               	btfss	intcon,7,c	;volatile
  9765  011E3C  D009               	goto	l920
  9766                           
  9767                           ;mtouch_button.c: 454: {
  9768                           ;mtouch_button.c: 455: GIE = (uint8_t) 0;
  9769  011E3E  9EF2               	bcf	intcon,7,c	;volatile
  9770                           
  9771                           ;mtouch_button.c: 456: Button_Reading_Update_Helper(button);
  9772  011E40  C0BC  F0B8         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
  9773  011E44  C0BD  F0B9         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
  9774  011E48  ECBA  F088         	call	_Button_Reading_Update_Helper	;wreg free
  9775                           
  9776                           ;mtouch_button.c: 457: GIE = (uint8_t) 1;
  9777  011E4C  8EF2               	bsf	intcon,7,c	;volatile
  9778                           
  9779                           ;mtouch_button.c: 458: }
  9780  011E4E  0012               	return	
  9781  011E50                     l920:
  9782                           
  9783                           ;mtouch_button.c: 459: else
  9784                           ;mtouch_button.c: 460: {
  9785                           ;mtouch_button.c: 461: Button_Reading_Update_Helper(button);
  9786  011E50  C0BC  F0B8         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
  9787  011E54  C0BD  F0B9         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
  9788  011E58  ECBA  F088         	call	_Button_Reading_Update_Helper	;wreg free
  9789  011E5C  0012               	return	
  9790  011E5E                     __end_of_Button_Reading_Update:
  9791                           	opt stack 0
  9792                           tosu	equ	0xFFF
  9793                           tosh	equ	0xFFE
  9794                           tosl	equ	0xFFD
  9795                           pclath	equ	0xFFA
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           indf1	equ	0xFE7
  9806                           postinc1	equ	0xFE6
  9807                           postdec1	equ	0xFE5
  9808                           fsr1h	equ	0xFE2
  9809                           fsr1l	equ	0xFE1
  9810                           indf2	equ	0xFDF
  9811                           postinc2	equ	0xFDE
  9812                           postdec2	equ	0xFDD
  9813                           plusw2	equ	0xFDB
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function _Button_Reading_Update_Helper *****************
  9819 ;; Defined at:
  9820 ;;		line 465 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  button          2    3[BANK0 ] PTR struct .
  9823 ;;		 -> mtouch_button(80), 
  9824 ;; Auto vars:     Size  Location     Type
  9825 ;;		None
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  1    wreg      void 
  9828 ;; Registers used:
  9829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 0/0
  9832 ;;		On exit  : 0/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9835 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9838 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9839 ;;Total ram usage:        4 bytes
  9840 ;; Hardware stack levels used:    1
  9841 ;; Hardware stack levels required when called:    6
  9842 ;; This function calls:
  9843 ;;		_MTOUCH_Sensor_RawSample_Get
  9844 ;; This function is called by:
  9845 ;;		_Button_Reading_Update
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           	psect	text64
  9850  011174                     __ptext64:
  9851                           	opt stack 0
  9852  011174                     _Button_Reading_Update_Helper:
  9853                           	opt stack 20
  9854                           
  9855                           ;mtouch_button.c: 467: if (button->state != MTOUCH_BUTTON_STATE_initializing)
  9856                           
  9857                           ;incstack = 0
  9858  011174  0100               	movlb	0	; () banked
  9859  011176  EE20 F002          	lfsr	2,2
  9860  01117A  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9861  01117C  26D9               	addwf	fsr2l,f,c
  9862  01117E  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9863  011180  22DA               	addwfc	fsr2h,f,c
  9864  011182  50DF               	movf	indf2,w,c
  9865  011184  B4D8               	btfsc	status,2,c
  9866  011186  D035               	goto	l925
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;mtouch_button.c: 468: {
  9870                           ;mtouch_button.c: 469: button->reading -= button->reading>>(uint8_t)2;
  9871  011188  EE20 F003          	lfsr	2,3
  9872  01118C  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9873  01118E  26D9               	addwf	fsr2l,f,c
  9874  011190  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9875  011192  22DA               	addwfc	fsr2h,f,c
  9876  011194  CFDE F0BA          	movff	postinc2,??_Button_Reading_Update_Helper
  9877  011198  CFDD F0BB          	movff	postdec2,??_Button_Reading_Update_Helper+1
  9878  01119C  90D8               	bcf	status,0,c
  9879  01119E  33BB               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
  9880  0111A0  33BA               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
  9881  0111A2  90D8               	bcf	status,0,c
  9882  0111A4  33BB               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
  9883  0111A6  33BA               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
  9884  0111A8  EE20 F003          	lfsr	2,3
  9885  0111AC  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9886  0111AE  26D9               	addwf	fsr2l,f,c
  9887  0111B0  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9888  0111B2  22DA               	addwfc	fsr2h,f,c
  9889  0111B4  51BA               	movf	??_Button_Reading_Update_Helper& (0+255),w,b
  9890  0111B6  5EDE               	subwf	postinc2,f,c
  9891  0111B8  51BB               	movf	(??_Button_Reading_Update_Helper+1)& (0+255),w,b
  9892  0111BA  5ADD               	subwfb	postdec2,f,c
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;mtouch_button.c: 470: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
  9896  0111BC  EE20 F001          	lfsr	2,1
  9897  0111C0  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9898  0111C2  26D9               	addwf	fsr2l,f,c
  9899  0111C4  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9900  0111C6  22DA               	addwfc	fsr2h,f,c
  9901  0111C8  50DF               	movf	indf2,w,c
  9902  0111CA  EC54  F08D         	call	_MTOUCH_Sensor_RawSample_Get
  9903  0111CE  0100               	movlb	0	; () banked
  9904  0111D0  90D8               	bcf	status,0,c
  9905  0111D2  33B6               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
  9906  0111D4  33B5               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
  9907  0111D6  90D8               	bcf	status,0,c
  9908  0111D8  33B6               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
  9909  0111DA  33B5               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
  9910  0111DC  EE20 F003          	lfsr	2,3
  9911  0111E0  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9912  0111E2  26D9               	addwf	fsr2l,f,c
  9913  0111E4  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9914  0111E6  22DA               	addwfc	fsr2h,f,c
  9915  0111E8  51B5               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
  9916  0111EA  26DE               	addwf	postinc2,f,c
  9917  0111EC  51B6               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
  9918  0111EE  22DD               	addwfc	postdec2,f,c
  9919                           
  9920                           ;mtouch_button.c: 471: }
  9921  0111F0  0012               	return	
  9922  0111F2                     l925:
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;mtouch_button.c: 472: else
  9926                           ;mtouch_button.c: 473: {
  9927                           ;mtouch_button.c: 474: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
  9928                           
  9929                           ; BSR set to: 0
  9930  0111F2  EE20 F001          	lfsr	2,1
  9931  0111F6  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9932  0111F8  26D9               	addwf	fsr2l,f,c
  9933  0111FA  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9934  0111FC  22DA               	addwfc	fsr2h,f,c
  9935  0111FE  50DF               	movf	indf2,w,c
  9936  011200  EC54  F08D         	call	_MTOUCH_Sensor_RawSample_Get
  9937  011204  0100               	movlb	0	; () banked
  9938  011206  EE20 F003          	lfsr	2,3
  9939  01120A  51B8               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
  9940  01120C  26D9               	addwf	fsr2l,f,c
  9941  01120E  51B9               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
  9942  011210  22DA               	addwfc	fsr2h,f,c
  9943  011212  C0B5  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
  9944  011216  C0B6  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
  9945  01121A  0012               	return	
  9946  01121C                     __end_of_Button_Reading_Update_Helper:
  9947                           	opt stack 0
  9948                           tosu	equ	0xFFF
  9949                           tosh	equ	0xFFE
  9950                           tosl	equ	0xFFD
  9951                           pclath	equ	0xFFA
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           postinc0	equ	0xFEE
  9960                           wreg	equ	0xFE8
  9961                           indf1	equ	0xFE7
  9962                           postinc1	equ	0xFE6
  9963                           postdec1	equ	0xFE5
  9964                           fsr1h	equ	0xFE2
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           plusw2	equ	0xFDB
  9970                           fsr2h	equ	0xFDA
  9971                           fsr2l	equ	0xFD9
  9972                           status	equ	0xFD8
  9973                           
  9974 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  9975 ;; Defined at:
  9976 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  name            1    wreg     enum E17513
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  name            1    2[BANK0 ] enum E17513
  9981 ;; Return value:  Size  Location     Type
  9982 ;;                  2    0[BANK0 ] unsigned int 
  9983 ;; Registers used:
  9984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9993 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9994 ;;Total ram usage:        3 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    5
  9997 ;; This function calls:
  9998 ;;		Nothing
  9999 ;; This function is called by:
 10000 ;;		_Button_Reading_Update_Helper
 10001 ;;		_Button_Baseline_Initialize
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text65
 10006  011AA8                     __ptext65:
 10007                           	opt stack 0
 10008  011AA8                     _MTOUCH_Sensor_RawSample_Get:
 10009                           	opt stack 20
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;incstack = 0
 10013                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 10014  011AA8  0100               	movlb	0	; () banked
 10015  011AAA  6FB7               	movwf	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 10016                           
 10017                           ;mtouch_sensor.c: 534: if (name < 5)
 10018  011AAC  0E05               	movlw	5
 10019  011AAE  0100               	movlb	0	; () banked
 10020  011AB0  61B7               	cpfslt	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 10021  011AB2  D011               	goto	l628
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;mtouch_sensor.c: 535: {
 10025                           ;mtouch_sensor.c: 536: return mtouch_sensor[name].rawSample;
 10026  011AB4  51B7               	movf	MTOUCH_Sensor_RawSample_Get@name& (0+255),w,b
 10027  011AB6  0D09               	mullw	9
 10028  011AB8  0E06               	movlw	6
 10029  011ABA  26F3               	addwf	prodl,f,c
 10030  011ABC  0E00               	movlw	0
 10031  011ABE  22F4               	addwfc	prodh,f,c
 10032  011AC0  0E88               	movlw	low _mtouch_sensor
 10033  011AC2  24F3               	addwf	prodl,w,c
 10034  011AC4  6ED9               	movwf	fsr2l,c
 10035  011AC6  0E00               	movlw	high _mtouch_sensor
 10036  011AC8  20F4               	addwfc	prodh,w,c
 10037  011ACA  6EDA               	movwf	fsr2h,c
 10038  011ACC  CFDE F0B5          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
 10039  011AD0  CFDD F0B6          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;mtouch_sensor.c: 537: }
 10043                           
 10044                           ; BSR set to: 0
 10045  011AD4  0012               	return	
 10046  011AD6                     l628:
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;mtouch_sensor.c: 538: else
 10050                           ;mtouch_sensor.c: 539: return (mtouch_sensor_sample_t)0;
 10051                           
 10052                           ; BSR set to: 0
 10053  011AD6  0E00               	movlw	0
 10054  011AD8  6FB6               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),b
 10055  011ADA  0E00               	movlw	0
 10056  011ADC  6FB5               	movwf	?_MTOUCH_Sensor_RawSample_Get& (0+255),b
 10057                           
 10058                           ; BSR set to: 0
 10059  011ADE  0012               	return	
 10060  011AE0                     __end_of_MTOUCH_Sensor_RawSample_Get:
 10061                           	opt stack 0
 10062                           tosu	equ	0xFFF
 10063                           tosh	equ	0xFFE
 10064                           tosl	equ	0xFFD
 10065                           pclath	equ	0xFFA
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           postinc0	equ	0xFEE
 10074                           wreg	equ	0xFE8
 10075                           indf1	equ	0xFE7
 10076                           postinc1	equ	0xFE6
 10077                           postdec1	equ	0xFE5
 10078                           fsr1h	equ	0xFE2
 10079                           fsr1l	equ	0xFE1
 10080                           indf2	equ	0xFDF
 10081                           postinc2	equ	0xFDE
 10082                           postdec2	equ	0xFDD
 10083                           plusw2	equ	0xFDB
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function _Button_Deviation_Update *****************
 10089 ;; Defined at:
 10090 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  button          2    0[BANK0 ] PTR struct .
 10093 ;;		 -> mtouch_button(80), 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  deviation       4    8[BANK0 ] long 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10106 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10107 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10108 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10109 ;;Total ram usage:       12 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    5
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_Button_Service
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           	psect	text66
 10120  010BFC                     __ptext66:
 10121                           	opt stack 0
 10122  010BFC                     _Button_Deviation_Update:
 10123                           	opt stack 22
 10124                           
 10125                           ;mtouch_button.c: 404: int32_t deviation;
 10126                           ;mtouch_button.c: 406: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;incstack = 0
 10130  010BFC  0100               	movlb	0	; () banked
 10131  010BFE  EE20 F005          	lfsr	2,5
 10132  010C02  51B5               	movf	Button_Deviation_Update@button& (0+255),w,b
 10133  010C04  26D9               	addwf	fsr2l,f,c
 10134  010C06  51B6               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 10135  010C08  22DA               	addwfc	fsr2h,f,c
 10136  010C0A  CFDE F0B7          	movff	postinc2,??_Button_Deviation_Update
 10137  010C0E  CFDE F0B8          	movff	postinc2,??_Button_Deviation_Update+1
 10138  010C12  CFDE F0B9          	movff	postinc2,??_Button_Deviation_Update+2
 10139  010C16  CFDE F0BA          	movff	postinc2,??_Button_Deviation_Update+3
 10140  010C1A  0E05               	movlw	5
 10141  010C1C  D005               	goto	u4330
 10142  010C1E                     u4335:
 10143  010C1E  90D8               	bcf	status,0,c
 10144  010C20  33BA               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 10145  010C22  33B9               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 10146  010C24  33B8               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 10147  010C26  33B7               	rrcf	??_Button_Deviation_Update& (0+255),f,b
 10148  010C28                     u4330:
 10149  010C28  2EE8               	decfsz	wreg,f,c
 10150  010C2A  D7F9               	goto	u4335
 10151  010C2C  1FB7               	comf	??_Button_Deviation_Update& (0+255),f,b
 10152  010C2E  1FB8               	comf	(??_Button_Deviation_Update+1)& (0+255),f,b
 10153  010C30  1FB9               	comf	(??_Button_Deviation_Update+2)& (0+255),f,b
 10154  010C32  1FBA               	comf	(??_Button_Deviation_Update+3)& (0+255),f,b
 10155  010C34  2BB7               	incf	??_Button_Deviation_Update& (0+255),f,b
 10156  010C36  0E00               	movlw	0
 10157  010C38  23B8               	addwfc	(??_Button_Deviation_Update+1)& (0+255),f,b
 10158  010C3A  23B9               	addwfc	(??_Button_Deviation_Update+2)& (0+255),f,b
 10159  010C3C  23BA               	addwfc	(??_Button_Deviation_Update+3)& (0+255),f,b
 10160  010C3E  EE20 F003          	lfsr	2,3
 10161  010C42  51B5               	movf	Button_Deviation_Update@button& (0+255),w,b
 10162  010C44  26D9               	addwf	fsr2l,f,c
 10163  010C46  51B6               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 10164  010C48  22DA               	addwfc	fsr2h,f,c
 10165  010C4A  CFDE F0BB          	movff	postinc2,??_Button_Deviation_Update+4
 10166  010C4E  CFDD F0BC          	movff	postdec2,??_Button_Deviation_Update+5
 10167  010C52  51BB               	movf	(??_Button_Deviation_Update+4)& (0+255),w,b
 10168  010C54  25B7               	addwf	??_Button_Deviation_Update& (0+255),w,b
 10169  010C56  6FBD               	movwf	Button_Deviation_Update@deviation& (0+255),b
 10170  010C58  51BC               	movf	(??_Button_Deviation_Update+5)& (0+255),w,b
 10171  010C5A  21B8               	addwfc	(??_Button_Deviation_Update+1)& (0+255),w,b
 10172  010C5C  6FBE               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 10173  010C5E  0E00               	movlw	0
 10174  010C60  21B9               	addwfc	(??_Button_Deviation_Update+2)& (0+255),w,b
 10175  010C62  6FBF               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 10176  010C64  0E00               	movlw	0
 10177  010C66  21BA               	addwfc	(??_Button_Deviation_Update+3)& (0+255),w,b
 10178  010C68  6FC0               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 10179                           
 10180                           ;mtouch_button.c: 409: deviation = deviation >> (button->scaling);
 10181  010C6A  EE20 F00F          	lfsr	2,15
 10182  010C6E  51B5               	movf	Button_Deviation_Update@button& (0+255),w,b
 10183  010C70  26D9               	addwf	fsr2l,f,c
 10184  010C72  51B6               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 10185  010C74  22DA               	addwfc	fsr2h,f,c
 10186  010C76  50DF               	movf	indf2,w,c
 10187  010C78  6FB7               	movwf	??_Button_Deviation_Update& (0+255),b
 10188  010C7A  C0BD  F0B8         	movff	Button_Deviation_Update@deviation,??_Button_Deviation_Update+1
 10189  010C7E  C0BE  F0B9         	movff	Button_Deviation_Update@deviation+1,??_Button_Deviation_Update+2
 10190  010C82  C0BF  F0BA         	movff	Button_Deviation_Update@deviation+2,??_Button_Deviation_Update+3
 10191  010C86  C0C0  F0BB         	movff	Button_Deviation_Update@deviation+3,??_Button_Deviation_Update+4
 10192  010C8A                     u4345:
 10193  010C8A  67B7               	tstfsz	??_Button_Deviation_Update& (0+255),b
 10194  010C8C  D001               	goto	u4346
 10195  010C8E  D007               	goto	u4347
 10196  010C90                     u4346:
 10197  010C90  35BB               	rlcf	(??_Button_Deviation_Update+4)& (0+255),w,b
 10198  010C92  33BB               	rrcf	(??_Button_Deviation_Update+4)& (0+255),f,b
 10199  010C94  33BA               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 10200  010C96  33B9               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 10201  010C98  33B8               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 10202  010C9A  2FB7               	decfsz	??_Button_Deviation_Update& (0+255),f,b
 10203  010C9C  D7F6               	goto	u4345
 10204  010C9E                     u4347:
 10205  010C9E  C0B8  F0BD         	movff	??_Button_Deviation_Update+1,Button_Deviation_Update@deviation
 10206  010CA2  C0B9  F0BE         	movff	??_Button_Deviation_Update+2,Button_Deviation_Update@deviation+1
 10207  010CA6  C0BA  F0BF         	movff	??_Button_Deviation_Update+3,Button_Deviation_Update@deviation+2
 10208  010CAA  C0BB  F0C0         	movff	??_Button_Deviation_Update+4,Button_Deviation_Update@deviation+3
 10209                           
 10210                           ;mtouch_button.c: 412: if (deviation > ((127)))
 10211  010CAE  0100               	movlb	0	; () banked
 10212  010CB0  BFC0               	btfsc	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 10213  010CB2  D010               	goto	l904
 10214  010CB4  51C0               	movf	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 10215  010CB6  11BF               	iorwf	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 10216  010CB8  11BE               	iorwf	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 10217  010CBA  E104               	bnz	u4350
 10218  010CBC  0E80               	movlw	128
 10219  010CBE  5DBD               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 10220  010CC0  A0D8               	btfss	status,0,c
 10221  010CC2  D008               	goto	l904
 10222  010CC4                     u4350:
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;mtouch_button.c: 413: {
 10226                           ;mtouch_button.c: 414: deviation = ((127));
 10227  010CC4  0E7F               	movlw	127
 10228  010CC6  6FBD               	movwf	Button_Deviation_Update@deviation& (0+255),b
 10229  010CC8  0E00               	movlw	0
 10230  010CCA  6FBE               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 10231  010CCC  0E00               	movlw	0
 10232  010CCE  6FBF               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 10233  010CD0  0E00               	movlw	0
 10234  010CD2  6FC0               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 10235  010CD4                     l904:
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;mtouch_button.c: 415: }
 10239                           ;mtouch_button.c: 416: if (deviation < ((-128)))
 10240                           
 10241                           ; BSR set to: 0
 10242  010CD4  AFC0               	btfss	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 10243  010CD6  D012               	goto	l905
 10244  010CD8  0E80               	movlw	128
 10245  010CDA  5DBD               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 10246  010CDC  0EFF               	movlw	255
 10247  010CDE  59BE               	subwfb	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 10248  010CE0  0EFF               	movlw	255
 10249  010CE2  59BF               	subwfb	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 10250  010CE4  0EFF               	movlw	255
 10251  010CE6  59C0               	subwfb	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 10252  010CE8  B0D8               	btfsc	status,0,c
 10253  010CEA  D008               	goto	l905
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;mtouch_button.c: 417: {
 10257                           ;mtouch_button.c: 418: deviation = ((-128));
 10258  010CEC  0E80               	movlw	128
 10259  010CEE  6FBD               	movwf	Button_Deviation_Update@deviation& (0+255),b
 10260  010CF0  0EFF               	movlw	255
 10261  010CF2  6FBE               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 10262  010CF4  0EFF               	movlw	255
 10263  010CF6  6FBF               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 10264  010CF8  0EFF               	movlw	255
 10265  010CFA  6FC0               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 10266  010CFC                     l905:
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;mtouch_button.c: 419: }
 10270                           ;mtouch_button.c: 421: button->deviation = (mtouch_button_deviation_t)deviation;
 10271                           
 10272                           ; BSR set to: 0
 10273  010CFC  EE20 F009          	lfsr	2,9
 10274  010D00  51B5               	movf	Button_Deviation_Update@button& (0+255),w,b
 10275  010D02  26D9               	addwf	fsr2l,f,c
 10276  010D04  51B6               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 10277  010D06  22DA               	addwfc	fsr2h,f,c
 10278  010D08  C0BD  FFDF         	movff	Button_Deviation_Update@deviation,indf2
 10279                           
 10280                           ; BSR set to: 0
 10281  010D0C  0012               	return		;funcret
 10282  010D0E                     __end_of_Button_Deviation_Update:
 10283                           	opt stack 0
 10284                           tosu	equ	0xFFF
 10285                           tosh	equ	0xFFE
 10286                           tosl	equ	0xFFD
 10287                           pclath	equ	0xFFA
 10288                           tblptru	equ	0xFF8
 10289                           tblptrh	equ	0xFF7
 10290                           tblptrl	equ	0xFF6
 10291                           tablat	equ	0xFF5
 10292                           prodh	equ	0xFF4
 10293                           prodl	equ	0xFF3
 10294                           intcon	equ	0xFF2
 10295                           postinc0	equ	0xFEE
 10296                           wreg	equ	0xFE8
 10297                           indf1	equ	0xFE7
 10298                           postinc1	equ	0xFE6
 10299                           postdec1	equ	0xFE5
 10300                           fsr1h	equ	0xFE2
 10301                           fsr1l	equ	0xFE1
 10302                           indf2	equ	0xFDF
 10303                           postinc2	equ	0xFDE
 10304                           postdec2	equ	0xFDD
 10305                           plusw2	equ	0xFDB
 10306                           fsr2h	equ	0xFDA
 10307                           fsr2l	equ	0xFD9
 10308                           status	equ	0xFD8
 10309                           
 10310 ;; *************** function _MTOUCH_Button_State_Get *****************
 10311 ;; Defined at:
 10312 ;;		line 513 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;  name            1    wreg     enum E17454
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;  name            1    0[BANK0 ] enum E17454
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  1    wreg      unsigned char 
 10319 ;; Registers used:
 10320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10330 ;;Total ram usage:        1 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    5
 10333 ;; This function calls:
 10334 ;;		Nothing
 10335 ;; This function is called by:
 10336 ;;		_main
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text67
 10341  011CD2                     __ptext67:
 10342                           	opt stack 0
 10343  011CD2                     _MTOUCH_Button_State_Get:
 10344                           	opt stack 25
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;incstack = 0
 10348                           ;MTOUCH_Button_State_Get@name stored from wreg
 10349  011CD2  0100               	movlb	0	; () banked
 10350  011CD4  6FB5               	movwf	MTOUCH_Button_State_Get@name& (0+255),b
 10351                           
 10352                           ;mtouch_button.c: 515: if(name < 5)
 10353  011CD6  0E05               	movlw	5
 10354  011CD8  0100               	movlb	0	; () banked
 10355  011CDA  61B5               	cpfslt	MTOUCH_Button_State_Get@name& (0+255),b
 10356  011CDC  D00E               	goto	l946
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;mtouch_button.c: 516: return (uint8_t)mtouch_button[name].state;
 10360  011CDE  51B5               	movf	MTOUCH_Button_State_Get@name& (0+255),w,b
 10361  011CE0  0D10               	mullw	16
 10362  011CE2  0E02               	movlw	2
 10363  011CE4  26F3               	addwf	prodl,f,c
 10364  011CE6  0E00               	movlw	0
 10365  011CE8  22F4               	addwfc	prodh,f,c
 10366  011CEA  0E40               	movlw	low _mtouch_button
 10367  011CEC  24F3               	addwf	prodl,w,c
 10368  011CEE  6ED9               	movwf	fsr2l,c
 10369  011CF0  0E01               	movlw	high _mtouch_button
 10370  011CF2  20F4               	addwfc	prodh,w,c
 10371  011CF4  6EDA               	movwf	fsr2h,c
 10372  011CF6  50DF               	movf	indf2,w,c
 10373                           
 10374                           ; BSR set to: 0
 10375                           
 10376                           ; BSR set to: 0
 10377  011CF8  0012               	return	
 10378  011CFA                     l946:
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;mtouch_button.c: 517: else
 10382                           ;mtouch_button.c: 518: return 0;
 10383                           
 10384                           ; BSR set to: 0
 10385  011CFA  0E00               	movlw	0
 10386                           
 10387                           ; BSR set to: 0
 10388  011CFC  0012               	return	
 10389  011CFE                     __end_of_MTOUCH_Button_State_Get:
 10390                           	opt stack 0
 10391                           tosu	equ	0xFFF
 10392                           tosh	equ	0xFFE
 10393                           tosl	equ	0xFFD
 10394                           pclath	equ	0xFFA
 10395                           tblptru	equ	0xFF8
 10396                           tblptrh	equ	0xFF7
 10397                           tblptrl	equ	0xFF6
 10398                           tablat	equ	0xFF5
 10399                           prodh	equ	0xFF4
 10400                           prodl	equ	0xFF3
 10401                           intcon	equ	0xFF2
 10402                           postinc0	equ	0xFEE
 10403                           wreg	equ	0xFE8
 10404                           indf1	equ	0xFE7
 10405                           postinc1	equ	0xFE6
 10406                           postdec1	equ	0xFE5
 10407                           fsr1h	equ	0xFE2
 10408                           fsr1l	equ	0xFE1
 10409                           indf2	equ	0xFDF
 10410                           postinc2	equ	0xFDE
 10411                           postdec2	equ	0xFDD
 10412                           plusw2	equ	0xFDB
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 10418 ;; Defined at:
 10419 ;;		line 71 in file "mcc_generated_files/interrupt_manager.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10435 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10436 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10437 ;;Total ram usage:       18 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    4
 10440 ;; This function calls:
 10441 ;;		Absolute function
 10442 ;;		_ADCC_ThresholdISR_mTouch
 10443 ;;		_EUSART2_Receive_ISR
 10444 ;;		_EUSART2_Transmit_ISR
 10445 ;; This function is called by:
 10446 ;;		Interrupt level 2
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	intcode
 10451  000008                     __pintcode:
 10452                           	opt stack 0
 10453  000008                     _INTERRUPT_InterruptManagerHigh:
 10454                           	opt stack 20
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;incstack = 0
 10458  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10459  00000A  CFFA F010          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 10460  00000E  CFFB F011          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 10461  000012  CFE9 F012          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 10462  000016  CFEA F013          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 10463  00001A  CFE1 F014          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 10464  00001E  CFE2 F015          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 10465  000022  CFD9 F016          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 10466  000026  CFDA F017          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 10467  00002A  CFF3 F018          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 10468  00002E  CFF4 F019          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 10469  000032  CFF6 F01A          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 10470  000036  CFF7 F01B          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 10471  00003A  CFF8 F01C          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 10472  00003E  CFF5 F01D          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 10473  000042  C046  F01E         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 10474  000046  C047  F01F         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 10475  00004A  C048  F020         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 10476  00004E  C049  F021         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 10477                           
 10478                           ;interrupt_manager.c: 74: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 10479  000052  010E               	movlb	14	; () banked
 10480  000054  BD2C               	btfsc	44,6,b	;volatile
 10481                           
 10482                           ; BSR set to: 14
 10483  000056  AD36               	btfss	54,6,b	;volatile
 10484  000058  D00A               	goto	i2l114
 10485                           
 10486                           ; BSR set to: 14
 10487                           ;interrupt_manager.c: 75: {
 10488                           ;interrupt_manager.c: 76: EUSART2_TxDefaultInterruptHandler();
 10489  00005A  D801               	call	i2u359_48
 10490  00005C  D01D               	goto	i2l118
 10491  00005E                     i2u359_48:
 10492  00005E  0005               	push	
 10493  000060  6EFA               	movwf	pclath,c
 10494  000062  5042               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 10495  000064  6EFD               	movwf	tosl,c
 10496  000066  5043               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 10497  000068  6EFE               	movwf	tosh,c
 10498  00006A  5044               	movf	_EUSART2_TxDefaultInterruptHandler+2,w,c
 10499  00006C  D00D               	goto	L4
 10500  00006E                     i2l114:
 10501                           
 10502                           ; BSR set to: 14
 10503                           ;interrupt_manager.c: 78: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 10504  00006E  BF2C               	btfsc	44,7,b	;volatile
 10505                           
 10506                           ; BSR set to: 14
 10507  000070  AF36               	btfss	54,7,b	;volatile
 10508  000072  D00D               	goto	i2l116
 10509                           
 10510                           ; BSR set to: 14
 10511                           ;interrupt_manager.c: 79: {
 10512                           ;interrupt_manager.c: 80: EUSART2_RxDefaultInterruptHandler();
 10513  000074  D801               	call	i2u362_48
 10514  000076  D010               	goto	i2l118
 10515  000078                     i2u362_48:
 10516  000078  0005               	push	
 10517  00007A  6EFA               	movwf	pclath,c
 10518  00007C  0100               	movlb	0	; () banked
 10519  00007E  51D5               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
 10520  000080  6EFD               	movwf	tosl,c
 10521  000082  51D6               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
 10522  000084  6EFE               	movwf	tosh,c
 10523  000086  51D7               	movf	(_EUSART2_RxDefaultInterruptHandler+2)& (0+255),w,b
 10524  000088                     L4:
 10525  000088  6EFF               	movwf	tosu,c
 10526  00008A  50FA               	movf	pclath,w,c
 10527  00008C  0012               	return		;indir
 10528  00008E                     i2l116:
 10529                           
 10530                           ; BSR set to: 14
 10531                           ;interrupt_manager.c: 82: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 10532  00008E  B32A               	btfsc	42,1,b	;volatile
 10533                           
 10534                           ; BSR set to: 14
 10535  000090  A334               	btfss	52,1,b	;volatile
 10536  000092  D002               	goto	i2l118
 10537                           
 10538                           ; BSR set to: 14
 10539                           ;interrupt_manager.c: 83: {
 10540                           ;interrupt_manager.c: 84: ADCC_ThresholdISR_mTouch();
 10541  000094  EC0C  F090         	call	_ADCC_ThresholdISR_mTouch	;wreg free
 10542  000098                     i2l118:
 10543                           
 10544                           ;interrupt_manager.c: 86: else
 10545                           ;interrupt_manager.c: 87: {
 10546  000098  C021  F049         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 10547  00009C  C020  F048         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 10548  0000A0  C01F  F047         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 10549  0000A4  C01E  F046         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 10550  0000A8  C01D  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 10551  0000AC  C01C  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 10552  0000B0  C01B  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 10553  0000B4  C01A  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 10554  0000B8  C019  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 10555  0000BC  C018  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 10556  0000C0  C017  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 10557  0000C4  C016  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 10558  0000C8  C015  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 10559  0000CC  C014  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 10560  0000D0  C013  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 10561  0000D4  C012  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 10562  0000D8  C011  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 10563  0000DC  C010  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 10564  0000E0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10565  0000E2  0011               	retfie		f
 10566  0000E4                     __end_of_INTERRUPT_InterruptManagerHigh:
 10567                           	opt stack 0
 10568                           tosu	equ	0xFFF
 10569                           tosh	equ	0xFFE
 10570                           tosl	equ	0xFFD
 10571                           pclatu	equ	0xFFB
 10572                           pclath	equ	0xFFA
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           intcon	equ	0xFF2
 10580                           postinc0	equ	0xFEE
 10581                           fsr0h	equ	0xFEA
 10582                           fsr0l	equ	0xFE9
 10583                           wreg	equ	0xFE8
 10584                           indf1	equ	0xFE7
 10585                           postinc1	equ	0xFE6
 10586                           postdec1	equ	0xFE5
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           plusw2	equ	0xFDB
 10593                           fsr2h	equ	0xFDA
 10594                           fsr2l	equ	0xFD9
 10595                           status	equ	0xFD8
 10596                           
 10597 ;; *************** function _EUSART2_Transmit_ISR *****************
 10598 ;; Defined at:
 10599 ;;		line 183 in file "mcc_generated_files/eusart2.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      void 
 10606 ;; Registers used:
 10607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10617 ;;Total ram usage:        0 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_EUSART2_Initialize
 10623 ;;		_INTERRUPT_InterruptManagerHigh
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           	psect	text69
 10628  011BAE                     __ptext69:
 10629                           	opt stack 0
 10630  011BAE                     _EUSART2_Transmit_ISR:
 10631                           	opt stack 23
 10632                           
 10633                           ;eusart2.c: 187: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 10634                           
 10635                           ;incstack = 0
 10636  011BAE  0E40               	movlw	64
 10637  011BB0  6045               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 10638  011BB2  D013               	goto	i2l209
 10639                           
 10640                           ;eusart2.c: 188: {
 10641                           ;eusart2.c: 189: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 10642  011BB4  5034               	movf	_eusart2TxTail,w,c	;volatile
 10643  011BB6  0D01               	mullw	1
 10644  011BB8  0E00               	movlw	low _eusart2TxBuffer
 10645  011BBA  24F3               	addwf	prodl,w,c
 10646  011BBC  6ED9               	movwf	fsr2l,c
 10647  011BBE  0E02               	movlw	high _eusart2TxBuffer
 10648  011BC0  20F4               	addwfc	prodh,w,c
 10649  011BC2  6EDA               	movwf	fsr2h,c
 10650  011BC4  50DF               	movf	indf2,w,c
 10651  011BC6  010E               	movlb	14	; () banked
 10652  011BC8  6FF2               	movwf	242,b	;volatile
 10653                           
 10654                           ; BSR set to: 14
 10655  011BCA  2A34               	incf	_eusart2TxTail,f,c	;volatile
 10656                           
 10657                           ; BSR set to: 14
 10658                           ;eusart2.c: 190: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 10659  011BCC  0E3F               	movlw	63
 10660  011BCE  6434               	cpfsgt	_eusart2TxTail,c	;volatile
 10661  011BD0  D002               	goto	i2l210
 10662                           
 10663                           ; BSR set to: 14
 10664                           ;eusart2.c: 191: {
 10665                           ;eusart2.c: 192: eusart2TxTail = 0;
 10666  011BD2  0E00               	movlw	0
 10667  011BD4  6E34               	movwf	_eusart2TxTail,c	;volatile
 10668  011BD6                     i2l210:
 10669                           
 10670                           ; BSR set to: 14
 10671                           ;eusart2.c: 193: }
 10672                           ;eusart2.c: 194: eusart2TxBufferRemaining++;
 10673                           
 10674                           ; BSR set to: 14
 10675  011BD6  2A45               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 10676                           
 10677                           ;eusart2.c: 195: }
 10678  011BD8  0012               	return	
 10679  011BDA                     i2l209:
 10680                           
 10681                           ;eusart2.c: 196: else
 10682                           ;eusart2.c: 197: {
 10683                           ;eusart2.c: 198: PIE3bits.TX2IE = 0;
 10684  011BDA  010E               	movlb	14	; () banked
 10685  011BDC  9D2C               	bcf	44,6,b	;volatile
 10686  011BDE  0012               	return	
 10687  011BE0                     __end_of_EUSART2_Transmit_ISR:
 10688                           	opt stack 0
 10689                           tosu	equ	0xFFF
 10690                           tosh	equ	0xFFE
 10691                           tosl	equ	0xFFD
 10692                           pclatu	equ	0xFFB
 10693                           pclath	equ	0xFFA
 10694                           tblptru	equ	0xFF8
 10695                           tblptrh	equ	0xFF7
 10696                           tblptrl	equ	0xFF6
 10697                           tablat	equ	0xFF5
 10698                           prodh	equ	0xFF4
 10699                           prodl	equ	0xFF3
 10700                           intcon	equ	0xFF2
 10701                           postinc0	equ	0xFEE
 10702                           fsr0h	equ	0xFEA
 10703                           fsr0l	equ	0xFE9
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postinc1	equ	0xFE6
 10707                           postdec1	equ	0xFE5
 10708                           fsr1h	equ	0xFE2
 10709                           fsr1l	equ	0xFE1
 10710                           indf2	equ	0xFDF
 10711                           postinc2	equ	0xFDE
 10712                           postdec2	equ	0xFDD
 10713                           plusw2	equ	0xFDB
 10714                           fsr2h	equ	0xFDA
 10715                           fsr2l	equ	0xFD9
 10716                           status	equ	0xFD8
 10717                           
 10718 ;; *************** function _EUSART2_Receive_ISR *****************
 10719 ;; Defined at:
 10720 ;;		line 202 in file "mcc_generated_files/eusart2.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;		None
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      void 
 10727 ;; Registers used:
 10728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10738 ;;Total ram usage:        0 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    3
 10741 ;; This function calls:
 10742 ;;		i2_printf
 10743 ;; This function is called by:
 10744 ;;		_EUSART2_Initialize
 10745 ;;		_INTERRUPT_InterruptManagerHigh
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	text70
 10750  0112B6                     __ptext70:
 10751                           	opt stack 0
 10752  0112B6                     _EUSART2_Receive_ISR:
 10753                           	opt stack 20
 10754                           
 10755                           ;eusart2.c: 205: if(1 == RC2STAbits.OERR)
 10756                           
 10757                           ; BSR set to: 14
 10758                           ;incstack = 0
 10759  0112B6  010E               	movlb	14	; () banked
 10760  0112B8  A3F5               	btfss	245,1,b	;volatile
 10761  0112BA  D002               	goto	i2l215
 10762                           
 10763                           ; BSR set to: 14
 10764                           ;eusart2.c: 206: {
 10765                           ;eusart2.c: 209: RC2STAbits.CREN = 0;
 10766  0112BC  99F5               	bcf	245,4,b	;volatile
 10767                           
 10768                           ;eusart2.c: 210: RC2STAbits.CREN = 1;
 10769  0112BE  89F5               	bsf	245,4,b	;volatile
 10770  0112C0                     i2l215:
 10771                           
 10772                           ; BSR set to: 14
 10773                           ;eusart2.c: 211: }
 10774                           ;eusart2.c: 214: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 10775                           
 10776                           ; BSR set to: 14
 10777  0112C0  5033               	movf	_eusart2RxHead,w,c	;volatile
 10778  0112C2  0D01               	mullw	1
 10779  0112C4  0E00               	movlw	low _eusart2RxBuffer
 10780  0112C6  24F3               	addwf	prodl,w,c
 10781  0112C8  6ED9               	movwf	fsr2l,c
 10782  0112CA  0E01               	movlw	high _eusart2RxBuffer
 10783  0112CC  20F4               	addwfc	prodh,w,c
 10784  0112CE  6EDA               	movwf	fsr2h,c
 10785  0112D0  CEF1 FFDF          	movff	3825,indf2	;volatile
 10786                           
 10787                           ; BSR set to: 14
 10788  0112D4  2A33               	incf	_eusart2RxHead,f,c	;volatile
 10789                           
 10790                           ; BSR set to: 14
 10791                           ;eusart2.c: 215: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 10792  0112D6  0E3F               	movlw	63
 10793  0112D8  6433               	cpfsgt	_eusart2RxHead,c	;volatile
 10794  0112DA  D002               	goto	i2l216
 10795                           
 10796                           ; BSR set to: 14
 10797                           ;eusart2.c: 216: {
 10798                           ;eusart2.c: 217: eusart2RxHead = 0;
 10799  0112DC  0E00               	movlw	0
 10800  0112DE  6E33               	movwf	_eusart2RxHead,c	;volatile
 10801  0112E0                     i2l216:
 10802                           
 10803                           ; BSR set to: 14
 10804                           ;eusart2.c: 218: }
 10805                           ;eusart2.c: 219: eusart2RxCount++;
 10806                           
 10807                           ; BSR set to: 14
 10808  0112E0  2A31               	incf	_eusart2RxCount,f,c	;volatile
 10809                           
 10810                           ; BSR set to: 14
 10811                           ;eusart2.c: 221: if((RC2REG == (int) '\n') || (RC2REG == (int) '\r')) {
 10812  0112E2  0E0A               	movlw	10
 10813  0112E4  19F1               	xorwf	241,w,b	;volatile
 10814  0112E6  B4D8               	btfsc	status,2,c
 10815  0112E8  D004               	goto	i2u343_40
 10816                           
 10817                           ; BSR set to: 14
 10818  0112EA  0E0D               	movlw	13
 10819  0112EC  19F1               	xorwf	241,w,b	;volatile
 10820  0112EE  A4D8               	btfss	status,2,c
 10821  0112F0  D005               	goto	i2l217
 10822  0112F2                     i2u343_40:
 10823                           
 10824                           ; BSR set to: 14
 10825                           ;eusart2.c: 223: eusart2RxStringReady = 1;
 10826                           
 10827                           ; BSR set to: 14
 10828  0112F2  0E01               	movlw	1
 10829  0112F4  6E30               	movwf	_eusart2RxStringReady,c	;volatile
 10830                           
 10831                           ;eusart2.c: 226: RC2REG = 0;
 10832  0112F6  0E00               	movlw	0
 10833  0112F8  6FF1               	movwf	241,b	;volatile
 10834                           
 10835                           ;eusart2.c: 228: }
 10836  0112FA  D002               	goto	i2l220
 10837  0112FC                     i2l217:
 10838                           
 10839                           ; BSR set to: 14
 10840                           ;eusart2.c: 230: else {
 10841                           ;eusart2.c: 232: eusart2RxStringReady = 0;
 10842                           
 10843                           ; BSR set to: 14
 10844  0112FC  0E00               	movlw	0
 10845  0112FE  6E30               	movwf	_eusart2RxStringReady,c	;volatile
 10846  011300                     i2l220:
 10847                           
 10848                           ; BSR set to: 14
 10849                           ;eusart2.c: 234: }
 10850                           ;eusart2.c: 237: if((RC2REG == (int) '\b')) {
 10851                           
 10852                           ; BSR set to: 14
 10853  011300  0E08               	movlw	8
 10854  011302  19F1               	xorwf	241,w,b	;volatile
 10855  011304  A4D8               	btfss	status,2,c
 10856  011306  0012               	return	
 10857                           
 10858                           ; BSR set to: 14
 10859                           ;eusart2.c: 239: eusart2RxBuffer[eusart2RxHead] = '\0';
 10860  011308  5033               	movf	_eusart2RxHead,w,c	;volatile
 10861  01130A  0D01               	mullw	1
 10862  01130C  0E00               	movlw	low _eusart2RxBuffer
 10863  01130E  24F3               	addwf	prodl,w,c
 10864  011310  6ED9               	movwf	fsr2l,c
 10865  011312  0E01               	movlw	high _eusart2RxBuffer
 10866  011314  20F4               	addwfc	prodh,w,c
 10867  011316  6EDA               	movwf	fsr2h,c
 10868  011318  0E00               	movlw	0
 10869  01131A  6EDF               	movwf	indf2,c
 10870                           
 10871                           ; BSR set to: 14
 10872                           ;eusart2.c: 240: eusart2RxHead--;
 10873  01131C  0633               	decf	_eusart2RxHead,f,c	;volatile
 10874                           
 10875                           ; BSR set to: 14
 10876                           ;eusart2.c: 243: printf("\033[K");
 10877  01131E  0EFB               	movlw	low STR_1
 10878  011320  6E03               	movwf	i2printf@f,c
 10879  011322  0EFF               	movlw	high STR_1
 10880  011324  6E04               	movwf	i2printf@f+1,c
 10881  011326  EC52  F08E         	call	i2_printf	;wreg free
 10882                           
 10883                           ;eusart2.c: 245: if(eusart2RxHead != eusart2RxTail) {
 10884  01132A  5032               	movf	_eusart2RxTail,w,c	;volatile
 10885  01132C  1833               	xorwf	_eusart2RxHead,w,c	;volatile
 10886  01132E  B4D8               	btfsc	status,2,c
 10887  011330  D00B               	goto	i2l222
 10888                           
 10889                           ;eusart2.c: 247: eusart2RxBuffer[eusart2RxHead] = '\0';
 10890  011332  5033               	movf	_eusart2RxHead,w,c	;volatile
 10891  011334  0D01               	mullw	1
 10892  011336  0E00               	movlw	low _eusart2RxBuffer
 10893  011338  24F3               	addwf	prodl,w,c
 10894  01133A  6ED9               	movwf	fsr2l,c
 10895  01133C  0E01               	movlw	high _eusart2RxBuffer
 10896  01133E  20F4               	addwfc	prodh,w,c
 10897  011340  6EDA               	movwf	fsr2h,c
 10898  011342  0E00               	movlw	0
 10899  011344  6EDF               	movwf	indf2,c
 10900                           
 10901                           ;eusart2.c: 248: eusart2RxHead--;
 10902  011346  0633               	decf	_eusart2RxHead,f,c	;volatile
 10903  011348                     i2l222:
 10904                           
 10905                           ;eusart2.c: 250: }
 10906                           ;eusart2.c: 252: RC2REG = 0;
 10907  011348  0E00               	movlw	0
 10908  01134A  010E               	movlb	14	; () banked
 10909  01134C  6FF1               	movwf	241,b	;volatile
 10910  01134E  0012               	return	
 10911  011350                     __end_of_EUSART2_Receive_ISR:
 10912                           	opt stack 0
 10913                           tosu	equ	0xFFF
 10914                           tosh	equ	0xFFE
 10915                           tosl	equ	0xFFD
 10916                           pclatu	equ	0xFFB
 10917                           pclath	equ	0xFFA
 10918                           tblptru	equ	0xFF8
 10919                           tblptrh	equ	0xFF7
 10920                           tblptrl	equ	0xFF6
 10921                           tablat	equ	0xFF5
 10922                           prodh	equ	0xFF4
 10923                           prodl	equ	0xFF3
 10924                           intcon	equ	0xFF2
 10925                           postinc0	equ	0xFEE
 10926                           fsr0h	equ	0xFEA
 10927                           fsr0l	equ	0xFE9
 10928                           wreg	equ	0xFE8
 10929                           indf1	equ	0xFE7
 10930                           postinc1	equ	0xFE6
 10931                           postdec1	equ	0xFE5
 10932                           fsr1h	equ	0xFE2
 10933                           fsr1l	equ	0xFE1
 10934                           indf2	equ	0xFDF
 10935                           postinc2	equ	0xFDE
 10936                           postdec2	equ	0xFDD
 10937                           plusw2	equ	0xFDB
 10938                           fsr2h	equ	0xFDA
 10939                           fsr2l	equ	0xFD9
 10940                           status	equ	0xFD8
 10941                           
 10942 ;; *************** function i2_printf *****************
 10943 ;; Defined at:
 10944 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  f               2    2[COMRAM] PTR const unsigned char 
 10947 ;;		 -> STR_28(3), STR_27(288), STR_26(3), STR_24(3), 
 10948 ;;		 -> STR_23(28), STR_22(3), STR_19(4), STR_18(5), 
 10949 ;;		 -> STR_16(4), STR_15(5), STR_13(3), STR_12(14), 
 10950 ;;		 -> STR_11(3), STR_9(3), STR_8(18), STR_7(3), 
 10951 ;;		 -> STR_5(3), STR_4(174), STR_3(4), STR_2(5), 
 10952 ;;		 -> STR_1(4), 
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;  printf          4    0        struct .
 10955 ;;  printf          3    0        PTR const unsigned char 
 10956 ;;  printf          2    4[COMRAM] PTR void [1]
 10957 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10958 ;;  printf          2    0        unsigned int 
 10959 ;;  printf          2    0        unsigned int 
 10960 ;;  printf          1    6[COMRAM] char 
 10961 ;;  printf          1    0        unsigned char 
 10962 ;;  printf          1    0        char 
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  2    2[COMRAM] int 
 10965 ;; Registers used:
 10966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10972 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10973 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10975 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10976 ;;Total ram usage:        5 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    2
 10979 ;; This function calls:
 10980 ;;		i2_putch
 10981 ;; This function is called by:
 10982 ;;		_EUSART2_Receive_ISR
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text71
 10987  011CA4                     __ptext71:
 10988                           	opt stack 0
 10989  011CA4                     i2_printf:
 10990                           	opt stack 20
 10991                           
 10992                           ;doprnt.c: 466: va_list ap;
 10993                           ;doprnt.c: 499: signed char c;
 10994                           ;doprnt.c: 506: signed char prec;
 10995                           ;doprnt.c: 508: unsigned char flag;
 10996                           ;doprnt.c: 523: union {
 10997                           ;doprnt.c: 524: unsigned long vd;
 10998                           ;doprnt.c: 525: double integ;
 10999                           ;doprnt.c: 526: } tmpval;
 11000                           ;doprnt.c: 528: unsigned int val;
 11001                           ;doprnt.c: 529: unsigned len;
 11002                           ;doprnt.c: 530: const char * cp;
 11003                           ;doprnt.c: 533: *ap = __va_start();
 11004                           
 11005                           ; BSR set to: 14
 11006                           ;incstack = 0
 11007  011CA4  0E05               	movlw	low (?i2_printf+2)
 11008  011CA6  6E05               	movwf	i2printf@ap,c
 11009  011CA8  0E00               	movlw	high (?i2_printf+2)
 11010  011CAA  6E06               	movwf	i2printf@ap+1,c
 11011                           
 11012                           ;doprnt.c: 536: while(c = *f++) {
 11013  011CAC  D003               	goto	i2l964
 11014  011CAE                     
 11015                           ;doprnt.c: 540: {
 11016                           ;doprnt.c: 541: (putch(c) );
 11017  011CAE  5007               	movf	i2printf@c,w,c
 11018  011CB0  EC07  F090         	call	i2_putch
 11019  011CB4                     i2l964:
 11020  011CB4  C003  FFF6         	movff	i2printf@f,tblptrl
 11021  011CB8  C004  FFF7         	movff	i2printf@f+1,tblptrh
 11022  011CBC  4A03               	infsnz	i2printf@f,f,c
 11023  011CBE  2A04               	incf	i2printf@f+1,f,c
 11024  011CC0                     	if	0	;tblptru may be non-zero
 11025  011CC0                     	endif
 11026  011CC0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11027  011CC0  0E00               	movlw	low (__mediumconst shr (0+16))
 11028  011CC2  6EF8               	movwf	tblptru,c
 11029  011CC4                     	endif
 11030  011CC4  0008               	tblrd		*
 11031  011CC6  CFF5 F007          	movff	tablat,i2printf@c
 11032  011CCA  5007               	movf	i2printf@c,w,c
 11033  011CCC  B4D8               	btfsc	status,2,c
 11034  011CCE  0012               	return	
 11035  011CD0  D7EE               	goto	i2l965
 11036  011CD2                     __end_ofi2_printf:
 11037                           	opt stack 0
 11038                           tosu	equ	0xFFF
 11039                           tosh	equ	0xFFE
 11040                           tosl	equ	0xFFD
 11041                           pclatu	equ	0xFFB
 11042                           pclath	equ	0xFFA
 11043                           tblptru	equ	0xFF8
 11044                           tblptrh	equ	0xFF7
 11045                           tblptrl	equ	0xFF6
 11046                           tablat	equ	0xFF5
 11047                           prodh	equ	0xFF4
 11048                           prodl	equ	0xFF3
 11049                           intcon	equ	0xFF2
 11050                           postinc0	equ	0xFEE
 11051                           fsr0h	equ	0xFEA
 11052                           fsr0l	equ	0xFE9
 11053                           wreg	equ	0xFE8
 11054                           indf1	equ	0xFE7
 11055                           postinc1	equ	0xFE6
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           plusw2	equ	0xFDB
 11063                           fsr2h	equ	0xFDA
 11064                           fsr2l	equ	0xFD9
 11065                           status	equ	0xFD8
 11066                           
 11067 ;; *************** function i2_putch *****************
 11068 ;; Defined at:
 11069 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;  txData          1    wreg     unsigned char 
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;  txData          1    1[COMRAM] unsigned char 
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      void 
 11076 ;; Registers used:
 11077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11087 ;;Total ram usage:        1 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    1
 11090 ;; This function calls:
 11091 ;;		i2_EUSART2_Write
 11092 ;; This function is called by:
 11093 ;;		i2_printf
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text72
 11098  01200E                     __ptext72:
 11099                           	opt stack 0
 11100  01200E                     i2_putch:
 11101                           	opt stack 20
 11102                           
 11103                           ;incstack = 0
 11104                           ;i2putch@txData stored from wreg
 11105  01200E  6E02               	movwf	i2putch@txData,c
 11106                           
 11107                           ;eusart2.c: 180: EUSART2_Write(txData);
 11108  012010  5002               	movf	i2putch@txData,w,c
 11109  012012  ECE1  F08C         	call	i2_EUSART2_Write
 11110  012016  0012               	return		;funcret
 11111  012018                     __end_ofi2_putch:
 11112                           	opt stack 0
 11113                           tosu	equ	0xFFF
 11114                           tosh	equ	0xFFE
 11115                           tosl	equ	0xFFD
 11116                           pclatu	equ	0xFFB
 11117                           pclath	equ	0xFFA
 11118                           tblptru	equ	0xFF8
 11119                           tblptrh	equ	0xFF7
 11120                           tblptrl	equ	0xFF6
 11121                           tablat	equ	0xFF5
 11122                           prodh	equ	0xFF4
 11123                           prodl	equ	0xFF3
 11124                           intcon	equ	0xFF2
 11125                           postinc0	equ	0xFEE
 11126                           fsr0h	equ	0xFEA
 11127                           fsr0l	equ	0xFE9
 11128                           wreg	equ	0xFE8
 11129                           indf1	equ	0xFE7
 11130                           postinc1	equ	0xFE6
 11131                           postdec1	equ	0xFE5
 11132                           fsr1h	equ	0xFE2
 11133                           fsr1l	equ	0xFE1
 11134                           indf2	equ	0xFDF
 11135                           postinc2	equ	0xFDE
 11136                           postdec2	equ	0xFDD
 11137                           plusw2	equ	0xFDB
 11138                           fsr2h	equ	0xFDA
 11139                           fsr2l	equ	0xFD9
 11140                           status	equ	0xFD8
 11141                           
 11142 ;; *************** function i2_EUSART2_Write *****************
 11143 ;; Defined at:
 11144 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  txData          1    wreg     unsigned char 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  txData          1    0[COMRAM] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11162 ;;Total ram usage:        1 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		i2_putch
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           	psect	text73
 11172  0119C2                     __ptext73:
 11173                           	opt stack 0
 11174  0119C2                     i2_EUSART2_Write:
 11175                           	opt stack 20
 11176                           
 11177                           ;incstack = 0
 11178                           ;i2EUSART2_Write@txData stored from wreg
 11179  0119C2  6E01               	movwf	i2EUSART2_Write@txData,c
 11180  0119C4                     
 11181                           ;eusart2.c: 153: {
 11182                           
 11183                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 11184  0119C4  5045               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 11185  0119C6  B4D8               	btfsc	status,2,c
 11186  0119C8  D7FD               	goto	i2l3195
 11187                           
 11188                           ;eusart2.c: 154: }
 11189                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 11190  0119CA  010E               	movlb	14	; () banked
 11191  0119CC  BD2C               	btfsc	44,6,b	;volatile
 11192  0119CE  D003               	goto	i2l197
 11193                           
 11194                           ; BSR set to: 14
 11195                           ;eusart2.c: 157: {
 11196                           ;eusart2.c: 158: TX2REG = txData;
 11197  0119D0  C001  FEF2         	movff	i2EUSART2_Write@txData,3826	;volatile
 11198                           
 11199                           ;eusart2.c: 159: }
 11200  0119D4  D012               	goto	i2l198
 11201  0119D6                     i2l197:
 11202                           
 11203                           ; BSR set to: 14
 11204                           ;eusart2.c: 160: else
 11205                           ;eusart2.c: 161: {
 11206                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 11207  0119D6  9D2C               	bcf	44,6,b	;volatile
 11208                           
 11209                           ; BSR set to: 14
 11210                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 11211  0119D8  5035               	movf	_eusart2TxHead,w,c	;volatile
 11212  0119DA  0D01               	mullw	1
 11213  0119DC  0E00               	movlw	low _eusart2TxBuffer
 11214  0119DE  24F3               	addwf	prodl,w,c
 11215  0119E0  6ED9               	movwf	fsr2l,c
 11216  0119E2  0E02               	movlw	high _eusart2TxBuffer
 11217  0119E4  20F4               	addwfc	prodh,w,c
 11218  0119E6  6EDA               	movwf	fsr2h,c
 11219  0119E8  C001  FFDF         	movff	i2EUSART2_Write@txData,indf2
 11220                           
 11221                           ; BSR set to: 14
 11222  0119EC  2A35               	incf	_eusart2TxHead,f,c	;volatile
 11223                           
 11224                           ; BSR set to: 14
 11225                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 11226  0119EE  0E3F               	movlw	63
 11227  0119F0  6435               	cpfsgt	_eusart2TxHead,c	;volatile
 11228  0119F2  D002               	goto	i2l199
 11229                           
 11230                           ; BSR set to: 14
 11231                           ;eusart2.c: 165: {
 11232                           ;eusart2.c: 166: eusart2TxHead = 0;
 11233  0119F4  0E00               	movlw	0
 11234  0119F6  6E35               	movwf	_eusart2TxHead,c	;volatile
 11235  0119F8                     i2l199:
 11236                           
 11237                           ; BSR set to: 14
 11238                           ;eusart2.c: 167: }
 11239                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 11240                           
 11241                           ; BSR set to: 14
 11242  0119F8  0645               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 11243  0119FA                     i2l198:
 11244                           
 11245                           ; BSR set to: 14
 11246                           ;eusart2.c: 169: }
 11247                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 11248                           
 11249                           ; BSR set to: 14
 11250  0119FA  8D2C               	bsf	44,6,b	;volatile
 11251                           
 11252                           ; BSR set to: 14
 11253  0119FC  0012               	return		;funcret
 11254  0119FE                     __end_ofi2_EUSART2_Write:
 11255                           	opt stack 0
 11256                           tosu	equ	0xFFF
 11257                           tosh	equ	0xFFE
 11258                           tosl	equ	0xFFD
 11259                           pclatu	equ	0xFFB
 11260                           pclath	equ	0xFFA
 11261                           tblptru	equ	0xFF8
 11262                           tblptrh	equ	0xFF7
 11263                           tblptrl	equ	0xFF6
 11264                           tablat	equ	0xFF5
 11265                           prodh	equ	0xFF4
 11266                           prodl	equ	0xFF3
 11267                           intcon	equ	0xFF2
 11268                           postinc0	equ	0xFEE
 11269                           fsr0h	equ	0xFEA
 11270                           fsr0l	equ	0xFE9
 11271                           wreg	equ	0xFE8
 11272                           indf1	equ	0xFE7
 11273                           postinc1	equ	0xFE6
 11274                           postdec1	equ	0xFE5
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 11286 ;; Defined at:
 11287 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      void 
 11294 ;; Registers used:
 11295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11305 ;;Total ram usage:        0 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		_MTOUCH_Sensor_Service
 11310 ;; This function is called by:
 11311 ;;		_INTERRUPT_InterruptManagerHigh
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text74
 11316  012018                     __ptext74:
 11317                           	opt stack 0
 11318  012018                     _ADCC_ThresholdISR_mTouch:
 11319                           	opt stack 20
 11320                           
 11321                           ;mtouch_sensor.c: 478: PIR1bits.ADTIF = 0;
 11322                           
 11323                           ; BSR set to: 14
 11324                           ;incstack = 0
 11325  012018  010E               	movlb	14	; () banked
 11326  01201A  9334               	bcf	52,1,b	;volatile
 11327                           
 11328                           ; BSR set to: 14
 11329                           ;mtouch_sensor.c: 479: MTOUCH_Sensor_Service();
 11330  01201C  ECA9  F08A         	call	_MTOUCH_Sensor_Service	;wreg free
 11331  012020  0012               	return		;funcret
 11332  012022                     __end_of_ADCC_ThresholdISR_mTouch:
 11333                           	opt stack 0
 11334                           tosu	equ	0xFFF
 11335                           tosh	equ	0xFFE
 11336                           tosl	equ	0xFFD
 11337                           pclatu	equ	0xFFB
 11338                           pclath	equ	0xFFA
 11339                           tblptru	equ	0xFF8
 11340                           tblptrh	equ	0xFF7
 11341                           tblptrl	equ	0xFF6
 11342                           tablat	equ	0xFF5
 11343                           prodh	equ	0xFF4
 11344                           prodl	equ	0xFF3
 11345                           intcon	equ	0xFF2
 11346                           postinc0	equ	0xFEE
 11347                           fsr0h	equ	0xFEA
 11348                           fsr0l	equ	0xFE9
 11349                           wreg	equ	0xFE8
 11350                           indf1	equ	0xFE7
 11351                           postinc1	equ	0xFE6
 11352                           postdec1	equ	0xFE5
 11353                           fsr1h	equ	0xFE2
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           plusw2	equ	0xFDB
 11359                           fsr2h	equ	0xFDA
 11360                           fsr2l	equ	0xFD9
 11361                           status	equ	0xFD8
 11362                           
 11363 ;; *************** function _MTOUCH_Sensor_Service *****************
 11364 ;; Defined at:
 11365 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  sensor          2   13[COMRAM] PTR struct .
 11370 ;;		 -> mtouch_sensor(45), 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  1    wreg      void 
 11373 ;; Registers used:
 11374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11384 ;;Total ram usage:        2 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    2
 11387 ;; This function calls:
 11388 ;;		_Sensor_autoCalibration
 11389 ;;		_Sensor_setSampled
 11390 ;;		i2_Sensor_SetTrisBit
 11391 ;;		i2_Sensor_isCalibrated
 11392 ;;		i2_Sensor_scheduleNextScan
 11393 ;; This function is called by:
 11394 ;;		_ADCC_ThresholdISR_mTouch
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text75
 11399  011552                     __ptext75:
 11400                           	opt stack 0
 11401  011552                     _MTOUCH_Sensor_Service:
 11402                           	opt stack 20
 11403                           
 11404                           ;mtouch_sensor.c: 490: mtouch_sensor_t* sensor;
 11405                           ;mtouch_sensor.c: 492: Sensor_SetTrisBit(currentScanSensor,0);
 11406                           
 11407                           ;incstack = 0
 11408  011552  0E00               	movlw	0
 11409  011554  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 11410  011556  502E               	movf	_currentScanSensor,w,c
 11411  011558  EC14  F08B         	call	i2_Sensor_SetTrisBit
 11412                           
 11413                           ;mtouch_sensor.c: 494: if(scanInterrupted)
 11414  01155C  502C               	movf	_scanInterrupted,w,c	;volatile
 11415  01155E  B4D8               	btfsc	status,2,c
 11416  011560  D002               	goto	i2l617
 11417                           
 11418                           ;mtouch_sensor.c: 495: {
 11419                           ;mtouch_sensor.c: 496: ADCON0bits.ADON = 0;
 11420  011562  9E60               	bcf	3936,7,c	;volatile
 11421                           
 11422                           ;mtouch_sensor.c: 497: }
 11423  011564  D02B               	goto	i2l618
 11424  011566                     i2l617:
 11425                           
 11426                           ;mtouch_sensor.c: 498: else
 11427                           ;mtouch_sensor.c: 499: {
 11428                           ;mtouch_sensor.c: 500: ADCON0bits.ADON = 0;
 11429  011566  9E60               	bcf	3936,7,c	;volatile
 11430                           
 11431                           ;mtouch_sensor.c: 501: sensor = &mtouch_sensor[currentScanSensor];
 11432  011568  502E               	movf	_currentScanSensor,w,c
 11433  01156A  0D09               	mullw	9
 11434  01156C  0E88               	movlw	low _mtouch_sensor
 11435  01156E  24F3               	addwf	prodl,w,c
 11436  011570  6E0E               	movwf	MTOUCH_Sensor_Service@sensor,c
 11437  011572  0E00               	movlw	high _mtouch_sensor
 11438  011574  20F4               	addwfc	prodh,w,c
 11439  011576  6E0F               	movwf	MTOUCH_Sensor_Service@sensor+1,c
 11440                           
 11441                           ;mtouch_sensor.c: 502: if(!Sensor_isCalibrated(sensor))
 11442  011578  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 11443  01157C  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,i2Sensor_isCalibrated@sensor+1
 11444  011580  EC9D  F08F         	call	i2_Sensor_isCalibrated	;wreg free
 11445  011584  0900               	iorlw	0
 11446  011586  A4D8               	btfss	status,2,c
 11447  011588  D007               	goto	i2l619
 11448                           
 11449                           ;mtouch_sensor.c: 503: {
 11450                           ;mtouch_sensor.c: 504: Sensor_autoCalibration(sensor);
 11451  01158A  C00E  F005         	movff	MTOUCH_Sensor_Service@sensor,Sensor_autoCalibration@sensor
 11452  01158E  C00F  F006         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_autoCalibration@sensor+1
 11453  011592  ECD7  F084         	call	_Sensor_autoCalibration	;wreg free
 11454                           
 11455                           ;mtouch_sensor.c: 505: }
 11456  011596  D006               	goto	i2l620
 11457  011598                     i2l619:
 11458                           
 11459                           ;mtouch_sensor.c: 506: else
 11460                           ;mtouch_sensor.c: 507: {
 11461                           ;mtouch_sensor.c: 508: Sensor_setSampled(sensor);
 11462  011598  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 11463  01159C  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_setSampled@sensor+1
 11464  0115A0  ECD9  F08F         	call	_Sensor_setSampled	;wreg free
 11465  0115A4                     i2l620:
 11466                           
 11467                           ;mtouch_sensor.c: 509: }
 11468                           ;mtouch_sensor.c: 510: packet_sample[currentScanSensor] = ADFLTR;
 11469  0115A4  502E               	movf	_currentScanSensor,w,c
 11470  0115A6  0D02               	mullw	2
 11471  0115A8  0E7E               	movlw	low _packet_sample
 11472  0115AA  24F3               	addwf	prodl,w,c
 11473  0115AC  6ED9               	movwf	fsr2l,c
 11474  0115AE  0E00               	movlw	high _packet_sample
 11475  0115B0  20F4               	addwfc	prodh,w,c
 11476  0115B2  6EDA               	movwf	fsr2h,c
 11477  0115B4  CF72 FFDE          	movff	3954,postinc2	;volatile
 11478  0115B8  CF73 FFDD          	movff	3955,postdec2	;volatile
 11479  0115BC                     i2l618:
 11480                           
 11481                           ;mtouch_sensor.c: 511: }
 11482                           ;mtouch_sensor.c: 512: Sensor_scheduleNextScan();
 11483  0115BC  EC31  F084         	call	i2_Sensor_scheduleNextScan	;wreg free
 11484  0115C0  0012               	return		;funcret
 11485  0115C2                     __end_of_MTOUCH_Sensor_Service:
 11486                           	opt stack 0
 11487                           tosu	equ	0xFFF
 11488                           tosh	equ	0xFFE
 11489                           tosl	equ	0xFFD
 11490                           pclatu	equ	0xFFB
 11491                           pclath	equ	0xFFA
 11492                           tblptru	equ	0xFF8
 11493                           tblptrh	equ	0xFF7
 11494                           tblptrl	equ	0xFF6
 11495                           tablat	equ	0xFF5
 11496                           prodh	equ	0xFF4
 11497                           prodl	equ	0xFF3
 11498                           intcon	equ	0xFF2
 11499                           postinc0	equ	0xFEE
 11500                           fsr0h	equ	0xFEA
 11501                           fsr0l	equ	0xFE9
 11502                           wreg	equ	0xFE8
 11503                           indf1	equ	0xFE7
 11504                           postinc1	equ	0xFE6
 11505                           postdec1	equ	0xFE5
 11506                           fsr1h	equ	0xFE2
 11507                           fsr1l	equ	0xFE1
 11508                           indf2	equ	0xFDF
 11509                           postinc2	equ	0xFDE
 11510                           postdec2	equ	0xFDD
 11511                           plusw2	equ	0xFDB
 11512                           fsr2h	equ	0xFDA
 11513                           fsr2l	equ	0xFD9
 11514                           status	equ	0xFD8
 11515                           
 11516 ;; *************** function i2_Sensor_scheduleNextScan *****************
 11517 ;; Defined at:
 11518 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;		None
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;  Sensor_sched    2    6[COMRAM] PTR struct .
 11523 ;;		 -> mtouch_sensor(45), 
 11524 ;;  Sensor_sched    1    5[COMRAM] unsigned char 
 11525 ;;  Sensor_sched    1    4[COMRAM] unsigned char 
 11526 ;; Return value:  Size  Location     Type
 11527 ;;                  1    wreg      void 
 11528 ;; Registers used:
 11529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11530 ;; Tracked objects:
 11531 ;;		On entry : 0/0
 11532 ;;		On exit  : 0/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11536 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11538 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11539 ;;Total ram usage:        6 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; Hardware stack levels required when called:    1
 11542 ;; This function calls:
 11543 ;;		i2_MTOUCH_Sensor_isEnabled
 11544 ;;		i2_MTOUCH_Sensor_wasSampled
 11545 ;;		i2_Sensor_SetTrisBit
 11546 ;;		i2_Sensor_isCalibrated
 11547 ;;		i2_Sensor_isCalibratingAcqTime
 11548 ;; This function is called by:
 11549 ;;		_MTOUCH_Sensor_Service
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text76
 11554  010862                     __ptext76:
 11555                           	opt stack 0
 11556  010862                     i2_Sensor_scheduleNextScan:
 11557                           	opt stack 20
 11558                           
 11559                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
 11560                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
 11561                           
 11562                           ;incstack = 0
 11563  010862  0E00               	movlw	0
 11564  010864  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 11565                           
 11566                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
 11567  010866  0E00               	movlw	0
 11568  010868  BEF2               	btfsc	intcon,7,c	;volatile
 11569  01086A  0E01               	movlw	1
 11570  01086C  6E05               	movwf	i2Sensor_scheduleNextScan@state,c
 11571                           
 11572                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 11573  01086E  D00C               	goto	i2l582
 11574  010870                     
 11575                           ;mtouch_sensor.c: 347: {
 11576                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
 11577  010870  2A2E               	incf	_currentScanSensor,f,c
 11578  010872  0E05               	movlw	5
 11579  010874  182E               	xorwf	_currentScanSensor,w,c
 11580  010876  A4D8               	btfss	status,2,c
 11581  010878  D007               	goto	i2l582
 11582                           
 11583                           ;mtouch_sensor.c: 349: {
 11584                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
 11585  01087A  0E00               	movlw	0
 11586  01087C  6E2E               	movwf	_currentScanSensor,c
 11587                           
 11588                           ;mtouch_sensor.c: 351: sampling_flag = 0;
 11589  01087E  0E00               	movlw	0
 11590  010880  6E2D               	movwf	_sampling_flag,c
 11591                           
 11592                           ;mtouch_sensor.c: 352: skipScan = 1;
 11593  010882  0E01               	movlw	1
 11594  010884  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 11595                           
 11596                           ;mtouch_sensor.c: 353: break;
 11597  010886  D00C               	goto	i2u311_40
 11598  010888                     i2l582:
 11599  010888  502E               	movf	_currentScanSensor,w,c
 11600  01088A  ECF0  F08D         	call	i2_MTOUCH_Sensor_wasSampled
 11601  01088E  0900               	iorlw	0
 11602  010890  A4D8               	btfss	status,2,c
 11603  010892  D7EE               	goto	i2l581
 11604  010894  502E               	movf	_currentScanSensor,w,c
 11605  010896  EC09  F08E         	call	i2_MTOUCH_Sensor_isEnabled
 11606  01089A  0900               	iorlw	0
 11607  01089C  B4D8               	btfsc	status,2,c
 11608  01089E  D7E8               	goto	i2l581
 11609  0108A0                     i2u311_40:
 11610                           
 11611                           ;mtouch_sensor.c: 354: }
 11612                           ;mtouch_sensor.c: 355: }
 11613                           ;mtouch_sensor.c: 358: if(skipScan==0)
 11614  0108A0  5006               	movf	i2Sensor_scheduleNextScan@skipScan,w,c
 11615  0108A2  A4D8               	btfss	status,2,c
 11616  0108A4  0012               	return	
 11617                           
 11618                           ;mtouch_sensor.c: 359: {
 11619                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
 11620  0108A6  502E               	movf	_currentScanSensor,w,c
 11621  0108A8  0D09               	mullw	9
 11622  0108AA  0E88               	movlw	low _mtouch_sensor
 11623  0108AC  24F3               	addwf	prodl,w,c
 11624  0108AE  6E07               	movwf	i2Sensor_scheduleNextScan@sensor,c
 11625  0108B0  0E00               	movlw	high _mtouch_sensor
 11626  0108B2  20F4               	addwfc	prodh,w,c
 11627  0108B4  6E08               	movwf	i2Sensor_scheduleNextScan@sensor+1,c
 11628                           
 11629                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
 11630  0108B6  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 11631  0108BA  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibrated@sensor+1
 11632  0108BE  EC9D  F08F         	call	i2_Sensor_isCalibrated	;wreg free
 11633  0108C2  0900               	iorlw	0
 11634  0108C4  B4D8               	btfsc	status,2,c
 11635  0108C6  D012               	goto	i2l585
 11636                           
 11637                           ;mtouch_sensor.c: 362: {
 11638                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
 11639  0108C8  EE20 F003          	lfsr	2,3
 11640  0108CC  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11641  0108CE  26D9               	addwf	fsr2l,f,c
 11642  0108D0  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11643  0108D2  22DA               	addwfc	fsr2h,f,c
 11644  0108D4  50DF               	movf	indf2,w,c
 11645  0108D6  010F               	movlb	15	; () banked
 11646  0108D8  6F5C               	movwf	92,b	;volatile
 11647                           
 11648                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
 11649  0108DA  EE20 F002          	lfsr	2,2
 11650  0108DE  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11651  0108E0  26D9               	addwf	fsr2l,f,c
 11652  0108E2  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11653  0108E4  22DA               	addwfc	fsr2h,f,c
 11654  0108E6  50DF               	movf	indf2,w,c
 11655  0108E8  6F5E               	movwf	94,b	;volatile
 11656                           
 11657                           ;mtouch_sensor.c: 365: }
 11658  0108EA  D01F               	goto	i2l588
 11659  0108EC                     i2l585:
 11660                           
 11661                           ;mtouch_sensor.c: 366: else
 11662                           ;mtouch_sensor.c: 367: {
 11663                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
 11664                           
 11665                           ; BSR set to: 15
 11666  0108EC  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 11667  0108F0  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 11668  0108F4  ECA9  F08F         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 11669  0108F8  0900               	iorlw	0
 11670  0108FA  B4D8               	btfsc	status,2,c
 11671  0108FC  D011               	goto	i2l587
 11672                           
 11673                           ;mtouch_sensor.c: 369: {
 11674                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
 11675  0108FE  EE20 F002          	lfsr	2,2
 11676  010902  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11677  010904  26D9               	addwf	fsr2l,f,c
 11678  010906  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11679  010908  22DA               	addwfc	fsr2h,f,c
 11680  01090A  50DF               	movf	indf2,w,c
 11681  01090C  010F               	movlb	15	; () banked
 11682  01090E  6F5E               	movwf	94,b	;volatile
 11683                           
 11684                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
 11685  010910  EE20 F003          	lfsr	2,3
 11686  010914  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11687  010916  26D9               	addwf	fsr2l,f,c
 11688  010918  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11689  01091A  22DA               	addwfc	fsr2h,f,c
 11690  01091C  50DF               	movf	indf2,w,c
 11691  01091E  D004               	goto	L5
 11692  010920                     i2l587:
 11693                           
 11694                           ;mtouch_sensor.c: 373: else
 11695                           ;mtouch_sensor.c: 374: {
 11696                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 11697                           
 11698                           ; BSR set to: 15
 11699  010920  0E80               	movlw	128
 11700  010922  010F               	movlb	15	; () banked
 11701  010924  6F5E               	movwf	94,b	;volatile
 11702                           
 11703                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 11704  010926  0E80               	movlw	128
 11705  010928                     L5:
 11706  010928  6F5C               	movwf	92,b	;volatile
 11707  01092A                     i2l588:
 11708                           
 11709                           ; BSR set to: 15
 11710                           ;mtouch_sensor.c: 377: }
 11711                           ;mtouch_sensor.c: 378: }
 11712                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
 11713                           
 11714                           ; BSR set to: 15
 11715                           
 11716                           ; BSR set to: 15
 11717  01092A  502A               	movf	_sample_delay,w,c
 11718  01092C  275E               	addwf	94,f,b	;volatile
 11719                           
 11720                           ; BSR set to: 15
 11721                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
 11722  01092E  EE20 F001          	lfsr	2,1
 11723  010932  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11724  010934  26D9               	addwf	fsr2l,f,c
 11725  010936  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11726  010938  22DA               	addwfc	fsr2h,f,c
 11727  01093A  50DF               	movf	indf2,w,c
 11728  01093C  6F5F               	movwf	95,b	;volatile
 11729                           
 11730                           ; BSR set to: 15
 11731                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
 11732  01093E  EE20 F004          	lfsr	2,4
 11733  010942  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11734  010944  26D9               	addwf	fsr2l,f,c
 11735  010946  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11736  010948  22DA               	addwfc	fsr2h,f,c
 11737  01094A  50DF               	movf	indf2,w,c
 11738  01094C  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 11739  01094E  90D8               	bcf	status,0,c
 11740  010950  3003               	rrcf	??i2_Sensor_scheduleNextScan,w,c
 11741  010952  6E66               	movwf	3942,c	;volatile
 11742                           
 11743                           ; BSR set to: 15
 11744                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
 11745  010954  EE20 F005          	lfsr	2,5
 11746  010958  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11747  01095A  26D9               	addwf	fsr2l,f,c
 11748  01095C  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11749  01095E  22DA               	addwfc	fsr2h,f,c
 11750  010960  50DF               	movf	indf2,w,c
 11751  010962  6F5D               	movwf	93,b	;volatile
 11752                           
 11753                           ; BSR set to: 15
 11754                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
 11755  010964  8E60               	bsf	3936,7,c	;volatile
 11756                           
 11757                           ; BSR set to: 15
 11758                           ;mtouch_sensor.c: 385: sampling_flag= 1;
 11759  010966  0E01               	movlw	1
 11760  010968  6E2D               	movwf	_sampling_flag,c
 11761                           
 11762                           ; BSR set to: 15
 11763                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
 11764  01096A  0E01               	movlw	1
 11765  01096C  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 11766  01096E  502E               	movf	_currentScanSensor,w,c
 11767  010970  EC14  F08B         	call	i2_Sensor_SetTrisBit
 11768                           
 11769                           ;mtouch_sensor.c: 387: GIE = 0;
 11770  010974  9EF2               	bcf	intcon,7,c	;volatile
 11771                           
 11772                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
 11773  010976  8060               	bsf	3936,0,c	;volatile
 11774                           
 11775                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 11776  010978  EE20 F004          	lfsr	2,4
 11777  01097C  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 11778  01097E  26D9               	addwf	fsr2l,f,c
 11779  010980  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 11780  010982  22DA               	addwfc	fsr2h,f,c
 11781  010984  50DF               	movf	indf2,w,c
 11782  010986  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 11783  010988  6A04               	clrf	(??i2_Sensor_scheduleNextScan+1)& (0+255),c
 11784  01098A  0E09               	movlw	9
 11785  01098C                     i2u315_45:
 11786  01098C  90D8               	bcf	status,0,c
 11787  01098E  3603               	rlcf	??i2_Sensor_scheduleNextScan,f,c
 11788  010990  3604               	rlcf	??i2_Sensor_scheduleNextScan+1,f,c
 11789  010992  2EE8               	decfsz	wreg,f,c
 11790  010994  D7FB               	goto	i2u315_45
 11791  010996  C003  FF70         	movff	??i2_Sensor_scheduleNextScan,3952	;volatile
 11792  01099A  C004  FF71         	movff	??i2_Sensor_scheduleNextScan+1,3953	;volatile
 11793                           
 11794                           ;mtouch_sensor.c: 390: GIE = state;
 11795  01099E  A005               	btfss	i2Sensor_scheduleNextScan@state,0,c
 11796  0109A0  D002               	goto	i2u316_40
 11797  0109A2  8EF2               	bsf	intcon,7,c	;volatile
 11798  0109A4  D001               	goto	i2u317_45
 11799  0109A6                     i2u316_40:
 11800  0109A6  9EF2               	bcf	intcon,7,c	;volatile
 11801  0109A8                     i2u317_45:
 11802                           
 11803                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
 11804  0109A8  0E00               	movlw	0
 11805  0109AA  6E2C               	movwf	_scanInterrupted,c	;volatile
 11806  0109AC  0012               	return	
 11807  0109AE                     __end_ofi2_Sensor_scheduleNextScan:
 11808                           	opt stack 0
 11809                           tosu	equ	0xFFF
 11810                           tosh	equ	0xFFE
 11811                           tosl	equ	0xFFD
 11812                           pclatu	equ	0xFFB
 11813                           pclath	equ	0xFFA
 11814                           tblptru	equ	0xFF8
 11815                           tblptrh	equ	0xFF7
 11816                           tblptrl	equ	0xFF6
 11817                           tablat	equ	0xFF5
 11818                           prodh	equ	0xFF4
 11819                           prodl	equ	0xFF3
 11820                           intcon	equ	0xFF2
 11821                           postinc0	equ	0xFEE
 11822                           fsr0h	equ	0xFEA
 11823                           fsr0l	equ	0xFE9
 11824                           wreg	equ	0xFE8
 11825                           indf1	equ	0xFE7
 11826                           postinc1	equ	0xFE6
 11827                           postdec1	equ	0xFE5
 11828                           fsr1h	equ	0xFE2
 11829                           fsr1l	equ	0xFE1
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           plusw2	equ	0xFDB
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function i2_Sensor_isCalibrated *****************
 11839 ;; Defined at:
 11840 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  sensor          2    0[COMRAM] PTR struct .
 11843 ;;		 -> mtouch_sensor(45), 
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;		None
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      unsigned char 
 11848 ;; Registers used:
 11849 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11859 ;;Total ram usage:        2 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; This function calls:
 11862 ;;		Nothing
 11863 ;; This function is called by:
 11864 ;;		_MTOUCH_Sensor_Service
 11865 ;;		i2_Sensor_scheduleNextScan
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           	psect	text77
 11870  011F3A                     __ptext77:
 11871                           	opt stack 0
 11872  011F3A                     i2_Sensor_isCalibrated:
 11873                           	opt stack 20
 11874                           
 11875                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
 11876                           
 11877                           ;incstack = 0
 11878  011F3A  EE20 F008          	lfsr	2,8
 11879  011F3E  5001               	movf	i2Sensor_isCalibrated@sensor,w,c
 11880  011F40  26D9               	addwf	fsr2l,f,c
 11881  011F42  5002               	movf	i2Sensor_isCalibrated@sensor+1,w,c
 11882  011F44  22DA               	addwfc	fsr2h,f,c
 11883  011F46  A6DF               	btfss	indf2,3,c
 11884  011F48  D002               	goto	i2u272_40
 11885  011F4A  0E01               	movlw	1
 11886  011F4C  0012               	return	
 11887  011F4E                     i2u272_40:
 11888  011F4E  0E00               	movlw	0
 11889  011F50  0012               	return	
 11890  011F52                     __end_ofi2_Sensor_isCalibrated:
 11891                           	opt stack 0
 11892                           tosu	equ	0xFFF
 11893                           tosh	equ	0xFFE
 11894                           tosl	equ	0xFFD
 11895                           pclatu	equ	0xFFB
 11896                           pclath	equ	0xFFA
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           intcon	equ	0xFF2
 11904                           postinc0	equ	0xFEE
 11905                           fsr0h	equ	0xFEA
 11906                           fsr0l	equ	0xFE9
 11907                           wreg	equ	0xFE8
 11908                           indf1	equ	0xFE7
 11909                           postinc1	equ	0xFE6
 11910                           postdec1	equ	0xFE5
 11911                           fsr1h	equ	0xFE2
 11912                           fsr1l	equ	0xFE1
 11913                           indf2	equ	0xFDF
 11914                           postinc2	equ	0xFDE
 11915                           postdec2	equ	0xFDD
 11916                           plusw2	equ	0xFDB
 11917                           fsr2h	equ	0xFDA
 11918                           fsr2l	equ	0xFD9
 11919                           status	equ	0xFD8
 11920                           
 11921 ;; *************** function i2_Sensor_SetTrisBit *****************
 11922 ;; Defined at:
 11923 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  sensor          1    wreg     enum E17513
 11926 ;;  TrisBit         1    0[COMRAM] unsigned char 
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;  sensor          1    1[COMRAM] enum E17513
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, status,2, status,0
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11938 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11942 ;;Total ram usage:        2 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_MTOUCH_Sensor_Service
 11948 ;;		i2_Sensor_scheduleNextScan
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           	psect	text78
 11953  011628                     __ptext78:
 11954                           	opt stack 0
 11955  011628                     i2_Sensor_SetTrisBit:
 11956                           	opt stack 20
 11957                           
 11958                           ;incstack = 0
 11959                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 11960  011628  6E02               	movwf	i2Sensor_SetTrisBit@sensor,c
 11961                           
 11962                           ;mtouch_sensor.c: 224: switch(sensor)
 11963  01162A  D01E               	goto	i2l551
 11964  01162C                     i2l552:
 11965                           
 11966                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
 11967  01162C  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 11968  01162E  D002               	bra	i2u265_45
 11969  011630  9485               	bcf	3973,2,c	;volatile
 11970  011632  D001               	bra	i2u265_46
 11971  011634                     i2u265_45:
 11972  011634  8485               	bsf	3973,2,c	;volatile
 11973  011636                     i2u265_46:
 11974                           
 11975                           ;mtouch_sensor.c: 228: break;
 11976  011636  0012               	return	
 11977  011638                     i2l554:
 11978                           
 11979                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
 11980  011638  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 11981  01163A  D002               	bra	i2u266_45
 11982  01163C  9685               	bcf	3973,3,c	;volatile
 11983  01163E  D001               	bra	i2u266_46
 11984  011640                     i2u266_45:
 11985  011640  8685               	bsf	3973,3,c	;volatile
 11986  011642                     i2u266_46:
 11987                           
 11988                           ;mtouch_sensor.c: 231: break;
 11989  011642  0012               	return	
 11990  011644                     i2l555:
 11991                           
 11992                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
 11993  011644  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 11994  011646  D002               	bra	i2u267_45
 11995  011648  9885               	bcf	3973,4,c	;volatile
 11996  01164A  D001               	bra	i2u267_46
 11997  01164C                     i2u267_45:
 11998  01164C  8885               	bsf	3973,4,c	;volatile
 11999  01164E                     i2u267_46:
 12000                           
 12001                           ;mtouch_sensor.c: 234: break;
 12002  01164E  0012               	return	
 12003  011650                     i2l556:
 12004                           
 12005                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
 12006  011650  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 12007  011652  D002               	bra	i2u268_45
 12008  011654  9A85               	bcf	3973,5,c	;volatile
 12009  011656  D001               	bra	i2u268_46
 12010  011658                     i2u268_45:
 12011  011658  8A85               	bsf	3973,5,c	;volatile
 12012  01165A                     i2u268_46:
 12013                           
 12014                           ;mtouch_sensor.c: 237: break;
 12015  01165A  0012               	return	
 12016  01165C                     i2l557:
 12017                           
 12018                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
 12019  01165C  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 12020  01165E  D002               	bra	i2u269_45
 12021  011660  9C85               	bcf	3973,6,c	;volatile
 12022  011662  D001               	bra	i2u269_46
 12023  011664                     i2u269_45:
 12024  011664  8C85               	bsf	3973,6,c	;volatile
 12025  011666                     i2u269_46:
 12026                           
 12027                           ;mtouch_sensor.c: 242: }
 12028                           
 12029                           ;mtouch_sensor.c: 241: default: break;
 12030                           
 12031                           ;mtouch_sensor.c: 240: break;
 12032  011666  0012               	return	
 12033  011668                     i2l551:
 12034  011668  5002               	movf	i2Sensor_SetTrisBit@sensor,w,c
 12035                           
 12036                           ; Switch size 1, requested type "space"
 12037                           ; Number of cases is 5, Range of values is 0 to 4
 12038                           ; switch strategies available:
 12039                           ; Name         Instructions Cycles
 12040                           ; simple_byte           16     9 (average)
 12041                           ;	Chosen strategy is simple_byte
 12042  01166A  0A00               	xorlw	0	; case 0
 12043  01166C  B4D8               	btfsc	status,2,c
 12044  01166E  D7DE               	goto	i2l552
 12045  011670  0A01               	xorlw	1	; case 1
 12046  011672  B4D8               	btfsc	status,2,c
 12047  011674  D7E1               	goto	i2l554
 12048  011676  0A03               	xorlw	3	; case 2
 12049  011678  B4D8               	btfsc	status,2,c
 12050  01167A  D7E4               	goto	i2l555
 12051  01167C  0A01               	xorlw	1	; case 3
 12052  01167E  B4D8               	btfsc	status,2,c
 12053  011680  D7E7               	goto	i2l556
 12054  011682  0A07               	xorlw	7	; case 4
 12055  011684  A4D8               	btfss	status,2,c
 12056  011686  0012               	return	
 12057  011688  D7E9               	goto	i2l557
 12058  01168A                     __end_ofi2_Sensor_SetTrisBit:
 12059                           	opt stack 0
 12060                           tosu	equ	0xFFF
 12061                           tosh	equ	0xFFE
 12062                           tosl	equ	0xFFD
 12063                           pclatu	equ	0xFFB
 12064                           pclath	equ	0xFFA
 12065                           tblptru	equ	0xFF8
 12066                           tblptrh	equ	0xFF7
 12067                           tblptrl	equ	0xFF6
 12068                           tablat	equ	0xFF5
 12069                           prodh	equ	0xFF4
 12070                           prodl	equ	0xFF3
 12071                           intcon	equ	0xFF2
 12072                           postinc0	equ	0xFEE
 12073                           fsr0h	equ	0xFEA
 12074                           fsr0l	equ	0xFE9
 12075                           wreg	equ	0xFE8
 12076                           indf1	equ	0xFE7
 12077                           postinc1	equ	0xFE6
 12078                           postdec1	equ	0xFE5
 12079                           fsr1h	equ	0xFE2
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           plusw2	equ	0xFDB
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 12090 ;; Defined at:
 12091 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;  sensor          1    wreg     enum E17513
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;  sensor          1    0[COMRAM] enum E17513
 12096 ;; Return value:  Size  Location     Type
 12097 ;;                  1    wreg      unsigned char 
 12098 ;; Registers used:
 12099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12109 ;;Total ram usage:        1 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		i2_Sensor_scheduleNextScan
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text79
 12119  011BE0                     __ptext79:
 12120                           	opt stack 0
 12121  011BE0                     i2_MTOUCH_Sensor_wasSampled:
 12122                           	opt stack 20
 12123                           
 12124                           ;incstack = 0
 12125                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 12126  011BE0  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor,c
 12127                           
 12128                           ;mtouch_sensor.c: 822: if(sensor < 5)
 12129  011BE2  0E05               	movlw	5
 12130  011BE4  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor,c
 12131  011BE6  D013               	goto	i2l745
 12132                           
 12133                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
 12134  011BE8  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor,w,c
 12135  011BEA  0D09               	mullw	9
 12136  011BEC  0E08               	movlw	8
 12137  011BEE  26F3               	addwf	prodl,f,c
 12138  011BF0  0E00               	movlw	0
 12139  011BF2  22F4               	addwfc	prodh,f,c
 12140  011BF4  0E88               	movlw	low _mtouch_sensor
 12141  011BF6  24F3               	addwf	prodl,w,c
 12142  011BF8  6ED9               	movwf	fsr2l,c
 12143  011BFA  0E00               	movlw	high _mtouch_sensor
 12144  011BFC  20F4               	addwfc	prodh,w,c
 12145  011BFE  6EDA               	movwf	fsr2h,c
 12146  011C00  0100               	movlb	0	; () banked
 12147  011C02  A2DF               	btfss	indf2,1,c
 12148  011C04  D002               	goto	i2u275_40
 12149  011C06  0E01               	movlw	1
 12150  011C08  0012               	return	
 12151  011C0A                     i2u275_40:
 12152  011C0A  0E00               	movlw	0
 12153                           
 12154                           ; BSR set to: 0
 12155                           
 12156                           ; BSR set to: 0
 12157  011C0C  0012               	return	
 12158  011C0E                     i2l745:
 12159                           
 12160                           ;mtouch_sensor.c: 824: else
 12161                           ;mtouch_sensor.c: 825: return 0;
 12162                           
 12163                           ; BSR set to: 0
 12164  011C0E  0E00               	movlw	0
 12165  011C10  0012               	return	
 12166  011C12                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 12167                           	opt stack 0
 12168                           tosu	equ	0xFFF
 12169                           tosh	equ	0xFFE
 12170                           tosl	equ	0xFFD
 12171                           pclatu	equ	0xFFB
 12172                           pclath	equ	0xFFA
 12173                           tblptru	equ	0xFF8
 12174                           tblptrh	equ	0xFF7
 12175                           tblptrl	equ	0xFF6
 12176                           tablat	equ	0xFF5
 12177                           prodh	equ	0xFF4
 12178                           prodl	equ	0xFF3
 12179                           intcon	equ	0xFF2
 12180                           postinc0	equ	0xFEE
 12181                           fsr0h	equ	0xFEA
 12182                           fsr0l	equ	0xFE9
 12183                           wreg	equ	0xFE8
 12184                           indf1	equ	0xFE7
 12185                           postinc1	equ	0xFE6
 12186                           postdec1	equ	0xFE5
 12187                           fsr1h	equ	0xFE2
 12188                           fsr1l	equ	0xFE1
 12189                           indf2	equ	0xFDF
 12190                           postinc2	equ	0xFDE
 12191                           postdec2	equ	0xFDD
 12192                           plusw2	equ	0xFDB
 12193                           fsr2h	equ	0xFDA
 12194                           fsr2l	equ	0xFD9
 12195                           status	equ	0xFD8
 12196                           
 12197 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 12198 ;; Defined at:
 12199 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;  sensor          1    wreg     enum E17513
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  sensor          1    0[COMRAM] enum E17513
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      unsigned char 
 12206 ;; Registers used:
 12207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12217 ;;Total ram usage:        1 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		i2_Sensor_scheduleNextScan
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           	psect	text80
 12227  011C12                     __ptext80:
 12228                           	opt stack 0
 12229  011C12                     i2_MTOUCH_Sensor_isEnabled:
 12230                           	opt stack 20
 12231                           
 12232                           ;incstack = 0
 12233                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 12234  011C12  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor,c
 12235                           
 12236                           ;mtouch_sensor.c: 719: if(sensor < 5)
 12237  011C14  0E05               	movlw	5
 12238  011C16  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor,c
 12239  011C18  D013               	goto	i2l699
 12240                           
 12241                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
 12242  011C1A  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor,w,c
 12243  011C1C  0D09               	mullw	9
 12244  011C1E  0E08               	movlw	8
 12245  011C20  26F3               	addwf	prodl,f,c
 12246  011C22  0E00               	movlw	0
 12247  011C24  22F4               	addwfc	prodh,f,c
 12248  011C26  0E88               	movlw	low _mtouch_sensor
 12249  011C28  24F3               	addwf	prodl,w,c
 12250  011C2A  6ED9               	movwf	fsr2l,c
 12251  011C2C  0E00               	movlw	high _mtouch_sensor
 12252  011C2E  20F4               	addwfc	prodh,w,c
 12253  011C30  6EDA               	movwf	fsr2h,c
 12254  011C32  0100               	movlb	0	; () banked
 12255  011C34  A0DF               	btfss	indf2,0,c
 12256  011C36  D002               	goto	i2u271_40
 12257  011C38  0E01               	movlw	1
 12258  011C3A  0012               	return	
 12259  011C3C                     i2u271_40:
 12260  011C3C  0E00               	movlw	0
 12261                           
 12262                           ; BSR set to: 0
 12263                           
 12264                           ; BSR set to: 0
 12265  011C3E  0012               	return	
 12266  011C40                     i2l699:
 12267                           
 12268                           ;mtouch_sensor.c: 721: else
 12269                           ;mtouch_sensor.c: 722: return 0;
 12270                           
 12271                           ; BSR set to: 0
 12272  011C40  0E00               	movlw	0
 12273  011C42  0012               	return	
 12274  011C44                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 12275                           	opt stack 0
 12276                           tosu	equ	0xFFF
 12277                           tosh	equ	0xFFE
 12278                           tosl	equ	0xFFD
 12279                           pclatu	equ	0xFFB
 12280                           pclath	equ	0xFFA
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           prodh	equ	0xFF4
 12286                           prodl	equ	0xFF3
 12287                           intcon	equ	0xFF2
 12288                           postinc0	equ	0xFEE
 12289                           fsr0h	equ	0xFEA
 12290                           fsr0l	equ	0xFE9
 12291                           wreg	equ	0xFE8
 12292                           indf1	equ	0xFE7
 12293                           postinc1	equ	0xFE6
 12294                           postdec1	equ	0xFE5
 12295                           fsr1h	equ	0xFE2
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           plusw2	equ	0xFDB
 12301                           fsr2h	equ	0xFDA
 12302                           fsr2l	equ	0xFD9
 12303                           status	equ	0xFD8
 12304                           
 12305 ;; *************** function _Sensor_setSampled *****************
 12306 ;; Defined at:
 12307 ;;		line 833 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  sensor          2    0[COMRAM] PTR struct .
 12310 ;;		 -> mtouch_sensor(45), 
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;		None
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  1    wreg      void 
 12315 ;; Registers used:
 12316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12326 ;;Total ram usage:        2 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_MTOUCH_Sensor_Service
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text81
 12336  011FB2                     __ptext81:
 12337                           	opt stack 0
 12338  011FB2                     _Sensor_setSampled:
 12339                           	opt stack 21
 12340                           
 12341                           ;mtouch_sensor.c: 835: sensor->sampled = 1;
 12342                           
 12343                           ;incstack = 0
 12344  011FB2  EE20 F008          	lfsr	2,8
 12345  011FB6  5001               	movf	Sensor_setSampled@sensor,w,c
 12346  011FB8  26D9               	addwf	fsr2l,f,c
 12347  011FBA  5002               	movf	Sensor_setSampled@sensor+1,w,c
 12348  011FBC  22DA               	addwfc	fsr2h,f,c
 12349  011FBE  82DF               	bsf	indf2,1,c
 12350  011FC0  0012               	return		;funcret
 12351  011FC2                     __end_of_Sensor_setSampled:
 12352                           	opt stack 0
 12353                           tosu	equ	0xFFF
 12354                           tosh	equ	0xFFE
 12355                           tosl	equ	0xFFD
 12356                           pclatu	equ	0xFFB
 12357                           pclath	equ	0xFFA
 12358                           tblptru	equ	0xFF8
 12359                           tblptrh	equ	0xFF7
 12360                           tblptrl	equ	0xFF6
 12361                           tablat	equ	0xFF5
 12362                           prodh	equ	0xFF4
 12363                           prodl	equ	0xFF3
 12364                           intcon	equ	0xFF2
 12365                           postinc0	equ	0xFEE
 12366                           fsr0h	equ	0xFEA
 12367                           fsr0l	equ	0xFE9
 12368                           wreg	equ	0xFE8
 12369                           indf1	equ	0xFE7
 12370                           postinc1	equ	0xFE6
 12371                           postdec1	equ	0xFE5
 12372                           fsr1h	equ	0xFE2
 12373                           fsr1l	equ	0xFE1
 12374                           indf2	equ	0xFDF
 12375                           postinc2	equ	0xFDE
 12376                           postdec2	equ	0xFDD
 12377                           plusw2	equ	0xFDB
 12378                           fsr2h	equ	0xFDA
 12379                           fsr2l	equ	0xFD9
 12380                           status	equ	0xFD8
 12381                           
 12382 ;; *************** function _Sensor_autoCalibration *****************
 12383 ;; Defined at:
 12384 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  sensor          2    4[COMRAM] PTR struct .
 12387 ;;		 -> mtouch_sensor(45), 
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;  name            1   12[COMRAM] enum E17513
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      enum E17519
 12392 ;; Registers used:
 12393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12401 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12402 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12403 ;;Total ram usage:        9 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    1
 12406 ;; This function calls:
 12407 ;;		_Sensor_setCalibratAcqTime
 12408 ;;		_Sensor_setCalibrated
 12409 ;;		i2_Sensor_isCalibratingAcqTime
 12410 ;;		i2_abs
 12411 ;; This function is called by:
 12412 ;;		_MTOUCH_Sensor_Service
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           	psect	text82
 12417  0109AE                     __ptext82:
 12418                           	opt stack 0
 12419  0109AE                     _Sensor_autoCalibration:
 12420                           	opt stack 20
 12421                           
 12422                           ;mtouch_sensor.c: 404: enum mtouch_sensor_names name = sensor->sensor_name;
 12423                           
 12424                           ;incstack = 0
 12425  0109AE  C005  FFD9         	movff	Sensor_autoCalibration@sensor,fsr2l
 12426  0109B2  C006  FFDA         	movff	Sensor_autoCalibration@sensor+1,fsr2h
 12427  0109B6  50DF               	movf	indf2,w,c
 12428  0109B8  6E0D               	movwf	Sensor_autoCalibration@name,c
 12429                           
 12430                           ;mtouch_sensor.c: 406: if(!Sensor_isCalibratingAcqTime(sensor))
 12431  0109BA  C005  F001         	movff	Sensor_autoCalibration@sensor,i2Sensor_isCalibratingAcqTime@sensor
 12432  0109BE  C006  F002         	movff	Sensor_autoCalibration@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 12433  0109C2  ECA9  F08F         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 12434  0109C6  0900               	iorlw	0
 12435  0109C8  A4D8               	btfss	status,2,c
 12436  0109CA  D02D               	goto	i2l592
 12437                           
 12438                           ;mtouch_sensor.c: 407: {
 12439                           ;mtouch_sensor.c: 408: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 12440  0109CC  EE20 F004          	lfsr	2,4
 12441  0109D0  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12442  0109D2  26D9               	addwf	fsr2l,f,c
 12443  0109D4  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12444  0109D6  22DA               	addwfc	fsr2h,f,c
 12445  0109D8  50DF               	movf	indf2,w,c
 12446  0109DA  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 12447  0109DC  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 12448  0109DE  0E09               	movlw	9
 12449  0109E0                     i2u300_45:
 12450  0109E0  90D8               	bcf	status,0,c
 12451  0109E2  3607               	rlcf	??_Sensor_autoCalibration,f,c
 12452  0109E4  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 12453  0109E6  2EE8               	decfsz	wreg,f,c
 12454  0109E8  D7FB               	goto	i2u300_45
 12455  0109EA  5072               	movf	3954,w,c	;volatile
 12456  0109EC  5C07               	subwf	??_Sensor_autoCalibration,w,c
 12457  0109EE  5073               	movf	3955,w,c	;volatile
 12458  0109F0  5808               	subwfb	??_Sensor_autoCalibration+1,w,c
 12459  0109F2  B0D8               	btfsc	status,0,c
 12460  0109F4  D011               	goto	i2l593
 12461                           
 12462                           ;mtouch_sensor.c: 409: {
 12463                           ;mtouch_sensor.c: 410: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 12464  0109F6  EE20 F005          	lfsr	2,5
 12465  0109FA  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12466  0109FC  26D9               	addwf	fsr2l,f,c
 12467  0109FE  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12468  010A00  22DA               	addwfc	fsr2h,f,c
 12469  010A02  2ADF               	incf	indf2,f,c
 12470  010A04  0E1E               	movlw	30
 12471  010A06  64DF               	cpfsgt	indf2,c
 12472  010A08  0012               	return	
 12473                           
 12474                           ;mtouch_sensor.c: 411: Sensor_setCalibratAcqTime(sensor);
 12475  010A0A  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 12476  010A0E  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 12477  010A12  EC3A  F08E         	call	_Sensor_setCalibratAcqTime	;wreg free
 12478                           
 12479                           ;mtouch_sensor.c: 412: }
 12480  010A16  0012               	return	
 12481  010A18                     i2l593:
 12482                           
 12483                           ;mtouch_sensor.c: 413: else
 12484                           ;mtouch_sensor.c: 414: {
 12485                           ;mtouch_sensor.c: 415: Sensor_setCalibratAcqTime(sensor);
 12486  010A18  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 12487  010A1C  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 12488  010A20  EC3A  F08E         	call	_Sensor_setCalibratAcqTime	;wreg free
 12489                           
 12490                           ;mtouch_sensor.c: 416: }
 12491                           ;mtouch_sensor.c: 417: }
 12492  010A24  0012               	return	
 12493  010A26                     i2l592:
 12494                           
 12495                           ;mtouch_sensor.c: 418: else
 12496                           ;mtouch_sensor.c: 419: {
 12497                           ;mtouch_sensor.c: 420: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 12498  010A26  EE20 F004          	lfsr	2,4
 12499  010A2A  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12500  010A2C  26D9               	addwf	fsr2l,f,c
 12501  010A2E  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12502  010A30  22DA               	addwfc	fsr2h,f,c
 12503  010A32  50DF               	movf	indf2,w,c
 12504  010A34  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 12505  010A36  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 12506  010A38  90D8               	bcf	status,0,c
 12507  010A3A  3607               	rlcf	??_Sensor_autoCalibration,f,c
 12508  010A3C  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 12509  010A3E  500D               	movf	Sensor_autoCalibration@name,w,c
 12510  010A40  0D02               	mullw	2
 12511  010A42  0E7E               	movlw	low _packet_sample
 12512  010A44  24F3               	addwf	prodl,w,c
 12513  010A46  6ED9               	movwf	fsr2l,c
 12514  010A48  0E00               	movlw	high _packet_sample
 12515  010A4A  20F4               	addwfc	prodh,w,c
 12516  010A4C  6EDA               	movwf	fsr2h,c
 12517  010A4E  CFDE F009          	movff	postinc2,??_Sensor_autoCalibration+2
 12518  010A52  CFDD F00A          	movff	postdec2,??_Sensor_autoCalibration+3
 12519  010A56  CF72 F00B          	movff	3954,??_Sensor_autoCalibration+4	;volatile
 12520  010A5A  CF73 F00C          	movff	3955,??_Sensor_autoCalibration+5	;volatile
 12521  010A5E  1E0B               	comf	??_Sensor_autoCalibration+4,f,c
 12522  010A60  1E0C               	comf	??_Sensor_autoCalibration+5,f,c
 12523  010A62  4A0B               	infsnz	??_Sensor_autoCalibration+4,f,c
 12524  010A64  2A0C               	incf	??_Sensor_autoCalibration+5,f,c
 12525  010A66  5009               	movf	??_Sensor_autoCalibration+2,w,c
 12526  010A68  240B               	addwf	??_Sensor_autoCalibration+4,w,c
 12527  010A6A  6E01               	movwf	i2abs@a,c
 12528  010A6C  500A               	movf	??_Sensor_autoCalibration+3,w,c
 12529  010A6E  200C               	addwfc	??_Sensor_autoCalibration+5,w,c
 12530  010A70  6E02               	movwf	i2abs@a+1,c
 12531  010A72  ECE4  F08E         	call	i2_abs	;wreg free
 12532  010A76  5007               	movf	??_Sensor_autoCalibration,w,c
 12533  010A78  5C01               	subwf	?i2_abs,w,c
 12534  010A7A  5008               	movf	??_Sensor_autoCalibration+1,w,c
 12535  010A7C  5802               	subwfb	?i2_abs+1,w,c
 12536  010A7E  B0D8               	btfsc	status,0,c
 12537  010A80  D00F               	goto	i2l597
 12538                           
 12539                           ;mtouch_sensor.c: 421: {
 12540                           ;mtouch_sensor.c: 422: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 12541  010A82  EE20 F002          	lfsr	2,2
 12542  010A86  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12543  010A88  26D9               	addwf	fsr2l,f,c
 12544  010A8A  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12545  010A8C  22DA               	addwfc	fsr2h,f,c
 12546  010A8E  0E80               	movlw	128
 12547  010A90  6EDF               	movwf	indf2,c
 12548                           
 12549                           ;mtouch_sensor.c: 423: Sensor_setCalibrated(sensor);
 12550  010A92  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 12551  010A96  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 12552  010A9A  EC40  F08F         	call	_Sensor_setCalibrated	;wreg free
 12553                           
 12554                           ;mtouch_sensor.c: 424: }
 12555  010A9E  0012               	return	
 12556  010AA0                     i2l597:
 12557                           
 12558                           ;mtouch_sensor.c: 425: else
 12559                           ;mtouch_sensor.c: 426: {
 12560                           ;mtouch_sensor.c: 428: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)3)) - ((mtouch_sensor_time_t)1 << (u
      +                          int8_t)3)))
 12561  010AA0  EE20 F003          	lfsr	2,3
 12562  010AA4  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12563  010AA6  26D9               	addwf	fsr2l,f,c
 12564  010AA8  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12565  010AAA  22DA               	addwfc	fsr2h,f,c
 12566  010AAC  0E77               	movlw	119
 12567  010AAE  64DF               	cpfsgt	indf2,c
 12568  010AB0  D00F               	goto	i2l599
 12569                           
 12570                           ;mtouch_sensor.c: 429: {
 12571                           ;mtouch_sensor.c: 430: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 12572  010AB2  EE20 F002          	lfsr	2,2
 12573  010AB6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12574  010AB8  26D9               	addwf	fsr2l,f,c
 12575  010ABA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12576  010ABC  22DA               	addwfc	fsr2h,f,c
 12577  010ABE  0E80               	movlw	128
 12578  010AC0  6EDF               	movwf	indf2,c
 12579                           
 12580                           ;mtouch_sensor.c: 431: Sensor_setCalibrated(sensor);
 12581  010AC2  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 12582  010AC6  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 12583  010ACA  EC40  F08F         	call	_Sensor_setCalibrated	;wreg free
 12584                           
 12585                           ;mtouch_sensor.c: 432: }
 12586  010ACE  0012               	return	
 12587  010AD0                     i2l599:
 12588                           
 12589                           ;mtouch_sensor.c: 433: else
 12590                           ;mtouch_sensor.c: 434: {
 12591                           ;mtouch_sensor.c: 435: sensor->acquisition_time += ((mtouch_sensor_time_t)1 << (uint8_t)
      +                          3);
 12592  010AD0  EE20 F003          	lfsr	2,3
 12593  010AD4  5005               	movf	Sensor_autoCalibration@sensor,w,c
 12594  010AD6  26D9               	addwf	fsr2l,f,c
 12595  010AD8  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 12596  010ADA  22DA               	addwfc	fsr2h,f,c
 12597  010ADC  0E08               	movlw	8
 12598  010ADE  26DF               	addwf	indf2,f,c
 12599  010AE0  0012               	return	
 12600  010AE2                     __end_of_Sensor_autoCalibration:
 12601                           	opt stack 0
 12602                           tosu	equ	0xFFF
 12603                           tosh	equ	0xFFE
 12604                           tosl	equ	0xFFD
 12605                           pclatu	equ	0xFFB
 12606                           pclath	equ	0xFFA
 12607                           tblptru	equ	0xFF8
 12608                           tblptrh	equ	0xFF7
 12609                           tblptrl	equ	0xFF6
 12610                           tablat	equ	0xFF5
 12611                           prodh	equ	0xFF4
 12612                           prodl	equ	0xFF3
 12613                           intcon	equ	0xFF2
 12614                           postinc0	equ	0xFEE
 12615                           fsr0h	equ	0xFEA
 12616                           fsr0l	equ	0xFE9
 12617                           wreg	equ	0xFE8
 12618                           indf1	equ	0xFE7
 12619                           postinc1	equ	0xFE6
 12620                           postdec1	equ	0xFE5
 12621                           fsr1h	equ	0xFE2
 12622                           fsr1l	equ	0xFE1
 12623                           indf2	equ	0xFDF
 12624                           postinc2	equ	0xFDE
 12625                           postdec2	equ	0xFDD
 12626                           plusw2	equ	0xFDB
 12627                           fsr2h	equ	0xFDA
 12628                           fsr2l	equ	0xFD9
 12629                           status	equ	0xFD8
 12630                           
 12631 ;; *************** function i2_abs *****************
 12632 ;; Defined at:
 12633 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;  a               2    0[COMRAM] int 
 12636 ;; Auto vars:     Size  Location     Type
 12637 ;;		None
 12638 ;; Return value:  Size  Location     Type
 12639 ;;                  2    0[COMRAM] int 
 12640 ;; Registers used:
 12641 ;;		wreg, status,2, status,0
 12642 ;; Tracked objects:
 12643 ;;		On entry : 0/0
 12644 ;;		On exit  : 0/0
 12645 ;;		Unchanged: 0/0
 12646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12651 ;;Total ram usage:        4 bytes
 12652 ;; Hardware stack levels used:    1
 12653 ;; This function calls:
 12654 ;;		Nothing
 12655 ;; This function is called by:
 12656 ;;		_Sensor_autoCalibration
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text83
 12661  011DC8                     __ptext83:
 12662                           	opt stack 0
 12663  011DC8                     i2_abs:
 12664                           	opt stack 20
 12665                           
 12666                           ;incstack = 0
 12667  011DC8  AE02               	btfss	i2abs@a+1,7,c
 12668  011DCA  D00D               	goto	i2l1017
 12669  011DCC  C001  F003         	movff	i2abs@a,??i2_abs
 12670  011DD0  C002  F004         	movff	i2abs@a+1,??i2_abs+1
 12671  011DD4  1E03               	comf	??i2_abs,f,c
 12672  011DD6  1E04               	comf	??i2_abs+1,f,c
 12673  011DD8  4A03               	infsnz	??i2_abs,f,c
 12674  011DDA  2A04               	incf	??i2_abs+1,f,c
 12675  011DDC  C003  F001         	movff	??i2_abs,?i2_abs
 12676  011DE0  C004  F002         	movff	??i2_abs+1,?i2_abs+1
 12677  011DE4  0012               	return	
 12678  011DE6                     i2l1017:
 12679  011DE6  C001  F001         	movff	i2abs@a,?i2_abs
 12680  011DEA  C002  F002         	movff	i2abs@a+1,?i2_abs+1
 12681  011DEE  0012               	return		;funcret
 12682  011DF0                     __end_ofi2_abs:
 12683                           	opt stack 0
 12684                           tosu	equ	0xFFF
 12685                           tosh	equ	0xFFE
 12686                           tosl	equ	0xFFD
 12687                           pclatu	equ	0xFFB
 12688                           pclath	equ	0xFFA
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           postinc0	equ	0xFEE
 12697                           fsr0h	equ	0xFEA
 12698                           fsr0l	equ	0xFE9
 12699                           wreg	equ	0xFE8
 12700                           indf1	equ	0xFE7
 12701                           postinc1	equ	0xFE6
 12702                           postdec1	equ	0xFE5
 12703                           fsr1h	equ	0xFE2
 12704                           fsr1l	equ	0xFE1
 12705                           indf2	equ	0xFDF
 12706                           postinc2	equ	0xFDE
 12707                           postdec2	equ	0xFDD
 12708                           plusw2	equ	0xFDB
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 12714 ;; Defined at:
 12715 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  sensor          2    0[COMRAM] PTR struct .
 12718 ;;		 -> mtouch_sensor(45), 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;		None
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      unsigned char 
 12723 ;; Registers used:
 12724 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12734 ;;Total ram usage:        2 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; This function calls:
 12737 ;;		Nothing
 12738 ;; This function is called by:
 12739 ;;		_Sensor_autoCalibration
 12740 ;;		i2_Sensor_scheduleNextScan
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           	psect	text84
 12745  011F52                     __ptext84:
 12746                           	opt stack 0
 12747  011F52                     i2_Sensor_isCalibratingAcqTime:
 12748                           	opt stack 20
 12749                           
 12750                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
 12751                           
 12752                           ;incstack = 0
 12753  011F52  EE20 F008          	lfsr	2,8
 12754  011F56  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor,w,c
 12755  011F58  26D9               	addwf	fsr2l,f,c
 12756  011F5A  5002               	movf	i2Sensor_isCalibratingAcqTime@sensor+1,w,c
 12757  011F5C  22DA               	addwfc	fsr2h,f,c
 12758  011F5E  A8DF               	btfss	indf2,4,c
 12759  011F60  D002               	goto	i2u273_40
 12760  011F62  0E01               	movlw	1
 12761  011F64  0012               	return	
 12762  011F66                     i2u273_40:
 12763  011F66  0E00               	movlw	0
 12764  011F68  0012               	return	
 12765  011F6A                     __end_ofi2_Sensor_isCalibratingAcqTime:
 12766                           	opt stack 0
 12767                           tosu	equ	0xFFF
 12768                           tosh	equ	0xFFE
 12769                           tosl	equ	0xFFD
 12770                           pclatu	equ	0xFFB
 12771                           pclath	equ	0xFFA
 12772                           tblptru	equ	0xFF8
 12773                           tblptrh	equ	0xFF7
 12774                           tblptrl	equ	0xFF6
 12775                           tablat	equ	0xFF5
 12776                           prodh	equ	0xFF4
 12777                           prodl	equ	0xFF3
 12778                           intcon	equ	0xFF2
 12779                           postinc0	equ	0xFEE
 12780                           fsr0h	equ	0xFEA
 12781                           fsr0l	equ	0xFE9
 12782                           wreg	equ	0xFE8
 12783                           indf1	equ	0xFE7
 12784                           postinc1	equ	0xFE6
 12785                           postdec1	equ	0xFE5
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           postdec2	equ	0xFDD
 12791                           plusw2	equ	0xFDB
 12792                           fsr2h	equ	0xFDA
 12793                           fsr2l	equ	0xFD9
 12794                           status	equ	0xFD8
 12795                           
 12796 ;; *************** function _Sensor_setCalibrated *****************
 12797 ;; Defined at:
 12798 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  sensor          2    0[COMRAM] PTR struct .
 12801 ;;		 -> mtouch_sensor(45), 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12817 ;;Total ram usage:        2 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_Sensor_autoCalibration
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text85
 12827  011E80                     __ptext85:
 12828                           	opt stack 0
 12829  011E80                     _Sensor_setCalibrated:
 12830                           	opt stack 20
 12831                           
 12832                           ;mtouch_sensor.c: 787: sensor->calibrated = 1;
 12833                           
 12834                           ;incstack = 0
 12835  011E80  EE20 F008          	lfsr	2,8
 12836  011E84  5001               	movf	Sensor_setCalibrated@sensor,w,c
 12837  011E86  26D9               	addwf	fsr2l,f,c
 12838  011E88  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 12839  011E8A  22DA               	addwfc	fsr2h,f,c
 12840  011E8C  86DF               	bsf	indf2,3,c
 12841                           
 12842                           ;mtouch_sensor.c: 788: sensor->acqTime_cal = 0;
 12843  011E8E  EE20 F008          	lfsr	2,8
 12844  011E92  5001               	movf	Sensor_setCalibrated@sensor,w,c
 12845  011E94  26D9               	addwf	fsr2l,f,c
 12846  011E96  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 12847  011E98  22DA               	addwfc	fsr2h,f,c
 12848  011E9A  98DF               	bcf	indf2,4,c
 12849  011E9C  0012               	return		;funcret
 12850  011E9E                     __end_of_Sensor_setCalibrated:
 12851                           	opt stack 0
 12852                           tosu	equ	0xFFF
 12853                           tosh	equ	0xFFE
 12854                           tosl	equ	0xFFD
 12855                           pclatu	equ	0xFFB
 12856                           pclath	equ	0xFFA
 12857                           tblptru	equ	0xFF8
 12858                           tblptrh	equ	0xFF7
 12859                           tblptrl	equ	0xFF6
 12860                           tablat	equ	0xFF5
 12861                           prodh	equ	0xFF4
 12862                           prodl	equ	0xFF3
 12863                           intcon	equ	0xFF2
 12864                           postinc0	equ	0xFEE
 12865                           fsr0h	equ	0xFEA
 12866                           fsr0l	equ	0xFE9
 12867                           wreg	equ	0xFE8
 12868                           indf1	equ	0xFE7
 12869                           postinc1	equ	0xFE6
 12870                           postdec1	equ	0xFE5
 12871                           fsr1h	equ	0xFE2
 12872                           fsr1l	equ	0xFE1
 12873                           indf2	equ	0xFDF
 12874                           postinc2	equ	0xFDE
 12875                           postdec2	equ	0xFDD
 12876                           plusw2	equ	0xFDB
 12877                           fsr2h	equ	0xFDA
 12878                           fsr2l	equ	0xFD9
 12879                           status	equ	0xFD8
 12880                           
 12881 ;; *************** function _Sensor_setCalibratAcqTime *****************
 12882 ;; Defined at:
 12883 ;;		line 791 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12884 ;; Parameters:    Size  Location     Type
 12885 ;;  sensor          2    0[COMRAM] PTR struct .
 12886 ;;		 -> mtouch_sensor(45), 
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;		None
 12889 ;; Return value:  Size  Location     Type
 12890 ;;                  1    wreg      void 
 12891 ;; Registers used:
 12892 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12893 ;; Tracked objects:
 12894 ;;		On entry : 0/0
 12895 ;;		On exit  : 0/0
 12896 ;;		Unchanged: 0/0
 12897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12898 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12902 ;;Total ram usage:        2 bytes
 12903 ;; Hardware stack levels used:    1
 12904 ;; This function calls:
 12905 ;;		Nothing
 12906 ;; This function is called by:
 12907 ;;		_Sensor_autoCalibration
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           	psect	text86
 12912  011C74                     __ptext86:
 12913                           	opt stack 0
 12914  011C74                     _Sensor_setCalibratAcqTime:
 12915                           	opt stack 20
 12916                           
 12917                           ;mtouch_sensor.c: 793: sensor->acqTime_cal = 1;
 12918                           
 12919                           ;incstack = 0
 12920  011C74  EE20 F008          	lfsr	2,8
 12921  011C78  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 12922  011C7A  26D9               	addwf	fsr2l,f,c
 12923  011C7C  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 12924  011C7E  22DA               	addwfc	fsr2h,f,c
 12925  011C80  88DF               	bsf	indf2,4,c
 12926                           
 12927                           ;mtouch_sensor.c: 794: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)3));
 12928  011C82  EE20 F003          	lfsr	2,3
 12929  011C86  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 12930  011C88  26D9               	addwf	fsr2l,f,c
 12931  011C8A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 12932  011C8C  22DA               	addwfc	fsr2h,f,c
 12933  011C8E  0E08               	movlw	8
 12934  011C90  6EDF               	movwf	indf2,c
 12935                           
 12936                           ;mtouch_sensor.c: 795: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 12937  011C92  EE20 F002          	lfsr	2,2
 12938  011C96  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 12939  011C98  26D9               	addwf	fsr2l,f,c
 12940  011C9A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 12941  011C9C  22DA               	addwfc	fsr2h,f,c
 12942  011C9E  0E80               	movlw	128
 12943  011CA0  6EDF               	movwf	indf2,c
 12944  011CA2  0012               	return		;funcret
 12945  011CA4                     __end_of_Sensor_setCalibratAcqTime:
 12946                           	opt stack 0
 12947                           tosu	equ	0xFFF
 12948                           tosh	equ	0xFFE
 12949                           tosl	equ	0xFFD
 12950                           pclatu	equ	0xFFB
 12951                           pclath	equ	0xFFA
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           intcon	equ	0xFF2
 12959                           postinc0	equ	0xFEE
 12960                           fsr0h	equ	0xFEA
 12961                           fsr0l	equ	0xFE9
 12962                           wreg	equ	0xFE8
 12963                           indf1	equ	0xFE7
 12964                           postinc1	equ	0xFE6
 12965                           postdec1	equ	0xFE5
 12966                           fsr1h	equ	0xFE2
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           plusw2	equ	0xFDB
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           tosu	equ	0xFFF
 12976                           tosh	equ	0xFFE
 12977                           tosl	equ	0xFFD
 12978                           pclatu	equ	0xFFB
 12979                           pclath	equ	0xFFA
 12980                           tblptru	equ	0xFF8
 12981                           tblptrh	equ	0xFF7
 12982                           tblptrl	equ	0xFF6
 12983                           tablat	equ	0xFF5
 12984                           prodh	equ	0xFF4
 12985                           prodl	equ	0xFF3
 12986                           intcon	equ	0xFF2
 12987                           postinc0	equ	0xFEE
 12988                           fsr0h	equ	0xFEA
 12989                           fsr0l	equ	0xFE9
 12990                           wreg	equ	0xFE8
 12991                           indf1	equ	0xFE7
 12992                           postinc1	equ	0xFE6
 12993                           postdec1	equ	0xFE5
 12994                           fsr1h	equ	0xFE2
 12995                           fsr1l	equ	0xFE1
 12996                           indf2	equ	0xFDF
 12997                           postinc2	equ	0xFDE
 12998                           postdec2	equ	0xFDD
 12999                           plusw2	equ	0xFDB
 13000                           fsr2h	equ	0xFDA
 13001                           fsr2l	equ	0xFD9
 13002                           status	equ	0xFD8
 13003                           
 13004                           	psect	text87
 13005  000000                     __ptext87:
 13006                           	opt stack 0
 13007                           tosu	equ	0xFFF
 13008                           tosh	equ	0xFFE
 13009                           tosl	equ	0xFFD
 13010                           pclatu	equ	0xFFB
 13011                           pclath	equ	0xFFA
 13012                           tblptru	equ	0xFF8
 13013                           tblptrh	equ	0xFF7
 13014                           tblptrl	equ	0xFF6
 13015                           tablat	equ	0xFF5
 13016                           prodh	equ	0xFF4
 13017                           prodl	equ	0xFF3
 13018                           intcon	equ	0xFF2
 13019                           postinc0	equ	0xFEE
 13020                           fsr0h	equ	0xFEA
 13021                           fsr0l	equ	0xFE9
 13022                           wreg	equ	0xFE8
 13023                           indf1	equ	0xFE7
 13024                           postinc1	equ	0xFE6
 13025                           postdec1	equ	0xFE5
 13026                           fsr1h	equ	0xFE2
 13027                           fsr1l	equ	0xFE1
 13028                           indf2	equ	0xFDF
 13029                           postinc2	equ	0xFDE
 13030                           postdec2	equ	0xFDD
 13031                           plusw2	equ	0xFDB
 13032                           fsr2h	equ	0xFDA
 13033                           fsr2l	equ	0xFD9
 13034                           status	equ	0xFD8
 13035                           
 13036                           	psect	rparam
 13037  0000                     tosu	equ	0xFFF
 13038                           tosh	equ	0xFFE
 13039                           tosl	equ	0xFFD
 13040                           pclatu	equ	0xFFB
 13041                           pclath	equ	0xFFA
 13042                           tblptru	equ	0xFF8
 13043                           tblptrh	equ	0xFF7
 13044                           tblptrl	equ	0xFF6
 13045                           tablat	equ	0xFF5
 13046                           prodh	equ	0xFF4
 13047                           prodl	equ	0xFF3
 13048                           intcon	equ	0xFF2
 13049                           postinc0	equ	0xFEE
 13050                           fsr0h	equ	0xFEA
 13051                           fsr0l	equ	0xFE9
 13052                           wreg	equ	0xFE8
 13053                           indf1	equ	0xFE7
 13054                           postinc1	equ	0xFE6
 13055                           postdec1	equ	0xFE5
 13056                           fsr1h	equ	0xFE2
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           plusw2	equ	0xFDB
 13062                           fsr2h	equ	0xFDA
 13063                           fsr2l	equ	0xFD9
 13064                           status	equ	0xFD8
 13065                           
 13066                           	psect	temp
 13067  000046                     btemp:
 13068                           	opt stack 0
 13069  000046                     	ds	1
 13070  0000                     int$flags	set	btemp
 13071  0000                     wtemp6	set	btemp+1
 13072                           tosu	equ	0xFFF
 13073                           tosh	equ	0xFFE
 13074                           tosl	equ	0xFFD
 13075                           pclatu	equ	0xFFB
 13076                           pclath	equ	0xFFA
 13077                           tblptru	equ	0xFF8
 13078                           tblptrh	equ	0xFF7
 13079                           tblptrl	equ	0xFF6
 13080                           tablat	equ	0xFF5
 13081                           prodh	equ	0xFF4
 13082                           prodl	equ	0xFF3
 13083                           intcon	equ	0xFF2
 13084                           postinc0	equ	0xFEE
 13085                           fsr0h	equ	0xFEA
 13086                           fsr0l	equ	0xFE9
 13087                           wreg	equ	0xFE8
 13088                           indf1	equ	0xFE7
 13089                           postinc1	equ	0xFE6
 13090                           postdec1	equ	0xFE5
 13091                           fsr1h	equ	0xFE2
 13092                           fsr1l	equ	0xFE1
 13093                           indf2	equ	0xFDF
 13094                           postinc2	equ	0xFDE
 13095                           postdec2	equ	0xFDD
 13096                           plusw2	equ	0xFDB
 13097                           fsr2h	equ	0xFDA
 13098                           fsr2l	equ	0xFD9
 13099                           status	equ	0xFD8


Data Sizes:
    Strings     579
    Constant    125
    Data        21
    BSS         377
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      69
    BANK0           160     23     120
    BANK1           256      0     208
    BANK2           256      0      64
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Button_StateMachine$0	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[5]), STR_21(CODE[4]), STR_20(CODE[6]), STR_17(CODE[6]), 
		 -> STR_14(CODE[6]), STR_10(CODE[9]), STR_6(CODE[8]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 288
		 -> STR_28(CODE[3]), STR_27(CODE[288]), STR_26(CODE[3]), STR_24(CODE[3]), 
		 -> STR_23(CODE[28]), STR_22(CODE[3]), STR_19(CODE[4]), STR_18(CODE[5]), 
		 -> STR_16(CODE[4]), STR_15(CODE[5]), STR_13(CODE[3]), STR_12(CODE[14]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_8(CODE[18]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[174]), STR_3(CODE[4]), STR_2(CODE[5]), 
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Service@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setInactive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setActive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isEnabled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    callback_sampled	PTR FTN(enum E17513,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    ringBufferLUT@line	PTR unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Transmit_ISR(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _EUSART2_Receive_ISR->i2_printf
    i2_printf->i2_putch
    i2_putch->i2_EUSART2_Write
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->_Sensor_autoCalibration
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibrated
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->i2_abs

Critical Paths under _main in BANK0

    _ringBufferPull->_ringBufferLUT
    _ringBufferLUT->_printf
    _printResetMessage->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _Sensor_scheduleNextScan->_Sensor_isCalibrated
    _Sensor_scheduleNextScan->_Sensor_isCalibratingAcqTime
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   19065
                                             22 BANK0      1     1      0
            _MTOUCH_Button_State_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                  _printResetMessage
                     _ringBufferPull
 ---------------------------------------------------------------------------------
 (1) _ringBufferPull                                       9     9      0    4354
                                              9 BANK0      9     9      0
                       _EUSART2_Read
                      _ringBufferLUT
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     400
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _ringBufferLUT                                        2     0      2    3716
                                              7 BANK0      2     0      2
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1393
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printResetMessage                                    0     0      0    2016
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              18    16      2    2016
                                              2 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2956
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2714
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1306
                                             11 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     459
                                              2 BANK0      1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             11 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    9677
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                              4 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     310
                                              2 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    4561
                                             21 BANK0      1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              6     6      0    1191
                                              2 BANK0      6     6      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     331
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              1     1      0    3116
                                             20 BANK0      1     1      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        9     9      0    2024
                                             11 BANK0      9     9      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              4     2      2     899
                                              7 BANK0      4     2      2
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         7     5      2     651
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            14    14      0     993
                                              4 BANK0     14    14      0
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     328
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    4470
                                             20 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    4371
                                             16 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     626
                                              9 BANK0      7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    1175
                                              9 BANK0      5     3      2
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                              1 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                              9 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                              3 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                              7 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                              3 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             12    10      2     350
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_State_Get                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                      18    18      0    2214
                                             15 COMRAM    18    18      0
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  0     0      0     138
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            18    16      2     138
                                              2 COMRAM     5     3      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0      66
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (11) i2_EUSART2_Write                                     1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ADCC_ThresholdISR_mTouch                             0     0      0    2076
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (9) _MTOUCH_Sensor_Service                                2     2      0    2076
                                             13 COMRAM     2     2      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (10) i2_Sensor_scheduleNextScan                           6     6      0     688
                                              2 COMRAM     6     6      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibrated                               2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Sensor_setSampled                                   2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _Sensor_autoCalibration                              9     7      2     965
                                              4 COMRAM     9     7      2
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i2_Sensor_isCalibratingAcqTime
                              i2_abs
 ---------------------------------------------------------------------------------
 (11) i2_abs                                               4     2      2      92
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibratingAcqTime                       2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibrated                                2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibratAcqTime                           2     0      2     218
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_State_Get
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           _abs
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback *
           _Sensor_RawSample_Update *
             _medianFilter
           _Sensor_isEnabled *
           _Sensor_setActive *
           _Sensor_setInactive *
           _abs *
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_wasSampled
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _printResetMessage
     _printf
       _putch
         _EUSART2_Write
   _ringBufferPull
     _EUSART2_Read
     _ringBufferLUT
       _printf
         _putch
           _EUSART2_Write
       _strcmp
     _strlen

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i2_Sensor_isCalibratingAcqTime
         i2_abs
       _Sensor_setSampled
       i2_Sensor_SetTrisBit
       i2_Sensor_isCalibrated
       i2_Sensor_scheduleNextScan
         i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_isCalibratingAcqTime
   _EUSART2_Receive_ISR *
     i2_printf
       i2_putch
         i2_EUSART2_Write
   _EUSART2_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      40      10       25.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      78       5       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      45       1       73.4%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CD       8        0.0%
DATA                 0      0     1CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 14:47:49 2018

                                    ?_MTOUCH_Sensor_RawSample_Get 00B5  
                                   Sensor_FrequencyHopping@sensor 00C9  
                                                     __CFG_CP$OFF 000000  
                                         ?_Sensor_autoCalibration 0005  
                                      __end_of_Sensor_setInactive 1FA0  
                                       _Sensor_setCalibratAcqTime 1C74  
                                                             l305 135C  
                                                             l340 0B58  
                                                             l190 19B4  
                                                             l334 0B02  
                                                             l360 02EE  
                                                             l336 0B3E  
                                                             l337 0B22  
                                                             l362 032C  
                                                             l339 0B86  
                                                             l604 0FD6  
                                                             l540 1490  
                                                             l188 198C  
                                                             l364 0368  
                                                             l605 0FA2  
                                                             l541 1468  
                                                             l197 1920  
                                                             l606 0FAE  
                                                             l542 14B4  
                                                             l198 1944  
                                                             l366 03D0  
                                                             l358 02A2  
                                                             l551 1604  
                                                             l543 1470  
                                                             l199 1942  
                                                             l640 0084  
                                                             l704 1E12  
                                                             l624 1E6A  
                                                             l552 15C8  
                                                             l544 1478  
                                                             l641 0186  
                                                             l633 186E  
                                                             l545 1480  
                                                             l650 0232  
                                                             l642 0116  
                                                             l554 15D4  
                                                             l570 1894  
                                                             l546 1488  
                                                             l723 1B78  
                                                             l555 15E0  
                                                             l628 1AD6  
                                                             l556 15EC  
                                                             l572 18BE  
                                                             l661 0430  
                                                             l645 016C  
                                                             l557 15F8  
                                                             l581 05B6  
                                                             l565 1A64  
                                                             l654 1E28  
                                                             l582 05D0  
                                                             l663 04AA  
                                                             l823 1A9C  
                                                             l904 0CD4  
                                                             l920 1E50  
                                                             l664 056E  
                                                             l648 01D4  
                                                             l905 0CFC  
                                                             l745 1B44  
                                                             l673 052C  
                                                             l585 063C  
                                                             l834 1132  
                                                             l666 04EA  
                                                             l682 05A4  
                                                             l667 04F4  
                                                             l587 0676  
                                                             l844 0790  
                                                             l828 1F16  
                                                             l676 0556  
                                                             l668 04F8  
                                                             l588 0680  
                                                             l925 11F2  
                                                             l933 0D92  
                                                             l853 0E58  
                                                             l669 0508  
                                                             l838 100E  
                                                             l839 101A  
                                                             l847 0800  
                                                             l848 0816  
                                                             l946 1CFA  
                                                             l699 1B10  
                                                             l859 1D86  
                                                             l964 1B8E  
                                                             l965 1B88  
                                                             _GIE 007F97  
                                                    __CFG_CPD$OFF 000000  
                                                             _abs 1CFE  
                                                             fsr2 000FD9  
                                         __size_of_PMD_Initialize 001C  
                                                             prod 000FF3  
                                                             tosl 000FFD  
                                                             wreg 000FE8  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 00B7  
                                __size_of_MTOUCH_Sensor_SampleAll 0046  
                                         __size_of_ringBufferPull 011A  
                               __size_of_MTOUCH_Sensor_Initialize 007A  
                                       ?_MTOUCH_Sensor_Initialize 0001  
                                 __size_of_Sensor_setSamplePeriod 0022  
                                                    __CFG_LVP$OFF 000000  
                                                    __CFG_ZCD$OFF 000000  
                                                            l1017 1D1E  
                                                            ?_abs 00B5  
                                                            l1400 17FC  
                                                            l1525 17A6  
                                                            l1533 18DC  
                                                            l1526 179C  
                                                            l1534 18D6  
                                                            l4061 17FC  
                                                            l4231 100E  
                                                            l4127 0428  
                                                            l1399 1824  
                                                            l4303 1A5C  
                                                            l4155 0500  
                                                            l4341 1D7E  
                                                            l4317 1A94  
                                                            l4407 1E20  
                                                            l4177 054E  
                                                            l4629 0AF2  
                                                            l4567 188C  
                                                            l4639 0B18  
                                                            l3945 190E  
                                                            l4595 1F0E  
                                                            STR_1 FFFB  
                                                            STR_2 FFEE  
                                                            STR_3 FFF7  
                                                            STR_4 FEDC  
                                                            STR_5 FFB5  
                                                            STR_6 FFCF  
                                                            STR_7 FFB5  
                                                            STR_8 FFA6  
                                                            STR_9 FFB5  
                                   ?_Button_Reading_Update_Helper 00B8  
                                                            _LATA 000F79  
                                                            _LATB 000F7A  
                                                            _LATC 000F7B  
                                                            _LATD 000F7C  
                                                            _LATE 000F7D  
                                                            _LATF 000F7E  
                                                            _LATG 000F7F  
                                                            u4100 1EEA  
                                                            _LATH 000F80  
                                                            u4005 15DC  
                                                            u4006 15DE  
                                                            u4015 15E8  
                                                            u4016 15EA  
                                                            u4025 15F4  
                                                            u4026 15F6  
                                                            u4035 1600  
                                                            u4060 1B40  
                                                            u4036 1602  
                                                            u4310 1B74  
                                                            u4240 0530  
                                                            u4080 1B0C  
                                                            u4330 0C28  
                                                            u4410 076C  
                                                            u4170 04AE  
                                                            u4138 0FBE  
                                                            u4090 1F04  
                                                            u4180 04BA  
                                                            u4350 0CC4  
                                                            u4335 0C1E  
                                                            u4345 0C8A  
                                                            u4346 0C90  
                                                            u4530 17DE  
                                                            u4347 0C9E  
                                                            u4380 1048  
                                                            _PMD0 000E4C  
                                                            _PMD1 000E4D  
                                                            u4390 1072  
                                                            u4438 07E2  
                                                            _PMD2 000E4E  
                                                            _PMD3 000E4F  
                                                            u3920 1E0E  
                                                            u4720 1E34  
                                                            u4640 05E8  
                                                            _PMD4 000E50  
                                                            u4705 070A  
                                                            _PMD5 000E51  
                                                            u4395 1068  
                                                            u4468 0E3A  
                                                            u4910 18C4  
                                                            u3960 0D40  
                                                            u4488 0EDC  
                                                            u3945 16D6  
                                                            u4585 1C58  
                                                            u3970 0DBE  
                                                            u4690 0708  
                                                            u4850 03A6  
                                                            u3965 0D36  
                                                            u4685 06EE  
                                                            u4950 0B18  
                                                            u3975 0DB4  
                                                            u4768 1160  
                                                            u3995 15D0  
                                                            u3996 15D2  
                                      Button_State_Pressed@button 00BE  
                                                            _WPUA 000E91  
                                                            _WPUB 000E99  
                                                            _WPUC 000EA1  
                                                            _WPUD 000EA6  
                                                            _WPUE 000EAE  
                                                            _WPUF 000EB3  
                                                            _WPUG 000EBB  
                                                            _WPUH 000EC0  
                                           ??_EUSART2_Receive_ISR 0008  
                                             _sensor_medianBuffer 0060  
                                                   __CFG_FCMEN$ON 000000  
                                                   _EUSART2_Write 190A  
                                              _MTOUCH_needReburst 2004  
                                                            abs@a 00B5  
                                                            _main 1350  
                            __size_of_MTOUCH_Button_InitializeAll 0038  
                                                            _line 0190  
                                                   ?_EUSART2_Read 0001  
                                                            fsr0h 000FEA  
                                                            fsr1h 000FE2  
                                                            fsr2h 000FDA  
                                                            fsr0l 000FE9  
                                                            indf1 000FE7  
                                                            indf2 000FDF  
                                                            fsr1l 000FE1  
                                                            fsr2l 000FD9  
                                                            btemp 0046  
                            __size_of_MTOUCH_Sensor_InitializeAll 0038  
                                                            prodh 000FF4  
                                                            prodl 000FF3  
                                                            start 00E4  
                              __size_ofi2_Sensor_scheduleNextScan 014C  
                                    __end_of_EUSART2_Transmit_ISR 1BE0  
                                       ??_Sensor_FrequencyHopping 00C9  
                                                 __end_ofi2_putch 2018  
                                                   __CFG_CSWEN$ON 000000  
                                             ?_MTOUCH_needReburst 0001  
                                                    ___param_bank 000000  
                                                   ?_medianFilter 00B5  
                                  __end_of_Sensor_autoCalibration 0AE2  
                                                   __CFG_SCANE$ON 000000  
                                        __size_ofi2_EUSART2_Write 003C  
                                        ?_MTOUCH_Service_Mainloop 0001  
                                   __size_of_Button_State_Pressed 00EC  
                                                           ??_abs 00B7  
                                     ?_Button_Baseline_Initialize 00B8  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 0027  
                                   ??_MTOUCH_Sensor_RawSample_Get 00B7  
                                   Sensor_RawSample_Update@sensor 00BC  
                                   Sensor_RawSample_Update@result 00BE  
                                       __size_of_Sensor_isEnabled 0026  
                                  __size_of_OSCILLATOR_Initialize 0018  
                                             ringBufferPull@index 00C5  
                                   __end_of_OSCILLATOR_Initialize 1F3A  
                             __end_of_Sensor_isCalibratingAcqTime 1EEE  
                                  ?i2_Sensor_isCalibratingAcqTime 0001  
                                     _Sensor_isCalibratingAcqTime 1ED4  
                                                           _ADACC 000F70  
                                                           _ADACQ 000F5C  
                                                           _ADCAP 000F5D  
                                                           ?_main 0001  
                                                           _ADCLK 000F57  
                                                           _ADPCH 000F5F  
                                                           _ADREF 000F58  
                                                           _ADPRE 000F5E  
                                                           STR_10 FFC6  
                                                           STR_11 FFB5  
                                                           STR_20 FFD7  
                                                           STR_12 FFB8  
                                                           STR_13 FFB5  
                                                           STR_21 FFF3  
                                                           STR_22 FFB5  
                                                           STR_14 FFE3  
                                                           STR_15 FFEE  
                                                           STR_23 FF8A  
                                                           STR_24 FFB5  
                                                           STR_16 FFF7  
                                                           STR_25 FFE9  
                                                           STR_17 FFDD  
                                                   __CFG_WDTE$OFF 000000  
                                                           STR_26 FFB5  
                                                           STR_18 FFEE  
                                                           STR_19 FFF7  
                                                           STR_27 FDBC  
                                                           STR_28 FFB5  
                                                           _ADRPT 000F66  
                                                  __CFG_DEBUG$OFF 000000  
                                         __size_of_Button_Service 00C4  
                                                           i2l210 1BD6  
                                                           i2l114 006E  
                                                           i2l220 1300  
                                                           i2l116 008E  
                                                           i2l222 1348  
                                                           i2l118 0098  
                                                           i2l215 12C0  
                                                           i2l216 12E0  
                                                           i2l217 12FC  
                                                           i2l209 1BDA  
                                                           i2l620 15A4  
                                                           i2l197 19D6  
                                                           i2l198 19FA  
                                                           i2l551 1668  
                                                           i2l199 19F8  
                                                           i2l552 162C  
                                                           i2l617 1566  
                                                           i2l554 1638  
                                                           i2l618 15BC  
                                                           i2l555 1644  
                                                           i2l619 1598  
                                                           i2l556 1650  
                                                           i2l557 165C  
                                                           i2l581 0870  
                                                           i2l582 0888  
                                                           i2l592 0A26  
                                                           i2l593 0A18  
                                                           i2l745 1C0E  
                                                           i2l585 08EC  
                                                           i2l587 0920  
                                                           i2l588 092A  
                                                           i2l597 0AA0  
                                                           i2l599 0AD0  
                                                           i2l699 1C40  
                                                           i2l964 1CB4  
                                                           i2l965 1CAE  
                                                           _OSCEN 000E47  
                                                           _TRISA 000F81  
                                                           _TRISB 000F82  
                                                           _TRISC 000F83  
                                                           _TRISD 000F84  
                                                           _TRISE 000F85  
                                                           _TRISF 000F86  
                                                           _TRISG 000F87  
                                                           _TRISH 000F88  
                                                           i2_abs 1DC8  
                                 __size_of_Button_DefaultCallback 0002  
                                             i2_Sensor_SetTrisBit 1628  
                                                   __CFG_WRT0$OFF 000000  
                                                   __CFG_WRT1$OFF 000000  
                                                   __CFG_WRT2$OFF 000000  
                                                   __CFG_WRT3$OFF 000000  
                                                   __CFG_WRT4$OFF 000000  
                                                   __CFG_WRT5$OFF 000000  
                                                   __CFG_WRT6$OFF 000000  
                                                   __CFG_WRT7$OFF 000000  
                                            ??_MTOUCH_needReburst 00B5  
                                                  __CFG_EBTR0$OFF 000000  
                                                  __CFG_EBTR1$OFF 000000  
                                                  __CFG_EBTR2$OFF 000000  
                                                  __CFG_EBTR3$OFF 000000  
                                                  __CFG_EBTR4$OFF 000000  
                                                  __CFG_EBTR5$OFF 000000  
                                                  __CFG_EBTR6$OFF 000000  
                                                  __CFG_EBTR7$OFF 000000  
                                                   __CFG_WRTB$OFF 000000  
                                                   __CFG_WRTC$OFF 000000  
                                                   __CFG_WRTD$OFF 000000  
                                 __size_of_Sensor_DefaultCallback 0002  
                                                  __CFG_EBTRB$OFF 000000  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 2032  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
                                   _MTOUCH_Sensor_Scan_Initialize 202C  
                                         Sensor_setSampled@sensor 0001  
                                 __end_of_Sensor_scheduleNextScan 0710  
                                              __CFG_MCLRE$EXTMCLR 000000  
                                                           _putch 1FC2  
                                __size_of_Button_State_NotPressed 0152  
                                                  ?_EUSART2_Write 0001  
                                                           pclath 000FFA  
                                                           tablat 000FF5  
                                            _Sensor_Sampled_Reset 1F7C  
                                                           plusw2 000FDB  
                                                  ??_EUSART2_Read 00B5  
                                                           status 000FD8  
                                __size_of_MTOUCH_Sensor_isEnabled 0034  
                                                           wtemp6 0047  
                                       __size_of_Sensor_setActive 0012  
                                          ?i2_Sensor_isCalibrated 0001  
                                          Sensor_isEnabled@sensor 00B5  
                                            ?i2_Sensor_SetTrisBit 0001  
                                                __end_ofi2_printf 1CD2  
                           __end_of_EUSART2_SetTxInterruptHandler 1FDE  
                          __size_of_EUSART2_SetTxInterruptHandler 000E  
                                   _EUSART2_SetTxInterruptHandler 1FD0  
                                                  ??_medianFilter 00B7  
                                                 __initialization 13E8  
                                          _Sensor_setSamplePeriod 1E5E  
                                                    __end_of_main 13E8  
                                            _Sensor_setCalibrated 1E80  
                                                      i2printf@ap 0005  
                                           __end_of_ringBufferLUT 041A  
                                __end_of_MTOUCH_Button_Initialize 1552  
                                                          ??_main 00CB  
                                                   __activetblptr 000003  
                                         _MTOUCH_Sensor_Calibrate 1DA0  
                                         ??_Button_Reading_Update 00BE  
                                                          ?i2_abs 0001  
                                __end_of_ADCC_ThresholdISR_mTouch 2022  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 00B7  
                                        ?_Button_Deviation_Update 00B5  
                                                    ?_MTOUCH_Tick 0001  
                                    Button_Baseline_Update@button 00B5  
                                      __end_of_EUSART2_Initialize 1748  
                                                          _ADCON0 000F60  
                                                          _ADCON1 000F59  
                                                          _ADCON2 000F5A  
                                                          _ADCON3 000F5B  
                                        _eusart2TxBufferRemaining 0045  
                                                          _ADFLTR 000F72  
                            __size_of_MTOUCH_Sensor_RawSample_Get 0038  
                                                          _ADLTHH 000F6B  
                                                          _ADLTHL 000F6A  
                                                          _ADUTHH 000F6D  
                                                          _ADUTHL 000F6C  
                                                          _ANSELA 000E92  
                                                          ?_putch 0001  
                                                          _ANSELB 000E9A  
                                                          _ANSELD 000EA7  
                                                          _ANSELE 000EAF  
                                                          _ANSELF 000EB4  
                                                          _ANSELG 000EBC  
                                                          _RC2REG 000EF1  
                                                          _RC2STA 000EF5  
                                                          _ODCONA 000E90  
                                                          _ODCONB 000E98  
                                                          _ODCONC 000EA0  
                                                          _ODCOND 000EA5  
                                                          _ODCONE 000EAD  
                                                          _ODCONF 000EB2  
                                                          _ODCONG 000EBA  
                                                          _ODCONH 000EBF  
                                                          i2l1017 1DE6  
                                                  __CFG_WDTCCS$SC 000000  
                                                          i2l3195 19C4  
                                           ?_Sensor_Sampled_Reset 00B5  
                                                          _RG7PPS 000E89  
                                                   i2putch@txData 0002  
                                                          _OSCFRQ 000E49  
                                                       ??i2_putch 0002  
                                                          _TX2REG 000EF2  
                                                          _TX2STA 000EF6  
                               MTOUCH_Button_InitializeAll@button 00C0  
                                                          i2abs@a 0001  
                                  ??_Button_Reading_Update_Helper 00BA  
                                           ??i2_Sensor_SetTrisBit 0002  
                                         _MTOUCH_Button_State_Get 1CD2  
                                          _Button_DefaultCallback 203E  
                                 __end_of_MTOUCH_Service_Mainloop 1D78  
                                                  __CFG_PWRTE$OFF 000000  
                                                  __CFG_XINST$OFF 000000  
                                             _Sensor_isCalibrated 1EEE  
                                     MTOUCH_Sensor_Service@sensor 000E  
                                          _Sensor_DefaultCallback 203C  
                                       __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                                                   _packet_sample 007E  
                                           ?_Sensor_setCalibrated 0001  
                                    Sensor_DefaultCallback@sensor 0001  
                                                  __CFG_STVREN$ON 000000  
                                                          _memcpy 17EA  
                                                          clear_0 142E  
                                                          clear_1 143A  
                                                          clear_2 1446  
                                                          clear_3 1452  
                                            _eusart2RxStringReady 0030  
                                __end_of_MTOUCH_Button_ServiceAll 1F22  
                                  __size_of_MTOUCH_Sensor_Service 0070  
                                                          _printf 1B7C  
                                   __end_of_MTOUCH_Sensor_Service 15C2  
                                    Sensor_autoCalibration@sensor 0005  
                                                          _strcmp 179A  
                                                          _strlen 18CC  
                                  i2Sensor_scheduleNextScan@state 0005  
                                               ??i2_EUSART2_Write 0001  
                                                  _PMD_Initialize 1E9E  
                                                    __pdataCOMRAM 0036  
                                         _MTOUCH_Sensor_SampleAll 1886  
                                    Button_DefaultCallback@button 0001  
                                                    __mediumconst FD3E  
                                                  _ringBufferPull 0AE2  
                                            ?_Sensor_isCalibrated 00B5  
                                                          tblptrh 000FF7  
                                                          tblptrl 000FF6  
                                                          tblptru 000FF8  
                                        ?_Sensor_RawSample_Update 00BC  
                                            _EUSART2_Transmit_ISR 1BAE  
                                         ?_Button_Baseline_Update 00B5  
                             Sensor_postAcquisitionProcess@sensor 00C7  
                                                 ??_EUSART2_Write 00B5  
                              __size_of_Sensor_setCalibratAcqTime 0030  
                                 MTOUCH_Sensor_RawSample_Get@name 00B7  
                                   __size_of_INTERRUPT_Initialize 000C  
                                                 _eusart2RxBuffer 0100  
                                ??_INTERRUPT_InterruptManagerHigh 0010  
                                 ?_INTERRUPT_InterruptManagerHigh 0001  
                                               _SYSTEM_Initialize 1EBA  
                                                 _eusart2TxBuffer 0200  
                                                      __accesstop 0060  
                                         __end_of__initialization 1458  
                             __size_of_Button_Baseline_Initialize 0060  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                 ??_Sensor_postAcquisitionProcess 00C0  
                                              ?_SYSTEM_Initialize 0001  
                                             _Button_StateMachine 00CC  
                                                   ___rparam_used 000001  
                                      __end_of_Button_Tick_helper 179A  
                                   MTOUCH_Sensor_Calibrate@sensor 00B5  
                                                   __end_ofi2_abs 1DF0  
                               __size_of_MTOUCH_Sensor_isSampling 0004  
                                       ?_MTOUCH_Sensor_isSampling 0001  
                                                  __pcstackCOMRAM 0001  
                                                    __pidataBANK0 2022  
                                             ??_SYSTEM_Initialize 00C1  
                                      __end_of_MTOUCH_Button_Tick 1DA0  
                                __end_of_MTOUCH_Sensor_Initialize 14DC  
                                  ?_EUSART2_SetTxInterruptHandler 00B5  
                                                   __end_of_putch 1FD0  
                                       ??_MTOUCH_Sensor_Calibrate 00B5  
                                                _Sensor_isEnabled 1DF0  
                                __size_of_Sensor_scheduleNextScan 016A  
                                    ??i2_MTOUCH_Sensor_wasSampled 0001  
                                 __end_of_Button_Deviation_Update 0D0E  
                                          __end_of_PMD_Initialize 1EBA  
                                        Sensor_setInactive@sensor 00B5  
                                                  _Button_Service 10B0  
                                            __end_of_EUSART2_Read 19C2  
                                          __end_of_ringBufferPull 0BFC  
                                      ?_Button_State_Initializing 00BE  
                                            Button_Service@button 00C7  
                                                         ??i2_abs 0003  
                                           ??_Sensor_isCalibrated 00B7  
                                  __end_of_Button_Baseline_Update 0E0E  
                                           ?_EUSART2_Transmit_ISR 0001  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 00C4  
                                        _MTOUCH_Button_Initialize 14DC  
                                                       ?i2_printf 0003  
                                            __end_of_medianFilter 0254  
                                         ringBufferPull@index_724 00C3  
                                         _Button_State_NotPressed 0710  
                                   __size_of_MTOUCH_Sensor_Enable 0028  
                                              _Sensor_setInactive 1F8E  
                                       __end_of_SYSTEM_Initialize 1ED4  
                                MTOUCH_Sensor_isCalibrated@sensor 00B5  
                                          ??_Sensor_Sampled_Reset 00B7  
                                                         ??_putch 00B6  
                                        _ADCC_ThresholdISR_mTouch 2018  
                                                   _eusart2RxHead 0033  
                              __size_ofi2_MTOUCH_Sensor_isEnabled 0032  
                                                   _eusart2TxHead 0035  
                                                      __pbssBANK0 0060  
                                                      __pbssBANK1 0100  
                                                      __pbssBANK2 0200  
                                                   _eusart2RxTail 0032  
                                                   _eusart2TxTail 0034  
                                      ?i2_MTOUCH_Sensor_isEnabled 0001  
                                         _MTOUCH_Sensor_isEnabled 1AE0  
                                       ??_MTOUCH_Button_State_Get 00B5  
                                                      __pnvCOMRAM 0042  
                                             ?_Sensor_setInactive 00B5  
                                                _Sensor_setActive 1FA0  
                                      __end_of_mtouch_button_init FD8F  
                                           EUSART2_Read@readValue 00B5  
                             __size_ofi2_MTOUCH_Sensor_wasSampled 0032  
                                          ??_Sensor_setCalibrated 0003  
                                         Sensor_SetTrisBit@sensor 00B6  
                                i2MTOUCH_Sensor_wasSampled@sensor 0001  
                                  MTOUCH_Sensor_wasSampled@sensor 00B5  
                                          __end_of_Button_Service 1174  
                                                         ?_memcpy 00B5  
                             __end_of_MTOUCH_Button_InitializeAll 1AA8  
                                     _MTOUCH_Button_InitializeAll 1A70  
                                                         _ADSTPTH 000F69  
                                                         _ADSTPTL 000F68  
                             __end_of_MTOUCH_Sensor_InitializeAll 1A70  
                                     _MTOUCH_Sensor_InitializeAll 1A38  
                                       ??_MTOUCH_Sensor_SampleAll 00CA  
                                                         ?_printf 00B7  
                                                 ?_PMD_Initialize 0001  
                                 __end_of_Sensor_RawSample_Update 1886  
                                            ??_Sensor_setInactive 00B7  
                                                         ?_strcmp 00B5  
                                                         ?_strlen 00B5  
                               __size_of_MTOUCH_Sensor_wasSampled 0034  
                                       ?_MTOUCH_Sensor_wasSampled 0001  
                                                 ?_ringBufferPull 0001  
                                       Sensor_isCalibrated@sensor 00B5  
                               __end_of_Button_State_Initializing 10B0  
                                                         _SP2BRGH 000EF4  
                                                         _SP2BRGL 000EF3  
                                        _MTOUCH_Button_ServiceAll 1F08  
                                                         _OSCCON1 000E43  
                                                         _OSCCON3 000E45  
                                     __end_of_EUSART2_Receive_ISR 1350  
                                   MTOUCH_Sensor_SampleAll@sensor 00CA  
                                                      ??i2_printf 0005  
                                                         _OSCTUNE 000E48  
                                __size_of_MTOUCH_Service_Mainloop 0028  
                                    __end_of_Button_State_Pressed 0EFA  
                                      i2Sensor_SetTrisBit@TrisBit 0001  
                                Button_Baseline_Initialize@button 00B8  
                                 Sensor_setCalibratAcqTime@sensor 0001  
                                            __size_of_MTOUCH_Tick 0006  
                            __size_of_Sensor_isCalibratingAcqTime 001A  
                                 ??i2_Sensor_isCalibratingAcqTime 0003  
                                         ??i2_Sensor_isCalibrated 0003  
                                                         i2_putch 200E  
                               __end_ofi2_MTOUCH_Sensor_isEnabled 1C44  
                                         ?_Sensor_setSamplePeriod 0001  
                                                      _freq_index 002B  
                                                         __Hparam 0000  
                                               _Sensor_SetTrisBit 15C2  
                                                         __Lparam 0000  
                           __end_of_Sensor_postAcquisitionProcess 0FE4  
                          __size_of_Sensor_postAcquisitionProcess 00EA  
                                   _Sensor_postAcquisitionProcess 0EFA  
                                              ?_Sensor_SetTrisBit 00B5  
                                  MTOUCH_Button_Initialize@button 00B7  
                                                 ?_Button_Service 0001  
                                                         __pcinit 13E8  
                                                 __size_of_memcpy 004E  
                                                         __ramtop 0E00  
                                                 _scanInterrupted 002C  
                                                         __ptext0 1350  
                                                         __ptext1 0AE2  
                                                         __ptext2 18CC  
                                                         __ptext3 0254  
                                                         __ptext4 179A  
                                                         __ptext5 1986  
                                                         __ptext6 19FE  
                                                         __ptext7 1B7C  
                                                         __ptext8 1FC2  
                                                         __ptext9 190A  
                                                 __size_of_printf 0032  
                                     Button_Reading_Update@button 00BC  
                                             ??_Sensor_SetTrisBit 00B6  
                                                 __size_of_strcmp 0050  
                                                 __size_of_strlen 003E  
                                        _MTOUCH_Sensor_Initialize 1462  
                                           _OSCILLATOR_Initialize 1F22  
                                          ??_EUSART2_Transmit_ISR 0001  
                                                    __size_of_abs 002A  
                                       ??_Button_State_NotPressed 00C0  
                                        ??_PIN_MANAGER_Initialize 00B5  
                                  __size_of_Button_Reading_Update 0024  
                                     __size_of_MTOUCH_needReburst 000A  
                                   __end_of_Button_Reading_Update 1E5E  
                               MTOUCH_Sensor_InitializeAll@sensor 00C0  
                                                _callback_sampled 003F  
                                       ??_MTOUCH_Sensor_isEnabled 00B5  
                                      __size_of_SYSTEM_Initialize 001A  
                                           i2EUSART2_Write@txData 0001  
                                                _callback_pressed 0039  
                                  MTOUCH_Sensor_Initialize@sensor 00B7  
                                               _printResetMessage 19FE  
                                 i2Sensor_scheduleNextScan@sensor 0007  
                                   Sensor_scheduleNextScan@sensor 00BB  
                                            end_of_initialization 1458  
                                         ?_Button_DefaultCallback 0001  
                                                         memcpy@d 00BC  
                                                         memcpy@n 00B9  
                                                         memcpy@s 00BE  
                                  __end_of_Sensor_setSamplePeriod 1E80  
                                              ?_printResetMessage 0001  
                                      __end_of_mtouch_sensor_init FDBC  
                                        ?_Sensor_FrequencyHopping 0001  
                                       __end_of_Sensor_SetTrisBit 1628  
                                         ?_Sensor_DefaultCallback 0001  
                                __size_of_Button_Deviation_Update 0112  
                                    ??_MTOUCH_Sensor_isCalibrated 00B5  
                                              _EUSART2_Initialize 16EA  
                                             ??_printResetMessage 00BC  
                             __end_of_MTOUCH_Sensor_RawSample_Get 1AE0  
                                     _MTOUCH_Sensor_RawSample_Get 1AA8  
                                                 i2_EUSART2_Write 19C2  
                                                         printf@c 00BB  
                                                         printf@f 00B7  
                                                         postdec1 000FE5  
                                                         postdec2 000FDD  
                                                         postinc0 000FEE  
                                                         postinc1 000FE6  
                                                         postinc2 000FDE  
                                           __size_of_EUSART2_Read 003C  
                                      ?i2_Sensor_scheduleNextScan 0001  
                                         _Sensor_scheduleNextScan 05A6  
                              __end_ofi2_MTOUCH_Sensor_wasSampled 1C12  
                                      i2_MTOUCH_Sensor_wasSampled 1BE0  
                                                         strcmp@r 00BA  
                                           __CFG_WDTCPS$WDTCPS_31 000000  
                                             ?_EUSART2_Initialize 0001  
                                                         strlen@s 00B5  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 00C5  
                                           __size_of_medianFilter 0254  
                                          Sensor_setActive@sensor 00B5  
                                   Button_Deviation_Update@button 00B5  
                                                       _TRISEbits 000F85  
                                 i2MTOUCH_Sensor_isEnabled@sensor 0001  
                                   MTOUCH_Sensor_isEnabled@sensor 00B5  
                                       __end_of_printResetMessage 1A38  
                                      MTOUCH_Sensor_Enable@sensor 00B5  
                                             _callback_notPressed 0036  
                                                __CFG_FEXTOSC$OFF 000000  
                                __end_of_MTOUCH_Sensor_isSampling 203C  
                             __size_of_MTOUCH_Sensor_isCalibrated 0034  
                                  __end_of_Button_DefaultCallback 2040  
                                     __end_ofi2_Sensor_SetTrisBit 168A  
                                            ??_EUSART2_Initialize 00B8  
                                        __end_of_Sensor_isEnabled 1E16  
                                          __size_of_ringBufferLUT 01C6  
                                      Sensor_setCalibrated@sensor 0001  
                                  __end_of_Sensor_DefaultCallback 203E  
                                     MTOUCH_Button_State_Get@name 00B5  
                                        ??_Sensor_autoCalibration 0007  
                                                    _EUSART2_Read 1986  
                                              medianFilter@sensor 00BB  
                                __size_of_Sensor_RawSample_Update 004E  
                           __end_ofi2_Sensor_isCalibratingAcqTime 1F6A  
                          __size_ofi2_Sensor_isCalibratingAcqTime 0018  
                                   i2_Sensor_isCalibratingAcqTime 1F52  
                                        ringBufferPull@charNumber 00C1  
                                                    _medianFilter 0000  
                                    __end_of_INTERRUPT_Initialize 2004  
                                            _Button_State_Pressed 0E0E  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 1986  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 003E  
                                   _MTOUCH_Sensor_ADCC_Initialize 1948  
                               __end_ofi2_Sensor_scheduleNextScan 09AE  
                                      ??_MTOUCH_Button_Initialize 00B6  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 05A6  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 018C  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0001  
                      ??_Sensor_FrequencyHopping_Autotune_Process 00B9  
                        _Sensor_FrequencyHopping_Autotune_Process 041A  
                                 ??_MTOUCH_Sensor_Scan_Initialize 00B5  
                                  ?_Sensor_postAcquisitionProcess 0001  
                                                   __pidataCOMRAM 1FEC  
                                              _Button_Tick_helper 1748  
                                                  __end_of_memcpy 1838  
                                          ?_OSCILLATOR_Initialize 0001  
                                             MTOUCH_Button_Tick@i 00B9  
                                      ??_ADCC_ThresholdISR_mTouch 0010  
                                        __end_of_Sensor_setActive 1FB2  
                                                  __end_of_printf 1BAE  
                                     ??_Button_State_Initializing 00C0  
                                                  __end_of_strcmp 17EA  
                                                  __end_of_strlen 190A  
                                           _MTOUCH_Sensor_Service 1552  
                                             start_initialization 13E8  
                                         _MTOUCH_Service_Mainloop 1D50  
                                 __size_of_PIN_MANAGER_Initialize 009A  
                                              _MTOUCH_Button_Tick 1D78  
                                             ?_Button_Tick_helper 00B5  
                                                     __end_of_abs 1D28  
                                                       i2printf@c 0007  
                                                       i2printf@f 0003  
                                 __end_of_Sensor_FrequencyHopping 1E3A  
                   EUSART2_SetRxInterruptHandler@interruptHandler 00B5  
                   EUSART2_SetTxInterruptHandler@interruptHandler 00B5  
                                                     putch@txData 00B6  
                                               __size_ofi2_printf 002E  
                                           __end_of_EUSART2_Write 1948  
                                     ??i2_MTOUCH_Sensor_isEnabled 0001  
                                             ?_MTOUCH_Button_Tick 0001  
                                 Button_State_Initializing@button 00BE  
                                         __end_ofi2_EUSART2_Write 19FE  
                                      __size_of_Sensor_SetTrisBit 0066  
                                         medianFilter@bufferIndex 0022  
                                __end_of_MTOUCH_Sensor_wasSampled 1B48  
                                                __CFG_LPBOREN$OFF 000000  
                                       ??_Sensor_scheduleNextScan 00B7  
                                            ??_Button_Tick_helper 00B7  
                                    __end_of_MTOUCH_Sensor_Enable 1D50  
                                                ??_PMD_Initialize 00B5  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 00C2  
                                           ?_Button_State_Pressed 00BE  
                                                ??_ringBufferPull 00BE  
                                      ??_MTOUCH_Button_ServiceAll 00C9  
                                                     __pdataBANK0 00CC  
                                                        ??_memcpy 00BB  
                                                   _ringBufferLUT 0254  
                                     __end_of_Sensor_isCalibrated 1F08  
                                    ??_Button_Baseline_Initialize 00BA  
                                            ??_MTOUCH_Button_Tick 00B9  
                                              _mtouch_button_init FD3F  
                                      Sensor_Sampled_Reset@sensor 00B5  
                                                        ??_printf 00B9  
                                                        ??_strcmp 00B9  
                                                        ??_strlen 00B7  
                                    ?_Sensor_isCalibratingAcqTime 00B5  
                                                  _eusart2RxCount 0031  
                                                     __pbssCOMRAM 0022  
                                                   _sampling_flag 002D  
                                                   __pcstackBANK0 00B5  
                                      __size_of_printResetMessage 003A  
                                        Sensor_SetTrisBit@TrisBit 00B5  
                                  MTOUCH_Button_ServiceAll@button 00C9  
                                             EUSART2_Write@txData 00B5  
                                 ??_EUSART2_SetRxInterruptHandler 00B8  
                                   __size_of_Sensor_Sampled_Reset 0012  
                                                        ?i2_putch 0001  
                                         _Button_Deviation_Update 0BFC  
                                      ?_Sensor_setCalibratAcqTime 0001  
                                  __size_ofi2_Sensor_isCalibrated 0018  
                                   __end_ofi2_Sensor_isCalibrated 1F52  
                                       _Button_State_Initializing 0FE4  
                                        _MTOUCH_Sensor_isSampling 2038  
                              __end_of_MTOUCH_Sensor_isCalibrated 1B7C  
                                      _MTOUCH_Sensor_isCalibrated 1B48  
                                                       __pnvBANK0 00D5  
                                 __size_of_Sensor_autoCalibration 0134  
                                               _Sensor_setSampled 1FB2  
                                          _PIN_MANAGER_Initialize 121C  
                                                ??_Button_Service 00C5  
                                        ?_MTOUCH_Sensor_Calibrate 0001  
                                              ?_Sensor_setSampled 0001  
                                                       __pintcode 0008  
                              Button_Reading_Update_Helper@button 00B8  
                                                   __pmediumconst FD3E  
                                      ??_MTOUCH_Sensor_Initialize 00B7  
                                   __size_of_Sensor_setCalibrated 001E  
                                                  ?_ringBufferLUT 00BC  
                               _EUSART2_TxDefaultInterruptHandler 0042  
                                                __CFG_PPS1WAY$OFF 000000  
                                       i2_MTOUCH_Sensor_isEnabled 1C12  
                                             ??_Sensor_setSampled 0003  
                                       ??_MTOUCH_Service_Mainloop 00CB  
                                          ?_MTOUCH_Sensor_Service 0001  
                                     __size_of_Sensor_setInactive 0012  
                                                        _BAUD2CON 000EF7  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0001  
                                                  __size_ofi2_abs 0028  
                                   ??_Sensor_isCalibratingAcqTime 00B7  
                                                   ??_MTOUCH_Tick 00BA  
                                       i2Sensor_SetTrisBit@sensor 0002  
                                        ?_MTOUCH_Button_State_Get 0001  
                                                  __size_of_putch 000E  
                                            _INTERRUPT_Initialize 1FF8  
                                    __size_of_EUSART2_Receive_ISR 009A  
                                       __end_of_Sensor_setSampled 1FC2  
                                                ?i2_EUSART2_Write 0001  
                                                        _LATFbits 000F7E  
                                         _Sensor_RawSample_Update 1838  
                               __end_of_Sensor_setCalibratAcqTime 1CA4  
                                                        _IPR1bits 000E20  
                                                        _IPR3bits 000E22  
                                                        _PIE1bits 000E2A  
                                                        _PIE3bits 000E2C  
                                                        i2u300_45 09E0  
                                                        i2u311_40 08A0  
                                                        i2u315_45 098C  
                                                        i2u316_40 09A6  
                                                        i2u317_45 09A8  
                                                        i2u271_40 1C3C  
                                                        i2u343_40 12F2  
                                                        i2u272_40 1F4E  
                                                        i2u273_40 1F66  
                                                        _PIR1bits 000E34  
                                                        i2u265_45 1634  
                                                        i2u265_46 1636  
                                                        i2u266_45 1640  
                                                        i2u266_46 1642  
                                                        i2u275_40 1C0A  
                                                        i2u362_48 0078  
                                                        i2u267_45 164C  
                                                        i2u267_46 164E  
                                                        i2u268_45 1658  
                                                        i2u268_46 165A  
                                                        _PIR3bits 000E36  
                                                        i2u269_45 1664  
                                                        i2u269_46 1666  
                                                        i2u359_48 005E  
                                          ??_Button_State_Pressed 00C0  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 1C74  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0030  
                                  _MTOUCH_Sensor_Sampled_ResetAll 1C44  
                                        ?_MTOUCH_Sensor_SampleAll 0001  
                                              _mtouch_sensor_init FD8F  
                                     ??i2_Sensor_scheduleNextScan 0003  
                                     ?i2_MTOUCH_Sensor_wasSampled 0001  
                                        _MTOUCH_Sensor_wasSampled 1B14  
                                              _mtouch_time_toScan 002F  
                                __size_of_Sensor_FrequencyHopping 0024  
                                        ??_Button_Baseline_Update 00B7  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 00C6  
                                                      _ADCON0bits 000F60  
                                          _Sensor_autoCalibration 09AE  
                                      __end_of_MTOUCH_needReburst 200E  
                                                        _WPUEbits 000EAE  
                                   __size_of_EUSART2_Transmit_ISR 0032  
                                                        i2_printf 1CA4  
                                            _MTOUCH_Sensor_Enable 1D28  
                                                       copy_data0 13FC  
                                                       copy_data1 141C  
                                        Button_Tick_helper@button 00B5  
                                       ??_Button_Deviation_Update 00B7  
                                           ?_INTERRUPT_Initialize 0001  
                                           _Button_Reading_Update 1E3A  
                                               ?_Sensor_isEnabled 00B5  
                                             __end_of_MTOUCH_Tick 2038  
                                               _MTOUCH_Initialize 1F6A  
                                 __end_of_MTOUCH_Sensor_Calibrate 1DC8  
                                                __size_ofi2_putch 000A  
                                              ??_Sensor_isEnabled 00B7  
                                              ?_MTOUCH_Initialize 0001  
                                                        __Hrparam 0000  
                           __end_of_EUSART2_SetRxInterruptHandler 1FEC  
                          __size_of_EUSART2_SetRxInterruptHandler 000E  
                                   _EUSART2_SetRxInterruptHandler 1FDE  
                                                       memcpy@tmp 00BB  
                                                        __Lrparam 0000  
                                              __CFG_BOREN$SBORDIS 000000  
                                                 ??_ringBufferLUT 00BE  
                                                    _sample_delay 002A  
                               Sensor_postAcquisitionProcess@name 00C6  
                                         ??_OSCILLATOR_Initialize 00B5  
                              __end_of_Button_Baseline_Initialize 16EA  
                                      _Button_Baseline_Initialize 168A  
                                             ??_MTOUCH_Initialize 00C1  
                                        ?_Button_State_NotPressed 00BE  
                                     i2Sensor_isCalibrated@sensor 0001  
                                              Button_Service@name 00C6  
                                                      _ANSELEbits 000EAF  
                                 __end_of_MTOUCH_Button_State_Get 1CFE  
                                        ?_MTOUCH_Sensor_isEnabled 0001  
                                               ?_Sensor_setActive 00B5  
                                              ??_Sensor_setActive 00B7  
                                           ?_MTOUCH_Sensor_Enable 0001  
                                                        __ptext10 1EBA  
                                                        __ptext11 1E9E  
                                                        __ptext20 1A70  
                                                        __ptext12 121C  
                                                        __ptext21 17EA  
                                                        __ptext13 1F22  
                                                        __ptext30 1748  
                                                        __ptext22 1FF8  
                                                        __ptext14 1F6A  
                                                        __ptext31 1C44  
                                                        __ptext23 16EA  
                                                        __ptext15 202C  
                                                        __ptext40 1E5E  
                                                        __ptext32 1F7C  
                                                        __ptext24 1FD0  
                                                        __ptext16 1948  
                                                        __ptext41 0EFA  
                                                        __ptext33 1886  
                                                        __ptext25 1FDE  
                                                        __ptext17 1A38  
                                                        __ptext50 2038  
                                                        __ptext42 1F8E  
                                                        __ptext34 05A6  
                                                        __ptext26 1D50  
                                                        __ptext18 1462  
                                                        __ptext51 1F08  
                                                        __ptext43 1FA0  
                                                        __ptext35 1ED4  
                                                        __ptext27 2004  
                                                        __ptext19 1D28  
                                                        __ptext60 203E  
                                                        __ptext52 10B0  
                                                        __ptext44 1DF0  
                                                        __ptext36 1EEE  
                                                        __ptext28 2032  
                                                        __ptext61 0D0E  
                                                        __ptext53 1B14  
                                                        __ptext45 1838  
                                                        __ptext37 15C2  
                                                        __ptext29 1D78  
                                                        __ptext70 12B6  
                                                        __ptext62 168A  
                                                        __ptext54 1B48  
                                                        __ptext46 0000  
                                                        __ptext38 1AE0  
                                                        __ptext71 1CA4  
                                                        __ptext63 1E3A  
                                                        __ptext55 0710  
                                                        __ptext47 203C  
                                                        __ptext39 1E16  
                                                        __ptext80 1C12  
                                                        __ptext72 200E  
                                                        __ptext64 1174  
                                                        __ptext56 0FE4  
                                                        __ptext48 041A  
                                                        __ptext81 1FB2  
                                                        __ptext73 19C2  
                                                        __ptext65 1AA8  
                                                        __ptext57 0E0E  
                                                        __ptext49 1CFE  
                                                        __ptext82 09AE  
                                                        __ptext74 2018  
                                                        __ptext66 0BFC  
                                                        __ptext58 14DC  
                                                        __ptext83 1DC8  
                                                        __ptext75 1552  
                                                        __ptext67 1CD2  
                                                        __ptext59 1DA0  
                                                        __ptext84 1F52  
                                                        __ptext76 0862  
                                                        __ptext85 1E80  
                                                        __ptext77 1F3A  
                                                        __ptext69 1BAE  
                                                        __ptext86 1C74  
                                                        __ptext78 1628  
                                                        __ptext87 0000  
                                                        __ptext79 1BE0  
                                       i2_Sensor_scheduleNextScan 0862  
                                       __end_of_MTOUCH_Initialize 1F7C  
                                       ??_Sensor_RawSample_Update 00BE  
                                     __size_of_EUSART2_Initialize 005E  
                                                        _freq_hop 003C  
                                      __size_of_Sensor_setSampled 0010  
                                               _currentScanSensor 002E  
                                                   __size_of_main 0098  
                                 __end_of_MTOUCH_Sensor_SampleAll 18CC  
                                            __CFG_WDTCWS$WDTCWS_7 000000  
                                      Sensor_autoCalibration@name 000D  
                                    __size_ofi2_Sensor_SetTrisBit 0062  
                                   MTOUCH_needReburst@needReburst 00B5  
                                              __CFG_BORV$VBOR_190 000000  
                                                      _RC2STAbits 000EF5  
                                                        int$flags 0046  
                              __size_of_Button_State_Initializing 00CC  
                                 __size_of_Button_Baseline_Update 0100  
                                    ?_MTOUCH_Button_InitializeAll 0001  
                                    ?_MTOUCH_Sensor_InitializeAll 0001  
                                                   _mtouch_button 0140  
                                                      _INTCONbits 000FF2  
                                                   _mtouch_sensor 0088  
                                                        memcpy@d1 00B5  
                                                        memcpy@s1 00B7  
                                        ??_Sensor_setSamplePeriod 00B5  
                                      ??_MTOUCH_Sensor_isSampling 00B5  
                                          ??_INTERRUPT_Initialize 00B5  
                                                     _MTOUCH_Tick 2032  
                                          ?_Button_Reading_Update 00BC  
                                Button_Deviation_Update@deviation 00BD  
                                    MTOUCH_Button_Initialize@name 00B6  
                               __size_of_MTOUCH_Button_Initialize 0076  
                                                        intlevel2 0000  
                                       ?_MTOUCH_Button_Initialize 0001  
                                         ?_PIN_MANAGER_Initialize 0001  
                               __size_of_ADCC_ThresholdISR_mTouch 000A  
                                     ??_Sensor_setCalibratAcqTime 0003  
                                       ?_ADCC_ThresholdISR_mTouch 0001  
                                               __CFG_CLKOUTEN$OFF 000000  
                                     ?_MTOUCH_Sensor_isCalibrated 0001  
                Sensor_FrequencyHopping_Autotune_Process@variance 00C0  
                                    Sensor_scheduleNextScan@state 00B9  
                                     __size_of_Button_Tick_helper 0052  
                                 __end_of_Button_State_NotPressed 0862  
                                                        printf@ap 00B9  
                                         _Sensor_FrequencyHopping 1E16  
                                         ??_MTOUCH_Sensor_Service 000E  
                                  ?_EUSART2_SetRxInterruptHandler 00B5  
                                    __end_of_Sensor_Sampled_Reset 1F8E  
                                 __end_of_MTOUCH_Sensor_isEnabled 1B14  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                          __size_of_EUSART2_Write 003E  
                                             _EUSART2_Receive_ISR 12B6  
                               i2Sensor_scheduleNextScan@skipScan 0006  
                                 Sensor_scheduleNextScan@skipScan 00BA  
                          __end_of_INTERRUPT_InterruptManagerHigh 00E4  
                         __size_of_INTERRUPT_InterruptManagerHigh 00DC  
                                  _INTERRUPT_InterruptManagerHigh 0008  
                                                      _RX2PPSbits 000E11  
                                   ??_MTOUCH_Button_InitializeAll 00C0  
                                                        strcmp@s1 00B5  
                                                        strcmp@s2 00B7  
                                               ringBufferLUT@line 00BC  
                                        ??_Button_DefaultCallback 00B5  
                                   ??_MTOUCH_Sensor_InitializeAll 00C0  
                                __size_of_MTOUCH_Sensor_Calibrate 0028  
                                                        strlen@cp 00B9  
                                          ??_MTOUCH_Sensor_Enable 00B5  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 00BF  
                             i2Sensor_isCalibratingAcqTime@sensor 0001  
                               Sensor_isCalibratingAcqTime@sensor 00B5  
                                    __size_of_Sensor_isCalibrated 001A  
                                        ??_Sensor_DefaultCallback 00B5  
                                    __end_of_Sensor_setCalibrated 1E9E  
                            __end_of_Button_Reading_Update_Helper 121C  
                           __size_of_Button_Reading_Update_Helper 00A8  
                                    _Button_Reading_Update_Helper 1174  
                                                      _TX2STAbits 000EF6  
                               __size_of_MTOUCH_Button_ServiceAll 001A  
                                       ?_MTOUCH_Button_ServiceAll 0001  
                                   Button_State_NotPressed@button 00BE  
                                      __size_of_MTOUCH_Initialize 0012  
                                  __end_of_PIN_MANAGER_Initialize 12B6  
                                          _Button_Baseline_Update 0D0E  
                                 ??_EUSART2_SetTxInterruptHandler 00B8  
                                            ?_EUSART2_Receive_ISR 0001  
                                        ?_Sensor_scheduleNextScan 0001  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 00B5  
                                      ??_MTOUCH_Sensor_wasSampled 00B5  
                               _EUSART2_RxDefaultInterruptHandler 00D5  
                                __size_of_MTOUCH_Button_State_Get 002C  
                                           i2_Sensor_isCalibrated 1F3A  
