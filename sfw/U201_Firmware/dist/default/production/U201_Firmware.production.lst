

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 15:07:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.45 (B)
   117                           ; Generated 30/01/2018 GMT
   118                           ; 
   119                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18LF67K40 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataCOMRAM
   152  012476                     __pidataCOMRAM:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _callback_notPressed
   156  012476  92                 	db	low _Button_DefaultCallback
   157  012477  24                 	db	high _Button_DefaultCallback
   158  012478  01                 	db	low (_Button_DefaultCallback shr (0+16))
   159                           
   160                           ;initializer for _callback_pressed
   161  012479  92                 	db	low _Button_DefaultCallback
   162  01247A  24                 	db	high _Button_DefaultCallback
   163  01247B  01                 	db	low (_Button_DefaultCallback shr (0+16))
   164                           
   165                           ;initializer for _callback_sampled
   166  01247C  90                 	db	low _Sensor_DefaultCallback
   167  01247D  24                 	db	high _Sensor_DefaultCallback
   168  01247E  01                 	db	low (_Sensor_DefaultCallback shr (0+16))
   169                           
   170                           	psect	idataBANK0
   171  012440                     __pidataBANK0:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _Button_StateMachine
   175  012440  28                 	db	low _Button_State_Initializing
   176  012441  13                 	db	high _Button_State_Initializing
   177  012442  01                 	db	low (_Button_State_Initializing shr (0+16))
   178  012443  E2                 	db	low _Button_State_NotPressed
   179  012444  07                 	db	high _Button_State_NotPressed
   180  012445  01                 	db	low (_Button_State_NotPressed shr (0+16))
   181  012446  52                 	db	low _Button_State_Pressed
   182  012447  11                 	db	high _Button_State_Pressed
   183  012448  01                 	db	low (_Button_State_Pressed shr (0+16))
   184                           
   185                           ;initializer for _freq_hop
   186  012449  00                 	db	0
   187  01244A  3C                 	db	60
   188  01244B  78                 	db	120
   189                           
   190                           	psect	mediumconst
   191  00FC1A                     __pmediumconst:
   192                           	opt stack 0
   193  00FC1A  00                 	db	0
   194  00FC1B                     _dpowers:
   195                           	opt stack 0
   196  00FC1B  0001               	dw	1
   197  00FC1D  000A               	dw	10
   198  00FC1F  0064               	dw	100
   199  00FC21  03E8               	dw	1000
   200  00FC23  2710               	dw	10000
   201  00FC25                     __end_of_dpowers:
   202                           	opt stack 0
   203  00FC25                     _mtouch_button_init:
   204                           	opt stack 0
   205  00FC25  00                 	db	0
   206  00FC26  00                 	db	0
   207  00FC27  00                 	db	0
   208  00FC28  0000               	dw	0
   209  00FC2A  0000               	dw	0
   210  00FC2C  0000               	dw	0
   211  00FC2E  00                 	db	0
   212  00FC2F  0000               	dw	0
   213  00FC31  0000               	dw	0
   214  00FC33  64                 	db	100
   215  00FC34  01                 	db	1
   216  00FC35  01                 	db	1
   217  00FC36  01                 	db	1
   218  00FC37  00                 	db	0
   219  00FC38  0000               	dw	0
   220  00FC3A  0000               	dw	0
   221  00FC3C  0000               	dw	0
   222  00FC3E  00                 	db	0
   223  00FC3F  0000               	dw	0
   224  00FC41  0000               	dw	0
   225  00FC43  64                 	db	100
   226  00FC44  01                 	db	1
   227  00FC45  02                 	db	2
   228  00FC46  02                 	db	2
   229  00FC47  00                 	db	0
   230  00FC48  0000               	dw	0
   231  00FC4A  0000               	dw	0
   232  00FC4C  0000               	dw	0
   233  00FC4E  00                 	db	0
   234  00FC4F  0000               	dw	0
   235  00FC51  0000               	dw	0
   236  00FC53  64                 	db	100
   237  00FC54  01                 	db	1
   238  00FC55  03                 	db	3
   239  00FC56  03                 	db	3
   240  00FC57  00                 	db	0
   241  00FC58  0000               	dw	0
   242  00FC5A  0000               	dw	0
   243  00FC5C  0000               	dw	0
   244  00FC5E  00                 	db	0
   245  00FC5F  0000               	dw	0
   246  00FC61  0000               	dw	0
   247  00FC63  64                 	db	100
   248  00FC64  01                 	db	1
   249  00FC65  04                 	db	4
   250  00FC66  04                 	db	4
   251  00FC67  00                 	db	0
   252  00FC68  0000               	dw	0
   253  00FC6A  0000               	dw	0
   254  00FC6C  0000               	dw	0
   255  00FC6E  00                 	db	0
   256  00FC6F  0000               	dw	0
   257  00FC71  0000               	dw	0
   258  00FC73  64                 	db	100
   259  00FC74  01                 	db	1
   260  00FC75                     __end_of_mtouch_button_init:
   261                           	opt stack 0
   262  00FC75                     _mtouch_sensor_init:
   263                           	opt stack 0
   264  00FC75  00                 	db	0
   265  00FC76  22                 	db	34
   266  00FC77  50                 	db	80
   267  00FC78  28                 	db	40
   268  00FC79  20                 	db	32
   269  00FC7A  00                 	db	0
   270  00FC7B  0000               	dw	0
   271  00FC7D  00                 	db	0
   272  00FC7E  01                 	db	1
   273  00FC7F  23                 	db	35
   274  00FC80  50                 	db	80
   275  00FC81  28                 	db	40
   276  00FC82  20                 	db	32
   277  00FC83  00                 	db	0
   278  00FC84  0000               	dw	0
   279  00FC86  00                 	db	0
   280  00FC87  02                 	db	2
   281  00FC88  24                 	db	36
   282  00FC89  50                 	db	80
   283  00FC8A  28                 	db	40
   284  00FC8B  20                 	db	32
   285  00FC8C  00                 	db	0
   286  00FC8D  0000               	dw	0
   287  00FC8F  00                 	db	0
   288  00FC90  03                 	db	3
   289  00FC91  25                 	db	37
   290  00FC92  50                 	db	80
   291  00FC93  28                 	db	40
   292  00FC94  20                 	db	32
   293  00FC95  00                 	db	0
   294  00FC96  0000               	dw	0
   295  00FC98  00                 	db	0
   296  00FC99  04                 	db	4
   297  00FC9A  26                 	db	38
   298  00FC9B  50                 	db	80
   299  00FC9C  28                 	db	40
   300  00FC9D  20                 	db	32
   301  00FC9E  00                 	db	0
   302  00FC9F  0000               	dw	0
   303  00FCA1  00                 	db	0
   304  00FCA2                     __end_of_mtouch_sensor_init:
   305                           	opt stack 0
   306  00FCA2                     STR_35:
   307  00FCA2  20                 	db	32
   308  00FCA3  20                 	db	32
   309  00FCA4  20                 	db	32
   310  00FCA5  4C                 	db	76	;'L'
   311  00FCA6  69                 	db	105	;'i'
   312  00FCA7  73                 	db	115	;'s'
   313  00FCA8  74                 	db	116	;'t'
   314  00FCA9  20                 	db	32
   315  00FCAA  6F                 	db	111	;'o'
   316  00FCAB  66                 	db	102	;'f'
   317  00FCAC  20                 	db	32
   318  00FCAD  73                 	db	115	;'s'
   319  00FCAE  75                 	db	117	;'u'
   320  00FCAF  70                 	db	112	;'p'
   321  00FCB0  70                 	db	112	;'p'
   322  00FCB1  6F                 	db	111	;'o'
   323  00FCB2  72                 	db	114	;'r'
   324  00FCB3  74                 	db	116	;'t'
   325  00FCB4  65                 	db	101	;'e'
   326  00FCB5  64                 	db	100	;'d'
   327  00FCB6  20                 	db	32
   328  00FCB7  63                 	db	99	;'c'
   329  00FCB8  6F                 	db	111	;'o'
   330  00FCB9  6D                 	db	109	;'m'
   331  00FCBA  6D                 	db	109	;'m'
   332  00FCBB  61                 	db	97	;'a'
   333  00FCBC  6E                 	db	110	;'n'
   334  00FCBD  64                 	db	100	;'d'
   335  00FCBE  73                 	db	115	;'s'
   336  00FCBF  3A                 	db	58	;':'
   337  00FCC0  0A                 	db	10
   338  00FCC1  0D                 	db	13
   339  00FCC2  20                 	db	32
   340  00FCC3  20                 	db	32
   341  00FCC4  20                 	db	32
   342  00FCC5  4C                 	db	76	;'L'
   343  00FCC6  45                 	db	69	;'E'
   344  00FCC7  44                 	db	68	;'D'
   345  00FCC8  73                 	db	115	;'s'
   346  00FCC9  20                 	db	32
   347  00FCCA  4F                 	db	79	;'O'
   348  00FCCB  6E                 	db	110	;'n'
   349  00FCCC  3A                 	db	58	;':'
   350  00FCCD  20                 	db	32
   351  00FCCE  54                 	db	84	;'T'
   352  00FCCF  75                 	db	117	;'u'
   353  00FCD0  72                 	db	114	;'r'
   354  00FCD1  6E                 	db	110	;'n'
   355  00FCD2  73                 	db	115	;'s'
   356  00FCD3  20                 	db	32
   357  00FCD4  61                 	db	97	;'a'
   358  00FCD5  6C                 	db	108	;'l'
   359  00FCD6  6C                 	db	108	;'l'
   360  00FCD7  20                 	db	32
   361  00FCD8  4C                 	db	76	;'L'
   362  00FCD9  45                 	db	69	;'E'
   363  00FCDA  44                 	db	68	;'D'
   364  00FCDB  73                 	db	115	;'s'
   365  00FCDC  20                 	db	32
   366  00FCDD  4F                 	db	79	;'O'
   367  00FCDE  6E                 	db	110	;'n'
   368  00FCDF  0A                 	db	10
   369  00FCE0  0D                 	db	13
   370  00FCE1  20                 	db	32
   371  00FCE2  20                 	db	32
   372  00FCE3  20                 	db	32
   373  00FCE4  4C                 	db	76	;'L'
   374  00FCE5  45                 	db	69	;'E'
   375  00FCE6  44                 	db	68	;'D'
   376  00FCE7  73                 	db	115	;'s'
   377  00FCE8  20                 	db	32
   378  00FCE9  4F                 	db	79	;'O'
   379  00FCEA  66                 	db	102	;'f'
   380  00FCEB  66                 	db	102	;'f'
   381  00FCEC  3A                 	db	58	;':'
   382  00FCED  20                 	db	32
   383  00FCEE  54                 	db	84	;'T'
   384  00FCEF  75                 	db	117	;'u'
   385  00FCF0  72                 	db	114	;'r'
   386  00FCF1  6E                 	db	110	;'n'
   387  00FCF2  73                 	db	115	;'s'
   388  00FCF3  20                 	db	32
   389  00FCF4  61                 	db	97	;'a'
   390  00FCF5  6C                 	db	108	;'l'
   391  00FCF6  6C                 	db	108	;'l'
   392  00FCF7  20                 	db	32
   393  00FCF8  4C                 	db	76	;'L'
   394  00FCF9  45                 	db	69	;'E'
   395  00FCFA  44                 	db	68	;'D'
   396  00FCFB  73                 	db	115	;'s'
   397  00FCFC  20                 	db	32
   398  00FCFD  4F                 	db	79	;'O'
   399  00FCFE  66                 	db	102	;'f'
   400  00FCFF  66                 	db	102	;'f'
   401  00FD00  0A                 	db	10
   402  00FD01  0D                 	db	13
   403  00FD02  20                 	db	32
   404  00FD03  20                 	db	32
   405  00FD04  20                 	db	32
   406  00FD05  42                 	db	66	;'B'
   407  00FD06  75                 	db	117	;'u'
   408  00FD07  74                 	db	116	;'t'
   409  00FD08  74                 	db	116	;'t'
   410  00FD09  6F                 	db	111	;'o'
   411  00FD0A  6E                 	db	110	;'n'
   412  00FD0B  20                 	db	32
   413  00FD0C  53                 	db	83	;'S'
   414  00FD0D  74                 	db	116	;'t'
   415  00FD0E  61                 	db	97	;'a'
   416  00FD0F  74                 	db	116	;'t'
   417  00FD10  65                 	db	101	;'e'
   418  00FD11  73                 	db	115	;'s'
   419  00FD12  3F                 	db	63	;'?'
   420  00FD13  3A                 	db	58	;':'
   421  00FD14  20                 	db	32
   422  00FD15  52                 	db	82	;'R'
   423  00FD16  65                 	db	101	;'e'
   424  00FD17  74                 	db	116	;'t'
   425  00FD18  75                 	db	117	;'u'
   426  00FD19  72                 	db	114	;'r'
   427  00FD1A  6E                 	db	110	;'n'
   428  00FD1B  73                 	db	115	;'s'
   429  00FD1C  20                 	db	32
   430  00FD1D  73                 	db	115	;'s'
   431  00FD1E  74                 	db	116	;'t'
   432  00FD1F  61                 	db	97	;'a'
   433  00FD20  74                 	db	116	;'t'
   434  00FD21  65                 	db	101	;'e'
   435  00FD22  20                 	db	32
   436  00FD23  6F                 	db	111	;'o'
   437  00FD24  66                 	db	102	;'f'
   438  00FD25  20                 	db	32
   439  00FD26  61                 	db	97	;'a'
   440  00FD27  6C                 	db	108	;'l'
   441  00FD28  6C                 	db	108	;'l'
   442  00FD29  20                 	db	32
   443  00FD2A  66                 	db	102	;'f'
   444  00FD2B  69                 	db	105	;'i'
   445  00FD2C  76                 	db	118	;'v'
   446  00FD2D  65                 	db	101	;'e'
   447  00FD2E  20                 	db	32
   448  00FD2F  6D                 	db	109	;'m'
   449  00FD30  54                 	db	84	;'T'
   450  00FD31  6F                 	db	111	;'o'
   451  00FD32  75                 	db	117	;'u'
   452  00FD33  63                 	db	99	;'c'
   453  00FD34  68                 	db	104	;'h'
   454  00FD35  20                 	db	32
   455  00FD36  62                 	db	98	;'b'
   456  00FD37  75                 	db	117	;'u'
   457  00FD38  74                 	db	116	;'t'
   458  00FD39  74                 	db	116	;'t'
   459  00FD3A  6F                 	db	111	;'o'
   460  00FD3B  6E                 	db	110	;'n'
   461  00FD3C  73                 	db	115	;'s'
   462  00FD3D  0A                 	db	10
   463  00FD3E  0D                 	db	13
   464  00FD3F  20                 	db	32
   465  00FD40  20                 	db	32
   466  00FD41  20                 	db	32
   467  00FD42  52                 	db	82	;'R'
   468  00FD43  65                 	db	101	;'e'
   469  00FD44  73                 	db	115	;'s'
   470  00FD45  65                 	db	101	;'e'
   471  00FD46  74                 	db	116	;'t'
   472  00FD47  3A                 	db	58	;':'
   473  00FD48  20                 	db	32
   474  00FD49  43                 	db	67	;'C'
   475  00FD4A  6C                 	db	108	;'l'
   476  00FD4B  65                 	db	101	;'e'
   477  00FD4C  61                 	db	97	;'a'
   478  00FD4D  72                 	db	114	;'r'
   479  00FD4E  73                 	db	115	;'s'
   480  00FD4F  20                 	db	32
   481  00FD50  74                 	db	116	;'t'
   482  00FD51  68                 	db	104	;'h'
   483  00FD52  65                 	db	101	;'e'
   484  00FD53  20                 	db	32
   485  00FD54  74                 	db	116	;'t'
   486  00FD55  65                 	db	101	;'e'
   487  00FD56  72                 	db	114	;'r'
   488  00FD57  6D                 	db	109	;'m'
   489  00FD58  69                 	db	105	;'i'
   490  00FD59  6E                 	db	110	;'n'
   491  00FD5A  61                 	db	97	;'a'
   492  00FD5B  6C                 	db	108	;'l'
   493  00FD5C  20                 	db	32
   494  00FD5D  61                 	db	97	;'a'
   495  00FD5E  6E                 	db	110	;'n'
   496  00FD5F  64                 	db	100	;'d'
   497  00FD60  20                 	db	32
   498  00FD61  72                 	db	114	;'r'
   499  00FD62  65                 	db	101	;'e'
   500  00FD63  73                 	db	115	;'s'
   501  00FD64  65                 	db	101	;'e'
   502  00FD65  74                 	db	116	;'t'
   503  00FD66  73                 	db	115	;'s'
   504  00FD67  20                 	db	32
   505  00FD68  74                 	db	116	;'t'
   506  00FD69  68                 	db	104	;'h'
   507  00FD6A  65                 	db	101	;'e'
   508  00FD6B  20                 	db	32
   509  00FD6C  6D                 	db	109	;'m'
   510  00FD6D  69                 	db	105	;'i'
   511  00FD6E  63                 	db	99	;'c'
   512  00FD6F  72                 	db	114	;'r'
   513  00FD70  6F                 	db	111	;'o'
   514  00FD71  0A                 	db	10
   515  00FD72  0D                 	db	13
   516  00FD73  20                 	db	32
   517  00FD74  20                 	db	32
   518  00FD75  20                 	db	32
   519  00FD76  43                 	db	67	;'C'
   520  00FD77  6C                 	db	108	;'l'
   521  00FD78  65                 	db	101	;'e'
   522  00FD79  61                 	db	97	;'a'
   523  00FD7A  72                 	db	114	;'r'
   524  00FD7B  3A                 	db	58	;':'
   525  00FD7C  20                 	db	32
   526  00FD7D  43                 	db	67	;'C'
   527  00FD7E  6C                 	db	108	;'l'
   528  00FD7F  65                 	db	101	;'e'
   529  00FD80  61                 	db	97	;'a'
   530  00FD81  72                 	db	114	;'r'
   531  00FD82  73                 	db	115	;'s'
   532  00FD83  20                 	db	32
   533  00FD84  74                 	db	116	;'t'
   534  00FD85  68                 	db	104	;'h'
   535  00FD86  65                 	db	101	;'e'
   536  00FD87  20                 	db	32
   537  00FD88  74                 	db	116	;'t'
   538  00FD89  65                 	db	101	;'e'
   539  00FD8A  72                 	db	114	;'r'
   540  00FD8B  6D                 	db	109	;'m'
   541  00FD8C  69                 	db	105	;'i'
   542  00FD8D  6E                 	db	110	;'n'
   543  00FD8E  61                 	db	97	;'a'
   544  00FD8F  6C                 	db	108	;'l'
   545  00FD90  20                 	db	32
   546  00FD91  62                 	db	98	;'b'
   547  00FD92  75                 	db	117	;'u'
   548  00FD93  74                 	db	116	;'t'
   549  00FD94  20                 	db	32
   550  00FD95  64                 	db	100	;'d'
   551  00FD96  6F                 	db	111	;'o'
   552  00FD97  65                 	db	101	;'e'
   553  00FD98  73                 	db	115	;'s'
   554  00FD99  6E                 	db	110	;'n'
   555  00FD9A  27                 	db	39
   556  00FD9B  74                 	db	116	;'t'
   557  00FD9C  20                 	db	32
   558  00FD9D  72                 	db	114	;'r'
   559  00FD9E  65                 	db	101	;'e'
   560  00FD9F  73                 	db	115	;'s'
   561  00FDA0  65                 	db	101	;'e'
   562  00FDA1  74                 	db	116	;'t'
   563  00FDA2  20                 	db	32
   564  00FDA3  74                 	db	116	;'t'
   565  00FDA4  68                 	db	104	;'h'
   566  00FDA5  65                 	db	101	;'e'
   567  00FDA6  20                 	db	32
   568  00FDA7  6D                 	db	109	;'m'
   569  00FDA8  69                 	db	105	;'i'
   570  00FDA9  63                 	db	99	;'c'
   571  00FDAA  72                 	db	114	;'r'
   572  00FDAB  6F                 	db	111	;'o'
   573  00FDAC  0A                 	db	10
   574  00FDAD  0D                 	db	13
   575  00FDAE  20                 	db	32
   576  00FDAF  20                 	db	32
   577  00FDB0  20                 	db	32
   578  00FDB1  2A                 	db	42
   579  00FDB2  49                 	db	73	;'I'
   580  00FDB3  44                 	db	68	;'D'
   581  00FDB4  4E                 	db	78	;'N'
   582  00FDB5  3F                 	db	63	;'?'
   583  00FDB6  3A                 	db	58	;':'
   584  00FDB7  20                 	db	32
   585  00FDB8  52                 	db	82	;'R'
   586  00FDB9  65                 	db	101	;'e'
   587  00FDBA  74                 	db	116	;'t'
   588  00FDBB  75                 	db	117	;'u'
   589  00FDBC  72                 	db	114	;'r'
   590  00FDBD  6E                 	db	110	;'n'
   591  00FDBE  73                 	db	115	;'s'
   592  00FDBF  20                 	db	32
   593  00FDC0  64                 	db	100	;'d'
   594  00FDC1  65                 	db	101	;'e'
   595  00FDC2  76                 	db	118	;'v'
   596  00FDC3  69                 	db	105	;'i'
   597  00FDC4  63                 	db	99	;'c'
   598  00FDC5  65                 	db	101	;'e'
   599  00FDC6  20                 	db	32
   600  00FDC7  69                 	db	105	;'i'
   601  00FDC8  64                 	db	100	;'d'
   602  00FDC9  65                 	db	101	;'e'
   603  00FDCA  6E                 	db	110	;'n'
   604  00FDCB  74                 	db	116	;'t'
   605  00FDCC  69                 	db	105	;'i'
   606  00FDCD  66                 	db	102	;'f'
   607  00FDCE  69                 	db	105	;'i'
   608  00FDCF  63                 	db	99	;'c'
   609  00FDD0  61                 	db	97	;'a'
   610  00FDD1  74                 	db	116	;'t'
   611  00FDD2  69                 	db	105	;'i'
   612  00FDD3  6F                 	db	111	;'o'
   613  00FDD4  6E                 	db	110	;'n'
   614  00FDD5  0A                 	db	10
   615  00FDD6  0D                 	db	13
   616  00FDD7  20                 	db	32
   617  00FDD8  20                 	db	32
   618  00FDD9  20                 	db	32
   619  00FDDA  48                 	db	72	;'H'
   620  00FDDB  65                 	db	101	;'e'
   621  00FDDC  6C                 	db	108	;'l'
   622  00FDDD  70                 	db	112	;'p'
   623  00FDDE  3A                 	db	58	;':'
   624  00FDDF  20                 	db	32
   625  00FDE0  54                 	db	84	;'T'
   626  00FDE1  68                 	db	104	;'h'
   627  00FDE2  69                 	db	105	;'i'
   628  00FDE3  73                 	db	115	;'s'
   629  00FDE4  20                 	db	32
   630  00FDE5  6D                 	db	109	;'m'
   631  00FDE6  65                 	db	101	;'e'
   632  00FDE7  73                 	db	115	;'s'
   633  00FDE8  73                 	db	115	;'s'
   634  00FDE9  61                 	db	97	;'a'
   635  00FDEA  67                 	db	103	;'g'
   636  00FDEB  65                 	db	101	;'e'
   637  00FDEC  2C                 	db	44
   638  00FDED  20                 	db	32
   639  00FDEE  6C                 	db	108	;'l'
   640  00FDEF  69                 	db	105	;'i'
   641  00FDF0  73                 	db	115	;'s'
   642  00FDF1  74                 	db	116	;'t'
   643  00FDF2  73                 	db	115	;'s'
   644  00FDF3  20                 	db	32
   645  00FDF4  63                 	db	99	;'c'
   646  00FDF5  6F                 	db	111	;'o'
   647  00FDF6  6D                 	db	109	;'m'
   648  00FDF7  6D                 	db	109	;'m'
   649  00FDF8  61                 	db	97	;'a'
   650  00FDF9  6E                 	db	110	;'n'
   651  00FDFA  64                 	db	100	;'d'
   652  00FDFB  73                 	db	115	;'s'
   653  00FDFC  0A                 	db	10
   654  00FDFD  0D                 	db	13
   655  00FDFE  00                 	db	0
   656  00FDFF                     STR_4:
   657  00FDFF  20                 	db	32
   658  00FE00  20                 	db	32
   659  00FE01  20                 	db	32
   660  00FE02  20                 	db	32
   661  00FE03  42                 	db	66	;'B'
   662  00FE04  6F                 	db	111	;'o'
   663  00FE05  6F                 	db	111	;'o'
   664  00FE06  74                 	db	116	;'t'
   665  00FE07  20                 	db	32
   666  00FE08  63                 	db	99	;'c'
   667  00FE09  6F                 	db	111	;'o'
   668  00FE0A  6D                 	db	109	;'m'
   669  00FE0B  70                 	db	112	;'p'
   670  00FE0C  6C                 	db	108	;'l'
   671  00FE0D  65                 	db	101	;'e'
   672  00FE0E  74                 	db	116	;'t'
   673  00FE0F  65                 	db	101	;'e'
   674  00FE10  0A                 	db	10
   675  00FE11  0D                 	db	13
   676  00FE12  20                 	db	32
   677  00FE13  20                 	db	32
   678  00FE14  20                 	db	32
   679  00FE15  50                 	db	80	;'P'
   680  00FE16  49                 	db	73	;'I'
   681  00FE17  43                 	db	67	;'C'
   682  00FE18  31                 	db	49	;'1'
   683  00FE19  38                 	db	56	;'8'
   684  00FE1A  46                 	db	70	;'F'
   685  00FE1B  36                 	db	54	;'6'
   686  00FE1C  37                 	db	55	;'7'
   687  00FE1D  4B                 	db	75	;'K'
   688  00FE1E  34                 	db	52	;'4'
   689  00FE1F  30                 	db	48	;'0'
   690  00FE20  20                 	db	32
   691  00FE21  6D                 	db	109	;'m'
   692  00FE22  54                 	db	84	;'T'
   693  00FE23  6F                 	db	111	;'o'
   694  00FE24  75                 	db	117	;'u'
   695  00FE25  63                 	db	99	;'c'
   696  00FE26  68                 	db	104	;'h'
   697  00FE27  20                 	db	32
   698  00FE28  44                 	db	68	;'D'
   699  00FE29  65                 	db	101	;'e'
   700  00FE2A  6D                 	db	109	;'m'
   701  00FE2B  6F                 	db	111	;'o'
   702  00FE2C  0A                 	db	10
   703  00FE2D  0D                 	db	13
   704  00FE2E  20                 	db	32
   705  00FE2F  20                 	db	32
   706  00FE30  20                 	db	32
   707  00FE31  53                 	db	83	;'S'
   708  00FE32  65                 	db	101	;'e'
   709  00FE33  74                 	db	116	;'t'
   710  00FE34  73                 	db	115	;'s'
   711  00FE35  20                 	db	32
   712  00FE36  74                 	db	116	;'t'
   713  00FE37  68                 	db	104	;'h'
   714  00FE38  65                 	db	101	;'e'
   715  00FE39  20                 	db	32
   716  00FE3A  73                 	db	115	;'s'
   717  00FE3B  74                 	db	116	;'t'
   718  00FE3C  61                 	db	97	;'a'
   719  00FE3D  74                 	db	116	;'t'
   720  00FE3E  65                 	db	101	;'e'
   721  00FE3F  20                 	db	32
   722  00FE40  6F                 	db	111	;'o'
   723  00FE41  66                 	db	102	;'f'
   724  00FE42  20                 	db	32
   725  00FE43  66                 	db	102	;'f'
   726  00FE44  69                 	db	105	;'i'
   727  00FE45  76                 	db	118	;'v'
   728  00FE46  65                 	db	101	;'e'
   729  00FE47  20                 	db	32
   730  00FE48  4C                 	db	76	;'L'
   731  00FE49  45                 	db	69	;'E'
   732  00FE4A  44                 	db	68	;'D'
   733  00FE4B  73                 	db	115	;'s'
   734  00FE4C  20                 	db	32
   735  00FE4D  62                 	db	98	;'b'
   736  00FE4E  61                 	db	97	;'a'
   737  00FE4F  73                 	db	115	;'s'
   738  00FE50  65                 	db	101	;'e'
   739  00FE51  64                 	db	100	;'d'
   740  00FE52  20                 	db	32
   741  00FE53  6F                 	db	111	;'o'
   742  00FE54  6E                 	db	110	;'n'
   743  00FE55  20                 	db	32
   744  00FE56  6D                 	db	109	;'m'
   745  00FE57  54                 	db	84	;'T'
   746  00FE58  6F                 	db	111	;'o'
   747  00FE59  75                 	db	117	;'u'
   748  00FE5A  63                 	db	99	;'c'
   749  00FE5B  68                 	db	104	;'h'
   750  00FE5C  20                 	db	32
   751  00FE5D  63                 	db	99	;'c'
   752  00FE5E  61                 	db	97	;'a'
   753  00FE5F  70                 	db	112	;'p'
   754  00FE60  61                 	db	97	;'a'
   755  00FE61  63                 	db	99	;'c'
   756  00FE62  69                 	db	105	;'i'
   757  00FE63  74                 	db	116	;'t'
   758  00FE64  69                 	db	105	;'i'
   759  00FE65  76                 	db	118	;'v'
   760  00FE66  65                 	db	101	;'e'
   761  00FE67  20                 	db	32
   762  00FE68  70                 	db	112	;'p'
   763  00FE69  75                 	db	117	;'u'
   764  00FE6A  73                 	db	115	;'s'
   765  00FE6B  68                 	db	104	;'h'
   766  00FE6C  62                 	db	98	;'b'
   767  00FE6D  75                 	db	117	;'u'
   768  00FE6E  74                 	db	116	;'t'
   769  00FE6F  74                 	db	116	;'t'
   770  00FE70  6F                 	db	111	;'o'
   771  00FE71  6E                 	db	110	;'n'
   772  00FE72  73                 	db	115	;'s'
   773  00FE73  0A                 	db	10
   774  00FE74  0D                 	db	13
   775  00FE75  20                 	db	32
   776  00FE76  20                 	db	32
   777  00FE77  20                 	db	32
   778  00FE78  42                 	db	66	;'B'
   779  00FE79  61                 	db	97	;'a'
   780  00FE7A  75                 	db	117	;'u'
   781  00FE7B  64                 	db	100	;'d'
   782  00FE7C  20                 	db	32
   783  00FE7D  72                 	db	114	;'r'
   784  00FE7E  61                 	db	97	;'a'
   785  00FE7F  74                 	db	116	;'t'
   786  00FE80  65                 	db	101	;'e'
   787  00FE81  3A                 	db	58	;':'
   788  00FE82  20                 	db	32
   789  00FE83  31                 	db	49	;'1'
   790  00FE84  31                 	db	49	;'1'
   791  00FE85  35                 	db	53	;'5'
   792  00FE86  32                 	db	50	;'2'
   793  00FE87  30                 	db	48	;'0'
   794  00FE88  30                 	db	48	;'0'
   795  00FE89  20                 	db	32
   796  00FE8A  6B                 	db	107	;'k'
   797  00FE8B  62                 	db	98	;'b'
   798  00FE8C  70                 	db	112	;'p'
   799  00FE8D  73                 	db	115	;'s'
   800  00FE8E  0A                 	db	10
   801  00FE8F  0D                 	db	13
   802  00FE90  20                 	db	32
   803  00FE91  20                 	db	32
   804  00FE92  20                 	db	32
   805  00FE93  4E                 	db	78	;'N'
   806  00FE94  6F                 	db	111	;'o'
   807  00FE95  20                 	db	32
   808  00FE96  70                 	db	112	;'p'
   809  00FE97  61                 	db	97	;'a'
   810  00FE98  72                 	db	114	;'r'
   811  00FE99  69                 	db	105	;'i'
   812  00FE9A  74                 	db	116	;'t'
   813  00FE9B  79                 	db	121	;'y'
   814  00FE9C  2C                 	db	44
   815  00FE9D  20                 	db	32
   816  00FE9E  38                 	db	56	;'8'
   817  00FE9F  20                 	db	32
   818  00FEA0  62                 	db	98	;'b'
   819  00FEA1  69                 	db	105	;'i'
   820  00FEA2  74                 	db	116	;'t'
   821  00FEA3  73                 	db	115	;'s'
   822  00FEA4  2C                 	db	44
   823  00FEA5  20                 	db	32
   824  00FEA6  6E                 	db	110	;'n'
   825  00FEA7  6F                 	db	111	;'o'
   826  00FEA8  20                 	db	32
   827  00FEA9  66                 	db	102	;'f'
   828  00FEAA  6C                 	db	108	;'l'
   829  00FEAB  6F                 	db	111	;'o'
   830  00FEAC  77                 	db	119	;'w'
   831  00FEAD  20                 	db	32
   832  00FEAE  63                 	db	99	;'c'
   833  00FEAF  6F                 	db	111	;'o'
   834  00FEB0  6E                 	db	110	;'n'
   835  00FEB1  74                 	db	116	;'t'
   836  00FEB2  72                 	db	114	;'r'
   837  00FEB3  6F                 	db	111	;'o'
   838  00FEB4  6C                 	db	108	;'l'
   839  00FEB5  2C                 	db	44
   840  00FEB6  20                 	db	32
   841  00FEB7  31                 	db	49	;'1'
   842  00FEB8  20                 	db	32
   843  00FEB9  73                 	db	115	;'s'
   844  00FEBA  74                 	db	116	;'t'
   845  00FEBB  6F                 	db	111	;'o'
   846  00FEBC  70                 	db	112	;'p'
   847  00FEBD  20                 	db	32
   848  00FEBE  62                 	db	98	;'b'
   849  00FEBF  69                 	db	105	;'i'
   850  00FEC0  74                 	db	116	;'t'
   851  00FEC1  0A                 	db	10
   852  00FEC2  0D                 	db	13
   853  00FEC3  20                 	db	32
   854  00FEC4  20                 	db	32
   855  00FEC5  20                 	db	32
   856  00FEC6  43                 	db	67	;'C'
   857  00FEC7  6F                 	db	111	;'o'
   858  00FEC8  6D                 	db	109	;'m'
   859  00FEC9  6D                 	db	109	;'m'
   860  00FECA  61                 	db	97	;'a'
   861  00FECB  6E                 	db	110	;'n'
   862  00FECC  64                 	db	100	;'d'
   863  00FECD  73                 	db	115	;'s'
   864  00FECE  20                 	db	32
   865  00FECF  61                 	db	97	;'a'
   866  00FED0  72                 	db	114	;'r'
   867  00FED1  65                 	db	101	;'e'
   868  00FED2  20                 	db	32
   869  00FED3  63                 	db	99	;'c'
   870  00FED4  61                 	db	97	;'a'
   871  00FED5  73                 	db	115	;'s'
   872  00FED6  65                 	db	101	;'e'
   873  00FED7  20                 	db	32
   874  00FED8  73                 	db	115	;'s'
   875  00FED9  65                 	db	101	;'e'
   876  00FEDA  6E                 	db	110	;'n'
   877  00FEDB  73                 	db	115	;'s'
   878  00FEDC  69                 	db	105	;'i'
   879  00FEDD  74                 	db	116	;'t'
   880  00FEDE  69                 	db	105	;'i'
   881  00FEDF  76                 	db	118	;'v'
   882  00FEE0  65                 	db	101	;'e'
   883  00FEE1  0A                 	db	10
   884  00FEE2  0D                 	db	13
   885  00FEE3  20                 	db	32
   886  00FEE4  20                 	db	32
   887  00FEE5  20                 	db	32
   888  00FEE6  45                 	db	69	;'E'
   889  00FEE7  6E                 	db	110	;'n'
   890  00FEE8  74                 	db	116	;'t'
   891  00FEE9  65                 	db	101	;'e'
   892  00FEEA  72                 	db	114	;'r'
   893  00FEEB  20                 	db	32
   894  00FEEC  61                 	db	97	;'a'
   895  00FEED  20                 	db	32
   896  00FEEE  63                 	db	99	;'c'
   897  00FEEF  6F                 	db	111	;'o'
   898  00FEF0  6D                 	db	109	;'m'
   899  00FEF1  6D                 	db	109	;'m'
   900  00FEF2  61                 	db	97	;'a'
   901  00FEF3  6E                 	db	110	;'n'
   902  00FEF4  64                 	db	100	;'d'
   903  00FEF5  2C                 	db	44
   904  00FEF6  20                 	db	32
   905  00FEF7  6F                 	db	111	;'o'
   906  00FEF8  72                 	db	114	;'r'
   907  00FEF9  20                 	db	32
   908  00FEFA  65                 	db	101	;'e'
   909  00FEFB  6E                 	db	110	;'n'
   910  00FEFC  74                 	db	116	;'t'
   911  00FEFD  65                 	db	101	;'e'
   912  00FEFE  72                 	db	114	;'r'
   913  00FEFF  20                 	db	32
   914  00FF00  48                 	db	72	;'H'
   915  00FF01  65                 	db	101	;'e'
   916  00FF02  6C                 	db	108	;'l'
   917  00FF03  70                 	db	112	;'p'
   918  00FF04  20                 	db	32
   919  00FF05  66                 	db	102	;'f'
   920  00FF06  6F                 	db	111	;'o'
   921  00FF07  72                 	db	114	;'r'
   922  00FF08  20                 	db	32
   923  00FF09  6C                 	db	108	;'l'
   924  00FF0A  69                 	db	105	;'i'
   925  00FF0B  73                 	db	115	;'s'
   926  00FF0C  74                 	db	116	;'t'
   927  00FF0D  20                 	db	32
   928  00FF0E  6F                 	db	111	;'o'
   929  00FF0F  66                 	db	102	;'f'
   930  00FF10  20                 	db	32
   931  00FF11  63                 	db	99	;'c'
   932  00FF12  6F                 	db	111	;'o'
   933  00FF13  6D                 	db	109	;'m'
   934  00FF14  6D                 	db	109	;'m'
   935  00FF15  61                 	db	97	;'a'
   936  00FF16  6E                 	db	110	;'n'
   937  00FF17  64                 	db	100	;'d'
   938  00FF18  73                 	db	115	;'s'
   939  00FF19  0A                 	db	10
   940  00FF1A  0D                 	db	13
   941  00FF1B  00                 	db	0
   942  00FF1C                     STR_31:
   943  00FF1C  20                 	db	32
   944  00FF1D  20                 	db	32
   945  00FF1E  20                 	db	32
   946  00FF1F  20                 	db	32
   947  00FF20  6D                 	db	109	;'m'
   948  00FF21  54                 	db	84	;'T'
   949  00FF22  6F                 	db	111	;'o'
   950  00FF23  75                 	db	117	;'u'
   951  00FF24  63                 	db	99	;'c'
   952  00FF25  68                 	db	104	;'h'
   953  00FF26  20                 	db	32
   954  00FF27  54                 	db	84	;'T'
   955  00FF28  65                 	db	101	;'e'
   956  00FF29  73                 	db	115	;'s'
   957  00FF2A  74                 	db	116	;'t'
   958  00FF2B  20                 	db	32
   959  00FF2C  42                 	db	66	;'B'
   960  00FF2D  6F                 	db	111	;'o'
   961  00FF2E  61                 	db	97	;'a'
   962  00FF2F  72                 	db	114	;'r'
   963  00FF30  64                 	db	100	;'d'
   964  00FF31  2C                 	db	44
   965  00FF32  20                 	db	32
   966  00FF33  52                 	db	82	;'R'
   967  00FF34  45                 	db	69	;'E'
   968  00FF35  56                 	db	86	;'V'
   969  00FF36  41                 	db	65	;'A'
   970  00FF37  00                 	db	0
   971  00FF38                     STR_16:
   972  00FF38  20                 	db	32
   973  00FF39  20                 	db	32
   974  00FF3A  20                 	db	32
   975  00FF3B  20                 	db	32
   976  00FF3C  42                 	db	66	;'B'
   977  00FF3D  75                 	db	117	;'u'
   978  00FF3E  74                 	db	116	;'t'
   979  00FF3F  74                 	db	116	;'t'
   980  00FF40  6F                 	db	111	;'o'
   981  00FF41  6E                 	db	110	;'n'
   982  00FF42  20                 	db	32
   983  00FF43  30                 	db	48	;'0'
   984  00FF44  3A                 	db	58	;':'
   985  00FF45  20                 	db	32
   986  00FF46  25                 	db	37
   987  00FF47  64                 	db	100	;'d'
   988  00FF48  0A                 	db	10
   989  00FF49  0D                 	db	13
   990  00FF4A  00                 	db	0
   991  00FF4B                     STR_17:
   992  00FF4B  20                 	db	32
   993  00FF4C  20                 	db	32
   994  00FF4D  20                 	db	32
   995  00FF4E  20                 	db	32
   996  00FF4F  42                 	db	66	;'B'
   997  00FF50  75                 	db	117	;'u'
   998  00FF51  74                 	db	116	;'t'
   999  00FF52  74                 	db	116	;'t'
  1000  00FF53  6F                 	db	111	;'o'
  1001  00FF54  6E                 	db	110	;'n'
  1002  00FF55  20                 	db	32
  1003  00FF56  31                 	db	49	;'1'
  1004  00FF57  3A                 	db	58	;':'
  1005  00FF58  20                 	db	32
  1006  00FF59  25                 	db	37
  1007  00FF5A  64                 	db	100	;'d'
  1008  00FF5B  0A                 	db	10
  1009  00FF5C  0D                 	db	13
  1010  00FF5D  00                 	db	0
  1011  00FF5E                     STR_18:
  1012  00FF5E  20                 	db	32
  1013  00FF5F  20                 	db	32
  1014  00FF60  20                 	db	32
  1015  00FF61  20                 	db	32
  1016  00FF62  42                 	db	66	;'B'
  1017  00FF63  75                 	db	117	;'u'
  1018  00FF64  74                 	db	116	;'t'
  1019  00FF65  74                 	db	116	;'t'
  1020  00FF66  6F                 	db	111	;'o'
  1021  00FF67  6E                 	db	110	;'n'
  1022  00FF68  20                 	db	32
  1023  00FF69  32                 	db	50	;'2'
  1024  00FF6A  3A                 	db	58	;':'
  1025  00FF6B  20                 	db	32
  1026  00FF6C  25                 	db	37
  1027  00FF6D  64                 	db	100	;'d'
  1028  00FF6E  0A                 	db	10
  1029  00FF6F  0D                 	db	13
  1030  00FF70  00                 	db	0
  1031  00FF71                     STR_19:
  1032  00FF71  20                 	db	32
  1033  00FF72  20                 	db	32
  1034  00FF73  20                 	db	32
  1035  00FF74  20                 	db	32
  1036  00FF75  42                 	db	66	;'B'
  1037  00FF76  75                 	db	117	;'u'
  1038  00FF77  74                 	db	116	;'t'
  1039  00FF78  74                 	db	116	;'t'
  1040  00FF79  6F                 	db	111	;'o'
  1041  00FF7A  6E                 	db	110	;'n'
  1042  00FF7B  20                 	db	32
  1043  00FF7C  33                 	db	51	;'3'
  1044  00FF7D  3A                 	db	58	;':'
  1045  00FF7E  20                 	db	32
  1046  00FF7F  25                 	db	37
  1047  00FF80  64                 	db	100	;'d'
  1048  00FF81  0A                 	db	10
  1049  00FF82  0D                 	db	13
  1050  00FF83  00                 	db	0
  1051  00FF84                     STR_20:
  1052  00FF84  20                 	db	32
  1053  00FF85  20                 	db	32
  1054  00FF86  20                 	db	32
  1055  00FF87  20                 	db	32
  1056  00FF88  42                 	db	66	;'B'
  1057  00FF89  75                 	db	117	;'u'
  1058  00FF8A  74                 	db	116	;'t'
  1059  00FF8B  74                 	db	116	;'t'
  1060  00FF8C  6F                 	db	111	;'o'
  1061  00FF8D  6E                 	db	110	;'n'
  1062  00FF8E  20                 	db	32
  1063  00FF8F  34                 	db	52	;'4'
  1064  00FF90  3A                 	db	58	;':'
  1065  00FF91  20                 	db	32
  1066  00FF92  25                 	db	37
  1067  00FF93  64                 	db	100	;'d'
  1068  00FF94  0A                 	db	10
  1069  00FF95  0D                 	db	13
  1070  00FF96  00                 	db	0
  1071  00FF97                     STR_8:
  1072  00FF97  20                 	db	32
  1073  00FF98  20                 	db	32
  1074  00FF99  20                 	db	32
  1075  00FF9A  20                 	db	32
  1076  00FF9B  4C                 	db	76	;'L'
  1077  00FF9C  41                 	db	65	;'A'
  1078  00FF9D  54                 	db	84	;'T'
  1079  00FF9E  46                 	db	70	;'F'
  1080  00FF9F  20                 	db	32
  1081  00FFA0  3D                 	db	61	;'='
  1082  00FFA1  20                 	db	32
  1083  00FFA2  30                 	db	48	;'0'
  1084  00FFA3  78                 	db	120	;'x'
  1085  00FFA4  30                 	db	48	;'0'
  1086  00FFA5  30                 	db	48	;'0'
  1087  00FFA6  0A                 	db	10
  1088  00FFA7  0D                 	db	13
  1089  00FFA8  00                 	db	0
  1090  00FFA9                     STR_14:
  1091  00FFA9  42                 	db	66	;'B'
  1092  00FFAA  75                 	db	117	;'u'
  1093  00FFAB  74                 	db	116	;'t'
  1094  00FFAC  74                 	db	116	;'t'
  1095  00FFAD  6F                 	db	111	;'o'
  1096  00FFAE  6E                 	db	110	;'n'
  1097  00FFAF  20                 	db	32
  1098  00FFB0  53                 	db	83	;'S'
  1099  00FFB1  74                 	db	116	;'t'
  1100  00FFB2  61                 	db	97	;'a'
  1101  00FFB3  74                 	db	116	;'t'
  1102  00FFB4  65                 	db	101	;'e'
  1103  00FFB5  73                 	db	115	;'s'
  1104  00FFB6  3F                 	db	63	;'?'
  1105  00FFB7  00                 	db	0
  1106  00FFB8                     STR_12:
  1107  00FFB8  4C                 	db	76	;'L'
  1108  00FFB9  41                 	db	65	;'A'
  1109  00FFBA  54                 	db	84	;'T'
  1110  00FFBB  46                 	db	70	;'F'
  1111  00FFBC  20                 	db	32
  1112  00FFBD  3D                 	db	61	;'='
  1113  00FFBE  20                 	db	32
  1114  00FFBF  30                 	db	48	;'0'
  1115  00FFC0  78                 	db	120	;'x'
  1116  00FFC1  46                 	db	70	;'F'
  1117  00FFC2  46                 	db	70	;'F'
  1118  00FFC3  0A                 	db	10
  1119  00FFC4  0D                 	db	13
  1120  00FFC5  00                 	db	0
  1121  00FFC6                     STR_10:
  1122  00FFC6  4C                 	db	76	;'L'
  1123  00FFC7  45                 	db	69	;'E'
  1124  00FFC8  44                 	db	68	;'D'
  1125  00FFC9  73                 	db	115	;'s'
  1126  00FFCA  20                 	db	32
  1127  00FFCB  4F                 	db	79	;'O'
  1128  00FFCC  66                 	db	102	;'f'
  1129  00FFCD  66                 	db	102	;'f'
  1130  00FFCE  00                 	db	0
  1131  00FFCF                     STR_6:
  1132  00FFCF  4C                 	db	76	;'L'
  1133  00FFD0  45                 	db	69	;'E'
  1134  00FFD1  44                 	db	68	;'D'
  1135  00FFD2  73                 	db	115	;'s'
  1136  00FFD3  20                 	db	32
  1137  00FFD4  4F                 	db	79	;'O'
  1138  00FFD5  6E                 	db	110	;'n'
  1139  00FFD6  00                 	db	0
  1140  00FFD7                     STR_28:
  1141  00FFD7  2A                 	db	42
  1142  00FFD8  49                 	db	73	;'I'
  1143  00FFD9  44                 	db	68	;'D'
  1144  00FFDA  4E                 	db	78	;'N'
  1145  00FFDB  3F                 	db	63	;'?'
  1146  00FFDC  00                 	db	0
  1147  00FFDD                     STR_25:
  1148  00FFDD  43                 	db	67	;'C'
  1149  00FFDE  6C                 	db	108	;'l'
  1150  00FFDF  65                 	db	101	;'e'
  1151  00FFE0  61                 	db	97	;'a'
  1152  00FFE1  72                 	db	114	;'r'
  1153  00FFE2  00                 	db	0
  1154  00FFE3                     STR_22:
  1155  00FFE3  52                 	db	82	;'R'
  1156  00FFE4  65                 	db	101	;'e'
  1157  00FFE5  73                 	db	115	;'s'
  1158  00FFE6  65                 	db	101	;'e'
  1159  00FFE7  74                 	db	116	;'t'
  1160  00FFE8  00                 	db	0
  1161  00FFE9                     STR_33:
  1162  00FFE9  48                 	db	72	;'H'
  1163  00FFEA  65                 	db	101	;'e'
  1164  00FFEB  6C                 	db	108	;'l'
  1165  00FFEC  70                 	db	112	;'p'
  1166  00FFED  00                 	db	0
  1167  00FFEE                     STR_2:
  1168  00FFEE  1B                 	db	27
  1169  00FFEF  5B                 	db	91	;'['
  1170  00FFF0  32                 	db	50	;'2'
  1171  00FFF1  4A                 	db	74	;'J'
  1172  00FFF2  00                 	db	0
  1173  00FFF3                     STR_29:
  1174  00FFF3  49                 	db	73	;'I'
  1175  00FFF4  44                 	db	68	;'D'
  1176  00FFF5  4E                 	db	78	;'N'
  1177  00FFF6  00                 	db	0
  1178  00FFF7                     STR_3:
  1179  00FFF7  1B                 	db	27
  1180  00FFF8  5B                 	db	91	;'['
  1181  00FFF9  48                 	db	72	;'H'
  1182  00FFFA  00                 	db	0
  1183  00FFFB                     STR_1:
  1184  00FFFB  1B                 	db	27
  1185  00FFFC  5B                 	db	91	;'['
  1186  00FFFD  4B                 	db	75	;'K'
  1187  00FFFE  00                 	db	0
  1188  0000                     
  1189                           ; #config settings
  1190  00FFFF  00                 	db	0	; dummy byte at the end
  1191  0000                     
  1192                           	psect	nvCOMRAM
  1193  00004B                     __pnvCOMRAM:
  1194                           	opt stack 0
  1195  00004B                     _EUSART2_TxDefaultInterruptHandler:
  1196                           	opt stack 0
  1197  00004B                     	ds	3
  1198  00004E                     _eusart2TxBufferRemaining:
  1199                           	opt stack 0
  1200  00004E                     	ds	1
  1201                           
  1202                           	psect	nvBANK0
  1203  0000E1                     __pnvBANK0:
  1204                           	opt stack 0
  1205  0000E1                     _EUSART2_RxDefaultInterruptHandler:
  1206                           	opt stack 0
  1207  0000E1                     	ds	3
  1208  0000                     _ANSELEbits	set	3759
  1209  0000                     _WPUEbits	set	3758
  1210  0000                     _PMD5	set	3665
  1211  0000                     _PMD4	set	3664
  1212  0000                     _PMD3	set	3663
  1213  0000                     _PMD2	set	3662
  1214  0000                     _PMD1	set	3661
  1215  0000                     _PMD0	set	3660
  1216  0000                     _OSCTUNE	set	3656
  1217  0000                     _OSCFRQ	set	3657
  1218  0000                     _OSCEN	set	3655
  1219  0000                     _OSCCON3	set	3653
  1220  0000                     _OSCCON1	set	3651
  1221  0000                     _RC2REG	set	3825
  1222  0000                     _RC2STAbits	set	3829
  1223  0000                     _TX2REG	set	3826
  1224  0000                     _TX2STAbits	set	3830
  1225  0000                     _SP2BRGH	set	3828
  1226  0000                     _SP2BRGL	set	3827
  1227  0000                     _TX2STA	set	3830
  1228  0000                     _RC2STA	set	3829
  1229  0000                     _BAUD2CON	set	3831
  1230  0000                     _PIR1bits	set	3636
  1231  0000                     _PIE1bits	set	3626
  1232  0000                     _PIR3bits	set	3638
  1233  0000                     _PIE3bits	set	3628
  1234  0000                     _IPR1bits	set	3616
  1235  0000                     _IPR3bits	set	3618
  1236  0000                     _RX2PPSbits	set	3601
  1237  0000                     _RG7PPS	set	3721
  1238  0000                     _ODCOND	set	3749
  1239  0000                     _ODCONC	set	3744
  1240  0000                     _ODCONH	set	3775
  1241  0000                     _ODCONB	set	3736
  1242  0000                     _ODCONG	set	3770
  1243  0000                     _ODCONA	set	3728
  1244  0000                     _ODCONF	set	3762
  1245  0000                     _ODCONE	set	3757
  1246  0000                     _WPUH	set	3776
  1247  0000                     _WPUC	set	3745
  1248  0000                     _WPUA	set	3729
  1249  0000                     _WPUG	set	3771
  1250  0000                     _WPUB	set	3737
  1251  0000                     _WPUE	set	3758
  1252  0000                     _WPUF	set	3763
  1253  0000                     _WPUD	set	3750
  1254  0000                     _ANSELA	set	3730
  1255  0000                     _ANSELF	set	3764
  1256  0000                     _ANSELG	set	3772
  1257  0000                     _ANSELE	set	3759
  1258  0000                     _ANSELB	set	3738
  1259  0000                     _ANSELD	set	3751
  1260  0000                     _ADPCH	set	3935
  1261  0000                     _ADPRE	set	3934
  1262  0000                     _ADACQ	set	3932
  1263  0000                     _ADCON3	set	3931
  1264  0000                     _ADCON2	set	3930
  1265  0000                     _ADCON1	set	3929
  1266  0000                     _ADCAP	set	3933
  1267  0000                     _ADREF	set	3928
  1268  0000                     _ADCLK	set	3927
  1269  0000                     _ADFLTR	set	3954
  1270  0000                     _ADACC	set	3952
  1271  0000                     _ADCON0bits	set	3936
  1272  0000                     _ADRPT	set	3942
  1273  0000                     _ADCON0	set	3936
  1274  0000                     _ADSTPTH	set	3945
  1275  0000                     _ADSTPTL	set	3944
  1276  0000                     _ADUTHH	set	3949
  1277  0000                     _ADUTHL	set	3948
  1278  0000                     _ADLTHH	set	3947
  1279  0000                     _ADLTHL	set	3946
  1280  0000                     _TRISEbits	set	3973
  1281  0000                     _LATFbits	set	3966
  1282  0000                     _INTCONbits	set	4082
  1283  0000                     _TRISD	set	3972
  1284  0000                     _TRISC	set	3971
  1285  0000                     _TRISH	set	3976
  1286  0000                     _TRISB	set	3970
  1287  0000                     _TRISG	set	3975
  1288  0000                     _TRISA	set	3969
  1289  0000                     _TRISF	set	3974
  1290  0000                     _TRISE	set	3973
  1291  0000                     _LATH	set	3968
  1292  0000                     _LATC	set	3963
  1293  0000                     _LATG	set	3967
  1294  0000                     _LATB	set	3962
  1295  0000                     _LATF	set	3966
  1296  0000                     _LATA	set	3961
  1297  0000                     _LATD	set	3964
  1298  0000                     _LATE	set	3965
  1299  0000                     _GIE	set	32663
  1300                           
  1301                           	psect	cinit
  1302  011736                     __pcinit:
  1303                           	opt stack 0
  1304  011736                     start_initialization:
  1305                           	opt stack 0
  1306  011736                     __initialization:
  1307                           	opt stack 0
  1308                           
  1309                           ; Initialize objects allocated to BANK0 (12 bytes)
  1310                           ; load TBLPTR registers with __pidataBANK0
  1311  011736  0E40               	movlw	low __pidataBANK0
  1312  011738  6EF6               	movwf	tblptrl,c
  1313  01173A  0E24               	movlw	high __pidataBANK0
  1314  01173C  6EF7               	movwf	tblptrh,c
  1315  01173E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1316  011740  6EF8               	movwf	tblptru,c
  1317  011742  EE00  F0D5         	lfsr	0,__pdataBANK0
  1318  011746  EE10 F00C          	lfsr	1,12
  1319  01174A                     copy_data0:
  1320  01174A  0009               	tblrd		*+
  1321  01174C  CFF5 FFEE          	movff	tablat,postinc0
  1322  011750  50E5               	movf	postdec1,w,c
  1323  011752  50E1               	movf	fsr1l,w,c
  1324  011754  E1FA               	bnz	copy_data0
  1325                           
  1326                           ; Initialize objects allocated to COMRAM (9 bytes)
  1327                           ; load TBLPTR registers with __pidataCOMRAM
  1328  011756  0E76               	movlw	low __pidataCOMRAM
  1329  011758  6EF6               	movwf	tblptrl,c
  1330  01175A  0E24               	movlw	high __pidataCOMRAM
  1331  01175C  6EF7               	movwf	tblptrh,c
  1332  01175E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1333  011760  6EF8               	movwf	tblptru,c
  1334  011762  EE00  F042         	lfsr	0,__pdataCOMRAM
  1335  011766  EE10 F009          	lfsr	1,9
  1336  01176A                     copy_data1:
  1337  01176A  0009               	tblrd		*+
  1338  01176C  CFF5 FFEE          	movff	tablat,postinc0
  1339  011770  50E5               	movf	postdec1,w,c
  1340  011772  50E1               	movf	fsr1l,w,c
  1341  011774  E1FA               	bnz	copy_data1
  1342                           
  1343                           ; Clear objects allocated to BANK2 (64 bytes)
  1344  011776  EE02  F000         	lfsr	0,__pbssBANK2
  1345  01177A  0E40               	movlw	64
  1346  01177C                     clear_0:
  1347  01177C  6AEE               	clrf	postinc0,c
  1348  01177E  06E8               	decf	wreg,f,c
  1349  011780  E1FD               	bnz	clear_0
  1350                           
  1351                           ; Clear objects allocated to BANK1 (208 bytes)
  1352  011782  EE01  F000         	lfsr	0,__pbssBANK1
  1353  011786  0ED0               	movlw	208
  1354  011788                     clear_1:
  1355  011788  6AEE               	clrf	postinc0,c
  1356  01178A  06E8               	decf	wreg,f,c
  1357  01178C  E1FD               	bnz	clear_1
  1358                           
  1359                           ; Clear objects allocated to BANK0 (80 bytes)
  1360  01178E  EE00  F060         	lfsr	0,__pbssBANK0
  1361  011792  0E50               	movlw	80
  1362  011794                     clear_2:
  1363  011794  6AEE               	clrf	postinc0,c
  1364  011796  06E8               	decf	wreg,f,c
  1365  011798  E1FD               	bnz	clear_2
  1366                           
  1367                           ; Clear objects allocated to COMRAM (25 bytes)
  1368  01179A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1369  01179E  0E19               	movlw	25
  1370  0117A0                     clear_3:
  1371  0117A0  6AEE               	clrf	postinc0,c
  1372  0117A2  06E8               	decf	wreg,f,c
  1373  0117A4  E1FD               	bnz	clear_3
  1374  0117A6                     end_of_initialization:
  1375                           	opt stack 0
  1376  0117A6                     __end_of__initialization:
  1377                           	opt stack 0
  1378  0117A6  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1379  0117A8  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1380  0117AA  0100               	movlb	0
  1381  0117AC  EF01  F08B         	goto	_main	;jump to C main() function
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	bssCOMRAM
  1392  000029                     __pbssCOMRAM:
  1393                           	opt stack 0
  1394  000029                     _packet_sample:
  1395                           	opt stack 0
  1396  000029                     	ds	10
  1397  000033                     medianFilter@bufferIndex:
  1398                           	opt stack 0
  1399  000033                     	ds	5
  1400  000038                     _sample_delay:
  1401                           	opt stack 0
  1402  000038                     	ds	1
  1403  000039                     _scanInterrupted:
  1404                           	opt stack 0
  1405  000039                     	ds	1
  1406  00003A                     _sampling_flag:
  1407                           	opt stack 0
  1408  00003A                     	ds	1
  1409  00003B                     _currentScanSensor:
  1410                           	opt stack 0
  1411  00003B                     	ds	1
  1412  00003C                     _mtouch_time_toScan:
  1413                           	opt stack 0
  1414  00003C                     	ds	1
  1415  00003D                     _eusart2RxCount:
  1416                           	opt stack 0
  1417  00003D                     	ds	1
  1418  00003E                     _eusart2RxTail:
  1419                           	opt stack 0
  1420  00003E                     	ds	1
  1421  00003F                     _eusart2RxHead:
  1422                           	opt stack 0
  1423  00003F                     	ds	1
  1424  000040                     _eusart2TxTail:
  1425                           	opt stack 0
  1426  000040                     	ds	1
  1427  000041                     _eusart2TxHead:
  1428                           	opt stack 0
  1429  000041                     	ds	1
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1l	equ	0xFE1
  1438                           
  1439                           	psect	dataCOMRAM
  1440  000042                     __pdataCOMRAM:
  1441                           	opt stack 0
  1442  000042                     _callback_notPressed:
  1443                           	opt stack 0
  1444  000042                     	ds	3
  1445  000045                     _callback_pressed:
  1446                           	opt stack 0
  1447  000045                     	ds	3
  1448  000048                     _callback_sampled:
  1449                           	opt stack 0
  1450  000048                     	ds	3
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           
  1460                           	psect	bssBANK0
  1461  000060                     __pbssBANK0:
  1462                           	opt stack 0
  1463  000060                     _sensor_medianBuffer:
  1464                           	opt stack 0
  1465  000060                     	ds	30
  1466  00007E                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:
  1467                           	opt stack 0
  1468  00007E                     	ds	3
  1469  000081                     _freq_index:
  1470                           	opt stack 0
  1471  000081                     	ds	1
  1472  000082                     _eusart2RxStringReady:
  1473                           	opt stack 0
  1474  000082                     	ds	1
  1475  000083                     _mtouch_sensor:
  1476                           	opt stack 0
  1477  000083                     	ds	45
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487                           	psect	dataBANK0
  1488  0000D5                     __pdataBANK0:
  1489                           	opt stack 0
  1490  0000D5                     _Button_StateMachine:
  1491                           	opt stack 0
  1492  0000D5                     	ds	9
  1493  0000DE                     _freq_hop:
  1494                           	opt stack 0
  1495  0000DE                     	ds	3
  1496                           tblptru	equ	0xFF8
  1497                           tblptrh	equ	0xFF7
  1498                           tblptrl	equ	0xFF6
  1499                           tablat	equ	0xFF5
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           postdec1	equ	0xFE5
  1503                           fsr1l	equ	0xFE1
  1504                           
  1505                           	psect	bssBANK1
  1506  000100                     __pbssBANK1:
  1507                           	opt stack 0
  1508  000100                     _eusart2RxBuffer:
  1509                           	opt stack 0
  1510  000100                     	ds	64
  1511  000140                     _mtouch_button:
  1512                           	opt stack 0
  1513  000140                     	ds	80
  1514  000190                     _line:
  1515                           	opt stack 0
  1516  000190                     	ds	64
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1l	equ	0xFE1
  1525                           
  1526                           	psect	bssBANK2
  1527  000200                     __pbssBANK2:
  1528                           	opt stack 0
  1529  000200                     _eusart2TxBuffer:
  1530                           	opt stack 0
  1531  000200                     	ds	64
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1l	equ	0xFE1
  1540                           
  1541                           	psect	cstackBANK0
  1542  0000B0                     __pcstackBANK0:
  1543                           	opt stack 0
  1544  0000B0                     ?_strlen:
  1545                           	opt stack 0
  1546  0000B0                     ?_strcmp:
  1547                           	opt stack 0
  1548  0000B0                     ?_abs:
  1549                           	opt stack 0
  1550  0000B0                     ?_medianFilter:
  1551                           	opt stack 0
  1552  0000B0                     ?_MTOUCH_Sensor_RawSample_Get:
  1553                           	opt stack 0
  1554  0000B0                     ?___lwdiv:
  1555                           	opt stack 0
  1556  0000B0                     EUSART2_Read@readValue:
  1557                           	opt stack 0
  1558  0000B0                     EUSART2_Write@txData:
  1559                           	opt stack 0
  1560  0000B0                     MTOUCH_needReburst@needReburst:
  1561                           	opt stack 0
  1562  0000B0                     Sensor_SetTrisBit@TrisBit:
  1563                           	opt stack 0
  1564  0000B0                     MTOUCH_Sensor_Enable@sensor:
  1565                           	opt stack 0
  1566  0000B0                     MTOUCH_Sensor_isEnabled@sensor:
  1567                           	opt stack 0
  1568  0000B0                     MTOUCH_Sensor_Calibrate@sensor:
  1569                           	opt stack 0
  1570  0000B0                     MTOUCH_Sensor_isCalibrated@sensor:
  1571                           	opt stack 0
  1572  0000B0                     MTOUCH_Sensor_wasSampled@sensor:
  1573                           	opt stack 0
  1574  0000B0                     MTOUCH_Button_State_Get@name:
  1575                           	opt stack 0
  1576  0000B0                     Sensor_isEnabled@sensor:
  1577                           	opt stack 0
  1578  0000B0                     Sensor_setActive@sensor:
  1579                           	opt stack 0
  1580  0000B0                     Sensor_setInactive@sensor:
  1581                           	opt stack 0
  1582  0000B0                     Sensor_isCalibrated@sensor:
  1583                           	opt stack 0
  1584  0000B0                     Sensor_isCalibratingAcqTime@sensor:
  1585                           	opt stack 0
  1586  0000B0                     Sensor_Sampled_Reset@sensor:
  1587                           	opt stack 0
  1588  0000B0                     Button_Tick_helper@button:
  1589                           	opt stack 0
  1590  0000B0                     Button_Deviation_Update@button:
  1591                           	opt stack 0
  1592  0000B0                     Button_Baseline_Update@button:
  1593                           	opt stack 0
  1594  0000B0                     abs@a:
  1595                           	opt stack 0
  1596  0000B0                     ___lwdiv@dividend:
  1597                           	opt stack 0
  1598  0000B0                     memcpy@d1:
  1599                           	opt stack 0
  1600  0000B0                     strcmp@s1:
  1601                           	opt stack 0
  1602  0000B0                     strlen@s:
  1603                           	opt stack 0
  1604  0000B0                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1605                           	opt stack 0
  1606  0000B0                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1607                           	opt stack 0
  1608                           
  1609                           ; 3 bytes @ 0x0
  1610  0000B0                     	ds	1
  1611  0000B1                     putch@txData:
  1612                           	opt stack 0
  1613  0000B1                     Sensor_SetTrisBit@sensor:
  1614                           	opt stack 0
  1615  0000B1                     MTOUCH_Button_Initialize@name:
  1616                           	opt stack 0
  1617  0000B1                     MTOUCH_Button_isPressed@name:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x1
  1621  0000B1                     	ds	1
  1622  0000B2                     ??_strlen:
  1623  0000B2                     ??_Sensor_scheduleNextScan:
  1624  0000B2                     ??_abs:
  1625  0000B2                     ??_medianFilter:
  1626  0000B2                     ??_Button_Deviation_Update:
  1627  0000B2                     ??_Button_Baseline_Update:
  1628  0000B2                     MTOUCH_Sensor_Initialize@sensor:
  1629                           	opt stack 0
  1630  0000B2                     MTOUCH_Sensor_RawSample_Get@name:
  1631                           	opt stack 0
  1632  0000B2                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
  1633                           	opt stack 0
  1634  0000B2                     MTOUCH_Button_Initialize@button:
  1635                           	opt stack 0
  1636  0000B2                     ___lwdiv@divisor:
  1637                           	opt stack 0
  1638  0000B2                     memcpy@s1:
  1639                           	opt stack 0
  1640  0000B2                     strcmp@s2:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x2
  1644  0000B2                     	ds	1
  1645  0000B3                     Button_Reading_Update_Helper@button:
  1646                           	opt stack 0
  1647  0000B3                     Button_Baseline_Initialize@button:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x3
  1651  0000B3                     	ds	1
  1652  0000B4                     ??_strcmp:
  1653  0000B4                     ??_Sensor_FrequencyHopping_Autotune_Process:
  1654  0000B4                     Sensor_scheduleNextScan@state:
  1655                           	opt stack 0
  1656  0000B4                     MTOUCH_Button_Tick@i:
  1657                           	opt stack 0
  1658  0000B4                     ___lwdiv@counter:
  1659                           	opt stack 0
  1660  0000B4                     memcpy@n:
  1661                           	opt stack 0
  1662  0000B4                     strlen@cp:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x4
  1666  0000B4                     	ds	1
  1667  0000B5                     ??_Button_Baseline_Initialize:
  1668  0000B5                     ??_Button_Reading_Update_Helper:
  1669  0000B5                     Sensor_scheduleNextScan@skipScan:
  1670                           	opt stack 0
  1671  0000B5                     strcmp@r:
  1672                           	opt stack 0
  1673  0000B5                     ___lwdiv@quotient:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x5
  1677  0000B5                     	ds	1
  1678  0000B6                     medianFilter@sensor:
  1679                           	opt stack 0
  1680  0000B6                     memcpy@tmp:
  1681                           	opt stack 0
  1682  0000B6                     Sensor_scheduleNextScan@sensor:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x6
  1686  0000B6                     	ds	1
  1687  0000B7                     ?___lwmod:
  1688                           	opt stack 0
  1689  0000B7                     Sensor_RawSample_Update@sensor:
  1690                           	opt stack 0
  1691  0000B7                     Button_Reading_Update@button:
  1692                           	opt stack 0
  1693  0000B7                     ___lwmod@dividend:
  1694                           	opt stack 0
  1695  0000B7                     memcpy@d:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x7
  1699  0000B7                     	ds	1
  1700  0000B8                     Button_Deviation_Update@deviation:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x8
  1704  0000B8                     	ds	1
  1705  0000B9                     Sensor_RawSample_Update@result:
  1706                           	opt stack 0
  1707  0000B9                     Button_State_Initializing@button:
  1708                           	opt stack 0
  1709  0000B9                     Button_State_NotPressed@button:
  1710                           	opt stack 0
  1711  0000B9                     Button_State_Pressed@button:
  1712                           	opt stack 0
  1713  0000B9                     ___lwmod@divisor:
  1714                           	opt stack 0
  1715  0000B9                     memcpy@s:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x9
  1719  0000B9                     	ds	1
  1720  0000BA                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0xA
  1724  0000BA                     	ds	1
  1725  0000BB                     ??_Button_State_Initializing:
  1726  0000BB                     ??_Button_State_NotPressed:
  1727  0000BB                     ??_Button_State_Pressed:
  1728  0000BB                     ??_Sensor_postAcquisitionProcess:
  1729  0000BB                     MTOUCH_Sensor_InitializeAll@sensor:
  1730                           	opt stack 0
  1731  0000BB                     MTOUCH_Button_InitializeAll@button:
  1732                           	opt stack 0
  1733  0000BB                     ___lwmod@counter:
  1734                           	opt stack 0
  1735  0000BB                     Sensor_FrequencyHopping_Autotune_Process@variance:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0xB
  1739  0000BB                     	ds	1
  1740  0000BC                     ?_printf:
  1741                           	opt stack 0
  1742  0000BC                     printf@f:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0xC
  1746  0000BC                     	ds	1
  1747  0000BD                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0xD
  1751  0000BD                     	ds	2
  1752  0000BF                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:
  1753                           	opt stack 0
  1754                           
  1755                           ; 1 bytes @ 0xF
  1756  0000BF                     	ds	1
  1757  0000C0                     ??_printf:
  1758  0000C0                     ??_Button_Service:
  1759  0000C0                     Sensor_FrequencyHopping_Autotune_Process@sensor:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0x10
  1763  0000C0                     	ds	1
  1764  0000C1                     Sensor_postAcquisitionProcess@name:
  1765                           	opt stack 0
  1766  0000C1                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:
  1767                           	opt stack 0
  1768  0000C1                     Button_Service@name:
  1769                           	opt stack 0
  1770  0000C1                     printf@ap:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x11
  1774  0000C1                     	ds	1
  1775  0000C2                     Sensor_postAcquisitionProcess@sensor:
  1776                           	opt stack 0
  1777  0000C2                     Button_Service@button:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x12
  1781  0000C2                     	ds	1
  1782  0000C3                     printf@flag:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x13
  1786  0000C3                     	ds	1
  1787  0000C4                     Sensor_FrequencyHopping@sensor:
  1788                           	opt stack 0
  1789  0000C4                     MTOUCH_Button_ServiceAll@button:
  1790                           	opt stack 0
  1791  0000C4                     printf@prec:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x14
  1795  0000C4                     	ds	1
  1796  0000C5                     MTOUCH_Sensor_SampleAll@sensor:
  1797                           	opt stack 0
  1798  0000C5                     printf@val:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x15
  1802  0000C5                     	ds	1
  1803  0000C6                     
  1804                           ; 1 bytes @ 0x16
  1805  0000C6                     	ds	1
  1806  0000C7                     printf@c:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0x17
  1810  0000C7                     	ds	1
  1811  0000C8                     ringBufferLUT@line:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x18
  1815  0000C8                     	ds	2
  1816  0000CA                     ??_ringBufferLUT:
  1817                           
  1818                           ; 1 bytes @ 0x1A
  1819  0000CA                     	ds	1
  1820  0000CB                     ??_ringBufferPull:
  1821                           
  1822                           ; 1 bytes @ 0x1B
  1823  0000CB                     	ds	3
  1824  0000CE                     ringBufferPull@charNumber:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x1E
  1828  0000CE                     	ds	2
  1829  0000D0                     ringBufferPull@index_724:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x20
  1833  0000D0                     	ds	2
  1834  0000D2                     ringBufferPull@index:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x22
  1838  0000D2                     	ds	2
  1839  0000D4                     ??_main:
  1840                           
  1841                           ; 1 bytes @ 0x24
  1842  0000D4                     	ds	1
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           postdec1	equ	0xFE5
  1850                           fsr1l	equ	0xFE1
  1851                           
  1852                           	psect	cstackCOMRAM
  1853  000001                     __pcstackCOMRAM:
  1854                           	opt stack 0
  1855  000001                     ?i2_abs:
  1856                           	opt stack 0
  1857  000001                     ?i2___lwdiv:
  1858                           	opt stack 0
  1859  000001                     i2EUSART2_Write@txData:
  1860                           	opt stack 0
  1861  000001                     i2Sensor_SetTrisBit@TrisBit:
  1862                           	opt stack 0
  1863  000001                     i2MTOUCH_Sensor_isEnabled@sensor:
  1864                           	opt stack 0
  1865  000001                     i2MTOUCH_Sensor_wasSampled@sensor:
  1866                           	opt stack 0
  1867  000001                     Sensor_setCalibrated@sensor:
  1868                           	opt stack 0
  1869  000001                     Sensor_setCalibratAcqTime@sensor:
  1870                           	opt stack 0
  1871  000001                     Sensor_setSampled@sensor:
  1872                           	opt stack 0
  1873  000001                     i2Sensor_isCalibrated@sensor:
  1874                           	opt stack 0
  1875  000001                     i2Sensor_isCalibratingAcqTime@sensor:
  1876                           	opt stack 0
  1877  000001                     i2abs@a:
  1878                           	opt stack 0
  1879  000001                     i2___lwdiv@dividend:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x0
  1883  000001                     	ds	1
  1884  000002                     i2putch@txData:
  1885                           	opt stack 0
  1886  000002                     i2Sensor_SetTrisBit@sensor:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0x1
  1890  000002                     	ds	1
  1891  000003                     ??i2_Sensor_scheduleNextScan:
  1892  000003                     ??i2_abs:
  1893  000003                     i2___lwdiv@divisor:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x2
  1897  000003                     	ds	2
  1898  000005                     i2Sensor_scheduleNextScan@state:
  1899                           	opt stack 0
  1900  000005                     Sensor_autoCalibration@sensor:
  1901                           	opt stack 0
  1902  000005                     i2___lwdiv@quotient:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x4
  1906  000005                     	ds	1
  1907  000006                     i2Sensor_scheduleNextScan@skipScan:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x5
  1911  000006                     	ds	1
  1912  000007                     ??_Sensor_autoCalibration:
  1913  000007                     i2___lwdiv@counter:
  1914                           	opt stack 0
  1915  000007                     i2Sensor_scheduleNextScan@sensor:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0x6
  1919  000007                     	ds	1
  1920  000008                     ?i2___lwmod:
  1921                           	opt stack 0
  1922  000008                     i2___lwmod@dividend:
  1923                           	opt stack 0
  1924                           
  1925                           ; 2 bytes @ 0x7
  1926  000008                     	ds	2
  1927  00000A                     i2___lwmod@divisor:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x9
  1931  00000A                     	ds	2
  1932  00000C                     i2___lwmod@counter:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0xB
  1936  00000C                     	ds	1
  1937  00000D                     ?i2_printf:
  1938                           	opt stack 0
  1939  00000D                     Sensor_autoCalibration@name:
  1940                           	opt stack 0
  1941  00000D                     i2printf@f:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0xC
  1945  00000D                     	ds	1
  1946  00000E                     MTOUCH_Sensor_Service@sensor:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0xD
  1950  00000E                     	ds	1
  1951  00000F                     ??i2_printf:
  1952                           
  1953                           ; 1 bytes @ 0xE
  1954  00000F                     	ds	1
  1955  000010                     i2printf@ap:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0xF
  1959  000010                     	ds	2
  1960  000012                     i2printf@flag:
  1961                           	opt stack 0
  1962                           
  1963                           ; 1 bytes @ 0x11
  1964  000012                     	ds	1
  1965  000013                     i2printf@prec:
  1966                           	opt stack 0
  1967                           
  1968                           ; 1 bytes @ 0x12
  1969  000013                     	ds	1
  1970  000014                     i2printf@val:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x13
  1974  000014                     	ds	2
  1975  000016                     i2printf@c:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x15
  1979  000016                     	ds	1
  1980  000017                     ??_INTERRUPT_InterruptManagerHigh:
  1981                           
  1982                           ; 1 bytes @ 0x16
  1983  000017                     	ds	18
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           
  1993 ;;
  1994 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1995 ;;
  1996 ;; *************** function _main *****************
  1997 ;; Defined at:
  1998 ;;		line 58 in file "main.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;Total ram usage:        1 bytes
  2017 ;; Hardware stack levels required when called:   11
  2018 ;; This function calls:
  2019 ;;		_MTOUCH_Button_State_Get
  2020 ;;		_MTOUCH_Service_Mainloop
  2021 ;;		_SYSTEM_Initialize
  2022 ;;		_printResetMessage
  2023 ;;		_ringBufferPull
  2024 ;; This function is called by:
  2025 ;;		Startup code after reset
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text0
  2030  011602                     __ptext0:
  2031                           	opt stack 0
  2032  011602                     _main:
  2033                           	opt stack 20
  2034                           
  2035                           ;main.c: 61: SYSTEM_Initialize();
  2036                           
  2037                           ;incstack = 0
  2038  011602  EC87  F091         	call	_SYSTEM_Initialize	;wreg free
  2039                           
  2040                           ;main.c: 68: (INTCONbits.GIEH = 1);
  2041  011606  8EF2               	bsf	intcon,7,c	;volatile
  2042                           
  2043                           ;main.c: 71: (INTCONbits.GIEL = 1);
  2044  011608  8CF2               	bsf	intcon,6,c	;volatile
  2045                           
  2046                           ;main.c: 74: printResetMessage();
  2047  01160A  EC3C  F08F         	call	_printResetMessage	;wreg free
  2048  01160E                     
  2049                           ;main.c: 77: {
  2050                           ;main.c: 79: if (eusart2RxStringReady) {
  2051  01160E  0100               	movlb	0	; () banked
  2052  011610  5182               	movf	_eusart2RxStringReady& (0+255),w,b	;volatile
  2053  011612  A4D8               	btfss	status,2,c
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 80: ringBufferPull();
  2057  011614  EC13  F087         	call	_ringBufferPull	;wreg free
  2058                           
  2059                           ;main.c: 81: }
  2060                           ;main.c: 84: MTOUCH_Service_Mainloop();
  2061  011618  ECD1  F090         	call	_MTOUCH_Service_Mainloop	;wreg free
  2062                           
  2063                           ;main.c: 87: LATFbits.LATF0 = ~MTOUCH_Button_State_Get(Button0);
  2064  01161C  0E00               	movlw	0
  2065  01161E  EC92  F090         	call	_MTOUCH_Button_State_Get
  2066  011622  0AFF               	xorlw	255
  2067  011624  0100               	movlb	0	; () banked
  2068  011626  6FD4               	movwf	??_main& (0+255),b
  2069  011628  507E               	movf	3966,w,c	;volatile
  2070  01162A  19D4               	xorwf	??_main& (0+255),w,b
  2071  01162C  0BFE               	andlw	-2
  2072  01162E  19D4               	xorwf	??_main& (0+255),w,b
  2073  011630  6E7E               	movwf	3966,c	;volatile
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;main.c: 88: LATFbits.LATF1 = ~MTOUCH_Button_State_Get(Button1);
  2077  011632  0E01               	movlw	1
  2078  011634  EC92  F090         	call	_MTOUCH_Button_State_Get
  2079  011638  0AFF               	xorlw	255
  2080  01163A  0100               	movlb	0	; () banked
  2081  01163C  6FD4               	movwf	??_main& (0+255),b
  2082  01163E  47D4               	rlncf	??_main& (0+255),f,b
  2083  011640  507E               	movf	3966,w,c	;volatile
  2084  011642  19D4               	xorwf	??_main& (0+255),w,b
  2085  011644  0BFD               	andlw	-3
  2086  011646  19D4               	xorwf	??_main& (0+255),w,b
  2087  011648  6E7E               	movwf	3966,c	;volatile
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;main.c: 89: LATFbits.LATF2 = ~MTOUCH_Button_State_Get(Button2);
  2091  01164A  0E02               	movlw	2
  2092  01164C  EC92  F090         	call	_MTOUCH_Button_State_Get
  2093  011650  0AFF               	xorlw	255
  2094  011652  0100               	movlb	0	; () banked
  2095  011654  6FD4               	movwf	??_main& (0+255),b
  2096  011656  47D4               	rlncf	??_main& (0+255),f,b
  2097  011658  47D4               	rlncf	??_main& (0+255),f,b
  2098  01165A  507E               	movf	3966,w,c	;volatile
  2099  01165C  19D4               	xorwf	??_main& (0+255),w,b
  2100  01165E  0BFB               	andlw	-5
  2101  011660  19D4               	xorwf	??_main& (0+255),w,b
  2102  011662  6E7E               	movwf	3966,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 90: LATFbits.LATF3 = ~MTOUCH_Button_State_Get(Button3);
  2106  011664  0E03               	movlw	3
  2107  011666  EC92  F090         	call	_MTOUCH_Button_State_Get
  2108  01166A  0AFF               	xorlw	255
  2109  01166C  0100               	movlb	0	; () banked
  2110  01166E  6FD4               	movwf	??_main& (0+255),b
  2111  011670  47D4               	rlncf	??_main& (0+255),f,b
  2112  011672  47D4               	rlncf	??_main& (0+255),f,b
  2113  011674  47D4               	rlncf	??_main& (0+255),f,b
  2114  011676  507E               	movf	3966,w,c	;volatile
  2115  011678  19D4               	xorwf	??_main& (0+255),w,b
  2116  01167A  0BF7               	andlw	-9
  2117  01167C  19D4               	xorwf	??_main& (0+255),w,b
  2118  01167E  6E7E               	movwf	3966,c	;volatile
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;main.c: 91: LATFbits.LATF4 = ~MTOUCH_Button_State_Get(Button4);
  2122  011680  0E04               	movlw	4
  2123  011682  EC92  F090         	call	_MTOUCH_Button_State_Get
  2124  011686  0AFF               	xorlw	255
  2125  011688  0100               	movlb	0	; () banked
  2126  01168A  6FD4               	movwf	??_main& (0+255),b
  2127  01168C  3BD4               	swapf	??_main& (0+255),f,b
  2128  01168E  507E               	movf	3966,w,c	;volatile
  2129  011690  19D4               	xorwf	??_main& (0+255),w,b
  2130  011692  0BEF               	andlw	-17
  2131  011694  19D4               	xorwf	??_main& (0+255),w,b
  2132  011696  6E7E               	movwf	3966,c	;volatile
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;main.c: 117: __nop();
  2136  011698  F000               	nop	
  2137  01169A  D7B9               	goto	l305
  2138  01169C                     __end_of_main:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           intcon	equ	0xFF2
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           fsr1l	equ	0xFE1
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _ringBufferPull *****************
  2152 ;; Defined at:
  2153 ;;		line 8 in file "ring_buffer_interface.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  index           2   32[BANK0 ] int 
  2158 ;;  index           2   34[BANK0 ] int 
  2159 ;;  charNumber      2   30[BANK0 ] int 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;Total ram usage:        9 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    9
  2176 ;; This function calls:
  2177 ;;		_EUSART2_Read
  2178 ;;		_ringBufferLUT
  2179 ;;		_strlen
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text1
  2186  010E26                     __ptext1:
  2187                           	opt stack 0
  2188  010E26                     _ringBufferPull:
  2189                           	opt stack 21
  2190                           
  2191                           ;ring_buffer_interface.c: 10: int charNumber = eusart2RxCount;
  2192                           
  2193                           ;incstack = 0
  2194  010E26  C03D  F0CE         	movff	_eusart2RxCount,ringBufferPull@charNumber	;volatile
  2195  010E2A  0100               	movlb	0	; () banked
  2196  010E2C  6BCF               	clrf	(ringBufferPull@charNumber+1)& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;ring_buffer_interface.c: 13: for (int index = 0; index < 64; index++) {
  2200  010E2E  0E00               	movlw	0
  2201  010E30  6FD3               	movwf	(ringBufferPull@index+1)& (0+255),b
  2202  010E32  0E00               	movlw	0
  2203  010E34  6FD2               	movwf	ringBufferPull@index& (0+255),b
  2204  010E36                     l5137:
  2205                           
  2206                           ; BSR set to: 0
  2207  010E36  BFD3               	btfsc	(ringBufferPull@index+1)& (0+255),7,b
  2208  010E38  D006               	goto	l334
  2209  010E3A  51D3               	movf	(ringBufferPull@index+1)& (0+255),w,b
  2210  010E3C  E10F               	bnz	l5147
  2211  010E3E  0E40               	movlw	64
  2212  010E40  5DD2               	subwf	ringBufferPull@index& (0+255),w,b
  2213  010E42  B0D8               	btfsc	status,0,c
  2214  010E44  D00B               	goto	u5670
  2215  010E46                     l334:
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;ring_buffer_interface.c: 15: line[index] = '\0';
  2219                           
  2220                           ; BSR set to: 0
  2221  010E46  0E90               	movlw	low _line
  2222  010E48  25D2               	addwf	ringBufferPull@index& (0+255),w,b
  2223  010E4A  6ED9               	movwf	fsr2l,c
  2224  010E4C  0E01               	movlw	high _line
  2225  010E4E  21D3               	addwfc	(ringBufferPull@index+1)& (0+255),w,b
  2226  010E50  6EDA               	movwf	fsr2h,c
  2227  010E52  0E00               	movlw	0
  2228  010E54  6EDF               	movwf	indf2,c
  2229                           
  2230                           ; BSR set to: 0
  2231  010E56  4BD2               	infsnz	ringBufferPull@index& (0+255),f,b
  2232  010E58  2BD3               	incf	(ringBufferPull@index+1)& (0+255),f,b
  2233  010E5A  D7ED               	goto	l5137
  2234  010E5C                     u5670:
  2235  010E5C                     l5147:
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;ring_buffer_interface.c: 17: }
  2239                           ;ring_buffer_interface.c: 20: for(int index = 0; index < charNumber; index++){
  2240  010E5C  0E00               	movlw	0
  2241  010E5E  6FD1               	movwf	(ringBufferPull@index_724+1)& (0+255),b
  2242  010E60  0E00               	movlw	0
  2243  010E62  6FD0               	movwf	ringBufferPull@index_724& (0+255),b
  2244  010E64  D00E               	goto	l336
  2245  010E66                     
  2246                           ; BSR set to: 0
  2247                           ;ring_buffer_interface.c: 22: line[index] = EUSART2_Read();
  2248                           
  2249                           ; BSR set to: 0
  2250  010E66  EC00  F08F         	call	_EUSART2_Read	;wreg free
  2251  010E6A  0100               	movlb	0	; () banked
  2252  010E6C  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2253  010E6E  0E90               	movlw	low _line
  2254  010E70  25D0               	addwf	ringBufferPull@index_724& (0+255),w,b
  2255  010E72  6ED9               	movwf	fsr2l,c
  2256  010E74  0E01               	movlw	high _line
  2257  010E76  21D1               	addwfc	(ringBufferPull@index_724+1)& (0+255),w,b
  2258  010E78  6EDA               	movwf	fsr2h,c
  2259  010E7A  C0CB  FFDF         	movff	??_ringBufferPull,indf2
  2260                           
  2261                           ; BSR set to: 0
  2262  010E7E  4BD0               	infsnz	ringBufferPull@index_724& (0+255),f,b
  2263  010E80  2BD1               	incf	(ringBufferPull@index_724+1)& (0+255),f,b
  2264  010E82                     l336:
  2265                           
  2266                           ; BSR set to: 0
  2267                           
  2268                           ; BSR set to: 0
  2269  010E82  51CE               	movf	ringBufferPull@charNumber& (0+255),w,b
  2270  010E84  5DD0               	subwf	ringBufferPull@index_724& (0+255),w,b
  2271  010E86  51D1               	movf	(ringBufferPull@index_724+1)& (0+255),w,b
  2272  010E88  0A80               	xorlw	128
  2273  010E8A  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2274  010E8C  51CF               	movf	(ringBufferPull@charNumber+1)& (0+255),w,b
  2275  010E8E  0A80               	xorlw	128
  2276  010E90  59CB               	subwfb	??_ringBufferPull& (0+255),w,b
  2277  010E92  A0D8               	btfss	status,0,c
  2278  010E94  D7E8               	goto	l337
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;ring_buffer_interface.c: 24: }
  2282                           ;ring_buffer_interface.c: 27: eusart2RxTail = eusart2RxHead;
  2283  010E96  C03F  F03E         	movff	_eusart2RxHead,_eusart2RxTail	;volatile
  2284                           
  2285                           ;ring_buffer_interface.c: 30: while((line[strlen(line) - 1] == (int) '\n') ||
  2286                           ;ring_buffer_interface.c: 31: (line[strlen(line) - 1] == (int) '\r')) {
  2287  010E9A  D017               	goto	l339
  2288  010E9C                     
  2289                           ; BSR set to: 0
  2290                           ;ring_buffer_interface.c: 34: line[strlen(line) - 1] = '\0';
  2291                           
  2292                           ; BSR set to: 0
  2293  010E9C  0EFF               	movlw	255
  2294  010E9E  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2295  010EA0  0EFF               	movlw	255
  2296  010EA2  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2297  010EA4  0E90               	movlw	low _line
  2298  010EA6  6FB0               	movwf	strlen@s& (0+255),b
  2299  010EA8  0E01               	movlw	high _line
  2300  010EAA  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2301  010EAC  ECA3  F08E         	call	_strlen	;wreg free
  2302  010EB0  0100               	movlb	0	; () banked
  2303  010EB2  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2304  010EB4  27B0               	addwf	?_strlen& (0+255),f,b
  2305  010EB6  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2306  010EB8  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2307  010EBA  0E90               	movlw	low _line
  2308  010EBC  25B0               	addwf	?_strlen& (0+255),w,b
  2309  010EBE  6ED9               	movwf	fsr2l,c
  2310  010EC0  0E01               	movlw	high _line
  2311  010EC2  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2312  010EC4  6EDA               	movwf	fsr2h,c
  2313  010EC6  0E00               	movlw	0
  2314  010EC8  6EDF               	movwf	indf2,c
  2315  010ECA                     l339:
  2316                           
  2317                           ; BSR set to: 0
  2318  010ECA  0EFF               	movlw	255
  2319  010ECC  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2320  010ECE  0EFF               	movlw	255
  2321  010ED0  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2322  010ED2  0E90               	movlw	low _line
  2323  010ED4  6FB0               	movwf	strlen@s& (0+255),b
  2324  010ED6  0E01               	movlw	high _line
  2325  010ED8  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2326  010EDA  ECA3  F08E         	call	_strlen	;wreg free
  2327  010EDE  0100               	movlb	0	; () banked
  2328  010EE0  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2329  010EE2  27B0               	addwf	?_strlen& (0+255),f,b
  2330  010EE4  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2331  010EE6  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2332  010EE8  0E90               	movlw	low _line
  2333  010EEA  25B0               	addwf	?_strlen& (0+255),w,b
  2334  010EEC  6ED9               	movwf	fsr2l,c
  2335  010EEE  0E01               	movlw	high _line
  2336  010EF0  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2337  010EF2  6EDA               	movwf	fsr2h,c
  2338  010EF4  0E0A               	movlw	10
  2339  010EF6  18DE               	xorwf	postinc2,w,c
  2340  010EF8  B4D8               	btfsc	status,2,c
  2341  010EFA  D7D0               	goto	l340
  2342                           
  2343                           ; BSR set to: 0
  2344  010EFC  0EFF               	movlw	255
  2345  010EFE  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2346  010F00  0EFF               	movlw	255
  2347  010F02  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2348  010F04  0E90               	movlw	low _line
  2349  010F06  6FB0               	movwf	strlen@s& (0+255),b
  2350  010F08  0E01               	movlw	high _line
  2351  010F0A  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2352  010F0C  ECA3  F08E         	call	_strlen	;wreg free
  2353  010F10  0100               	movlb	0	; () banked
  2354  010F12  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2355  010F14  27B0               	addwf	?_strlen& (0+255),f,b
  2356  010F16  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2357  010F18  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2358  010F1A  0E90               	movlw	low _line
  2359  010F1C  25B0               	addwf	?_strlen& (0+255),w,b
  2360  010F1E  6ED9               	movwf	fsr2l,c
  2361  010F20  0E01               	movlw	high _line
  2362  010F22  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2363  010F24  6EDA               	movwf	fsr2h,c
  2364  010F26  0E0D               	movlw	13
  2365  010F28  18DE               	xorwf	postinc2,w,c
  2366  010F2A  B4D8               	btfsc	status,2,c
  2367  010F2C  D7B7               	goto	l340
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;ring_buffer_interface.c: 36: }
  2371                           ;ring_buffer_interface.c: 40: eusart2RxStringReady = 0;
  2372                           
  2373                           ; BSR set to: 0
  2374  010F2E  0E00               	movlw	0
  2375  010F30  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;ring_buffer_interface.c: 43: ringBufferLUT(line);
  2379  010F32  0E90               	movlw	low _line
  2380  010F34  6FC8               	movwf	ringBufferLUT@line& (0+255),b
  2381  010F36  0E01               	movlw	high _line
  2382  010F38  6FC9               	movwf	(ringBufferLUT@line+1)& (0+255),b
  2383  010F3A  EC00  F080         	call	_ringBufferLUT	;wreg free
  2384  010F3E  0012               	return		;funcret
  2385  010F40                     __end_of_ringBufferPull:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           intcon	equ	0xFF2
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1l	equ	0xFE1
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _strlen *****************
  2403 ;; Defined at:
  2404 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2407 ;;		 -> line(64), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  2410 ;;		 -> line(64), 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  2    0[BANK0 ] unsigned int 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2424 ;;Total ram usage:        6 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    5
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_ringBufferPull
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text2
  2435  011D46                     __ptext2:
  2436                           	opt stack 0
  2437  011D46                     _strlen:
  2438                           	opt stack 24
  2439                           
  2440                           ;incstack = 0
  2441  011D46  C0B0  F0B4         	movff	strlen@s,strlen@cp
  2442  011D4A  C0B1  F0B5         	movff	strlen@s+1,strlen@cp+1
  2443  011D4E  D003               	goto	l1557
  2444  011D50  0100               	movlb	0	; () banked
  2445  011D52  4BB4               	infsnz	strlen@cp& (0+255),f,b
  2446  011D54  2BB5               	incf	(strlen@cp+1)& (0+255),f,b
  2447  011D56                     l1557:
  2448                           
  2449                           ; BSR set to: 0
  2450  011D56  C0B4  FFD9         	movff	strlen@cp,fsr2l
  2451  011D5A  C0B5  FFDA         	movff	strlen@cp+1,fsr2h
  2452  011D5E  50DF               	movf	indf2,w,c
  2453  011D60  A4D8               	btfss	status,2,c
  2454  011D62  D7F6               	goto	l1558
  2455  011D64  C0B0  F0B2         	movff	strlen@s,??_strlen
  2456  011D68  C0B1  F0B3         	movff	strlen@s+1,??_strlen+1
  2457  011D6C  0100               	movlb	0	; () banked
  2458  011D6E  1FB2               	comf	??_strlen& (0+255),f,b
  2459  011D70  1FB3               	comf	(??_strlen+1)& (0+255),f,b
  2460  011D72  4BB2               	infsnz	??_strlen& (0+255),f,b
  2461  011D74  2BB3               	incf	(??_strlen+1)& (0+255),f,b
  2462  011D76  51B4               	movf	strlen@cp& (0+255),w,b
  2463  011D78  25B2               	addwf	??_strlen& (0+255),w,b
  2464  011D7A  6FB0               	movwf	?_strlen& (0+255),b
  2465  011D7C  51B5               	movf	(strlen@cp+1)& (0+255),w,b
  2466  011D7E  21B3               	addwfc	(??_strlen+1)& (0+255),w,b
  2467  011D80  6FB1               	movwf	(?_strlen+1)& (0+255),b
  2468  011D82  0012               	return	
  2469  011D84                     __end_of_strlen:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           intcon	equ	0xFF2
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           postdec1	equ	0xFE5
  2479                           fsr1l	equ	0xFE1
  2480                           indf2	equ	0xFDF
  2481                           postinc2	equ	0xFDE
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _ringBufferLUT *****************
  2487 ;; Defined at:
  2488 ;;		line 9 in file "ring_buffer_LUT.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  line            2   24[BANK0 ] PTR unsigned char 
  2491 ;;		 -> line(64), 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2503 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2506 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2507 ;;Total ram usage:        3 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    8
  2510 ;; This function calls:
  2511 ;;		_MTOUCH_Button_isPressed
  2512 ;;		_printf
  2513 ;;		_strcmp
  2514 ;; This function is called by:
  2515 ;;		_ringBufferPull
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text3
  2520  010000                     __ptext3:
  2521                           	opt stack 0
  2522  010000                     _ringBufferLUT:
  2523                           	opt stack 21
  2524                           
  2525                           ;ring_buffer_LUT.c: 15: if((0 == strcmp(line, "LEDs On"))) {
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;incstack = 0
  2529  010000  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2530  010004  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2531  010008  0ECF               	movlw	low STR_6
  2532  01000A  0100               	movlb	0	; () banked
  2533  01000C  6FB2               	movwf	strcmp@s2& (0+255),b
  2534  01000E  0EFF               	movlw	high STR_6
  2535  010010  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2536  010012  ECC7  F08D         	call	_strcmp	;wreg free
  2537  010016  0100               	movlb	0	; () banked
  2538  010018  51B0               	movf	?_strcmp& (0+255),w,b
  2539  01001A  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2540  01001C  A4D8               	btfss	status,2,c
  2541  01001E  D017               	goto	l360
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;ring_buffer_LUT.c: 18: LATF = 0x00;
  2545  010020  0E00               	movlw	0
  2546  010022  6E7E               	movwf	3966,c	;volatile
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;ring_buffer_LUT.c: 21: printf("\n\r");
  2550  010024  0EA6               	movlw	low (STR_8+15)
  2551  010026  6FBC               	movwf	printf@f& (0+255),b
  2552  010028  0EFF               	movlw	high (STR_8+15)
  2553  01002A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2554  01002C  EC40  F085         	call	_printf	;wreg free
  2555                           
  2556                           ;ring_buffer_LUT.c: 23: printf("    LATF = 0x00\n\r");
  2557  010030  0E97               	movlw	low STR_8
  2558  010032  0100               	movlb	0	; () banked
  2559  010034  6FBC               	movwf	printf@f& (0+255),b
  2560  010036  0EFF               	movlw	high STR_8
  2561  010038  6FBD               	movwf	(printf@f+1)& (0+255),b
  2562  01003A  EC40  F085         	call	_printf	;wreg free
  2563                           
  2564                           ;ring_buffer_LUT.c: 26: printf("\n\r");
  2565  01003E  0EA6               	movlw	low (STR_8+15)
  2566  010040  0100               	movlb	0	; () banked
  2567  010042  6FBC               	movwf	printf@f& (0+255),b
  2568  010044  0EFF               	movlw	high (STR_8+15)
  2569  010046  6FBD               	movwf	(printf@f+1)& (0+255),b
  2570  010048  EC40  F085         	call	_printf	;wreg free
  2571                           
  2572                           ;ring_buffer_LUT.c: 28: }
  2573  01004C  0012               	return	
  2574  01004E                     l360:
  2575                           
  2576                           ;ring_buffer_LUT.c: 32: else if((0 == strcmp(line, "LEDs Off"))) {
  2577  01004E  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2578  010052  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2579  010056  0EC6               	movlw	low STR_10
  2580  010058  0100               	movlb	0	; () banked
  2581  01005A  6FB2               	movwf	strcmp@s2& (0+255),b
  2582  01005C  0EFF               	movlw	high STR_10
  2583  01005E  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2584  010060  ECC7  F08D         	call	_strcmp	;wreg free
  2585  010064  0100               	movlb	0	; () banked
  2586  010066  51B0               	movf	?_strcmp& (0+255),w,b
  2587  010068  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2588  01006A  A4D8               	btfss	status,2,c
  2589  01006C  D016               	goto	l362
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;ring_buffer_LUT.c: 35: LATF = 0xFF;
  2593  01006E  687E               	setf	3966,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;ring_buffer_LUT.c: 38: printf("\n\r");
  2597  010070  0EA6               	movlw	low (STR_8+15)
  2598  010072  6FBC               	movwf	printf@f& (0+255),b
  2599  010074  0EFF               	movlw	high (STR_8+15)
  2600  010076  6FBD               	movwf	(printf@f+1)& (0+255),b
  2601  010078  EC40  F085         	call	_printf	;wreg free
  2602                           
  2603                           ;ring_buffer_LUT.c: 40: printf("LATF = 0xFF\n\r");
  2604  01007C  0EB8               	movlw	low STR_12
  2605  01007E  0100               	movlb	0	; () banked
  2606  010080  6FBC               	movwf	printf@f& (0+255),b
  2607  010082  0EFF               	movlw	high STR_12
  2608  010084  6FBD               	movwf	(printf@f+1)& (0+255),b
  2609  010086  EC40  F085         	call	_printf	;wreg free
  2610                           
  2611                           ;ring_buffer_LUT.c: 43: printf("\n\r");
  2612  01008A  0EA6               	movlw	low (STR_8+15)
  2613  01008C  0100               	movlb	0	; () banked
  2614  01008E  6FBC               	movwf	printf@f& (0+255),b
  2615  010090  0EFF               	movlw	high (STR_8+15)
  2616  010092  6FBD               	movwf	(printf@f+1)& (0+255),b
  2617  010094  EC40  F085         	call	_printf	;wreg free
  2618                           
  2619                           ;ring_buffer_LUT.c: 45: }
  2620  010098  0012               	return	
  2621  01009A                     l362:
  2622                           
  2623                           ;ring_buffer_LUT.c: 48: else if((0 == strcmp(line, "Button States?"))) {
  2624  01009A  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2625  01009E  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2626  0100A2  0EA9               	movlw	low STR_14
  2627  0100A4  0100               	movlb	0	; () banked
  2628  0100A6  6FB2               	movwf	strcmp@s2& (0+255),b
  2629  0100A8  0EFF               	movlw	high STR_14
  2630  0100AA  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2631  0100AC  ECC7  F08D         	call	_strcmp	;wreg free
  2632  0100B0  0100               	movlb	0	; () banked
  2633  0100B2  51B0               	movf	?_strcmp& (0+255),w,b
  2634  0100B4  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2635  0100B6  A4D8               	btfss	status,2,c
  2636  0100B8  D059               	goto	l364
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;ring_buffer_LUT.c: 51: printf("\n\r");
  2640  0100BA  0EA6               	movlw	low (STR_8+15)
  2641  0100BC  6FBC               	movwf	printf@f& (0+255),b
  2642  0100BE  0EFF               	movlw	high (STR_8+15)
  2643  0100C0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2644  0100C2  EC40  F085         	call	_printf	;wreg free
  2645                           
  2646                           ;ring_buffer_LUT.c: 54: printf("    Button 0: %d\n\r", MTOUCH_Button_isPressed(Button0))
      +                          ;
  2647  0100C6  0E38               	movlw	low STR_16
  2648  0100C8  0100               	movlb	0	; () banked
  2649  0100CA  6FBC               	movwf	printf@f& (0+255),b
  2650  0100CC  0EFF               	movlw	high STR_16
  2651  0100CE  6FBD               	movwf	(printf@f+1)& (0+255),b
  2652  0100D0  0E00               	movlw	0
  2653  0100D2  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2654  0100D6  0100               	movlb	0	; () banked
  2655  0100D8  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2656  0100DA  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2657  0100DC  6FBE               	movwf	(?_printf+2)& (0+255),b
  2658  0100DE  6BBF               	clrf	(?_printf+3)& (0+255),b
  2659  0100E0  EC40  F085         	call	_printf	;wreg free
  2660                           
  2661                           ;ring_buffer_LUT.c: 55: printf("    Button 1: %d\n\r", MTOUCH_Button_isPressed(Button1))
      +                          ;
  2662  0100E4  0E4B               	movlw	low STR_17
  2663  0100E6  0100               	movlb	0	; () banked
  2664  0100E8  6FBC               	movwf	printf@f& (0+255),b
  2665  0100EA  0EFF               	movlw	high STR_17
  2666  0100EC  6FBD               	movwf	(printf@f+1)& (0+255),b
  2667  0100EE  0E01               	movlw	1
  2668  0100F0  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2669  0100F4  0100               	movlb	0	; () banked
  2670  0100F6  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2671  0100F8  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2672  0100FA  6FBE               	movwf	(?_printf+2)& (0+255),b
  2673  0100FC  6BBF               	clrf	(?_printf+3)& (0+255),b
  2674  0100FE  EC40  F085         	call	_printf	;wreg free
  2675                           
  2676                           ;ring_buffer_LUT.c: 56: printf("    Button 2: %d\n\r", MTOUCH_Button_isPressed(Button2))
      +                          ;
  2677  010102  0E5E               	movlw	low STR_18
  2678  010104  0100               	movlb	0	; () banked
  2679  010106  6FBC               	movwf	printf@f& (0+255),b
  2680  010108  0EFF               	movlw	high STR_18
  2681  01010A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2682  01010C  0E02               	movlw	2
  2683  01010E  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2684  010112  0100               	movlb	0	; () banked
  2685  010114  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2686  010116  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2687  010118  6FBE               	movwf	(?_printf+2)& (0+255),b
  2688  01011A  6BBF               	clrf	(?_printf+3)& (0+255),b
  2689  01011C  EC40  F085         	call	_printf	;wreg free
  2690                           
  2691                           ;ring_buffer_LUT.c: 57: printf("    Button 3: %d\n\r", MTOUCH_Button_isPressed(Button3))
      +                          ;
  2692  010120  0E71               	movlw	low STR_19
  2693  010122  0100               	movlb	0	; () banked
  2694  010124  6FBC               	movwf	printf@f& (0+255),b
  2695  010126  0EFF               	movlw	high STR_19
  2696  010128  6FBD               	movwf	(printf@f+1)& (0+255),b
  2697  01012A  0E03               	movlw	3
  2698  01012C  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2699  010130  0100               	movlb	0	; () banked
  2700  010132  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2701  010134  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2702  010136  6FBE               	movwf	(?_printf+2)& (0+255),b
  2703  010138  6BBF               	clrf	(?_printf+3)& (0+255),b
  2704  01013A  EC40  F085         	call	_printf	;wreg free
  2705                           
  2706                           ;ring_buffer_LUT.c: 58: printf("    Button 4: %d\n\r", MTOUCH_Button_isPressed(Button4))
      +                          ;
  2707  01013E  0E84               	movlw	low STR_20
  2708  010140  0100               	movlb	0	; () banked
  2709  010142  6FBC               	movwf	printf@f& (0+255),b
  2710  010144  0EFF               	movlw	high STR_20
  2711  010146  6FBD               	movwf	(printf@f+1)& (0+255),b
  2712  010148  0E04               	movlw	4
  2713  01014A  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2714  01014E  0100               	movlb	0	; () banked
  2715  010150  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2716  010152  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2717  010154  6FBE               	movwf	(?_printf+2)& (0+255),b
  2718  010156  6BBF               	clrf	(?_printf+3)& (0+255),b
  2719  010158  EC40  F085         	call	_printf	;wreg free
  2720                           
  2721                           ;ring_buffer_LUT.c: 61: printf("\n\r");
  2722  01015C  0EA6               	movlw	low (STR_8+15)
  2723  01015E  0100               	movlb	0	; () banked
  2724  010160  6FBC               	movwf	printf@f& (0+255),b
  2725  010162  0EFF               	movlw	high (STR_8+15)
  2726  010164  6FBD               	movwf	(printf@f+1)& (0+255),b
  2727  010166  EC40  F085         	call	_printf	;wreg free
  2728                           
  2729                           ;ring_buffer_LUT.c: 62: }
  2730  01016A  0012               	return	
  2731  01016C                     l364:
  2732                           
  2733                           ;ring_buffer_LUT.c: 66: else if((0 == strcmp(line, "Reset"))) {
  2734  01016C  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2735  010170  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2736  010174  0EE3               	movlw	low STR_22
  2737  010176  0100               	movlb	0	; () banked
  2738  010178  6FB2               	movwf	strcmp@s2& (0+255),b
  2739  01017A  0EFF               	movlw	high STR_22
  2740  01017C  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2741  01017E  ECC7  F08D         	call	_strcmp	;wreg free
  2742  010182  0100               	movlb	0	; () banked
  2743  010184  51B0               	movf	?_strcmp& (0+255),w,b
  2744  010186  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2745  010188  A4D8               	btfss	status,2,c
  2746  01018A  D00F               	goto	l366
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;ring_buffer_LUT.c: 69: printf("\033[2J");
  2750  01018C  0EEE               	movlw	low STR_2
  2751  01018E  6FBC               	movwf	printf@f& (0+255),b
  2752  010190  0EFF               	movlw	high STR_2
  2753  010192  6FBD               	movwf	(printf@f+1)& (0+255),b
  2754  010194  EC40  F085         	call	_printf	;wreg free
  2755                           
  2756                           ;ring_buffer_LUT.c: 72: printf("\033[H");
  2757  010198  0EF7               	movlw	low STR_3
  2758  01019A  0100               	movlb	0	; () banked
  2759  01019C  6FBC               	movwf	printf@f& (0+255),b
  2760  01019E  0EFF               	movlw	high STR_3
  2761  0101A0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2762  0101A2  EC40  F085         	call	_printf	;wreg free
  2763  0101A6  00FF               	reset		;# 
  2764                           
  2765                           ;ring_buffer_LUT.c: 77: }
  2766  0101A8  0012               	return	
  2767  0101AA                     l366:
  2768                           
  2769                           ;ring_buffer_LUT.c: 80: else if((0 == strcmp(line, "Clear"))) {
  2770  0101AA  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2771  0101AE  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2772  0101B2  0EDD               	movlw	low STR_25
  2773  0101B4  0100               	movlb	0	; () banked
  2774  0101B6  6FB2               	movwf	strcmp@s2& (0+255),b
  2775  0101B8  0EFF               	movlw	high STR_25
  2776  0101BA  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2777  0101BC  ECC7  F08D         	call	_strcmp	;wreg free
  2778  0101C0  0100               	movlb	0	; () banked
  2779  0101C2  51B0               	movf	?_strcmp& (0+255),w,b
  2780  0101C4  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2781  0101C6  A4D8               	btfss	status,2,c
  2782  0101C8  D00E               	goto	l368
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;ring_buffer_LUT.c: 83: printf("\033[2J");
  2786  0101CA  0EEE               	movlw	low STR_2
  2787  0101CC  6FBC               	movwf	printf@f& (0+255),b
  2788  0101CE  0EFF               	movlw	high STR_2
  2789  0101D0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2790  0101D2  EC40  F085         	call	_printf	;wreg free
  2791                           
  2792                           ;ring_buffer_LUT.c: 86: printf("\033[H");
  2793  0101D6  0EF7               	movlw	low STR_3
  2794  0101D8  0100               	movlb	0	; () banked
  2795  0101DA  6FBC               	movwf	printf@f& (0+255),b
  2796  0101DC  0EFF               	movlw	high STR_3
  2797  0101DE  6FBD               	movwf	(printf@f+1)& (0+255),b
  2798  0101E0  EC40  F085         	call	_printf	;wreg free
  2799                           
  2800                           ;ring_buffer_LUT.c: 88: }
  2801  0101E4  0012               	return	
  2802  0101E6                     l368:
  2803                           
  2804                           ;ring_buffer_LUT.c: 91: else if((0 == strcmp(line, "*IDN?")) || (0 == strcmp(line, "IDN"
      +                          ))) {
  2805  0101E6  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2806  0101EA  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2807  0101EE  0ED7               	movlw	low STR_28
  2808  0101F0  0100               	movlb	0	; () banked
  2809  0101F2  6FB2               	movwf	strcmp@s2& (0+255),b
  2810  0101F4  0EFF               	movlw	high STR_28
  2811  0101F6  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2812  0101F8  ECC7  F08D         	call	_strcmp	;wreg free
  2813  0101FC  0100               	movlb	0	; () banked
  2814  0101FE  51B0               	movf	?_strcmp& (0+255),w,b
  2815  010200  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2816  010202  B4D8               	btfsc	status,2,c
  2817  010204  D00F               	goto	u5570
  2818                           
  2819                           ; BSR set to: 0
  2820  010206  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2821  01020A  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2822  01020E  0EF3               	movlw	low STR_29
  2823  010210  6FB2               	movwf	strcmp@s2& (0+255),b
  2824  010212  0EFF               	movlw	high STR_29
  2825  010214  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2826  010216  ECC7  F08D         	call	_strcmp	;wreg free
  2827  01021A  0100               	movlb	0	; () banked
  2828  01021C  51B0               	movf	?_strcmp& (0+255),w,b
  2829  01021E  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2830  010220  A4D8               	btfss	status,2,c
  2831  010222  D015               	goto	l370
  2832  010224                     u5570:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;ring_buffer_LUT.c: 94: printf("\n\r");
  2836                           
  2837                           ; BSR set to: 0
  2838  010224  0EA6               	movlw	low (STR_8+15)
  2839  010226  6FBC               	movwf	printf@f& (0+255),b
  2840  010228  0EFF               	movlw	high (STR_8+15)
  2841  01022A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2842  01022C  EC40  F085         	call	_printf	;wreg free
  2843                           
  2844                           ;ring_buffer_LUT.c: 97: printf("    mTouch Test Board, REVA");
  2845  010230  0E1C               	movlw	low STR_31
  2846  010232  0100               	movlb	0	; () banked
  2847  010234  6FBC               	movwf	printf@f& (0+255),b
  2848  010236  0EFF               	movlw	high STR_31
  2849  010238  6FBD               	movwf	(printf@f+1)& (0+255),b
  2850  01023A  EC40  F085         	call	_printf	;wreg free
  2851                           
  2852                           ;ring_buffer_LUT.c: 100: printf("\n\r");
  2853  01023E  0EA6               	movlw	low (STR_8+15)
  2854  010240  0100               	movlb	0	; () banked
  2855  010242  6FBC               	movwf	printf@f& (0+255),b
  2856  010244  0EFF               	movlw	high (STR_8+15)
  2857  010246  6FBD               	movwf	(printf@f+1)& (0+255),b
  2858  010248  EC40  F085         	call	_printf	;wreg free
  2859                           
  2860                           ;ring_buffer_LUT.c: 102: }
  2861  01024C  0012               	return	
  2862  01024E                     l370:
  2863                           
  2864                           ;ring_buffer_LUT.c: 105: else if((0 == strcmp(line, "Help"))) {
  2865  01024E  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2866  010252  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2867  010256  0EE9               	movlw	low STR_33
  2868  010258  0100               	movlb	0	; () banked
  2869  01025A  6FB2               	movwf	strcmp@s2& (0+255),b
  2870  01025C  0EFF               	movlw	high STR_33
  2871  01025E  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2872  010260  ECC7  F08D         	call	_strcmp	;wreg free
  2873  010264  0100               	movlb	0	; () banked
  2874  010266  51B0               	movf	?_strcmp& (0+255),w,b
  2875  010268  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2876  01026A  A4D8               	btfss	status,2,c
  2877  01026C  0012               	return	
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;ring_buffer_LUT.c: 108: printf("\n\r");
  2881  01026E  0EA6               	movlw	low (STR_8+15)
  2882  010270  6FBC               	movwf	printf@f& (0+255),b
  2883  010272  0EFF               	movlw	high (STR_8+15)
  2884  010274  6FBD               	movwf	(printf@f+1)& (0+255),b
  2885  010276  EC40  F085         	call	_printf	;wreg free
  2886                           
  2887                           ;ring_buffer_LUT.c: 110: printf("   List of supported commands:\n\r"
  2888                           ;ring_buffer_LUT.c: 111: "   LEDs On: Turns all LEDs On\n\r"
  2889                           ;ring_buffer_LUT.c: 112: "   LEDs Off: Turns all LEDs Off\n\r"
  2890                           ;ring_buffer_LUT.c: 113: "   Button States?: Returns state of all five mTouch buttons\n\
      +                          r"
  2891                           ;ring_buffer_LUT.c: 114: "   Reset: Clears the terminal and resets the micro\n\r"
  2892                           ;ring_buffer_LUT.c: 115: "   Clear: Clears the terminal but doesn't reset the micro\n\r"
  2893                           ;ring_buffer_LUT.c: 116: "   *IDN?: Returns device identification\n\r"
  2894  01027A  0EA2               	movlw	low STR_35
  2895  01027C  0100               	movlb	0	; () banked
  2896  01027E  6FBC               	movwf	printf@f& (0+255),b
  2897  010280  0EFC               	movlw	high STR_35
  2898  010282  6FBD               	movwf	(printf@f+1)& (0+255),b
  2899  010284  EC40  F085         	call	_printf	;wreg free
  2900                           
  2901                           ;ring_buffer_LUT.c: 120: printf("\n\r");
  2902  010288  0EA6               	movlw	low (STR_8+15)
  2903  01028A  0100               	movlb	0	; () banked
  2904  01028C  6FBC               	movwf	printf@f& (0+255),b
  2905  01028E  0EFF               	movlw	high (STR_8+15)
  2906  010290  6FBD               	movwf	(printf@f+1)& (0+255),b
  2907  010292  EC40  F085         	call	_printf	;wreg free
  2908  010296  0012               	return	
  2909  010298                     __end_of_ringBufferLUT:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           intcon	equ	0xFF2
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postdec1	equ	0xFE5
  2919                           fsr1l	equ	0xFE1
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function _strcmp *****************
  2927 ;; Defined at:
  2928 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  2931 ;;		 -> line(64), 
  2932 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  2933 ;;		 -> STR_33(5), STR_29(4), STR_28(6), STR_25(6), 
  2934 ;;		 -> STR_22(6), STR_14(15), STR_10(9), STR_6(8), 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  r               1    5[BANK0 ] char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  2    0[BANK0 ] int 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2946 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    5
  2953 ;; This function calls:
  2954 ;;		Nothing
  2955 ;; This function is called by:
  2956 ;;		_ringBufferLUT
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text4
  2961  011B8E                     __ptext4:
  2962                           	opt stack 0
  2963  011B8E                     _strcmp:
  2964                           	opt stack 23
  2965                           
  2966                           ;incstack = 0
  2967  011B8E  D005               	goto	l1549
  2968  011B90  0100               	movlb	0	; () banked
  2969  011B92  4BB0               	infsnz	strcmp@s1& (0+255),f,b
  2970  011B94  2BB1               	incf	(strcmp@s1+1)& (0+255),f,b
  2971  011B96  4BB2               	infsnz	strcmp@s2& (0+255),f,b
  2972  011B98  2BB3               	incf	(strcmp@s2+1)& (0+255),f,b
  2973  011B9A                     l1549:
  2974                           
  2975                           ; BSR set to: 0
  2976  011B9A  C0B0  FFD9         	movff	strcmp@s1,fsr2l
  2977  011B9E  C0B1  FFDA         	movff	strcmp@s1+1,fsr2h
  2978  011BA2  50DF               	movf	indf2,w,c
  2979  011BA4  0100               	movlb	0	; () banked
  2980  011BA6  6FB4               	movwf	??_strcmp& (0+255),b
  2981  011BA8  C0B2  FFF6         	movff	strcmp@s2,tblptrl
  2982  011BAC  C0B3  FFF7         	movff	strcmp@s2+1,tblptrh
  2983  011BB0                     	if	0	;tblptru may be non-zero
  2984  011BB0                     	endif
  2985  011BB0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2986  011BB0  0E00               	movlw	low (__mediumconst shr (0+16))
  2987  011BB2  6EF8               	movwf	tblptru,c
  2988  011BB4                     	endif
  2989  011BB4  0008               	tblrd		*
  2990  011BB6  50F5               	movf	tablat,w,c
  2991  011BB8  0800               	sublw	0
  2992  011BBA  25B4               	addwf	??_strcmp& (0+255),w,b
  2993  011BBC  6FB5               	movwf	strcmp@r& (0+255),b
  2994  011BBE  51B5               	movf	strcmp@r& (0+255),w,b
  2995  011BC0  A4D8               	btfss	status,2,c
  2996  011BC2  D007               	goto	u5210
  2997                           
  2998                           ; BSR set to: 0
  2999  011BC4  C0B0  FFD9         	movff	strcmp@s1,fsr2l
  3000  011BC8  C0B1  FFDA         	movff	strcmp@s1+1,fsr2h
  3001  011BCC  50DF               	movf	indf2,w,c
  3002  011BCE  A4D8               	btfss	status,2,c
  3003  011BD0  D7DF               	goto	l1550
  3004  011BD2                     u5210:
  3005                           
  3006                           ; BSR set to: 0
  3007                           
  3008                           ; BSR set to: 0
  3009                           
  3010                           ; BSR set to: 0
  3011  011BD2  51B5               	movf	strcmp@r& (0+255),w,b
  3012  011BD4  6FB0               	movwf	?_strcmp& (0+255),b
  3013  011BD6  6BB1               	clrf	(?_strcmp+1)& (0+255),b
  3014  011BD8  BFB0               	btfsc	?_strcmp& (0+255),7,b
  3015  011BDA  07B1               	decf	(?_strcmp+1)& (0+255),f,b
  3016  011BDC  0012               	return	
  3017  011BDE                     __end_of_strcmp:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           intcon	equ	0xFF2
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postdec1	equ	0xFE5
  3027                           fsr1l	equ	0xFE1
  3028                           indf2	equ	0xFDF
  3029                           postinc2	equ	0xFDE
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _MTOUCH_Button_isPressed *****************
  3035 ;; Defined at:
  3036 ;;		line 377 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  name            1    wreg     enum E17454
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  name            1    1[BANK0 ] enum E17454
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      unsigned char 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;Total ram usage:        2 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    5
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_ringBufferLUT
  3061 ;;		_MTOUCH_Button_Buttonmask_Get
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text5
  3066  011EB2                     __ptext5:
  3067                           	opt stack 0
  3068  011EB2                     _MTOUCH_Button_isPressed:
  3069                           	opt stack 23
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;incstack = 0
  3073                           ;MTOUCH_Button_isPressed@name stored from wreg
  3074  011EB2  0100               	movlb	0	; () banked
  3075  011EB4  6FB1               	movwf	MTOUCH_Button_isPressed@name& (0+255),b
  3076                           
  3077                           ;mtouch_button.c: 379: if(name < 5)
  3078  011EB6  0E05               	movlw	5
  3079  011EB8  0100               	movlb	0	; () banked
  3080  011EBA  61B1               	cpfslt	MTOUCH_Button_isPressed@name& (0+255),b
  3081  011EBC  D014               	goto	l893
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;mtouch_button.c: 380: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  3085  011EBE  51B1               	movf	MTOUCH_Button_isPressed@name& (0+255),w,b
  3086  011EC0  0D10               	mullw	16
  3087  011EC2  0E02               	movlw	2
  3088  011EC4  26F3               	addwf	prodl,f,c
  3089  011EC6  0E00               	movlw	0
  3090  011EC8  22F4               	addwfc	prodh,f,c
  3091  011ECA  0E40               	movlw	low _mtouch_button
  3092  011ECC  24F3               	addwf	prodl,w,c
  3093  011ECE  6ED9               	movwf	fsr2l,c
  3094  011ED0  0E01               	movlw	high _mtouch_button
  3095  011ED2  20F4               	addwfc	prodh,w,c
  3096  011ED4  6EDA               	movwf	fsr2h,c
  3097  011ED6  0E02               	movlw	2
  3098  011ED8  18DE               	xorwf	postinc2,w,c
  3099  011EDA  A4D8               	btfss	status,2,c
  3100  011EDC  D002               	goto	u5230
  3101  011EDE  0E01               	movlw	1
  3102  011EE0  0012               	return	
  3103  011EE2                     u5230:
  3104  011EE2  0E00               	movlw	0
  3105                           
  3106                           ; BSR set to: 0
  3107                           
  3108                           ; BSR set to: 0
  3109  011EE4  0012               	return	
  3110  011EE6                     l893:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;mtouch_button.c: 381: else
  3114                           ;mtouch_button.c: 382: return 0;
  3115                           
  3116                           ; BSR set to: 0
  3117  011EE6  0E00               	movlw	0
  3118                           
  3119                           ; BSR set to: 0
  3120  011EE8  0012               	return	
  3121  011EEA                     __end_of_MTOUCH_Button_isPressed:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _EUSART2_Read *****************
  3141 ;; Defined at:
  3142 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;		None
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  readValue       1    0[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      unsigned char 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3160 ;;Total ram usage:        1 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    5
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_ringBufferPull
  3167 ;;		_getch
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text6
  3172  011E00                     __ptext6:
  3173                           	opt stack 0
  3174  011E00                     _EUSART2_Read:
  3175                           	opt stack 24
  3176                           
  3177                           ;eusart2.c: 132: uint8_t readValue = 0;
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;incstack = 0
  3181  011E00  0E00               	movlw	0
  3182  011E02  0100               	movlb	0	; () banked
  3183  011E04  6FB0               	movwf	EUSART2_Read@readValue& (0+255),b
  3184  011E06                     
  3185                           ; BSR set to: 0
  3186                           
  3187                           ;eusart2.c: 135: {
  3188                           
  3189                           ; BSR set to: 0
  3190  011E06  503D               	movf	_eusart2RxCount,w,c	;volatile
  3191  011E08  B4D8               	btfsc	status,2,c
  3192  011E0A  D7FD               	goto	l188
  3193                           
  3194                           ;eusart2.c: 136: }
  3195                           ;eusart2.c: 138: readValue = eusart2RxBuffer[eusart2RxTail++];
  3196  011E0C  503E               	movf	_eusart2RxTail,w,c	;volatile
  3197  011E0E  0D01               	mullw	1
  3198  011E10  0E00               	movlw	low _eusart2RxBuffer
  3199  011E12  24F3               	addwf	prodl,w,c
  3200  011E14  6ED9               	movwf	fsr2l,c
  3201  011E16  0E01               	movlw	high _eusart2RxBuffer
  3202  011E18  20F4               	addwfc	prodh,w,c
  3203  011E1A  6EDA               	movwf	fsr2h,c
  3204  011E1C  50DF               	movf	indf2,w,c
  3205  011E1E  0100               	movlb	0	; () banked
  3206  011E20  6FB0               	movwf	EUSART2_Read@readValue& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209  011E22  2A3E               	incf	_eusart2RxTail,f,c	;volatile
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;eusart2.c: 139: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  3213  011E24  0E3F               	movlw	63
  3214  011E26  643E               	cpfsgt	_eusart2RxTail,c	;volatile
  3215  011E28  D002               	goto	l190
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;eusart2.c: 140: {
  3219                           ;eusart2.c: 141: eusart2RxTail = 0;
  3220  011E2A  0E00               	movlw	0
  3221  011E2C  6E3E               	movwf	_eusart2RxTail,c	;volatile
  3222  011E2E                     l190:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;eusart2.c: 142: }
  3226                           ;eusart2.c: 143: PIE3bits.RC2IE = 0;
  3227                           
  3228                           ; BSR set to: 0
  3229  011E2E  010E               	movlb	14	; () banked
  3230  011E30  9F2C               	bcf	44,7,b	;volatile
  3231                           
  3232                           ; BSR set to: 14
  3233                           ;eusart2.c: 144: eusart2RxCount--;
  3234  011E32  063D               	decf	_eusart2RxCount,f,c	;volatile
  3235                           
  3236                           ; BSR set to: 14
  3237                           ;eusart2.c: 145: PIE3bits.RC2IE = 1;
  3238  011E34  8F2C               	bsf	44,7,b	;volatile
  3239                           
  3240                           ; BSR set to: 14
  3241                           ;eusart2.c: 147: return readValue;
  3242  011E36  0100               	movlb	0	; () banked
  3243  011E38  51B0               	movf	EUSART2_Read@readValue& (0+255),w,b
  3244  011E3A  0012               	return	
  3245  011E3C                     __end_of_EUSART2_Read:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodh	equ	0xFF4
  3252                           prodl	equ	0xFF3
  3253                           intcon	equ	0xFF2
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _printResetMessage *****************
  3265 ;; Defined at:
  3266 ;;		line 50 in file "ring_buffer_interface.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      void 
  3273 ;; Registers used:
  3274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;Total ram usage:        0 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    8
  3287 ;; This function calls:
  3288 ;;		_printf
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text7
  3295  011E78                     __ptext7:
  3296                           	opt stack 0
  3297  011E78                     _printResetMessage:
  3298                           	opt stack 22
  3299                           
  3300                           ;ring_buffer_interface.c: 53: printf("\033[2J");
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;incstack = 0
  3304  011E78  0EEE               	movlw	low STR_2
  3305  011E7A  0100               	movlb	0	; () banked
  3306  011E7C  6FBC               	movwf	printf@f& (0+255),b
  3307  011E7E  0EFF               	movlw	high STR_2
  3308  011E80  6FBD               	movwf	(printf@f+1)& (0+255),b
  3309  011E82  EC40  F085         	call	_printf	;wreg free
  3310                           
  3311                           ;ring_buffer_interface.c: 56: printf("\033[H");
  3312  011E86  0EF7               	movlw	low STR_3
  3313  011E88  0100               	movlb	0	; () banked
  3314  011E8A  6FBC               	movwf	printf@f& (0+255),b
  3315  011E8C  0EFF               	movlw	high STR_3
  3316  011E8E  6FBD               	movwf	(printf@f+1)& (0+255),b
  3317  011E90  EC40  F085         	call	_printf	;wreg free
  3318                           
  3319                           ;ring_buffer_interface.c: 59: printf("    Boot complete\n\r"
  3320                           ;ring_buffer_interface.c: 60: "   PIC18F67K40 mTouch Demo\n\r"
  3321                           ;ring_buffer_interface.c: 61: "   Sets the state of five LEDs based on mTouch capacitive
      +                           pushbuttons\n\r"
  3322                           ;ring_buffer_interface.c: 62: "   Baud rate: 115200 kbps\n\r"
  3323                           ;ring_buffer_interface.c: 63: "   No parity, 8 bits, no flow control, 1 stop bit\n\r"
  3324                           ;ring_buffer_interface.c: 64: "   Commands are case sensitive\n\r"
  3325                           ;ring_buffer_interface.c: 65: "   Enter a command, or enter Help for list of commands\n\
      +                          r");
  3326  011E94  0EFF               	movlw	low STR_4
  3327  011E96  0100               	movlb	0	; () banked
  3328  011E98  6FBC               	movwf	printf@f& (0+255),b
  3329  011E9A  0EFD               	movlw	high STR_4
  3330  011E9C  6FBD               	movwf	(printf@f+1)& (0+255),b
  3331  011E9E  EC40  F085         	call	_printf	;wreg free
  3332                           
  3333                           ;ring_buffer_interface.c: 69: printf("\n\r");
  3334  011EA2  0EA6               	movlw	low (STR_8+15)
  3335  011EA4  0100               	movlb	0	; () banked
  3336  011EA6  6FBC               	movwf	printf@f& (0+255),b
  3337  011EA8  0EFF               	movlw	high (STR_8+15)
  3338  011EAA  6FBD               	movwf	(printf@f+1)& (0+255),b
  3339  011EAC  EC40  F085         	call	_printf	;wreg free
  3340  011EB0  0012               	return		;funcret
  3341  011EB2                     __end_of_printResetMessage:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           postdec1	equ	0xFE5
  3353                           fsr1l	equ	0xFE1
  3354                           indf2	equ	0xFDF
  3355                           postinc2	equ	0xFDE
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _printf *****************
  3361 ;; Defined at:
  3362 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3365 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
  3366 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
  3367 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
  3368 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
  3369 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
  3370 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
  3371 ;;		 -> STR_4(285), STR_3(4), STR_2(5), STR_1(4), 
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;  tmpval          4    0        struct .
  3374 ;;  cp              3    0        PTR const unsigned char 
  3375 ;;  val             2   21[BANK0 ] unsigned int 
  3376 ;;  ap              2   17[BANK0 ] PTR void [1]
  3377 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3378 ;;  len             2    0        unsigned int 
  3379 ;;  c               1   23[BANK0 ] char 
  3380 ;;  prec            1   20[BANK0 ] char 
  3381 ;;  flag            1   19[BANK0 ] unsigned char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   12[BANK0 ] int 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3392 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3394 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3395 ;;Total ram usage:       12 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    7
  3398 ;; This function calls:
  3399 ;;		___lwdiv
  3400 ;;		___lwmod
  3401 ;;		_putch
  3402 ;; This function is called by:
  3403 ;;		_printResetMessage
  3404 ;;		_ringBufferLUT
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text8
  3409  010A80                     __ptext8:
  3410                           	opt stack 0
  3411  010A80                     _printf:
  3412                           	opt stack 21
  3413                           
  3414                           ;doprnt.c: 466: va_list ap;
  3415                           ;doprnt.c: 499: signed char c;
  3416                           ;doprnt.c: 506: signed char prec;
  3417                           ;doprnt.c: 508: unsigned char flag;
  3418                           ;doprnt.c: 523: union {
  3419                           ;doprnt.c: 524: unsigned long vd;
  3420                           ;doprnt.c: 525: double integ;
  3421                           ;doprnt.c: 526: } tmpval;
  3422                           ;doprnt.c: 528: unsigned int val;
  3423                           ;doprnt.c: 529: unsigned len;
  3424                           ;doprnt.c: 530: const char * cp;
  3425                           ;doprnt.c: 533: *ap = __va_start();
  3426                           
  3427                           ;incstack = 0
  3428  010A80  0EBE               	movlw	low (?_printf+2)
  3429  010A82  0100               	movlb	0	; () banked
  3430  010A84  6FC1               	movwf	printf@ap& (0+255),b
  3431  010A86  0E00               	movlw	high (?_printf+2)
  3432  010A88  6FC2               	movwf	(printf@ap+1)& (0+255),b
  3433                           
  3434                           ;doprnt.c: 536: while(c = *f++) {
  3435  010A8A  D08A               	goto	u5180
  3436  010A8C                     
  3437                           ; BSR set to: 0
  3438                           ;doprnt.c: 538: if(c != '%')
  3439                           
  3440                           ; BSR set to: 0
  3441  010A8C  0E25               	movlw	37
  3442  010A8E  19C7               	xorwf	printf@c& (0+255),w,b
  3443  010A90  B4D8               	btfsc	status,2,c
  3444  010A92  D004               	goto	l974
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;doprnt.c: 540: {
  3448                           ;doprnt.c: 541: (putch(c) );
  3449  010A94  51C7               	movf	printf@c& (0+255),w,b
  3450  010A96  EC0B  F092         	call	_putch
  3451                           
  3452                           ;doprnt.c: 542: continue;
  3453  010A9A  D082               	goto	u5180
  3454  010A9C                     l974:
  3455                           
  3456                           ;doprnt.c: 543: }
  3457                           ;doprnt.c: 548: flag = 0;
  3458  010A9C  0E00               	movlw	0
  3459  010A9E  0100               	movlb	0	; () banked
  3460  010AA0  6FC3               	movwf	printf@flag& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463                           
  3464                           ; BSR set to: 0
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;doprnt.c: 822: }
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;doprnt.c: 813: continue;
  3471                           
  3472                           ;doprnt.c: 802: default:
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;doprnt.c: 698: case 'i':
  3476                           ;doprnt.c: 699: break;
  3477                           
  3478                           ; BSR set to: 0
  3479                           
  3480                           ;doprnt.c: 697: case 'd':
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;doprnt.c: 638: goto alldone;
  3484                           
  3485                           ;doprnt.c: 637: case 0:
  3486                           
  3487                           ;doprnt.c: 635: switch(c = *f++) {
  3488  010AA2  C0BC  FFF6         	movff	printf@f,tblptrl
  3489  010AA6  C0BD  FFF7         	movff	printf@f+1,tblptrh
  3490  010AAA  4BBC               	infsnz	printf@f& (0+255),f,b
  3491  010AAC  2BBD               	incf	(printf@f+1)& (0+255),f,b
  3492  010AAE                     	if	0	;tblptru may be non-zero
  3493  010AAE                     	endif
  3494  010AAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3495  010AAE  0E00               	movlw	low (__mediumconst shr (0+16))
  3496  010AB0  6EF8               	movwf	tblptru,c
  3497  010AB2                     	endif
  3498  010AB2  0008               	tblrd		*
  3499  010AB4  CFF5 F0C7          	movff	tablat,printf@c
  3500  010AB8  51C7               	movf	printf@c& (0+255),w,b
  3501                           
  3502                           ; Switch size 1, requested type "space"
  3503                           ; Number of cases is 3, Range of values is 0 to 105
  3504                           ; switch strategies available:
  3505                           ; Name         Instructions Cycles
  3506                           ; simple_byte           10     6 (average)
  3507                           ;	Chosen strategy is simple_byte
  3508  010ABA  0A00               	xorlw	0	; case 0
  3509  010ABC  B4D8               	btfsc	status,2,c
  3510  010ABE  0012               	return	
  3511  010AC0  0A64               	xorlw	100	; case 100
  3512  010AC2  B4D8               	btfsc	status,2,c
  3513  010AC4  D003               	goto	l980
  3514  010AC6  0A0D               	xorlw	13	; case 105
  3515  010AC8  A4D8               	btfss	status,2,c
  3516  010ACA  D06A               	goto	u5180
  3517  010ACC                     l980:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;doprnt.c: 1253: {
  3521                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3522                           
  3523                           ; BSR set to: 0
  3524  010ACC  C0C1  FFD9         	movff	printf@ap,fsr2l
  3525  010AD0  C0C2  FFDA         	movff	printf@ap+1,fsr2h
  3526  010AD4  CFDE F0C5          	movff	postinc2,printf@val
  3527  010AD8  CFDD F0C6          	movff	postdec2,printf@val+1
  3528                           
  3529                           ; BSR set to: 0
  3530  010ADC  0E02               	movlw	2
  3531  010ADE  27C1               	addwf	printf@ap& (0+255),f,b
  3532  010AE0  0E00               	movlw	0
  3533  010AE2  23C2               	addwfc	(printf@ap+1)& (0+255),f,b
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;doprnt.c: 1261: if((int)val < 0) {
  3537  010AE4  AFC6               	btfss	(printf@val+1)& (0+255),7,b
  3538  010AE6  D006               	goto	l982
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1262: flag |= 0x03;
  3542  010AE8  0E03               	movlw	3
  3543  010AEA  13C3               	iorwf	printf@flag& (0+255),f,b
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 1263: val = -val;
  3547  010AEC  6DC5               	negf	printf@val& (0+255),b
  3548  010AEE  1FC6               	comf	(printf@val+1)& (0+255),f,b
  3549  010AF0  B0D8               	btfsc	status,0,c
  3550  010AF2  2BC6               	incf	(printf@val+1)& (0+255),f,b
  3551  010AF4                     l982:
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;doprnt.c: 1264: }
  3555                           ;doprnt.c: 1266: }
  3556                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3557                           
  3558                           ; BSR set to: 0
  3559  010AF4  0E01               	movlw	1
  3560  010AF6  6FC7               	movwf	printf@c& (0+255),b
  3561  010AF8                     l4753:
  3562                           
  3563                           ; BSR set to: 0
  3564  010AF8  0E05               	movlw	5
  3565  010AFA  19C7               	xorwf	printf@c& (0+255),w,b
  3566  010AFC  B4D8               	btfsc	status,2,c
  3567  010AFE  D015               	goto	u5160
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;doprnt.c: 1306: if(val < dpowers[c])
  3571                           
  3572                           ; BSR set to: 0
  3573                           
  3574                           ; BSR set to: 0
  3575  010B00  51C7               	movf	printf@c& (0+255),w,b
  3576  010B02  0D02               	mullw	2
  3577  010B04  0E1B               	movlw	low _dpowers
  3578  010B06  24F3               	addwf	prodl,w,c
  3579  010B08  6EF6               	movwf	tblptrl,c
  3580  010B0A  0EFC               	movlw	high _dpowers
  3581  010B0C  20F4               	addwfc	prodh,w,c
  3582  010B0E  6EF7               	movwf	tblptrh,c
  3583  010B10                     	if	1	;There are 3 active tblptr bytes
  3584  010B10  6AF8               	clrf	tblptru,c
  3585  010B12  0E00               	movlw	low (__mediumconst shr (0+16))
  3586  010B14  22F8               	addwfc	tblptru,f,c
  3587  010B16                     	endif
  3588  010B16  0009               	tblrd		*+
  3589  010B18  50F5               	movf	tablat,w,c
  3590  010B1A  5DC5               	subwf	printf@val& (0+255),w,b
  3591  010B1C  0009               	tblrd		*+
  3592  010B1E  50F5               	movf	tablat,w,c
  3593  010B20  59C6               	subwfb	(printf@val+1)& (0+255),w,b
  3594  010B22  A0D8               	btfss	status,0,c
  3595  010B24  D002               	goto	u5160
  3596                           
  3597                           ; BSR set to: 0
  3598                           
  3599                           ; BSR set to: 0
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;doprnt.c: 1307: break;
  3603  010B26  2BC7               	incf	printf@c& (0+255),f,b
  3604  010B28  D7E7               	goto	l4753
  3605  010B2A                     u5160:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;doprnt.c: 1422: {
  3609                           ;doprnt.c: 1438: if(flag & 0x03)
  3610                           
  3611                           ; BSR set to: 0
  3612  010B2A  C0C3  F0C0         	movff	printf@flag,??_printf
  3613  010B2E  0E03               	movlw	3
  3614  010B30  17C0               	andwf	??_printf& (0+255),f,b
  3615  010B32  B4D8               	btfsc	status,2,c
  3616  010B34  D003               	goto	l986
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;doprnt.c: 1439: (putch('-') );
  3620  010B36  0E2D               	movlw	45
  3621  010B38  EC0B  F092         	call	_putch
  3622  010B3C                     l986:
  3623                           
  3624                           ;doprnt.c: 1469: }
  3625                           ;doprnt.c: 1472: prec = c;
  3626  010B3C  C0C7  F0C4         	movff	printf@c,printf@prec
  3627                           
  3628                           ;doprnt.c: 1474: while(prec--) {
  3629  010B40  D02A               	goto	l987
  3630  010B42                     
  3631                           ;doprnt.c: 1478: {
  3632                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3633  010B42  0100               	movlb	0	; () banked
  3634  010B44  51C4               	movf	printf@prec& (0+255),w,b
  3635  010B46  0D02               	mullw	2
  3636  010B48  0E1B               	movlw	low _dpowers
  3637  010B4A  24F3               	addwf	prodl,w,c
  3638  010B4C  6EF6               	movwf	tblptrl,c
  3639  010B4E  0EFC               	movlw	high _dpowers
  3640  010B50  20F4               	addwfc	prodh,w,c
  3641  010B52  6EF7               	movwf	tblptrh,c
  3642  010B54                     	if	1	;There are 3 active tblptr bytes
  3643  010B54  6AF8               	clrf	tblptru,c
  3644  010B56  0E00               	movlw	low (__mediumconst shr (0+16))
  3645  010B58  22F8               	addwfc	tblptru,f,c
  3646  010B5A                     	endif
  3647  010B5A  0009               	tblrd		*+
  3648  010B5C  CFF5 F0B2          	movff	tablat,___lwdiv@divisor
  3649  010B60  000A               	tblrd		*-
  3650  010B62  CFF5 F0B3          	movff	tablat,___lwdiv@divisor+1
  3651  010B66  C0C5  F0B0         	movff	printf@val,___lwdiv@dividend
  3652  010B6A  C0C6  F0B1         	movff	printf@val+1,___lwdiv@dividend+1
  3653  010B6E  EC4B  F08D         	call	___lwdiv	;wreg free
  3654  010B72  C0B0  F0B7         	movff	?___lwdiv,___lwmod@dividend
  3655  010B76  C0B1  F0B8         	movff	?___lwdiv+1,___lwmod@dividend+1
  3656  010B7A  0E00               	movlw	0
  3657  010B7C  0100               	movlb	0	; () banked
  3658  010B7E  6FBA               	movwf	(___lwmod@divisor+1)& (0+255),b
  3659  010B80  0E0A               	movlw	10
  3660  010B82  6FB9               	movwf	___lwmod@divisor& (0+255),b
  3661  010B84  EC60  F08E         	call	___lwmod	;wreg free
  3662  010B88  0100               	movlb	0	; () banked
  3663  010B8A  51B7               	movf	?___lwmod& (0+255),w,b
  3664  010B8C  0F30               	addlw	48
  3665  010B8E  6FC7               	movwf	printf@c& (0+255),b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;doprnt.c: 1523: }
  3669                           ;doprnt.c: 1524: (putch(c) );
  3670  010B90  51C7               	movf	printf@c& (0+255),w,b
  3671  010B92  EC0B  F092         	call	_putch
  3672  010B96                     l987:
  3673  010B96  0100               	movlb	0	; () banked
  3674  010B98  07C4               	decf	printf@prec& (0+255),f,b
  3675  010B9A  29C4               	incf	printf@prec& (0+255),w,b
  3676  010B9C  A4D8               	btfss	status,2,c
  3677  010B9E  D7D1               	goto	l988
  3678  010BA0                     u5180:
  3679                           
  3680                           ; BSR set to: 0
  3681                           
  3682                           ; BSR set to: 0
  3683  010BA0  C0BC  FFF6         	movff	printf@f,tblptrl
  3684  010BA4  C0BD  FFF7         	movff	printf@f+1,tblptrh
  3685  010BA8  0100               	movlb	0	; () banked
  3686  010BAA  4BBC               	infsnz	printf@f& (0+255),f,b
  3687  010BAC  2BBD               	incf	(printf@f+1)& (0+255),f,b
  3688  010BAE                     	if	0	;tblptru may be non-zero
  3689  010BAE                     	endif
  3690  010BAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3691  010BAE  0E00               	movlw	low (__mediumconst shr (0+16))
  3692  010BB0  6EF8               	movwf	tblptru,c
  3693  010BB2                     	endif
  3694  010BB2  0008               	tblrd		*
  3695  010BB4  CFF5 F0C7          	movff	tablat,printf@c
  3696  010BB8  51C7               	movf	printf@c& (0+255),w,b
  3697  010BBA  B4D8               	btfsc	status,2,c
  3698  010BBC  0012               	return	
  3699  010BBE  D766               	goto	l973
  3700  010BC0                     __end_of_printf:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           postdec1	equ	0xFE5
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           postdec2	equ	0xFDD
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _putch *****************
  3721 ;; Defined at:
  3722 ;;		line 178 in file "mcc_generated_files/eusart2.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  txData          1    wreg     unsigned char 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  txData          1    1[BANK0 ] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3740 ;;Total ram usage:        1 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    6
  3743 ;; This function calls:
  3744 ;;		_EUSART2_Write
  3745 ;; This function is called by:
  3746 ;;		_printf
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text9
  3751  012416                     __ptext9:
  3752                           	opt stack 0
  3753  012416                     _putch:
  3754                           	opt stack 21
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;incstack = 0
  3758                           ;putch@txData stored from wreg
  3759  012416  0100               	movlb	0	; () banked
  3760  012418  6FB1               	movwf	putch@txData& (0+255),b
  3761                           
  3762                           ;eusart2.c: 180: EUSART2_Write(txData);
  3763  01241A  0100               	movlb	0	; () banked
  3764  01241C  51B1               	movf	putch@txData& (0+255),w,b
  3765  01241E  ECC2  F08E         	call	_EUSART2_Write
  3766  012422  0012               	return		;funcret
  3767  012424                     __end_of_putch:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           intcon	equ	0xFF2
  3776                           postinc0	equ	0xFEE
  3777                           wreg	equ	0xFE8
  3778                           postdec1	equ	0xFE5
  3779                           fsr1l	equ	0xFE1
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _EUSART2_Write *****************
  3788 ;; Defined at:
  3789 ;;		line 150 in file "mcc_generated_files/eusart2.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  txData          1    wreg     unsigned char 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  txData          1    0[BANK0 ] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;Total ram usage:        1 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    5
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_putch
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text10
  3818  011D84                     __ptext10:
  3819                           	opt stack 0
  3820  011D84                     _EUSART2_Write:
  3821                           	opt stack 21
  3822                           
  3823                           ;incstack = 0
  3824                           ;EUSART2_Write@txData stored from wreg
  3825  011D84  0100               	movlb	0	; () banked
  3826  011D86  6FB0               	movwf	EUSART2_Write@txData& (0+255),b
  3827  011D88                     
  3828                           ;eusart2.c: 153: {
  3829                           
  3830                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
  3831  011D88  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  3832  011D8A  B4D8               	btfsc	status,2,c
  3833  011D8C  D7FD               	goto	l4355
  3834                           
  3835                           ;eusart2.c: 154: }
  3836                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
  3837  011D8E  010E               	movlb	14	; () banked
  3838  011D90  BD2C               	btfsc	44,6,b	;volatile
  3839  011D92  D003               	goto	l197
  3840                           
  3841                           ; BSR set to: 14
  3842                           ;eusart2.c: 157: {
  3843                           ;eusart2.c: 158: TX2REG = txData;
  3844  011D94  C0B0  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
  3845                           
  3846                           ;eusart2.c: 159: }
  3847  011D98  D012               	goto	l198
  3848  011D9A                     l197:
  3849                           
  3850                           ; BSR set to: 14
  3851                           ;eusart2.c: 160: else
  3852                           ;eusart2.c: 161: {
  3853                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
  3854  011D9A  9D2C               	bcf	44,6,b	;volatile
  3855                           
  3856                           ; BSR set to: 14
  3857                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
  3858  011D9C  5041               	movf	_eusart2TxHead,w,c	;volatile
  3859  011D9E  0D01               	mullw	1
  3860  011DA0  0E00               	movlw	low _eusart2TxBuffer
  3861  011DA2  24F3               	addwf	prodl,w,c
  3862  011DA4  6ED9               	movwf	fsr2l,c
  3863  011DA6  0E02               	movlw	high _eusart2TxBuffer
  3864  011DA8  20F4               	addwfc	prodh,w,c
  3865  011DAA  6EDA               	movwf	fsr2h,c
  3866  011DAC  C0B0  FFDF         	movff	EUSART2_Write@txData,indf2
  3867                           
  3868                           ; BSR set to: 14
  3869  011DB0  2A41               	incf	_eusart2TxHead,f,c	;volatile
  3870                           
  3871                           ; BSR set to: 14
  3872                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  3873  011DB2  0E3F               	movlw	63
  3874  011DB4  6441               	cpfsgt	_eusart2TxHead,c	;volatile
  3875  011DB6  D002               	goto	l199
  3876                           
  3877                           ; BSR set to: 14
  3878                           ;eusart2.c: 165: {
  3879                           ;eusart2.c: 166: eusart2TxHead = 0;
  3880  011DB8  0E00               	movlw	0
  3881  011DBA  6E41               	movwf	_eusart2TxHead,c	;volatile
  3882  011DBC                     l199:
  3883                           
  3884                           ; BSR set to: 14
  3885                           ;eusart2.c: 167: }
  3886                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
  3887                           
  3888                           ; BSR set to: 14
  3889  011DBC  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  3890  011DBE                     l198:
  3891                           
  3892                           ; BSR set to: 14
  3893                           ;eusart2.c: 169: }
  3894                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
  3895                           
  3896                           ; BSR set to: 14
  3897  011DBE  8D2C               	bsf	44,6,b	;volatile
  3898                           
  3899                           ; BSR set to: 14
  3900  011DC0  0012               	return		;funcret
  3901  011DC2                     __end_of_EUSART2_Write:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon	equ	0xFF2
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           postdec1	equ	0xFE5
  3913                           fsr1l	equ	0xFE1
  3914                           indf2	equ	0xFDF
  3915                           postinc2	equ	0xFDE
  3916                           postdec2	equ	0xFDD
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921 ;; *************** function ___lwmod *****************
  3922 ;; Defined at:
  3923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  dividend        2    7[BANK0 ] unsigned int 
  3926 ;;  divisor         2    9[BANK0 ] unsigned int 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;  counter         1   11[BANK0 ] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2    7[BANK0 ] unsigned int 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3941 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3942 ;;Total ram usage:        5 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    5
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_printf
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text11
  3953  011CC0                     __ptext11:
  3954                           	opt stack 0
  3955  011CC0                     ___lwmod:
  3956                           	opt stack 22
  3957                           
  3958                           ; BSR set to: 14
  3959                           ;incstack = 0
  3960  011CC0  0100               	movlb	0	; () banked
  3961  011CC2  51B9               	movf	___lwmod@divisor& (0+255),w,b
  3962  011CC4  11BA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3963  011CC6  B4D8               	btfsc	status,2,c
  3964  011CC8  D018               	goto	l1414
  3965                           
  3966                           ; BSR set to: 0
  3967  011CCA  0E01               	movlw	1
  3968  011CCC  6FBB               	movwf	___lwmod@counter& (0+255),b
  3969  011CCE  D004               	goto	l1409
  3970  011CD0                     
  3971                           ; BSR set to: 0
  3972                           
  3973                           ; BSR set to: 0
  3974  011CD0  90D8               	bcf	status,0,c
  3975  011CD2  37B9               	rlcf	___lwmod@divisor& (0+255),f,b
  3976  011CD4  37BA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3977  011CD6  2BBB               	incf	___lwmod@counter& (0+255),f,b
  3978  011CD8                     l1409:
  3979                           
  3980                           ; BSR set to: 0
  3981                           
  3982                           ; BSR set to: 0
  3983  011CD8  AFBA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3984  011CDA  D7FA               	goto	l1410
  3985  011CDC                     u5100:
  3986                           
  3987                           ; BSR set to: 0
  3988                           
  3989                           ; BSR set to: 0
  3990                           
  3991                           ; BSR set to: 0
  3992  011CDC  51B9               	movf	___lwmod@divisor& (0+255),w,b
  3993  011CDE  5DB7               	subwf	___lwmod@dividend& (0+255),w,b
  3994  011CE0  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3995  011CE2  59B8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3996  011CE4  A0D8               	btfss	status,0,c
  3997  011CE6  D004               	goto	l1413
  3998                           
  3999                           ; BSR set to: 0
  4000  011CE8  51B9               	movf	___lwmod@divisor& (0+255),w,b
  4001  011CEA  5FB7               	subwf	___lwmod@dividend& (0+255),f,b
  4002  011CEC  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4003  011CEE  5BB8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4004  011CF0                     l1413:
  4005                           
  4006                           ; BSR set to: 0
  4007                           
  4008                           ; BSR set to: 0
  4009  011CF0  90D8               	bcf	status,0,c
  4010  011CF2  33BA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4011  011CF4  33B9               	rrcf	___lwmod@divisor& (0+255),f,b
  4012                           
  4013                           ; BSR set to: 0
  4014  011CF6  2FBB               	decfsz	___lwmod@counter& (0+255),f,b
  4015  011CF8  D7F1               	goto	u5100
  4016  011CFA                     l1414:
  4017                           
  4018                           ; BSR set to: 0
  4019                           
  4020                           ; BSR set to: 0
  4021  011CFA  C0B7  F0B7         	movff	___lwmod@dividend,?___lwmod
  4022  011CFE  C0B8  F0B8         	movff	___lwmod@dividend+1,?___lwmod+1
  4023                           
  4024                           ; BSR set to: 0
  4025  011D02  0012               	return		;funcret
  4026  011D04                     __end_of___lwmod:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function ___lwdiv *****************
  4047 ;; Defined at:
  4048 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  dividend        2    0[BANK0 ] unsigned int 
  4051 ;;  divisor         2    2[BANK0 ] unsigned int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  quotient        2    5[BANK0 ] unsigned int 
  4054 ;;  counter         1    4[BANK0 ] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  2    0[BANK0 ] unsigned int 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;Total ram usage:        7 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    5
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_printf
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text12
  4079  011A96                     __ptext12:
  4080                           	opt stack 0
  4081  011A96                     ___lwdiv:
  4082                           	opt stack 22
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;incstack = 0
  4086  011A96  0E00               	movlw	0
  4087  011A98  0100               	movlb	0	; () banked
  4088  011A9A  6FB6               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4089  011A9C  0E00               	movlw	0
  4090  011A9E  6FB5               	movwf	___lwdiv@quotient& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093  011AA0  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4094  011AA2  11B3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4095  011AA4  B4D8               	btfsc	status,2,c
  4096  011AA6  D01C               	goto	l1404
  4097                           
  4098                           ; BSR set to: 0
  4099  011AA8  0E01               	movlw	1
  4100  011AAA  6FB4               	movwf	___lwdiv@counter& (0+255),b
  4101  011AAC  D004               	goto	l1399
  4102  011AAE                     
  4103                           ; BSR set to: 0
  4104                           
  4105                           ; BSR set to: 0
  4106  011AAE  90D8               	bcf	status,0,c
  4107  011AB0  37B2               	rlcf	___lwdiv@divisor& (0+255),f,b
  4108  011AB2  37B3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4109  011AB4  2BB4               	incf	___lwdiv@counter& (0+255),f,b
  4110  011AB6                     l1399:
  4111                           
  4112                           ; BSR set to: 0
  4113                           
  4114                           ; BSR set to: 0
  4115  011AB6  AFB3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4116  011AB8  D7FA               	goto	l1400
  4117  011ABA                     u5070:
  4118                           
  4119                           ; BSR set to: 0
  4120                           
  4121                           ; BSR set to: 0
  4122                           
  4123                           ; BSR set to: 0
  4124  011ABA  90D8               	bcf	status,0,c
  4125  011ABC  37B5               	rlcf	___lwdiv@quotient& (0+255),f,b
  4126  011ABE  37B6               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4127                           
  4128                           ; BSR set to: 0
  4129  011AC0  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4130  011AC2  5DB0               	subwf	___lwdiv@dividend& (0+255),w,b
  4131  011AC4  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4132  011AC6  59B1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4133  011AC8  A0D8               	btfss	status,0,c
  4134  011ACA  D005               	goto	l1403
  4135                           
  4136                           ; BSR set to: 0
  4137  011ACC  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4138  011ACE  5FB0               	subwf	___lwdiv@dividend& (0+255),f,b
  4139  011AD0  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4140  011AD2  5BB1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4141                           
  4142                           ; BSR set to: 0
  4143  011AD4  81B5               	bsf	___lwdiv@quotient& (0+255),0,b
  4144  011AD6                     l1403:
  4145                           
  4146                           ; BSR set to: 0
  4147                           
  4148                           ; BSR set to: 0
  4149  011AD6  90D8               	bcf	status,0,c
  4150  011AD8  33B3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4151  011ADA  33B2               	rrcf	___lwdiv@divisor& (0+255),f,b
  4152                           
  4153                           ; BSR set to: 0
  4154  011ADC  2FB4               	decfsz	___lwdiv@counter& (0+255),f,b
  4155  011ADE  D7ED               	goto	u5070
  4156  011AE0                     l1404:
  4157                           
  4158                           ; BSR set to: 0
  4159                           
  4160                           ; BSR set to: 0
  4161  011AE0  C0B5  F0B0         	movff	___lwdiv@quotient,?___lwdiv
  4162  011AE4  C0B6  F0B1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4163                           
  4164                           ; BSR set to: 0
  4165  011AE8  0012               	return		;funcret
  4166  011AEA                     __end_of___lwdiv:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           postdec1	equ	0xFE5
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _SYSTEM_Initialize *****************
  4187 ;; Defined at:
  4188 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;Total ram usage:        0 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    9
  4209 ;; This function calls:
  4210 ;;		_EUSART2_Initialize
  4211 ;;		_INTERRUPT_Initialize
  4212 ;;		_MTOUCH_Initialize
  4213 ;;		_OSCILLATOR_Initialize
  4214 ;;		_PIN_MANAGER_Initialize
  4215 ;;		_PMD_Initialize
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text13
  4222  01230E                     __ptext13:
  4223                           	opt stack 0
  4224  01230E                     _SYSTEM_Initialize:
  4225                           	opt stack 21
  4226                           
  4227                           ;mcc.c: 52: INTERRUPT_Initialize();
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;incstack = 0
  4231  01230E  EC26  F092         	call	_INTERRUPT_Initialize	;wreg free
  4232                           
  4233                           ;mcc.c: 53: PMD_Initialize();
  4234  012312  EC79  F091         	call	_PMD_Initialize	;wreg free
  4235                           
  4236                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4237  012316  EC4E  F08B         	call	_PIN_MANAGER_Initialize	;wreg free
  4238                           
  4239                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4240  01231A  ECBB  F091         	call	_OSCILLATOR_Initialize	;wreg free
  4241                           
  4242                           ;mcc.c: 56: EUSART2_Initialize();
  4243  01231E  EC1C  F08D         	call	_EUSART2_Initialize	;wreg free
  4244                           
  4245                           ;mcc.c: 57: MTOUCH_Initialize();
  4246  012322  ECDF  F091         	call	_MTOUCH_Initialize	;wreg free
  4247  012326  0012               	return		;funcret
  4248  012328                     __end_of_SYSTEM_Initialize:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           prodh	equ	0xFF4
  4255                           prodl	equ	0xFF3
  4256                           intcon	equ	0xFF2
  4257                           postinc0	equ	0xFEE
  4258                           wreg	equ	0xFE8
  4259                           postdec1	equ	0xFE5
  4260                           fsr1l	equ	0xFE1
  4261                           indf2	equ	0xFDF
  4262                           postinc2	equ	0xFDE
  4263                           postdec2	equ	0xFDD
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _PMD_Initialize *****************
  4269 ;; Defined at:
  4270 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      void 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4288 ;;Total ram usage:        0 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    5
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_SYSTEM_Initialize
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text14
  4299  0122F2                     __ptext14:
  4300                           	opt stack 0
  4301  0122F2                     _PMD_Initialize:
  4302                           	opt stack 24
  4303                           
  4304                           ;mcc.c: 77: PMD0 = 0x00;
  4305                           
  4306                           ;incstack = 0
  4307  0122F2  0E00               	movlw	0
  4308  0122F4  010E               	movlb	14	; () banked
  4309  0122F6  6F4C               	movwf	76,b	;volatile
  4310                           
  4311                           ;mcc.c: 79: PMD1 = 0x00;
  4312  0122F8  0E00               	movlw	0
  4313  0122FA  6F4D               	movwf	77,b	;volatile
  4314                           
  4315                           ;mcc.c: 81: PMD2 = 0x00;
  4316  0122FC  0E00               	movlw	0
  4317  0122FE  6F4E               	movwf	78,b	;volatile
  4318                           
  4319                           ;mcc.c: 83: PMD3 = 0x00;
  4320  012300  0E00               	movlw	0
  4321  012302  6F4F               	movwf	79,b	;volatile
  4322                           
  4323                           ;mcc.c: 85: PMD4 = 0x00;
  4324  012304  0E00               	movlw	0
  4325  012306  6F50               	movwf	80,b	;volatile
  4326                           
  4327                           ;mcc.c: 87: PMD5 = 0x00;
  4328  012308  0E00               	movlw	0
  4329  01230A  6F51               	movwf	81,b	;volatile
  4330                           
  4331                           ; BSR set to: 14
  4332  01230C  0012               	return		;funcret
  4333  01230E                     __end_of_PMD_Initialize:
  4334                           	opt stack 0
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           intcon	equ	0xFF2
  4342                           postinc0	equ	0xFEE
  4343                           wreg	equ	0xFE8
  4344                           postdec1	equ	0xFE5
  4345                           fsr1l	equ	0xFE1
  4346                           indf2	equ	0xFDF
  4347                           postinc2	equ	0xFDE
  4348                           postdec2	equ	0xFDD
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function _PIN_MANAGER_Initialize *****************
  4354 ;; Defined at:
  4355 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4373 ;;Total ram usage:        0 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    5
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_SYSTEM_Initialize
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text15
  4384  01169C                     __ptext15:
  4385                           	opt stack 0
  4386  01169C                     _PIN_MANAGER_Initialize:
  4387                           	opt stack 24
  4388                           
  4389                           ;pin_manager.c: 62: LATE = 0x00;
  4390                           
  4391                           ; BSR set to: 14
  4392                           ;incstack = 0
  4393  01169C  0E00               	movlw	0
  4394  01169E  6E7D               	movwf	3965,c	;volatile
  4395                           
  4396                           ;pin_manager.c: 63: LATD = 0x00;
  4397  0116A0  0E00               	movlw	0
  4398  0116A2  6E7C               	movwf	3964,c	;volatile
  4399                           
  4400                           ;pin_manager.c: 64: LATA = 0x00;
  4401  0116A4  0E00               	movlw	0
  4402  0116A6  6E79               	movwf	3961,c	;volatile
  4403                           
  4404                           ;pin_manager.c: 65: LATF = 0x1F;
  4405  0116A8  0E1F               	movlw	31
  4406  0116AA  6E7E               	movwf	3966,c	;volatile
  4407                           
  4408                           ;pin_manager.c: 66: LATB = 0x00;
  4409  0116AC  0E00               	movlw	0
  4410  0116AE  6E7A               	movwf	3962,c	;volatile
  4411                           
  4412                           ;pin_manager.c: 67: LATG = 0x00;
  4413  0116B0  0E00               	movlw	0
  4414  0116B2  6E7F               	movwf	3967,c	;volatile
  4415                           
  4416                           ;pin_manager.c: 68: LATC = 0x00;
  4417  0116B4  0E00               	movlw	0
  4418  0116B6  6E7B               	movwf	3963,c	;volatile
  4419                           
  4420                           ;pin_manager.c: 69: LATH = 0x00;
  4421  0116B8  0E00               	movlw	0
  4422  0116BA  6E80               	movwf	3968,c	;volatile
  4423                           
  4424                           ;pin_manager.c: 74: TRISE = 0xFF;
  4425  0116BC  6885               	setf	3973,c	;volatile
  4426                           
  4427                           ;pin_manager.c: 75: TRISF = 0xE0;
  4428  0116BE  0EE0               	movlw	224
  4429  0116C0  6E86               	movwf	3974,c	;volatile
  4430                           
  4431                           ;pin_manager.c: 76: TRISA = 0xFF;
  4432  0116C2  6881               	setf	3969,c	;volatile
  4433                           
  4434                           ;pin_manager.c: 77: TRISG = 0x5F;
  4435  0116C4  0E5F               	movlw	95
  4436  0116C6  6E87               	movwf	3975,c	;volatile
  4437                           
  4438                           ;pin_manager.c: 78: TRISB = 0xFF;
  4439  0116C8  6882               	setf	3970,c	;volatile
  4440                           
  4441                           ;pin_manager.c: 79: TRISH = 0x0F;
  4442  0116CA  0E0F               	movlw	15
  4443  0116CC  6E88               	movwf	3976,c	;volatile
  4444                           
  4445                           ;pin_manager.c: 80: TRISC = 0xFF;
  4446  0116CE  6883               	setf	3971,c	;volatile
  4447                           
  4448                           ;pin_manager.c: 81: TRISD = 0xFF;
  4449  0116D0  6884               	setf	3972,c	;volatile
  4450                           
  4451                           ;pin_manager.c: 86: ANSELD = 0xFF;
  4452  0116D2  010E               	movlb	14	; () banked
  4453  0116D4  69A7               	setf	167,b	;volatile
  4454                           
  4455                           ; BSR set to: 14
  4456                           ;pin_manager.c: 87: ANSELB = 0xFF;
  4457  0116D6  699A               	setf	154,b	;volatile
  4458                           
  4459                           ; BSR set to: 14
  4460                           ;pin_manager.c: 88: ANSELE = 0xFF;
  4461  0116D8  69AF               	setf	175,b	;volatile
  4462                           
  4463                           ;pin_manager.c: 89: ANSELG = 0xBF;
  4464  0116DA  0EBF               	movlw	191
  4465  0116DC  6FBC               	movwf	188,b	;volatile
  4466                           
  4467                           ;pin_manager.c: 90: ANSELF = 0xE0;
  4468  0116DE  0EE0               	movlw	224
  4469  0116E0  6FB4               	movwf	180,b	;volatile
  4470                           
  4471                           ; BSR set to: 14
  4472                           ;pin_manager.c: 91: ANSELA = 0xFF;
  4473  0116E2  6992               	setf	146,b	;volatile
  4474                           
  4475                           ;pin_manager.c: 96: WPUD = 0x00;
  4476  0116E4  0E00               	movlw	0
  4477  0116E6  6FA6               	movwf	166,b	;volatile
  4478                           
  4479                           ;pin_manager.c: 97: WPUF = 0x00;
  4480  0116E8  0E00               	movlw	0
  4481  0116EA  6FB3               	movwf	179,b	;volatile
  4482                           
  4483                           ;pin_manager.c: 98: WPUE = 0x00;
  4484  0116EC  0E00               	movlw	0
  4485  0116EE  6FAE               	movwf	174,b	;volatile
  4486                           
  4487                           ;pin_manager.c: 99: WPUB = 0x00;
  4488  0116F0  0E00               	movlw	0
  4489  0116F2  6F99               	movwf	153,b	;volatile
  4490                           
  4491                           ;pin_manager.c: 100: WPUG = 0x00;
  4492  0116F4  0E00               	movlw	0
  4493  0116F6  6FBB               	movwf	187,b	;volatile
  4494                           
  4495                           ;pin_manager.c: 101: WPUA = 0x00;
  4496  0116F8  0E00               	movlw	0
  4497  0116FA  6F91               	movwf	145,b	;volatile
  4498                           
  4499                           ;pin_manager.c: 102: WPUC = 0x00;
  4500  0116FC  0E00               	movlw	0
  4501  0116FE  6FA1               	movwf	161,b	;volatile
  4502                           
  4503                           ;pin_manager.c: 103: WPUH = 0x00;
  4504  011700  0E00               	movlw	0
  4505  011702  6FC0               	movwf	192,b	;volatile
  4506                           
  4507                           ;pin_manager.c: 108: ODCONE = 0x00;
  4508  011704  0E00               	movlw	0
  4509  011706  6FAD               	movwf	173,b	;volatile
  4510                           
  4511                           ;pin_manager.c: 109: ODCONF = 0x1F;
  4512  011708  0E1F               	movlw	31
  4513  01170A  6FB2               	movwf	178,b	;volatile
  4514                           
  4515                           ;pin_manager.c: 110: ODCONA = 0x00;
  4516  01170C  0E00               	movlw	0
  4517  01170E  6F90               	movwf	144,b	;volatile
  4518                           
  4519                           ;pin_manager.c: 111: ODCONG = 0x00;
  4520  011710  0E00               	movlw	0
  4521  011712  6FBA               	movwf	186,b	;volatile
  4522                           
  4523                           ;pin_manager.c: 112: ODCONB = 0x00;
  4524  011714  0E00               	movlw	0
  4525  011716  6F98               	movwf	152,b	;volatile
  4526                           
  4527                           ;pin_manager.c: 113: ODCONH = 0x00;
  4528  011718  0E00               	movlw	0
  4529  01171A  6FBF               	movwf	191,b	;volatile
  4530                           
  4531                           ;pin_manager.c: 114: ODCONC = 0x00;
  4532  01171C  0E00               	movlw	0
  4533  01171E  6FA0               	movwf	160,b	;volatile
  4534                           
  4535                           ;pin_manager.c: 115: ODCOND = 0x00;
  4536  011720  0E00               	movlw	0
  4537  011722  6FA5               	movwf	165,b	;volatile
  4538                           
  4539                           ;pin_manager.c: 124: RG7PPS = 0x0E;
  4540  011724  0E0E               	movlw	14
  4541  011726  6F89               	movwf	137,b	;volatile
  4542                           
  4543                           ; BSR set to: 14
  4544                           ;pin_manager.c: 125: RX2PPSbits.RX2PPS = 0x36;
  4545  011728  9111               	bcf	17,0,b	;volatile
  4546  01172A  8311               	bsf	17,1,b	;volatile
  4547  01172C  8511               	bsf	17,2,b	;volatile
  4548  01172E  9711               	bcf	17,3,b	;volatile
  4549  011730  8911               	bsf	17,4,b	;volatile
  4550  011732  8B11               	bsf	17,5,b	;volatile
  4551                           
  4552                           ; BSR set to: 14
  4553  011734  0012               	return		;funcret
  4554  011736                     __end_of_PIN_MANAGER_Initialize:
  4555                           	opt stack 0
  4556                           tblptru	equ	0xFF8
  4557                           tblptrh	equ	0xFF7
  4558                           tblptrl	equ	0xFF6
  4559                           tablat	equ	0xFF5
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           postinc0	equ	0xFEE
  4564                           wreg	equ	0xFE8
  4565                           postdec1	equ	0xFE5
  4566                           fsr1l	equ	0xFE1
  4567                           indf2	equ	0xFDF
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _OSCILLATOR_Initialize *****************
  4575 ;; Defined at:
  4576 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4594 ;;Total ram usage:        0 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    5
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_SYSTEM_Initialize
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text16
  4605  012376                     __ptext16:
  4606                           	opt stack 0
  4607  012376                     _OSCILLATOR_Initialize:
  4608                           	opt stack 24
  4609                           
  4610                           ;mcc.c: 63: OSCCON1 = 0x60;
  4611                           
  4612                           ; BSR set to: 14
  4613                           ;incstack = 0
  4614  012376  0E60               	movlw	96
  4615  012378  010E               	movlb	14	; () banked
  4616  01237A  6F43               	movwf	67,b	;volatile
  4617                           
  4618                           ;mcc.c: 65: OSCCON3 = 0x00;
  4619  01237C  0E00               	movlw	0
  4620  01237E  6F45               	movwf	69,b	;volatile
  4621                           
  4622                           ;mcc.c: 67: OSCEN = 0x00;
  4623  012380  0E00               	movlw	0
  4624  012382  6F47               	movwf	71,b	;volatile
  4625                           
  4626                           ;mcc.c: 69: OSCFRQ = 0x08;
  4627  012384  0E08               	movlw	8
  4628  012386  6F49               	movwf	73,b	;volatile
  4629                           
  4630                           ;mcc.c: 71: OSCTUNE = 0x00;
  4631  012388  0E00               	movlw	0
  4632  01238A  6F48               	movwf	72,b	;volatile
  4633                           
  4634                           ; BSR set to: 14
  4635  01238C  0012               	return		;funcret
  4636  01238E                     __end_of_OSCILLATOR_Initialize:
  4637                           	opt stack 0
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           intcon	equ	0xFF2
  4645                           postinc0	equ	0xFEE
  4646                           wreg	equ	0xFE8
  4647                           postdec1	equ	0xFE5
  4648                           fsr1l	equ	0xFE1
  4649                           indf2	equ	0xFDF
  4650                           postinc2	equ	0xFDE
  4651                           postdec2	equ	0xFDD
  4652                           fsr2h	equ	0xFDA
  4653                           fsr2l	equ	0xFD9
  4654                           status	equ	0xFD8
  4655                           
  4656 ;; *************** function _MTOUCH_Initialize *****************
  4657 ;; Defined at:
  4658 ;;		line 75 in file "mcc_generated_files/mtouch/mtouch.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;Total ram usage:        0 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    8
  4679 ;; This function calls:
  4680 ;;		_MTOUCH_Button_InitializeAll
  4681 ;;		_MTOUCH_Sensor_InitializeAll
  4682 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4683 ;;		_MTOUCH_Sensor_Scan_Initialize
  4684 ;; This function is called by:
  4685 ;;		_SYSTEM_Initialize
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text17
  4690  0123BE                     __ptext17:
  4691                           	opt stack 0
  4692  0123BE                     _MTOUCH_Initialize:
  4693                           	opt stack 21
  4694                           
  4695                           ;mtouch.c: 77: MTOUCH_Sensor_InitializeAll();
  4696                           
  4697                           ; BSR set to: 14
  4698                           ;incstack = 0
  4699  0123BE  EC75  F08F         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  4700                           
  4701                           ;mtouch.c: 78: MTOUCH_Button_InitializeAll();
  4702  0123C2  EC91  F08F         	call	_MTOUCH_Button_InitializeAll	;wreg free
  4703                           
  4704                           ;mtouch.c: 79: MTOUCH_Sensor_Sampled_ResetAll();
  4705  0123C6  EC62  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  4706                           
  4707                           ;mtouch.c: 80: MTOUCH_Sensor_Scan_Initialize();
  4708  0123CA  EC40  F092         	call	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  4709  0123CE  0012               	return		;funcret
  4710  0123D0                     __end_of_MTOUCH_Initialize:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  4731 ;; Defined at:
  4732 ;;		line 327 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;		None
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4750 ;;Total ram usage:        0 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    6
  4753 ;; This function calls:
  4754 ;;		_MTOUCH_Sensor_ADCC_Initialize
  4755 ;; This function is called by:
  4756 ;;		_MTOUCH_Initialize
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text18
  4761  012480                     __ptext18:
  4762                           	opt stack 0
  4763  012480                     _MTOUCH_Sensor_Scan_Initialize:
  4764                           	opt stack 22
  4765                           
  4766                           ;mtouch_sensor.c: 329: MTOUCH_Sensor_ADCC_Initialize();
  4767                           
  4768                           ;incstack = 0
  4769  012480  ECE1  F08E         	call	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  4770  012484  0012               	return		;funcret
  4771  012486                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           postdec1	equ	0xFE5
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  4792 ;; Defined at:
  4793 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    5
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_MTOUCH_Sensor_Scan_Initialize
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text19
  4822  011DC2                     __ptext19:
  4823                           	opt stack 0
  4824  011DC2                     _MTOUCH_Sensor_ADCC_Initialize:
  4825                           	opt stack 22
  4826                           
  4827                           ;mtouch_sensor.c: 254: ADCLK = 0x1f;
  4828                           
  4829                           ;incstack = 0
  4830  011DC2  0E1F               	movlw	31
  4831  011DC4  010F               	movlb	15	; () banked
  4832  011DC6  6F57               	movwf	87,b	;volatile
  4833                           
  4834                           ;mtouch_sensor.c: 256: ADREF = 0x00;
  4835  011DC8  0E00               	movlw	0
  4836  011DCA  6F58               	movwf	88,b	;volatile
  4837                           
  4838                           ;mtouch_sensor.c: 258: ADCAP = 0x00;
  4839  011DCC  0E00               	movlw	0
  4840  011DCE  6F5D               	movwf	93,b	;volatile
  4841                           
  4842                           ;mtouch_sensor.c: 260: ADLTHL = 0x00;
  4843  011DD0  0E00               	movlw	0
  4844  011DD2  6E6A               	movwf	3946,c	;volatile
  4845                           
  4846                           ;mtouch_sensor.c: 262: ADLTHH = 0x00;
  4847  011DD4  0E00               	movlw	0
  4848  011DD6  6E6B               	movwf	3947,c	;volatile
  4849                           
  4850                           ;mtouch_sensor.c: 264: ADUTHL = 0x00;
  4851  011DD8  0E00               	movlw	0
  4852  011DDA  6E6C               	movwf	3948,c	;volatile
  4853                           
  4854                           ;mtouch_sensor.c: 266: ADUTHH = 0x00;
  4855  011DDC  0E00               	movlw	0
  4856  011DDE  6E6D               	movwf	3949,c	;volatile
  4857                           
  4858                           ;mtouch_sensor.c: 268: ADSTPTL = 0x00;
  4859  011DE0  0E00               	movlw	0
  4860  011DE2  6E68               	movwf	3944,c	;volatile
  4861                           
  4862                           ;mtouch_sensor.c: 270: ADSTPTH = 0x00;
  4863  011DE4  0E00               	movlw	0
  4864  011DE6  6E69               	movwf	3945,c	;volatile
  4865                           
  4866                           ;mtouch_sensor.c: 273: ADCON1 = 0x41;
  4867  011DE8  0E41               	movlw	65
  4868  011DEA  6F59               	movwf	89,b	;volatile
  4869                           
  4870                           ;mtouch_sensor.c: 275: ADCON2 = 0x8B;
  4871  011DEC  0E8B               	movlw	139
  4872  011DEE  6F5A               	movwf	90,b	;volatile
  4873                           
  4874                           ;mtouch_sensor.c: 278: ADCON3 = 0x0F;
  4875  011DF0  0E0F               	movlw	15
  4876  011DF2  6F5B               	movwf	91,b	;volatile
  4877                           
  4878                           ;mtouch_sensor.c: 281: ADCON0 = 0xC4;
  4879  011DF4  0EC4               	movlw	196
  4880  011DF6  6E60               	movwf	3936,c	;volatile
  4881                           
  4882                           ; BSR set to: 15
  4883                           ;mtouch_sensor.c: 284: PIR1bits.ADTIF = 0;
  4884  011DF8  010E               	movlb	14	; () banked
  4885  011DFA  9334               	bcf	52,1,b	;volatile
  4886                           
  4887                           ; BSR set to: 14
  4888                           ;mtouch_sensor.c: 286: PIE1bits.ADTIE = 1;
  4889  011DFC  832A               	bsf	42,1,b	;volatile
  4890                           
  4891                           ; BSR set to: 14
  4892  011DFE  0012               	return		;funcret
  4893  011E00                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  4894                           	opt stack 0
  4895                           tblptru	equ	0xFF8
  4896                           tblptrh	equ	0xFF7
  4897                           tblptrl	equ	0xFF6
  4898                           tablat	equ	0xFF5
  4899                           prodh	equ	0xFF4
  4900                           prodl	equ	0xFF3
  4901                           intcon	equ	0xFF2
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           fsr1l	equ	0xFE1
  4906                           indf2	equ	0xFDF
  4907                           postinc2	equ	0xFDE
  4908                           postdec2	equ	0xFDD
  4909                           fsr2h	equ	0xFDA
  4910                           fsr2l	equ	0xFD9
  4911                           status	equ	0xFD8
  4912                           
  4913 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4914 ;; Defined at:
  4915 ;;		line 290 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  sensor          1   11[BANK0 ] enum E17513
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    7
  4936 ;; This function calls:
  4937 ;;		_MTOUCH_Sensor_Initialize
  4938 ;;		_memcpy
  4939 ;; This function is called by:
  4940 ;;		_MTOUCH_Initialize
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text20
  4945  011EEA                     __ptext20:
  4946                           	opt stack 0
  4947  011EEA                     _MTOUCH_Sensor_InitializeAll:
  4948                           	opt stack 21
  4949                           
  4950                           ;mtouch_sensor.c: 292: enum mtouch_sensor_names sensor;
  4951                           ;mtouch_sensor.c: 294: memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init
      +                          ));
  4952                           
  4953                           ; BSR set to: 14
  4954                           ;incstack = 0
  4955  011EEA  0E83               	movlw	low _mtouch_sensor
  4956  011EEC  0100               	movlb	0	; () banked
  4957  011EEE  6FB0               	movwf	memcpy@d1& (0+255),b
  4958  011EF0  0E00               	movlw	high _mtouch_sensor
  4959  011EF2  6FB1               	movwf	(memcpy@d1+1)& (0+255),b
  4960  011EF4  0E75               	movlw	low _mtouch_sensor_init
  4961  011EF6  6FB2               	movwf	memcpy@s1& (0+255),b
  4962  011EF8  0EFC               	movlw	high _mtouch_sensor_init
  4963  011EFA  6FB3               	movwf	(memcpy@s1+1)& (0+255),b
  4964  011EFC  0E00               	movlw	0
  4965  011EFE  6FB5               	movwf	(memcpy@n+1)& (0+255),b
  4966  011F00  0E2D               	movlw	45
  4967  011F02  6FB4               	movwf	memcpy@n& (0+255),b
  4968  011F04  ECEF  F08D         	call	_memcpy	;wreg free
  4969                           
  4970                           ;mtouch_sensor.c: 296: for (sensor = 0; sensor < 5; sensor++)
  4971  011F08  0E00               	movlw	0
  4972  011F0A  0100               	movlb	0	; () banked
  4973  011F0C  6FBB               	movwf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  4974  011F0E                     l4807:
  4975                           
  4976                           ; BSR set to: 0
  4977  011F0E  0E04               	movlw	4
  4978  011F10  65BB               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  4979  011F12  D001               	goto	l569
  4980  011F14  0012               	return	
  4981  011F16                     l569:
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;mtouch_sensor.c: 297: {
  4985                           ;mtouch_sensor.c: 298: MTOUCH_Sensor_Initialize(sensor);
  4986                           
  4987                           ; BSR set to: 0
  4988  011F16  51BB               	movf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),w,b
  4989  011F18  ECD8  F08B         	call	_MTOUCH_Sensor_Initialize
  4990  011F1C  0100               	movlb	0	; () banked
  4991  011F1E  2BBB               	incf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),f,b
  4992  011F20  D7F6               	goto	l4807
  4993  011F22                     __end_of_MTOUCH_Sensor_InitializeAll:
  4994                           	opt stack 0
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodh	equ	0xFF4
  5000                           prodl	equ	0xFF3
  5001                           intcon	equ	0xFF2
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           postdec1	equ	0xFE5
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5014 ;; Defined at:
  5015 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  sensor          1    wreg     enum E17513
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  sensor          1    2[BANK0 ] enum E17513
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  1    wreg      enum E17519
  5022 ;; Registers used:
  5023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;Total ram usage:        1 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    6
  5036 ;; This function calls:
  5037 ;;		_MTOUCH_Sensor_Calibrate
  5038 ;;		_MTOUCH_Sensor_Enable
  5039 ;;		_Sensor_Sampled_Reset
  5040 ;; This function is called by:
  5041 ;;		_MTOUCH_Sensor_InitializeAll
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text21
  5046  0117B0                     __ptext21:
  5047                           	opt stack 0
  5048  0117B0                     _MTOUCH_Sensor_Initialize:
  5049                           	opt stack 21
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;incstack = 0
  5053                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5054  0117B0  0100               	movlb	0	; () banked
  5055  0117B2  6FB2               	movwf	MTOUCH_Sensor_Initialize@sensor& (0+255),b
  5056                           
  5057                           ;mtouch_sensor.c: 191: switch(sensor)
  5058  0117B4  D014               	goto	l544
  5059  0117B6                     l545:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;mtouch_sensor.c: 194: WPUEbits.WPUE2 = 0;
  5063  0117B6  010E               	movlb	14	; () banked
  5064  0117B8  95AE               	bcf	174,2,b	;volatile
  5065                           
  5066                           ;mtouch_sensor.c: 195: ANSELEbits.ANSELE2 = 0;
  5067  0117BA  95AF               	bcf	175,2,b	;volatile
  5068                           
  5069                           ;mtouch_sensor.c: 196: break;
  5070  0117BC  D022               	goto	l546
  5071  0117BE                     l547:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;mtouch_sensor.c: 198: WPUEbits.WPUE3 = 0;
  5075  0117BE  010E               	movlb	14	; () banked
  5076  0117C0  97AE               	bcf	174,3,b	;volatile
  5077                           
  5078                           ;mtouch_sensor.c: 199: ANSELEbits.ANSELE3 = 0;
  5079  0117C2  97AF               	bcf	175,3,b	;volatile
  5080                           
  5081                           ;mtouch_sensor.c: 200: break;
  5082  0117C4  D01E               	goto	l546
  5083  0117C6                     l548:
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;mtouch_sensor.c: 202: WPUEbits.WPUE4 = 0;
  5087  0117C6  010E               	movlb	14	; () banked
  5088  0117C8  99AE               	bcf	174,4,b	;volatile
  5089                           
  5090                           ;mtouch_sensor.c: 203: ANSELEbits.ANSELE4 = 0;
  5091  0117CA  99AF               	bcf	175,4,b	;volatile
  5092                           
  5093                           ;mtouch_sensor.c: 204: break;
  5094  0117CC  D01A               	goto	l546
  5095  0117CE                     l549:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;mtouch_sensor.c: 206: WPUEbits.WPUE5 = 0;
  5099  0117CE  010E               	movlb	14	; () banked
  5100  0117D0  9BAE               	bcf	174,5,b	;volatile
  5101                           
  5102                           ;mtouch_sensor.c: 207: ANSELEbits.ANSELE5 = 0;
  5103  0117D2  9BAF               	bcf	175,5,b	;volatile
  5104                           
  5105                           ;mtouch_sensor.c: 208: break;
  5106  0117D4  D016               	goto	l546
  5107  0117D6                     l550:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;mtouch_sensor.c: 210: WPUEbits.WPUE6 = 0;
  5111  0117D6  010E               	movlb	14	; () banked
  5112  0117D8  9DAE               	bcf	174,6,b	;volatile
  5113                           
  5114                           ;mtouch_sensor.c: 211: ANSELEbits.ANSELE6 = 0;
  5115  0117DA  9DAF               	bcf	175,6,b	;volatile
  5116                           
  5117                           ;mtouch_sensor.c: 212: break;
  5118  0117DC  D012               	goto	l546
  5119  0117DE                     l544:
  5120                           
  5121                           ; BSR set to: 14
  5122  0117DE  0100               	movlb	0	; () banked
  5123  0117E0  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5124                           
  5125                           ; Switch size 1, requested type "space"
  5126                           ; Number of cases is 5, Range of values is 0 to 4
  5127                           ; switch strategies available:
  5128                           ; Name         Instructions Cycles
  5129                           ; simple_byte           16     9 (average)
  5130                           ;	Chosen strategy is simple_byte
  5131  0117E2  0A00               	xorlw	0	; case 0
  5132  0117E4  B4D8               	btfsc	status,2,c
  5133  0117E6  D7E7               	goto	l545
  5134  0117E8  0A01               	xorlw	1	; case 1
  5135  0117EA  B4D8               	btfsc	status,2,c
  5136  0117EC  D7E8               	goto	l547
  5137  0117EE  0A03               	xorlw	3	; case 2
  5138  0117F0  B4D8               	btfsc	status,2,c
  5139  0117F2  D7E9               	goto	l548
  5140  0117F4  0A01               	xorlw	1	; case 3
  5141  0117F6  B4D8               	btfsc	status,2,c
  5142  0117F8  D7EA               	goto	l549
  5143  0117FA  0A07               	xorlw	7	; case 4
  5144  0117FC  A4D8               	btfss	status,2,c
  5145  0117FE  0012               	return	
  5146  011800  D7EA               	goto	l550
  5147  011802                     l546:
  5148                           
  5149                           ;mtouch_sensor.c: 215: MTOUCH_Sensor_Enable(sensor);
  5150                           
  5151                           ; BSR set to: 0
  5152  011802  0100               	movlb	0	; () banked
  5153  011804  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5154  011806  ECBD  F090         	call	_MTOUCH_Sensor_Enable
  5155                           
  5156                           ;mtouch_sensor.c: 216: MTOUCH_Sensor_Calibrate(sensor);
  5157  01180A  0100               	movlb	0	; () banked
  5158  01180C  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5159  01180E  ECF9  F090         	call	_MTOUCH_Sensor_Calibrate
  5160                           
  5161                           ;mtouch_sensor.c: 217: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  5162  011812  0100               	movlb	0	; () banked
  5163  011814  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5164  011816  0D09               	mullw	9
  5165  011818  0E83               	movlw	low _mtouch_sensor
  5166  01181A  24F3               	addwf	prodl,w,c
  5167  01181C  6FB0               	movwf	Sensor_Sampled_Reset@sensor& (0+255),b
  5168  01181E  0E00               	movlw	high _mtouch_sensor
  5169  011820  20F4               	addwfc	prodh,w,c
  5170  011822  6FB1               	movwf	(Sensor_Sampled_Reset@sensor+1)& (0+255),b
  5171  011824  ECE8  F091         	call	_Sensor_Sampled_Reset	;wreg free
  5172  011828  0012               	return	
  5173  01182A                     __end_of_MTOUCH_Sensor_Initialize:
  5174                           	opt stack 0
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           postdec1	equ	0xFE5
  5185                           fsr1l	equ	0xFE1
  5186                           indf2	equ	0xFDF
  5187                           postinc2	equ	0xFDE
  5188                           postdec2	equ	0xFDD
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5194 ;; Defined at:
  5195 ;;		line 711 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  sensor          1    wreg     enum E17513
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  sensor          1    0[BANK0 ] enum E17513
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5213 ;;Total ram usage:        1 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    5
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_MTOUCH_Sensor_Initialize
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text22
  5224  01217A                     __ptext22:
  5225                           	opt stack 0
  5226  01217A                     _MTOUCH_Sensor_Enable:
  5227                           	opt stack 21
  5228                           
  5229                           ;incstack = 0
  5230                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5231  01217A  0100               	movlb	0	; () banked
  5232  01217C  6FB0               	movwf	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5233                           
  5234                           ;mtouch_sensor.c: 713: if(sensor < 5)
  5235  01217E  0E05               	movlw	5
  5236  012180  0100               	movlb	0	; () banked
  5237  012182  61B0               	cpfslt	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5238  012184  0012               	return	
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;mtouch_sensor.c: 714: mtouch_sensor[sensor].enabled = 1;
  5242  012186  51B0               	movf	MTOUCH_Sensor_Enable@sensor& (0+255),w,b
  5243  012188  0D09               	mullw	9
  5244  01218A  0E08               	movlw	8
  5245  01218C  26F3               	addwf	prodl,f,c
  5246  01218E  0E00               	movlw	0
  5247  012190  22F4               	addwfc	prodh,f,c
  5248  012192  0E83               	movlw	low _mtouch_sensor
  5249  012194  24F3               	addwf	prodl,w,c
  5250  012196  6ED9               	movwf	fsr2l,c
  5251  012198  0E00               	movlw	high _mtouch_sensor
  5252  01219A  20F4               	addwfc	prodh,w,c
  5253  01219C  6EDA               	movwf	fsr2h,c
  5254  01219E  80DF               	bsf	indf2,0,c
  5255  0121A0  0012               	return	
  5256  0121A2                     __end_of_MTOUCH_Sensor_Enable:
  5257                           	opt stack 0
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon	equ	0xFF2
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           postdec1	equ	0xFE5
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5277 ;; Defined at:
  5278 ;;		line 190 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;		None
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  button          1   11[BANK0 ] enum E17454
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;Total ram usage:        1 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    7
  5299 ;; This function calls:
  5300 ;;		_MTOUCH_Button_Initialize
  5301 ;;		_memcpy
  5302 ;; This function is called by:
  5303 ;;		_MTOUCH_Initialize
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text23
  5308  011F22                     __ptext23:
  5309                           	opt stack 0
  5310  011F22                     _MTOUCH_Button_InitializeAll:
  5311                           	opt stack 21
  5312                           
  5313                           ;mtouch_button.c: 192: enum mtouch_button_names button;
  5314                           ;mtouch_button.c: 194: memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init
      +                          ));
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;incstack = 0
  5318  011F22  0E40               	movlw	low _mtouch_button
  5319  011F24  0100               	movlb	0	; () banked
  5320  011F26  6FB0               	movwf	memcpy@d1& (0+255),b
  5321  011F28  0E01               	movlw	high _mtouch_button
  5322  011F2A  6FB1               	movwf	(memcpy@d1+1)& (0+255),b
  5323  011F2C  0E25               	movlw	low _mtouch_button_init
  5324  011F2E  6FB2               	movwf	memcpy@s1& (0+255),b
  5325  011F30  0EFC               	movlw	high _mtouch_button_init
  5326  011F32  6FB3               	movwf	(memcpy@s1+1)& (0+255),b
  5327  011F34  0E00               	movlw	0
  5328  011F36  6FB5               	movwf	(memcpy@n+1)& (0+255),b
  5329  011F38  0E50               	movlw	80
  5330  011F3A  6FB4               	movwf	memcpy@n& (0+255),b
  5331  011F3C  ECEF  F08D         	call	_memcpy	;wreg free
  5332                           
  5333                           ;mtouch_button.c: 196: for (button = 0; button < 5; button++)
  5334  011F40  0E00               	movlw	0
  5335  011F42  0100               	movlb	0	; () banked
  5336  011F44  6FBB               	movwf	MTOUCH_Button_InitializeAll@button& (0+255),b
  5337  011F46                     l4821:
  5338                           
  5339                           ; BSR set to: 0
  5340  011F46  0E04               	movlw	4
  5341  011F48  65BB               	cpfsgt	MTOUCH_Button_InitializeAll@button& (0+255),b
  5342  011F4A  D001               	goto	l827
  5343  011F4C  0012               	return	
  5344  011F4E                     l827:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;mtouch_button.c: 197: {
  5348                           ;mtouch_button.c: 198: MTOUCH_Button_Initialize(button);
  5349                           
  5350                           ; BSR set to: 0
  5351  011F4E  51BB               	movf	MTOUCH_Button_InitializeAll@button& (0+255),w,b
  5352  011F50  EC15  F08C         	call	_MTOUCH_Button_Initialize
  5353  011F54  0100               	movlb	0	; () banked
  5354  011F56  2BBB               	incf	MTOUCH_Button_InitializeAll@button& (0+255),f,b
  5355  011F58  D7F6               	goto	l4821
  5356  011F5A                     __end_of_MTOUCH_Button_InitializeAll:
  5357                           	opt stack 0
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _memcpy *****************
  5377 ;; Defined at:
  5378 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  d1              2    0[BANK0 ] PTR void 
  5381 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5382 ;;  s1              2    2[BANK0 ] PTR const void 
  5383 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5384 ;;  n               2    4[BANK0 ] unsigned int 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  5387 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5388 ;;  d               2    7[BANK0 ] PTR unsigned char 
  5389 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5390 ;;  tmp             1    6[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  2    0[BANK0 ] PTR void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5400 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5403 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5404 ;;Total ram usage:       11 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    5
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_MTOUCH_Sensor_InitializeAll
  5411 ;;		_MTOUCH_Button_InitializeAll
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text24
  5416  011BDE                     __ptext24:
  5417                           	opt stack 0
  5418  011BDE                     _memcpy:
  5419                           	opt stack 22
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;incstack = 0
  5423  011BDE  C0B2  F0B9         	movff	memcpy@s1,memcpy@s
  5424  011BE2  C0B3  F0BA         	movff	memcpy@s1+1,memcpy@s+1
  5425  011BE6  C0B0  F0B7         	movff	memcpy@d1,memcpy@d
  5426  011BEA  C0B1  F0B8         	movff	memcpy@d1+1,memcpy@d+1
  5427  011BEE  D014               	goto	l1423
  5428  011BF0                     l4471:
  5429  011BF0  C0B9  FFF6         	movff	memcpy@s,tblptrl
  5430  011BF4  C0BA  FFF7         	movff	memcpy@s+1,tblptrh
  5431  011BF8                     	if	0	;tblptru may be non-zero
  5432  011BF8                     	endif
  5433  011BF8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5434  011BF8  0E00               	movlw	low (__mediumconst shr (0+16))
  5435  011BFA  6EF8               	movwf	tblptru,c
  5436  011BFC                     	endif
  5437  011BFC  0008               	tblrd		*
  5438  011BFE  CFF5 F0B6          	movff	tablat,memcpy@tmp
  5439  011C02  0100               	movlb	0	; () banked
  5440  011C04  4BB9               	infsnz	memcpy@s& (0+255),f,b
  5441  011C06  2BBA               	incf	(memcpy@s+1)& (0+255),f,b
  5442                           
  5443                           ; BSR set to: 0
  5444  011C08  C0B7  FFD9         	movff	memcpy@d,fsr2l
  5445  011C0C  C0B8  FFDA         	movff	memcpy@d+1,fsr2h
  5446  011C10  C0B6  FFDF         	movff	memcpy@tmp,indf2
  5447                           
  5448                           ; BSR set to: 0
  5449  011C14  4BB7               	infsnz	memcpy@d& (0+255),f,b
  5450  011C16  2BB8               	incf	(memcpy@d+1)& (0+255),f,b
  5451  011C18                     l1423:
  5452                           
  5453                           ; BSR set to: 0
  5454  011C18  0100               	movlb	0	; () banked
  5455  011C1A  07B4               	decf	memcpy@n& (0+255),f,b
  5456  011C1C  A0D8               	btfss	status,0,c
  5457  011C1E  07B5               	decf	(memcpy@n+1)& (0+255),f,b
  5458  011C20  29B4               	incf	memcpy@n& (0+255),w,b
  5459  011C22  E1E6               	bnz	l4471
  5460  011C24  29B5               	incf	(memcpy@n+1)& (0+255),w,b
  5461  011C26  B4D8               	btfsc	status,2,c
  5462  011C28  0012               	return	
  5463  011C2A  D7E2               	goto	l1424
  5464  011C2C                     __end_of_memcpy:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           postdec1	equ	0xFE5
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _INTERRUPT_Initialize *****************
  5485 ;; Defined at:
  5486 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;		None
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		None
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;Total ram usage:        0 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    5
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_SYSTEM_Initialize
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text25
  5515  01244C                     __ptext25:
  5516                           	opt stack 0
  5517  01244C                     _INTERRUPT_Initialize:
  5518                           	opt stack 24
  5519                           
  5520                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 1;
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;incstack = 0
  5524  01244C  8AF2               	bsf	intcon,5,c	;volatile
  5525                           
  5526                           ;interrupt_manager.c: 60: IPR3bits.TX2IP = 1;
  5527  01244E  010E               	movlb	14	; () banked
  5528  012450  8D22               	bsf	34,6,b	;volatile
  5529                           
  5530                           ;interrupt_manager.c: 63: IPR3bits.RC2IP = 1;
  5531  012452  8F22               	bsf	34,7,b	;volatile
  5532                           
  5533                           ;interrupt_manager.c: 66: IPR1bits.ADTIP = 1;
  5534  012454  8320               	bsf	32,1,b	;volatile
  5535                           
  5536                           ; BSR set to: 14
  5537  012456  0012               	return		;funcret
  5538  012458                     __end_of_INTERRUPT_Initialize:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _EUSART2_Initialize *****************
  5559 ;; Defined at:
  5560 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		_EUSART2_SetRxInterruptHandler
  5583 ;;		_EUSART2_SetTxInterruptHandler
  5584 ;; This function is called by:
  5585 ;;		_SYSTEM_Initialize
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text26
  5590  011A38                     __ptext26:
  5591                           	opt stack 0
  5592  011A38                     _EUSART2_Initialize:
  5593                           	opt stack 23
  5594                           
  5595                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  5596                           
  5597                           ; BSR set to: 14
  5598                           ;incstack = 0
  5599  011A38  010E               	movlb	14	; () banked
  5600  011A3A  9F2C               	bcf	44,7,b	;volatile
  5601                           
  5602                           ; BSR set to: 14
  5603                           ;eusart2.c: 81: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  5604  011A3C  0E60               	movlw	low _EUSART2_Receive_ISR
  5605  011A3E  0100               	movlb	0	; () banked
  5606  011A40  6FB0               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  5607  011A42  0E15               	movlw	high _EUSART2_Receive_ISR
  5608  011A44  6FB1               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5609  011A46  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
  5610  011A48  6FB2               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  5611  011A4A  EC19  F092         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  5612                           
  5613                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  5614  011A4E  010E               	movlb	14	; () banked
  5615  011A50  9D2C               	bcf	44,6,b	;volatile
  5616                           
  5617                           ;eusart2.c: 83: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  5618  011A52  0E2E               	movlw	low _EUSART2_Transmit_ISR
  5619  011A54  0100               	movlb	0	; () banked
  5620  011A56  6FB0               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  5621  011A58  0E20               	movlw	high _EUSART2_Transmit_ISR
  5622  011A5A  6FB1               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5623  011A5C  0E01               	movlw	low (_EUSART2_Transmit_ISR shr (0+16))
  5624  011A5E  6FB2               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  5625  011A60  EC12  F092         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  5626                           
  5627                           ;eusart2.c: 87: BAUD2CON = 0x08;
  5628  011A64  0E08               	movlw	8
  5629  011A66  010E               	movlb	14	; () banked
  5630  011A68  6FF7               	movwf	247,b	;volatile
  5631                           
  5632                           ; BSR set to: 14
  5633                           ;eusart2.c: 90: RC2STA = 0x90;
  5634  011A6A  0E90               	movlw	144
  5635  011A6C  6FF5               	movwf	245,b	;volatile
  5636                           
  5637                           ; BSR set to: 14
  5638                           ;eusart2.c: 93: TX2STA = 0x24;
  5639  011A6E  0E24               	movlw	36
  5640  011A70  6FF6               	movwf	246,b	;volatile
  5641                           
  5642                           ; BSR set to: 14
  5643                           ;eusart2.c: 96: SP2BRGL = 0x8A;
  5644  011A72  0E8A               	movlw	138
  5645  011A74  6FF3               	movwf	243,b	;volatile
  5646                           
  5647                           ; BSR set to: 14
  5648                           ;eusart2.c: 99: SP2BRGH = 0x00;
  5649  011A76  0E00               	movlw	0
  5650  011A78  6FF4               	movwf	244,b	;volatile
  5651                           
  5652                           ; BSR set to: 14
  5653                           ;eusart2.c: 103: eusart2TxHead = 0;
  5654  011A7A  0E00               	movlw	0
  5655  011A7C  6E41               	movwf	_eusart2TxHead,c	;volatile
  5656                           
  5657                           ; BSR set to: 14
  5658                           ;eusart2.c: 104: eusart2TxTail = 0;
  5659  011A7E  0E00               	movlw	0
  5660  011A80  6E40               	movwf	_eusart2TxTail,c	;volatile
  5661                           
  5662                           ; BSR set to: 14
  5663                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  5664  011A82  0E40               	movlw	64
  5665  011A84  6E4E               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5666                           
  5667                           ; BSR set to: 14
  5668                           ;eusart2.c: 107: eusart2RxHead = 0;
  5669  011A86  0E00               	movlw	0
  5670  011A88  6E3F               	movwf	_eusart2RxHead,c	;volatile
  5671                           
  5672                           ; BSR set to: 14
  5673                           ;eusart2.c: 108: eusart2RxTail = 0;
  5674  011A8A  0E00               	movlw	0
  5675  011A8C  6E3E               	movwf	_eusart2RxTail,c	;volatile
  5676                           
  5677                           ; BSR set to: 14
  5678                           ;eusart2.c: 109: eusart2RxCount = 0;
  5679  011A8E  0E00               	movlw	0
  5680  011A90  6E3D               	movwf	_eusart2RxCount,c	;volatile
  5681                           
  5682                           ; BSR set to: 14
  5683                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  5684  011A92  8F2C               	bsf	44,7,b	;volatile
  5685                           
  5686                           ; BSR set to: 14
  5687  011A94  0012               	return		;funcret
  5688  011A96                     __end_of_EUSART2_Initialize:
  5689                           	opt stack 0
  5690                           tblptru	equ	0xFF8
  5691                           tblptrh	equ	0xFF7
  5692                           tblptrl	equ	0xFF6
  5693                           tablat	equ	0xFF5
  5694                           prodh	equ	0xFF4
  5695                           prodl	equ	0xFF3
  5696                           intcon	equ	0xFF2
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  5709 ;; Defined at:
  5710 ;;		line 258 in file "mcc_generated_files/eusart2.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5713 ;;		 -> EUSART2_Transmit_ISR(1), 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5725 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5728 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5729 ;;Total ram usage:        3 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    5
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_EUSART2_Initialize
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text27
  5740  012424                     __ptext27:
  5741                           	opt stack 0
  5742  012424                     _EUSART2_SetTxInterruptHandler:
  5743                           	opt stack 23
  5744                           
  5745                           ;eusart2.c: 259: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  5746                           
  5747                           ; BSR set to: 14
  5748                           ;incstack = 0
  5749  012424  C0B0  F04B         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  5750  012428  C0B1  F04C         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  5751  01242C  C0B2  F04D         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+2,_EUSART2_TxDefaultInterruptHandl
      +                          er+2
  5752  012430  0012               	return		;funcret
  5753  012432                     __end_of_EUSART2_SetTxInterruptHandler:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           intcon	equ	0xFF2
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           postdec1	equ	0xFE5
  5765                           fsr1l	equ	0xFE1
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  5774 ;; Defined at:
  5775 ;;		line 262 in file "mcc_generated_files/eusart2.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5778 ;;		 -> EUSART2_Receive_ISR(1), 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;		None
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5790 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;Total ram usage:        3 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:    5
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_EUSART2_Initialize
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text28
  5805  012432                     __ptext28:
  5806                           	opt stack 0
  5807  012432                     _EUSART2_SetRxInterruptHandler:
  5808                           	opt stack 23
  5809                           
  5810                           ;eusart2.c: 263: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  5811                           
  5812                           ;incstack = 0
  5813  012432  C0B0  F0E1         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  5814  012436  C0B1  F0E2         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  5815  01243A  C0B2  F0E3         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
  5816  01243E  0012               	return		;funcret
  5817  012440                     __end_of_EUSART2_SetRxInterruptHandler:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           postinc0	equ	0xFEE
  5827                           wreg	equ	0xFE8
  5828                           postdec1	equ	0xFE5
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           postdec2	equ	0xFDD
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5838 ;; Defined at:
  5839 ;;		line 89 in file "mcc_generated_files/mtouch/mtouch.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      unsigned char 
  5846 ;; Registers used:
  5847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:   10
  5860 ;; This function calls:
  5861 ;;		_MTOUCH_Button_ServiceAll
  5862 ;;		_MTOUCH_Sensor_SampleAll
  5863 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5864 ;;		_MTOUCH_Tick
  5865 ;;		_MTOUCH_needReburst
  5866 ;; This function is called by:
  5867 ;;		_main
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text29
  5872  0121A2                     __ptext29:
  5873                           	opt stack 0
  5874  0121A2                     _MTOUCH_Service_Mainloop:
  5875                           	opt stack 20
  5876                           
  5877                           ;mtouch.c: 93: mtouch_time_toScan = 1;
  5878                           
  5879                           ;incstack = 0
  5880  0121A2  0E01               	movlw	1
  5881  0121A4  6E3C               	movwf	_mtouch_time_toScan,c
  5882                           
  5883                           ;mtouch.c: 95: if(mtouch_time_toScan)
  5884  0121A6  503C               	movf	_mtouch_time_toScan,w,c
  5885  0121A8  B4D8               	btfsc	status,2,c
  5886  0121AA  0012               	return	
  5887                           
  5888                           ;mtouch.c: 96: {
  5889                           ;mtouch.c: 97: if(MTOUCH_Sensor_SampleAll() == 0)
  5890  0121AC  EC3D  F08E         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  5891  0121B0  0900               	iorlw	0
  5892  0121B2  B4D8               	btfsc	status,2,c
  5893  0121B4  0012               	return	
  5894                           
  5895                           ;mtouch.c: 99: MTOUCH_Button_ServiceAll();
  5896                           
  5897                           ;mtouch.c: 98: return 0;
  5898                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5899  0121B6  ECAE  F091         	call	_MTOUCH_Button_ServiceAll	;wreg free
  5900                           
  5901                           ;mtouch.c: 100: mtouch_time_toScan = MTOUCH_needReburst();
  5902  0121BA  EC2C  F092         	call	_MTOUCH_needReburst	;wreg free
  5903  0121BE  6E3C               	movwf	_mtouch_time_toScan,c
  5904                           
  5905                           ;mtouch.c: 101: MTOUCH_Sensor_Sampled_ResetAll();
  5906  0121C0  EC62  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  5907                           
  5908                           ;mtouch.c: 102: MTOUCH_Tick();
  5909  0121C4  EC43  F092         	call	_MTOUCH_Tick	;wreg free
  5910                           
  5911                           ;mtouch.c: 105: else
  5912                           ;mtouch.c: 106: {
  5913                           ;mtouch.c: 107: return 0;
  5914                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5915                           
  5916                           ;mtouch.c: 104: }
  5917                           
  5918                           ;mtouch.c: 103: return 1;
  5919                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5920  0121C8  0012               	return	
  5921  0121CA                     __end_of_MTOUCH_Service_Mainloop:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           postinc0	equ	0xFEE
  5931                           wreg	equ	0xFE8
  5932                           postdec1	equ	0xFE5
  5933                           fsr1l	equ	0xFE1
  5934                           indf2	equ	0xFDF
  5935                           postinc2	equ	0xFDE
  5936                           postdec2	equ	0xFDD
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _MTOUCH_needReburst *****************
  5942 ;; Defined at:
  5943 ;;		line 126 in file "mcc_generated_files/mtouch/mtouch.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;		None
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  needReburst     1    0[BANK0 ] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      unsigned char 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;Total ram usage:        1 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    5
  5964 ;; This function calls:
  5965 ;;		Nothing
  5966 ;; This function is called by:
  5967 ;;		_MTOUCH_Service_Mainloop
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text30
  5972  012458                     __ptext30:
  5973                           	opt stack 0
  5974  012458                     _MTOUCH_needReburst:
  5975                           	opt stack 24
  5976                           
  5977                           ;mtouch.c: 128: bool needReburst = 0;
  5978                           
  5979                           ;incstack = 0
  5980  012458  0E00               	movlw	0
  5981  01245A  0100               	movlb	0	; () banked
  5982  01245C  6FB0               	movwf	MTOUCH_needReburst@needReburst& (0+255),b
  5983                           
  5984                           ;mtouch.c: 130: return needReburst;
  5985  01245E  51B0               	movf	MTOUCH_needReburst@needReburst& (0+255),w,b
  5986  012460  0012               	return	
  5987  012462                     __end_of_MTOUCH_needReburst:
  5988                           	opt stack 0
  5989                           tblptru	equ	0xFF8
  5990                           tblptrh	equ	0xFF7
  5991                           tblptrl	equ	0xFF6
  5992                           tablat	equ	0xFF5
  5993                           prodh	equ	0xFF4
  5994                           prodl	equ	0xFF3
  5995                           intcon	equ	0xFF2
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1l	equ	0xFE1
  6000                           indf2	equ	0xFDF
  6001                           postinc2	equ	0xFDE
  6002                           postdec2	equ	0xFDD
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _MTOUCH_Tick *****************
  6008 ;; Defined at:
  6009 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6027 ;;Total ram usage:        0 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    7
  6030 ;; This function calls:
  6031 ;;		_MTOUCH_Button_Tick
  6032 ;; This function is called by:
  6033 ;;		_MTOUCH_Service_Mainloop
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text31
  6038  012486                     __ptext31:
  6039                           	opt stack 0
  6040  012486                     _MTOUCH_Tick:
  6041                           	opt stack 22
  6042                           
  6043                           ;mtouch.c: 118: MTOUCH_Button_Tick();
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;incstack = 0
  6047  012486  ECE5  F090         	call	_MTOUCH_Button_Tick	;wreg free
  6048  01248A  0012               	return		;funcret
  6049  01248C                     __end_of_MTOUCH_Tick:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           postinc0	equ	0xFEE
  6059                           wreg	equ	0xFE8
  6060                           postdec1	equ	0xFE5
  6061                           fsr1l	equ	0xFE1
  6062                           indf2	equ	0xFDF
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _MTOUCH_Button_Tick *****************
  6070 ;; Defined at:
  6071 ;;		line 316 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  i               1    4[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      void 
  6078 ;; Registers used:
  6079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6089 ;;Total ram usage:        1 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    6
  6092 ;; This function calls:
  6093 ;;		_Button_Tick_helper
  6094 ;; This function is called by:
  6095 ;;		_MTOUCH_Tick
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text32
  6100  0121CA                     __ptext32:
  6101                           	opt stack 0
  6102  0121CA                     _MTOUCH_Button_Tick:
  6103                           	opt stack 22
  6104                           
  6105                           ;mtouch_button.c: 318: uint8_t i;
  6106                           ;mtouch_button.c: 319: for (i = 0; i < 5; i++)
  6107                           
  6108                           ;incstack = 0
  6109  0121CA  0E00               	movlw	0
  6110  0121CC  0100               	movlb	0	; () banked
  6111  0121CE  6FB4               	movwf	MTOUCH_Button_Tick@i& (0+255),b
  6112  0121D0                     l4845:
  6113                           
  6114                           ; BSR set to: 0
  6115  0121D0  0E04               	movlw	4
  6116  0121D2  65B4               	cpfsgt	MTOUCH_Button_Tick@i& (0+255),b
  6117  0121D4  D001               	goto	l863
  6118  0121D6  0012               	return	
  6119  0121D8                     l863:
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;mtouch_button.c: 320: {
  6123                           ;mtouch_button.c: 321: Button_Tick_helper(&mtouch_button[i]);
  6124                           
  6125                           ; BSR set to: 0
  6126  0121D8  51B4               	movf	MTOUCH_Button_Tick@i& (0+255),w,b
  6127  0121DA  0D10               	mullw	16
  6128  0121DC  0E40               	movlw	low _mtouch_button
  6129  0121DE  24F3               	addwf	prodl,w,c
  6130  0121E0  6FB0               	movwf	Button_Tick_helper@button& (0+255),b
  6131  0121E2  0E01               	movlw	high _mtouch_button
  6132  0121E4  20F4               	addwfc	prodh,w,c
  6133  0121E6  6FB1               	movwf	(Button_Tick_helper@button+1)& (0+255),b
  6134  0121E8  EC75  F08D         	call	_Button_Tick_helper	;wreg free
  6135  0121EC  0100               	movlb	0	; () banked
  6136  0121EE  2BB4               	incf	MTOUCH_Button_Tick@i& (0+255),f,b
  6137  0121F0  D7EF               	goto	l4845
  6138  0121F2                     __end_of_MTOUCH_Button_Tick:
  6139                           	opt stack 0
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           intcon	equ	0xFF2
  6147                           postinc0	equ	0xFEE
  6148                           wreg	equ	0xFE8
  6149                           postdec1	equ	0xFE5
  6150                           fsr1l	equ	0xFE1
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _Button_Tick_helper *****************
  6159 ;; Defined at:
  6160 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  button          2    0[BANK0 ] PTR struct .
  6163 ;;		 -> mtouch_button(80), 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6179 ;;Total ram usage:        4 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    5
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_MTOUCH_Button_Tick
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text33
  6190  011AEA                     __ptext33:
  6191                           	opt stack 0
  6192  011AEA                     _Button_Tick_helper:
  6193                           	opt stack 22
  6194                           
  6195                           ;mtouch_button.c: 327: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;incstack = 0
  6199  011AEA  0100               	movlb	0	; () banked
  6200  011AEC  EE20 F002          	lfsr	2,2
  6201  011AF0  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6202  011AF2  26D9               	addwf	fsr2l,f,c
  6203  011AF4  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6204  011AF6  22DA               	addwfc	fsr2h,f,c
  6205  011AF8  0E02               	movlw	2
  6206  011AFA  18DE               	xorwf	postinc2,w,c
  6207  011AFC  A4D8               	btfss	status,2,c
  6208  011AFE  0012               	return	
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;mtouch_button.c: 328: {
  6212                           ;mtouch_button.c: 329: (button->counter)++;
  6213  011B00  EE20 F00A          	lfsr	2,10
  6214  011B04  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6215  011B06  26D9               	addwf	fsr2l,f,c
  6216  011B08  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6217  011B0A  22DA               	addwfc	fsr2h,f,c
  6218  011B0C  2ADE               	incf	postinc2,f,c
  6219  011B0E  0E00               	movlw	0
  6220  011B10  22DD               	addwfc	postdec2,f,c
  6221                           
  6222                           ;mtouch_button.c: 330: if (button->counter == (mtouch_button_statecounter_t)0)
  6223  011B12  EE20 F00A          	lfsr	2,10
  6224  011B16  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6225  011B18  26D9               	addwf	fsr2l,f,c
  6226  011B1A  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6227  011B1C  22DA               	addwfc	fsr2h,f,c
  6228  011B1E  50DE               	movf	postinc2,w,c
  6229  011B20  10DE               	iorwf	postinc2,w,c
  6230  011B22  A4D8               	btfss	status,2,c
  6231  011B24  0012               	return	
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;mtouch_button.c: 331: {
  6235                           ;mtouch_button.c: 332: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6236  011B26  EE20 F00A          	lfsr	2,10
  6237  011B2A  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6238  011B2C  26D9               	addwf	fsr2l,f,c
  6239  011B2E  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6240  011B30  22DA               	addwfc	fsr2h,f,c
  6241  011B32  0EFF               	movlw	255
  6242  011B34  6EDE               	movwf	postinc2,c
  6243  011B36  0EFF               	movlw	255
  6244  011B38  6EDD               	movwf	postdec2,c
  6245                           
  6246                           ; BSR set to: 0
  6247  011B3A  0012               	return	
  6248  011B3C                     __end_of_Button_Tick_helper:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           postinc0	equ	0xFEE
  6258                           wreg	equ	0xFE8
  6259                           postdec1	equ	0xFE5
  6260                           fsr1l	equ	0xFE1
  6261                           indf2	equ	0xFDF
  6262                           postinc2	equ	0xFDE
  6263                           postdec2	equ	0xFDD
  6264                           fsr2h	equ	0xFDA
  6265                           fsr2l	equ	0xFD9
  6266                           status	equ	0xFD8
  6267                           
  6268 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6269 ;; Defined at:
  6270 ;;		line 811 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;		None
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  sensor          2    2[BANK0 ] PTR struct .
  6275 ;;		 -> mtouch_sensor(45), 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6286 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6288 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6289 ;;Total ram usage:        2 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    6
  6292 ;; This function calls:
  6293 ;;		_Sensor_Sampled_Reset
  6294 ;; This function is called by:
  6295 ;;		_MTOUCH_Initialize
  6296 ;;		_MTOUCH_Service_Mainloop
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text34
  6301  0120C4                     __ptext34:
  6302                           	opt stack 0
  6303  0120C4                     _MTOUCH_Sensor_Sampled_ResetAll:
  6304                           	opt stack 22
  6305                           
  6306                           ;mtouch_sensor.c: 813: mtouch_sensor_t* sensor;
  6307                           ;mtouch_sensor.c: 814: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[5-1];senso
      +                          r++)
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;incstack = 0
  6311  0120C4  0E83               	movlw	low _mtouch_sensor
  6312  0120C6  0100               	movlb	0	; () banked
  6313  0120C8  6FB2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),b
  6314  0120CA  0E00               	movlw	high _mtouch_sensor
  6315  0120CC  6FB3               	movwf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),b
  6316  0120CE  51B3               	movf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),w,b
  6317  0120D0  0800               	sublw	high (_mtouch_sensor+36)
  6318  0120D2  E102               	bnz	u5295
  6319  0120D4  51B2               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),w,b
  6320  0120D6  08A7               	sublw	low (_mtouch_sensor+36)
  6321  0120D8                     u5295:
  6322  0120D8  A0D8               	btfss	status,0,c
  6323  0120DA  0012               	return	
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;mtouch_sensor.c: 815: {
  6327                           ;mtouch_sensor.c: 816: Sensor_Sampled_Reset(sensor);
  6328                           
  6329                           ; BSR set to: 0
  6330                           
  6331                           ; BSR set to: 0
  6332  0120DC  C0B2  F0B0         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  6333  0120E0  C0B3  F0B1         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor+1,Sensor_Sampled_Reset@sensor+1
  6334  0120E4  ECE8  F091         	call	_Sensor_Sampled_Reset	;wreg free
  6335  0120E8  0E09               	movlw	9
  6336  0120EA  0100               	movlb	0	; () banked
  6337  0120EC  27B2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),f,b
  6338  0120EE  0E00               	movlw	0
  6339  0120F0  23B3               	addwfc	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),f,b
  6340  0120F2  D7ED               	goto	L2
  6341  0120F4                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  6342                           	opt stack 0
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           intcon	equ	0xFF2
  6350                           postinc0	equ	0xFEE
  6351                           wreg	equ	0xFE8
  6352                           postdec1	equ	0xFE5
  6353                           fsr1l	equ	0xFE1
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _Sensor_Sampled_Reset *****************
  6362 ;; Defined at:
  6363 ;;		line 828 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  sensor          2    0[BANK0 ] PTR struct .
  6366 ;;		 -> mtouch_sensor(45), 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6382 ;;Total ram usage:        2 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    5
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_MTOUCH_Sensor_Initialize
  6389 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text35
  6394  0123D0                     __ptext35:
  6395                           	opt stack 0
  6396  0123D0                     _Sensor_Sampled_Reset:
  6397                           	opt stack 22
  6398                           
  6399                           ;mtouch_sensor.c: 830: sensor->sampled = 0;
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;incstack = 0
  6403  0123D0  0100               	movlb	0	; () banked
  6404  0123D2  EE20 F008          	lfsr	2,8
  6405  0123D6  51B0               	movf	Sensor_Sampled_Reset@sensor& (0+255),w,b
  6406  0123D8  26D9               	addwf	fsr2l,f,c
  6407  0123DA  51B1               	movf	(Sensor_Sampled_Reset@sensor+1)& (0+255),w,b
  6408  0123DC  22DA               	addwfc	fsr2h,f,c
  6409  0123DE  92DF               	bcf	indf2,1,c
  6410                           
  6411                           ; BSR set to: 0
  6412  0123E0  0012               	return		;funcret
  6413  0123E2                     __end_of_Sensor_Sampled_Reset:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           postinc0	equ	0xFEE
  6423                           wreg	equ	0xFE8
  6424                           postdec1	equ	0xFE5
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6434 ;; Defined at:
  6435 ;;		line 302 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  sensor          1   21[BANK0 ] enum E17513
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      unsigned char 
  6442 ;; Registers used:
  6443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6453 ;;Total ram usage:        1 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    9
  6456 ;; This function calls:
  6457 ;;		_MTOUCH_Sensor_isEnabled
  6458 ;;		_MTOUCH_Sensor_isSampling
  6459 ;;		_MTOUCH_Sensor_wasSampled
  6460 ;;		_Sensor_FrequencyHopping
  6461 ;;		_Sensor_scheduleNextScan
  6462 ;; This function is called by:
  6463 ;;		_MTOUCH_Service_Mainloop
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text36
  6468  011C7A                     __ptext36:
  6469                           	opt stack 0
  6470  011C7A                     _MTOUCH_Sensor_SampleAll:
  6471                           	opt stack 20
  6472                           
  6473                           ;mtouch_sensor.c: 304: enum mtouch_sensor_names sensor;
  6474                           ;mtouch_sensor.c: 306: for (sensor = 0; sensor < 5; sensor++)
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;incstack = 0
  6478  011C7A  0E00               	movlw	0
  6479  011C7C  0100               	movlb	0	; () banked
  6480  011C7E  6FC5               	movwf	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6481  011C80                     l5075:
  6482                           
  6483                           ; BSR set to: 0
  6484  011C80  0E04               	movlw	4
  6485  011C82  65C5               	cpfsgt	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6486  011C84  D001               	goto	l574
  6487  011C86  D018               	goto	u5630
  6488  011C88                     l574:
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;mtouch_sensor.c: 307: {
  6492                           ;mtouch_sensor.c: 308: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  6493                           
  6494                           ; BSR set to: 0
  6495  011C88  51C5               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6496  011C8A  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  6497  011C8E  0900               	iorlw	0
  6498  011C90  A4D8               	btfss	status,2,c
  6499  011C92  D00F               	goto	l576
  6500  011C94  0100               	movlb	0	; () banked
  6501  011C96  51C5               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6502  011C98  ECC9  F08F         	call	_MTOUCH_Sensor_isEnabled
  6503  011C9C  0900               	iorlw	0
  6504  011C9E  B4D8               	btfsc	status,2,c
  6505  011CA0  D008               	goto	l576
  6506                           
  6507                           ;mtouch_sensor.c: 309: {
  6508                           ;mtouch_sensor.c: 310: if(MTOUCH_Sensor_isSampling() == 0)
  6509  011CA2  EC46  F092         	call	_MTOUCH_Sensor_isSampling	;wreg free
  6510  011CA6  0900               	iorlw	0
  6511  011CA8  B4D8               	btfsc	status,2,c
  6512                           
  6513                           ;mtouch_sensor.c: 311: Sensor_scheduleNextScan();
  6514  011CAA  EC3C  F083         	call	_Sensor_scheduleNextScan	;wreg free
  6515                           
  6516                           ;mtouch_sensor.c: 312: return 0;
  6517  011CAE  0E00               	movlw	0
  6518  011CB0  0012               	return	
  6519  011CB2                     l576:
  6520  011CB2  0100               	movlb	0	; () banked
  6521  011CB4  2BC5               	incf	MTOUCH_Sensor_SampleAll@sensor& (0+255),f,b
  6522  011CB6  D7E4               	goto	l5075
  6523  011CB8                     u5630:
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;mtouch_sensor.c: 313: }
  6527                           ;mtouch_sensor.c: 314: }
  6528                           ;mtouch_sensor.c: 316: Sensor_FrequencyHopping();
  6529                           
  6530                           ; BSR set to: 0
  6531  011CB8  EC34  F091         	call	_Sensor_FrequencyHopping	;wreg free
  6532                           
  6533                           ;mtouch_sensor.c: 318: return 1;
  6534  011CBC  0E01               	movlw	1
  6535  011CBE  0012               	return	
  6536  011CC0                     __end_of_MTOUCH_Sensor_SampleAll:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon	equ	0xFF2
  6545                           postinc0	equ	0xFEE
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _Sensor_scheduleNextScan *****************
  6557 ;; Defined at:
  6558 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  sensor          2    6[BANK0 ] PTR struct .
  6563 ;;		 -> mtouch_sensor(45), 
  6564 ;;  skipScan        1    5[BANK0 ] unsigned char 
  6565 ;;  state           1    4[BANK0 ] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6579 ;;Total ram usage:        6 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    6
  6582 ;; This function calls:
  6583 ;;		_MTOUCH_Sensor_isEnabled
  6584 ;;		_MTOUCH_Sensor_wasSampled
  6585 ;;		_Sensor_SetTrisBit
  6586 ;;		_Sensor_isCalibrated
  6587 ;;		_Sensor_isCalibratingAcqTime
  6588 ;; This function is called by:
  6589 ;;		_MTOUCH_Sensor_SampleAll
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text37
  6594  010678                     __ptext37:
  6595                           	opt stack 0
  6596  010678                     _Sensor_scheduleNextScan:
  6597                           	opt stack 22
  6598                           
  6599                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
  6600                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
  6601                           
  6602                           ;incstack = 0
  6603  010678  0E00               	movlw	0
  6604  01067A  0100               	movlb	0	; () banked
  6605  01067C  6FB5               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6606                           
  6607                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
  6608  01067E  0E00               	movlw	0
  6609  010680  BEF2               	btfsc	intcon,7,c	;volatile
  6610  010682  0E01               	movlw	1
  6611  010684  6FB4               	movwf	Sensor_scheduleNextScan@state& (0+255),b
  6612                           
  6613                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
  6614  010686  D00D               	goto	l586
  6615  010688                     
  6616                           ;mtouch_sensor.c: 347: {
  6617                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
  6618                           
  6619                           ; BSR set to: 0
  6620  010688  2A3B               	incf	_currentScanSensor,f,c
  6621  01068A  0E05               	movlw	5
  6622  01068C  183B               	xorwf	_currentScanSensor,w,c
  6623  01068E  A4D8               	btfss	status,2,c
  6624  010690  D008               	goto	l586
  6625                           
  6626                           ;mtouch_sensor.c: 349: {
  6627                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
  6628  010692  0E00               	movlw	0
  6629  010694  6E3B               	movwf	_currentScanSensor,c
  6630                           
  6631                           ;mtouch_sensor.c: 351: sampling_flag = 0;
  6632  010696  0E00               	movlw	0
  6633  010698  6E3A               	movwf	_sampling_flag,c
  6634                           
  6635                           ;mtouch_sensor.c: 352: skipScan = 1;
  6636  01069A  0E01               	movlw	1
  6637  01069C  0100               	movlb	0	; () banked
  6638  01069E  6FB5               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6639                           
  6640                           ;mtouch_sensor.c: 353: break;
  6641  0106A0  D00C               	goto	u5350
  6642  0106A2                     l586:
  6643                           
  6644                           ; BSR set to: 0
  6645                           
  6646                           ; BSR set to: 0
  6647  0106A2  503B               	movf	_currentScanSensor,w,c
  6648  0106A4  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  6649  0106A8  0900               	iorlw	0
  6650  0106AA  A4D8               	btfss	status,2,c
  6651  0106AC  D7ED               	goto	l585
  6652  0106AE  503B               	movf	_currentScanSensor,w,c
  6653  0106B0  ECC9  F08F         	call	_MTOUCH_Sensor_isEnabled
  6654  0106B4  0900               	iorlw	0
  6655  0106B6  B4D8               	btfsc	status,2,c
  6656  0106B8  D7E7               	goto	l585
  6657  0106BA                     u5350:
  6658                           
  6659                           ;mtouch_sensor.c: 354: }
  6660                           ;mtouch_sensor.c: 355: }
  6661                           ;mtouch_sensor.c: 358: if(skipScan==0)
  6662  0106BA  0100               	movlb	0	; () banked
  6663  0106BC  51B5               	movf	Sensor_scheduleNextScan@skipScan& (0+255),w,b
  6664  0106BE  A4D8               	btfss	status,2,c
  6665  0106C0  0012               	return	
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;mtouch_sensor.c: 359: {
  6669                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
  6670  0106C2  503B               	movf	_currentScanSensor,w,c
  6671  0106C4  0D09               	mullw	9
  6672  0106C6  0E83               	movlw	low _mtouch_sensor
  6673  0106C8  24F3               	addwf	prodl,w,c
  6674  0106CA  6FB6               	movwf	Sensor_scheduleNextScan@sensor& (0+255),b
  6675  0106CC  0E00               	movlw	high _mtouch_sensor
  6676  0106CE  20F4               	addwfc	prodh,w,c
  6677  0106D0  6FB7               	movwf	(Sensor_scheduleNextScan@sensor+1)& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
  6681  0106D2  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  6682  0106D6  C0B7  F0B1         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibrated@sensor+1
  6683  0106DA  ECA1  F091         	call	_Sensor_isCalibrated	;wreg free
  6684  0106DE  0900               	iorlw	0
  6685  0106E0  B4D8               	btfsc	status,2,c
  6686  0106E2  D015               	goto	l589
  6687                           
  6688                           ;mtouch_sensor.c: 362: {
  6689                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
  6690  0106E4  0100               	movlb	0	; () banked
  6691  0106E6  EE20 F003          	lfsr	2,3
  6692  0106EA  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6693  0106EC  26D9               	addwf	fsr2l,f,c
  6694  0106EE  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6695  0106F0  22DA               	addwfc	fsr2h,f,c
  6696  0106F2  50DF               	movf	indf2,w,c
  6697  0106F4  010F               	movlb	15	; () banked
  6698  0106F6  6F5C               	movwf	92,b	;volatile
  6699                           
  6700                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
  6701  0106F8  0100               	movlb	0	; () banked
  6702  0106FA  EE20 F002          	lfsr	2,2
  6703  0106FE  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6704  010700  26D9               	addwf	fsr2l,f,c
  6705  010702  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6706  010704  22DA               	addwfc	fsr2h,f,c
  6707  010706  50DF               	movf	indf2,w,c
  6708  010708  010F               	movlb	15	; () banked
  6709  01070A  6F5E               	movwf	94,b	;volatile
  6710                           
  6711                           ;mtouch_sensor.c: 365: }
  6712  01070C  D022               	goto	l592
  6713  01070E                     l589:
  6714                           
  6715                           ;mtouch_sensor.c: 366: else
  6716                           ;mtouch_sensor.c: 367: {
  6717                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
  6718                           
  6719                           ; BSR set to: 15
  6720  01070E  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  6721  010712  C0B7  F0B1         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibratingAcqTime@sensor+1
  6722  010716  EC94  F091         	call	_Sensor_isCalibratingAcqTime	;wreg free
  6723  01071A  0900               	iorlw	0
  6724  01071C  B4D8               	btfsc	status,2,c
  6725  01071E  D014               	goto	l591
  6726                           
  6727                           ;mtouch_sensor.c: 369: {
  6728                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
  6729  010720  0100               	movlb	0	; () banked
  6730  010722  EE20 F002          	lfsr	2,2
  6731  010726  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6732  010728  26D9               	addwf	fsr2l,f,c
  6733  01072A  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6734  01072C  22DA               	addwfc	fsr2h,f,c
  6735  01072E  50DF               	movf	indf2,w,c
  6736  010730  010F               	movlb	15	; () banked
  6737  010732  6F5E               	movwf	94,b	;volatile
  6738                           
  6739                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
  6740  010734  0100               	movlb	0	; () banked
  6741  010736  EE20 F003          	lfsr	2,3
  6742  01073A  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6743  01073C  26D9               	addwf	fsr2l,f,c
  6744  01073E  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6745  010740  22DA               	addwfc	fsr2h,f,c
  6746  010742  50DF               	movf	indf2,w,c
  6747  010744  010F               	movlb	15	; () banked
  6748  010746  D004               	goto	L3
  6749  010748                     l591:
  6750                           
  6751                           ;mtouch_sensor.c: 373: else
  6752                           ;mtouch_sensor.c: 374: {
  6753                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6754                           
  6755                           ; BSR set to: 15
  6756  010748  0E80               	movlw	128
  6757  01074A  010F               	movlb	15	; () banked
  6758  01074C  6F5E               	movwf	94,b	;volatile
  6759                           
  6760                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6761  01074E  0E80               	movlw	128
  6762  010750                     L3:
  6763  010750  6F5C               	movwf	92,b	;volatile
  6764  010752                     l592:
  6765                           
  6766                           ; BSR set to: 15
  6767                           ;mtouch_sensor.c: 377: }
  6768                           ;mtouch_sensor.c: 378: }
  6769                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
  6770                           
  6771                           ; BSR set to: 15
  6772                           
  6773                           ; BSR set to: 15
  6774  010752  5038               	movf	_sample_delay,w,c
  6775  010754  275E               	addwf	94,f,b	;volatile
  6776                           
  6777                           ; BSR set to: 15
  6778                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
  6779  010756  0100               	movlb	0	; () banked
  6780  010758  EE20 F001          	lfsr	2,1
  6781  01075C  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6782  01075E  26D9               	addwf	fsr2l,f,c
  6783  010760  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6784  010762  22DA               	addwfc	fsr2h,f,c
  6785  010764  50DF               	movf	indf2,w,c
  6786  010766  010F               	movlb	15	; () banked
  6787  010768  6F5F               	movwf	95,b	;volatile
  6788                           
  6789                           ; BSR set to: 15
  6790                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
  6791  01076A  0100               	movlb	0	; () banked
  6792  01076C  EE20 F004          	lfsr	2,4
  6793  010770  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6794  010772  26D9               	addwf	fsr2l,f,c
  6795  010774  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6796  010776  22DA               	addwfc	fsr2h,f,c
  6797  010778  50DF               	movf	indf2,w,c
  6798  01077A  6FB2               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6799  01077C  90D8               	bcf	status,0,c
  6800  01077E  31B2               	rrcf	??_Sensor_scheduleNextScan& (0+255),w,b
  6801  010780  6E66               	movwf	3942,c	;volatile
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
  6805  010782  EE20 F005          	lfsr	2,5
  6806  010786  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6807  010788  26D9               	addwf	fsr2l,f,c
  6808  01078A  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6809  01078C  22DA               	addwfc	fsr2h,f,c
  6810  01078E  50DF               	movf	indf2,w,c
  6811  010790  010F               	movlb	15	; () banked
  6812  010792  6F5D               	movwf	93,b	;volatile
  6813                           
  6814                           ; BSR set to: 15
  6815                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
  6816  010794  8E60               	bsf	3936,7,c	;volatile
  6817                           
  6818                           ; BSR set to: 15
  6819                           ;mtouch_sensor.c: 385: sampling_flag= 1;
  6820  010796  0E01               	movlw	1
  6821  010798  6E3A               	movwf	_sampling_flag,c
  6822                           
  6823                           ; BSR set to: 15
  6824                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
  6825  01079A  0E01               	movlw	1
  6826  01079C  0100               	movlb	0	; () banked
  6827  01079E  6FB0               	movwf	Sensor_SetTrisBit@TrisBit& (0+255),b
  6828  0107A0  503B               	movf	_currentScanSensor,w,c
  6829  0107A2  EC88  F08C         	call	_Sensor_SetTrisBit
  6830                           
  6831                           ;mtouch_sensor.c: 387: GIE = 0;
  6832  0107A6  9EF2               	bcf	intcon,7,c	;volatile
  6833                           
  6834                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
  6835  0107A8  8060               	bsf	3936,0,c	;volatile
  6836                           
  6837                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
  6838  0107AA  0100               	movlb	0	; () banked
  6839  0107AC  EE20 F004          	lfsr	2,4
  6840  0107B0  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6841  0107B2  26D9               	addwf	fsr2l,f,c
  6842  0107B4  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6843  0107B6  22DA               	addwfc	fsr2h,f,c
  6844  0107B8  50DF               	movf	indf2,w,c
  6845  0107BA  6FB2               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6846  0107BC  6BB3               	clrf	(??_Sensor_scheduleNextScan+1)& (0+255),b
  6847  0107BE  0E09               	movlw	9
  6848  0107C0                     u5395:
  6849  0107C0  90D8               	bcf	status,0,c
  6850  0107C2  37B2               	rlcf	??_Sensor_scheduleNextScan& (0+255),f,b
  6851  0107C4  37B3               	rlcf	(??_Sensor_scheduleNextScan+1)& (0+255),f,b
  6852  0107C6  2EE8               	decfsz	wreg,f,c
  6853  0107C8  D7FB               	goto	u5395
  6854  0107CA  C0B2  FF70         	movff	??_Sensor_scheduleNextScan,3952	;volatile
  6855  0107CE  C0B3  FF71         	movff	??_Sensor_scheduleNextScan+1,3953	;volatile
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;mtouch_sensor.c: 390: GIE = state;
  6859  0107D2  A1B4               	btfss	Sensor_scheduleNextScan@state& (0+255),0,b
  6860  0107D4  D002               	goto	u5400
  6861  0107D6  8EF2               	bsf	intcon,7,c	;volatile
  6862  0107D8  D001               	goto	u5415
  6863  0107DA                     u5400:
  6864  0107DA  9EF2               	bcf	intcon,7,c	;volatile
  6865  0107DC                     u5415:
  6866                           
  6867                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
  6868  0107DC  0E00               	movlw	0
  6869  0107DE  6E39               	movwf	_scanInterrupted,c	;volatile
  6870  0107E0  0012               	return	
  6871  0107E2                     __end_of_Sensor_scheduleNextScan:
  6872                           	opt stack 0
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           postdec1	equ	0xFE5
  6883                           fsr1l	equ	0xFE1
  6884                           indf2	equ	0xFDF
  6885                           postinc2	equ	0xFDE
  6886                           postdec2	equ	0xFDD
  6887                           fsr2h	equ	0xFDA
  6888                           fsr2l	equ	0xFD9
  6889                           status	equ	0xFD8
  6890                           
  6891 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  6892 ;; Defined at:
  6893 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;  sensor          2    0[BANK0 ] PTR struct .
  6896 ;;		 -> mtouch_sensor(45), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      unsigned char 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6908 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6912 ;;Total ram usage:        2 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    5
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_Sensor_scheduleNextScan
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text38
  6923  012328                     __ptext38:
  6924                           	opt stack 0
  6925  012328                     _Sensor_isCalibratingAcqTime:
  6926                           	opt stack 22
  6927                           
  6928                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
  6929                           
  6930                           ;incstack = 0
  6931  012328  0100               	movlb	0	; () banked
  6932  01232A  EE20 F008          	lfsr	2,8
  6933  01232E  51B0               	movf	Sensor_isCalibratingAcqTime@sensor& (0+255),w,b
  6934  012330  26D9               	addwf	fsr2l,f,c
  6935  012332  51B1               	movf	(Sensor_isCalibratingAcqTime@sensor+1)& (0+255),w,b
  6936  012334  22DA               	addwfc	fsr2h,f,c
  6937  012336  A8DF               	btfss	indf2,4,c
  6938  012338  D002               	goto	u4650
  6939  01233A  0E01               	movlw	1
  6940  01233C  0012               	return	
  6941  01233E                     u4650:
  6942  01233E  0E00               	movlw	0
  6943  012340  0012               	return	
  6944  012342                     __end_of_Sensor_isCalibratingAcqTime:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           postdec1	equ	0xFE5
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _Sensor_isCalibrated *****************
  6965 ;; Defined at:
  6966 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  sensor          2    0[BANK0 ] PTR struct .
  6969 ;;		 -> mtouch_sensor(45), 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      unsigned char 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6981 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6984 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6985 ;;Total ram usage:        2 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    5
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_Sensor_scheduleNextScan
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text39
  6996  012342                     __ptext39:
  6997                           	opt stack 0
  6998  012342                     _Sensor_isCalibrated:
  6999                           	opt stack 22
  7000                           
  7001                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;incstack = 0
  7005  012342  0100               	movlb	0	; () banked
  7006  012344  EE20 F008          	lfsr	2,8
  7007  012348  51B0               	movf	Sensor_isCalibrated@sensor& (0+255),w,b
  7008  01234A  26D9               	addwf	fsr2l,f,c
  7009  01234C  51B1               	movf	(Sensor_isCalibrated@sensor+1)& (0+255),w,b
  7010  01234E  22DA               	addwfc	fsr2h,f,c
  7011  012350  A6DF               	btfss	indf2,3,c
  7012  012352  D002               	goto	u4640
  7013  012354  0E01               	movlw	1
  7014  012356  0012               	return	
  7015  012358                     u4640:
  7016  012358  0E00               	movlw	0
  7017  01235A  0012               	return	
  7018  01235C                     __end_of_Sensor_isCalibrated:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postdec1	equ	0xFE5
  7030                           fsr1l	equ	0xFE1
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           postdec2	equ	0xFDD
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8
  7037                           
  7038 ;; *************** function _Sensor_SetTrisBit *****************
  7039 ;; Defined at:
  7040 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  sensor          1    wreg     enum E17513
  7043 ;;  TrisBit         1    0[BANK0 ] unsigned char 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  sensor          1    1[BANK0 ] enum E17513
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7055 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7059 ;;Total ram usage:        2 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    5
  7062 ;; This function calls:
  7063 ;;		Nothing
  7064 ;; This function is called by:
  7065 ;;		_Sensor_scheduleNextScan
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text40
  7070  011910                     __ptext40:
  7071                           	opt stack 0
  7072  011910                     _Sensor_SetTrisBit:
  7073                           	opt stack 22
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;incstack = 0
  7077                           ;Sensor_SetTrisBit@sensor stored from wreg
  7078  011910  0100               	movlb	0	; () banked
  7079  011912  6FB1               	movwf	Sensor_SetTrisBit@sensor& (0+255),b
  7080                           
  7081                           ;mtouch_sensor.c: 224: switch(sensor)
  7082  011914  D01E               	goto	l555
  7083  011916                     l556:
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
  7087  011916  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7088  011918  D002               	bra	u4545
  7089  01191A  9485               	bcf	3973,2,c	;volatile
  7090  01191C  D001               	bra	u4546
  7091  01191E                     u4545:
  7092  01191E  8485               	bsf	3973,2,c	;volatile
  7093  011920                     u4546:
  7094                           
  7095                           ;mtouch_sensor.c: 228: break;
  7096  011920  0012               	return	
  7097  011922                     l558:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
  7101  011922  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7102  011924  D002               	bra	u4555
  7103  011926  9685               	bcf	3973,3,c	;volatile
  7104  011928  D001               	bra	u4556
  7105  01192A                     u4555:
  7106  01192A  8685               	bsf	3973,3,c	;volatile
  7107  01192C                     u4556:
  7108                           
  7109                           ;mtouch_sensor.c: 231: break;
  7110  01192C  0012               	return	
  7111  01192E                     l559:
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
  7115  01192E  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7116  011930  D002               	bra	u4565
  7117  011932  9885               	bcf	3973,4,c	;volatile
  7118  011934  D001               	bra	u4566
  7119  011936                     u4565:
  7120  011936  8885               	bsf	3973,4,c	;volatile
  7121  011938                     u4566:
  7122                           
  7123                           ;mtouch_sensor.c: 234: break;
  7124  011938  0012               	return	
  7125  01193A                     l560:
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
  7129  01193A  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7130  01193C  D002               	bra	u4575
  7131  01193E  9A85               	bcf	3973,5,c	;volatile
  7132  011940  D001               	bra	u4576
  7133  011942                     u4575:
  7134  011942  8A85               	bsf	3973,5,c	;volatile
  7135  011944                     u4576:
  7136                           
  7137                           ;mtouch_sensor.c: 237: break;
  7138  011944  0012               	return	
  7139  011946                     l561:
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
  7143  011946  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7144  011948  D002               	bra	u4585
  7145  01194A  9C85               	bcf	3973,6,c	;volatile
  7146  01194C  D001               	bra	u4586
  7147  01194E                     u4585:
  7148  01194E  8C85               	bsf	3973,6,c	;volatile
  7149  011950                     u4586:
  7150                           
  7151                           ;mtouch_sensor.c: 242: }
  7152                           
  7153                           ;mtouch_sensor.c: 241: default: break;
  7154                           
  7155                           ;mtouch_sensor.c: 240: break;
  7156  011950  0012               	return	
  7157  011952                     l555:
  7158  011952  0100               	movlb	0	; () banked
  7159  011954  51B1               	movf	Sensor_SetTrisBit@sensor& (0+255),w,b
  7160                           
  7161                           ; Switch size 1, requested type "space"
  7162                           ; Number of cases is 5, Range of values is 0 to 4
  7163                           ; switch strategies available:
  7164                           ; Name         Instructions Cycles
  7165                           ; simple_byte           16     9 (average)
  7166                           ;	Chosen strategy is simple_byte
  7167  011956  0A00               	xorlw	0	; case 0
  7168  011958  B4D8               	btfsc	status,2,c
  7169  01195A  D7DD               	goto	l556
  7170  01195C  0A01               	xorlw	1	; case 1
  7171  01195E  B4D8               	btfsc	status,2,c
  7172  011960  D7E0               	goto	l558
  7173  011962  0A03               	xorlw	3	; case 2
  7174  011964  B4D8               	btfsc	status,2,c
  7175  011966  D7E3               	goto	l559
  7176  011968  0A01               	xorlw	1	; case 3
  7177  01196A  B4D8               	btfsc	status,2,c
  7178  01196C  D7E6               	goto	l560
  7179  01196E  0A07               	xorlw	7	; case 4
  7180  011970  A4D8               	btfss	status,2,c
  7181  011972  0012               	return	
  7182  011974  D7E8               	goto	l561
  7183  011976                     __end_of_Sensor_SetTrisBit:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  7204 ;; Defined at:
  7205 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  sensor          1    wreg     enum E17513
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  sensor          1    0[BANK0 ] enum E17513
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      unsigned char 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    5
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_MTOUCH_Sensor_SampleAll
  7230 ;;		_Sensor_scheduleNextScan
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text41
  7235  011F92                     __ptext41:
  7236                           	opt stack 0
  7237  011F92                     _MTOUCH_Sensor_isEnabled:
  7238                           	opt stack 22
  7239                           
  7240                           ;incstack = 0
  7241                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  7242  011F92  0100               	movlb	0	; () banked
  7243  011F94  6FB0               	movwf	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7244                           
  7245                           ;mtouch_sensor.c: 719: if(sensor < 5)
  7246  011F96  0E05               	movlw	5
  7247  011F98  0100               	movlb	0	; () banked
  7248  011F9A  61B0               	cpfslt	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7249  011F9C  D012               	goto	l703
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
  7253  011F9E  51B0               	movf	MTOUCH_Sensor_isEnabled@sensor& (0+255),w,b
  7254  011FA0  0D09               	mullw	9
  7255  011FA2  0E08               	movlw	8
  7256  011FA4  26F3               	addwf	prodl,f,c
  7257  011FA6  0E00               	movlw	0
  7258  011FA8  22F4               	addwfc	prodh,f,c
  7259  011FAA  0E83               	movlw	low _mtouch_sensor
  7260  011FAC  24F3               	addwf	prodl,w,c
  7261  011FAE  6ED9               	movwf	fsr2l,c
  7262  011FB0  0E00               	movlw	high _mtouch_sensor
  7263  011FB2  20F4               	addwfc	prodh,w,c
  7264  011FB4  6EDA               	movwf	fsr2h,c
  7265  011FB6  A0DF               	btfss	indf2,0,c
  7266  011FB8  D002               	goto	u4630
  7267  011FBA  0E01               	movlw	1
  7268  011FBC  0012               	return	
  7269  011FBE                     u4630:
  7270  011FBE  0E00               	movlw	0
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275  011FC0  0012               	return	
  7276  011FC2                     l703:
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;mtouch_sensor.c: 721: else
  7280                           ;mtouch_sensor.c: 722: return 0;
  7281                           
  7282                           ; BSR set to: 0
  7283  011FC2  0E00               	movlw	0
  7284                           
  7285                           ; BSR set to: 0
  7286  011FC4  0012               	return	
  7287  011FC6                     __end_of_MTOUCH_Sensor_isEnabled:
  7288                           	opt stack 0
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodh	equ	0xFF4
  7294                           prodl	equ	0xFF3
  7295                           intcon	equ	0xFF2
  7296                           postinc0	equ	0xFEE
  7297                           wreg	equ	0xFE8
  7298                           postdec1	equ	0xFE5
  7299                           fsr1l	equ	0xFE1
  7300                           indf2	equ	0xFDF
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           
  7307 ;; *************** function _Sensor_FrequencyHopping *****************
  7308 ;; Defined at:
  7309 ;;		line 595 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;		None
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  sensor          1   20[BANK0 ] enum E17513
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  1    wreg      void 
  7316 ;; Registers used:
  7317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7327 ;;Total ram usage:        1 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    8
  7330 ;; This function calls:
  7331 ;;		_Sensor_FrequencyHopping_Autotune_Process
  7332 ;;		_Sensor_postAcquisitionProcess
  7333 ;;		_Sensor_setSamplePeriod
  7334 ;; This function is called by:
  7335 ;;		_MTOUCH_Sensor_SampleAll
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text42
  7340  012268                     __ptext42:
  7341                           	opt stack 0
  7342  012268                     _Sensor_FrequencyHopping:
  7343                           	opt stack 20
  7344                           
  7345                           ;mtouch_sensor.c: 597: enum mtouch_sensor_names sensor;
  7346                           ;mtouch_sensor.c: 599: Sensor_FrequencyHopping_Autotune_Process();
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;incstack = 0
  7350  012268  EC76  F082         	call	_Sensor_FrequencyHopping_Autotune_Process	;wreg free
  7351                           
  7352                           ;mtouch_sensor.c: 601: for (sensor = 0; sensor < 5; sensor++)
  7353  01226C  0E00               	movlw	0
  7354  01226E  0100               	movlb	0	; () banked
  7355  012270  6FC4               	movwf	Sensor_FrequencyHopping@sensor& (0+255),b
  7356  012272                     l4911:
  7357                           
  7358                           ; BSR set to: 0
  7359  012272  0E04               	movlw	4
  7360  012274  65C4               	cpfsgt	Sensor_FrequencyHopping@sensor& (0+255),b
  7361  012276  D001               	goto	l658
  7362  012278  D006               	goto	u5430
  7363  01227A                     l658:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;mtouch_sensor.c: 602: {
  7367                           ;mtouch_sensor.c: 603: Sensor_postAcquisitionProcess(sensor);
  7368                           
  7369                           ; BSR set to: 0
  7370  01227A  51C4               	movf	Sensor_FrequencyHopping@sensor& (0+255),w,b
  7371  01227C  EC1F  F089         	call	_Sensor_postAcquisitionProcess
  7372  012280  0100               	movlb	0	; () banked
  7373  012282  2BC4               	incf	Sensor_FrequencyHopping@sensor& (0+255),f,b
  7374  012284  D7F6               	goto	l4911
  7375  012286                     u5430:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;mtouch_sensor.c: 604: }
  7379                           ;mtouch_sensor.c: 606: Sensor_setSamplePeriod();
  7380                           
  7381                           ; BSR set to: 0
  7382  012286  EC46  F091         	call	_Sensor_setSamplePeriod	;wreg free
  7383  01228A  0012               	return		;funcret
  7384  01228C                     __end_of_Sensor_FrequencyHopping:
  7385                           	opt stack 0
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           intcon	equ	0xFF2
  7393                           postinc0	equ	0xFEE
  7394                           wreg	equ	0xFE8
  7395                           postdec1	equ	0xFE5
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           postdec2	equ	0xFDD
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404 ;; *************** function _Sensor_setSamplePeriod *****************
  7405 ;; Defined at:
  7406 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7424 ;;Total ram usage:        0 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    5
  7427 ;; This function calls:
  7428 ;;		Nothing
  7429 ;; This function is called by:
  7430 ;;		_Sensor_FrequencyHopping
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text43
  7435  01228C                     __ptext43:
  7436                           	opt stack 0
  7437  01228C                     _Sensor_setSamplePeriod:
  7438                           	opt stack 22
  7439                           
  7440                           ;mtouch_sensor.c: 522: if(++freq_index >= sizeof(freq_hop) )
  7441                           
  7442                           ;incstack = 0
  7443  01228C  0100               	movlb	0	; () banked
  7444  01228E  2B81               	incf	_freq_index& (0+255),f,b
  7445  012290  0E02               	movlw	2
  7446  012292  6581               	cpfsgt	_freq_index& (0+255),b
  7447  012294  D002               	goto	l628
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;mtouch_sensor.c: 523: freq_index = 0;
  7451  012296  0E00               	movlw	0
  7452  012298  6F81               	movwf	_freq_index& (0+255),b
  7453  01229A                     l628:
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;mtouch_sensor.c: 525: sample_delay = freq_hop[freq_index];
  7457                           
  7458                           ; BSR set to: 0
  7459  01229A  5181               	movf	_freq_index& (0+255),w,b
  7460  01229C  0D01               	mullw	1
  7461  01229E  0EDE               	movlw	low _freq_hop
  7462  0122A0  24F3               	addwf	prodl,w,c
  7463  0122A2  6ED9               	movwf	fsr2l,c
  7464  0122A4  0E00               	movlw	high _freq_hop
  7465  0122A6  20F4               	addwfc	prodh,w,c
  7466  0122A8  6EDA               	movwf	fsr2h,c
  7467  0122AA  50DF               	movf	indf2,w,c
  7468  0122AC  6E38               	movwf	_sample_delay,c
  7469                           
  7470                           ; BSR set to: 0
  7471  0122AE  0012               	return		;funcret
  7472  0122B0                     __end_of_Sensor_setSamplePeriod:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1l	equ	0xFE1
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function _Sensor_postAcquisitionProcess *****************
  7493 ;; Defined at:
  7494 ;;		line 450 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  name            1    wreg     enum E17513
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  name            1   17[BANK0 ] enum E17513
  7499 ;;  sensor          2   18[BANK0 ] PTR struct .
  7500 ;;		 -> mtouch_sensor(45), 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7511 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;Total ram usage:        9 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    7
  7517 ;; This function calls:
  7518 ;;		_Sensor_DefaultCallback
  7519 ;;		_Sensor_RawSample_Update
  7520 ;;		_Sensor_isEnabled
  7521 ;;		_Sensor_setActive
  7522 ;;		_Sensor_setInactive
  7523 ;;		_abs
  7524 ;; This function is called by:
  7525 ;;		_Sensor_FrequencyHopping
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text44
  7530  01123E                     __ptext44:
  7531                           	opt stack 0
  7532  01123E                     _Sensor_postAcquisitionProcess:
  7533                           	opt stack 20
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;incstack = 0
  7537                           ;Sensor_postAcquisitionProcess@name stored from wreg
  7538  01123E  0100               	movlb	0	; () banked
  7539  011240  6FC1               	movwf	Sensor_postAcquisitionProcess@name& (0+255),b
  7540                           
  7541                           ;mtouch_sensor.c: 452: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  7542  011242  0100               	movlb	0	; () banked
  7543  011244  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7544  011246  0D09               	mullw	9
  7545  011248  0E83               	movlw	low _mtouch_sensor
  7546  01124A  24F3               	addwf	prodl,w,c
  7547  01124C  6FC2               	movwf	Sensor_postAcquisitionProcess@sensor& (0+255),b
  7548  01124E  0E00               	movlw	high _mtouch_sensor
  7549  011250  20F4               	addwfc	prodh,w,c
  7550  011252  6FC3               	movwf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),b
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;mtouch_sensor.c: 454: if(Sensor_isEnabled(sensor))
  7554  011254  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_isEnabled@sensor
  7555  011258  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_isEnabled@sensor+1
  7556  01125C  EC21  F091         	call	_Sensor_isEnabled	;wreg free
  7557  011260  0900               	iorlw	0
  7558  011262  B4D8               	btfsc	status,2,c
  7559  011264  D05A               	goto	l608
  7560                           
  7561                           ;mtouch_sensor.c: 455: {
  7562                           ;mtouch_sensor.c: 456: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - sensor
      +                          ->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<2))
  7563  011266  0100               	movlb	0	; () banked
  7564  011268  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7565  01126A  0D02               	mullw	2
  7566  01126C  0E29               	movlw	low _packet_sample
  7567  01126E  24F3               	addwf	prodl,w,c
  7568  011270  6ED9               	movwf	fsr2l,c
  7569  011272  0E00               	movlw	high _packet_sample
  7570  011274  20F4               	addwfc	prodh,w,c
  7571  011276  6EDA               	movwf	fsr2h,c
  7572  011278  CFDE F0BB          	movff	postinc2,??_Sensor_postAcquisitionProcess
  7573  01127C  CFDD F0BC          	movff	postdec2,??_Sensor_postAcquisitionProcess+1
  7574  011280  EE20 F006          	lfsr	2,6
  7575  011284  51C2               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7576  011286  26D9               	addwf	fsr2l,f,c
  7577  011288  51C3               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7578  01128A  22DA               	addwfc	fsr2h,f,c
  7579  01128C  CFDE F0BD          	movff	postinc2,??_Sensor_postAcquisitionProcess+2
  7580  011290  CFDD F0BE          	movff	postdec2,??_Sensor_postAcquisitionProcess+3
  7581  011294  1FBD               	comf	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7582  011296  1FBE               	comf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7583  011298  4BBD               	infsnz	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7584  01129A  2BBE               	incf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7585  01129C  51BB               	movf	??_Sensor_postAcquisitionProcess& (0+255),w,b
  7586  01129E  25BD               	addwf	(??_Sensor_postAcquisitionProcess+2)& (0+255),w,b
  7587  0112A0  6FB0               	movwf	abs@a& (0+255),b
  7588  0112A2  51BC               	movf	(??_Sensor_postAcquisitionProcess+1)& (0+255),w,b
  7589  0112A4  21BE               	addwfc	(??_Sensor_postAcquisitionProcess+3)& (0+255),w,b
  7590  0112A6  6FB1               	movwf	(abs@a+1)& (0+255),b
  7591  0112A8  ECA8  F090         	call	_abs	;wreg free
  7592  0112AC  0100               	movlb	0	; () banked
  7593  0112AE  EE20 F004          	lfsr	2,4
  7594  0112B2  51C2               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7595  0112B4  26D9               	addwf	fsr2l,f,c
  7596  0112B6  51C3               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7597  0112B8  22DA               	addwfc	fsr2h,f,c
  7598  0112BA  50DF               	movf	indf2,w,c
  7599  0112BC  6FBF               	movwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),b
  7600  0112BE  6BC0               	clrf	(??_Sensor_postAcquisitionProcess+5)& (0+255),b
  7601  0112C0  90D8               	bcf	status,0,c
  7602  0112C2  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7603  0112C4  37C0               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7604  0112C6  90D8               	bcf	status,0,c
  7605  0112C8  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7606  0112CA  37C0               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7607  0112CC  51B0               	movf	?_abs& (0+255),w,b
  7608  0112CE  5DBF               	subwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),w,b
  7609  0112D0  51B1               	movf	(?_abs+1)& (0+255),w,b
  7610  0112D2  59C0               	subwfb	(??_Sensor_postAcquisitionProcess+5)& (0+255),w,b
  7611  0112D4  B0D8               	btfsc	status,0,c
  7612  0112D6  D007               	goto	l609
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;mtouch_sensor.c: 457: Sensor_setActive(sensor);
  7616  0112D8  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setActive@sensor
  7617  0112DC  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setActive@sensor+1
  7618  0112E0  ECFA  F091         	call	_Sensor_setActive	;wreg free
  7619  0112E4  D006               	goto	l610
  7620  0112E6                     l609:
  7621                           
  7622                           ;mtouch_sensor.c: 458: else
  7623                           ;mtouch_sensor.c: 459: Sensor_setInactive(sensor);
  7624  0112E6  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7625  0112EA  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7626  0112EE  ECF1  F091         	call	_Sensor_setInactive	;wreg free
  7627  0112F2                     l610:
  7628                           
  7629                           ;mtouch_sensor.c: 461: Sensor_RawSample_Update(sensor);
  7630  0112F2  C0C2  F0B7         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_RawSample_Update@sensor
  7631  0112F6  C0C3  F0B8         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_RawSample_Update@sensor+1
  7632  0112FA  EC16  F08E         	call	_Sensor_RawSample_Update	;wreg free
  7633                           
  7634                           ;mtouch_sensor.c: 462: callback_sampled(name);
  7635  0112FE  D801               	call	u4688
  7636  011300  0012               	return	
  7637  011302                     u4688:
  7638  011302  0005               	push	
  7639  011304  6EFA               	movwf	pclath,c
  7640  011306  5048               	movf	_callback_sampled,w,c
  7641  011308  6EFD               	movwf	tosl,c
  7642  01130A  5049               	movf	_callback_sampled+1,w,c
  7643  01130C  6EFE               	movwf	tosh,c
  7644  01130E  504A               	movf	_callback_sampled+2,w,c
  7645  011310  6EFF               	movwf	tosu,c
  7646  011312  50FA               	movf	pclath,w,c
  7647  011314  0100               	movlb	0	; () banked
  7648  011316  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7649  011318  0012               	return		;indir
  7650  01131A                     l608:
  7651                           
  7652                           ;mtouch_sensor.c: 464: else
  7653                           ;mtouch_sensor.c: 465: {
  7654                           ;mtouch_sensor.c: 466: Sensor_setInactive(sensor);
  7655  01131A  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7656  01131E  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7657  011322  ECF1  F091         	call	_Sensor_setInactive
  7658  011326  0012               	return	
  7659  011328                     __end_of_Sensor_postAcquisitionProcess:
  7660                           	opt stack 0
  7661                           tosu	equ	0xFFF
  7662                           tosh	equ	0xFFE
  7663                           tosl	equ	0xFFD
  7664                           pclath	equ	0xFFA
  7665                           tblptru	equ	0xFF8
  7666                           tblptrh	equ	0xFF7
  7667                           tblptrl	equ	0xFF6
  7668                           tablat	equ	0xFF5
  7669                           prodh	equ	0xFF4
  7670                           prodl	equ	0xFF3
  7671                           intcon	equ	0xFF2
  7672                           postinc0	equ	0xFEE
  7673                           wreg	equ	0xFE8
  7674                           postdec1	equ	0xFE5
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function _Sensor_setInactive *****************
  7684 ;; Defined at:
  7685 ;;		line 745 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  sensor          2    0[BANK0 ] PTR struct .
  7688 ;;		 -> mtouch_sensor(45), 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;Total ram usage:        2 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    5
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_Sensor_postAcquisitionProcess
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text45
  7715  0123E2                     __ptext45:
  7716                           	opt stack 0
  7717  0123E2                     _Sensor_setInactive:
  7718                           	opt stack 21
  7719                           
  7720                           ;mtouch_sensor.c: 747: sensor->acitve = 0;
  7721                           
  7722                           ;incstack = 0
  7723  0123E2  0100               	movlb	0	; () banked
  7724  0123E4  EE20 F008          	lfsr	2,8
  7725  0123E8  51B0               	movf	Sensor_setInactive@sensor& (0+255),w,b
  7726  0123EA  26D9               	addwf	fsr2l,f,c
  7727  0123EC  51B1               	movf	(Sensor_setInactive@sensor+1)& (0+255),w,b
  7728  0123EE  22DA               	addwfc	fsr2h,f,c
  7729  0123F0  94DF               	bcf	indf2,2,c
  7730                           
  7731                           ; BSR set to: 0
  7732  0123F2  0012               	return		;funcret
  7733  0123F4                     __end_of_Sensor_setInactive:
  7734                           	opt stack 0
  7735                           tosu	equ	0xFFF
  7736                           tosh	equ	0xFFE
  7737                           tosl	equ	0xFFD
  7738                           pclath	equ	0xFFA
  7739                           tblptru	equ	0xFF8
  7740                           tblptrh	equ	0xFF7
  7741                           tblptrl	equ	0xFF6
  7742                           tablat	equ	0xFF5
  7743                           prodh	equ	0xFF4
  7744                           prodl	equ	0xFF3
  7745                           intcon	equ	0xFF2
  7746                           postinc0	equ	0xFEE
  7747                           wreg	equ	0xFE8
  7748                           postdec1	equ	0xFE5
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _Sensor_setActive *****************
  7758 ;; Defined at:
  7759 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  sensor          2    0[BANK0 ] PTR struct .
  7762 ;;		 -> mtouch_sensor(45), 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7778 ;;Total ram usage:        2 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    5
  7781 ;; This function calls:
  7782 ;;		Nothing
  7783 ;; This function is called by:
  7784 ;;		_Sensor_postAcquisitionProcess
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text46
  7789  0123F4                     __ptext46:
  7790                           	opt stack 0
  7791  0123F4                     _Sensor_setActive:
  7792                           	opt stack 21
  7793                           
  7794                           ;mtouch_sensor.c: 742: sensor->acitve = 1;
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;incstack = 0
  7798  0123F4  0100               	movlb	0	; () banked
  7799  0123F6  EE20 F008          	lfsr	2,8
  7800  0123FA  51B0               	movf	Sensor_setActive@sensor& (0+255),w,b
  7801  0123FC  26D9               	addwf	fsr2l,f,c
  7802  0123FE  51B1               	movf	(Sensor_setActive@sensor+1)& (0+255),w,b
  7803  012400  22DA               	addwfc	fsr2h,f,c
  7804  012402  84DF               	bsf	indf2,2,c
  7805                           
  7806                           ; BSR set to: 0
  7807  012404  0012               	return		;funcret
  7808  012406                     __end_of_Sensor_setActive:
  7809                           	opt stack 0
  7810                           tosu	equ	0xFFF
  7811                           tosh	equ	0xFFE
  7812                           tosl	equ	0xFFD
  7813                           pclath	equ	0xFFA
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           postdec1	equ	0xFE5
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _Sensor_isEnabled *****************
  7833 ;; Defined at:
  7834 ;;		line 725 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  sensor          2    0[BANK0 ] PTR struct .
  7837 ;;		 -> mtouch_sensor(45), 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      unsigned char 
  7842 ;; Registers used:
  7843 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7849 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;Total ram usage:        2 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    5
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_Sensor_postAcquisitionProcess
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text47
  7864  012242                     __ptext47:
  7865                           	opt stack 0
  7866  012242                     _Sensor_isEnabled:
  7867                           	opt stack 21
  7868                           
  7869                           ;mtouch_sensor.c: 727: if(sensor!=(0))
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;incstack = 0
  7873  012242  0100               	movlb	0	; () banked
  7874  012244  51B0               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7875  012246  11B1               	iorwf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7876  012248  B4D8               	btfsc	status,2,c
  7877  01224A  D00C               	goto	l708
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;mtouch_sensor.c: 728: return (bool)sensor->enabled;
  7881  01224C  EE20 F008          	lfsr	2,8
  7882  012250  51B0               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7883  012252  26D9               	addwf	fsr2l,f,c
  7884  012254  51B1               	movf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7885  012256  22DA               	addwfc	fsr2h,f,c
  7886  012258  A0DF               	btfss	indf2,0,c
  7887  01225A  D002               	goto	u4470
  7888  01225C  0E01               	movlw	1
  7889  01225E  0012               	return	
  7890  012260                     u4470:
  7891  012260  0E00               	movlw	0
  7892                           
  7893                           ; BSR set to: 0
  7894                           
  7895                           ; BSR set to: 0
  7896  012262  0012               	return	
  7897  012264                     l708:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;mtouch_sensor.c: 729: else
  7901                           ;mtouch_sensor.c: 730: return 0;
  7902                           
  7903                           ; BSR set to: 0
  7904  012264  0E00               	movlw	0
  7905                           
  7906                           ; BSR set to: 0
  7907  012266  0012               	return	
  7908  012268                     __end_of_Sensor_isEnabled:
  7909                           	opt stack 0
  7910                           tosu	equ	0xFFF
  7911                           tosh	equ	0xFFE
  7912                           tosl	equ	0xFFD
  7913                           pclath	equ	0xFFA
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           intcon	equ	0xFF2
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postdec1	equ	0xFE5
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function _Sensor_RawSample_Update *****************
  7933 ;; Defined at:
  7934 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  sensor          2    7[BANK0 ] PTR struct .
  7937 ;;		 -> mtouch_sensor(45), 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  result          2    9[BANK0 ] unsigned int 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      void 
  7942 ;; Registers used:
  7943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7952 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7953 ;;Total ram usage:        4 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    6
  7956 ;; This function calls:
  7957 ;;		_medianFilter
  7958 ;; This function is called by:
  7959 ;;		_Sensor_postAcquisitionProcess
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text48
  7964  011C2C                     __ptext48:
  7965                           	opt stack 0
  7966  011C2C                     _Sensor_RawSample_Update:
  7967                           	opt stack 20
  7968                           
  7969                           ;mtouch_sensor.c: 544: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;incstack = 0
  7973  011C2C  C0B7  FFD9         	movff	Sensor_RawSample_Update@sensor,fsr2l
  7974  011C30  C0B8  FFDA         	movff	Sensor_RawSample_Update@sensor+1,fsr2h
  7975  011C34  50DF               	movf	indf2,w,c
  7976  011C36  EC4C  F081         	call	_medianFilter
  7977  011C3A  C0B0  F0B9         	movff	?_medianFilter,Sensor_RawSample_Update@result
  7978  011C3E  C0B1  F0BA         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  7979                           
  7980                           ;mtouch_sensor.c: 546: if (GIE == (uint8_t)1)
  7981  011C42  AEF2               	btfss	intcon,7,c	;volatile
  7982  011C44  D00E               	goto	l637
  7983                           
  7984                           ;mtouch_sensor.c: 547: {
  7985                           ;mtouch_sensor.c: 548: GIE = (uint8_t)0;
  7986  011C46  9EF2               	bcf	intcon,7,c	;volatile
  7987                           
  7988                           ;mtouch_sensor.c: 549: sensor->rawSample = result;
  7989  011C48  0100               	movlb	0	; () banked
  7990  011C4A  EE20 F006          	lfsr	2,6
  7991  011C4E  51B7               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  7992  011C50  26D9               	addwf	fsr2l,f,c
  7993  011C52  51B8               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  7994  011C54  22DA               	addwfc	fsr2h,f,c
  7995  011C56  C0B9  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  7996  011C5A  C0BA  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;mtouch_sensor.c: 550: GIE = (uint8_t)1;
  8000  011C5E  8EF2               	bsf	intcon,7,c	;volatile
  8001                           
  8002                           ;mtouch_sensor.c: 551: }
  8003  011C60  0012               	return	
  8004  011C62                     l637:
  8005                           
  8006                           ;mtouch_sensor.c: 552: else
  8007                           ;mtouch_sensor.c: 553: {
  8008                           ;mtouch_sensor.c: 554: sensor->rawSample = result;
  8009                           
  8010                           ; BSR set to: 0
  8011  011C62  0100               	movlb	0	; () banked
  8012  011C64  EE20 F006          	lfsr	2,6
  8013  011C68  51B7               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  8014  011C6A  26D9               	addwf	fsr2l,f,c
  8015  011C6C  51B8               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  8016  011C6E  22DA               	addwfc	fsr2h,f,c
  8017  011C70  C0B9  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  8018  011C74  C0BA  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  8019  011C78  0012               	return	
  8020  011C7A                     __end_of_Sensor_RawSample_Update:
  8021                           	opt stack 0
  8022                           tosu	equ	0xFFF
  8023                           tosh	equ	0xFFE
  8024                           tosl	equ	0xFFD
  8025                           pclath	equ	0xFFA
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           postdec1	equ	0xFE5
  8036                           fsr1l	equ	0xFE1
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           
  8044 ;; *************** function _medianFilter *****************
  8045 ;; Defined at:
  8046 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  sensor          1    wreg     enum E17513
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  sensor          1    6[BANK0 ] enum E17513
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  2    0[BANK0 ] unsigned int 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;Total ram usage:        7 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    5
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_Sensor_RawSample_Update
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text49
  8075  010298                     __ptext49:
  8076                           	opt stack 0
  8077  010298                     _medianFilter:
  8078                           	opt stack 20
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;incstack = 0
  8082                           ;medianFilter@sensor stored from wreg
  8083  010298  0100               	movlb	0	; () banked
  8084  01029A  6FB6               	movwf	medianFilter@sensor& (0+255),b
  8085                           
  8086                           ;mtouch_sensor.c: 561: static uint8_t bufferIndex[5];
  8087                           ;mtouch_sensor.c: 563: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
  8088  01029C  0100               	movlb	0	; () banked
  8089  01029E  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8090  0102A0  0D02               	mullw	2
  8091  0102A2  0E29               	movlw	low _packet_sample
  8092  0102A4  24F3               	addwf	prodl,w,c
  8093  0102A6  6ED9               	movwf	fsr2l,c
  8094  0102A8  0E00               	movlw	high _packet_sample
  8095  0102AA  20F4               	addwfc	prodh,w,c
  8096  0102AC  6EDA               	movwf	fsr2h,c
  8097  0102AE  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8098  0102B0  0D06               	mullw	6
  8099  0102B2  0E60               	movlw	low _sensor_medianBuffer
  8100  0102B4  6FB2               	movwf	??_medianFilter& (0+255),b
  8101  0102B6  0E00               	movlw	high _sensor_medianBuffer
  8102  0102B8  6FB3               	movwf	(??_medianFilter+1)& (0+255),b
  8103  0102BA  50F3               	movf	prodl,w,c
  8104  0102BC  27B2               	addwf	??_medianFilter& (0+255),f,b
  8105  0102BE  50F4               	movf	prodh,w,c
  8106  0102C0  23B3               	addwfc	(??_medianFilter+1)& (0+255),f,b
  8107  0102C2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8108  0102C4  0D01               	mullw	1
  8109  0102C6  0E33               	movlw	low medianFilter@bufferIndex
  8110  0102C8  24F3               	addwf	prodl,w,c
  8111  0102CA  6EE1               	movwf	fsr1l,c
  8112  0102CC  0E00               	movlw	high medianFilter@bufferIndex
  8113  0102CE  20F4               	addwfc	prodh,w,c
  8114  0102D0  6EE2               	movwf	fsr1h,c
  8115  0102D2  CFE7 F0B4          	movff	indf1,??_medianFilter+2
  8116  0102D6  0E01               	movlw	1
  8117  0102D8  26E7               	addwf	indf1,f,c
  8118  0102DA  51B4               	movf	(??_medianFilter+2)& (0+255),w,b
  8119  0102DC  0D02               	mullw	2
  8120  0102DE  50F3               	movf	prodl,w,c
  8121  0102E0  25B2               	addwf	??_medianFilter& (0+255),w,b
  8122  0102E2  6EE1               	movwf	fsr1l,c
  8123  0102E4  50F4               	movf	prodh,w,c
  8124  0102E6  21B3               	addwfc	(??_medianFilter+1)& (0+255),w,b
  8125  0102E8  6EE2               	movwf	fsr1h,c
  8126  0102EA  CFDE FFE6          	movff	postinc2,postinc1
  8127  0102EE  CFDD FFE5          	movff	postdec2,postdec1
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;mtouch_sensor.c: 565: if(bufferIndex[sensor]>=3)
  8131  0102F2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8132  0102F4  0D01               	mullw	1
  8133  0102F6  0E33               	movlw	low medianFilter@bufferIndex
  8134  0102F8  24F3               	addwf	prodl,w,c
  8135  0102FA  6ED9               	movwf	fsr2l,c
  8136  0102FC  0E00               	movlw	high medianFilter@bufferIndex
  8137  0102FE  20F4               	addwfc	prodh,w,c
  8138  010300  6EDA               	movwf	fsr2h,c
  8139  010302  0E02               	movlw	2
  8140  010304  64DF               	cpfsgt	indf2,c
  8141  010306  D00A               	goto	l644
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;mtouch_sensor.c: 566: bufferIndex[sensor] = 0;
  8145  010308  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8146  01030A  0D01               	mullw	1
  8147  01030C  0E33               	movlw	low medianFilter@bufferIndex
  8148  01030E  24F3               	addwf	prodl,w,c
  8149  010310  6ED9               	movwf	fsr2l,c
  8150  010312  0E00               	movlw	high medianFilter@bufferIndex
  8151  010314  20F4               	addwfc	prodh,w,c
  8152  010316  6EDA               	movwf	fsr2h,c
  8153  010318  0E00               	movlw	0
  8154  01031A  6EDF               	movwf	indf2,c
  8155  01031C                     l644:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;mtouch_sensor.c: 568: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
  8159                           
  8160                           ; BSR set to: 0
  8161  01031C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8162  01031E  0D06               	mullw	6
  8163  010320  0E02               	movlw	2
  8164  010322  26F3               	addwf	prodl,f,c
  8165  010324  0E00               	movlw	0
  8166  010326  22F4               	addwfc	prodh,f,c
  8167  010328  0E60               	movlw	low _sensor_medianBuffer
  8168  01032A  24F3               	addwf	prodl,w,c
  8169  01032C  6ED9               	movwf	fsr2l,c
  8170  01032E  0E00               	movlw	high _sensor_medianBuffer
  8171  010330  20F4               	addwfc	prodh,w,c
  8172  010332  6EDA               	movwf	fsr2h,c
  8173  010334  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8174  010336  0D06               	mullw	6
  8175  010338  0E60               	movlw	low _sensor_medianBuffer
  8176  01033A  24F3               	addwf	prodl,w,c
  8177  01033C  6EE1               	movwf	fsr1l,c
  8178  01033E  0E00               	movlw	high _sensor_medianBuffer
  8179  010340  20F4               	addwfc	prodh,w,c
  8180  010342  6EE2               	movwf	fsr1h,c
  8181  010344  50DE               	movf	postinc2,w,c
  8182  010346  5CE6               	subwf	postinc1,w,c
  8183  010348  50DE               	movf	postinc2,w,c
  8184  01034A  58E6               	subwfb	postinc1,w,c
  8185  01034C  A0D8               	btfss	status,0,c
  8186  01034E  D067               	goto	l645
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;mtouch_sensor.c: 569: {
  8190                           ;mtouch_sensor.c: 570: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8191  010350  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8192  010352  0D06               	mullw	6
  8193  010354  0E04               	movlw	4
  8194  010356  26F3               	addwf	prodl,f,c
  8195  010358  0E00               	movlw	0
  8196  01035A  22F4               	addwfc	prodh,f,c
  8197  01035C  0E60               	movlw	low _sensor_medianBuffer
  8198  01035E  24F3               	addwf	prodl,w,c
  8199  010360  6ED9               	movwf	fsr2l,c
  8200  010362  0E00               	movlw	high _sensor_medianBuffer
  8201  010364  20F4               	addwfc	prodh,w,c
  8202  010366  6EDA               	movwf	fsr2h,c
  8203  010368  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8204  01036A  0D06               	mullw	6
  8205  01036C  0E02               	movlw	2
  8206  01036E  26F3               	addwf	prodl,f,c
  8207  010370  0E00               	movlw	0
  8208  010372  22F4               	addwfc	prodh,f,c
  8209  010374  0E60               	movlw	low _sensor_medianBuffer
  8210  010376  24F3               	addwf	prodl,w,c
  8211  010378  6EE1               	movwf	fsr1l,c
  8212  01037A  0E00               	movlw	high _sensor_medianBuffer
  8213  01037C  20F4               	addwfc	prodh,w,c
  8214  01037E  6EE2               	movwf	fsr1h,c
  8215  010380  50DE               	movf	postinc2,w,c
  8216  010382  5CE6               	subwf	postinc1,w,c
  8217  010384  50DE               	movf	postinc2,w,c
  8218  010386  58E6               	subwfb	postinc1,w,c
  8219  010388  A0D8               	btfss	status,0,c
  8220  01038A  D011               	goto	l646
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;mtouch_sensor.c: 571: return sensor_medianBuffer[sensor][1];
  8224  01038C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8225  01038E  0D06               	mullw	6
  8226  010390  0E02               	movlw	2
  8227  010392  26F3               	addwf	prodl,f,c
  8228  010394  0E00               	movlw	0
  8229  010396  22F4               	addwfc	prodh,f,c
  8230  010398  0E60               	movlw	low _sensor_medianBuffer
  8231  01039A  24F3               	addwf	prodl,w,c
  8232  01039C  6ED9               	movwf	fsr2l,c
  8233  01039E  0E00               	movlw	high _sensor_medianBuffer
  8234  0103A0  20F4               	addwfc	prodh,w,c
  8235  0103A2  6EDA               	movwf	fsr2h,c
  8236  0103A4  CFDE F0B0          	movff	postinc2,?_medianFilter
  8237  0103A8  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8238                           
  8239                           ; BSR set to: 0
  8240                           
  8241                           ; BSR set to: 0
  8242  0103AC  0012               	return	
  8243  0103AE                     l646:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;mtouch_sensor.c: 572: else
  8247                           ;mtouch_sensor.c: 573: {
  8248                           ;mtouch_sensor.c: 574: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8249                           
  8250                           ; BSR set to: 0
  8251  0103AE  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8252  0103B0  0D06               	mullw	6
  8253  0103B2  0E04               	movlw	4
  8254  0103B4  26F3               	addwf	prodl,f,c
  8255  0103B6  0E00               	movlw	0
  8256  0103B8  22F4               	addwfc	prodh,f,c
  8257  0103BA  0E60               	movlw	low _sensor_medianBuffer
  8258  0103BC  24F3               	addwf	prodl,w,c
  8259  0103BE  6ED9               	movwf	fsr2l,c
  8260  0103C0  0E00               	movlw	high _sensor_medianBuffer
  8261  0103C2  20F4               	addwfc	prodh,w,c
  8262  0103C4  6EDA               	movwf	fsr2h,c
  8263  0103C6  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8264  0103C8  0D06               	mullw	6
  8265  0103CA  0E60               	movlw	low _sensor_medianBuffer
  8266  0103CC  24F3               	addwf	prodl,w,c
  8267  0103CE  6EE1               	movwf	fsr1l,c
  8268  0103D0  0E00               	movlw	high _sensor_medianBuffer
  8269  0103D2  20F4               	addwfc	prodh,w,c
  8270  0103D4  6EE2               	movwf	fsr1h,c
  8271  0103D6  50DE               	movf	postinc2,w,c
  8272  0103D8  5CE6               	subwf	postinc1,w,c
  8273  0103DA  50DE               	movf	postinc2,w,c
  8274  0103DC  58E6               	subwfb	postinc1,w,c
  8275  0103DE  A0D8               	btfss	status,0,c
  8276  0103E0  D011               	goto	l649
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;mtouch_sensor.c: 575: return sensor_medianBuffer[sensor][2];
  8280  0103E2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8281  0103E4  0D06               	mullw	6
  8282  0103E6  0E04               	movlw	4
  8283  0103E8  26F3               	addwf	prodl,f,c
  8284  0103EA  0E00               	movlw	0
  8285  0103EC  22F4               	addwfc	prodh,f,c
  8286  0103EE  0E60               	movlw	low _sensor_medianBuffer
  8287  0103F0  24F3               	addwf	prodl,w,c
  8288  0103F2  6ED9               	movwf	fsr2l,c
  8289  0103F4  0E00               	movlw	high _sensor_medianBuffer
  8290  0103F6  20F4               	addwfc	prodh,w,c
  8291  0103F8  6EDA               	movwf	fsr2h,c
  8292  0103FA  CFDE F0B0          	movff	postinc2,?_medianFilter
  8293  0103FE  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8294                           
  8295                           ; BSR set to: 0
  8296                           
  8297                           ; BSR set to: 0
  8298  010402  0012               	return	
  8299  010404                     l649:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;mtouch_sensor.c: 576: else
  8303                           ;mtouch_sensor.c: 577: return sensor_medianBuffer[sensor][0];
  8304                           
  8305                           ; BSR set to: 0
  8306  010404  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8307  010406  0D06               	mullw	6
  8308  010408  0E60               	movlw	low _sensor_medianBuffer
  8309  01040A  24F3               	addwf	prodl,w,c
  8310  01040C  6ED9               	movwf	fsr2l,c
  8311  01040E  0E00               	movlw	high _sensor_medianBuffer
  8312  010410  20F4               	addwfc	prodh,w,c
  8313  010412  6EDA               	movwf	fsr2h,c
  8314  010414  CFDE F0B0          	movff	postinc2,?_medianFilter
  8315  010418  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;mtouch_sensor.c: 578: }
  8319                           ;mtouch_sensor.c: 580: }
  8320                           
  8321                           ; BSR set to: 0
  8322                           
  8323                           ; BSR set to: 0
  8324  01041C  0012               	return	
  8325  01041E                     l645:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;mtouch_sensor.c: 581: else
  8329                           ;mtouch_sensor.c: 582: {
  8330                           ;mtouch_sensor.c: 583: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8331                           
  8332                           ; BSR set to: 0
  8333  01041E  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8334  010420  0D06               	mullw	6
  8335  010422  0E04               	movlw	4
  8336  010424  26F3               	addwf	prodl,f,c
  8337  010426  0E00               	movlw	0
  8338  010428  22F4               	addwfc	prodh,f,c
  8339  01042A  0E60               	movlw	low _sensor_medianBuffer
  8340  01042C  24F3               	addwf	prodl,w,c
  8341  01042E  6ED9               	movwf	fsr2l,c
  8342  010430  0E00               	movlw	high _sensor_medianBuffer
  8343  010432  20F4               	addwfc	prodh,w,c
  8344  010434  6EDA               	movwf	fsr2h,c
  8345  010436  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8346  010438  0D06               	mullw	6
  8347  01043A  0E60               	movlw	low _sensor_medianBuffer
  8348  01043C  24F3               	addwf	prodl,w,c
  8349  01043E  6EE1               	movwf	fsr1l,c
  8350  010440  0E00               	movlw	high _sensor_medianBuffer
  8351  010442  20F4               	addwfc	prodh,w,c
  8352  010444  6EE2               	movwf	fsr1h,c
  8353  010446  50DE               	movf	postinc2,w,c
  8354  010448  5CE6               	subwf	postinc1,w,c
  8355  01044A  50DE               	movf	postinc2,w,c
  8356  01044C  58E6               	subwfb	postinc1,w,c
  8357  01044E  A0D8               	btfss	status,0,c
  8358  010450  D00D               	goto	l652
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;mtouch_sensor.c: 584: return sensor_medianBuffer[sensor][0];
  8362  010452  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8363  010454  0D06               	mullw	6
  8364  010456  0E60               	movlw	low _sensor_medianBuffer
  8365  010458  24F3               	addwf	prodl,w,c
  8366  01045A  6ED9               	movwf	fsr2l,c
  8367  01045C  0E00               	movlw	high _sensor_medianBuffer
  8368  01045E  20F4               	addwfc	prodh,w,c
  8369  010460  6EDA               	movwf	fsr2h,c
  8370  010462  CFDE F0B0          	movff	postinc2,?_medianFilter
  8371  010466  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8372                           
  8373                           ; BSR set to: 0
  8374                           
  8375                           ; BSR set to: 0
  8376  01046A  0012               	return	
  8377  01046C                     l652:
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;mtouch_sensor.c: 585: else
  8381                           ;mtouch_sensor.c: 586: {
  8382                           ;mtouch_sensor.c: 587: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8383                           
  8384                           ; BSR set to: 0
  8385  01046C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8386  01046E  0D06               	mullw	6
  8387  010470  0E04               	movlw	4
  8388  010472  26F3               	addwf	prodl,f,c
  8389  010474  0E00               	movlw	0
  8390  010476  22F4               	addwfc	prodh,f,c
  8391  010478  0E60               	movlw	low _sensor_medianBuffer
  8392  01047A  24F3               	addwf	prodl,w,c
  8393  01047C  6ED9               	movwf	fsr2l,c
  8394  01047E  0E00               	movlw	high _sensor_medianBuffer
  8395  010480  20F4               	addwfc	prodh,w,c
  8396  010482  6EDA               	movwf	fsr2h,c
  8397  010484  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8398  010486  0D06               	mullw	6
  8399  010488  0E02               	movlw	2
  8400  01048A  26F3               	addwf	prodl,f,c
  8401  01048C  0E00               	movlw	0
  8402  01048E  22F4               	addwfc	prodh,f,c
  8403  010490  0E60               	movlw	low _sensor_medianBuffer
  8404  010492  24F3               	addwf	prodl,w,c
  8405  010494  6EE1               	movwf	fsr1l,c
  8406  010496  0E00               	movlw	high _sensor_medianBuffer
  8407  010498  20F4               	addwfc	prodh,w,c
  8408  01049A  6EE2               	movwf	fsr1h,c
  8409  01049C  50DE               	movf	postinc2,w,c
  8410  01049E  5CE6               	subwf	postinc1,w,c
  8411  0104A0  50DE               	movf	postinc2,w,c
  8412  0104A2  58E6               	subwfb	postinc1,w,c
  8413  0104A4  A0D8               	btfss	status,0,c
  8414  0104A6  D011               	goto	l654
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;mtouch_sensor.c: 588: return sensor_medianBuffer[sensor][2];
  8418  0104A8  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8419  0104AA  0D06               	mullw	6
  8420  0104AC  0E04               	movlw	4
  8421  0104AE  26F3               	addwf	prodl,f,c
  8422  0104B0  0E00               	movlw	0
  8423  0104B2  22F4               	addwfc	prodh,f,c
  8424  0104B4  0E60               	movlw	low _sensor_medianBuffer
  8425  0104B6  24F3               	addwf	prodl,w,c
  8426  0104B8  6ED9               	movwf	fsr2l,c
  8427  0104BA  0E00               	movlw	high _sensor_medianBuffer
  8428  0104BC  20F4               	addwfc	prodh,w,c
  8429  0104BE  6EDA               	movwf	fsr2h,c
  8430  0104C0  CFDE F0B0          	movff	postinc2,?_medianFilter
  8431  0104C4  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8432                           
  8433                           ; BSR set to: 0
  8434                           
  8435                           ; BSR set to: 0
  8436  0104C8  0012               	return	
  8437  0104CA                     l654:
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;mtouch_sensor.c: 589: else
  8441                           ;mtouch_sensor.c: 590: return sensor_medianBuffer[sensor][1];
  8442                           
  8443                           ; BSR set to: 0
  8444  0104CA  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8445  0104CC  0D06               	mullw	6
  8446  0104CE  0E02               	movlw	2
  8447  0104D0  26F3               	addwf	prodl,f,c
  8448  0104D2  0E00               	movlw	0
  8449  0104D4  22F4               	addwfc	prodh,f,c
  8450  0104D6  0E60               	movlw	low _sensor_medianBuffer
  8451  0104D8  24F3               	addwf	prodl,w,c
  8452  0104DA  6ED9               	movwf	fsr2l,c
  8453  0104DC  0E00               	movlw	high _sensor_medianBuffer
  8454  0104DE  20F4               	addwfc	prodh,w,c
  8455  0104E0  6EDA               	movwf	fsr2h,c
  8456  0104E2  CFDE F0B0          	movff	postinc2,?_medianFilter
  8457  0104E6  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8458                           
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462                           
  8463                           ; BSR set to: 0
  8464  0104EA  0012               	return	
  8465  0104EC                     __end_of_medianFilter:
  8466                           	opt stack 0
  8467                           tosu	equ	0xFFF
  8468                           tosh	equ	0xFFE
  8469                           tosl	equ	0xFFD
  8470                           pclath	equ	0xFFA
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           postinc0	equ	0xFEE
  8479                           wreg	equ	0xFE8
  8480                           indf1	equ	0xFE7
  8481                           postinc1	equ	0xFE6
  8482                           postdec1	equ	0xFE5
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _Sensor_DefaultCallback *****************
  8493 ;; Defined at:
  8494 ;;		line 691 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  sensor          1    wreg     enum E17513
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  sensor          1    0[COMRAM] enum E17513
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		wreg
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;Total ram usage:        0 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    5
  8515 ;; This function calls:
  8516 ;;		Nothing
  8517 ;; This function is called by:
  8518 ;;		_Sensor_postAcquisitionProcess
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text50
  8523  012490                     __ptext50:
  8524                           	opt stack 0
  8525  012490                     _Sensor_DefaultCallback:
  8526                           	opt stack 21
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;incstack = 0
  8530  012490  0012               	return		;funcret
  8531  012492                     __end_of_Sensor_DefaultCallback:
  8532                           	opt stack 0
  8533                           tosu	equ	0xFFF
  8534                           tosh	equ	0xFFE
  8535                           tosl	equ	0xFFD
  8536                           pclath	equ	0xFFA
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           prodh	equ	0xFF4
  8542                           prodl	equ	0xFF3
  8543                           intcon	equ	0xFF2
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           indf1	equ	0xFE7
  8547                           postinc1	equ	0xFE6
  8548                           postdec1	equ	0xFE5
  8549                           fsr1h	equ	0xFE2
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
  8559 ;; Defined at:
  8560 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  maxVariance     2   13[BANK0 ] unsigned int 
  8565 ;;  variance        2   11[BANK0 ] unsigned int 
  8566 ;;  frequencyInd    1   17[BANK0 ] unsigned char 
  8567 ;;  sensor          1   16[BANK0 ] enum E17513
  8568 ;;  selectedFreq    1   15[BANK0 ] unsigned char 
  8569 ;;  newfrequency    1   10[BANK0 ] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8580 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8581 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8582 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8583 ;;Total ram usage:       14 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    6
  8586 ;; This function calls:
  8587 ;;		_abs
  8588 ;; This function is called by:
  8589 ;;		_Sensor_FrequencyHopping
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text51
  8594  0104EC                     __ptext51:
  8595                           	opt stack 0
  8596  0104EC                     _Sensor_FrequencyHopping_Autotune_Process:
  8597                           	opt stack 21
  8598                           
  8599                           ;mtouch_sensor.c: 617: enum mtouch_sensor_names sensor;
  8600                           ;mtouch_sensor.c: 618: uint8_t frequencyIndex;
  8601                           ;mtouch_sensor.c: 619: uint8_t newfrequencyFound,selectedFrequency;
  8602                           ;mtouch_sensor.c: 620: uint16_t variance,maxVariance;
  8603                           ;mtouch_sensor.c: 623: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
  8604                           ;mtouch_sensor.c: 625: maxVariance = 0;
  8605                           
  8606                           ;incstack = 0
  8607  0104EC  0E00               	movlw	0
  8608  0104EE  0100               	movlb	0	; () banked
  8609  0104F0  6FBE               	movwf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),b
  8610  0104F2  0E00               	movlw	0
  8611  0104F4  6FBD               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),b
  8612                           
  8613                           ;mtouch_sensor.c: 627: for(sensor = 0; sensor < 5; sensor++)
  8614  0104F6  0E00               	movlw	0
  8615  0104F8  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8616  0104FA                     l4537:
  8617                           
  8618                           ; BSR set to: 0
  8619  0104FA  0E04               	movlw	4
  8620  0104FC  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8621  0104FE  D001               	goto	l665
  8622  010500  D03F               	goto	u4720
  8623  010502                     l665:
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;mtouch_sensor.c: 628: {
  8627                           ;mtouch_sensor.c: 629: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
  8628                           
  8629                           ; BSR set to: 0
  8630  010502  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8631  010504  0D02               	mullw	2
  8632  010506  0E29               	movlw	low _packet_sample
  8633  010508  24F3               	addwf	prodl,w,c
  8634  01050A  6ED9               	movwf	fsr2l,c
  8635  01050C  0E00               	movlw	high _packet_sample
  8636  01050E  20F4               	addwfc	prodh,w,c
  8637  010510  6EDA               	movwf	fsr2h,c
  8638  010512  CFDE F0B4          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process
  8639  010516  CFDD F0B5          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+1
  8640  01051A  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8641  01051C  0D06               	mullw	6
  8642  01051E  0E60               	movlw	low _sensor_medianBuffer
  8643  010520  6FB6               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),b
  8644  010522  0E00               	movlw	high _sensor_medianBuffer
  8645  010524  6FB7               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),b
  8646  010526  50F3               	movf	prodl,w,c
  8647  010528  27B6               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),f,b
  8648  01052A  50F4               	movf	prodh,w,c
  8649  01052C  23B7               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),f,b
  8650  01052E  5181               	movf	_freq_index& (0+255),w,b
  8651  010530  0D02               	mullw	2
  8652  010532  50F3               	movf	prodl,w,c
  8653  010534  25B6               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),w,b
  8654  010536  6ED9               	movwf	fsr2l,c
  8655  010538  50F4               	movf	prodh,w,c
  8656  01053A  21B7               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),w,b
  8657  01053C  6EDA               	movwf	fsr2h,c
  8658  01053E  CFDE F0B8          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process+4
  8659  010542  CFDD F0B9          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+5
  8660  010546  1FB8               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8661  010548  1FB9               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8662  01054A  4BB8               	infsnz	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8663  01054C  2BB9               	incf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8664  01054E  51B4               	movf	??_Sensor_FrequencyHopping_Autotune_Process& (0+255),w,b
  8665  010550  25B8               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),w,b
  8666  010552  6FB0               	movwf	abs@a& (0+255),b
  8667  010554  51B5               	movf	(??_Sensor_FrequencyHopping_Autotune_Process+1)& (0+255),w,b
  8668  010556  21B9               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),w,b
  8669  010558  6FB1               	movwf	(abs@a+1)& (0+255),b
  8670  01055A  ECA8  F090         	call	_abs	;wreg free
  8671  01055E  C0B0  F0BB         	movff	?_abs,Sensor_FrequencyHopping_Autotune_Process@variance
  8672  010562  C0B1  F0BC         	movff	?_abs+1,Sensor_FrequencyHopping_Autotune_Process@variance+1
  8673                           
  8674                           ;mtouch_sensor.c: 630: if(variance > maxVariance)
  8675  010566  0100               	movlb	0	; () banked
  8676  010568  51BB               	movf	Sensor_FrequencyHopping_Autotune_Process@variance& (0+255),w,b
  8677  01056A  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8678  01056C  51BC               	movf	(Sensor_FrequencyHopping_Autotune_Process@variance+1)& (0+255),w,b
  8679  01056E  59BE               	subwfb	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8680  010570  B0D8               	btfsc	status,0,c
  8681  010572  D004               	goto	l667
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;mtouch_sensor.c: 631: maxVariance = variance;
  8685  010574  C0BB  F0BD         	movff	Sensor_FrequencyHopping_Autotune_Process@variance,Sensor_FrequencyHopping_Autotun
      +                          e_Process@maxVariance
  8686  010578  C0BC  F0BE         	movff	Sensor_FrequencyHopping_Autotune_Process@variance+1,Sensor_FrequencyHopping_Autot
      +                          une_Process@maxVariance+1
  8687  01057C                     l667:
  8688                           
  8689                           ; BSR set to: 0
  8690                           
  8691                           ; BSR set to: 0
  8692  01057C  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),f,b
  8693  01057E  D7BD               	goto	l4537
  8694  010580                     u4720:
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;mtouch_sensor.c: 632: }
  8698                           ;mtouch_sensor.c: 634: if(maxVariance > (mtouch_sensor_packetsample_t)100)
  8699                           
  8700                           ; BSR set to: 0
  8701  010580  51BE               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8702  010582  E104               	bnz	u4730
  8703  010584  0E65               	movlw	101
  8704  010586  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8705  010588  A0D8               	btfss	status,0,c
  8706  01058A  D05A               	goto	l668
  8707  01058C                     u4730:
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;mtouch_sensor.c: 635: {
  8711                           ;mtouch_sensor.c: 636: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
  8712  01058C  5181               	movf	_freq_index& (0+255),w,b
  8713  01058E  0D01               	mullw	1
  8714  010590  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8715  010592  24F3               	addwf	prodl,w,c
  8716  010594  6ED9               	movwf	fsr2l,c
  8717  010596  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8718  010598  20F4               	addwfc	prodh,w,c
  8719  01059A  6EDA               	movwf	fsr2h,c
  8720  01059C  2ADF               	incf	indf2,f,c
  8721  01059E  0E05               	movlw	5
  8722  0105A0  64DF               	cpfsgt	indf2,c
  8723  0105A2  0012               	return	
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;mtouch_sensor.c: 637: {
  8727                           ;mtouch_sensor.c: 638: newfrequencyFound = 0;
  8728  0105A4  0E00               	movlw	0
  8729  0105A6  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;mtouch_sensor.c: 639: selectedFrequency = freq_hop[freq_index];
  8733  0105A8  5181               	movf	_freq_index& (0+255),w,b
  8734  0105AA  0D01               	mullw	1
  8735  0105AC  0EDE               	movlw	low _freq_hop
  8736  0105AE  24F3               	addwf	prodl,w,c
  8737  0105B0  6ED9               	movwf	fsr2l,c
  8738  0105B2  0E00               	movlw	high _freq_hop
  8739  0105B4  20F4               	addwfc	prodh,w,c
  8740  0105B6  6EDA               	movwf	fsr2h,c
  8741  0105B8  50DF               	movf	indf2,w,c
  8742  0105BA  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8743  0105BC                     
  8744                           ; BSR set to: 0
  8745                           ;mtouch_sensor.c: 641: {
  8746                           ;mtouch_sensor.c: 642: if(selectedFrequency>(uint8_t)((mtouch_sensor_time_t)0 << (uint8_
      +                          t)3))
  8747                           
  8748                           ; BSR set to: 0
  8749  0105BC  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8750  0105BE  B4D8               	btfsc	status,2,c
  8751  0105C0  D002               	goto	l671
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;mtouch_sensor.c: 643: selectedFrequency--;
  8755  0105C2  07BF               	decf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),f,b
  8756  0105C4  D002               	goto	l672
  8757  0105C6                     l671:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;mtouch_sensor.c: 644: else
  8761                           ;mtouch_sensor.c: 645: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)3);
  8762                           
  8763                           ; BSR set to: 0
  8764  0105C6  0E78               	movlw	120
  8765  0105C8  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8766  0105CA                     l672:
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;mtouch_sensor.c: 646: newfrequencyFound = 1;
  8770  0105CA  0E01               	movlw	1
  8771  0105CC  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8772                           
  8773                           ;mtouch_sensor.c: 648: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8774  0105CE  0E00               	movlw	0
  8775  0105D0  6FC1               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8776  0105D2                     l4565:
  8777                           
  8778                           ; BSR set to: 0
  8779  0105D2  0E02               	movlw	2
  8780  0105D4  65C1               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8781  0105D6  D001               	goto	l673
  8782  0105D8  D014               	goto	u4790
  8783  0105DA                     l673:
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;mtouch_sensor.c: 649: {
  8787                           ;mtouch_sensor.c: 650: if(frequencyIndex == freq_index)
  8788                           
  8789                           ; BSR set to: 0
  8790  0105DA  5181               	movf	_freq_index& (0+255),w,b
  8791  0105DC  19C1               	xorwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8792  0105DE  B4D8               	btfsc	status,2,c
  8793  0105E0  D00E               	goto	l677
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;mtouch_sensor.c: 654: else if(selectedFrequency==freq_hop[frequencyIndex])
  8797                           
  8798                           ; BSR set to: 0
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;mtouch_sensor.c: 651: {
  8802                           ;mtouch_sensor.c: 653: }
  8803  0105E2  51C1               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8804  0105E4  0D01               	mullw	1
  8805  0105E6  0EDE               	movlw	low _freq_hop
  8806  0105E8  24F3               	addwf	prodl,w,c
  8807  0105EA  6ED9               	movwf	fsr2l,c
  8808  0105EC  0E00               	movlw	high _freq_hop
  8809  0105EE  20F4               	addwfc	prodh,w,c
  8810  0105F0  6EDA               	movwf	fsr2h,c
  8811  0105F2  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8812  0105F4  18DE               	xorwf	postinc2,w,c
  8813  0105F6  A4D8               	btfss	status,2,c
  8814  0105F8  D002               	goto	l677
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;mtouch_sensor.c: 655: {
  8818                           ;mtouch_sensor.c: 656: newfrequencyFound = 0;
  8819  0105FA  0E00               	movlw	0
  8820  0105FC  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8821  0105FE                     l677:
  8822                           
  8823                           ; BSR set to: 0
  8824                           
  8825                           ; BSR set to: 0
  8826                           
  8827                           ; BSR set to: 0
  8828                           
  8829                           ;mtouch_sensor.c: 658: else
  8830                           ;mtouch_sensor.c: 659: {
  8831                           
  8832                           ; BSR set to: 0
  8833  0105FE  2BC1               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8834  010600  D7E8               	goto	l4565
  8835  010602                     u4790:
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;mtouch_sensor.c: 661: }
  8839                           ;mtouch_sensor.c: 662: }
  8840                           ;mtouch_sensor.c: 664: }while(!newfrequencyFound);
  8841                           
  8842                           ; BSR set to: 0
  8843  010602  51BA               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),w,b
  8844  010604  B4D8               	btfsc	status,2,c
  8845  010606  D7DA               	goto	l670
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;mtouch_sensor.c: 666: freq_hop[freq_index] = selectedFrequency;
  8849                           
  8850                           ; BSR set to: 0
  8851  010608  5181               	movf	_freq_index& (0+255),w,b
  8852  01060A  0D01               	mullw	1
  8853  01060C  0EDE               	movlw	low _freq_hop
  8854  01060E  24F3               	addwf	prodl,w,c
  8855  010610  6ED9               	movwf	fsr2l,c
  8856  010612  0E00               	movlw	high _freq_hop
  8857  010614  20F4               	addwfc	prodh,w,c
  8858  010616  6EDA               	movwf	fsr2h,c
  8859  010618  C0BF  FFDF         	movff	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,indf2
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;mtouch_sensor.c: 668: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8863  01061C  0E00               	movlw	0
  8864  01061E  6FC1               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8865  010620                     l4587:
  8866                           
  8867                           ; BSR set to: 0
  8868  010620  0E02               	movlw	2
  8869  010622  65C1               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8870  010624  D001               	goto	l680
  8871  010626  0012               	return	
  8872  010628                     l680:
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;mtouch_sensor.c: 669: {
  8876                           ;mtouch_sensor.c: 670: varianceOverLimitCounter[frequencyIndex] = 0;
  8877                           
  8878                           ; BSR set to: 0
  8879  010628  51C1               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8880  01062A  0D01               	mullw	1
  8881  01062C  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8882  01062E  24F3               	addwf	prodl,w,c
  8883  010630  6ED9               	movwf	fsr2l,c
  8884  010632  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8885  010634  20F4               	addwfc	prodh,w,c
  8886  010636  6EDA               	movwf	fsr2h,c
  8887  010638  0E00               	movlw	0
  8888  01063A  6EDF               	movwf	indf2,c
  8889                           
  8890                           ; BSR set to: 0
  8891  01063C  2BC1               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8892  01063E  D7F0               	goto	l4587
  8893  010640                     l668:
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;mtouch_sensor.c: 674: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
  8897                           
  8898                           ; BSR set to: 0
  8899  010640  51BE               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8900  010642  E119               	bnz	l686
  8901  010644  0E32               	movlw	50
  8902  010646  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8903  010648  B0D8               	btfsc	status,0,c
  8904  01064A  0012               	return	
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;mtouch_sensor.c: 675: {
  8908                           ;mtouch_sensor.c: 677: if(varianceOverLimitCounter[freq_index] > 0)
  8909  01064C  5181               	movf	_freq_index& (0+255),w,b
  8910  01064E  0D01               	mullw	1
  8911  010650  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8912  010652  24F3               	addwf	prodl,w,c
  8913  010654  6ED9               	movwf	fsr2l,c
  8914  010656  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8915  010658  20F4               	addwfc	prodh,w,c
  8916  01065A  6EDA               	movwf	fsr2h,c
  8917  01065C  50DF               	movf	indf2,w,c
  8918  01065E  B4D8               	btfsc	status,2,c
  8919  010660  0012               	return	
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;mtouch_sensor.c: 678: varianceOverLimitCounter[freq_index]--;
  8923  010662  5181               	movf	_freq_index& (0+255),w,b
  8924  010664  0D01               	mullw	1
  8925  010666  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8926  010668  24F3               	addwf	prodl,w,c
  8927  01066A  6ED9               	movwf	fsr2l,c
  8928  01066C  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8929  01066E  20F4               	addwfc	prodh,w,c
  8930  010670  6EDA               	movwf	fsr2h,c
  8931  010672  06DF               	decf	indf2,f,c
  8932                           
  8933                           ; BSR set to: 0
  8934                           
  8935                           ;mtouch_sensor.c: 680: else
  8936                           ;mtouch_sensor.c: 681: {
  8937                           
  8938                           ; BSR set to: 0
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;mtouch_sensor.c: 679: }
  8942  010674  0012               	return	
  8943  010676                     l686:
  8944                           
  8945                           ; BSR set to: 0
  8946  010676  0012               	return		;funcret
  8947  010678                     __end_of_Sensor_FrequencyHopping_Autotune_Process:
  8948                           	opt stack 0
  8949                           tosu	equ	0xFFF
  8950                           tosh	equ	0xFFE
  8951                           tosl	equ	0xFFD
  8952                           pclath	equ	0xFFA
  8953                           tblptru	equ	0xFF8
  8954                           tblptrh	equ	0xFF7
  8955                           tblptrl	equ	0xFF6
  8956                           tablat	equ	0xFF5
  8957                           prodh	equ	0xFF4
  8958                           prodl	equ	0xFF3
  8959                           intcon	equ	0xFF2
  8960                           postinc0	equ	0xFEE
  8961                           wreg	equ	0xFE8
  8962                           indf1	equ	0xFE7
  8963                           postinc1	equ	0xFE6
  8964                           postdec1	equ	0xFE5
  8965                           fsr1h	equ	0xFE2
  8966                           fsr1l	equ	0xFE1
  8967                           indf2	equ	0xFDF
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           fsr2h	equ	0xFDA
  8971                           fsr2l	equ	0xFD9
  8972                           status	equ	0xFD8
  8973                           
  8974 ;; *************** function _abs *****************
  8975 ;; Defined at:
  8976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;  a               2    0[BANK0 ] int 
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;		None
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  2    0[BANK0 ] int 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2, status,0
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8994 ;;Total ram usage:        4 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    5
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_Sensor_postAcquisitionProcess
  9001 ;;		_Sensor_FrequencyHopping_Autotune_Process
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text52
  9006  012150                     __ptext52:
  9007                           	opt stack 0
  9008  012150                     _abs:
  9009                           	opt stack 21
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;incstack = 0
  9013  012150  0100               	movlb	0	; () banked
  9014  012152  AFB1               	btfss	(abs@a+1)& (0+255),7,b
  9015  012154  D00D               	goto	l1041
  9016                           
  9017                           ; BSR set to: 0
  9018  012156  C0B0  F0B2         	movff	abs@a,??_abs
  9019  01215A  C0B1  F0B3         	movff	abs@a+1,??_abs+1
  9020  01215E  1FB2               	comf	??_abs& (0+255),f,b
  9021  012160  1FB3               	comf	(??_abs+1)& (0+255),f,b
  9022  012162  4BB2               	infsnz	??_abs& (0+255),f,b
  9023  012164  2BB3               	incf	(??_abs+1)& (0+255),f,b
  9024  012166  C0B2  F0B0         	movff	??_abs,?_abs
  9025  01216A  C0B3  F0B1         	movff	??_abs+1,?_abs+1
  9026  01216E  0012               	return	
  9027  012170                     l1041:
  9028                           
  9029                           ; BSR set to: 0
  9030  012170  C0B0  F0B0         	movff	abs@a,?_abs
  9031  012174  C0B1  F0B1         	movff	abs@a+1,?_abs+1
  9032                           
  9033                           ; BSR set to: 0
  9034  012178  0012               	return		;funcret
  9035  01217A                     __end_of_abs:
  9036                           	opt stack 0
  9037                           tosu	equ	0xFFF
  9038                           tosh	equ	0xFFE
  9039                           tosl	equ	0xFFD
  9040                           pclath	equ	0xFFA
  9041                           tblptru	equ	0xFF8
  9042                           tblptrh	equ	0xFF7
  9043                           tblptrl	equ	0xFF6
  9044                           tablat	equ	0xFF5
  9045                           prodh	equ	0xFF4
  9046                           prodl	equ	0xFF3
  9047                           intcon	equ	0xFF2
  9048                           postinc0	equ	0xFEE
  9049                           wreg	equ	0xFE8
  9050                           indf1	equ	0xFE7
  9051                           postinc1	equ	0xFE6
  9052                           postdec1	equ	0xFE5
  9053                           fsr1h	equ	0xFE2
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           fsr2h	equ	0xFDA
  9059                           fsr2l	equ	0xFD9
  9060                           status	equ	0xFD8
  9061                           
  9062 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  9063 ;; Defined at:
  9064 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;		None
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      unsigned char 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9082 ;;Total ram usage:        0 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    5
  9085 ;; This function calls:
  9086 ;;		Nothing
  9087 ;; This function is called by:
  9088 ;;		_MTOUCH_Sensor_SampleAll
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           	psect	text53
  9093  01248C                     __ptext53:
  9094                           	opt stack 0
  9095  01248C                     _MTOUCH_Sensor_isSampling:
  9096                           	opt stack 23
  9097                           
  9098                           ;mtouch_sensor.c: 840: return sampling_flag;
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;incstack = 0
  9102  01248C  503A               	movf	_sampling_flag,w,c
  9103  01248E  0012               	return	
  9104  012490                     __end_of_MTOUCH_Sensor_isSampling:
  9105                           	opt stack 0
  9106                           tosu	equ	0xFFF
  9107                           tosh	equ	0xFFE
  9108                           tosl	equ	0xFFD
  9109                           pclath	equ	0xFFA
  9110                           tblptru	equ	0xFF8
  9111                           tblptrh	equ	0xFF7
  9112                           tblptrl	equ	0xFF6
  9113                           tablat	equ	0xFF5
  9114                           prodh	equ	0xFF4
  9115                           prodl	equ	0xFF3
  9116                           intcon	equ	0xFF2
  9117                           postinc0	equ	0xFEE
  9118                           wreg	equ	0xFE8
  9119                           indf1	equ	0xFE7
  9120                           postinc1	equ	0xFE6
  9121                           postdec1	equ	0xFE5
  9122                           fsr1h	equ	0xFE2
  9123                           fsr1l	equ	0xFE1
  9124                           indf2	equ	0xFDF
  9125                           postinc2	equ	0xFDE
  9126                           postdec2	equ	0xFDD
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9132 ;; Defined at:
  9133 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;		None
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  button          1   20[BANK0 ] enum E17454
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  1    wreg      void 
  9140 ;; Registers used:
  9141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9151 ;;Total ram usage:        1 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:    9
  9154 ;; This function calls:
  9155 ;;		_Button_Service
  9156 ;; This function is called by:
  9157 ;;		_MTOUCH_Service_Mainloop
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text54
  9162  01235C                     __ptext54:
  9163                           	opt stack 0
  9164  01235C                     _MTOUCH_Button_ServiceAll:
  9165                           	opt stack 20
  9166                           
  9167                           ;mtouch_button.c: 210: enum mtouch_button_names button;
  9168                           ;mtouch_button.c: 213: for (button = 0; button < 5; button++)
  9169                           
  9170                           ;incstack = 0
  9171  01235C  0E00               	movlw	0
  9172  01235E  0100               	movlb	0	; () banked
  9173  012360  6FC4               	movwf	MTOUCH_Button_ServiceAll@button& (0+255),b
  9174  012362                     l5103:
  9175                           
  9176                           ; BSR set to: 0
  9177  012362  0E04               	movlw	4
  9178  012364  65C4               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  9179  012366  D001               	goto	l832
  9180  012368  0012               	return	
  9181  01236A                     l832:
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;mtouch_button.c: 214: {
  9185                           ;mtouch_button.c: 215: Button_Service(button);
  9186                           
  9187                           ; BSR set to: 0
  9188  01236A  51C4               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  9189  01236C  ECFA  F089         	call	_Button_Service
  9190  012370  0100               	movlb	0	; () banked
  9191  012372  2BC4               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  9192  012374  D7F6               	goto	l5103
  9193  012376                     __end_of_MTOUCH_Button_ServiceAll:
  9194                           	opt stack 0
  9195                           tosu	equ	0xFFF
  9196                           tosh	equ	0xFFE
  9197                           tosl	equ	0xFFD
  9198                           pclath	equ	0xFFA
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           intcon	equ	0xFF2
  9206                           postinc0	equ	0xFEE
  9207                           wreg	equ	0xFE8
  9208                           indf1	equ	0xFE7
  9209                           postinc1	equ	0xFE6
  9210                           postdec1	equ	0xFE5
  9211                           fsr1h	equ	0xFE2
  9212                           fsr1l	equ	0xFE1
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function _Button_Service *****************
  9221 ;; Defined at:
  9222 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;  name            1    wreg     enum E17454
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  name            1   17[BANK0 ] enum E17454
  9227 ;;  button          2   18[BANK0 ] PTR struct .
  9228 ;;		 -> mtouch_button(80), 
  9229 ;; Return value:  Size  Location     Type
  9230 ;;                  1    wreg      void 
  9231 ;; Registers used:
  9232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9239 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9242 ;;Total ram usage:        4 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    8
  9245 ;; This function calls:
  9246 ;;		_Button_Deviation_Update
  9247 ;;		_Button_Reading_Update
  9248 ;;		_Button_State_Initializing
  9249 ;;		_Button_State_NotPressed
  9250 ;;		_Button_State_Pressed
  9251 ;;		_MTOUCH_Button_Initialize
  9252 ;;		_MTOUCH_Sensor_isCalibrated
  9253 ;;		_MTOUCH_Sensor_wasSampled
  9254 ;; This function is called by:
  9255 ;;		_MTOUCH_Button_ServiceAll
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text55
  9260  0113F4                     __ptext55:
  9261                           	opt stack 0
  9262  0113F4                     _Button_Service:
  9263                           	opt stack 20
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;incstack = 0
  9267                           ;Button_Service@name stored from wreg
  9268  0113F4  0100               	movlb	0	; () banked
  9269  0113F6  6FC1               	movwf	Button_Service@name& (0+255),b
  9270                           
  9271                           ;mtouch_button.c: 221: mtouch_button_t* button = &mtouch_button[name];
  9272  0113F8  0100               	movlb	0	; () banked
  9273  0113FA  51C1               	movf	Button_Service@name& (0+255),w,b
  9274  0113FC  0D10               	mullw	16
  9275  0113FE  0E40               	movlw	low _mtouch_button
  9276  011400  24F3               	addwf	prodl,w,c
  9277  011402  6FC2               	movwf	Button_Service@button& (0+255),b
  9278  011404  0E01               	movlw	high _mtouch_button
  9279  011406  20F4               	addwfc	prodh,w,c
  9280  011408  6FC3               	movwf	(Button_Service@button+1)& (0+255),b
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;mtouch_button.c: 223: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  9284  01140A  EE20 F001          	lfsr	2,1
  9285  01140E  51C2               	movf	Button_Service@button& (0+255),w,b
  9286  011410  26D9               	addwf	fsr2l,f,c
  9287  011412  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9288  011414  22DA               	addwfc	fsr2h,f,c
  9289  011416  50DF               	movf	indf2,w,c
  9290  011418  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  9291  01141C  0900               	iorlw	0
  9292  01141E  B4D8               	btfsc	status,2,c
  9293  011420  0012               	return	
  9294  011422  0100               	movlb	0	; () banked
  9295  011424  EE20 F001          	lfsr	2,1
  9296  011428  51C2               	movf	Button_Service@button& (0+255),w,b
  9297  01142A  26D9               	addwf	fsr2l,f,c
  9298  01142C  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9299  01142E  22DA               	addwfc	fsr2h,f,c
  9300  011430  50DF               	movf	indf2,w,c
  9301  011432  ECFD  F08F         	call	_MTOUCH_Sensor_isCalibrated
  9302  011436  0900               	iorlw	0
  9303  011438  B4D8               	btfsc	status,2,c
  9304  01143A  0012               	return	
  9305                           
  9306                           ;mtouch_button.c: 224: {
  9307                           ;mtouch_button.c: 225: Button_Reading_Update(button);
  9308  01143C  C0C2  F0B7         	movff	Button_Service@button,Button_Reading_Update@button
  9309  011440  C0C3  F0B8         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  9310  011444  EC58  F091         	call	_Button_Reading_Update	;wreg free
  9311                           
  9312                           ;mtouch_button.c: 226: Button_Deviation_Update(button);
  9313  011448  C0C2  F0B0         	movff	Button_Service@button,Button_Deviation_Update@button
  9314  01144C  C0C3  F0B1         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  9315  011450  ECA0  F087         	call	_Button_Deviation_Update	;wreg free
  9316                           
  9317                           ;mtouch_button.c: 228: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  9318  011454  0100               	movlb	0	; () banked
  9319  011456  EE20 F002          	lfsr	2,2
  9320  01145A  51C2               	movf	Button_Service@button& (0+255),w,b
  9321  01145C  26D9               	addwf	fsr2l,f,c
  9322  01145E  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9323  011460  22DA               	addwfc	fsr2h,f,c
  9324  011462  0E02               	movlw	2
  9325  011464  64DF               	cpfsgt	indf2,c
  9326  011466  D007               	goto	l838
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;mtouch_button.c: 229: {
  9330                           ;mtouch_button.c: 230: MTOUCH_Button_Initialize(button->name);
  9331  011468  C0C2  FFD9         	movff	Button_Service@button,fsr2l
  9332  01146C  C0C3  FFDA         	movff	Button_Service@button+1,fsr2h
  9333  011470  50DF               	movf	indf2,w,c
  9334  011472  EC15  F08C         	call	_MTOUCH_Button_Initialize
  9335  011476                     l838:
  9336                           
  9337                           ;mtouch_button.c: 231: }
  9338                           ;mtouch_button.c: 232: Button_StateMachine[button->state](button);
  9339  011476  C0C2  F0B9         	movff	Button_Service@button,Button_State_Pressed@button
  9340  01147A  C0C3  F0BA         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  9341  01147E  0100               	movlb	0	; () banked
  9342  011480  EE20 F002          	lfsr	2,2
  9343  011484  51C2               	movf	Button_Service@button& (0+255),w,b
  9344  011486  26D9               	addwf	fsr2l,f,c
  9345  011488  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9346  01148A  22DA               	addwfc	fsr2h,f,c
  9347  01148C  50DF               	movf	indf2,w,c
  9348  01148E  6FC0               	movwf	??_Button_Service& (0+255),b
  9349  011490  51C0               	movf	??_Button_Service& (0+255),w,b
  9350  011492  0D03               	mullw	3
  9351  011494  0ED5               	movlw	low _Button_StateMachine
  9352  011496  24F3               	addwf	prodl,w,c
  9353  011498  6ED9               	movwf	fsr2l,c
  9354  01149A  0E00               	movlw	high _Button_StateMachine
  9355  01149C  20F4               	addwfc	prodh,w,c
  9356  01149E  6EDA               	movwf	fsr2h,c
  9357  0114A0  D801               	call	u5478
  9358  0114A2  0012               	return	
  9359  0114A4                     u5478:
  9360  0114A4  0005               	push	
  9361  0114A6  6EFA               	movwf	pclath,c
  9362  0114A8  50DE               	movf	postinc2,w,c
  9363  0114AA  6EFD               	movwf	tosl,c
  9364  0114AC  50DE               	movf	postinc2,w,c
  9365  0114AE  6EFE               	movwf	tosh,c
  9366  0114B0  50DE               	movf	postinc2,w,c
  9367  0114B2  6EFF               	movwf	tosu,c
  9368  0114B4  50FA               	movf	pclath,w,c
  9369  0114B6  0012               	return		;indir
  9370  0114B8                     __end_of_Button_Service:
  9371                           	opt stack 0
  9372                           tosu	equ	0xFFF
  9373                           tosh	equ	0xFFE
  9374                           tosl	equ	0xFFD
  9375                           pclath	equ	0xFFA
  9376                           tblptru	equ	0xFF8
  9377                           tblptrh	equ	0xFF7
  9378                           tblptrl	equ	0xFF6
  9379                           tablat	equ	0xFF5
  9380                           prodh	equ	0xFF4
  9381                           prodl	equ	0xFF3
  9382                           intcon	equ	0xFF2
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           indf1	equ	0xFE7
  9386                           postinc1	equ	0xFE6
  9387                           postdec1	equ	0xFE5
  9388                           fsr1h	equ	0xFE2
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           fsr2h	equ	0xFDA
  9394                           fsr2l	equ	0xFD9
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9398 ;; Defined at:
  9399 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  sensor          1    wreg     enum E17513
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;  sensor          1    0[BANK0 ] enum E17513
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  1    wreg      unsigned char 
  9406 ;; Registers used:
  9407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9417 ;;Total ram usage:        1 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    5
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_MTOUCH_Sensor_SampleAll
  9424 ;;		_Sensor_scheduleNextScan
  9425 ;;		_Button_Service
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           	psect	text56
  9430  011FC6                     __ptext56:
  9431                           	opt stack 0
  9432  011FC6                     _MTOUCH_Sensor_wasSampled:
  9433                           	opt stack 22
  9434                           
  9435                           ;incstack = 0
  9436                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9437  011FC6  0100               	movlb	0	; () banked
  9438  011FC8  6FB0               	movwf	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9439                           
  9440                           ;mtouch_sensor.c: 822: if(sensor < 5)
  9441  011FCA  0E05               	movlw	5
  9442  011FCC  0100               	movlb	0	; () banked
  9443  011FCE  61B0               	cpfslt	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9444  011FD0  D012               	goto	l749
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
  9448  011FD2  51B0               	movf	MTOUCH_Sensor_wasSampled@sensor& (0+255),w,b
  9449  011FD4  0D09               	mullw	9
  9450  011FD6  0E08               	movlw	8
  9451  011FD8  26F3               	addwf	prodl,f,c
  9452  011FDA  0E00               	movlw	0
  9453  011FDC  22F4               	addwfc	prodh,f,c
  9454  011FDE  0E83               	movlw	low _mtouch_sensor
  9455  011FE0  24F3               	addwf	prodl,w,c
  9456  011FE2  6ED9               	movwf	fsr2l,c
  9457  011FE4  0E00               	movlw	high _mtouch_sensor
  9458  011FE6  20F4               	addwfc	prodh,w,c
  9459  011FE8  6EDA               	movwf	fsr2h,c
  9460  011FEA  A2DF               	btfss	indf2,1,c
  9461  011FEC  D002               	goto	u4610
  9462  011FEE  0E01               	movlw	1
  9463  011FF0  0012               	return	
  9464  011FF2                     u4610:
  9465  011FF2  0E00               	movlw	0
  9466                           
  9467                           ; BSR set to: 0
  9468                           
  9469                           ; BSR set to: 0
  9470  011FF4  0012               	return	
  9471  011FF6                     l749:
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;mtouch_sensor.c: 824: else
  9475                           ;mtouch_sensor.c: 825: return 0;
  9476                           
  9477                           ; BSR set to: 0
  9478  011FF6  0E00               	movlw	0
  9479                           
  9480                           ; BSR set to: 0
  9481  011FF8  0012               	return	
  9482  011FFA                     __end_of_MTOUCH_Sensor_wasSampled:
  9483                           	opt stack 0
  9484                           tosu	equ	0xFFF
  9485                           tosh	equ	0xFFE
  9486                           tosl	equ	0xFFD
  9487                           pclath	equ	0xFFA
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           postinc0	equ	0xFEE
  9496                           wreg	equ	0xFE8
  9497                           indf1	equ	0xFE7
  9498                           postinc1	equ	0xFE6
  9499                           postdec1	equ	0xFE5
  9500                           fsr1h	equ	0xFE2
  9501                           fsr1l	equ	0xFE1
  9502                           indf2	equ	0xFDF
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9510 ;; Defined at:
  9511 ;;		line 772 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  sensor          1    wreg     enum E17513
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;  sensor          1    0[BANK0 ] enum E17513
  9516 ;; Return value:  Size  Location     Type
  9517 ;;                  1    wreg      unsigned char 
  9518 ;; Registers used:
  9519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9529 ;;Total ram usage:        1 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    5
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_Button_Service
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text57
  9540  011FFA                     __ptext57:
  9541                           	opt stack 0
  9542  011FFA                     _MTOUCH_Sensor_isCalibrated:
  9543                           	opt stack 22
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;incstack = 0
  9547                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9548  011FFA  0100               	movlb	0	; () banked
  9549  011FFC  6FB0               	movwf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9550                           
  9551                           ;mtouch_sensor.c: 774: if(sensor < 5)
  9552  011FFE  0E05               	movlw	5
  9553  012000  0100               	movlb	0	; () banked
  9554  012002  61B0               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9555  012004  D012               	goto	l727
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;mtouch_sensor.c: 775: return (bool)mtouch_sensor[sensor].calibrated;
  9559  012006  51B0               	movf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),w,b
  9560  012008  0D09               	mullw	9
  9561  01200A  0E08               	movlw	8
  9562  01200C  26F3               	addwf	prodl,f,c
  9563  01200E  0E00               	movlw	0
  9564  012010  22F4               	addwfc	prodh,f,c
  9565  012012  0E83               	movlw	low _mtouch_sensor
  9566  012014  24F3               	addwf	prodl,w,c
  9567  012016  6ED9               	movwf	fsr2l,c
  9568  012018  0E00               	movlw	high _mtouch_sensor
  9569  01201A  20F4               	addwfc	prodh,w,c
  9570  01201C  6EDA               	movwf	fsr2h,c
  9571  01201E  A6DF               	btfss	indf2,3,c
  9572  012020  D002               	goto	u4860
  9573  012022  0E01               	movlw	1
  9574  012024  0012               	return	
  9575  012026                     u4860:
  9576  012026  0E00               	movlw	0
  9577                           
  9578                           ; BSR set to: 0
  9579                           
  9580                           ; BSR set to: 0
  9581  012028  0012               	return	
  9582  01202A                     l727:
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;mtouch_sensor.c: 776: else
  9586                           ;mtouch_sensor.c: 777: return 0;
  9587                           
  9588                           ; BSR set to: 0
  9589  01202A  0E00               	movlw	0
  9590                           
  9591                           ; BSR set to: 0
  9592  01202C  0012               	return	
  9593  01202E                     __end_of_MTOUCH_Sensor_isCalibrated:
  9594                           	opt stack 0
  9595                           tosu	equ	0xFFF
  9596                           tosh	equ	0xFFE
  9597                           tosl	equ	0xFFD
  9598                           pclath	equ	0xFFA
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           postinc0	equ	0xFEE
  9607                           wreg	equ	0xFE8
  9608                           indf1	equ	0xFE7
  9609                           postinc1	equ	0xFE6
  9610                           postdec1	equ	0xFE5
  9611                           fsr1h	equ	0xFE2
  9612                           fsr1l	equ	0xFE1
  9613                           indf2	equ	0xFDF
  9614                           postinc2	equ	0xFDE
  9615                           postdec2	equ	0xFDD
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function _Button_State_NotPressed *****************
  9621 ;; Defined at:
  9622 ;;		line 256 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  button          2    9[BANK0 ] PTR struct .
  9625 ;;		 -> mtouch_button(80), 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;		None
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  1    wreg      void 
  9630 ;; Registers used:
  9631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9637 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9639 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9640 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9641 ;;Total ram usage:        5 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    7
  9644 ;; This function calls:
  9645 ;;		_Button_Baseline_Update
  9646 ;;		_Button_DefaultCallback
  9647 ;;		_MTOUCH_Button_Initialize
  9648 ;; This function is called by:
  9649 ;;		_Button_Service
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text58
  9654  0107E2                     __ptext58:
  9655                           	opt stack 0
  9656  0107E2                     _Button_State_NotPressed:
  9657                           	opt stack 20
  9658                           
  9659                           ;mtouch_button.c: 259: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;incstack = 0
  9663  0107E2  0100               	movlb	0	; () banked
  9664  0107E4  EE20 F00E          	lfsr	2,14
  9665  0107E8  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9666  0107EA  26D9               	addwf	fsr2l,f,c
  9667  0107EC  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9668  0107EE  22DA               	addwfc	fsr2h,f,c
  9669  0107F0  50DF               	movf	indf2,w,c
  9670  0107F2  0800               	sublw	0
  9671  0107F4  6FBB               	movwf	??_Button_State_NotPressed& (0+255),b
  9672  0107F6  EE20 F009          	lfsr	2,9
  9673  0107FA  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9674  0107FC  26D9               	addwf	fsr2l,f,c
  9675  0107FE  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9676  010800  22DA               	addwfc	fsr2h,f,c
  9677  010802  50DE               	movf	postinc2,w,c
  9678  010804  0A80               	xorlw	128
  9679  010806  6FBD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9680  010808  51BB               	movf	??_Button_State_NotPressed& (0+255),w,b
  9681  01080A  0A80               	xorlw	128
  9682  01080C  5DBD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9683  01080E  B0D8               	btfsc	status,0,c
  9684  010810  D028               	goto	l848
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;mtouch_button.c: 260: {
  9688                           ;mtouch_button.c: 261: (button->counter)++;
  9689  010812  EE20 F00A          	lfsr	2,10
  9690  010816  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9691  010818  26D9               	addwf	fsr2l,f,c
  9692  01081A  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9693  01081C  22DA               	addwfc	fsr2h,f,c
  9694  01081E  2ADE               	incf	postinc2,f,c
  9695  010820  0E00               	movlw	0
  9696  010822  22DD               	addwfc	postdec2,f,c
  9697                           
  9698                           ;mtouch_button.c: 262: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  9699  010824  EE20 F00A          	lfsr	2,10
  9700  010828  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9701  01082A  26D9               	addwf	fsr2l,f,c
  9702  01082C  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9703  01082E  22DA               	addwfc	fsr2h,f,c
  9704  010830  0E01               	movlw	1
  9705  010832  50DB               	movf	plusw2,w,c
  9706  010834  E104               	bnz	u4960
  9707  010836  0E41               	movlw	65
  9708  010838  5CDE               	subwf	postinc2,w,c
  9709  01083A  A0D8               	btfss	status,0,c
  9710  01083C  D055               	goto	l852
  9711  01083E                     u4960:
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;mtouch_button.c: 263: {
  9715                           ;mtouch_button.c: 264: button->counter = (mtouch_button_statecounter_t)0;
  9716  01083E  EE20 F00A          	lfsr	2,10
  9717  010842  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9718  010844  26D9               	addwf	fsr2l,f,c
  9719  010846  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9720  010848  22DA               	addwfc	fsr2h,f,c
  9721  01084A  0E00               	movlw	0
  9722  01084C  6EDE               	movwf	postinc2,c
  9723  01084E  0E00               	movlw	0
  9724  010850  6EDD               	movwf	postdec2,c
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;mtouch_button.c: 265: MTOUCH_Button_Initialize(button->name);
  9728  010852  C0B9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9729  010856  C0BA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9730  01085A  50DF               	movf	indf2,w,c
  9731  01085C  EC15  F08C         	call	_MTOUCH_Button_Initialize
  9732                           
  9733                           ;mtouch_button.c: 266: }
  9734                           ;mtouch_button.c: 267: }
  9735  010860  D043               	goto	l852
  9736  010862                     l848:
  9737                           
  9738                           ;mtouch_button.c: 269: else if ((button->deviation) > (button->threshold))
  9739  010862  0100               	movlb	0	; () banked
  9740  010864  EE20 F009          	lfsr	2,9
  9741  010868  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9742  01086A  26D9               	addwf	fsr2l,f,c
  9743  01086C  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9744  01086E  22DA               	addwfc	fsr2h,f,c
  9745  010870  EE10 F00E          	lfsr	1,14
  9746  010874  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9747  010876  26E1               	addwf	fsr1l,f,c
  9748  010878  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9749  01087A  22E2               	addwfc	fsr1h,f,c
  9750  01087C  50E6               	movf	postinc1,w,c
  9751  01087E  0A80               	xorlw	128
  9752  010880  6FBD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9753  010882  50DE               	movf	postinc2,w,c
  9754  010884  0A80               	xorlw	128
  9755  010886  5DBD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9756  010888  B0D8               	btfsc	status,0,c
  9757  01088A  D023               	goto	l851
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;mtouch_button.c: 270: {
  9761                           ;mtouch_button.c: 272: button->state = MTOUCH_BUTTON_STATE_pressed;
  9762  01088C  EE20 F002          	lfsr	2,2
  9763  010890  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9764  010892  26D9               	addwf	fsr2l,f,c
  9765  010894  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9766  010896  22DA               	addwfc	fsr2h,f,c
  9767  010898  0E02               	movlw	2
  9768  01089A  6EDF               	movwf	indf2,c
  9769                           
  9770                           ;mtouch_button.c: 273: button->counter = (mtouch_button_statecounter_t)0;
  9771  01089C  EE20 F00A          	lfsr	2,10
  9772  0108A0  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9773  0108A2  26D9               	addwf	fsr2l,f,c
  9774  0108A4  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9775  0108A6  22DA               	addwfc	fsr2h,f,c
  9776  0108A8  0E00               	movlw	0
  9777  0108AA  6EDE               	movwf	postinc2,c
  9778  0108AC  0E00               	movlw	0
  9779  0108AE  6EDD               	movwf	postdec2,c
  9780                           
  9781                           ; BSR set to: 0
  9782                           ;mtouch_button.c: 274: callback_pressed(button->name);
  9783  0108B0  D801               	call	u4988
  9784  0108B2  D01A               	goto	l852
  9785  0108B4                     u4988:
  9786  0108B4  0005               	push	
  9787  0108B6  6EFA               	movwf	pclath,c
  9788  0108B8  5045               	movf	_callback_pressed,w,c
  9789  0108BA  6EFD               	movwf	tosl,c
  9790  0108BC  5046               	movf	_callback_pressed+1,w,c
  9791  0108BE  6EFE               	movwf	tosh,c
  9792  0108C0  5047               	movf	_callback_pressed+2,w,c
  9793  0108C2  6EFF               	movwf	tosu,c
  9794  0108C4  50FA               	movf	pclath,w,c
  9795  0108C6  C0B9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9796  0108CA  C0BA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9797  0108CE  50DF               	movf	indf2,w,c
  9798  0108D0  0012               	return		;indir
  9799  0108D2                     l851:
  9800                           
  9801                           ;mtouch_button.c: 276: else
  9802                           ;mtouch_button.c: 277: {
  9803                           ;mtouch_button.c: 279: button->counter = (mtouch_button_statecounter_t)0;
  9804  0108D2  0100               	movlb	0	; () banked
  9805  0108D4  EE20 F00A          	lfsr	2,10
  9806  0108D8  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9807  0108DA  26D9               	addwf	fsr2l,f,c
  9808  0108DC  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9809  0108DE  22DA               	addwfc	fsr2h,f,c
  9810  0108E0  0E00               	movlw	0
  9811  0108E2  6EDE               	movwf	postinc2,c
  9812  0108E4  0E00               	movlw	0
  9813  0108E6  6EDD               	movwf	postdec2,c
  9814  0108E8                     l852:
  9815                           
  9816                           ;mtouch_button.c: 280: }
  9817                           ;mtouch_button.c: 284: (button->baseline_count)++;
  9818                           
  9819                           ; BSR set to: 0
  9820  0108E8  0100               	movlb	0	; () banked
  9821  0108EA  EE20 F00C          	lfsr	2,12
  9822  0108EE  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9823  0108F0  26D9               	addwf	fsr2l,f,c
  9824  0108F2  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9825  0108F4  22DA               	addwfc	fsr2h,f,c
  9826  0108F6  2ADE               	incf	postinc2,f,c
  9827  0108F8  0E00               	movlw	0
  9828  0108FA  22DD               	addwfc	postdec2,f,c
  9829                           
  9830                           ;mtouch_button.c: 285: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
  9831  0108FC  EE20 F00C          	lfsr	2,12
  9832  010900  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9833  010902  26D9               	addwf	fsr2l,f,c
  9834  010904  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9835  010906  22DA               	addwfc	fsr2h,f,c
  9836  010908  0E40               	movlw	64
  9837  01090A  18DE               	xorwf	postinc2,w,c
  9838  01090C  10DE               	iorwf	postinc2,w,c
  9839  01090E  A4D8               	btfss	status,2,c
  9840  010910  0012               	return	
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;mtouch_button.c: 286: {
  9844                           ;mtouch_button.c: 287: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9845  010912  EE20 F00C          	lfsr	2,12
  9846  010916  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9847  010918  26D9               	addwf	fsr2l,f,c
  9848  01091A  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9849  01091C  22DA               	addwfc	fsr2h,f,c
  9850  01091E  0E00               	movlw	0
  9851  010920  6EDE               	movwf	postinc2,c
  9852  010922  0E00               	movlw	0
  9853  010924  6EDD               	movwf	postdec2,c
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;mtouch_button.c: 288: Button_Baseline_Update(button);
  9857  010926  C0B9  F0B0         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
  9858  01092A  C0BA  F0B1         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
  9859  01092E  EC29  F088         	call	_Button_Baseline_Update
  9860  010932  0012               	return	
  9861  010934                     __end_of_Button_State_NotPressed:
  9862                           	opt stack 0
  9863                           tosu	equ	0xFFF
  9864                           tosh	equ	0xFFE
  9865                           tosl	equ	0xFFD
  9866                           pclath	equ	0xFFA
  9867                           tblptru	equ	0xFF8
  9868                           tblptrh	equ	0xFF7
  9869                           tblptrl	equ	0xFF6
  9870                           tablat	equ	0xFF5
  9871                           prodh	equ	0xFF4
  9872                           prodl	equ	0xFF3
  9873                           intcon	equ	0xFF2
  9874                           postinc0	equ	0xFEE
  9875                           wreg	equ	0xFE8
  9876                           indf1	equ	0xFE7
  9877                           postinc1	equ	0xFE6
  9878                           postdec1	equ	0xFE5
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           plusw2	equ	0xFDB
  9885                           fsr2h	equ	0xFDA
  9886                           fsr2l	equ	0xFD9
  9887                           status	equ	0xFD8
  9888                           
  9889 ;; *************** function _Button_State_Initializing *****************
  9890 ;; Defined at:
  9891 ;;		line 236 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  button          2    9[BANK0 ] PTR struct .
  9894 ;;		 -> mtouch_button(80), 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      void 
  9899 ;; Registers used:
  9900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9906 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9908 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9910 ;;Total ram usage:        6 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    7
  9913 ;; This function calls:
  9914 ;;		_Button_Baseline_Initialize
  9915 ;;		_Button_Baseline_Update
  9916 ;; This function is called by:
  9917 ;;		_Button_Service
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           	psect	text59
  9922  011328                     __ptext59:
  9923                           	opt stack 0
  9924  011328                     _Button_State_Initializing:
  9925                           	opt stack 20
  9926                           
  9927                           ;mtouch_button.c: 239: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
  9928                           
  9929                           ;incstack = 0
  9930  011328  0100               	movlb	0	; () banked
  9931  01132A  EE20 F00A          	lfsr	2,10
  9932  01132E  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
  9933  011330  26D9               	addwf	fsr2l,f,c
  9934  011332  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9935  011334  22DA               	addwfc	fsr2h,f,c
  9936  011336  0E01               	movlw	1
  9937  011338  50DB               	movf	plusw2,w,c
  9938  01133A  E10B               	bnz	l4641
  9939  01133C  0E09               	movlw	9
  9940  01133E  5CDE               	subwf	postinc2,w,c
  9941  011340  B0D8               	btfsc	status,0,c
  9942  011342  D007               	goto	l842
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;mtouch_button.c: 240: {
  9946                           ;mtouch_button.c: 241: Button_Baseline_Initialize(button);
  9947  011344  C0B9  F0B3         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
  9948  011348  C0BA  F0B4         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
  9949  01134C  ECEC  F08C         	call	_Button_Baseline_Initialize	;wreg free
  9950                           
  9951                           ;mtouch_button.c: 242: } else {
  9952  011350  D006               	goto	l843
  9953  011352                     l842:
  9954  011352                     l4641:
  9955                           
  9956                           ;mtouch_button.c: 243: Button_Baseline_Update(button);
  9957  011352  C0B9  F0B0         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
  9958  011356  C0BA  F0B1         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
  9959  01135A  EC29  F088         	call	_Button_Baseline_Update	;wreg free
  9960  01135E                     l843:
  9961                           
  9962                           ;mtouch_button.c: 244: }
  9963                           ;mtouch_button.c: 247: (button->counter)++;
  9964  01135E  0100               	movlb	0	; () banked
  9965  011360  EE20 F00A          	lfsr	2,10
  9966  011364  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
  9967  011366  26D9               	addwf	fsr2l,f,c
  9968  011368  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9969  01136A  22DA               	addwfc	fsr2h,f,c
  9970  01136C  2ADE               	incf	postinc2,f,c
  9971  01136E  0E00               	movlw	0
  9972  011370  22DD               	addwfc	postdec2,f,c
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;mtouch_button.c: 248: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
  9976  011372  EE20 F00A          	lfsr	2,10
  9977  011376  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
  9978  011378  26D9               	addwf	fsr2l,f,c
  9979  01137A  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9980  01137C  22DA               	addwfc	fsr2h,f,c
  9981  01137E  0E01               	movlw	1
  9982  011380  50DB               	movf	plusw2,w,c
  9983  011382  E104               	bnz	u4930
  9984  011384  0E10               	movlw	16
  9985  011386  5CDE               	subwf	postinc2,w,c
  9986  011388  A0D8               	btfss	status,0,c
  9987  01138A  0012               	return	
  9988  01138C                     u4930:
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;mtouch_button.c: 249: {
  9992                           ;mtouch_button.c: 250: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
  9993  01138C  EE20 F005          	lfsr	2,5
  9994  011390  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
  9995  011392  26D9               	addwf	fsr2l,f,c
  9996  011394  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9997  011396  22DA               	addwfc	fsr2h,f,c
  9998  011398  CFDE F0BB          	movff	postinc2,??_Button_State_Initializing
  9999  01139C  CFDE F0BC          	movff	postinc2,??_Button_State_Initializing+1
 10000  0113A0  CFDE F0BD          	movff	postinc2,??_Button_State_Initializing+2
 10001  0113A4  CFDE F0BE          	movff	postinc2,??_Button_State_Initializing+3
 10002  0113A8  0E05               	movlw	5
 10003  0113AA  D005               	goto	u4940
 10004  0113AC                     u4945:
 10005  0113AC  90D8               	bcf	status,0,c
 10006  0113AE  33BE               	rrcf	(??_Button_State_Initializing+3)& (0+255),f,b
 10007  0113B0  33BD               	rrcf	(??_Button_State_Initializing+2)& (0+255),f,b
 10008  0113B2  33BC               	rrcf	(??_Button_State_Initializing+1)& (0+255),f,b
 10009  0113B4  33BB               	rrcf	??_Button_State_Initializing& (0+255),f,b
 10010  0113B6                     u4940:
 10011  0113B6  2EE8               	decfsz	wreg,f,c
 10012  0113B8  D7F9               	goto	u4945
 10013  0113BA  EE20 F003          	lfsr	2,3
 10014  0113BE  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10015  0113C0  26D9               	addwf	fsr2l,f,c
 10016  0113C2  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10017  0113C4  22DA               	addwfc	fsr2h,f,c
 10018  0113C6  C0BB  FFDE         	movff	??_Button_State_Initializing,postinc2
 10019  0113CA  C0BC  FFDD         	movff	??_Button_State_Initializing+1,postdec2
 10020                           
 10021                           ;mtouch_button.c: 251: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10022  0113CE  EE20 F002          	lfsr	2,2
 10023  0113D2  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10024  0113D4  26D9               	addwf	fsr2l,f,c
 10025  0113D6  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10026  0113D8  22DA               	addwfc	fsr2h,f,c
 10027  0113DA  0E01               	movlw	1
 10028  0113DC  6EDF               	movwf	indf2,c
 10029                           
 10030                           ;mtouch_button.c: 252: button->counter = (mtouch_button_statecounter_t)0;
 10031  0113DE  EE20 F00A          	lfsr	2,10
 10032  0113E2  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10033  0113E4  26D9               	addwf	fsr2l,f,c
 10034  0113E6  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10035  0113E8  22DA               	addwfc	fsr2h,f,c
 10036  0113EA  0E00               	movlw	0
 10037  0113EC  6EDE               	movwf	postinc2,c
 10038  0113EE  0E00               	movlw	0
 10039  0113F0  6EDD               	movwf	postdec2,c
 10040  0113F2  0012               	return	
 10041  0113F4                     __end_of_Button_State_Initializing:
 10042                           	opt stack 0
 10043                           tosu	equ	0xFFF
 10044                           tosh	equ	0xFFE
 10045                           tosl	equ	0xFFD
 10046                           pclath	equ	0xFFA
 10047                           tblptru	equ	0xFF8
 10048                           tblptrh	equ	0xFF7
 10049                           tblptrl	equ	0xFF6
 10050                           tablat	equ	0xFF5
 10051                           prodh	equ	0xFF4
 10052                           prodl	equ	0xFF3
 10053                           intcon	equ	0xFF2
 10054                           postinc0	equ	0xFEE
 10055                           wreg	equ	0xFE8
 10056                           indf1	equ	0xFE7
 10057                           postinc1	equ	0xFE6
 10058                           postdec1	equ	0xFE5
 10059                           fsr1h	equ	0xFE2
 10060                           fsr1l	equ	0xFE1
 10061                           indf2	equ	0xFDF
 10062                           postinc2	equ	0xFDE
 10063                           postdec2	equ	0xFDD
 10064                           plusw2	equ	0xFDB
 10065                           fsr2h	equ	0xFDA
 10066                           fsr2l	equ	0xFD9
 10067                           status	equ	0xFD8
 10068                           
 10069 ;; *************** function _Button_State_Pressed *****************
 10070 ;; Defined at:
 10071 ;;		line 292 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;  button          2    9[BANK0 ] PTR struct .
 10074 ;;		 -> mtouch_button(80), 
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;		None
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  1    wreg      void 
 10079 ;; Registers used:
 10080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10086 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10088 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10089 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10090 ;;Total ram usage:        7 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    7
 10093 ;; This function calls:
 10094 ;;		_Button_DefaultCallback
 10095 ;;		_MTOUCH_Button_Initialize
 10096 ;; This function is called by:
 10097 ;;		_Button_Service
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           	psect	text60
 10102  011152                     __ptext60:
 10103                           	opt stack 0
 10104  011152                     _Button_State_Pressed:
 10105                           	opt stack 20
 10106                           
 10107                           ;mtouch_button.c: 295: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;incstack = 0
 10111  011152  0100               	movlb	0	; () banked
 10112  011154  EE20 F00A          	lfsr	2,10
 10113  011158  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10114  01115A  26D9               	addwf	fsr2l,f,c
 10115  01115C  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10116  01115E  22DA               	addwfc	fsr2h,f,c
 10117  011160  0EE8               	movlw	232
 10118  011162  5CDE               	subwf	postinc2,w,c
 10119  011164  0E03               	movlw	3
 10120  011166  58DE               	subwfb	postinc2,w,c
 10121  011168  A0D8               	btfss	status,0,c
 10122  01116A  D018               	goto	l857
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;mtouch_button.c: 296: {
 10126                           ;mtouch_button.c: 297: MTOUCH_Button_Initialize(button->name);
 10127  01116C  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10128  011170  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10129  011174  50DF               	movf	indf2,w,c
 10130  011176  EC15  F08C         	call	_MTOUCH_Button_Initialize
 10131                           
 10132                           ;mtouch_button.c: 298: callback_notPressed(button->name);
 10133  01117A  D801               	call	u5018
 10134  01117C  0012               	return	
 10135  01117E                     u5018:
 10136  01117E  0005               	push	
 10137  011180  6EFA               	movwf	pclath,c
 10138  011182  5042               	movf	_callback_notPressed,w,c
 10139  011184  6EFD               	movwf	tosl,c
 10140  011186  5043               	movf	_callback_notPressed+1,w,c
 10141  011188  6EFE               	movwf	tosh,c
 10142  01118A  5044               	movf	_callback_notPressed+2,w,c
 10143  01118C  6EFF               	movwf	tosu,c
 10144  01118E  50FA               	movf	pclath,w,c
 10145  011190  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10146  011194  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10147  011198  50DF               	movf	indf2,w,c
 10148  01119A  0012               	return		;indir
 10149  01119C                     l857:
 10150                           
 10151                           ;mtouch_button.c: 302: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
 10152  01119C  0100               	movlb	0	; () banked
 10153  01119E  EE20 F00E          	lfsr	2,14
 10154  0111A2  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10155  0111A4  26D9               	addwf	fsr2l,f,c
 10156  0111A6  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10157  0111A8  22DA               	addwfc	fsr2h,f,c
 10158  0111AA  50DF               	movf	indf2,w,c
 10159  0111AC  6FBB               	movwf	??_Button_State_Pressed& (0+255),b
 10160  0111AE  EE20 F00E          	lfsr	2,14
 10161  0111B2  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10162  0111B4  26D9               	addwf	fsr2l,f,c
 10163  0111B6  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10164  0111B8  22DA               	addwfc	fsr2h,f,c
 10165  0111BA  50DF               	movf	indf2,w,c
 10166  0111BC  6FBC               	movwf	(??_Button_State_Pressed+1)& (0+255),b
 10167  0111BE  35BC               	rlcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10168  0111C0  31BC               	rrcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10169  0111C2  0800               	sublw	0
 10170  0111C4  25BB               	addwf	??_Button_State_Pressed& (0+255),w,b
 10171  0111C6  6FBD               	movwf	(??_Button_State_Pressed+2)& (0+255),b
 10172  0111C8  EE20 F009          	lfsr	2,9
 10173  0111CC  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10174  0111CE  26D9               	addwf	fsr2l,f,c
 10175  0111D0  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10176  0111D2  22DA               	addwfc	fsr2h,f,c
 10177  0111D4  50DE               	movf	postinc2,w,c
 10178  0111D6  0A80               	xorlw	128
 10179  0111D8  6FBF               	movwf	(??_Button_State_Pressed+4)& (0+255),b
 10180  0111DA  51BD               	movf	(??_Button_State_Pressed+2)& (0+255),w,b
 10181  0111DC  0A80               	xorlw	128
 10182  0111DE  5DBF               	subwf	(??_Button_State_Pressed+4)& (0+255),w,b
 10183  0111E0  B0D8               	btfsc	status,0,c
 10184  0111E2  0012               	return	
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;mtouch_button.c: 303: {
 10188                           ;mtouch_button.c: 304: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10189  0111E4  EE20 F002          	lfsr	2,2
 10190  0111E8  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10191  0111EA  26D9               	addwf	fsr2l,f,c
 10192  0111EC  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10193  0111EE  22DA               	addwfc	fsr2h,f,c
 10194  0111F0  0E01               	movlw	1
 10195  0111F2  6EDF               	movwf	indf2,c
 10196                           
 10197                           ;mtouch_button.c: 305: button->counter = (mtouch_button_statecounter_t)0;
 10198  0111F4  EE20 F00A          	lfsr	2,10
 10199  0111F8  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10200  0111FA  26D9               	addwf	fsr2l,f,c
 10201  0111FC  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10202  0111FE  22DA               	addwfc	fsr2h,f,c
 10203  011200  0E00               	movlw	0
 10204  011202  6EDE               	movwf	postinc2,c
 10205  011204  0E00               	movlw	0
 10206  011206  6EDD               	movwf	postdec2,c
 10207                           
 10208                           ;mtouch_button.c: 306: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
 10209  011208  EE20 F00C          	lfsr	2,12
 10210  01120C  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10211  01120E  26D9               	addwf	fsr2l,f,c
 10212  011210  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10213  011212  22DA               	addwfc	fsr2h,f,c
 10214  011214  0EFF               	movlw	255
 10215  011216  6EDE               	movwf	postinc2,c
 10216  011218  0EFB               	movlw	251
 10217  01121A  6EDD               	movwf	postdec2,c
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;mtouch_button.c: 307: callback_notPressed(button->name);
 10221  01121C  D801               	call	u5038
 10222  01121E  0012               	return	
 10223  011220                     u5038:
 10224  011220  0005               	push	
 10225  011222  6EFA               	movwf	pclath,c
 10226  011224  5042               	movf	_callback_notPressed,w,c
 10227  011226  6EFD               	movwf	tosl,c
 10228  011228  5043               	movf	_callback_notPressed+1,w,c
 10229  01122A  6EFE               	movwf	tosh,c
 10230  01122C  5044               	movf	_callback_notPressed+2,w,c
 10231  01122E  6EFF               	movwf	tosu,c
 10232  011230  50FA               	movf	pclath,w,c
 10233  011232  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10234  011236  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10235  01123A  50DF               	movf	indf2,w,c
 10236  01123C  0012               	return		;indir
 10237  01123E                     __end_of_Button_State_Pressed:
 10238                           	opt stack 0
 10239                           tosu	equ	0xFFF
 10240                           tosh	equ	0xFFE
 10241                           tosl	equ	0xFFD
 10242                           pclath	equ	0xFFA
 10243                           tblptru	equ	0xFF8
 10244                           tblptrh	equ	0xFF7
 10245                           tblptrl	equ	0xFF6
 10246                           tablat	equ	0xFF5
 10247                           prodh	equ	0xFF4
 10248                           prodl	equ	0xFF3
 10249                           intcon	equ	0xFF2
 10250                           postinc0	equ	0xFEE
 10251                           wreg	equ	0xFE8
 10252                           indf1	equ	0xFE7
 10253                           postinc1	equ	0xFE6
 10254                           postdec1	equ	0xFE5
 10255                           fsr1h	equ	0xFE2
 10256                           fsr1l	equ	0xFE1
 10257                           indf2	equ	0xFDF
 10258                           postinc2	equ	0xFDE
 10259                           postdec2	equ	0xFDD
 10260                           plusw2	equ	0xFDB
 10261                           fsr2h	equ	0xFDA
 10262                           fsr2l	equ	0xFD9
 10263                           status	equ	0xFD8
 10264                           
 10265 ;; *************** function _MTOUCH_Button_Initialize *****************
 10266 ;; Defined at:
 10267 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;  name            1    wreg     enum E17454
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;  name            1    1[BANK0 ] enum E17454
 10272 ;;  button          2    2[BANK0 ] PTR struct .
 10273 ;;		 -> mtouch_button(80), 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  1    wreg      void 
 10276 ;; Registers used:
 10277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10284 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10286 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10287 ;;Total ram usage:        3 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    6
 10290 ;; This function calls:
 10291 ;;		_MTOUCH_Sensor_Calibrate
 10292 ;; This function is called by:
 10293 ;;		_MTOUCH_Button_InitializeAll
 10294 ;;		_Button_Service
 10295 ;;		_Button_State_NotPressed
 10296 ;;		_Button_State_Pressed
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text61
 10301  01182A                     __ptext61:
 10302                           	opt stack 0
 10303  01182A                     _MTOUCH_Button_Initialize:
 10304                           	opt stack 21
 10305                           
 10306                           ;incstack = 0
 10307                           ;MTOUCH_Button_Initialize@name stored from wreg
 10308  01182A  0100               	movlb	0	; () banked
 10309  01182C  6FB1               	movwf	MTOUCH_Button_Initialize@name& (0+255),b
 10310                           
 10311                           ;mtouch_button.c: 180: mtouch_button_t* button = &mtouch_button[name];
 10312  01182E  0100               	movlb	0	; () banked
 10313  011830  51B1               	movf	MTOUCH_Button_Initialize@name& (0+255),w,b
 10314  011832  0D10               	mullw	16
 10315  011834  0E40               	movlw	low _mtouch_button
 10316  011836  24F3               	addwf	prodl,w,c
 10317  011838  6FB2               	movwf	MTOUCH_Button_Initialize@button& (0+255),b
 10318  01183A  0E01               	movlw	high _mtouch_button
 10319  01183C  20F4               	addwfc	prodh,w,c
 10320  01183E  6FB3               	movwf	(MTOUCH_Button_Initialize@button+1)& (0+255),b
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;mtouch_button.c: 182: button->state = MTOUCH_BUTTON_STATE_initializing;
 10324  011840  EE20 F002          	lfsr	2,2
 10325  011844  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10326  011846  26D9               	addwf	fsr2l,f,c
 10327  011848  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10328  01184A  22DA               	addwfc	fsr2h,f,c
 10329  01184C  0E00               	movlw	0
 10330  01184E  6EDF               	movwf	indf2,c
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;mtouch_button.c: 183: button->baseline = (mtouch_button_baseline_t)0;
 10334  011850  EE20 F005          	lfsr	2,5
 10335  011854  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10336  011856  26D9               	addwf	fsr2l,f,c
 10337  011858  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10338  01185A  22DA               	addwfc	fsr2h,f,c
 10339  01185C  6ADE               	clrf	postinc2,c
 10340  01185E  6ADE               	clrf	postinc2,c
 10341  011860  6ADE               	clrf	postinc2,c
 10342  011862  6ADD               	clrf	postdec2,c
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;mtouch_button.c: 184: button->counter = (mtouch_button_statecounter_t)0;
 10346  011864  EE20 F00A          	lfsr	2,10
 10347  011868  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10348  01186A  26D9               	addwf	fsr2l,f,c
 10349  01186C  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10350  01186E  22DA               	addwfc	fsr2h,f,c
 10351  011870  0E00               	movlw	0
 10352  011872  6EDE               	movwf	postinc2,c
 10353  011874  0E00               	movlw	0
 10354  011876  6EDD               	movwf	postdec2,c
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;mtouch_button.c: 185: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10358  011878  EE20 F00C          	lfsr	2,12
 10359  01187C  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10360  01187E  26D9               	addwf	fsr2l,f,c
 10361  011880  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10362  011882  22DA               	addwfc	fsr2h,f,c
 10363  011884  0E00               	movlw	0
 10364  011886  6EDE               	movwf	postinc2,c
 10365  011888  0E00               	movlw	0
 10366  01188A  6EDD               	movwf	postdec2,c
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;mtouch_button.c: 187: MTOUCH_Sensor_Calibrate(button->sensor);
 10370  01188C  EE20 F001          	lfsr	2,1
 10371  011890  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10372  011892  26D9               	addwf	fsr2l,f,c
 10373  011894  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10374  011896  22DA               	addwfc	fsr2h,f,c
 10375  011898  50DF               	movf	indf2,w,c
 10376  01189A  ECF9  F090         	call	_MTOUCH_Sensor_Calibrate
 10377  01189E  0012               	return		;funcret
 10378  0118A0                     __end_of_MTOUCH_Button_Initialize:
 10379                           	opt stack 0
 10380                           tosu	equ	0xFFF
 10381                           tosh	equ	0xFFE
 10382                           tosl	equ	0xFFD
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           postinc0	equ	0xFEE
 10392                           wreg	equ	0xFE8
 10393                           indf1	equ	0xFE7
 10394                           postinc1	equ	0xFE6
 10395                           postdec1	equ	0xFE5
 10396                           fsr1h	equ	0xFE2
 10397                           fsr1l	equ	0xFE1
 10398                           indf2	equ	0xFDF
 10399                           postinc2	equ	0xFDE
 10400                           postdec2	equ	0xFDD
 10401                           plusw2	equ	0xFDB
 10402                           fsr2h	equ	0xFDA
 10403                           fsr2l	equ	0xFD9
 10404                           status	equ	0xFD8
 10405                           
 10406 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10407 ;; Defined at:
 10408 ;;		line 764 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  sensor          1    wreg     enum E17513
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  sensor          1    0[BANK0 ] enum E17513
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      void 
 10415 ;; Registers used:
 10416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10426 ;;Total ram usage:        1 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    5
 10429 ;; This function calls:
 10430 ;;		Nothing
 10431 ;; This function is called by:
 10432 ;;		_MTOUCH_Sensor_Initialize
 10433 ;;		_MTOUCH_Button_Initialize
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text62
 10438  0121F2                     __ptext62:
 10439                           	opt stack 0
 10440  0121F2                     _MTOUCH_Sensor_Calibrate:
 10441                           	opt stack 21
 10442                           
 10443                           ;incstack = 0
 10444                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10445  0121F2  0100               	movlb	0	; () banked
 10446  0121F4  6FB0               	movwf	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10447                           
 10448                           ;mtouch_sensor.c: 766: if(sensor < 5)
 10449  0121F6  0E05               	movlw	5
 10450  0121F8  0100               	movlb	0	; () banked
 10451  0121FA  61B0               	cpfslt	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10452  0121FC  0012               	return	
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;mtouch_sensor.c: 767: {
 10456                           ;mtouch_sensor.c: 768: mtouch_sensor[sensor].calibrated = 0;
 10457  0121FE  51B0               	movf	MTOUCH_Sensor_Calibrate@sensor& (0+255),w,b
 10458  012200  0D09               	mullw	9
 10459  012202  0E08               	movlw	8
 10460  012204  26F3               	addwf	prodl,f,c
 10461  012206  0E00               	movlw	0
 10462  012208  22F4               	addwfc	prodh,f,c
 10463  01220A  0E83               	movlw	low _mtouch_sensor
 10464  01220C  24F3               	addwf	prodl,w,c
 10465  01220E  6ED9               	movwf	fsr2l,c
 10466  012210  0E00               	movlw	high _mtouch_sensor
 10467  012212  20F4               	addwfc	prodh,w,c
 10468  012214  6EDA               	movwf	fsr2h,c
 10469  012216  96DF               	bcf	indf2,3,c
 10470  012218  0012               	return	
 10471  01221A                     __end_of_MTOUCH_Sensor_Calibrate:
 10472                           	opt stack 0
 10473                           tosu	equ	0xFFF
 10474                           tosh	equ	0xFFE
 10475                           tosl	equ	0xFFD
 10476                           pclath	equ	0xFFA
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           intcon	equ	0xFF2
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           indf1	equ	0xFE7
 10487                           postinc1	equ	0xFE6
 10488                           postdec1	equ	0xFE5
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           plusw2	equ	0xFDB
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _Button_DefaultCallback *****************
 10500 ;; Defined at:
 10501 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  button          1    wreg     enum E17454
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  button          1    0[COMRAM] enum E17454
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    5
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Button_State_NotPressed
 10526 ;;		_Button_State_Pressed
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           	psect	text63
 10531  012492                     __ptext63:
 10532                           	opt stack 0
 10533  012492                     _Button_DefaultCallback:
 10534                           	opt stack 21
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;incstack = 0
 10538  012492  0012               	return		;funcret
 10539  012494                     __end_of_Button_DefaultCallback:
 10540                           	opt stack 0
 10541                           tosu	equ	0xFFF
 10542                           tosh	equ	0xFFE
 10543                           tosl	equ	0xFFD
 10544                           pclath	equ	0xFFA
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           postinc0	equ	0xFEE
 10553                           wreg	equ	0xFE8
 10554                           indf1	equ	0xFE7
 10555                           postinc1	equ	0xFE6
 10556                           postdec1	equ	0xFE5
 10557                           fsr1h	equ	0xFE2
 10558                           fsr1l	equ	0xFE1
 10559                           indf2	equ	0xFDF
 10560                           postinc2	equ	0xFDE
 10561                           postdec2	equ	0xFDD
 10562                           plusw2	equ	0xFDB
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function _Button_Baseline_Update *****************
 10568 ;; Defined at:
 10569 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  button          2    0[BANK0 ] PTR struct .
 10572 ;;		 -> mtouch_button(80), 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10584 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10588 ;;Total ram usage:        6 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    5
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_Button_State_Initializing
 10595 ;;		_Button_State_NotPressed
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text64
 10600  011052                     __ptext64:
 10601                           	opt stack 0
 10602  011052                     _Button_Baseline_Update:
 10603                           	opt stack 21
 10604                           
 10605                           ;mtouch_button.c: 486: if (GIE == (uint8_t)1)
 10606                           
 10607                           ;incstack = 0
 10608  011052  AEF2               	btfss	intcon,7,c	;volatile
 10609  011054  D040               	goto	l937
 10610                           
 10611                           ;mtouch_button.c: 487: {
 10612                           ;mtouch_button.c: 488: GIE = (uint8_t)0;
 10613  011056  9EF2               	bcf	intcon,7,c	;volatile
 10614                           
 10615                           ;mtouch_button.c: 489: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10616  011058  0100               	movlb	0	; () banked
 10617  01105A  EE20 F005          	lfsr	2,5
 10618  01105E  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10619  011060  26D9               	addwf	fsr2l,f,c
 10620  011062  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10621  011064  22DA               	addwfc	fsr2h,f,c
 10622  011066  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10623  01106A  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+1
 10624  01106E  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+2
 10625  011072  CFDE F0B5          	movff	postinc2,??_Button_Baseline_Update+3
 10626  011076  0E05               	movlw	5
 10627  011078  D005               	goto	u4510
 10628  01107A                     u4515:
 10629  01107A  90D8               	bcf	status,0,c
 10630  01107C  33B5               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10631  01107E  33B4               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10632  011080  33B3               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10633  011082  33B2               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10634  011084                     u4510:
 10635  011084  2EE8               	decfsz	wreg,f,c
 10636  011086  D7F9               	goto	u4515
 10637  011088  EE20 F005          	lfsr	2,5
 10638  01108C  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10639  01108E  26D9               	addwf	fsr2l,f,c
 10640  011090  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10641  011092  22DA               	addwfc	fsr2h,f,c
 10642  011094  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10643  011096  5EDE               	subwf	postinc2,f,c
 10644  011098  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10645  01109A  5ADE               	subwfb	postinc2,f,c
 10646  01109C  51B4               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10647  01109E  5ADE               	subwfb	postinc2,f,c
 10648  0110A0  51B5               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10649  0110A2  5ADE               	subwfb	postinc2,f,c
 10650                           
 10651                           ;mtouch_button.c: 490: button->baseline += button->reading;
 10652  0110A4  EE20 F003          	lfsr	2,3
 10653  0110A8  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10654  0110AA  26D9               	addwf	fsr2l,f,c
 10655  0110AC  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10656  0110AE  22DA               	addwfc	fsr2h,f,c
 10657  0110B0  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10658  0110B4  CFDD F0B3          	movff	postdec2,??_Button_Baseline_Update+1
 10659  0110B8  EE20 F005          	lfsr	2,5
 10660  0110BC  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10661  0110BE  26D9               	addwf	fsr2l,f,c
 10662  0110C0  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10663  0110C2  22DA               	addwfc	fsr2h,f,c
 10664  0110C4  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10665  0110C6  26DE               	addwf	postinc2,f,c
 10666  0110C8  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10667  0110CA  22DE               	addwfc	postinc2,f,c
 10668  0110CC  0E00               	movlw	0
 10669  0110CE  22DE               	addwfc	postinc2,f,c
 10670  0110D0  22DE               	addwfc	postinc2,f,c
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;mtouch_button.c: 491: GIE = (uint8_t)1;
 10674  0110D2  8EF2               	bsf	intcon,7,c	;volatile
 10675                           
 10676                           ;mtouch_button.c: 492: }
 10677  0110D4  0012               	return	
 10678  0110D6                     l937:
 10679                           
 10680                           ;mtouch_button.c: 493: else
 10681                           ;mtouch_button.c: 494: {
 10682                           ;mtouch_button.c: 495: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10683                           
 10684                           ; BSR set to: 0
 10685  0110D6  0100               	movlb	0	; () banked
 10686  0110D8  EE20 F005          	lfsr	2,5
 10687  0110DC  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10688  0110DE  26D9               	addwf	fsr2l,f,c
 10689  0110E0  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10690  0110E2  22DA               	addwfc	fsr2h,f,c
 10691  0110E4  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10692  0110E8  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+1
 10693  0110EC  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+2
 10694  0110F0  CFDE F0B5          	movff	postinc2,??_Button_Baseline_Update+3
 10695  0110F4  0E05               	movlw	5
 10696  0110F6  D005               	goto	u4520
 10697  0110F8                     u4525:
 10698  0110F8  90D8               	bcf	status,0,c
 10699  0110FA  33B5               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10700  0110FC  33B4               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10701  0110FE  33B3               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10702  011100  33B2               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10703  011102                     u4520:
 10704  011102  2EE8               	decfsz	wreg,f,c
 10705  011104  D7F9               	goto	u4525
 10706  011106  EE20 F005          	lfsr	2,5
 10707  01110A  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10708  01110C  26D9               	addwf	fsr2l,f,c
 10709  01110E  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10710  011110  22DA               	addwfc	fsr2h,f,c
 10711  011112  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10712  011114  5EDE               	subwf	postinc2,f,c
 10713  011116  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10714  011118  5ADE               	subwfb	postinc2,f,c
 10715  01111A  51B4               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10716  01111C  5ADE               	subwfb	postinc2,f,c
 10717  01111E  51B5               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10718  011120  5ADE               	subwfb	postinc2,f,c
 10719                           
 10720                           ;mtouch_button.c: 496: button->baseline += button->reading;
 10721  011122  EE20 F003          	lfsr	2,3
 10722  011126  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10723  011128  26D9               	addwf	fsr2l,f,c
 10724  01112A  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10725  01112C  22DA               	addwfc	fsr2h,f,c
 10726  01112E  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10727  011132  CFDD F0B3          	movff	postdec2,??_Button_Baseline_Update+1
 10728  011136  EE20 F005          	lfsr	2,5
 10729  01113A  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10730  01113C  26D9               	addwf	fsr2l,f,c
 10731  01113E  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10732  011140  22DA               	addwfc	fsr2h,f,c
 10733  011142  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10734  011144  26DE               	addwf	postinc2,f,c
 10735  011146  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10736  011148  22DE               	addwfc	postinc2,f,c
 10737  01114A  0E00               	movlw	0
 10738  01114C  22DE               	addwfc	postinc2,f,c
 10739  01114E  22DE               	addwfc	postinc2,f,c
 10740  011150  0012               	return	
 10741  011152                     __end_of_Button_Baseline_Update:
 10742                           	opt stack 0
 10743                           tosu	equ	0xFFF
 10744                           tosh	equ	0xFFE
 10745                           tosl	equ	0xFFD
 10746                           pclath	equ	0xFFA
 10747                           tblptru	equ	0xFF8
 10748                           tblptrh	equ	0xFF7
 10749                           tblptrl	equ	0xFF6
 10750                           tablat	equ	0xFF5
 10751                           prodh	equ	0xFF4
 10752                           prodl	equ	0xFF3
 10753                           intcon	equ	0xFF2
 10754                           postinc0	equ	0xFEE
 10755                           wreg	equ	0xFE8
 10756                           indf1	equ	0xFE7
 10757                           postinc1	equ	0xFE6
 10758                           postdec1	equ	0xFE5
 10759                           fsr1h	equ	0xFE2
 10760                           fsr1l	equ	0xFE1
 10761                           indf2	equ	0xFDF
 10762                           postinc2	equ	0xFDE
 10763                           postdec2	equ	0xFDD
 10764                           plusw2	equ	0xFDB
 10765                           fsr2h	equ	0xFDA
 10766                           fsr2l	equ	0xFD9
 10767                           status	equ	0xFD8
 10768                           
 10769 ;; *************** function _Button_Baseline_Initialize *****************
 10770 ;; Defined at:
 10771 ;;		line 478 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  button          2    3[BANK0 ] PTR struct .
 10774 ;;		 -> mtouch_button(80), 
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;		None
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  1    wreg      void 
 10779 ;; Registers used:
 10780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10786 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10789 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10790 ;;Total ram usage:        6 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    6
 10793 ;; This function calls:
 10794 ;;		_MTOUCH_Sensor_RawSample_Get
 10795 ;; This function is called by:
 10796 ;;		_Button_State_Initializing
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           	psect	text65
 10801  0119D8                     __ptext65:
 10802                           	opt stack 0
 10803  0119D8                     _Button_Baseline_Initialize:
 10804                           	opt stack 20
 10805                           
 10806                           ;mtouch_button.c: 480: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;incstack = 0
 10810  0119D8  0100               	movlb	0	; () banked
 10811  0119DA  EE20 F001          	lfsr	2,1
 10812  0119DE  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10813  0119E0  26D9               	addwf	fsr2l,f,c
 10814  0119E2  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10815  0119E4  22DA               	addwfc	fsr2h,f,c
 10816  0119E6  50DF               	movf	indf2,w,c
 10817  0119E8  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 10818  0119EC  0100               	movlb	0	; () banked
 10819  0119EE  51B0               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 10820  0119F0  6FB5               	movwf	??_Button_Baseline_Initialize& (0+255),b
 10821  0119F2  51B1               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 10822  0119F4  6FB6               	movwf	(??_Button_Baseline_Initialize+1)& (0+255),b
 10823  0119F6  6BB7               	clrf	(??_Button_Baseline_Initialize+2)& (0+255),b
 10824  0119F8  6BB8               	clrf	(??_Button_Baseline_Initialize+3)& (0+255),b
 10825  0119FA  EE20 F005          	lfsr	2,5
 10826  0119FE  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10827  011A00  26D9               	addwf	fsr2l,f,c
 10828  011A02  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10829  011A04  22DA               	addwfc	fsr2h,f,c
 10830  011A06  C0B5  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
 10831  011A0A  C0B6  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
 10832  011A0E  C0B7  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
 10833  011A12  C0B8  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;mtouch_button.c: 481: button->baseline <<= ((uint8_t)4);
 10837  011A16  EE20 F005          	lfsr	2,5
 10838  011A1A  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10839  011A1C  26D9               	addwf	fsr2l,f,c
 10840  011A1E  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10841  011A20  22DA               	addwfc	fsr2h,f,c
 10842  011A22  0E04               	movlw	4
 10843  011A24                     u4495:
 10844  011A24  90D8               	bcf	status,0,c
 10845  011A26  36DE               	rlcf	postinc2,f,c
 10846  011A28  36DE               	rlcf	postinc2,f,c
 10847  011A2A  36DE               	rlcf	postinc2,f,c
 10848  011A2C  36DD               	rlcf	postdec2,f,c
 10849  011A2E  06D9               	decf	fsr2l,f,c
 10850  011A30  06D9               	decf	fsr2l,f,c
 10851  011A32  2EE8               	decfsz	wreg,f,c
 10852  011A34  D7F7               	goto	u4495
 10853                           
 10854                           ; BSR set to: 0
 10855  011A36  0012               	return		;funcret
 10856  011A38                     __end_of_Button_Baseline_Initialize:
 10857                           	opt stack 0
 10858                           tosu	equ	0xFFF
 10859                           tosh	equ	0xFFE
 10860                           tosl	equ	0xFFD
 10861                           pclath	equ	0xFFA
 10862                           tblptru	equ	0xFF8
 10863                           tblptrh	equ	0xFF7
 10864                           tblptrl	equ	0xFF6
 10865                           tablat	equ	0xFF5
 10866                           prodh	equ	0xFF4
 10867                           prodl	equ	0xFF3
 10868                           intcon	equ	0xFF2
 10869                           postinc0	equ	0xFEE
 10870                           wreg	equ	0xFE8
 10871                           indf1	equ	0xFE7
 10872                           postinc1	equ	0xFE6
 10873                           postdec1	equ	0xFE5
 10874                           fsr1h	equ	0xFE2
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           plusw2	equ	0xFDB
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _Button_Reading_Update *****************
 10885 ;; Defined at:
 10886 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;  button          2    7[BANK0 ] PTR struct .
 10889 ;;		 -> mtouch_button(80), 
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;		None
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  1    wreg      void 
 10894 ;; Registers used:
 10895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10896 ;; Tracked objects:
 10897 ;;		On entry : 0/0
 10898 ;;		On exit  : 0/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10905 ;;Total ram usage:        2 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    7
 10908 ;; This function calls:
 10909 ;;		_Button_Reading_Update_Helper
 10910 ;; This function is called by:
 10911 ;;		_Button_Service
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text66
 10916  0122B0                     __ptext66:
 10917                           	opt stack 0
 10918  0122B0                     _Button_Reading_Update:
 10919                           	opt stack 20
 10920                           
 10921                           ;mtouch_button.c: 453: if (GIE == (uint8_t) 1)
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;incstack = 0
 10925  0122B0  AEF2               	btfss	intcon,7,c	;volatile
 10926  0122B2  D009               	goto	l924
 10927                           
 10928                           ;mtouch_button.c: 454: {
 10929                           ;mtouch_button.c: 455: GIE = (uint8_t) 0;
 10930  0122B4  9EF2               	bcf	intcon,7,c	;volatile
 10931                           
 10932                           ;mtouch_button.c: 456: Button_Reading_Update_Helper(button);
 10933  0122B6  C0B7  F0B3         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 10934  0122BA  C0B8  F0B4         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 10935  0122BE  EC5C  F08A         	call	_Button_Reading_Update_Helper	;wreg free
 10936                           
 10937                           ;mtouch_button.c: 457: GIE = (uint8_t) 1;
 10938  0122C2  8EF2               	bsf	intcon,7,c	;volatile
 10939                           
 10940                           ;mtouch_button.c: 458: }
 10941  0122C4  0012               	return	
 10942  0122C6                     l924:
 10943                           
 10944                           ;mtouch_button.c: 459: else
 10945                           ;mtouch_button.c: 460: {
 10946                           ;mtouch_button.c: 461: Button_Reading_Update_Helper(button);
 10947  0122C6  C0B7  F0B3         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 10948  0122CA  C0B8  F0B4         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 10949  0122CE  EC5C  F08A         	call	_Button_Reading_Update_Helper	;wreg free
 10950  0122D2  0012               	return	
 10951  0122D4                     __end_of_Button_Reading_Update:
 10952                           	opt stack 0
 10953                           tosu	equ	0xFFF
 10954                           tosh	equ	0xFFE
 10955                           tosl	equ	0xFFD
 10956                           pclath	equ	0xFFA
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           postinc0	equ	0xFEE
 10965                           wreg	equ	0xFE8
 10966                           indf1	equ	0xFE7
 10967                           postinc1	equ	0xFE6
 10968                           postdec1	equ	0xFE5
 10969                           fsr1h	equ	0xFE2
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           plusw2	equ	0xFDB
 10975                           fsr2h	equ	0xFDA
 10976                           fsr2l	equ	0xFD9
 10977                           status	equ	0xFD8
 10978                           
 10979 ;; *************** function _Button_Reading_Update_Helper *****************
 10980 ;; Defined at:
 10981 ;;		line 465 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  button          2    3[BANK0 ] PTR struct .
 10984 ;;		 -> mtouch_button(80), 
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;		None
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      void 
 10989 ;; Registers used:
 10990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10999 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11000 ;;Total ram usage:        4 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    6
 11003 ;; This function calls:
 11004 ;;		_MTOUCH_Sensor_RawSample_Get
 11005 ;; This function is called by:
 11006 ;;		_Button_Reading_Update
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text67
 11011  0114B8                     __ptext67:
 11012                           	opt stack 0
 11013  0114B8                     _Button_Reading_Update_Helper:
 11014                           	opt stack 20
 11015                           
 11016                           ;mtouch_button.c: 467: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 11017                           
 11018                           ;incstack = 0
 11019  0114B8  0100               	movlb	0	; () banked
 11020  0114BA  EE20 F002          	lfsr	2,2
 11021  0114BE  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11022  0114C0  26D9               	addwf	fsr2l,f,c
 11023  0114C2  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11024  0114C4  22DA               	addwfc	fsr2h,f,c
 11025  0114C6  50DF               	movf	indf2,w,c
 11026  0114C8  B4D8               	btfsc	status,2,c
 11027  0114CA  D035               	goto	l929
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;mtouch_button.c: 468: {
 11031                           ;mtouch_button.c: 469: button->reading -= button->reading>>(uint8_t)2;
 11032  0114CC  EE20 F003          	lfsr	2,3
 11033  0114D0  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11034  0114D2  26D9               	addwf	fsr2l,f,c
 11035  0114D4  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11036  0114D6  22DA               	addwfc	fsr2h,f,c
 11037  0114D8  CFDE F0B5          	movff	postinc2,??_Button_Reading_Update_Helper
 11038  0114DC  CFDD F0B6          	movff	postdec2,??_Button_Reading_Update_Helper+1
 11039  0114E0  90D8               	bcf	status,0,c
 11040  0114E2  33B6               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11041  0114E4  33B5               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11042  0114E6  90D8               	bcf	status,0,c
 11043  0114E8  33B6               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11044  0114EA  33B5               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11045  0114EC  EE20 F003          	lfsr	2,3
 11046  0114F0  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11047  0114F2  26D9               	addwf	fsr2l,f,c
 11048  0114F4  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11049  0114F6  22DA               	addwfc	fsr2h,f,c
 11050  0114F8  51B5               	movf	??_Button_Reading_Update_Helper& (0+255),w,b
 11051  0114FA  5EDE               	subwf	postinc2,f,c
 11052  0114FC  51B6               	movf	(??_Button_Reading_Update_Helper+1)& (0+255),w,b
 11053  0114FE  5ADD               	subwfb	postdec2,f,c
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;mtouch_button.c: 470: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
 11057  011500  EE20 F001          	lfsr	2,1
 11058  011504  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11059  011506  26D9               	addwf	fsr2l,f,c
 11060  011508  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11061  01150A  22DA               	addwfc	fsr2h,f,c
 11062  01150C  50DF               	movf	indf2,w,c
 11063  01150E  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11064  011512  0100               	movlb	0	; () banked
 11065  011514  90D8               	bcf	status,0,c
 11066  011516  33B1               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11067  011518  33B0               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11068  01151A  90D8               	bcf	status,0,c
 11069  01151C  33B1               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11070  01151E  33B0               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11071  011520  EE20 F003          	lfsr	2,3
 11072  011524  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11073  011526  26D9               	addwf	fsr2l,f,c
 11074  011528  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11075  01152A  22DA               	addwfc	fsr2h,f,c
 11076  01152C  51B0               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 11077  01152E  26DE               	addwf	postinc2,f,c
 11078  011530  51B1               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 11079  011532  22DD               	addwfc	postdec2,f,c
 11080                           
 11081                           ;mtouch_button.c: 471: }
 11082  011534  0012               	return	
 11083  011536                     l929:
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;mtouch_button.c: 472: else
 11087                           ;mtouch_button.c: 473: {
 11088                           ;mtouch_button.c: 474: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11089                           
 11090                           ; BSR set to: 0
 11091  011536  EE20 F001          	lfsr	2,1
 11092  01153A  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11093  01153C  26D9               	addwf	fsr2l,f,c
 11094  01153E  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11095  011540  22DA               	addwfc	fsr2h,f,c
 11096  011542  50DF               	movf	indf2,w,c
 11097  011544  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11098  011548  0100               	movlb	0	; () banked
 11099  01154A  EE20 F003          	lfsr	2,3
 11100  01154E  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11101  011550  26D9               	addwf	fsr2l,f,c
 11102  011552  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11103  011554  22DA               	addwfc	fsr2h,f,c
 11104  011556  C0B0  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
 11105  01155A  C0B1  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
 11106  01155E  0012               	return	
 11107  011560                     __end_of_Button_Reading_Update_Helper:
 11108                           	opt stack 0
 11109                           tosu	equ	0xFFF
 11110                           tosh	equ	0xFFE
 11111                           tosl	equ	0xFFD
 11112                           pclath	equ	0xFFA
 11113                           tblptru	equ	0xFF8
 11114                           tblptrh	equ	0xFF7
 11115                           tblptrl	equ	0xFF6
 11116                           tablat	equ	0xFF5
 11117                           prodh	equ	0xFF4
 11118                           prodl	equ	0xFF3
 11119                           intcon	equ	0xFF2
 11120                           postinc0	equ	0xFEE
 11121                           wreg	equ	0xFE8
 11122                           indf1	equ	0xFE7
 11123                           postinc1	equ	0xFE6
 11124                           postdec1	equ	0xFE5
 11125                           fsr1h	equ	0xFE2
 11126                           fsr1l	equ	0xFE1
 11127                           indf2	equ	0xFDF
 11128                           postinc2	equ	0xFDE
 11129                           postdec2	equ	0xFDD
 11130                           plusw2	equ	0xFDB
 11131                           fsr2h	equ	0xFDA
 11132                           fsr2l	equ	0xFD9
 11133                           status	equ	0xFD8
 11134                           
 11135 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11136 ;; Defined at:
 11137 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  name            1    wreg     enum E17513
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;  name            1    2[BANK0 ] enum E17513
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  2    0[BANK0 ] unsigned int 
 11144 ;; Registers used:
 11145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11151 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11155 ;;Total ram usage:        3 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    5
 11158 ;; This function calls:
 11159 ;;		Nothing
 11160 ;; This function is called by:
 11161 ;;		_Button_Reading_Update_Helper
 11162 ;;		_Button_Baseline_Initialize
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text68
 11167  011F5A                     __ptext68:
 11168                           	opt stack 0
 11169  011F5A                     _MTOUCH_Sensor_RawSample_Get:
 11170                           	opt stack 20
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;incstack = 0
 11174                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11175  011F5A  0100               	movlb	0	; () banked
 11176  011F5C  6FB2               	movwf	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11177                           
 11178                           ;mtouch_sensor.c: 534: if (name < 5)
 11179  011F5E  0E05               	movlw	5
 11180  011F60  0100               	movlb	0	; () banked
 11181  011F62  61B2               	cpfslt	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11182  011F64  D011               	goto	l632
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;mtouch_sensor.c: 535: {
 11186                           ;mtouch_sensor.c: 536: return mtouch_sensor[name].rawSample;
 11187  011F66  51B2               	movf	MTOUCH_Sensor_RawSample_Get@name& (0+255),w,b
 11188  011F68  0D09               	mullw	9
 11189  011F6A  0E06               	movlw	6
 11190  011F6C  26F3               	addwf	prodl,f,c
 11191  011F6E  0E00               	movlw	0
 11192  011F70  22F4               	addwfc	prodh,f,c
 11193  011F72  0E83               	movlw	low _mtouch_sensor
 11194  011F74  24F3               	addwf	prodl,w,c
 11195  011F76  6ED9               	movwf	fsr2l,c
 11196  011F78  0E00               	movlw	high _mtouch_sensor
 11197  011F7A  20F4               	addwfc	prodh,w,c
 11198  011F7C  6EDA               	movwf	fsr2h,c
 11199  011F7E  CFDE F0B0          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
 11200  011F82  CFDD F0B1          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;mtouch_sensor.c: 537: }
 11204                           
 11205                           ; BSR set to: 0
 11206  011F86  0012               	return	
 11207  011F88                     l632:
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;mtouch_sensor.c: 538: else
 11211                           ;mtouch_sensor.c: 539: return (mtouch_sensor_sample_t)0;
 11212                           
 11213                           ; BSR set to: 0
 11214  011F88  0E00               	movlw	0
 11215  011F8A  6FB1               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),b
 11216  011F8C  0E00               	movlw	0
 11217  011F8E  6FB0               	movwf	?_MTOUCH_Sensor_RawSample_Get& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220  011F90  0012               	return	
 11221  011F92                     __end_of_MTOUCH_Sensor_RawSample_Get:
 11222                           	opt stack 0
 11223                           tosu	equ	0xFFF
 11224                           tosh	equ	0xFFE
 11225                           tosl	equ	0xFFD
 11226                           pclath	equ	0xFFA
 11227                           tblptru	equ	0xFF8
 11228                           tblptrh	equ	0xFF7
 11229                           tblptrl	equ	0xFF6
 11230                           tablat	equ	0xFF5
 11231                           prodh	equ	0xFF4
 11232                           prodl	equ	0xFF3
 11233                           intcon	equ	0xFF2
 11234                           postinc0	equ	0xFEE
 11235                           wreg	equ	0xFE8
 11236                           indf1	equ	0xFE7
 11237                           postinc1	equ	0xFE6
 11238                           postdec1	equ	0xFE5
 11239                           fsr1h	equ	0xFE2
 11240                           fsr1l	equ	0xFE1
 11241                           indf2	equ	0xFDF
 11242                           postinc2	equ	0xFDE
 11243                           postdec2	equ	0xFDD
 11244                           plusw2	equ	0xFDB
 11245                           fsr2h	equ	0xFDA
 11246                           fsr2l	equ	0xFD9
 11247                           status	equ	0xFD8
 11248                           
 11249 ;; *************** function _Button_Deviation_Update *****************
 11250 ;; Defined at:
 11251 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  button          2    0[BANK0 ] PTR struct .
 11254 ;;		 -> mtouch_button(80), 
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  deviation       4    8[BANK0 ] long 
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11266 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11267 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11268 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11269 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11270 ;;Total ram usage:       12 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    5
 11273 ;; This function calls:
 11274 ;;		Nothing
 11275 ;; This function is called by:
 11276 ;;		_Button_Service
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           	psect	text69
 11281  010F40                     __ptext69:
 11282                           	opt stack 0
 11283  010F40                     _Button_Deviation_Update:
 11284                           	opt stack 22
 11285                           
 11286                           ;mtouch_button.c: 404: int32_t deviation;
 11287                           ;mtouch_button.c: 406: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;incstack = 0
 11291  010F40  0100               	movlb	0	; () banked
 11292  010F42  EE20 F005          	lfsr	2,5
 11293  010F46  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11294  010F48  26D9               	addwf	fsr2l,f,c
 11295  010F4A  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11296  010F4C  22DA               	addwfc	fsr2h,f,c
 11297  010F4E  CFDE F0B2          	movff	postinc2,??_Button_Deviation_Update
 11298  010F52  CFDE F0B3          	movff	postinc2,??_Button_Deviation_Update+1
 11299  010F56  CFDE F0B4          	movff	postinc2,??_Button_Deviation_Update+2
 11300  010F5A  CFDE F0B5          	movff	postinc2,??_Button_Deviation_Update+3
 11301  010F5E  0E05               	movlw	5
 11302  010F60  D005               	goto	u4880
 11303  010F62                     u4885:
 11304  010F62  90D8               	bcf	status,0,c
 11305  010F64  33B5               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11306  010F66  33B4               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11307  010F68  33B3               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11308  010F6A  33B2               	rrcf	??_Button_Deviation_Update& (0+255),f,b
 11309  010F6C                     u4880:
 11310  010F6C  2EE8               	decfsz	wreg,f,c
 11311  010F6E  D7F9               	goto	u4885
 11312  010F70  1FB2               	comf	??_Button_Deviation_Update& (0+255),f,b
 11313  010F72  1FB3               	comf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11314  010F74  1FB4               	comf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11315  010F76  1FB5               	comf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11316  010F78  2BB2               	incf	??_Button_Deviation_Update& (0+255),f,b
 11317  010F7A  0E00               	movlw	0
 11318  010F7C  23B3               	addwfc	(??_Button_Deviation_Update+1)& (0+255),f,b
 11319  010F7E  23B4               	addwfc	(??_Button_Deviation_Update+2)& (0+255),f,b
 11320  010F80  23B5               	addwfc	(??_Button_Deviation_Update+3)& (0+255),f,b
 11321  010F82  EE20 F003          	lfsr	2,3
 11322  010F86  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11323  010F88  26D9               	addwf	fsr2l,f,c
 11324  010F8A  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11325  010F8C  22DA               	addwfc	fsr2h,f,c
 11326  010F8E  CFDE F0B6          	movff	postinc2,??_Button_Deviation_Update+4
 11327  010F92  CFDD F0B7          	movff	postdec2,??_Button_Deviation_Update+5
 11328  010F96  51B6               	movf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11329  010F98  25B2               	addwf	??_Button_Deviation_Update& (0+255),w,b
 11330  010F9A  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11331  010F9C  51B7               	movf	(??_Button_Deviation_Update+5)& (0+255),w,b
 11332  010F9E  21B3               	addwfc	(??_Button_Deviation_Update+1)& (0+255),w,b
 11333  010FA0  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11334  010FA2  0E00               	movlw	0
 11335  010FA4  21B4               	addwfc	(??_Button_Deviation_Update+2)& (0+255),w,b
 11336  010FA6  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11337  010FA8  0E00               	movlw	0
 11338  010FAA  21B5               	addwfc	(??_Button_Deviation_Update+3)& (0+255),w,b
 11339  010FAC  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11340                           
 11341                           ;mtouch_button.c: 409: deviation = deviation >> (button->scaling);
 11342  010FAE  EE20 F00F          	lfsr	2,15
 11343  010FB2  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11344  010FB4  26D9               	addwf	fsr2l,f,c
 11345  010FB6  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11346  010FB8  22DA               	addwfc	fsr2h,f,c
 11347  010FBA  50DF               	movf	indf2,w,c
 11348  010FBC  6FB2               	movwf	??_Button_Deviation_Update& (0+255),b
 11349  010FBE  C0B8  F0B3         	movff	Button_Deviation_Update@deviation,??_Button_Deviation_Update+1
 11350  010FC2  C0B9  F0B4         	movff	Button_Deviation_Update@deviation+1,??_Button_Deviation_Update+2
 11351  010FC6  C0BA  F0B5         	movff	Button_Deviation_Update@deviation+2,??_Button_Deviation_Update+3
 11352  010FCA  C0BB  F0B6         	movff	Button_Deviation_Update@deviation+3,??_Button_Deviation_Update+4
 11353  010FCE                     u4895:
 11354  010FCE  67B2               	tstfsz	??_Button_Deviation_Update& (0+255),b
 11355  010FD0  D001               	goto	u4896
 11356  010FD2  D007               	goto	u4897
 11357  010FD4                     u4896:
 11358  010FD4  35B6               	rlcf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11359  010FD6  33B6               	rrcf	(??_Button_Deviation_Update+4)& (0+255),f,b
 11360  010FD8  33B5               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11361  010FDA  33B4               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11362  010FDC  33B3               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11363  010FDE  2FB2               	decfsz	??_Button_Deviation_Update& (0+255),f,b
 11364  010FE0  D7F6               	goto	u4895
 11365  010FE2                     u4897:
 11366  010FE2  C0B3  F0B8         	movff	??_Button_Deviation_Update+1,Button_Deviation_Update@deviation
 11367  010FE6  C0B4  F0B9         	movff	??_Button_Deviation_Update+2,Button_Deviation_Update@deviation+1
 11368  010FEA  C0B5  F0BA         	movff	??_Button_Deviation_Update+3,Button_Deviation_Update@deviation+2
 11369  010FEE  C0B6  F0BB         	movff	??_Button_Deviation_Update+4,Button_Deviation_Update@deviation+3
 11370                           
 11371                           ;mtouch_button.c: 412: if (deviation > ((127)))
 11372  010FF2  0100               	movlb	0	; () banked
 11373  010FF4  BFBB               	btfsc	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11374  010FF6  D010               	goto	l908
 11375  010FF8  51BB               	movf	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11376  010FFA  11BA               	iorwf	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11377  010FFC  11B9               	iorwf	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11378  010FFE  E104               	bnz	u4900
 11379  011000  0E80               	movlw	128
 11380  011002  5DB8               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11381  011004  A0D8               	btfss	status,0,c
 11382  011006  D008               	goto	l908
 11383  011008                     u4900:
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;mtouch_button.c: 413: {
 11387                           ;mtouch_button.c: 414: deviation = ((127));
 11388  011008  0E7F               	movlw	127
 11389  01100A  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11390  01100C  0E00               	movlw	0
 11391  01100E  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11392  011010  0E00               	movlw	0
 11393  011012  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11394  011014  0E00               	movlw	0
 11395  011016  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11396  011018                     l908:
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;mtouch_button.c: 415: }
 11400                           ;mtouch_button.c: 416: if (deviation < ((-128)))
 11401                           
 11402                           ; BSR set to: 0
 11403  011018  AFBB               	btfss	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11404  01101A  D012               	goto	l909
 11405  01101C  0E80               	movlw	128
 11406  01101E  5DB8               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11407  011020  0EFF               	movlw	255
 11408  011022  59B9               	subwfb	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11409  011024  0EFF               	movlw	255
 11410  011026  59BA               	subwfb	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11411  011028  0EFF               	movlw	255
 11412  01102A  59BB               	subwfb	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11413  01102C  B0D8               	btfsc	status,0,c
 11414  01102E  D008               	goto	l909
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;mtouch_button.c: 417: {
 11418                           ;mtouch_button.c: 418: deviation = ((-128));
 11419  011030  0E80               	movlw	128
 11420  011032  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11421  011034  0EFF               	movlw	255
 11422  011036  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11423  011038  0EFF               	movlw	255
 11424  01103A  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11425  01103C  0EFF               	movlw	255
 11426  01103E  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11427  011040                     l909:
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;mtouch_button.c: 419: }
 11431                           ;mtouch_button.c: 421: button->deviation = (mtouch_button_deviation_t)deviation;
 11432                           
 11433                           ; BSR set to: 0
 11434  011040  EE20 F009          	lfsr	2,9
 11435  011044  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11436  011046  26D9               	addwf	fsr2l,f,c
 11437  011048  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11438  01104A  22DA               	addwfc	fsr2h,f,c
 11439  01104C  C0B8  FFDF         	movff	Button_Deviation_Update@deviation,indf2
 11440                           
 11441                           ; BSR set to: 0
 11442  011050  0012               	return		;funcret
 11443  011052                     __end_of_Button_Deviation_Update:
 11444                           	opt stack 0
 11445                           tosu	equ	0xFFF
 11446                           tosh	equ	0xFFE
 11447                           tosl	equ	0xFFD
 11448                           pclath	equ	0xFFA
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           indf1	equ	0xFE7
 11459                           postinc1	equ	0xFE6
 11460                           postdec1	equ	0xFE5
 11461                           fsr1h	equ	0xFE2
 11462                           fsr1l	equ	0xFE1
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           plusw2	equ	0xFDB
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function _MTOUCH_Button_State_Get *****************
 11472 ;; Defined at:
 11473 ;;		line 513 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  name            1    wreg     enum E17454
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  name            1    0[BANK0 ] enum E17454
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      unsigned char 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11490 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11491 ;;Total ram usage:        1 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    5
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_main
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text70
 11502  012124                     __ptext70:
 11503                           	opt stack 0
 11504  012124                     _MTOUCH_Button_State_Get:
 11505                           	opt stack 25
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;incstack = 0
 11509                           ;MTOUCH_Button_State_Get@name stored from wreg
 11510  012124  0100               	movlb	0	; () banked
 11511  012126  6FB0               	movwf	MTOUCH_Button_State_Get@name& (0+255),b
 11512                           
 11513                           ;mtouch_button.c: 515: if(name < 5)
 11514  012128  0E05               	movlw	5
 11515  01212A  0100               	movlb	0	; () banked
 11516  01212C  61B0               	cpfslt	MTOUCH_Button_State_Get@name& (0+255),b
 11517  01212E  D00E               	goto	l950
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;mtouch_button.c: 516: return (uint8_t)mtouch_button[name].state;
 11521  012130  51B0               	movf	MTOUCH_Button_State_Get@name& (0+255),w,b
 11522  012132  0D10               	mullw	16
 11523  012134  0E02               	movlw	2
 11524  012136  26F3               	addwf	prodl,f,c
 11525  012138  0E00               	movlw	0
 11526  01213A  22F4               	addwfc	prodh,f,c
 11527  01213C  0E40               	movlw	low _mtouch_button
 11528  01213E  24F3               	addwf	prodl,w,c
 11529  012140  6ED9               	movwf	fsr2l,c
 11530  012142  0E01               	movlw	high _mtouch_button
 11531  012144  20F4               	addwfc	prodh,w,c
 11532  012146  6EDA               	movwf	fsr2h,c
 11533  012148  50DF               	movf	indf2,w,c
 11534                           
 11535                           ; BSR set to: 0
 11536                           
 11537                           ; BSR set to: 0
 11538  01214A  0012               	return	
 11539  01214C                     l950:
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;mtouch_button.c: 517: else
 11543                           ;mtouch_button.c: 518: return 0;
 11544                           
 11545                           ; BSR set to: 0
 11546  01214C  0E00               	movlw	0
 11547                           
 11548                           ; BSR set to: 0
 11549  01214E  0012               	return	
 11550  012150                     __end_of_MTOUCH_Button_State_Get:
 11551                           	opt stack 0
 11552                           tosu	equ	0xFFF
 11553                           tosh	equ	0xFFE
 11554                           tosl	equ	0xFFD
 11555                           pclath	equ	0xFFA
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           postinc0	equ	0xFEE
 11564                           wreg	equ	0xFE8
 11565                           indf1	equ	0xFE7
 11566                           postinc1	equ	0xFE6
 11567                           postdec1	equ	0xFE5
 11568                           fsr1h	equ	0xFE2
 11569                           fsr1l	equ	0xFE1
 11570                           indf2	equ	0xFDF
 11571                           postinc2	equ	0xFDE
 11572                           postdec2	equ	0xFDD
 11573                           plusw2	equ	0xFDB
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 11579 ;; Defined at:
 11580 ;;		line 71 in file "mcc_generated_files/interrupt_manager.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      void 
 11587 ;; Registers used:
 11588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11596 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11597 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11598 ;;Total ram usage:       18 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    4
 11601 ;; This function calls:
 11602 ;;		Absolute function
 11603 ;;		_ADCC_ThresholdISR_mTouch
 11604 ;;		_EUSART2_Receive_ISR
 11605 ;;		_EUSART2_Transmit_ISR
 11606 ;; This function is called by:
 11607 ;;		Interrupt level 2
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           	psect	intcode
 11612  000008                     __pintcode:
 11613                           	opt stack 0
 11614  000008                     _INTERRUPT_InterruptManagerHigh:
 11615                           	opt stack 20
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;incstack = 0
 11619  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11620  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 11621  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 11622  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 11623  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 11624  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 11625  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 11626  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 11627  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 11628  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 11629  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 11630  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 11631  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 11632  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 11633  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 11634  000042  C04F  F025         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 11635  000046  C050  F026         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 11636  00004A  C051  F027         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 11637  00004E  C052  F028         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 11638                           
 11639                           ;interrupt_manager.c: 74: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 11640  000052  010E               	movlb	14	; () banked
 11641  000054  BD2C               	btfsc	44,6,b	;volatile
 11642                           
 11643                           ; BSR set to: 14
 11644  000056  AD36               	btfss	54,6,b	;volatile
 11645  000058  D00A               	goto	i2l114
 11646                           
 11647                           ; BSR set to: 14
 11648                           ;interrupt_manager.c: 75: {
 11649                           ;interrupt_manager.c: 76: EUSART2_TxDefaultInterruptHandler();
 11650  00005A  D801               	call	i2u414_48
 11651  00005C  D01D               	goto	i2l118
 11652  00005E                     i2u414_48:
 11653  00005E  0005               	push	
 11654  000060  6EFA               	movwf	pclath,c
 11655  000062  504B               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 11656  000064  6EFD               	movwf	tosl,c
 11657  000066  504C               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 11658  000068  6EFE               	movwf	tosh,c
 11659  00006A  504D               	movf	_EUSART2_TxDefaultInterruptHandler+2,w,c
 11660  00006C  D00D               	goto	L4
 11661  00006E                     i2l114:
 11662                           
 11663                           ; BSR set to: 14
 11664                           ;interrupt_manager.c: 78: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 11665  00006E  BF2C               	btfsc	44,7,b	;volatile
 11666                           
 11667                           ; BSR set to: 14
 11668  000070  AF36               	btfss	54,7,b	;volatile
 11669  000072  D00D               	goto	i2l116
 11670                           
 11671                           ; BSR set to: 14
 11672                           ;interrupt_manager.c: 79: {
 11673                           ;interrupt_manager.c: 80: EUSART2_RxDefaultInterruptHandler();
 11674  000074  D801               	call	i2u417_48
 11675  000076  D010               	goto	i2l118
 11676  000078                     i2u417_48:
 11677  000078  0005               	push	
 11678  00007A  6EFA               	movwf	pclath,c
 11679  00007C  0100               	movlb	0	; () banked
 11680  00007E  51E1               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
 11681  000080  6EFD               	movwf	tosl,c
 11682  000082  51E2               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
 11683  000084  6EFE               	movwf	tosh,c
 11684  000086  51E3               	movf	(_EUSART2_RxDefaultInterruptHandler+2)& (0+255),w,b
 11685  000088                     L4:
 11686  000088  6EFF               	movwf	tosu,c
 11687  00008A  50FA               	movf	pclath,w,c
 11688  00008C  0012               	return		;indir
 11689  00008E                     i2l116:
 11690                           
 11691                           ; BSR set to: 14
 11692                           ;interrupt_manager.c: 82: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 11693  00008E  B32A               	btfsc	42,1,b	;volatile
 11694                           
 11695                           ; BSR set to: 14
 11696  000090  A334               	btfss	52,1,b	;volatile
 11697  000092  D002               	goto	i2l118
 11698                           
 11699                           ; BSR set to: 14
 11700                           ;interrupt_manager.c: 83: {
 11701                           ;interrupt_manager.c: 84: ADCC_ThresholdISR_mTouch();
 11702  000094  EC36  F092         	call	_ADCC_ThresholdISR_mTouch	;wreg free
 11703  000098                     i2l118:
 11704                           
 11705                           ;interrupt_manager.c: 86: else
 11706                           ;interrupt_manager.c: 87: {
 11707  000098  C028  F052         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 11708  00009C  C027  F051         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 11709  0000A0  C026  F050         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 11710  0000A4  C025  F04F         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 11711  0000A8  C024  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 11712  0000AC  C023  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 11713  0000B0  C022  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 11714  0000B4  C021  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 11715  0000B8  C020  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 11716  0000BC  C01F  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 11717  0000C0  C01E  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 11718  0000C4  C01D  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 11719  0000C8  C01C  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 11720  0000CC  C01B  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 11721  0000D0  C01A  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 11722  0000D4  C019  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 11723  0000D8  C018  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 11724  0000DC  C017  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 11725  0000E0  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11726  0000E2  0011               	retfie		f
 11727  0000E4                     __end_of_INTERRUPT_InterruptManagerHigh:
 11728                           	opt stack 0
 11729                           tosu	equ	0xFFF
 11730                           tosh	equ	0xFFE
 11731                           tosl	equ	0xFFD
 11732                           pclatu	equ	0xFFB
 11733                           pclath	equ	0xFFA
 11734                           tblptru	equ	0xFF8
 11735                           tblptrh	equ	0xFF7
 11736                           tblptrl	equ	0xFF6
 11737                           tablat	equ	0xFF5
 11738                           prodh	equ	0xFF4
 11739                           prodl	equ	0xFF3
 11740                           intcon	equ	0xFF2
 11741                           postinc0	equ	0xFEE
 11742                           fsr0h	equ	0xFEA
 11743                           fsr0l	equ	0xFE9
 11744                           wreg	equ	0xFE8
 11745                           indf1	equ	0xFE7
 11746                           postinc1	equ	0xFE6
 11747                           postdec1	equ	0xFE5
 11748                           fsr1h	equ	0xFE2
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           postdec2	equ	0xFDD
 11753                           plusw2	equ	0xFDB
 11754                           fsr2h	equ	0xFDA
 11755                           fsr2l	equ	0xFD9
 11756                           status	equ	0xFD8
 11757                           
 11758 ;; *************** function _EUSART2_Transmit_ISR *****************
 11759 ;; Defined at:
 11760 ;;		line 183 in file "mcc_generated_files/eusart2.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;		None
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  1    wreg      void 
 11767 ;; Registers used:
 11768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11778 ;;Total ram usage:        0 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; This function calls:
 11781 ;;		Nothing
 11782 ;; This function is called by:
 11783 ;;		_EUSART2_Initialize
 11784 ;;		_INTERRUPT_InterruptManagerHigh
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text72
 11789  01202E                     __ptext72:
 11790                           	opt stack 0
 11791  01202E                     _EUSART2_Transmit_ISR:
 11792                           	opt stack 23
 11793                           
 11794                           ;eusart2.c: 187: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 11795                           
 11796                           ;incstack = 0
 11797  01202E  0E40               	movlw	64
 11798  012030  604E               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 11799  012032  D013               	goto	i2l209
 11800                           
 11801                           ;eusart2.c: 188: {
 11802                           ;eusart2.c: 189: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 11803  012034  5040               	movf	_eusart2TxTail,w,c	;volatile
 11804  012036  0D01               	mullw	1
 11805  012038  0E00               	movlw	low _eusart2TxBuffer
 11806  01203A  24F3               	addwf	prodl,w,c
 11807  01203C  6ED9               	movwf	fsr2l,c
 11808  01203E  0E02               	movlw	high _eusart2TxBuffer
 11809  012040  20F4               	addwfc	prodh,w,c
 11810  012042  6EDA               	movwf	fsr2h,c
 11811  012044  50DF               	movf	indf2,w,c
 11812  012046  010E               	movlb	14	; () banked
 11813  012048  6FF2               	movwf	242,b	;volatile
 11814                           
 11815                           ; BSR set to: 14
 11816  01204A  2A40               	incf	_eusart2TxTail,f,c	;volatile
 11817                           
 11818                           ; BSR set to: 14
 11819                           ;eusart2.c: 190: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 11820  01204C  0E3F               	movlw	63
 11821  01204E  6440               	cpfsgt	_eusart2TxTail,c	;volatile
 11822  012050  D002               	goto	i2l210
 11823                           
 11824                           ; BSR set to: 14
 11825                           ;eusart2.c: 191: {
 11826                           ;eusart2.c: 192: eusart2TxTail = 0;
 11827  012052  0E00               	movlw	0
 11828  012054  6E40               	movwf	_eusart2TxTail,c	;volatile
 11829  012056                     i2l210:
 11830                           
 11831                           ; BSR set to: 14
 11832                           ;eusart2.c: 193: }
 11833                           ;eusart2.c: 194: eusart2TxBufferRemaining++;
 11834                           
 11835                           ; BSR set to: 14
 11836  012056  2A4E               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 11837                           
 11838                           ;eusart2.c: 195: }
 11839  012058  0012               	return	
 11840  01205A                     i2l209:
 11841                           
 11842                           ;eusart2.c: 196: else
 11843                           ;eusart2.c: 197: {
 11844                           ;eusart2.c: 198: PIE3bits.TX2IE = 0;
 11845  01205A  010E               	movlb	14	; () banked
 11846  01205C  9D2C               	bcf	44,6,b	;volatile
 11847  01205E  0012               	return	
 11848  012060                     __end_of_EUSART2_Transmit_ISR:
 11849                           	opt stack 0
 11850                           tosu	equ	0xFFF
 11851                           tosh	equ	0xFFE
 11852                           tosl	equ	0xFFD
 11853                           pclatu	equ	0xFFB
 11854                           pclath	equ	0xFFA
 11855                           tblptru	equ	0xFF8
 11856                           tblptrh	equ	0xFF7
 11857                           tblptrl	equ	0xFF6
 11858                           tablat	equ	0xFF5
 11859                           prodh	equ	0xFF4
 11860                           prodl	equ	0xFF3
 11861                           intcon	equ	0xFF2
 11862                           postinc0	equ	0xFEE
 11863                           fsr0h	equ	0xFEA
 11864                           fsr0l	equ	0xFE9
 11865                           wreg	equ	0xFE8
 11866                           indf1	equ	0xFE7
 11867                           postinc1	equ	0xFE6
 11868                           postdec1	equ	0xFE5
 11869                           fsr1h	equ	0xFE2
 11870                           fsr1l	equ	0xFE1
 11871                           indf2	equ	0xFDF
 11872                           postinc2	equ	0xFDE
 11873                           postdec2	equ	0xFDD
 11874                           plusw2	equ	0xFDB
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function _EUSART2_Receive_ISR *****************
 11880 ;; Defined at:
 11881 ;;		line 202 in file "mcc_generated_files/eusart2.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;		None
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;		None
 11886 ;; Return value:  Size  Location     Type
 11887 ;;                  1    wreg      void 
 11888 ;; Registers used:
 11889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11899 ;;Total ram usage:        0 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    3
 11902 ;; This function calls:
 11903 ;;		i2_printf
 11904 ;; This function is called by:
 11905 ;;		_EUSART2_Initialize
 11906 ;;		_INTERRUPT_InterruptManagerHigh
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text73
 11911  011560                     __ptext73:
 11912                           	opt stack 0
 11913  011560                     _EUSART2_Receive_ISR:
 11914                           	opt stack 20
 11915                           
 11916                           ;eusart2.c: 205: if(1 == RC2STAbits.OERR)
 11917                           
 11918                           ; BSR set to: 14
 11919                           ;incstack = 0
 11920  011560  010E               	movlb	14	; () banked
 11921  011562  A3F5               	btfss	245,1,b	;volatile
 11922  011564  D002               	goto	i2l215
 11923                           
 11924                           ; BSR set to: 14
 11925                           ;eusart2.c: 206: {
 11926                           ;eusart2.c: 209: RC2STAbits.CREN = 0;
 11927  011566  99F5               	bcf	245,4,b	;volatile
 11928                           
 11929                           ;eusart2.c: 210: RC2STAbits.CREN = 1;
 11930  011568  89F5               	bsf	245,4,b	;volatile
 11931  01156A                     i2l215:
 11932                           
 11933                           ; BSR set to: 14
 11934                           ;eusart2.c: 211: }
 11935                           ;eusart2.c: 214: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 11936                           
 11937                           ; BSR set to: 14
 11938  01156A  503F               	movf	_eusart2RxHead,w,c	;volatile
 11939  01156C  0D01               	mullw	1
 11940  01156E  0E00               	movlw	low _eusart2RxBuffer
 11941  011570  24F3               	addwf	prodl,w,c
 11942  011572  6ED9               	movwf	fsr2l,c
 11943  011574  0E01               	movlw	high _eusart2RxBuffer
 11944  011576  20F4               	addwfc	prodh,w,c
 11945  011578  6EDA               	movwf	fsr2h,c
 11946  01157A  CEF1 FFDF          	movff	3825,indf2	;volatile
 11947                           
 11948                           ; BSR set to: 14
 11949  01157E  2A3F               	incf	_eusart2RxHead,f,c	;volatile
 11950                           
 11951                           ; BSR set to: 14
 11952                           ;eusart2.c: 215: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 11953  011580  0E3F               	movlw	63
 11954  011582  643F               	cpfsgt	_eusart2RxHead,c	;volatile
 11955  011584  D002               	goto	i2l216
 11956                           
 11957                           ; BSR set to: 14
 11958                           ;eusart2.c: 216: {
 11959                           ;eusart2.c: 217: eusart2RxHead = 0;
 11960  011586  0E00               	movlw	0
 11961  011588  6E3F               	movwf	_eusart2RxHead,c	;volatile
 11962  01158A                     i2l216:
 11963                           
 11964                           ; BSR set to: 14
 11965                           ;eusart2.c: 218: }
 11966                           ;eusart2.c: 219: eusart2RxCount++;
 11967                           
 11968                           ; BSR set to: 14
 11969  01158A  2A3D               	incf	_eusart2RxCount,f,c	;volatile
 11970                           
 11971                           ; BSR set to: 14
 11972                           ;eusart2.c: 221: if((RC2REG == (int) '\n') || (RC2REG == (int) '\r')) {
 11973  01158C  0E0A               	movlw	10
 11974  01158E  19F1               	xorwf	241,w,b	;volatile
 11975  011590  B4D8               	btfsc	status,2,c
 11976  011592  D004               	goto	i2u401_40
 11977                           
 11978                           ; BSR set to: 14
 11979  011594  0E0D               	movlw	13
 11980  011596  19F1               	xorwf	241,w,b	;volatile
 11981  011598  A4D8               	btfss	status,2,c
 11982  01159A  D007               	goto	i2l217
 11983  01159C                     i2u401_40:
 11984                           
 11985                           ; BSR set to: 14
 11986                           ;eusart2.c: 223: eusart2RxStringReady = 1;
 11987                           
 11988                           ; BSR set to: 14
 11989  01159C  0E01               	movlw	1
 11990  01159E  0100               	movlb	0	; () banked
 11991  0115A0  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
 11992                           
 11993                           ;eusart2.c: 226: RC2REG = 0;
 11994  0115A2  0E00               	movlw	0
 11995  0115A4  010E               	movlb	14	; () banked
 11996  0115A6  6FF1               	movwf	241,b	;volatile
 11997                           
 11998                           ;eusart2.c: 228: }
 11999  0115A8  D003               	goto	i2l220
 12000  0115AA                     i2l217:
 12001                           
 12002                           ; BSR set to: 14
 12003                           ;eusart2.c: 230: else {
 12004                           ;eusart2.c: 232: eusart2RxStringReady = 0;
 12005                           
 12006                           ; BSR set to: 14
 12007  0115AA  0E00               	movlw	0
 12008  0115AC  0100               	movlb	0	; () banked
 12009  0115AE  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
 12010  0115B0                     i2l220:
 12011                           
 12012                           ;eusart2.c: 234: }
 12013                           ;eusart2.c: 237: if((RC2REG == (int) '\b')) {
 12014                           
 12015                           ; BSR set to: 0
 12016  0115B0  0E08               	movlw	8
 12017  0115B2  010E               	movlb	14	; () banked
 12018  0115B4  19F1               	xorwf	241,w,b	;volatile
 12019  0115B6  A4D8               	btfss	status,2,c
 12020  0115B8  0012               	return	
 12021                           
 12022                           ; BSR set to: 14
 12023                           ;eusart2.c: 239: eusart2RxBuffer[eusart2RxHead] = '\0';
 12024  0115BA  503F               	movf	_eusart2RxHead,w,c	;volatile
 12025  0115BC  0D01               	mullw	1
 12026  0115BE  0E00               	movlw	low _eusart2RxBuffer
 12027  0115C0  24F3               	addwf	prodl,w,c
 12028  0115C2  6ED9               	movwf	fsr2l,c
 12029  0115C4  0E01               	movlw	high _eusart2RxBuffer
 12030  0115C6  20F4               	addwfc	prodh,w,c
 12031  0115C8  6EDA               	movwf	fsr2h,c
 12032  0115CA  0E00               	movlw	0
 12033  0115CC  6EDF               	movwf	indf2,c
 12034                           
 12035                           ; BSR set to: 14
 12036                           ;eusart2.c: 240: eusart2RxHead--;
 12037  0115CE  063F               	decf	_eusart2RxHead,f,c	;volatile
 12038                           
 12039                           ; BSR set to: 14
 12040                           ;eusart2.c: 243: printf("\033[K");
 12041  0115D0  0EFB               	movlw	low STR_1
 12042  0115D2  6E0D               	movwf	i2printf@f,c
 12043  0115D4  0EFF               	movlw	high STR_1
 12044  0115D6  6E0E               	movwf	i2printf@f+1,c
 12045  0115D8  EC7A  F086         	call	i2_printf	;wreg free
 12046                           
 12047                           ;eusart2.c: 245: if(eusart2RxHead != eusart2RxTail) {
 12048  0115DC  503E               	movf	_eusart2RxTail,w,c	;volatile
 12049  0115DE  183F               	xorwf	_eusart2RxHead,w,c	;volatile
 12050  0115E0  B4D8               	btfsc	status,2,c
 12051  0115E2  D00B               	goto	i2l222
 12052                           
 12053                           ;eusart2.c: 247: eusart2RxBuffer[eusart2RxHead] = '\0';
 12054  0115E4  503F               	movf	_eusart2RxHead,w,c	;volatile
 12055  0115E6  0D01               	mullw	1
 12056  0115E8  0E00               	movlw	low _eusart2RxBuffer
 12057  0115EA  24F3               	addwf	prodl,w,c
 12058  0115EC  6ED9               	movwf	fsr2l,c
 12059  0115EE  0E01               	movlw	high _eusart2RxBuffer
 12060  0115F0  20F4               	addwfc	prodh,w,c
 12061  0115F2  6EDA               	movwf	fsr2h,c
 12062  0115F4  0E00               	movlw	0
 12063  0115F6  6EDF               	movwf	indf2,c
 12064                           
 12065                           ;eusart2.c: 248: eusart2RxHead--;
 12066  0115F8  063F               	decf	_eusart2RxHead,f,c	;volatile
 12067  0115FA                     i2l222:
 12068                           
 12069                           ;eusart2.c: 250: }
 12070                           ;eusart2.c: 252: RC2REG = 0;
 12071  0115FA  0E00               	movlw	0
 12072  0115FC  010E               	movlb	14	; () banked
 12073  0115FE  6FF1               	movwf	241,b	;volatile
 12074  011600  0012               	return	
 12075  011602                     __end_of_EUSART2_Receive_ISR:
 12076                           	opt stack 0
 12077                           tosu	equ	0xFFF
 12078                           tosh	equ	0xFFE
 12079                           tosl	equ	0xFFD
 12080                           pclatu	equ	0xFFB
 12081                           pclath	equ	0xFFA
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           postinc0	equ	0xFEE
 12090                           fsr0h	equ	0xFEA
 12091                           fsr0l	equ	0xFE9
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           postinc1	equ	0xFE6
 12095                           postdec1	equ	0xFE5
 12096                           fsr1h	equ	0xFE2
 12097                           fsr1l	equ	0xFE1
 12098                           indf2	equ	0xFDF
 12099                           postinc2	equ	0xFDE
 12100                           postdec2	equ	0xFDD
 12101                           plusw2	equ	0xFDB
 12102                           fsr2h	equ	0xFDA
 12103                           fsr2l	equ	0xFD9
 12104                           status	equ	0xFD8
 12105                           
 12106 ;; *************** function i2_printf *****************
 12107 ;; Defined at:
 12108 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12111 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
 12112 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
 12113 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
 12114 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
 12115 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
 12116 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
 12117 ;;		 -> STR_4(285), STR_3(4), STR_2(5), STR_1(4), 
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  printf          4    0        struct .
 12120 ;;  printf          3    0        PTR const unsigned char 
 12121 ;;  printf          2   19[COMRAM] unsigned int 
 12122 ;;  printf          2   15[COMRAM] PTR void [1]
 12123 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12124 ;;  printf          2    0        unsigned int 
 12125 ;;  printf          1   21[COMRAM] char 
 12126 ;;  printf          1   18[COMRAM] char 
 12127 ;;  printf          1   17[COMRAM] unsigned char 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  2   12[COMRAM] int 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12138 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12140 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12141 ;;Total ram usage:       10 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    2
 12144 ;; This function calls:
 12145 ;;		i2___lwdiv
 12146 ;;		i2___lwmod
 12147 ;;		i2_putch
 12148 ;; This function is called by:
 12149 ;;		_EUSART2_Receive_ISR
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text74
 12154  010CF4                     __ptext74:
 12155                           	opt stack 0
 12156  010CF4                     i2_printf:
 12157                           	opt stack 20
 12158                           
 12159                           ;doprnt.c: 466: va_list ap;
 12160                           ;doprnt.c: 499: signed char c;
 12161                           ;doprnt.c: 506: signed char prec;
 12162                           ;doprnt.c: 508: unsigned char flag;
 12163                           ;doprnt.c: 523: union {
 12164                           ;doprnt.c: 524: unsigned long vd;
 12165                           ;doprnt.c: 525: double integ;
 12166                           ;doprnt.c: 526: } tmpval;
 12167                           ;doprnt.c: 528: unsigned int val;
 12168                           ;doprnt.c: 529: unsigned len;
 12169                           ;doprnt.c: 530: const char * cp;
 12170                           ;doprnt.c: 533: *ap = __va_start();
 12171                           
 12172                           ; BSR set to: 14
 12173                           ;incstack = 0
 12174  010CF4  0E0F               	movlw	low (?i2_printf+2)
 12175  010CF6  6E10               	movwf	i2printf@ap,c
 12176  010CF8  0E00               	movlw	high (?i2_printf+2)
 12177  010CFA  6E11               	movwf	i2printf@ap+1,c
 12178                           
 12179                           ;doprnt.c: 536: while(c = *f++) {
 12180  010CFC  D085               	goto	i2u394_40
 12181  010CFE                     
 12182                           ;doprnt.c: 538: if(c != '%')
 12183  010CFE  0E25               	movlw	37
 12184  010D00  1816               	xorwf	i2printf@c,w,c
 12185  010D02  B4D8               	btfsc	status,2,c
 12186  010D04  D004               	goto	i2l974
 12187                           
 12188                           ;doprnt.c: 540: {
 12189                           ;doprnt.c: 541: (putch(c) );
 12190  010D06  5016               	movf	i2printf@c,w,c
 12191  010D08  EC31  F092         	call	i2_putch
 12192                           
 12193                           ;doprnt.c: 542: continue;
 12194  010D0C  D07D               	goto	i2u394_40
 12195  010D0E                     i2l974:
 12196                           
 12197                           ;doprnt.c: 543: }
 12198                           ;doprnt.c: 548: flag = 0;
 12199  010D0E  0E00               	movlw	0
 12200  010D10  6E12               	movwf	i2printf@flag,c
 12201                           
 12202                           ;doprnt.c: 822: }
 12203                           
 12204                           ;doprnt.c: 813: continue;
 12205                           
 12206                           ;doprnt.c: 802: default:
 12207                           
 12208                           ;doprnt.c: 698: case 'i':
 12209                           ;doprnt.c: 699: break;
 12210                           
 12211                           ;doprnt.c: 697: case 'd':
 12212                           
 12213                           ;doprnt.c: 638: goto alldone;
 12214                           
 12215                           ;doprnt.c: 637: case 0:
 12216                           
 12217                           ;doprnt.c: 635: switch(c = *f++) {
 12218  010D12  C00D  FFF6         	movff	i2printf@f,tblptrl
 12219  010D16  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12220  010D1A  4A0D               	infsnz	i2printf@f,f,c
 12221  010D1C  2A0E               	incf	i2printf@f+1,f,c
 12222  010D1E                     	if	0	;tblptru may be non-zero
 12223  010D1E                     	endif
 12224  010D1E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12225  010D1E  0E00               	movlw	low (__mediumconst shr (0+16))
 12226  010D20  6EF8               	movwf	tblptru,c
 12227  010D22                     	endif
 12228  010D22  0008               	tblrd		*
 12229  010D24  CFF5 F016          	movff	tablat,i2printf@c
 12230  010D28  5016               	movf	i2printf@c,w,c
 12231                           
 12232                           ; Switch size 1, requested type "space"
 12233                           ; Number of cases is 3, Range of values is 0 to 105
 12234                           ; switch strategies available:
 12235                           ; Name         Instructions Cycles
 12236                           ; simple_byte           10     6 (average)
 12237                           ;	Chosen strategy is simple_byte
 12238  010D2A  0A00               	xorlw	0	; case 0
 12239  010D2C  B4D8               	btfsc	status,2,c
 12240  010D2E  0012               	return	
 12241  010D30  0A64               	xorlw	100	; case 100
 12242  010D32  B4D8               	btfsc	status,2,c
 12243  010D34  D003               	goto	i2l980
 12244  010D36  0A0D               	xorlw	13	; case 105
 12245  010D38  A4D8               	btfss	status,2,c
 12246  010D3A  D066               	goto	i2u394_40
 12247  010D3C                     i2l980:
 12248                           
 12249                           ;doprnt.c: 1253: {
 12250                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12251  010D3C  C010  FFD9         	movff	i2printf@ap,fsr2l
 12252  010D40  C011  FFDA         	movff	i2printf@ap+1,fsr2h
 12253  010D44  CFDE F014          	movff	postinc2,i2printf@val
 12254  010D48  CFDD F015          	movff	postdec2,i2printf@val+1
 12255  010D4C  0E02               	movlw	2
 12256  010D4E  2610               	addwf	i2printf@ap,f,c
 12257  010D50  0E00               	movlw	0
 12258  010D52  2211               	addwfc	i2printf@ap+1,f,c
 12259                           
 12260                           ;doprnt.c: 1261: if((int)val < 0) {
 12261  010D54  AE15               	btfss	i2printf@val+1,7,c
 12262  010D56  D006               	goto	i2l982
 12263                           
 12264                           ;doprnt.c: 1262: flag |= 0x03;
 12265  010D58  0E03               	movlw	3
 12266  010D5A  1212               	iorwf	i2printf@flag,f,c
 12267                           
 12268                           ;doprnt.c: 1263: val = -val;
 12269  010D5C  6C14               	negf	i2printf@val,c
 12270  010D5E  1E15               	comf	i2printf@val+1,f,c
 12271  010D60  B0D8               	btfsc	status,0,c
 12272  010D62  2A15               	incf	i2printf@val+1,f,c
 12273  010D64                     i2l982:
 12274                           
 12275                           ;doprnt.c: 1264: }
 12276                           ;doprnt.c: 1266: }
 12277                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12278  010D64  0E01               	movlw	1
 12279  010D66  6E16               	movwf	i2printf@c,c
 12280  010D68                     i2l4051:
 12281  010D68  0E05               	movlw	5
 12282  010D6A  1816               	xorwf	i2printf@c,w,c
 12283  010D6C  B4D8               	btfsc	status,2,c
 12284  010D6E  D015               	goto	i2u392_40
 12285                           
 12286                           ;doprnt.c: 1306: if(val < dpowers[c])
 12287  010D70  5016               	movf	i2printf@c,w,c
 12288  010D72  0D02               	mullw	2
 12289  010D74  0E1B               	movlw	low _dpowers
 12290  010D76  24F3               	addwf	prodl,w,c
 12291  010D78  6EF6               	movwf	tblptrl,c
 12292  010D7A  0EFC               	movlw	high _dpowers
 12293  010D7C  20F4               	addwfc	prodh,w,c
 12294  010D7E  6EF7               	movwf	tblptrh,c
 12295  010D80                     	if	1	;There are 3 active tblptr bytes
 12296  010D80  6AF8               	clrf	tblptru,c
 12297  010D82  0E00               	movlw	low (__mediumconst shr (0+16))
 12298  010D84  22F8               	addwfc	tblptru,f,c
 12299  010D86                     	endif
 12300  010D86  0009               	tblrd		*+
 12301  010D88  50F5               	movf	tablat,w,c
 12302  010D8A  5C14               	subwf	i2printf@val,w,c
 12303  010D8C  0009               	tblrd		*+
 12304  010D8E  50F5               	movf	tablat,w,c
 12305  010D90  5815               	subwfb	i2printf@val+1,w,c
 12306  010D92  A0D8               	btfss	status,0,c
 12307  010D94  D002               	goto	i2u392_40
 12308                           
 12309                           ;doprnt.c: 1307: break;
 12310  010D96  2A16               	incf	i2printf@c,f,c
 12311  010D98  D7E7               	goto	i2l4051
 12312  010D9A                     i2u392_40:
 12313                           
 12314                           ;doprnt.c: 1422: {
 12315                           ;doprnt.c: 1438: if(flag & 0x03)
 12316  010D9A  C012  F00F         	movff	i2printf@flag,??i2_printf
 12317  010D9E  0E03               	movlw	3
 12318  010DA0  160F               	andwf	??i2_printf,f,c
 12319  010DA2  B4D8               	btfsc	status,2,c
 12320  010DA4  D003               	goto	i2l986
 12321                           
 12322                           ;doprnt.c: 1439: (putch('-') );
 12323  010DA6  0E2D               	movlw	45
 12324  010DA8  EC31  F092         	call	i2_putch
 12325  010DAC                     i2l986:
 12326                           
 12327                           ;doprnt.c: 1469: }
 12328                           ;doprnt.c: 1472: prec = c;
 12329  010DAC  C016  F013         	movff	i2printf@c,i2printf@prec
 12330                           
 12331                           ;doprnt.c: 1474: while(prec--) {
 12332  010DB0  D027               	goto	i2l987
 12333  010DB2                     
 12334                           ;doprnt.c: 1478: {
 12335                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12336  010DB2  5013               	movf	i2printf@prec,w,c
 12337  010DB4  0D02               	mullw	2
 12338  010DB6  0E1B               	movlw	low _dpowers
 12339  010DB8  24F3               	addwf	prodl,w,c
 12340  010DBA  6EF6               	movwf	tblptrl,c
 12341  010DBC  0EFC               	movlw	high _dpowers
 12342  010DBE  20F4               	addwfc	prodh,w,c
 12343  010DC0  6EF7               	movwf	tblptrh,c
 12344  010DC2                     	if	1	;There are 3 active tblptr bytes
 12345  010DC2  6AF8               	clrf	tblptru,c
 12346  010DC4  0E00               	movlw	low (__mediumconst shr (0+16))
 12347  010DC6  22F8               	addwfc	tblptru,f,c
 12348  010DC8                     	endif
 12349  010DC8  0009               	tblrd		*+
 12350  010DCA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12351  010DCE  000A               	tblrd		*-
 12352  010DD0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12353  010DD4  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12354  010DD8  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12355  010DDC  EC9E  F08D         	call	i2___lwdiv	;wreg free
 12356  010DE0  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12357  010DE4  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12358  010DE8  0E00               	movlw	0
 12359  010DEA  6E0B               	movwf	i2___lwmod@divisor+1,c
 12360  010DEC  0E0A               	movlw	10
 12361  010DEE  6E0A               	movwf	i2___lwmod@divisor,c
 12362  010DF0  EC82  F08E         	call	i2___lwmod	;wreg free
 12363  010DF4  5008               	movf	?i2___lwmod,w,c
 12364  010DF6  0F30               	addlw	48
 12365  010DF8  6E16               	movwf	i2printf@c,c
 12366                           
 12367                           ;doprnt.c: 1523: }
 12368                           ;doprnt.c: 1524: (putch(c) );
 12369  010DFA  5016               	movf	i2printf@c,w,c
 12370  010DFC  EC31  F092         	call	i2_putch
 12371  010E00                     i2l987:
 12372  010E00  0613               	decf	i2printf@prec,f,c
 12373  010E02  2813               	incf	i2printf@prec,w,c
 12374  010E04  A4D8               	btfss	status,2,c
 12375  010E06  D7D5               	goto	i2l988
 12376  010E08                     i2u394_40:
 12377  010E08  C00D  FFF6         	movff	i2printf@f,tblptrl
 12378  010E0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12379  010E10  4A0D               	infsnz	i2printf@f,f,c
 12380  010E12  2A0E               	incf	i2printf@f+1,f,c
 12381  010E14                     	if	0	;tblptru may be non-zero
 12382  010E14                     	endif
 12383  010E14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12384  010E14  0E00               	movlw	low (__mediumconst shr (0+16))
 12385  010E16  6EF8               	movwf	tblptru,c
 12386  010E18                     	endif
 12387  010E18  0008               	tblrd		*
 12388  010E1A  CFF5 F016          	movff	tablat,i2printf@c
 12389  010E1E  5016               	movf	i2printf@c,w,c
 12390  010E20  B4D8               	btfsc	status,2,c
 12391  010E22  0012               	return	
 12392  010E24  D76C               	goto	i2l973
 12393  010E26                     __end_ofi2_printf:
 12394                           	opt stack 0
 12395                           tosu	equ	0xFFF
 12396                           tosh	equ	0xFFE
 12397                           tosl	equ	0xFFD
 12398                           pclatu	equ	0xFFB
 12399                           pclath	equ	0xFFA
 12400                           tblptru	equ	0xFF8
 12401                           tblptrh	equ	0xFF7
 12402                           tblptrl	equ	0xFF6
 12403                           tablat	equ	0xFF5
 12404                           prodh	equ	0xFF4
 12405                           prodl	equ	0xFF3
 12406                           intcon	equ	0xFF2
 12407                           postinc0	equ	0xFEE
 12408                           fsr0h	equ	0xFEA
 12409                           fsr0l	equ	0xFE9
 12410                           wreg	equ	0xFE8
 12411                           indf1	equ	0xFE7
 12412                           postinc1	equ	0xFE6
 12413                           postdec1	equ	0xFE5
 12414                           fsr1h	equ	0xFE2
 12415                           fsr1l	equ	0xFE1
 12416                           indf2	equ	0xFDF
 12417                           postinc2	equ	0xFDE
 12418                           postdec2	equ	0xFDD
 12419                           plusw2	equ	0xFDB
 12420                           fsr2h	equ	0xFDA
 12421                           fsr2l	equ	0xFD9
 12422                           status	equ	0xFD8
 12423                           
 12424 ;; *************** function i2_putch *****************
 12425 ;; Defined at:
 12426 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  txData          1    wreg     unsigned char 
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;  txData          1    1[COMRAM] unsigned char 
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      void 
 12433 ;; Registers used:
 12434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12444 ;;Total ram usage:        1 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    1
 12447 ;; This function calls:
 12448 ;;		i2_EUSART2_Write
 12449 ;; This function is called by:
 12450 ;;		i2_printf
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text75
 12455  012462                     __ptext75:
 12456                           	opt stack 0
 12457  012462                     i2_putch:
 12458                           	opt stack 20
 12459                           
 12460                           ;incstack = 0
 12461                           ;i2putch@txData stored from wreg
 12462  012462  6E02               	movwf	i2putch@txData,c
 12463                           
 12464                           ;eusart2.c: 180: EUSART2_Write(txData);
 12465  012464  5002               	movf	i2putch@txData,w,c
 12466  012466  EC1E  F08F         	call	i2_EUSART2_Write
 12467  01246A  0012               	return		;funcret
 12468  01246C                     __end_ofi2_putch:
 12469                           	opt stack 0
 12470                           tosu	equ	0xFFF
 12471                           tosh	equ	0xFFE
 12472                           tosl	equ	0xFFD
 12473                           pclatu	equ	0xFFB
 12474                           pclath	equ	0xFFA
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           postinc0	equ	0xFEE
 12483                           fsr0h	equ	0xFEA
 12484                           fsr0l	equ	0xFE9
 12485                           wreg	equ	0xFE8
 12486                           indf1	equ	0xFE7
 12487                           postinc1	equ	0xFE6
 12488                           postdec1	equ	0xFE5
 12489                           fsr1h	equ	0xFE2
 12490                           fsr1l	equ	0xFE1
 12491                           indf2	equ	0xFDF
 12492                           postinc2	equ	0xFDE
 12493                           postdec2	equ	0xFDD
 12494                           plusw2	equ	0xFDB
 12495                           fsr2h	equ	0xFDA
 12496                           fsr2l	equ	0xFD9
 12497                           status	equ	0xFD8
 12498                           
 12499 ;; *************** function i2_EUSART2_Write *****************
 12500 ;; Defined at:
 12501 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;  txData          1    wreg     unsigned char 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;  txData          1    0[COMRAM] unsigned char 
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  1    wreg      void 
 12508 ;; Registers used:
 12509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12510 ;; Tracked objects:
 12511 ;;		On entry : 0/0
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12519 ;;Total ram usage:        1 bytes
 12520 ;; Hardware stack levels used:    1
 12521 ;; This function calls:
 12522 ;;		Nothing
 12523 ;; This function is called by:
 12524 ;;		i2_putch
 12525 ;; This function uses a non-reentrant model
 12526 ;;
 12527                           
 12528                           	psect	text76
 12529  011E3C                     __ptext76:
 12530                           	opt stack 0
 12531  011E3C                     i2_EUSART2_Write:
 12532                           	opt stack 20
 12533                           
 12534                           ;incstack = 0
 12535                           ;i2EUSART2_Write@txData stored from wreg
 12536  011E3C  6E01               	movwf	i2EUSART2_Write@txData,c
 12537  011E3E                     
 12538                           ;eusart2.c: 153: {
 12539                           
 12540                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 12541  011E3E  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 12542  011E40  B4D8               	btfsc	status,2,c
 12543  011E42  D7FD               	goto	i2l3437
 12544                           
 12545                           ;eusart2.c: 154: }
 12546                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 12547  011E44  010E               	movlb	14	; () banked
 12548  011E46  BD2C               	btfsc	44,6,b	;volatile
 12549  011E48  D003               	goto	i2l197
 12550                           
 12551                           ; BSR set to: 14
 12552                           ;eusart2.c: 157: {
 12553                           ;eusart2.c: 158: TX2REG = txData;
 12554  011E4A  C001  FEF2         	movff	i2EUSART2_Write@txData,3826	;volatile
 12555                           
 12556                           ;eusart2.c: 159: }
 12557  011E4E  D012               	goto	i2l198
 12558  011E50                     i2l197:
 12559                           
 12560                           ; BSR set to: 14
 12561                           ;eusart2.c: 160: else
 12562                           ;eusart2.c: 161: {
 12563                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 12564  011E50  9D2C               	bcf	44,6,b	;volatile
 12565                           
 12566                           ; BSR set to: 14
 12567                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 12568  011E52  5041               	movf	_eusart2TxHead,w,c	;volatile
 12569  011E54  0D01               	mullw	1
 12570  011E56  0E00               	movlw	low _eusart2TxBuffer
 12571  011E58  24F3               	addwf	prodl,w,c
 12572  011E5A  6ED9               	movwf	fsr2l,c
 12573  011E5C  0E02               	movlw	high _eusart2TxBuffer
 12574  011E5E  20F4               	addwfc	prodh,w,c
 12575  011E60  6EDA               	movwf	fsr2h,c
 12576  011E62  C001  FFDF         	movff	i2EUSART2_Write@txData,indf2
 12577                           
 12578                           ; BSR set to: 14
 12579  011E66  2A41               	incf	_eusart2TxHead,f,c	;volatile
 12580                           
 12581                           ; BSR set to: 14
 12582                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 12583  011E68  0E3F               	movlw	63
 12584  011E6A  6441               	cpfsgt	_eusart2TxHead,c	;volatile
 12585  011E6C  D002               	goto	i2l199
 12586                           
 12587                           ; BSR set to: 14
 12588                           ;eusart2.c: 165: {
 12589                           ;eusart2.c: 166: eusart2TxHead = 0;
 12590  011E6E  0E00               	movlw	0
 12591  011E70  6E41               	movwf	_eusart2TxHead,c	;volatile
 12592  011E72                     i2l199:
 12593                           
 12594                           ; BSR set to: 14
 12595                           ;eusart2.c: 167: }
 12596                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 12597                           
 12598                           ; BSR set to: 14
 12599  011E72  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 12600  011E74                     i2l198:
 12601                           
 12602                           ; BSR set to: 14
 12603                           ;eusart2.c: 169: }
 12604                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 12605                           
 12606                           ; BSR set to: 14
 12607  011E74  8D2C               	bsf	44,6,b	;volatile
 12608                           
 12609                           ; BSR set to: 14
 12610  011E76  0012               	return		;funcret
 12611  011E78                     __end_ofi2_EUSART2_Write:
 12612                           	opt stack 0
 12613                           tosu	equ	0xFFF
 12614                           tosh	equ	0xFFE
 12615                           tosl	equ	0xFFD
 12616                           pclatu	equ	0xFFB
 12617                           pclath	equ	0xFFA
 12618                           tblptru	equ	0xFF8
 12619                           tblptrh	equ	0xFF7
 12620                           tblptrl	equ	0xFF6
 12621                           tablat	equ	0xFF5
 12622                           prodh	equ	0xFF4
 12623                           prodl	equ	0xFF3
 12624                           intcon	equ	0xFF2
 12625                           postinc0	equ	0xFEE
 12626                           fsr0h	equ	0xFEA
 12627                           fsr0l	equ	0xFE9
 12628                           wreg	equ	0xFE8
 12629                           indf1	equ	0xFE7
 12630                           postinc1	equ	0xFE6
 12631                           postdec1	equ	0xFE5
 12632                           fsr1h	equ	0xFE2
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           plusw2	equ	0xFDB
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function i2___lwmod *****************
 12643 ;; Defined at:
 12644 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  dividend        2    7[COMRAM] unsigned int 
 12647 ;;  divisor         2    9[COMRAM] unsigned int 
 12648 ;; Auto vars:     Size  Location     Type
 12649 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  2    7[COMRAM] unsigned int 
 12652 ;; Registers used:
 12653 ;;		wreg, status,2, status,0
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12662 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12663 ;;Total ram usage:        5 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; This function calls:
 12666 ;;		Nothing
 12667 ;; This function is called by:
 12668 ;;		i2_printf
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text77
 12673  011D04                     __ptext77:
 12674                           	opt stack 0
 12675  011D04                     i2___lwmod:
 12676                           	opt stack 21
 12677                           
 12678                           ; BSR set to: 14
 12679                           ;incstack = 0
 12680  011D04  500A               	movf	i2___lwmod@divisor,w,c
 12681  011D06  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12682  011D08  B4D8               	btfsc	status,2,c
 12683  011D0A  D018               	goto	i2l1414
 12684  011D0C  0E01               	movlw	1
 12685  011D0E  6E0C               	movwf	i2___lwmod@counter,c
 12686  011D10  D004               	goto	i2l1409
 12687  011D12  90D8               	bcf	status,0,c
 12688  011D14  360A               	rlcf	i2___lwmod@divisor,f,c
 12689  011D16  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12690  011D18  2A0C               	incf	i2___lwmod@counter,f,c
 12691  011D1A                     i2l1409:
 12692  011D1A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12693  011D1C  D7FA               	goto	i2l1410
 12694  011D1E                     i2u366_40:
 12695  011D1E  500A               	movf	i2___lwmod@divisor,w,c
 12696  011D20  5C08               	subwf	i2___lwmod@dividend,w,c
 12697  011D22  500B               	movf	i2___lwmod@divisor+1,w,c
 12698  011D24  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12699  011D26  A0D8               	btfss	status,0,c
 12700  011D28  D004               	goto	i2l1413
 12701  011D2A  500A               	movf	i2___lwmod@divisor,w,c
 12702  011D2C  5E08               	subwf	i2___lwmod@dividend,f,c
 12703  011D2E  500B               	movf	i2___lwmod@divisor+1,w,c
 12704  011D30  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12705  011D32                     i2l1413:
 12706  011D32  90D8               	bcf	status,0,c
 12707  011D34  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12708  011D36  320A               	rrcf	i2___lwmod@divisor,f,c
 12709  011D38  2E0C               	decfsz	i2___lwmod@counter,f,c
 12710  011D3A  D7F1               	goto	i2u366_40
 12711  011D3C                     i2l1414:
 12712  011D3C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12713  011D40  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12714  011D44  0012               	return		;funcret
 12715  011D46                     __end_ofi2___lwmod:
 12716                           	opt stack 0
 12717                           tosu	equ	0xFFF
 12718                           tosh	equ	0xFFE
 12719                           tosl	equ	0xFFD
 12720                           pclatu	equ	0xFFB
 12721                           pclath	equ	0xFFA
 12722                           tblptru	equ	0xFF8
 12723                           tblptrh	equ	0xFF7
 12724                           tblptrl	equ	0xFF6
 12725                           tablat	equ	0xFF5
 12726                           prodh	equ	0xFF4
 12727                           prodl	equ	0xFF3
 12728                           intcon	equ	0xFF2
 12729                           postinc0	equ	0xFEE
 12730                           fsr0h	equ	0xFEA
 12731                           fsr0l	equ	0xFE9
 12732                           wreg	equ	0xFE8
 12733                           indf1	equ	0xFE7
 12734                           postinc1	equ	0xFE6
 12735                           postdec1	equ	0xFE5
 12736                           fsr1h	equ	0xFE2
 12737                           fsr1l	equ	0xFE1
 12738                           indf2	equ	0xFDF
 12739                           postinc2	equ	0xFDE
 12740                           postdec2	equ	0xFDD
 12741                           plusw2	equ	0xFDB
 12742                           fsr2h	equ	0xFDA
 12743                           fsr2l	equ	0xFD9
 12744                           status	equ	0xFD8
 12745                           
 12746 ;; *************** function i2___lwdiv *****************
 12747 ;; Defined at:
 12748 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  dividend        2    0[COMRAM] unsigned int 
 12751 ;;  divisor         2    2[COMRAM] unsigned int 
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12754 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12755 ;; Return value:  Size  Location     Type
 12756 ;;                  2    0[COMRAM] unsigned int 
 12757 ;; Registers used:
 12758 ;;		wreg, status,2, status,0
 12759 ;; Tracked objects:
 12760 ;;		On entry : 0/0
 12761 ;;		On exit  : 0/0
 12762 ;;		Unchanged: 0/0
 12763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12764 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12767 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12768 ;;Total ram usage:        7 bytes
 12769 ;; Hardware stack levels used:    1
 12770 ;; This function calls:
 12771 ;;		Nothing
 12772 ;; This function is called by:
 12773 ;;		i2_printf
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           	psect	text78
 12778  011B3C                     __ptext78:
 12779                           	opt stack 0
 12780  011B3C                     i2___lwdiv:
 12781                           	opt stack 21
 12782                           
 12783                           ;incstack = 0
 12784  011B3C  0E00               	movlw	0
 12785  011B3E  6E06               	movwf	i2___lwdiv@quotient+1,c
 12786  011B40  0E00               	movlw	0
 12787  011B42  6E05               	movwf	i2___lwdiv@quotient,c
 12788  011B44  5003               	movf	i2___lwdiv@divisor,w,c
 12789  011B46  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12790  011B48  B4D8               	btfsc	status,2,c
 12791  011B4A  D01C               	goto	i2l1404
 12792  011B4C  0E01               	movlw	1
 12793  011B4E  6E07               	movwf	i2___lwdiv@counter,c
 12794  011B50  D004               	goto	i2l1399
 12795  011B52  90D8               	bcf	status,0,c
 12796  011B54  3603               	rlcf	i2___lwdiv@divisor,f,c
 12797  011B56  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12798  011B58  2A07               	incf	i2___lwdiv@counter,f,c
 12799  011B5A                     i2l1399:
 12800  011B5A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12801  011B5C  D7FA               	goto	i2l1400
 12802  011B5E                     i2u363_40:
 12803  011B5E  90D8               	bcf	status,0,c
 12804  011B60  3605               	rlcf	i2___lwdiv@quotient,f,c
 12805  011B62  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12806  011B64  5003               	movf	i2___lwdiv@divisor,w,c
 12807  011B66  5C01               	subwf	i2___lwdiv@dividend,w,c
 12808  011B68  5004               	movf	i2___lwdiv@divisor+1,w,c
 12809  011B6A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12810  011B6C  A0D8               	btfss	status,0,c
 12811  011B6E  D005               	goto	i2l1403
 12812  011B70  5003               	movf	i2___lwdiv@divisor,w,c
 12813  011B72  5E01               	subwf	i2___lwdiv@dividend,f,c
 12814  011B74  5004               	movf	i2___lwdiv@divisor+1,w,c
 12815  011B76  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12816  011B78  8005               	bsf	i2___lwdiv@quotient,0,c
 12817  011B7A                     i2l1403:
 12818  011B7A  90D8               	bcf	status,0,c
 12819  011B7C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12820  011B7E  3203               	rrcf	i2___lwdiv@divisor,f,c
 12821  011B80  2E07               	decfsz	i2___lwdiv@counter,f,c
 12822  011B82  D7ED               	goto	i2u363_40
 12823  011B84                     i2l1404:
 12824  011B84  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12825  011B88  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12826  011B8C  0012               	return		;funcret
 12827  011B8E                     __end_ofi2___lwdiv:
 12828                           	opt stack 0
 12829                           tosu	equ	0xFFF
 12830                           tosh	equ	0xFFE
 12831                           tosl	equ	0xFFD
 12832                           pclatu	equ	0xFFB
 12833                           pclath	equ	0xFFA
 12834                           tblptru	equ	0xFF8
 12835                           tblptrh	equ	0xFF7
 12836                           tblptrl	equ	0xFF6
 12837                           tablat	equ	0xFF5
 12838                           prodh	equ	0xFF4
 12839                           prodl	equ	0xFF3
 12840                           intcon	equ	0xFF2
 12841                           postinc0	equ	0xFEE
 12842                           fsr0h	equ	0xFEA
 12843                           fsr0l	equ	0xFE9
 12844                           wreg	equ	0xFE8
 12845                           indf1	equ	0xFE7
 12846                           postinc1	equ	0xFE6
 12847                           postdec1	equ	0xFE5
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 12859 ;; Defined at:
 12860 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;		None
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;		None
 12865 ;; Return value:  Size  Location     Type
 12866 ;;                  1    wreg      void 
 12867 ;; Registers used:
 12868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12869 ;; Tracked objects:
 12870 ;;		On entry : 0/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12878 ;;Total ram usage:        0 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    3
 12881 ;; This function calls:
 12882 ;;		_MTOUCH_Sensor_Service
 12883 ;; This function is called by:
 12884 ;;		_INTERRUPT_InterruptManagerHigh
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           	psect	text79
 12889  01246C                     __ptext79:
 12890                           	opt stack 0
 12891  01246C                     _ADCC_ThresholdISR_mTouch:
 12892                           	opt stack 20
 12893                           
 12894                           ;mtouch_sensor.c: 478: PIR1bits.ADTIF = 0;
 12895                           
 12896                           ;incstack = 0
 12897  01246C  010E               	movlb	14	; () banked
 12898  01246E  9334               	bcf	52,1,b	;volatile
 12899                           
 12900                           ; BSR set to: 14
 12901                           ;mtouch_sensor.c: 479: MTOUCH_Sensor_Service();
 12902  012470  EC50  F08C         	call	_MTOUCH_Sensor_Service	;wreg free
 12903  012474  0012               	return		;funcret
 12904  012476                     __end_of_ADCC_ThresholdISR_mTouch:
 12905                           	opt stack 0
 12906                           tosu	equ	0xFFF
 12907                           tosh	equ	0xFFE
 12908                           tosl	equ	0xFFD
 12909                           pclatu	equ	0xFFB
 12910                           pclath	equ	0xFFA
 12911                           tblptru	equ	0xFF8
 12912                           tblptrh	equ	0xFF7
 12913                           tblptrl	equ	0xFF6
 12914                           tablat	equ	0xFF5
 12915                           prodh	equ	0xFF4
 12916                           prodl	equ	0xFF3
 12917                           intcon	equ	0xFF2
 12918                           postinc0	equ	0xFEE
 12919                           fsr0h	equ	0xFEA
 12920                           fsr0l	equ	0xFE9
 12921                           wreg	equ	0xFE8
 12922                           indf1	equ	0xFE7
 12923                           postinc1	equ	0xFE6
 12924                           postdec1	equ	0xFE5
 12925                           fsr1h	equ	0xFE2
 12926                           fsr1l	equ	0xFE1
 12927                           indf2	equ	0xFDF
 12928                           postinc2	equ	0xFDE
 12929                           postdec2	equ	0xFDD
 12930                           plusw2	equ	0xFDB
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function _MTOUCH_Sensor_Service *****************
 12936 ;; Defined at:
 12937 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;		None
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  sensor          2   13[COMRAM] PTR struct .
 12942 ;;		 -> mtouch_sensor(45), 
 12943 ;; Return value:  Size  Location     Type
 12944 ;;                  1    wreg      void 
 12945 ;; Registers used:
 12946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12947 ;; Tracked objects:
 12948 ;;		On entry : 0/0
 12949 ;;		On exit  : 0/0
 12950 ;;		Unchanged: 0/0
 12951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12956 ;;Total ram usage:        2 bytes
 12957 ;; Hardware stack levels used:    1
 12958 ;; Hardware stack levels required when called:    2
 12959 ;; This function calls:
 12960 ;;		_Sensor_autoCalibration
 12961 ;;		_Sensor_setSampled
 12962 ;;		i2_Sensor_SetTrisBit
 12963 ;;		i2_Sensor_isCalibrated
 12964 ;;		i2_Sensor_scheduleNextScan
 12965 ;; This function is called by:
 12966 ;;		_ADCC_ThresholdISR_mTouch
 12967 ;; This function uses a non-reentrant model
 12968 ;;
 12969                           
 12970                           	psect	text80
 12971  0118A0                     __ptext80:
 12972                           	opt stack 0
 12973  0118A0                     _MTOUCH_Sensor_Service:
 12974                           	opt stack 20
 12975                           
 12976                           ;mtouch_sensor.c: 490: mtouch_sensor_t* sensor;
 12977                           ;mtouch_sensor.c: 492: Sensor_SetTrisBit(currentScanSensor,0);
 12978                           
 12979                           ;incstack = 0
 12980  0118A0  0E00               	movlw	0
 12981  0118A2  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 12982  0118A4  503B               	movf	_currentScanSensor,w,c
 12983  0118A6  ECBB  F08C         	call	i2_Sensor_SetTrisBit
 12984                           
 12985                           ;mtouch_sensor.c: 494: if(scanInterrupted)
 12986  0118AA  5039               	movf	_scanInterrupted,w,c	;volatile
 12987  0118AC  B4D8               	btfsc	status,2,c
 12988  0118AE  D002               	goto	i2l621
 12989                           
 12990                           ;mtouch_sensor.c: 495: {
 12991                           ;mtouch_sensor.c: 496: ADCON0bits.ADON = 0;
 12992  0118B0  9E60               	bcf	3936,7,c	;volatile
 12993                           
 12994                           ;mtouch_sensor.c: 497: }
 12995  0118B2  D02B               	goto	i2l622
 12996  0118B4                     i2l621:
 12997                           
 12998                           ;mtouch_sensor.c: 498: else
 12999                           ;mtouch_sensor.c: 499: {
 13000                           ;mtouch_sensor.c: 500: ADCON0bits.ADON = 0;
 13001  0118B4  9E60               	bcf	3936,7,c	;volatile
 13002                           
 13003                           ;mtouch_sensor.c: 501: sensor = &mtouch_sensor[currentScanSensor];
 13004  0118B6  503B               	movf	_currentScanSensor,w,c
 13005  0118B8  0D09               	mullw	9
 13006  0118BA  0E83               	movlw	low _mtouch_sensor
 13007  0118BC  24F3               	addwf	prodl,w,c
 13008  0118BE  6E0E               	movwf	MTOUCH_Sensor_Service@sensor,c
 13009  0118C0  0E00               	movlw	high _mtouch_sensor
 13010  0118C2  20F4               	addwfc	prodh,w,c
 13011  0118C4  6E0F               	movwf	MTOUCH_Sensor_Service@sensor+1,c
 13012                           
 13013                           ;mtouch_sensor.c: 502: if(!Sensor_isCalibrated(sensor))
 13014  0118C6  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 13015  0118CA  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,i2Sensor_isCalibrated@sensor+1
 13016  0118CE  ECC7  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13017  0118D2  0900               	iorlw	0
 13018  0118D4  A4D8               	btfss	status,2,c
 13019  0118D6  D007               	goto	i2l623
 13020                           
 13021                           ;mtouch_sensor.c: 503: {
 13022                           ;mtouch_sensor.c: 504: Sensor_autoCalibration(sensor);
 13023  0118D8  C00E  F005         	movff	MTOUCH_Sensor_Service@sensor,Sensor_autoCalibration@sensor
 13024  0118DC  C00F  F006         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_autoCalibration@sensor+1
 13025  0118E0  ECE0  F085         	call	_Sensor_autoCalibration	;wreg free
 13026                           
 13027                           ;mtouch_sensor.c: 505: }
 13028  0118E4  D006               	goto	i2l624
 13029  0118E6                     i2l623:
 13030                           
 13031                           ;mtouch_sensor.c: 506: else
 13032                           ;mtouch_sensor.c: 507: {
 13033                           ;mtouch_sensor.c: 508: Sensor_setSampled(sensor);
 13034  0118E6  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 13035  0118EA  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_setSampled@sensor+1
 13036  0118EE  EC03  F092         	call	_Sensor_setSampled	;wreg free
 13037  0118F2                     i2l624:
 13038                           
 13039                           ;mtouch_sensor.c: 509: }
 13040                           ;mtouch_sensor.c: 510: packet_sample[currentScanSensor] = ADFLTR;
 13041  0118F2  503B               	movf	_currentScanSensor,w,c
 13042  0118F4  0D02               	mullw	2
 13043  0118F6  0E29               	movlw	low _packet_sample
 13044  0118F8  24F3               	addwf	prodl,w,c
 13045  0118FA  6ED9               	movwf	fsr2l,c
 13046  0118FC  0E00               	movlw	high _packet_sample
 13047  0118FE  20F4               	addwfc	prodh,w,c
 13048  011900  6EDA               	movwf	fsr2h,c
 13049  011902  CF72 FFDE          	movff	3954,postinc2	;volatile
 13050  011906  CF73 FFDD          	movff	3955,postdec2	;volatile
 13051  01190A                     i2l622:
 13052                           
 13053                           ;mtouch_sensor.c: 511: }
 13054                           ;mtouch_sensor.c: 512: Sensor_scheduleNextScan();
 13055  01190A  EC9A  F084         	call	i2_Sensor_scheduleNextScan	;wreg free
 13056  01190E  0012               	return		;funcret
 13057  011910                     __end_of_MTOUCH_Sensor_Service:
 13058                           	opt stack 0
 13059                           tosu	equ	0xFFF
 13060                           tosh	equ	0xFFE
 13061                           tosl	equ	0xFFD
 13062                           pclatu	equ	0xFFB
 13063                           pclath	equ	0xFFA
 13064                           tblptru	equ	0xFF8
 13065                           tblptrh	equ	0xFF7
 13066                           tblptrl	equ	0xFF6
 13067                           tablat	equ	0xFF5
 13068                           prodh	equ	0xFF4
 13069                           prodl	equ	0xFF3
 13070                           intcon	equ	0xFF2
 13071                           postinc0	equ	0xFEE
 13072                           fsr0h	equ	0xFEA
 13073                           fsr0l	equ	0xFE9
 13074                           wreg	equ	0xFE8
 13075                           indf1	equ	0xFE7
 13076                           postinc1	equ	0xFE6
 13077                           postdec1	equ	0xFE5
 13078                           fsr1h	equ	0xFE2
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           plusw2	equ	0xFDB
 13084                           fsr2h	equ	0xFDA
 13085                           fsr2l	equ	0xFD9
 13086                           status	equ	0xFD8
 13087                           
 13088 ;; *************** function i2_Sensor_scheduleNextScan *****************
 13089 ;; Defined at:
 13090 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;		None
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  Sensor_sched    2    6[COMRAM] PTR struct .
 13095 ;;		 -> mtouch_sensor(45), 
 13096 ;;  Sensor_sched    1    5[COMRAM] unsigned char 
 13097 ;;  Sensor_sched    1    4[COMRAM] unsigned char 
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      void 
 13100 ;; Registers used:
 13101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13108 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13109 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13110 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13111 ;;Total ram usage:        6 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    1
 13114 ;; This function calls:
 13115 ;;		i2_MTOUCH_Sensor_isEnabled
 13116 ;;		i2_MTOUCH_Sensor_wasSampled
 13117 ;;		i2_Sensor_SetTrisBit
 13118 ;;		i2_Sensor_isCalibrated
 13119 ;;		i2_Sensor_isCalibratingAcqTime
 13120 ;; This function is called by:
 13121 ;;		_MTOUCH_Sensor_Service
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           	psect	text81
 13126  010934                     __ptext81:
 13127                           	opt stack 0
 13128  010934                     i2_Sensor_scheduleNextScan:
 13129                           	opt stack 20
 13130                           
 13131                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
 13132                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
 13133                           
 13134                           ;incstack = 0
 13135  010934  0E00               	movlw	0
 13136  010936  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13137                           
 13138                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
 13139  010938  0E00               	movlw	0
 13140  01093A  BEF2               	btfsc	intcon,7,c	;volatile
 13141  01093C  0E01               	movlw	1
 13142  01093E  6E05               	movwf	i2Sensor_scheduleNextScan@state,c
 13143                           
 13144                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 13145  010940  D00C               	goto	i2l586
 13146  010942                     
 13147                           ;mtouch_sensor.c: 347: {
 13148                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
 13149  010942  2A3B               	incf	_currentScanSensor,f,c
 13150  010944  0E05               	movlw	5
 13151  010946  183B               	xorwf	_currentScanSensor,w,c
 13152  010948  A4D8               	btfss	status,2,c
 13153  01094A  D007               	goto	i2l586
 13154                           
 13155                           ;mtouch_sensor.c: 349: {
 13156                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
 13157  01094C  0E00               	movlw	0
 13158  01094E  6E3B               	movwf	_currentScanSensor,c
 13159                           
 13160                           ;mtouch_sensor.c: 351: sampling_flag = 0;
 13161  010950  0E00               	movlw	0
 13162  010952  6E3A               	movwf	_sampling_flag,c
 13163                           
 13164                           ;mtouch_sensor.c: 352: skipScan = 1;
 13165  010954  0E01               	movlw	1
 13166  010956  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13167                           
 13168                           ;mtouch_sensor.c: 353: break;
 13169  010958  D00C               	goto	i2u355_40
 13170  01095A                     i2l586:
 13171  01095A  503B               	movf	_currentScanSensor,w,c
 13172  01095C  EC30  F090         	call	i2_MTOUCH_Sensor_wasSampled
 13173  010960  0900               	iorlw	0
 13174  010962  A4D8               	btfss	status,2,c
 13175  010964  D7EE               	goto	i2l585
 13176  010966  503B               	movf	_currentScanSensor,w,c
 13177  010968  EC49  F090         	call	i2_MTOUCH_Sensor_isEnabled
 13178  01096C  0900               	iorlw	0
 13179  01096E  B4D8               	btfsc	status,2,c
 13180  010970  D7E8               	goto	i2l585
 13181  010972                     i2u355_40:
 13182                           
 13183                           ;mtouch_sensor.c: 354: }
 13184                           ;mtouch_sensor.c: 355: }
 13185                           ;mtouch_sensor.c: 358: if(skipScan==0)
 13186  010972  5006               	movf	i2Sensor_scheduleNextScan@skipScan,w,c
 13187  010974  A4D8               	btfss	status,2,c
 13188  010976  0012               	return	
 13189                           
 13190                           ;mtouch_sensor.c: 359: {
 13191                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
 13192  010978  503B               	movf	_currentScanSensor,w,c
 13193  01097A  0D09               	mullw	9
 13194  01097C  0E83               	movlw	low _mtouch_sensor
 13195  01097E  24F3               	addwf	prodl,w,c
 13196  010980  6E07               	movwf	i2Sensor_scheduleNextScan@sensor,c
 13197  010982  0E00               	movlw	high _mtouch_sensor
 13198  010984  20F4               	addwfc	prodh,w,c
 13199  010986  6E08               	movwf	i2Sensor_scheduleNextScan@sensor+1,c
 13200                           
 13201                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
 13202  010988  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 13203  01098C  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibrated@sensor+1
 13204  010990  ECC7  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13205  010994  0900               	iorlw	0
 13206  010996  B4D8               	btfsc	status,2,c
 13207  010998  D012               	goto	i2l589
 13208                           
 13209                           ;mtouch_sensor.c: 362: {
 13210                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
 13211  01099A  EE20 F003          	lfsr	2,3
 13212  01099E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13213  0109A0  26D9               	addwf	fsr2l,f,c
 13214  0109A2  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13215  0109A4  22DA               	addwfc	fsr2h,f,c
 13216  0109A6  50DF               	movf	indf2,w,c
 13217  0109A8  010F               	movlb	15	; () banked
 13218  0109AA  6F5C               	movwf	92,b	;volatile
 13219                           
 13220                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
 13221  0109AC  EE20 F002          	lfsr	2,2
 13222  0109B0  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13223  0109B2  26D9               	addwf	fsr2l,f,c
 13224  0109B4  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13225  0109B6  22DA               	addwfc	fsr2h,f,c
 13226  0109B8  50DF               	movf	indf2,w,c
 13227  0109BA  6F5E               	movwf	94,b	;volatile
 13228                           
 13229                           ;mtouch_sensor.c: 365: }
 13230  0109BC  D01F               	goto	i2l592
 13231  0109BE                     i2l589:
 13232                           
 13233                           ;mtouch_sensor.c: 366: else
 13234                           ;mtouch_sensor.c: 367: {
 13235                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
 13236                           
 13237                           ; BSR set to: 15
 13238  0109BE  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 13239  0109C2  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 13240  0109C6  ECD3  F091         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 13241  0109CA  0900               	iorlw	0
 13242  0109CC  B4D8               	btfsc	status,2,c
 13243  0109CE  D011               	goto	i2l591
 13244                           
 13245                           ;mtouch_sensor.c: 369: {
 13246                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
 13247  0109D0  EE20 F002          	lfsr	2,2
 13248  0109D4  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13249  0109D6  26D9               	addwf	fsr2l,f,c
 13250  0109D8  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13251  0109DA  22DA               	addwfc	fsr2h,f,c
 13252  0109DC  50DF               	movf	indf2,w,c
 13253  0109DE  010F               	movlb	15	; () banked
 13254  0109E0  6F5E               	movwf	94,b	;volatile
 13255                           
 13256                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
 13257  0109E2  EE20 F003          	lfsr	2,3
 13258  0109E6  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13259  0109E8  26D9               	addwf	fsr2l,f,c
 13260  0109EA  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13261  0109EC  22DA               	addwfc	fsr2h,f,c
 13262  0109EE  50DF               	movf	indf2,w,c
 13263  0109F0  D004               	goto	L5
 13264  0109F2                     i2l591:
 13265                           
 13266                           ;mtouch_sensor.c: 373: else
 13267                           ;mtouch_sensor.c: 374: {
 13268                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13269                           
 13270                           ; BSR set to: 15
 13271  0109F2  0E80               	movlw	128
 13272  0109F4  010F               	movlb	15	; () banked
 13273  0109F6  6F5E               	movwf	94,b	;volatile
 13274                           
 13275                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13276  0109F8  0E80               	movlw	128
 13277  0109FA                     L5:
 13278  0109FA  6F5C               	movwf	92,b	;volatile
 13279  0109FC                     i2l592:
 13280                           
 13281                           ; BSR set to: 15
 13282                           ;mtouch_sensor.c: 377: }
 13283                           ;mtouch_sensor.c: 378: }
 13284                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
 13285                           
 13286                           ; BSR set to: 15
 13287                           
 13288                           ; BSR set to: 15
 13289  0109FC  5038               	movf	_sample_delay,w,c
 13290  0109FE  275E               	addwf	94,f,b	;volatile
 13291                           
 13292                           ; BSR set to: 15
 13293                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
 13294  010A00  EE20 F001          	lfsr	2,1
 13295  010A04  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13296  010A06  26D9               	addwf	fsr2l,f,c
 13297  010A08  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13298  010A0A  22DA               	addwfc	fsr2h,f,c
 13299  010A0C  50DF               	movf	indf2,w,c
 13300  010A0E  6F5F               	movwf	95,b	;volatile
 13301                           
 13302                           ; BSR set to: 15
 13303                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
 13304  010A10  EE20 F004          	lfsr	2,4
 13305  010A14  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13306  010A16  26D9               	addwf	fsr2l,f,c
 13307  010A18  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13308  010A1A  22DA               	addwfc	fsr2h,f,c
 13309  010A1C  50DF               	movf	indf2,w,c
 13310  010A1E  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13311  010A20  90D8               	bcf	status,0,c
 13312  010A22  3003               	rrcf	??i2_Sensor_scheduleNextScan,w,c
 13313  010A24  6E66               	movwf	3942,c	;volatile
 13314                           
 13315                           ; BSR set to: 15
 13316                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
 13317  010A26  EE20 F005          	lfsr	2,5
 13318  010A2A  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13319  010A2C  26D9               	addwf	fsr2l,f,c
 13320  010A2E  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13321  010A30  22DA               	addwfc	fsr2h,f,c
 13322  010A32  50DF               	movf	indf2,w,c
 13323  010A34  6F5D               	movwf	93,b	;volatile
 13324                           
 13325                           ; BSR set to: 15
 13326                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
 13327  010A36  8E60               	bsf	3936,7,c	;volatile
 13328                           
 13329                           ; BSR set to: 15
 13330                           ;mtouch_sensor.c: 385: sampling_flag= 1;
 13331  010A38  0E01               	movlw	1
 13332  010A3A  6E3A               	movwf	_sampling_flag,c
 13333                           
 13334                           ; BSR set to: 15
 13335                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
 13336  010A3C  0E01               	movlw	1
 13337  010A3E  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 13338  010A40  503B               	movf	_currentScanSensor,w,c
 13339  010A42  ECBB  F08C         	call	i2_Sensor_SetTrisBit
 13340                           
 13341                           ;mtouch_sensor.c: 387: GIE = 0;
 13342  010A46  9EF2               	bcf	intcon,7,c	;volatile
 13343                           
 13344                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
 13345  010A48  8060               	bsf	3936,0,c	;volatile
 13346                           
 13347                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 13348  010A4A  EE20 F004          	lfsr	2,4
 13349  010A4E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13350  010A50  26D9               	addwf	fsr2l,f,c
 13351  010A52  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13352  010A54  22DA               	addwfc	fsr2h,f,c
 13353  010A56  50DF               	movf	indf2,w,c
 13354  010A58  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13355  010A5A  6A04               	clrf	(??i2_Sensor_scheduleNextScan+1)& (0+255),c
 13356  010A5C  0E09               	movlw	9
 13357  010A5E                     i2u359_45:
 13358  010A5E  90D8               	bcf	status,0,c
 13359  010A60  3603               	rlcf	??i2_Sensor_scheduleNextScan,f,c
 13360  010A62  3604               	rlcf	??i2_Sensor_scheduleNextScan+1,f,c
 13361  010A64  2EE8               	decfsz	wreg,f,c
 13362  010A66  D7FB               	goto	i2u359_45
 13363  010A68  C003  FF70         	movff	??i2_Sensor_scheduleNextScan,3952	;volatile
 13364  010A6C  C004  FF71         	movff	??i2_Sensor_scheduleNextScan+1,3953	;volatile
 13365                           
 13366                           ;mtouch_sensor.c: 390: GIE = state;
 13367  010A70  A005               	btfss	i2Sensor_scheduleNextScan@state,0,c
 13368  010A72  D002               	goto	i2u360_40
 13369  010A74  8EF2               	bsf	intcon,7,c	;volatile
 13370  010A76  D001               	goto	i2u361_45
 13371  010A78                     i2u360_40:
 13372  010A78  9EF2               	bcf	intcon,7,c	;volatile
 13373  010A7A                     i2u361_45:
 13374                           
 13375                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
 13376  010A7A  0E00               	movlw	0
 13377  010A7C  6E39               	movwf	_scanInterrupted,c	;volatile
 13378  010A7E  0012               	return	
 13379  010A80                     __end_ofi2_Sensor_scheduleNextScan:
 13380                           	opt stack 0
 13381                           tosu	equ	0xFFF
 13382                           tosh	equ	0xFFE
 13383                           tosl	equ	0xFFD
 13384                           pclatu	equ	0xFFB
 13385                           pclath	equ	0xFFA
 13386                           tblptru	equ	0xFF8
 13387                           tblptrh	equ	0xFF7
 13388                           tblptrl	equ	0xFF6
 13389                           tablat	equ	0xFF5
 13390                           prodh	equ	0xFF4
 13391                           prodl	equ	0xFF3
 13392                           intcon	equ	0xFF2
 13393                           postinc0	equ	0xFEE
 13394                           fsr0h	equ	0xFEA
 13395                           fsr0l	equ	0xFE9
 13396                           wreg	equ	0xFE8
 13397                           indf1	equ	0xFE7
 13398                           postinc1	equ	0xFE6
 13399                           postdec1	equ	0xFE5
 13400                           fsr1h	equ	0xFE2
 13401                           fsr1l	equ	0xFE1
 13402                           indf2	equ	0xFDF
 13403                           postinc2	equ	0xFDE
 13404                           postdec2	equ	0xFDD
 13405                           plusw2	equ	0xFDB
 13406                           fsr2h	equ	0xFDA
 13407                           fsr2l	equ	0xFD9
 13408                           status	equ	0xFD8
 13409                           
 13410 ;; *************** function i2_Sensor_isCalibrated *****************
 13411 ;; Defined at:
 13412 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;  sensor          2    0[COMRAM] PTR struct .
 13415 ;;		 -> mtouch_sensor(45), 
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;		None
 13418 ;; Return value:  Size  Location     Type
 13419 ;;                  1    wreg      unsigned char 
 13420 ;; Registers used:
 13421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13422 ;; Tracked objects:
 13423 ;;		On entry : 0/0
 13424 ;;		On exit  : 0/0
 13425 ;;		Unchanged: 0/0
 13426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13427 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13431 ;;Total ram usage:        2 bytes
 13432 ;; Hardware stack levels used:    1
 13433 ;; This function calls:
 13434 ;;		Nothing
 13435 ;; This function is called by:
 13436 ;;		_MTOUCH_Sensor_Service
 13437 ;;		i2_Sensor_scheduleNextScan
 13438 ;; This function uses a non-reentrant model
 13439 ;;
 13440                           
 13441                           	psect	text82
 13442  01238E                     __ptext82:
 13443                           	opt stack 0
 13444  01238E                     i2_Sensor_isCalibrated:
 13445                           	opt stack 20
 13446                           
 13447                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
 13448                           
 13449                           ;incstack = 0
 13450  01238E  EE20 F008          	lfsr	2,8
 13451  012392  5001               	movf	i2Sensor_isCalibrated@sensor,w,c
 13452  012394  26D9               	addwf	fsr2l,f,c
 13453  012396  5002               	movf	i2Sensor_isCalibrated@sensor+1,w,c
 13454  012398  22DA               	addwfc	fsr2h,f,c
 13455  01239A  A6DF               	btfss	indf2,3,c
 13456  01239C  D002               	goto	i2u306_40
 13457  01239E  0E01               	movlw	1
 13458  0123A0  0012               	return	
 13459  0123A2                     i2u306_40:
 13460  0123A2  0E00               	movlw	0
 13461  0123A4  0012               	return	
 13462  0123A6                     __end_ofi2_Sensor_isCalibrated:
 13463                           	opt stack 0
 13464                           tosu	equ	0xFFF
 13465                           tosh	equ	0xFFE
 13466                           tosl	equ	0xFFD
 13467                           pclatu	equ	0xFFB
 13468                           pclath	equ	0xFFA
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           postinc0	equ	0xFEE
 13477                           fsr0h	equ	0xFEA
 13478                           fsr0l	equ	0xFE9
 13479                           wreg	equ	0xFE8
 13480                           indf1	equ	0xFE7
 13481                           postinc1	equ	0xFE6
 13482                           postdec1	equ	0xFE5
 13483                           fsr1h	equ	0xFE2
 13484                           fsr1l	equ	0xFE1
 13485                           indf2	equ	0xFDF
 13486                           postinc2	equ	0xFDE
 13487                           postdec2	equ	0xFDD
 13488                           plusw2	equ	0xFDB
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function i2_Sensor_SetTrisBit *****************
 13494 ;; Defined at:
 13495 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  sensor          1    wreg     enum E17513
 13498 ;;  TrisBit         1    0[COMRAM] unsigned char 
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;  sensor          1    1[COMRAM] enum E17513
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  1    wreg      void 
 13503 ;; Registers used:
 13504 ;;		wreg, status,2, status,0
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13510 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13514 ;;Total ram usage:        2 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; This function calls:
 13517 ;;		Nothing
 13518 ;; This function is called by:
 13519 ;;		_MTOUCH_Sensor_Service
 13520 ;;		i2_Sensor_scheduleNextScan
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           	psect	text83
 13525  011976                     __ptext83:
 13526                           	opt stack 0
 13527  011976                     i2_Sensor_SetTrisBit:
 13528                           	opt stack 20
 13529                           
 13530                           ;incstack = 0
 13531                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 13532  011976  6E02               	movwf	i2Sensor_SetTrisBit@sensor,c
 13533                           
 13534                           ;mtouch_sensor.c: 224: switch(sensor)
 13535  011978  D01E               	goto	i2l555
 13536  01197A                     i2l556:
 13537                           
 13538                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
 13539  01197A  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13540  01197C  D002               	bra	i2u299_45
 13541  01197E  9485               	bcf	3973,2,c	;volatile
 13542  011980  D001               	bra	i2u299_46
 13543  011982                     i2u299_45:
 13544  011982  8485               	bsf	3973,2,c	;volatile
 13545  011984                     i2u299_46:
 13546                           
 13547                           ;mtouch_sensor.c: 228: break;
 13548  011984  0012               	return	
 13549  011986                     i2l558:
 13550                           
 13551                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
 13552  011986  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13553  011988  D002               	bra	i2u300_45
 13554  01198A  9685               	bcf	3973,3,c	;volatile
 13555  01198C  D001               	bra	i2u300_46
 13556  01198E                     i2u300_45:
 13557  01198E  8685               	bsf	3973,3,c	;volatile
 13558  011990                     i2u300_46:
 13559                           
 13560                           ;mtouch_sensor.c: 231: break;
 13561  011990  0012               	return	
 13562  011992                     i2l559:
 13563                           
 13564                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
 13565  011992  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13566  011994  D002               	bra	i2u301_45
 13567  011996  9885               	bcf	3973,4,c	;volatile
 13568  011998  D001               	bra	i2u301_46
 13569  01199A                     i2u301_45:
 13570  01199A  8885               	bsf	3973,4,c	;volatile
 13571  01199C                     i2u301_46:
 13572                           
 13573                           ;mtouch_sensor.c: 234: break;
 13574  01199C  0012               	return	
 13575  01199E                     i2l560:
 13576                           
 13577                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
 13578  01199E  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13579  0119A0  D002               	bra	i2u302_45
 13580  0119A2  9A85               	bcf	3973,5,c	;volatile
 13581  0119A4  D001               	bra	i2u302_46
 13582  0119A6                     i2u302_45:
 13583  0119A6  8A85               	bsf	3973,5,c	;volatile
 13584  0119A8                     i2u302_46:
 13585                           
 13586                           ;mtouch_sensor.c: 237: break;
 13587  0119A8  0012               	return	
 13588  0119AA                     i2l561:
 13589                           
 13590                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
 13591  0119AA  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13592  0119AC  D002               	bra	i2u303_45
 13593  0119AE  9C85               	bcf	3973,6,c	;volatile
 13594  0119B0  D001               	bra	i2u303_46
 13595  0119B2                     i2u303_45:
 13596  0119B2  8C85               	bsf	3973,6,c	;volatile
 13597  0119B4                     i2u303_46:
 13598                           
 13599                           ;mtouch_sensor.c: 242: }
 13600                           
 13601                           ;mtouch_sensor.c: 241: default: break;
 13602                           
 13603                           ;mtouch_sensor.c: 240: break;
 13604  0119B4  0012               	return	
 13605  0119B6                     i2l555:
 13606  0119B6  5002               	movf	i2Sensor_SetTrisBit@sensor,w,c
 13607                           
 13608                           ; Switch size 1, requested type "space"
 13609                           ; Number of cases is 5, Range of values is 0 to 4
 13610                           ; switch strategies available:
 13611                           ; Name         Instructions Cycles
 13612                           ; simple_byte           16     9 (average)
 13613                           ;	Chosen strategy is simple_byte
 13614  0119B8  0A00               	xorlw	0	; case 0
 13615  0119BA  B4D8               	btfsc	status,2,c
 13616  0119BC  D7DE               	goto	i2l556
 13617  0119BE  0A01               	xorlw	1	; case 1
 13618  0119C0  B4D8               	btfsc	status,2,c
 13619  0119C2  D7E1               	goto	i2l558
 13620  0119C4  0A03               	xorlw	3	; case 2
 13621  0119C6  B4D8               	btfsc	status,2,c
 13622  0119C8  D7E4               	goto	i2l559
 13623  0119CA  0A01               	xorlw	1	; case 3
 13624  0119CC  B4D8               	btfsc	status,2,c
 13625  0119CE  D7E7               	goto	i2l560
 13626  0119D0  0A07               	xorlw	7	; case 4
 13627  0119D2  A4D8               	btfss	status,2,c
 13628  0119D4  0012               	return	
 13629  0119D6  D7E9               	goto	i2l561
 13630  0119D8                     __end_ofi2_Sensor_SetTrisBit:
 13631                           	opt stack 0
 13632                           tosu	equ	0xFFF
 13633                           tosh	equ	0xFFE
 13634                           tosl	equ	0xFFD
 13635                           pclatu	equ	0xFFB
 13636                           pclath	equ	0xFFA
 13637                           tblptru	equ	0xFF8
 13638                           tblptrh	equ	0xFF7
 13639                           tblptrl	equ	0xFF6
 13640                           tablat	equ	0xFF5
 13641                           prodh	equ	0xFF4
 13642                           prodl	equ	0xFF3
 13643                           intcon	equ	0xFF2
 13644                           postinc0	equ	0xFEE
 13645                           fsr0h	equ	0xFEA
 13646                           fsr0l	equ	0xFE9
 13647                           wreg	equ	0xFE8
 13648                           indf1	equ	0xFE7
 13649                           postinc1	equ	0xFE6
 13650                           postdec1	equ	0xFE5
 13651                           fsr1h	equ	0xFE2
 13652                           fsr1l	equ	0xFE1
 13653                           indf2	equ	0xFDF
 13654                           postinc2	equ	0xFDE
 13655                           postdec2	equ	0xFDD
 13656                           plusw2	equ	0xFDB
 13657                           fsr2h	equ	0xFDA
 13658                           fsr2l	equ	0xFD9
 13659                           status	equ	0xFD8
 13660                           
 13661 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 13662 ;; Defined at:
 13663 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  sensor          1    wreg     enum E17513
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  sensor          1    0[COMRAM] enum E17513
 13668 ;; Return value:  Size  Location     Type
 13669 ;;                  1    wreg      unsigned char 
 13670 ;; Registers used:
 13671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13681 ;;Total ram usage:        1 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		i2_Sensor_scheduleNextScan
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text84
 13691  012060                     __ptext84:
 13692                           	opt stack 0
 13693  012060                     i2_MTOUCH_Sensor_wasSampled:
 13694                           	opt stack 20
 13695                           
 13696                           ;incstack = 0
 13697                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 13698  012060  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor,c
 13699                           
 13700                           ;mtouch_sensor.c: 822: if(sensor < 5)
 13701  012062  0E05               	movlw	5
 13702  012064  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor,c
 13703  012066  D013               	goto	i2l749
 13704                           
 13705                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
 13706  012068  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor,w,c
 13707  01206A  0D09               	mullw	9
 13708  01206C  0E08               	movlw	8
 13709  01206E  26F3               	addwf	prodl,f,c
 13710  012070  0E00               	movlw	0
 13711  012072  22F4               	addwfc	prodh,f,c
 13712  012074  0E83               	movlw	low _mtouch_sensor
 13713  012076  24F3               	addwf	prodl,w,c
 13714  012078  6ED9               	movwf	fsr2l,c
 13715  01207A  0E00               	movlw	high _mtouch_sensor
 13716  01207C  20F4               	addwfc	prodh,w,c
 13717  01207E  6EDA               	movwf	fsr2h,c
 13718  012080  0100               	movlb	0	; () banked
 13719  012082  A2DF               	btfss	indf2,1,c
 13720  012084  D002               	goto	i2u309_40
 13721  012086  0E01               	movlw	1
 13722  012088  0012               	return	
 13723  01208A                     i2u309_40:
 13724  01208A  0E00               	movlw	0
 13725                           
 13726                           ; BSR set to: 0
 13727                           
 13728                           ; BSR set to: 0
 13729  01208C  0012               	return	
 13730  01208E                     i2l749:
 13731                           
 13732                           ;mtouch_sensor.c: 824: else
 13733                           ;mtouch_sensor.c: 825: return 0;
 13734                           
 13735                           ; BSR set to: 0
 13736  01208E  0E00               	movlw	0
 13737  012090  0012               	return	
 13738  012092                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 13739                           	opt stack 0
 13740                           tosu	equ	0xFFF
 13741                           tosh	equ	0xFFE
 13742                           tosl	equ	0xFFD
 13743                           pclatu	equ	0xFFB
 13744                           pclath	equ	0xFFA
 13745                           tblptru	equ	0xFF8
 13746                           tblptrh	equ	0xFF7
 13747                           tblptrl	equ	0xFF6
 13748                           tablat	equ	0xFF5
 13749                           prodh	equ	0xFF4
 13750                           prodl	equ	0xFF3
 13751                           intcon	equ	0xFF2
 13752                           postinc0	equ	0xFEE
 13753                           fsr0h	equ	0xFEA
 13754                           fsr0l	equ	0xFE9
 13755                           wreg	equ	0xFE8
 13756                           indf1	equ	0xFE7
 13757                           postinc1	equ	0xFE6
 13758                           postdec1	equ	0xFE5
 13759                           fsr1h	equ	0xFE2
 13760                           fsr1l	equ	0xFE1
 13761                           indf2	equ	0xFDF
 13762                           postinc2	equ	0xFDE
 13763                           postdec2	equ	0xFDD
 13764                           plusw2	equ	0xFDB
 13765                           fsr2h	equ	0xFDA
 13766                           fsr2l	equ	0xFD9
 13767                           status	equ	0xFD8
 13768                           
 13769 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 13770 ;; Defined at:
 13771 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;  sensor          1    wreg     enum E17513
 13774 ;; Auto vars:     Size  Location     Type
 13775 ;;  sensor          1    0[COMRAM] enum E17513
 13776 ;; Return value:  Size  Location     Type
 13777 ;;                  1    wreg      unsigned char 
 13778 ;; Registers used:
 13779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13780 ;; Tracked objects:
 13781 ;;		On entry : 0/0
 13782 ;;		On exit  : 0/0
 13783 ;;		Unchanged: 0/0
 13784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13789 ;;Total ram usage:        1 bytes
 13790 ;; Hardware stack levels used:    1
 13791 ;; This function calls:
 13792 ;;		Nothing
 13793 ;; This function is called by:
 13794 ;;		i2_Sensor_scheduleNextScan
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text85
 13799  012092                     __ptext85:
 13800                           	opt stack 0
 13801  012092                     i2_MTOUCH_Sensor_isEnabled:
 13802                           	opt stack 20
 13803                           
 13804                           ;incstack = 0
 13805                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 13806  012092  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor,c
 13807                           
 13808                           ;mtouch_sensor.c: 719: if(sensor < 5)
 13809  012094  0E05               	movlw	5
 13810  012096  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor,c
 13811  012098  D013               	goto	i2l703
 13812                           
 13813                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
 13814  01209A  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor,w,c
 13815  01209C  0D09               	mullw	9
 13816  01209E  0E08               	movlw	8
 13817  0120A0  26F3               	addwf	prodl,f,c
 13818  0120A2  0E00               	movlw	0
 13819  0120A4  22F4               	addwfc	prodh,f,c
 13820  0120A6  0E83               	movlw	low _mtouch_sensor
 13821  0120A8  24F3               	addwf	prodl,w,c
 13822  0120AA  6ED9               	movwf	fsr2l,c
 13823  0120AC  0E00               	movlw	high _mtouch_sensor
 13824  0120AE  20F4               	addwfc	prodh,w,c
 13825  0120B0  6EDA               	movwf	fsr2h,c
 13826  0120B2  0100               	movlb	0	; () banked
 13827  0120B4  A0DF               	btfss	indf2,0,c
 13828  0120B6  D002               	goto	i2u305_40
 13829  0120B8  0E01               	movlw	1
 13830  0120BA  0012               	return	
 13831  0120BC                     i2u305_40:
 13832  0120BC  0E00               	movlw	0
 13833                           
 13834                           ; BSR set to: 0
 13835                           
 13836                           ; BSR set to: 0
 13837  0120BE  0012               	return	
 13838  0120C0                     i2l703:
 13839                           
 13840                           ;mtouch_sensor.c: 721: else
 13841                           ;mtouch_sensor.c: 722: return 0;
 13842                           
 13843                           ; BSR set to: 0
 13844  0120C0  0E00               	movlw	0
 13845  0120C2  0012               	return	
 13846  0120C4                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 13847                           	opt stack 0
 13848                           tosu	equ	0xFFF
 13849                           tosh	equ	0xFFE
 13850                           tosl	equ	0xFFD
 13851                           pclatu	equ	0xFFB
 13852                           pclath	equ	0xFFA
 13853                           tblptru	equ	0xFF8
 13854                           tblptrh	equ	0xFF7
 13855                           tblptrl	equ	0xFF6
 13856                           tablat	equ	0xFF5
 13857                           prodh	equ	0xFF4
 13858                           prodl	equ	0xFF3
 13859                           intcon	equ	0xFF2
 13860                           postinc0	equ	0xFEE
 13861                           fsr0h	equ	0xFEA
 13862                           fsr0l	equ	0xFE9
 13863                           wreg	equ	0xFE8
 13864                           indf1	equ	0xFE7
 13865                           postinc1	equ	0xFE6
 13866                           postdec1	equ	0xFE5
 13867                           fsr1h	equ	0xFE2
 13868                           fsr1l	equ	0xFE1
 13869                           indf2	equ	0xFDF
 13870                           postinc2	equ	0xFDE
 13871                           postdec2	equ	0xFDD
 13872                           plusw2	equ	0xFDB
 13873                           fsr2h	equ	0xFDA
 13874                           fsr2l	equ	0xFD9
 13875                           status	equ	0xFD8
 13876                           
 13877 ;; *************** function _Sensor_setSampled *****************
 13878 ;; Defined at:
 13879 ;;		line 833 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;  sensor          2    0[COMRAM] PTR struct .
 13882 ;;		 -> mtouch_sensor(45), 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;		None
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13897 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13898 ;;Total ram usage:        2 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; This function calls:
 13901 ;;		Nothing
 13902 ;; This function is called by:
 13903 ;;		_MTOUCH_Sensor_Service
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           	psect	text86
 13908  012406                     __ptext86:
 13909                           	opt stack 0
 13910  012406                     _Sensor_setSampled:
 13911                           	opt stack 21
 13912                           
 13913                           ;mtouch_sensor.c: 835: sensor->sampled = 1;
 13914                           
 13915                           ;incstack = 0
 13916  012406  EE20 F008          	lfsr	2,8
 13917  01240A  5001               	movf	Sensor_setSampled@sensor,w,c
 13918  01240C  26D9               	addwf	fsr2l,f,c
 13919  01240E  5002               	movf	Sensor_setSampled@sensor+1,w,c
 13920  012410  22DA               	addwfc	fsr2h,f,c
 13921  012412  82DF               	bsf	indf2,1,c
 13922  012414  0012               	return		;funcret
 13923  012416                     __end_of_Sensor_setSampled:
 13924                           	opt stack 0
 13925                           tosu	equ	0xFFF
 13926                           tosh	equ	0xFFE
 13927                           tosl	equ	0xFFD
 13928                           pclatu	equ	0xFFB
 13929                           pclath	equ	0xFFA
 13930                           tblptru	equ	0xFF8
 13931                           tblptrh	equ	0xFF7
 13932                           tblptrl	equ	0xFF6
 13933                           tablat	equ	0xFF5
 13934                           prodh	equ	0xFF4
 13935                           prodl	equ	0xFF3
 13936                           intcon	equ	0xFF2
 13937                           postinc0	equ	0xFEE
 13938                           fsr0h	equ	0xFEA
 13939                           fsr0l	equ	0xFE9
 13940                           wreg	equ	0xFE8
 13941                           indf1	equ	0xFE7
 13942                           postinc1	equ	0xFE6
 13943                           postdec1	equ	0xFE5
 13944                           fsr1h	equ	0xFE2
 13945                           fsr1l	equ	0xFE1
 13946                           indf2	equ	0xFDF
 13947                           postinc2	equ	0xFDE
 13948                           postdec2	equ	0xFDD
 13949                           plusw2	equ	0xFDB
 13950                           fsr2h	equ	0xFDA
 13951                           fsr2l	equ	0xFD9
 13952                           status	equ	0xFD8
 13953                           
 13954 ;; *************** function _Sensor_autoCalibration *****************
 13955 ;; Defined at:
 13956 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  sensor          2    4[COMRAM] PTR struct .
 13959 ;;		 -> mtouch_sensor(45), 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  name            1   12[COMRAM] enum E17513
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      enum E17519
 13964 ;; Registers used:
 13965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13973 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13974 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13975 ;;Total ram usage:        9 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    1
 13978 ;; This function calls:
 13979 ;;		_Sensor_setCalibratAcqTime
 13980 ;;		_Sensor_setCalibrated
 13981 ;;		i2_Sensor_isCalibratingAcqTime
 13982 ;;		i2_abs
 13983 ;; This function is called by:
 13984 ;;		_MTOUCH_Sensor_Service
 13985 ;; This function uses a non-reentrant model
 13986 ;;
 13987                           
 13988                           	psect	text87
 13989  010BC0                     __ptext87:
 13990                           	opt stack 0
 13991  010BC0                     _Sensor_autoCalibration:
 13992                           	opt stack 20
 13993                           
 13994                           ;mtouch_sensor.c: 404: enum mtouch_sensor_names name = sensor->sensor_name;
 13995                           
 13996                           ;incstack = 0
 13997  010BC0  C005  FFD9         	movff	Sensor_autoCalibration@sensor,fsr2l
 13998  010BC4  C006  FFDA         	movff	Sensor_autoCalibration@sensor+1,fsr2h
 13999  010BC8  50DF               	movf	indf2,w,c
 14000  010BCA  6E0D               	movwf	Sensor_autoCalibration@name,c
 14001                           
 14002                           ;mtouch_sensor.c: 406: if(!Sensor_isCalibratingAcqTime(sensor))
 14003  010BCC  C005  F001         	movff	Sensor_autoCalibration@sensor,i2Sensor_isCalibratingAcqTime@sensor
 14004  010BD0  C006  F002         	movff	Sensor_autoCalibration@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 14005  010BD4  ECD3  F091         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 14006  010BD8  0900               	iorlw	0
 14007  010BDA  A4D8               	btfss	status,2,c
 14008  010BDC  D02D               	goto	i2l596
 14009                           
 14010                           ;mtouch_sensor.c: 407: {
 14011                           ;mtouch_sensor.c: 408: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 14012  010BDE  EE20 F004          	lfsr	2,4
 14013  010BE2  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14014  010BE4  26D9               	addwf	fsr2l,f,c
 14015  010BE6  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14016  010BE8  22DA               	addwfc	fsr2h,f,c
 14017  010BEA  50DF               	movf	indf2,w,c
 14018  010BEC  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14019  010BEE  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14020  010BF0  0E09               	movlw	9
 14021  010BF2                     i2u344_45:
 14022  010BF2  90D8               	bcf	status,0,c
 14023  010BF4  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14024  010BF6  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14025  010BF8  2EE8               	decfsz	wreg,f,c
 14026  010BFA  D7FB               	goto	i2u344_45
 14027  010BFC  5072               	movf	3954,w,c	;volatile
 14028  010BFE  5C07               	subwf	??_Sensor_autoCalibration,w,c
 14029  010C00  5073               	movf	3955,w,c	;volatile
 14030  010C02  5808               	subwfb	??_Sensor_autoCalibration+1,w,c
 14031  010C04  B0D8               	btfsc	status,0,c
 14032  010C06  D011               	goto	i2l597
 14033                           
 14034                           ;mtouch_sensor.c: 409: {
 14035                           ;mtouch_sensor.c: 410: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 14036  010C08  EE20 F005          	lfsr	2,5
 14037  010C0C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14038  010C0E  26D9               	addwf	fsr2l,f,c
 14039  010C10  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14040  010C12  22DA               	addwfc	fsr2h,f,c
 14041  010C14  2ADF               	incf	indf2,f,c
 14042  010C16  0E1E               	movlw	30
 14043  010C18  64DF               	cpfsgt	indf2,c
 14044  010C1A  0012               	return	
 14045                           
 14046                           ;mtouch_sensor.c: 411: Sensor_setCalibratAcqTime(sensor);
 14047  010C1C  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14048  010C20  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14049  010C24  EC7A  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14050                           
 14051                           ;mtouch_sensor.c: 412: }
 14052  010C28  0012               	return	
 14053  010C2A                     i2l597:
 14054                           
 14055                           ;mtouch_sensor.c: 413: else
 14056                           ;mtouch_sensor.c: 414: {
 14057                           ;mtouch_sensor.c: 415: Sensor_setCalibratAcqTime(sensor);
 14058  010C2A  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14059  010C2E  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14060  010C32  EC7A  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14061                           
 14062                           ;mtouch_sensor.c: 416: }
 14063                           ;mtouch_sensor.c: 417: }
 14064  010C36  0012               	return	
 14065  010C38                     i2l596:
 14066                           
 14067                           ;mtouch_sensor.c: 418: else
 14068                           ;mtouch_sensor.c: 419: {
 14069                           ;mtouch_sensor.c: 420: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 14070  010C38  EE20 F004          	lfsr	2,4
 14071  010C3C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14072  010C3E  26D9               	addwf	fsr2l,f,c
 14073  010C40  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14074  010C42  22DA               	addwfc	fsr2h,f,c
 14075  010C44  50DF               	movf	indf2,w,c
 14076  010C46  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14077  010C48  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14078  010C4A  90D8               	bcf	status,0,c
 14079  010C4C  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14080  010C4E  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14081  010C50  500D               	movf	Sensor_autoCalibration@name,w,c
 14082  010C52  0D02               	mullw	2
 14083  010C54  0E29               	movlw	low _packet_sample
 14084  010C56  24F3               	addwf	prodl,w,c
 14085  010C58  6ED9               	movwf	fsr2l,c
 14086  010C5A  0E00               	movlw	high _packet_sample
 14087  010C5C  20F4               	addwfc	prodh,w,c
 14088  010C5E  6EDA               	movwf	fsr2h,c
 14089  010C60  CFDE F009          	movff	postinc2,??_Sensor_autoCalibration+2
 14090  010C64  CFDD F00A          	movff	postdec2,??_Sensor_autoCalibration+3
 14091  010C68  CF72 F00B          	movff	3954,??_Sensor_autoCalibration+4	;volatile
 14092  010C6C  CF73 F00C          	movff	3955,??_Sensor_autoCalibration+5	;volatile
 14093  010C70  1E0B               	comf	??_Sensor_autoCalibration+4,f,c
 14094  010C72  1E0C               	comf	??_Sensor_autoCalibration+5,f,c
 14095  010C74  4A0B               	infsnz	??_Sensor_autoCalibration+4,f,c
 14096  010C76  2A0C               	incf	??_Sensor_autoCalibration+5,f,c
 14097  010C78  5009               	movf	??_Sensor_autoCalibration+2,w,c
 14098  010C7A  240B               	addwf	??_Sensor_autoCalibration+4,w,c
 14099  010C7C  6E01               	movwf	i2abs@a,c
 14100  010C7E  500A               	movf	??_Sensor_autoCalibration+3,w,c
 14101  010C80  200C               	addwfc	??_Sensor_autoCalibration+5,w,c
 14102  010C82  6E02               	movwf	i2abs@a+1,c
 14103  010C84  EC0D  F091         	call	i2_abs	;wreg free
 14104  010C88  5007               	movf	??_Sensor_autoCalibration,w,c
 14105  010C8A  5C01               	subwf	?i2_abs,w,c
 14106  010C8C  5008               	movf	??_Sensor_autoCalibration+1,w,c
 14107  010C8E  5802               	subwfb	?i2_abs+1,w,c
 14108  010C90  B0D8               	btfsc	status,0,c
 14109  010C92  D00F               	goto	i2l601
 14110                           
 14111                           ;mtouch_sensor.c: 421: {
 14112                           ;mtouch_sensor.c: 422: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14113  010C94  EE20 F002          	lfsr	2,2
 14114  010C98  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14115  010C9A  26D9               	addwf	fsr2l,f,c
 14116  010C9C  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14117  010C9E  22DA               	addwfc	fsr2h,f,c
 14118  010CA0  0E80               	movlw	128
 14119  010CA2  6EDF               	movwf	indf2,c
 14120                           
 14121                           ;mtouch_sensor.c: 423: Sensor_setCalibrated(sensor);
 14122  010CA4  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14123  010CA8  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14124  010CAC  EC6A  F091         	call	_Sensor_setCalibrated	;wreg free
 14125                           
 14126                           ;mtouch_sensor.c: 424: }
 14127  010CB0  0012               	return	
 14128  010CB2                     i2l601:
 14129                           
 14130                           ;mtouch_sensor.c: 425: else
 14131                           ;mtouch_sensor.c: 426: {
 14132                           ;mtouch_sensor.c: 428: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)3)) - ((mtouch_sensor_time_t)1 << (u
      +                          int8_t)3)))
 14133  010CB2  EE20 F003          	lfsr	2,3
 14134  010CB6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14135  010CB8  26D9               	addwf	fsr2l,f,c
 14136  010CBA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14137  010CBC  22DA               	addwfc	fsr2h,f,c
 14138  010CBE  0E77               	movlw	119
 14139  010CC0  64DF               	cpfsgt	indf2,c
 14140  010CC2  D00F               	goto	i2l603
 14141                           
 14142                           ;mtouch_sensor.c: 429: {
 14143                           ;mtouch_sensor.c: 430: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14144  010CC4  EE20 F002          	lfsr	2,2
 14145  010CC8  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14146  010CCA  26D9               	addwf	fsr2l,f,c
 14147  010CCC  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14148  010CCE  22DA               	addwfc	fsr2h,f,c
 14149  010CD0  0E80               	movlw	128
 14150  010CD2  6EDF               	movwf	indf2,c
 14151                           
 14152                           ;mtouch_sensor.c: 431: Sensor_setCalibrated(sensor);
 14153  010CD4  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14154  010CD8  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14155  010CDC  EC6A  F091         	call	_Sensor_setCalibrated	;wreg free
 14156                           
 14157                           ;mtouch_sensor.c: 432: }
 14158  010CE0  0012               	return	
 14159  010CE2                     i2l603:
 14160                           
 14161                           ;mtouch_sensor.c: 433: else
 14162                           ;mtouch_sensor.c: 434: {
 14163                           ;mtouch_sensor.c: 435: sensor->acquisition_time += ((mtouch_sensor_time_t)1 << (uint8_t)
      +                          3);
 14164  010CE2  EE20 F003          	lfsr	2,3
 14165  010CE6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14166  010CE8  26D9               	addwf	fsr2l,f,c
 14167  010CEA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14168  010CEC  22DA               	addwfc	fsr2h,f,c
 14169  010CEE  0E08               	movlw	8
 14170  010CF0  26DF               	addwf	indf2,f,c
 14171  010CF2  0012               	return	
 14172  010CF4                     __end_of_Sensor_autoCalibration:
 14173                           	opt stack 0
 14174                           tosu	equ	0xFFF
 14175                           tosh	equ	0xFFE
 14176                           tosl	equ	0xFFD
 14177                           pclatu	equ	0xFFB
 14178                           pclath	equ	0xFFA
 14179                           tblptru	equ	0xFF8
 14180                           tblptrh	equ	0xFF7
 14181                           tblptrl	equ	0xFF6
 14182                           tablat	equ	0xFF5
 14183                           prodh	equ	0xFF4
 14184                           prodl	equ	0xFF3
 14185                           intcon	equ	0xFF2
 14186                           postinc0	equ	0xFEE
 14187                           fsr0h	equ	0xFEA
 14188                           fsr0l	equ	0xFE9
 14189                           wreg	equ	0xFE8
 14190                           indf1	equ	0xFE7
 14191                           postinc1	equ	0xFE6
 14192                           postdec1	equ	0xFE5
 14193                           fsr1h	equ	0xFE2
 14194                           fsr1l	equ	0xFE1
 14195                           indf2	equ	0xFDF
 14196                           postinc2	equ	0xFDE
 14197                           postdec2	equ	0xFDD
 14198                           plusw2	equ	0xFDB
 14199                           fsr2h	equ	0xFDA
 14200                           fsr2l	equ	0xFD9
 14201                           status	equ	0xFD8
 14202                           
 14203 ;; *************** function i2_abs *****************
 14204 ;; Defined at:
 14205 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;  a               2    0[COMRAM] int 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;		None
 14210 ;; Return value:  Size  Location     Type
 14211 ;;                  2    0[COMRAM] int 
 14212 ;; Registers used:
 14213 ;;		wreg, status,2, status,0
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14222 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14223 ;;Total ram usage:        4 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_Sensor_autoCalibration
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           	psect	text88
 14233  01221A                     __ptext88:
 14234                           	opt stack 0
 14235  01221A                     i2_abs:
 14236                           	opt stack 20
 14237                           
 14238                           ;incstack = 0
 14239  01221A  AE02               	btfss	i2abs@a+1,7,c
 14240  01221C  D00D               	goto	i2l1041
 14241  01221E  C001  F003         	movff	i2abs@a,??i2_abs
 14242  012222  C002  F004         	movff	i2abs@a+1,??i2_abs+1
 14243  012226  1E03               	comf	??i2_abs,f,c
 14244  012228  1E04               	comf	??i2_abs+1,f,c
 14245  01222A  4A03               	infsnz	??i2_abs,f,c
 14246  01222C  2A04               	incf	??i2_abs+1,f,c
 14247  01222E  C003  F001         	movff	??i2_abs,?i2_abs
 14248  012232  C004  F002         	movff	??i2_abs+1,?i2_abs+1
 14249  012236  0012               	return	
 14250  012238                     i2l1041:
 14251  012238  C001  F001         	movff	i2abs@a,?i2_abs
 14252  01223C  C002  F002         	movff	i2abs@a+1,?i2_abs+1
 14253  012240  0012               	return		;funcret
 14254  012242                     __end_ofi2_abs:
 14255                           	opt stack 0
 14256                           tosu	equ	0xFFF
 14257                           tosh	equ	0xFFE
 14258                           tosl	equ	0xFFD
 14259                           pclatu	equ	0xFFB
 14260                           pclath	equ	0xFFA
 14261                           tblptru	equ	0xFF8
 14262                           tblptrh	equ	0xFF7
 14263                           tblptrl	equ	0xFF6
 14264                           tablat	equ	0xFF5
 14265                           prodh	equ	0xFF4
 14266                           prodl	equ	0xFF3
 14267                           intcon	equ	0xFF2
 14268                           postinc0	equ	0xFEE
 14269                           fsr0h	equ	0xFEA
 14270                           fsr0l	equ	0xFE9
 14271                           wreg	equ	0xFE8
 14272                           indf1	equ	0xFE7
 14273                           postinc1	equ	0xFE6
 14274                           postdec1	equ	0xFE5
 14275                           fsr1h	equ	0xFE2
 14276                           fsr1l	equ	0xFE1
 14277                           indf2	equ	0xFDF
 14278                           postinc2	equ	0xFDE
 14279                           postdec2	equ	0xFDD
 14280                           plusw2	equ	0xFDB
 14281                           fsr2h	equ	0xFDA
 14282                           fsr2l	equ	0xFD9
 14283                           status	equ	0xFD8
 14284                           
 14285 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 14286 ;; Defined at:
 14287 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14288 ;; Parameters:    Size  Location     Type
 14289 ;;  sensor          2    0[COMRAM] PTR struct .
 14290 ;;		 -> mtouch_sensor(45), 
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;		None
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  1    wreg      unsigned char 
 14295 ;; Registers used:
 14296 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14306 ;;Total ram usage:        2 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; This function calls:
 14309 ;;		Nothing
 14310 ;; This function is called by:
 14311 ;;		_Sensor_autoCalibration
 14312 ;;		i2_Sensor_scheduleNextScan
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           	psect	text89
 14317  0123A6                     __ptext89:
 14318                           	opt stack 0
 14319  0123A6                     i2_Sensor_isCalibratingAcqTime:
 14320                           	opt stack 20
 14321                           
 14322                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
 14323                           
 14324                           ;incstack = 0
 14325  0123A6  EE20 F008          	lfsr	2,8
 14326  0123AA  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor,w,c
 14327  0123AC  26D9               	addwf	fsr2l,f,c
 14328  0123AE  5002               	movf	i2Sensor_isCalibratingAcqTime@sensor+1,w,c
 14329  0123B0  22DA               	addwfc	fsr2h,f,c
 14330  0123B2  A8DF               	btfss	indf2,4,c
 14331  0123B4  D002               	goto	i2u307_40
 14332  0123B6  0E01               	movlw	1
 14333  0123B8  0012               	return	
 14334  0123BA                     i2u307_40:
 14335  0123BA  0E00               	movlw	0
 14336  0123BC  0012               	return	
 14337  0123BE                     __end_ofi2_Sensor_isCalibratingAcqTime:
 14338                           	opt stack 0
 14339                           tosu	equ	0xFFF
 14340                           tosh	equ	0xFFE
 14341                           tosl	equ	0xFFD
 14342                           pclatu	equ	0xFFB
 14343                           pclath	equ	0xFFA
 14344                           tblptru	equ	0xFF8
 14345                           tblptrh	equ	0xFF7
 14346                           tblptrl	equ	0xFF6
 14347                           tablat	equ	0xFF5
 14348                           prodh	equ	0xFF4
 14349                           prodl	equ	0xFF3
 14350                           intcon	equ	0xFF2
 14351                           postinc0	equ	0xFEE
 14352                           fsr0h	equ	0xFEA
 14353                           fsr0l	equ	0xFE9
 14354                           wreg	equ	0xFE8
 14355                           indf1	equ	0xFE7
 14356                           postinc1	equ	0xFE6
 14357                           postdec1	equ	0xFE5
 14358                           fsr1h	equ	0xFE2
 14359                           fsr1l	equ	0xFE1
 14360                           indf2	equ	0xFDF
 14361                           postinc2	equ	0xFDE
 14362                           postdec2	equ	0xFDD
 14363                           plusw2	equ	0xFDB
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368 ;; *************** function _Sensor_setCalibrated *****************
 14369 ;; Defined at:
 14370 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;  sensor          2    0[COMRAM] PTR struct .
 14373 ;;		 -> mtouch_sensor(45), 
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;		None
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      void 
 14378 ;; Registers used:
 14379 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14389 ;;Total ram usage:        2 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; This function calls:
 14392 ;;		Nothing
 14393 ;; This function is called by:
 14394 ;;		_Sensor_autoCalibration
 14395 ;; This function uses a non-reentrant model
 14396 ;;
 14397                           
 14398                           	psect	text90
 14399  0122D4                     __ptext90:
 14400                           	opt stack 0
 14401  0122D4                     _Sensor_setCalibrated:
 14402                           	opt stack 20
 14403                           
 14404                           ;mtouch_sensor.c: 787: sensor->calibrated = 1;
 14405                           
 14406                           ;incstack = 0
 14407  0122D4  EE20 F008          	lfsr	2,8
 14408  0122D8  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14409  0122DA  26D9               	addwf	fsr2l,f,c
 14410  0122DC  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14411  0122DE  22DA               	addwfc	fsr2h,f,c
 14412  0122E0  86DF               	bsf	indf2,3,c
 14413                           
 14414                           ;mtouch_sensor.c: 788: sensor->acqTime_cal = 0;
 14415  0122E2  EE20 F008          	lfsr	2,8
 14416  0122E6  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14417  0122E8  26D9               	addwf	fsr2l,f,c
 14418  0122EA  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14419  0122EC  22DA               	addwfc	fsr2h,f,c
 14420  0122EE  98DF               	bcf	indf2,4,c
 14421  0122F0  0012               	return		;funcret
 14422  0122F2                     __end_of_Sensor_setCalibrated:
 14423                           	opt stack 0
 14424                           tosu	equ	0xFFF
 14425                           tosh	equ	0xFFE
 14426                           tosl	equ	0xFFD
 14427                           pclatu	equ	0xFFB
 14428                           pclath	equ	0xFFA
 14429                           tblptru	equ	0xFF8
 14430                           tblptrh	equ	0xFF7
 14431                           tblptrl	equ	0xFF6
 14432                           tablat	equ	0xFF5
 14433                           prodh	equ	0xFF4
 14434                           prodl	equ	0xFF3
 14435                           intcon	equ	0xFF2
 14436                           postinc0	equ	0xFEE
 14437                           fsr0h	equ	0xFEA
 14438                           fsr0l	equ	0xFE9
 14439                           wreg	equ	0xFE8
 14440                           indf1	equ	0xFE7
 14441                           postinc1	equ	0xFE6
 14442                           postdec1	equ	0xFE5
 14443                           fsr1h	equ	0xFE2
 14444                           fsr1l	equ	0xFE1
 14445                           indf2	equ	0xFDF
 14446                           postinc2	equ	0xFDE
 14447                           postdec2	equ	0xFDD
 14448                           plusw2	equ	0xFDB
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _Sensor_setCalibratAcqTime *****************
 14454 ;; Defined at:
 14455 ;;		line 791 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;  sensor          2    0[COMRAM] PTR struct .
 14458 ;;		 -> mtouch_sensor(45), 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;		None
 14461 ;; Return value:  Size  Location     Type
 14462 ;;                  1    wreg      void 
 14463 ;; Registers used:
 14464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14465 ;; Tracked objects:
 14466 ;;		On entry : 0/0
 14467 ;;		On exit  : 0/0
 14468 ;;		Unchanged: 0/0
 14469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14473 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14474 ;;Total ram usage:        2 bytes
 14475 ;; Hardware stack levels used:    1
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		_Sensor_autoCalibration
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text91
 14484  0120F4                     __ptext91:
 14485                           	opt stack 0
 14486  0120F4                     _Sensor_setCalibratAcqTime:
 14487                           	opt stack 20
 14488                           
 14489                           ;mtouch_sensor.c: 793: sensor->acqTime_cal = 1;
 14490                           
 14491                           ;incstack = 0
 14492  0120F4  EE20 F008          	lfsr	2,8
 14493  0120F8  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14494  0120FA  26D9               	addwf	fsr2l,f,c
 14495  0120FC  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14496  0120FE  22DA               	addwfc	fsr2h,f,c
 14497  012100  88DF               	bsf	indf2,4,c
 14498                           
 14499                           ;mtouch_sensor.c: 794: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)3));
 14500  012102  EE20 F003          	lfsr	2,3
 14501  012106  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14502  012108  26D9               	addwf	fsr2l,f,c
 14503  01210A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14504  01210C  22DA               	addwfc	fsr2h,f,c
 14505  01210E  0E08               	movlw	8
 14506  012110  6EDF               	movwf	indf2,c
 14507                           
 14508                           ;mtouch_sensor.c: 795: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14509  012112  EE20 F002          	lfsr	2,2
 14510  012116  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14511  012118  26D9               	addwf	fsr2l,f,c
 14512  01211A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14513  01211C  22DA               	addwfc	fsr2h,f,c
 14514  01211E  0E80               	movlw	128
 14515  012120  6EDF               	movwf	indf2,c
 14516  012122  0012               	return		;funcret
 14517  012124                     __end_of_Sensor_setCalibratAcqTime:
 14518                           	opt stack 0
 14519                           tosu	equ	0xFFF
 14520                           tosh	equ	0xFFE
 14521                           tosl	equ	0xFFD
 14522                           pclatu	equ	0xFFB
 14523                           pclath	equ	0xFFA
 14524                           tblptru	equ	0xFF8
 14525                           tblptrh	equ	0xFF7
 14526                           tblptrl	equ	0xFF6
 14527                           tablat	equ	0xFF5
 14528                           prodh	equ	0xFF4
 14529                           prodl	equ	0xFF3
 14530                           intcon	equ	0xFF2
 14531                           postinc0	equ	0xFEE
 14532                           fsr0h	equ	0xFEA
 14533                           fsr0l	equ	0xFE9
 14534                           wreg	equ	0xFE8
 14535                           indf1	equ	0xFE7
 14536                           postinc1	equ	0xFE6
 14537                           postdec1	equ	0xFE5
 14538                           fsr1h	equ	0xFE2
 14539                           fsr1l	equ	0xFE1
 14540                           indf2	equ	0xFDF
 14541                           postinc2	equ	0xFDE
 14542                           postdec2	equ	0xFDD
 14543                           plusw2	equ	0xFDB
 14544                           fsr2h	equ	0xFDA
 14545                           fsr2l	equ	0xFD9
 14546                           status	equ	0xFD8
 14547                           tosu	equ	0xFFF
 14548                           tosh	equ	0xFFE
 14549                           tosl	equ	0xFFD
 14550                           pclatu	equ	0xFFB
 14551                           pclath	equ	0xFFA
 14552                           tblptru	equ	0xFF8
 14553                           tblptrh	equ	0xFF7
 14554                           tblptrl	equ	0xFF6
 14555                           tablat	equ	0xFF5
 14556                           prodh	equ	0xFF4
 14557                           prodl	equ	0xFF3
 14558                           intcon	equ	0xFF2
 14559                           postinc0	equ	0xFEE
 14560                           fsr0h	equ	0xFEA
 14561                           fsr0l	equ	0xFE9
 14562                           wreg	equ	0xFE8
 14563                           indf1	equ	0xFE7
 14564                           postinc1	equ	0xFE6
 14565                           postdec1	equ	0xFE5
 14566                           fsr1h	equ	0xFE2
 14567                           fsr1l	equ	0xFE1
 14568                           indf2	equ	0xFDF
 14569                           postinc2	equ	0xFDE
 14570                           postdec2	equ	0xFDD
 14571                           plusw2	equ	0xFDB
 14572                           fsr2h	equ	0xFDA
 14573                           fsr2l	equ	0xFD9
 14574                           status	equ	0xFD8
 14575                           
 14576                           	psect	text92
 14577  000000                     __ptext92:
 14578                           	opt stack 0
 14579                           tosu	equ	0xFFF
 14580                           tosh	equ	0xFFE
 14581                           tosl	equ	0xFFD
 14582                           pclatu	equ	0xFFB
 14583                           pclath	equ	0xFFA
 14584                           tblptru	equ	0xFF8
 14585                           tblptrh	equ	0xFF7
 14586                           tblptrl	equ	0xFF6
 14587                           tablat	equ	0xFF5
 14588                           prodh	equ	0xFF4
 14589                           prodl	equ	0xFF3
 14590                           intcon	equ	0xFF2
 14591                           postinc0	equ	0xFEE
 14592                           fsr0h	equ	0xFEA
 14593                           fsr0l	equ	0xFE9
 14594                           wreg	equ	0xFE8
 14595                           indf1	equ	0xFE7
 14596                           postinc1	equ	0xFE6
 14597                           postdec1	equ	0xFE5
 14598                           fsr1h	equ	0xFE2
 14599                           fsr1l	equ	0xFE1
 14600                           indf2	equ	0xFDF
 14601                           postinc2	equ	0xFDE
 14602                           postdec2	equ	0xFDD
 14603                           plusw2	equ	0xFDB
 14604                           fsr2h	equ	0xFDA
 14605                           fsr2l	equ	0xFD9
 14606                           status	equ	0xFD8
 14607                           
 14608                           	psect	rparam
 14609  0000                     tosu	equ	0xFFF
 14610                           tosh	equ	0xFFE
 14611                           tosl	equ	0xFFD
 14612                           pclatu	equ	0xFFB
 14613                           pclath	equ	0xFFA
 14614                           tblptru	equ	0xFF8
 14615                           tblptrh	equ	0xFF7
 14616                           tblptrl	equ	0xFF6
 14617                           tablat	equ	0xFF5
 14618                           prodh	equ	0xFF4
 14619                           prodl	equ	0xFF3
 14620                           intcon	equ	0xFF2
 14621                           postinc0	equ	0xFEE
 14622                           fsr0h	equ	0xFEA
 14623                           fsr0l	equ	0xFE9
 14624                           wreg	equ	0xFE8
 14625                           indf1	equ	0xFE7
 14626                           postinc1	equ	0xFE6
 14627                           postdec1	equ	0xFE5
 14628                           fsr1h	equ	0xFE2
 14629                           fsr1l	equ	0xFE1
 14630                           indf2	equ	0xFDF
 14631                           postinc2	equ	0xFDE
 14632                           postdec2	equ	0xFDD
 14633                           plusw2	equ	0xFDB
 14634                           fsr2h	equ	0xFDA
 14635                           fsr2l	equ	0xFD9
 14636                           status	equ	0xFD8
 14637                           
 14638                           	psect	temp
 14639  00004F                     btemp:
 14640                           	opt stack 0
 14641  00004F                     	ds	1
 14642  0000                     int$flags	set	btemp
 14643  0000                     wtemp6	set	btemp+1
 14644                           tosu	equ	0xFFF
 14645                           tosh	equ	0xFFE
 14646                           tosl	equ	0xFFD
 14647                           pclatu	equ	0xFFB
 14648                           pclath	equ	0xFFA
 14649                           tblptru	equ	0xFF8
 14650                           tblptrh	equ	0xFF7
 14651                           tblptrl	equ	0xFF6
 14652                           tablat	equ	0xFF5
 14653                           prodh	equ	0xFF4
 14654                           prodl	equ	0xFF3
 14655                           intcon	equ	0xFF2
 14656                           postinc0	equ	0xFEE
 14657                           fsr0h	equ	0xFEA
 14658                           fsr0l	equ	0xFE9
 14659                           wreg	equ	0xFE8
 14660                           indf1	equ	0xFE7
 14661                           postinc1	equ	0xFE6
 14662                           postdec1	equ	0xFE5
 14663                           fsr1h	equ	0xFE2
 14664                           fsr1l	equ	0xFE1
 14665                           indf2	equ	0xFDF
 14666                           postinc2	equ	0xFDE
 14667                           postdec2	equ	0xFDD
 14668                           plusw2	equ	0xFDB
 14669                           fsr2h	equ	0xFDA
 14670                           fsr2l	equ	0xFD9
 14671                           status	equ	0xFD8


Data Sizes:
    Strings     861
    Constant    135
    Data        21
    BSS         377
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      78
    BANK0           160     37     132
    BANK1           256      0     208
    BANK2           256      0      64
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Button_StateMachine$0	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_33(CODE[5]), STR_29(CODE[4]), STR_28(CODE[6]), STR_25(CODE[6]), 
		 -> STR_22(CODE[6]), STR_14(CODE[15]), STR_10(CODE[9]), STR_6(CODE[8]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 349
		 -> STR_36(CODE[3]), STR_35(CODE[349]), STR_34(CODE[3]), STR_32(CODE[3]), 
		 -> STR_31(CODE[28]), STR_30(CODE[3]), STR_27(CODE[4]), STR_26(CODE[5]), 
		 -> STR_24(CODE[4]), STR_23(CODE[5]), STR_21(CODE[3]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_12(CODE[14]), STR_11(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[18]), STR_7(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[285]), STR_3(CODE[4]), STR_2(CODE[5]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Service@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setInactive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setActive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isEnabled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    callback_sampled	PTR FTN(enum E17513,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    ringBufferLUT@line	PTR unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Transmit_ISR(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _EUSART2_Receive_ISR->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_EUSART2_Write
    i2___lwmod->i2___lwdiv
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->_Sensor_autoCalibration
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibrated
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->i2_abs

Critical Paths under _main in BANK0

    _main->_ringBufferPull
    _ringBufferPull->_ringBufferLUT
    _ringBufferLUT->_printf
    _printResetMessage->_printf
    _printf->___lwmod
    _putch->_EUSART2_Write
    ___lwmod->___lwdiv
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _Sensor_scheduleNextScan->_Sensor_isCalibrated
    _Sensor_scheduleNextScan->_Sensor_isCalibratingAcqTime
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23485
                                             36 BANK0      1     1      0
            _MTOUCH_Button_State_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                  _printResetMessage
                     _ringBufferPull
 ---------------------------------------------------------------------------------
 (1) _ringBufferPull                                       9     9      0    6695
                                             27 BANK0      9     9      0
                       _EUSART2_Read
                      _ringBufferLUT
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     400
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _ringBufferLUT                                        3     1      2    6057
                                             24 BANK0      3     1      2
            _MTOUCH_Button_isPressed
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1573
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_isPressed                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printResetMessage                                    0     0      0    4084
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4084
                                             12 BANK0     12     8      4
            _MTOUCH_Button_isPressed (ARG)
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     531
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2956
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2714
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1306
                                             11 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     459
                                              2 BANK0      1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             11 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    9688
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                              4 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     310
                                              2 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    4561
                                             21 BANK0      1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              6     6      0    1191
                                              2 BANK0      6     6      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     331
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              1     1      0    3116
                                             20 BANK0      1     1      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        9     9      0    2024
                                             11 BANK0      9     9      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              4     2      2     899
                                              7 BANK0      4     2      2
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         7     5      2     651
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            14    14      0     993
                                              4 BANK0     14    14      0
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     328
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    4470
                                             20 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    4371
                                             16 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     626
                                              9 BANK0      7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    1175
                                              9 BANK0      5     3      2
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                              1 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                              9 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                              3 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                              7 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                              3 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             12    10      2     350
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_State_Get                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                      18    18      0    2979
                                             22 COMRAM    18    18      0
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  0     0      0     903
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            19    17      2     903
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0      66
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (11) i2_EUSART2_Write                                     1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _ADCC_ThresholdISR_mTouch                             0     0      0    2076
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (9) _MTOUCH_Sensor_Service                                2     2      0    2076
                                             13 COMRAM     2     2      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (10) i2_Sensor_scheduleNextScan                           6     6      0     688
                                              2 COMRAM     6     6      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibrated                               2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Sensor_setSampled                                   2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _Sensor_autoCalibration                              9     7      2     965
                                              4 COMRAM     9     7      2
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i2_Sensor_isCalibratingAcqTime
                              i2_abs
 ---------------------------------------------------------------------------------
 (11) i2_abs                                               4     2      2      92
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibratingAcqTime                       2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibrated                                2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibratAcqTime                           2     0      2     218
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_State_Get
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           _abs
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback *
           _Sensor_RawSample_Update *
             _medianFilter
           _Sensor_isEnabled *
           _Sensor_setActive *
           _Sensor_setInactive *
           _abs *
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_wasSampled
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _printResetMessage
     _printf
       _MTOUCH_Button_isPressed (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _putch (ARG)
         _EUSART2_Write
   _ringBufferPull
     _EUSART2_Read
     _ringBufferLUT
       _MTOUCH_Button_isPressed
       _printf
         _MTOUCH_Button_isPressed (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         _putch (ARG)
           _EUSART2_Write
       _strcmp
     _strlen

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i2_Sensor_isCalibratingAcqTime
         i2_abs
       _Sensor_setSampled
       i2_Sensor_SetTrisBit
       i2_Sensor_isCalibrated
       i2_Sensor_scheduleNextScan
         i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_isCalibratingAcqTime
   _EUSART2_Receive_ISR *
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_EUSART2_Write
   _EUSART2_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      40      10       25.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     25      84       5       82.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      4E       1       83.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2       8        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 15:07:55 2018

                                    ?_MTOUCH_Sensor_RawSample_Get 00B0  
                                   Sensor_FrequencyHopping@sensor 00C4  
                                                     __CFG_CP$OFF 000000  
                                         ?_Sensor_autoCalibration 0005  
                                      __end_of_Sensor_setInactive 23F4  
                                              i2___lwdiv@dividend 0001  
                                       _Sensor_setCalibratAcqTime 20F4  
                                                             l305 160E  
                                                             l340 0E9C  
                                                             l190 1E2E  
                                                             l334 0E46  
                                                             l360 004E  
                                                             l336 0E82  
                                                             l337 0E66  
                                                             l610 12F2  
                                                             l370 024E  
                                                             l362 009A  
                                                             l339 0ECA  
                                                             l188 1E06  
                                                             l364 016C  
                                                             l197 1D9A  
                                                             l550 17D6  
                                                             l198 1DBE  
                                                             l366 01AA  
                                                             l703 1FC2  
                                                             l199 1DBC  
                                                             l632 1F88  
                                                             l608 131A  
                                                             l560 193A  
                                                             l544 17DE  
                                                             l368 01E6  
                                                             l609 12E6  
                                                             l561 1946  
                                                             l545 17B6  
                                                             l546 1802  
                                                             l555 1952  
                                                             l547 17BE  
                                                             l652 046C  
                                                             l644 031C  
                                                             l708 2264  
                                                             l628 229A  
                                                             l556 1916  
                                                             l548 17C6  
                                                             l645 041E  
                                                             l637 1C62  
                                                             l549 17CE  
                                                             l670 05BC  
                                                             l654 04CA  
                                                             l646 03AE  
                                                             l558 1922  
                                                             l574 1C88  
                                                             l727 202A  
                                                             l671 05C6  
                                                             l559 192E  
                                                             l591 0748  
                                                             l832 236A  
                                                             l680 0628  
                                                             l672 05CA  
                                                             l592 0752  
                                                             l576 1CB2  
                                                             l673 05DA  
                                                             l665 0502  
                                                             l649 0404  
                                                             l585 0688  
                                                             l569 1F16  
                                                             l842 1352  
                                                             l658 227A  
                                                             l586 06A2  
                                                             l843 135E  
                                                             l851 08D2  
                                                             l667 057C  
                                                             l827 1F4E  
                                                             l908 1018  
                                                             l924 22C6  
                                                             l852 08E8  
                                                             l668 0640  
                                                             l909 1040  
                                                             l749 1FF6  
                                                             l677 05FE  
                                                             l589 070E  
                                                             l950 214C  
                                                             l838 1476  
                                                             l686 0676  
                                                             l863 21D8  
                                                             l848 0862  
                                                             l929 1536  
                                                             l937 10D6  
                                                             l857 119C  
                                                             l980 0ACC  
                                                             l973 0A8C  
                                                             l893 1EE6  
                                                             l982 0AF4  
                                                             l974 0A9C  
                                                             l986 0B3C  
                                                             l987 0B96  
                                                             _GIE 007F97  
                                                             l988 0B42  
                                                    __CFG_CPD$OFF 000000  
                                                             _abs 2150  
                                                             fsr2 000FD9  
                                         __size_of_PMD_Initialize 001C  
                                                             prod 000FF3  
                                                             tosl 000FFD  
                                                             wreg 000FE8  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 00B2  
                                __size_of_MTOUCH_Sensor_SampleAll 0046  
                                         __size_of_ringBufferPull 011A  
                               __size_of_MTOUCH_Sensor_Initialize 007A  
                                       ?_MTOUCH_Sensor_Initialize 0001  
                                 __size_of_Sensor_setSamplePeriod 0024  
                                                    __CFG_LVP$OFF 000000  
                                                    __CFG_ZCD$OFF 000000  
                                                            l1041 2170  
                                                            ?_abs 00B0  
                                                            l1400 1AAE  
                                                            l1410 1CD0  
                                                            l1403 1AD6  
                                                            l1404 1AE0  
                                                            l1413 1CF0  
                                                            l1414 1CFA  
                                                            l1423 1C18  
                                                            l1424 1BF0  
                                                            l1409 1CD8  
                                                            l1550 1B90  
                                                            l1549 1B9A  
                                                            l1557 1D56  
                                                            l1558 1D50  
                                                            l5103 2362  
                                                            l1399 1AB6  
                                                            l5137 0E36  
                                                            l5075 1C80  
                                                            l4355 1D88  
                                                            l5147 0E5C  
                                                            l4471 1BF0  
                                                            l4641 1352  
                                                            l4537 04FA  
                                                            l4565 05D2  
                                                            l4821 1F46  
                                                            l4911 2272  
                                                            l4807 1F0E  
                                                            l4753 0AF8  
                                                            l4587 0620  
                                                            l4845 21D0  
                                                            STR_1 FFFB  
                                                            STR_2 FFEE  
                                                            STR_3 FFF7  
                                                            STR_4 FDFF  
                                                            STR_5 FFA6  
                                                            STR_6 FFCF  
                                                            STR_7 FFA6  
                                                            STR_8 FF97  
                                                            STR_9 FFA6  
                                   ?_Button_Reading_Update_Helper 00B3  
                                                            _LATA 000F79  
                                                            _LATB 000F7A  
                                                            _LATC 000F7B  
                                                            _LATD 000F7C  
                                                            _LATE 000F7D  
                                                            _LATF 000F7E  
                                                            _LATG 000F7F  
                                                            _LATH 000F80  
                                                            u5100 1CDC  
                                                            u5018 117E  
                                                            u5210 1BD2  
                                                            u4510 1084  
                                                            u5038 1220  
                                                            u5070 1ABA  
                                                            u5230 1EE2  
                                                            u4520 1102  
                                                            u5400 07DA  
                                                            u5160 0B2A  
                                                            u4610 1FF2  
                                                            u4515 107A  
                                                            u5180 0BA0  
                                                            _PMD0 000E4C  
                                                            u4525 10F8  
                                                            _PMD1 000E4D  
                                                            u4470 2260  
                                                            u5430 2286  
                                                            u4630 1FBE  
                                                            u5350 06BA  
                                                            _PMD2 000E4E  
                                                            u5415 07DC  
                                                            _PMD3 000E4F  
                                                            u4720 0580  
                                                            u4640 2358  
                                                            _PMD4 000E50  
                                                            u4545 191E  
                                                            _PMD5 000E51  
                                                            u4730 058C  
                                                            u4546 1920  
                                                            u4650 233E  
                                                            u4555 192A  
                                                            u4900 1008  
                                                            u4556 192C  
                                                            u4565 1936  
                                                            u4566 1938  
                                                            u5630 1CB8  
                                                            u4495 1A24  
                                                            u4575 1942  
                                                            u5295 20D8  
                                                            u4576 1944  
                                                            u4585 194E  
                                                            u4930 138C  
                                                            u4586 1950  
                                                            u5570 0224  
                                                            u5395 07C0  
                                                            u4940 13B6  
                                                            u4860 2026  
                                                            u5478 14A4  
                                                            u4790 0602  
                                                            u5670 0E5C  
                                                            u4880 0F6C  
                                                            u4960 083E  
                                                            u4688 1302  
                                                            u4945 13AC  
                                                            u4885 0F62  
                                                            u4895 0FCE  
                                                            u4896 0FD4  
                                                            u4897 0FE2  
                                                            u4988 08B4  
                                      Button_State_Pressed@button 00B9  
                                                            _WPUA 000E91  
                                                            _WPUB 000E99  
                                                            _WPUC 000EA1  
                                                            _WPUD 000EA6  
                                                            _WPUE 000EAE  
                                                            _WPUF 000EB3  
                                                            _WPUG 000EBB  
                                                            _WPUH 000EC0  
                                           ??_EUSART2_Receive_ISR 0017  
                                             _sensor_medianBuffer 0060  
                                                   __CFG_FCMEN$ON 000000  
                                                   _EUSART2_Write 1D84  
                                              _MTOUCH_needReburst 2458  
                                                            abs@a 00B0  
                                                            _main 1602  
                            __size_of_MTOUCH_Button_InitializeAll 0038  
                                                            _line 0190  
                                                   ?_EUSART2_Read 0001  
                                                            fsr0h 000FEA  
                                                            fsr1h 000FE2  
                                              i2___lwdiv@quotient 0005  
                                                            fsr2h 000FDA  
                                                            fsr0l 000FE9  
                                                            indf1 000FE7  
                                                            indf2 000FDF  
                                                            fsr1l 000FE1  
                                                            fsr2l 000FD9  
                                                            btemp 004F  
                            __size_of_MTOUCH_Sensor_InitializeAll 0038  
                                                            prodh 000FF4  
                                                            prodl 000FF3  
                                                            start 00E4  
                              __size_ofi2_Sensor_scheduleNextScan 014C  
                                    __end_of_EUSART2_Transmit_ISR 2060  
                                       ??_Sensor_FrequencyHopping 00C4  
                                                 __end_ofi2_putch 246C  
                                                   __CFG_CSWEN$ON 000000  
                                             ?_MTOUCH_needReburst 0001  
                                                    ___param_bank 000000  
                                                   ?_medianFilter 00B0  
                                  __end_of_Sensor_autoCalibration 0CF4  
                                                   __CFG_SCANE$ON 000000  
                                        __size_ofi2_EUSART2_Write 003C  
                                        ?_MTOUCH_Service_Mainloop 0001  
                                __size_of_MTOUCH_Button_isPressed 0038  
                                   __size_of_Button_State_Pressed 00EC  
                                                           ??_abs 00B2  
                                     ?_Button_Baseline_Initialize 00B3  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 007E  
                                   ??_MTOUCH_Sensor_RawSample_Get 00B2  
                                   Sensor_RawSample_Update@sensor 00B7  
                                   Sensor_RawSample_Update@result 00B9  
                                       __size_of_Sensor_isEnabled 0026  
                                  __size_of_OSCILLATOR_Initialize 0018  
                                             ringBufferPull@index 00D2  
                                   __end_of_OSCILLATOR_Initialize 238E  
                             __end_of_Sensor_isCalibratingAcqTime 2342  
                                  ?i2_Sensor_isCalibratingAcqTime 0001  
                                     _Sensor_isCalibratingAcqTime 2328  
                                                           _ADACC 000F70  
                                                           _ADACQ 000F5C  
                                                           _ADCAP 000F5D  
                                                           ?_main 0001  
                                                           _ADCLK 000F57  
                                                           _ADPCH 000F5F  
                                                           _ADREF 000F58  
                                                           _ADPRE 000F5E  
                                                           STR_10 FFC6  
                                                           STR_11 FFA6  
                                                           STR_12 FFB8  
                                                           STR_20 FF84  
                                                           STR_21 FFA6  
                                                           STR_13 FFA6  
                                                           STR_30 FFA6  
                                                           STR_22 FFE3  
                                                           STR_14 FFA9  
                                                           STR_15 FFA6  
                                                           STR_23 FFEE  
                                                           STR_31 FF1C  
                                                           STR_32 FFA6  
                                                           STR_24 FFF7  
                                                           STR_16 FF38  
                                                           STR_33 FFE9  
                                                           STR_25 FFDD  
                                                           STR_17 FF4B  
                                                   __CFG_WDTE$OFF 000000  
                                                           STR_34 FFA6  
                                                           STR_26 FFEE  
                                                           STR_18 FF5E  
                                                           STR_27 FFF7  
                                                           STR_19 FF71  
                                                           STR_35 FCA2  
                                                           STR_36 FFA6  
                                                           STR_28 FFD7  
                                                           STR_29 FFF3  
                                                           _ADRPT 000F66  
                                                  __CFG_DEBUG$OFF 000000  
                                         __size_of_Button_Service 00C4  
                                                 __end_of___lwdiv 1AEA  
                                                 __end_of___lwmod 1D04  
                                                           i2l210 2056  
                                                           i2l114 006E  
                                                           i2l220 15B0  
                                                           i2l116 008E  
                                                           i2l222 15FA  
                                                           i2l118 0098  
                                                           i2l215 156A  
                                                           i2l216 158A  
                                                           i2l217 15AA  
                                                           i2l209 205A  
                                                           i2l601 0CB2  
                                                           i2l603 0CE2  
                                                           i2l621 18B4  
                                                           i2l197 1E50  
                                                           i2l622 190A  
                                                           i2l198 1E74  
                                                           i2l703 20C0  
                                                           i2l623 18E6  
                                                           i2l199 1E72  
                                                           i2l560 199E  
                                                           i2l624 18F2  
                                                           i2l561 19AA  
                                                           i2l555 19B6  
                                                           i2l556 197A  
                                                           i2l558 1986  
                                                           i2l559 1992  
                                                           i2l591 09F2  
                                                           i2l592 09FC  
                                                           i2l585 0942  
                                                           i2l586 095A  
                                                           i2l596 0C38  
                                                           i2l597 0C2A  
                                                           i2l749 208E  
                                                           i2l589 09BE  
                                                           i2l980 0D3C  
                                                           i2l973 0CFE  
                                                           i2l982 0D64  
                                                           i2l974 0D0E  
                                                           i2l986 0DAC  
                                                           i2l987 0E00  
                                                           i2l988 0DB2  
                                                           _OSCEN 000E47  
                                                           _TRISA 000F81  
                                                           _TRISB 000F82  
                                                           _TRISC 000F83  
                                                           _TRISD 000F84  
                                                           _TRISE 000F85  
                                                           _TRISF 000F86  
                                                           _TRISG 000F87  
                                                           _TRISH 000F88  
                                                           i2_abs 221A  
                                 __size_of_Button_DefaultCallback 0002  
                                             i2_Sensor_SetTrisBit 1976  
                                                   __CFG_WRT0$OFF 000000  
                                                   __CFG_WRT1$OFF 000000  
                                                   __CFG_WRT2$OFF 000000  
                                                   __CFG_WRT3$OFF 000000  
                                                   __CFG_WRT4$OFF 000000  
                                                   __CFG_WRT5$OFF 000000  
                                                   __CFG_WRT6$OFF 000000  
                                                   __CFG_WRT7$OFF 000000  
                                            ??_MTOUCH_needReburst 00B0  
                                                  __CFG_EBTR0$OFF 000000  
                                                  __CFG_EBTR1$OFF 000000  
                                                  __CFG_EBTR2$OFF 000000  
                                                  __CFG_EBTR3$OFF 000000  
                                                  __CFG_EBTR4$OFF 000000  
                                                  __CFG_EBTR5$OFF 000000  
                                                  __CFG_EBTR6$OFF 000000  
                                                  __CFG_EBTR7$OFF 000000  
                                                   __CFG_WRTB$OFF 000000  
                                                   __CFG_WRTC$OFF 000000  
                                                   __CFG_WRTD$OFF 000000  
                                 __size_of_Sensor_DefaultCallback 0002  
                                                  __CFG_EBTRB$OFF 000000  
                                                 __end_of_dpowers FC25  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 2486  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
                                   _MTOUCH_Sensor_Scan_Initialize 2480  
                                         Sensor_setSampled@sensor 0001  
                                 __end_of_Sensor_scheduleNextScan 07E2  
                                              __CFG_MCLRE$EXTMCLR 000000  
                                                           _putch 2416  
                                __size_of_Button_State_NotPressed 0152  
                                                  ?_EUSART2_Write 0001  
                                                           pclath 000FFA  
                                                           tablat 000FF5  
                                            _Sensor_Sampled_Reset 23D0  
                                                           plusw2 000FDB  
                                                  ??_EUSART2_Read 00B0  
                                                           status 000FD8  
                                __size_of_MTOUCH_Sensor_isEnabled 0034  
                                                           wtemp6 0050  
                                       __size_of_Sensor_setActive 0012  
                                          ?i2_Sensor_isCalibrated 0001  
                                          Sensor_isEnabled@sensor 00B0  
                                            ?i2_Sensor_SetTrisBit 0001  
                                                __end_ofi2_printf 0E26  
                                              __size_ofi2___lwdiv 0052  
                                              __size_ofi2___lwmod 0042  
                           __end_of_EUSART2_SetTxInterruptHandler 2432  
                          __size_of_EUSART2_SetTxInterruptHandler 000E  
                                   _EUSART2_SetTxInterruptHandler 2424  
                                                  ??_medianFilter 00B2  
                                                 __initialization 1736  
                                          _Sensor_setSamplePeriod 228C  
                                                    __end_of_main 169C  
                                            _Sensor_setCalibrated 22D4  
                                                      i2printf@ap 0010  
                                           __end_of_ringBufferLUT 0298  
                                __end_of_MTOUCH_Button_Initialize 18A0  
                                                          ??_main 00D4  
                                                   __activetblptr 000003  
                                         _MTOUCH_Sensor_Calibrate 21F2  
                                         ??_Button_Reading_Update 00B9  
                                                          ?i2_abs 0001  
                                __end_of_ADCC_ThresholdISR_mTouch 2476  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 00B2  
                                        ?_Button_Deviation_Update 00B0  
                                                    ?_MTOUCH_Tick 0001  
                                    Button_Baseline_Update@button 00B0  
                                      __end_of_EUSART2_Initialize 1A96  
                                                          _ADCON0 000F60  
                                                          _ADCON1 000F59  
                                                          _ADCON2 000F5A  
                                                          _ADCON3 000F5B  
                                        _eusart2TxBufferRemaining 004E  
                                                          _ADFLTR 000F72  
                            __size_of_MTOUCH_Sensor_RawSample_Get 0038  
                                                          _ADLTHH 000F6B  
                                                          _ADLTHL 000F6A  
                                                          _ADUTHH 000F6D  
                                                          _ADUTHL 000F6C  
                                                          _ANSELA 000E92  
                                                          ?_putch 0001  
                                                          _ANSELB 000E9A  
                                                          _ANSELD 000EA7  
                                                          _ANSELE 000EAF  
                                                          _ANSELF 000EB4  
                                                          _ANSELG 000EBC  
                                                          _RC2REG 000EF1  
                                                          _RC2STA 000EF5  
                                                          _ODCONA 000E90  
                                                          _ODCONB 000E98  
                                                          _ODCONC 000EA0  
                                                          _ODCOND 000EA5  
                                                          _ODCONE 000EAD  
                                                          _ODCONF 000EB2  
                                                          _ODCONG 000EBA  
                                                          _ODCONH 000EBF  
                                                          i2l1041 2238  
                                                          i2l1400 1B52  
                                                          i2l1410 1D12  
                                                          i2l1403 1B7A  
                                                          i2l1404 1B84  
                                                          i2l1413 1D32  
                                                          i2l1414 1D3C  
                                                          i2l1409 1D1A  
                                                  __CFG_WDTCCS$SC 000000  
                                                          i2l4051 0D68  
                                                          i2l1399 1B5A  
                                                          i2l3437 1E3E  
                                           ?_Sensor_Sampled_Reset 00B0  
                                                          _RG7PPS 000E89  
                                                   i2putch@txData 0002  
                                                          _OSCFRQ 000E49  
                                                       ??i2_putch 0002  
                                                          _TX2REG 000EF2  
                                                          _TX2STA 000EF6  
                               MTOUCH_Button_InitializeAll@button 00BB  
                                                          i2abs@a 0001  
                                  ??_Button_Reading_Update_Helper 00B5  
                                           ??i2_Sensor_SetTrisBit 0002  
                                         _MTOUCH_Button_State_Get 2124  
                                          _Button_DefaultCallback 2492  
                                 __end_of_MTOUCH_Service_Mainloop 21CA  
                                                  __CFG_PWRTE$OFF 000000  
                                                  __CFG_XINST$OFF 000000  
                                             _Sensor_isCalibrated 2342  
                                     MTOUCH_Sensor_Service@sensor 000E  
                                          _Sensor_DefaultCallback 2490  
                                       __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                                                   _packet_sample 0029  
                                           ?_Sensor_setCalibrated 0001  
                                    Sensor_DefaultCallback@sensor 0001  
                                                  __CFG_STVREN$ON 000000  
                                                       ??___lwdiv 00B4  
                                                       ??___lwmod 00BB  
                                                          _memcpy 1BDE  
                                                          clear_0 177C  
                                                          clear_1 1788  
                                                          clear_2 1794  
                                                          clear_3 17A0  
                                            _eusart2RxStringReady 0082  
                                __end_of_MTOUCH_Button_ServiceAll 2376  
                                  __size_of_MTOUCH_Sensor_Service 0070  
                                                          _printf 0A80  
                                   __end_of_MTOUCH_Sensor_Service 1910  
                                    Sensor_autoCalibration@sensor 0005  
                                                          _strcmp 1B8E  
                                                          _strlen 1D46  
                                  i2Sensor_scheduleNextScan@state 0005  
                                               ??i2_EUSART2_Write 0001  
                                                  _PMD_Initialize 22F2  
                                                    __pdataCOMRAM 0042  
                                         _MTOUCH_Sensor_SampleAll 1C7A  
                                    Button_DefaultCallback@button 0001  
                                               __end_ofi2___lwdiv 1B8E  
                                                    __mediumconst FC1A  
                                               __end_ofi2___lwmod 1D46  
                                                  _ringBufferPull 0E26  
                                            ?_Sensor_isCalibrated 00B0  
                                                          tblptrh 000FF7  
                                                          tblptrl 000FF6  
                                                          tblptru 000FF8  
                                        ?_Sensor_RawSample_Update 00B7  
                                            _EUSART2_Transmit_ISR 202E  
                                         ?_Button_Baseline_Update 00B0  
                             Sensor_postAcquisitionProcess@sensor 00C2  
                                                 ??_EUSART2_Write 00B0  
                              __size_of_Sensor_setCalibratAcqTime 0030  
                                 MTOUCH_Sensor_RawSample_Get@name 00B2  
                                   __size_of_INTERRUPT_Initialize 000C  
                                                 _eusart2RxBuffer 0100  
                                ??_INTERRUPT_InterruptManagerHigh 0017  
                                 ?_INTERRUPT_InterruptManagerHigh 0001  
                                               _SYSTEM_Initialize 230E  
                                                 _eusart2TxBuffer 0200  
                                                      __accesstop 0060  
                                         __end_of__initialization 17A6  
                             __size_of_Button_Baseline_Initialize 0060  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                 ??_Sensor_postAcquisitionProcess 00BB  
                                              ?_SYSTEM_Initialize 0001  
                                             _Button_StateMachine 00D5  
                                                   ___rparam_used 000001  
                                      __end_of_Button_Tick_helper 1B3C  
                                   MTOUCH_Sensor_Calibrate@sensor 00B0  
                                                   __end_ofi2_abs 2242  
                               __size_of_MTOUCH_Sensor_isSampling 0004  
                                              i2___lwmod@dividend 0008  
                                       ?_MTOUCH_Sensor_isSampling 0001  
                                                  __pcstackCOMRAM 0001  
                                         _MTOUCH_Button_isPressed 1EB2  
                                                    __pidataBANK0 2440  
                                             ??_SYSTEM_Initialize 00BC  
                                      __end_of_MTOUCH_Button_Tick 21F2  
                                __end_of_MTOUCH_Sensor_Initialize 182A  
                                  ?_EUSART2_SetTxInterruptHandler 00B0  
                                                   __end_of_putch 2424  
                                       ??_MTOUCH_Sensor_Calibrate 00B0  
                                                _Sensor_isEnabled 2242  
                                __size_of_Sensor_scheduleNextScan 016A  
                                                     i2printf@val 0014  
                                    ??i2_MTOUCH_Sensor_wasSampled 0001  
                                 __end_of_Button_Deviation_Update 1052  
                                          __end_of_PMD_Initialize 230E  
                                        Sensor_setInactive@sensor 00B0  
                                                  _Button_Service 13F4  
                                            __end_of_EUSART2_Read 1E3C  
                                          __end_of_ringBufferPull 0F40  
                                      ?_Button_State_Initializing 00B9  
                                            Button_Service@button 00C2  
                                                         ??i2_abs 0003  
                                           ??_Sensor_isCalibrated 00B2  
                                  __end_of_Button_Baseline_Update 1152  
                                           ?_EUSART2_Transmit_ISR 0001  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 00BF  
                                        _MTOUCH_Button_Initialize 182A  
                                                       ?i2_printf 000D  
                                            __end_of_medianFilter 04EC  
                                         ringBufferPull@index_724 00D0  
                                         _Button_State_NotPressed 07E2  
                                   __size_of_MTOUCH_Sensor_Enable 0028  
                                              _Sensor_setInactive 23E2  
                                       __end_of_SYSTEM_Initialize 2328  
                                MTOUCH_Sensor_isCalibrated@sensor 00B0  
                                          ??_Sensor_Sampled_Reset 00B2  
                                                         ??_putch 00B1  
                                        _ADCC_ThresholdISR_mTouch 246C  
                                                   _eusart2RxHead 003F  
                              __size_ofi2_MTOUCH_Sensor_isEnabled 0032  
                                                   _eusart2TxHead 0041  
                                                      __pbssBANK0 0060  
                                                      __pbssBANK1 0100  
                                                      __pbssBANK2 0200  
                                                   _eusart2RxTail 003E  
                                                   _eusart2TxTail 0040  
                                      ?i2_MTOUCH_Sensor_isEnabled 0001  
                                         _MTOUCH_Sensor_isEnabled 1F92  
                                       ??_MTOUCH_Button_State_Get 00B0  
                                                      __pnvCOMRAM 004B  
                                             ?_Sensor_setInactive 00B0  
                                                _Sensor_setActive 23F4  
                                      __end_of_mtouch_button_init FC75  
                                           EUSART2_Read@readValue 00B0  
                             __size_ofi2_MTOUCH_Sensor_wasSampled 0032  
                                          ??_Sensor_setCalibrated 0003  
                                         Sensor_SetTrisBit@sensor 00B1  
                                i2MTOUCH_Sensor_wasSampled@sensor 0001  
                                  MTOUCH_Sensor_wasSampled@sensor 00B0  
                                          __end_of_Button_Service 14B8  
                                                         ?_memcpy 00B0  
                             __end_of_MTOUCH_Button_InitializeAll 1F5A  
                                     _MTOUCH_Button_InitializeAll 1F22  
                                                         _ADSTPTH 000F69  
                                                         _ADSTPTL 000F68  
                             __end_of_MTOUCH_Sensor_InitializeAll 1F22  
                                     _MTOUCH_Sensor_InitializeAll 1EEA  
                                       ??_MTOUCH_Sensor_SampleAll 00C5  
                                                         ?_printf 00BC  
                                                 ?_PMD_Initialize 0001  
                                 __end_of_Sensor_RawSample_Update 1C7A  
                                            ??_Sensor_setInactive 00B2  
                                                         ?_strcmp 00B0  
                                                         ?_strlen 00B0  
                               __size_of_MTOUCH_Sensor_wasSampled 0034  
                                       ?_MTOUCH_Sensor_wasSampled 0001  
                                                 ?_ringBufferPull 0001  
                                       Sensor_isCalibrated@sensor 00B0  
                               __end_of_Button_State_Initializing 13F4  
                                                         _SP2BRGH 000EF4  
                                                         _SP2BRGL 000EF3  
                                        _MTOUCH_Button_ServiceAll 235C  
                                                         _OSCCON1 000E43  
                                                         _OSCCON3 000E45  
                                     __end_of_EUSART2_Receive_ISR 1602  
                                   MTOUCH_Sensor_SampleAll@sensor 00C5  
                                                      ??i2_printf 000F  
                                                         _OSCTUNE 000E48  
                                __size_of_MTOUCH_Service_Mainloop 0028  
                                    __end_of_Button_State_Pressed 123E  
                                      i2Sensor_SetTrisBit@TrisBit 0001  
                                Button_Baseline_Initialize@button 00B3  
                                 Sensor_setCalibratAcqTime@sensor 0001  
                                            __size_of_MTOUCH_Tick 0006  
                            __size_of_Sensor_isCalibratingAcqTime 001A  
                                 ??i2_Sensor_isCalibratingAcqTime 0003  
                                         ??i2_Sensor_isCalibrated 0003  
                                                         i2_putch 2462  
                               __end_ofi2_MTOUCH_Sensor_isEnabled 20C4  
                                         ?_Sensor_setSamplePeriod 0001  
                                       ??_MTOUCH_Button_isPressed 00B0  
                                                      _freq_index 0081  
                                                         __Hparam 0000  
                                               _Sensor_SetTrisBit 1910  
                                                         __Lparam 0000  
                           __end_of_Sensor_postAcquisitionProcess 1328  
                          __size_of_Sensor_postAcquisitionProcess 00EA  
                                   _Sensor_postAcquisitionProcess 123E  
                                              ?_Sensor_SetTrisBit 00B0  
                                  MTOUCH_Button_Initialize@button 00B2  
                                                         ___lwdiv 1A96  
                                                         ___lwmod 1CC0  
                                                 ?_Button_Service 0001  
                                                         __pcinit 1736  
                                                 __size_of_memcpy 004E  
                                                         __ramtop 0E00  
                                                 _scanInterrupted 0039  
                                                         __ptext0 1602  
                                                         __ptext1 0E26  
                                                         __ptext2 1D46  
                                                         __ptext3 0000  
                                                         __ptext4 1B8E  
                                                         __ptext5 1EB2  
                                                         __ptext6 1E00  
                                                         __ptext7 1E78  
                                                         __ptext8 0A80  
                                                         __ptext9 2416  
                                                 __size_of_printf 0140  
                                     Button_Reading_Update@button 00B7  
                                             ??_Sensor_SetTrisBit 00B1  
                                                 __size_of_strcmp 0050  
                                                 __size_of_strlen 003E  
                                        _MTOUCH_Sensor_Initialize 17B0  
                                                         _dpowers FC1B  
                                           _OSCILLATOR_Initialize 2376  
                                          ??_EUSART2_Transmit_ISR 0001  
                                                    __size_of_abs 002A  
                                       ??_Button_State_NotPressed 00BB  
                                        ??_PIN_MANAGER_Initialize 00B0  
                                  __size_of_Button_Reading_Update 0024  
                                     __size_of_MTOUCH_needReburst 000A  
                                   __end_of_Button_Reading_Update 22D4  
                               MTOUCH_Sensor_InitializeAll@sensor 00BB  
                                                _callback_sampled 0048  
                                       ??_MTOUCH_Sensor_isEnabled 00B0  
                                      __size_of_SYSTEM_Initialize 001A  
                                           i2EUSART2_Write@txData 0001  
                                                _callback_pressed 0045  
                                  MTOUCH_Sensor_Initialize@sensor 00B2  
                                               _printResetMessage 1E78  
                                 i2Sensor_scheduleNextScan@sensor 0007  
                                   Sensor_scheduleNextScan@sensor 00B6  
                                            end_of_initialization 17A6  
                                         ?_Button_DefaultCallback 0001  
                                                         memcpy@d 00B7  
                                                         memcpy@n 00B4  
                                                         memcpy@s 00B9  
                                  __end_of_Sensor_setSamplePeriod 22B0  
                                              ?_printResetMessage 0001  
                                      __end_of_mtouch_sensor_init FCA2  
                                        ?_Sensor_FrequencyHopping 0001  
                                       __end_of_Sensor_SetTrisBit 1976  
                                         ?_Sensor_DefaultCallback 0001  
                                __size_of_Button_Deviation_Update 0112  
                                    ??_MTOUCH_Sensor_isCalibrated 00B0  
                                              _EUSART2_Initialize 1A38  
                                             ??_printResetMessage 00C8  
                             __end_of_MTOUCH_Sensor_RawSample_Get 1F92  
                                     _MTOUCH_Sensor_RawSample_Get 1F5A  
                                                 i2_EUSART2_Write 1E3C  
                                                         printf@c 00C7  
                                                         printf@f 00BC  
                                                         postdec1 000FE5  
                                                         postdec2 000FDD  
                                                         postinc0 000FEE  
                                                         postinc1 000FE6  
                                                         postinc2 000FDE  
                                           __size_of_EUSART2_Read 003C  
                                      ?i2_Sensor_scheduleNextScan 0001  
                                         _Sensor_scheduleNextScan 0678  
                              __end_ofi2_MTOUCH_Sensor_wasSampled 2092  
                                      i2_MTOUCH_Sensor_wasSampled 2060  
                                                         strcmp@r 00B5  
                                           __CFG_WDTCPS$WDTCPS_31 000000  
                                             ?_EUSART2_Initialize 0001  
                                                         strlen@s 00B0  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 00C0  
                                           __size_of_medianFilter 0254  
                                          Sensor_setActive@sensor 00B0  
                                   Button_Deviation_Update@button 00B0  
                                                       _TRISEbits 000F85  
                                 i2MTOUCH_Sensor_isEnabled@sensor 0001  
                                   MTOUCH_Sensor_isEnabled@sensor 00B0  
                                       __end_of_printResetMessage 1EB2  
                                      MTOUCH_Sensor_Enable@sensor 00B0  
                                             _callback_notPressed 0042  
                                                __CFG_FEXTOSC$OFF 000000  
                                               i2___lwdiv@divisor 0003  
                                __end_of_MTOUCH_Sensor_isSampling 2490  
                             __size_of_MTOUCH_Sensor_isCalibrated 0034  
                                  __end_of_Button_DefaultCallback 2494  
                                                       i2___lwdiv 1B3C  
                                                       i2___lwmod 1D04  
                                               i2___lwdiv@counter 0007  
                                     __end_ofi2_Sensor_SetTrisBit 19D8  
                                            ??_EUSART2_Initialize 00B3  
                                        __end_of_Sensor_isEnabled 2268  
                                          __size_of_ringBufferLUT 0298  
                                      Sensor_setCalibrated@sensor 0001  
                                  __end_of_Sensor_DefaultCallback 2492  
                                     MTOUCH_Button_State_Get@name 00B0  
                                        ??_Sensor_autoCalibration 0007  
                                                    _EUSART2_Read 1E00  
                                              medianFilter@sensor 00B6  
                                __size_of_Sensor_RawSample_Update 004E  
                           __end_ofi2_Sensor_isCalibratingAcqTime 23BE  
                          __size_ofi2_Sensor_isCalibratingAcqTime 0018  
                                   i2_Sensor_isCalibratingAcqTime 23A6  
                                        ringBufferPull@charNumber 00CE  
                                                    _medianFilter 0298  
                                    __end_of_INTERRUPT_Initialize 2458  
                                            _Button_State_Pressed 1152  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 1E00  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 003E  
                                   _MTOUCH_Sensor_ADCC_Initialize 1DC2  
                               __end_ofi2_Sensor_scheduleNextScan 0A80  
                                      ??_MTOUCH_Button_Initialize 00B1  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 0678  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 018C  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0001  
                      ??_Sensor_FrequencyHopping_Autotune_Process 00B4  
                        _Sensor_FrequencyHopping_Autotune_Process 04EC  
                                 ??_MTOUCH_Sensor_Scan_Initialize 00B0  
                                  ?_Sensor_postAcquisitionProcess 0001  
                                                   __pidataCOMRAM 2476  
                                              _Button_Tick_helper 1AEA  
                                                  __end_of_memcpy 1C2C  
                                          ?_OSCILLATOR_Initialize 0001  
                                             MTOUCH_Button_Tick@i 00B4  
                                      ??_ADCC_ThresholdISR_mTouch 0010  
                                        __end_of_Sensor_setActive 2406  
                                                  __end_of_printf 0BC0  
                                     ??_Button_State_Initializing 00BB  
                                                  __end_of_strcmp 1BDE  
                                                    i2printf@flag 0012  
                                                  __end_of_strlen 1D84  
                                           _MTOUCH_Sensor_Service 18A0  
                                                    i2printf@prec 0013  
                                             start_initialization 1736  
                                         _MTOUCH_Service_Mainloop 21A2  
                                 __size_of_PIN_MANAGER_Initialize 009A  
                                              _MTOUCH_Button_Tick 21CA  
                                             ?_Button_Tick_helper 00B0  
                                                     __end_of_abs 217A  
                                                       i2printf@c 0016  
                                                       i2printf@f 000D  
                                 __end_of_Sensor_FrequencyHopping 228C  
                   EUSART2_SetRxInterruptHandler@interruptHandler 00B0  
                   EUSART2_SetTxInterruptHandler@interruptHandler 00B0  
                                                     putch@txData 00B1  
                                                      ?i2___lwdiv 0001  
                                                      ?i2___lwmod 0008  
                                               __size_ofi2_printf 0132  
                                           __end_of_EUSART2_Write 1DC2  
                                     ??i2_MTOUCH_Sensor_isEnabled 0001  
                                             ?_MTOUCH_Button_Tick 0001  
                                 Button_State_Initializing@button 00B9  
                                         __end_ofi2_EUSART2_Write 1E78  
                                      __size_of_Sensor_SetTrisBit 0066  
                                         medianFilter@bufferIndex 0033  
                                __end_of_MTOUCH_Sensor_wasSampled 1FFA  
                                                __CFG_LPBOREN$OFF 000000  
                                       ??_Sensor_scheduleNextScan 00B2  
                                            ??_Button_Tick_helper 00B2  
                                    __end_of_MTOUCH_Sensor_Enable 21A2  
                                                ??_PMD_Initialize 00B0  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 00BD  
                                           ?_Button_State_Pressed 00B9  
                                                ??_ringBufferPull 00CB  
                                      ??_MTOUCH_Button_ServiceAll 00C4  
                                                     __pdataBANK0 00D5  
                                                        ??_memcpy 00B6  
                                                   _ringBufferLUT 0000  
                                     __end_of_Sensor_isCalibrated 235C  
                                    ??_Button_Baseline_Initialize 00B5  
                                            ??_MTOUCH_Button_Tick 00B4  
                                              _mtouch_button_init FC25  
                                      Sensor_Sampled_Reset@sensor 00B0  
                                                        ??_printf 00C0  
                                                        ??_strcmp 00B4  
                                                        ??_strlen 00B2  
                                    ?_Sensor_isCalibratingAcqTime 00B0  
                                                  _eusart2RxCount 003D  
                                                     __pbssCOMRAM 0029  
                                                   _sampling_flag 003A  
                                                   __pcstackBANK0 00B0  
                                      __size_of_printResetMessage 003A  
                                               i2___lwmod@divisor 000A  
                                               i2___lwmod@counter 000C  
                                        Sensor_SetTrisBit@TrisBit 00B0  
                                  MTOUCH_Button_ServiceAll@button 00C4  
                                             EUSART2_Write@txData 00B0  
                                 ??_EUSART2_SetRxInterruptHandler 00B3  
                                   __size_of_Sensor_Sampled_Reset 0012  
                                                        ?i2_putch 0001  
                                         _Button_Deviation_Update 0F40  
                                      ?_Sensor_setCalibratAcqTime 0001  
                                  __size_ofi2_Sensor_isCalibrated 0018  
                                   __end_ofi2_Sensor_isCalibrated 23A6  
                                       _Button_State_Initializing 1328  
                                        _MTOUCH_Sensor_isSampling 248C  
                              __end_of_MTOUCH_Sensor_isCalibrated 202E  
                                      _MTOUCH_Sensor_isCalibrated 1FFA  
                                                       __pnvBANK0 00E1  
                                 __size_of_Sensor_autoCalibration 0134  
                                               _Sensor_setSampled 2406  
                                                ___lwdiv@dividend 00B0  
                                          _PIN_MANAGER_Initialize 169C  
                                                ??_Button_Service 00C0  
                                        ?_MTOUCH_Sensor_Calibrate 0001  
                                              ?_Sensor_setSampled 0001  
                                                       __pintcode 0008  
                              Button_Reading_Update_Helper@button 00B3  
                                                   __pmediumconst FC1A  
                                      ??_MTOUCH_Sensor_Initialize 00B2  
                                   __size_of_Sensor_setCalibrated 001E  
                                                        ?___lwdiv 00B0  
                                                        ?___lwmod 00B7  
                                                  ?_ringBufferLUT 00C8  
                               _EUSART2_TxDefaultInterruptHandler 004B  
                                                __CFG_PPS1WAY$OFF 000000  
                                       i2_MTOUCH_Sensor_isEnabled 2092  
                                             ??_Sensor_setSampled 0003  
                                       ??_MTOUCH_Service_Mainloop 00C6  
                                          ?_MTOUCH_Sensor_Service 0001  
                                     __size_of_Sensor_setInactive 0012  
                                                        _BAUD2CON 000EF7  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0001  
                                                  __size_ofi2_abs 0028  
                                   ??_Sensor_isCalibratingAcqTime 00B2  
                                                   ??_MTOUCH_Tick 00B5  
                                       i2Sensor_SetTrisBit@sensor 0002  
                                        ?_MTOUCH_Button_State_Get 0001  
                                                ___lwdiv@quotient 00B5  
                                                     ??i2___lwdiv 0005  
                                                     ??i2___lwmod 000C  
                                                  __size_of_putch 000E  
                                            _INTERRUPT_Initialize 244C  
                                    __size_of_EUSART2_Receive_ISR 00A2  
                                       __end_of_Sensor_setSampled 2416  
                                                ?i2_EUSART2_Write 0001  
                                                        _LATFbits 000F7E  
                                         _Sensor_RawSample_Update 1C2C  
                               __end_of_Sensor_setCalibratAcqTime 2124  
                                                        _IPR1bits 000E20  
                                                        _IPR3bits 000E22  
                                                        _PIE1bits 000E2A  
                                                        _PIE3bits 000E2C  
                                                        i2u300_45 198E  
                                                        i2u300_46 1990  
                                                        i2u301_45 199A  
                                                        i2u301_46 199C  
                                                        i2u302_45 19A6  
                                                        i2u302_46 19A8  
                                                        i2u303_45 19B2  
                                                        i2u303_46 19B4  
                                                        i2u305_40 20BC  
                                                        i2u401_40 159C  
                                                        i2u306_40 23A2  
                                                        i2u307_40 23BA  
                                                        i2u309_40 208A  
                                                        i2u414_48 005E  
                                                        i2u360_40 0A78  
                                                        i2u344_45 0BF2  
                                                        _PIR1bits 000E34  
                                                        i2u361_45 0A7A  
                                                        i2u417_48 0078  
                                                        i2u355_40 0972  
                                                        i2u363_40 1B5E  
                                                        _PIR3bits 000E36  
                                                        i2u366_40 1D1E  
                                                        i2u359_45 0A5E  
                                                        i2u392_40 0D9A  
                                                        i2u394_40 0E08  
                                                        i2u299_45 1982  
                                                        i2u299_46 1984  
                                          ??_Button_State_Pressed 00BB  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 20F4  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0030  
                                  _MTOUCH_Sensor_Sampled_ResetAll 20C4  
                                        ?_MTOUCH_Sensor_SampleAll 0001  
                                              _mtouch_sensor_init FC75  
                                     ??i2_Sensor_scheduleNextScan 0003  
                                     ?i2_MTOUCH_Sensor_wasSampled 0001  
                                        _MTOUCH_Sensor_wasSampled 1FC6  
                                              _mtouch_time_toScan 003C  
                                __size_of_Sensor_FrequencyHopping 0024  
                                        ??_Button_Baseline_Update 00B2  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 00C1  
                                                      _ADCON0bits 000F60  
                                          _Sensor_autoCalibration 0BC0  
                                      __end_of_MTOUCH_needReburst 2462  
                                                      printf@flag 00C3  
                                                      printf@prec 00C4  
                                                        _WPUEbits 000EAE  
                                   __size_of_EUSART2_Transmit_ISR 0032  
                                                        i2_printf 0CF4  
                                            _MTOUCH_Sensor_Enable 217A  
                                                       copy_data0 174A  
                                                       copy_data1 176A  
                                        Button_Tick_helper@button 00B0  
                                       ??_Button_Deviation_Update 00B2  
                                           ?_INTERRUPT_Initialize 0001  
                                           _Button_Reading_Update 22B0  
                                        ?_MTOUCH_Button_isPressed 0001  
                                               ?_Sensor_isEnabled 00B0  
                                             __end_of_MTOUCH_Tick 248C  
                                               _MTOUCH_Initialize 23BE  
                                 __end_of_MTOUCH_Sensor_Calibrate 221A  
                                                __size_ofi2_putch 000A  
                                              ??_Sensor_isEnabled 00B2  
                                              ?_MTOUCH_Initialize 0001  
                                                        __Hrparam 0000  
                           __end_of_EUSART2_SetRxInterruptHandler 2440  
                          __size_of_EUSART2_SetRxInterruptHandler 000E  
                                   _EUSART2_SetRxInterruptHandler 2432  
                                                       memcpy@tmp 00B6  
                                                        __Lrparam 0000  
                                              __CFG_BOREN$SBORDIS 000000  
                                                 ??_ringBufferLUT 00CA  
                                                    _sample_delay 0038  
                               Sensor_postAcquisitionProcess@name 00C1  
                                         ??_OSCILLATOR_Initialize 00B0  
                              __end_of_Button_Baseline_Initialize 1A38  
                                      _Button_Baseline_Initialize 19D8  
                                             ??_MTOUCH_Initialize 00BC  
                                                __size_of___lwdiv 0054  
                                                __size_of___lwmod 0044  
                                        ?_Button_State_NotPressed 00B9  
                                     i2Sensor_isCalibrated@sensor 0001  
                                              Button_Service@name 00C1  
                                                      _ANSELEbits 000EAF  
                                 __end_of_MTOUCH_Button_State_Get 2150  
                                        ?_MTOUCH_Sensor_isEnabled 0001  
                                               ?_Sensor_setActive 00B0  
                                                 ___lwdiv@divisor 00B2  
                                              ??_Sensor_setActive 00B2  
                                                 ___lwdiv@counter 00B4  
                                           ?_MTOUCH_Sensor_Enable 0001  
                                                        __ptext10 1D84  
                                                        __ptext11 1CC0  
                                                        __ptext20 1EEA  
                                                        __ptext12 1A96  
                                                        __ptext21 17B0  
                                                        __ptext13 230E  
                                                        __ptext30 2458  
                                                        __ptext22 217A  
                                                        __ptext14 22F2  
                                                        __ptext31 2486  
                                                        __ptext23 1F22  
                                                        __ptext15 169C  
                                                        __ptext40 1910  
                                                        __ptext32 21CA  
                                                        __ptext24 1BDE  
                                                        __ptext16 2376  
                                                        __ptext41 1F92  
                                                        __ptext33 1AEA  
                                                        __ptext25 244C  
                                                        __ptext17 23BE  
                                                        __ptext50 2490  
                                                        __ptext42 2268  
                                                        __ptext34 20C4  
                                                        __ptext26 1A38  
                                                        __ptext18 2480  
                                                        __ptext51 04EC  
                                                        __ptext43 228C  
                                                        __ptext35 23D0  
                                                        __ptext27 2424  
                                                        __ptext19 1DC2  
                                                        __ptext60 1152  
                                                        __ptext52 2150  
                                                        __ptext44 123E  
                                                        __ptext36 1C7A  
                                                        __ptext28 2432  
                                                        __ptext61 182A  
                                                        __ptext53 248C  
                                                        __ptext45 23E2  
                                                        __ptext37 0678  
                                                        __ptext29 21A2  
                                                        __ptext70 2124  
                                                        __ptext62 21F2  
                                                        __ptext54 235C  
                                                        __ptext46 23F4  
                                                        __ptext38 2328  
                                                        __ptext63 2492  
                                                        __ptext55 13F4  
                                                        __ptext47 2242  
                                                        __ptext39 2342  
                                                        __ptext80 18A0  
                                                        __ptext72 202E  
                                                        __ptext64 1052  
                                                        __ptext56 1FC6  
                                                        __ptext48 1C2C  
                                                        __ptext81 0934  
                                                        __ptext73 1560  
                                                        __ptext65 19D8  
                                                        __ptext57 1FFA  
                                                        __ptext49 0298  
                                                        __ptext90 22D4  
                                                        __ptext82 238E  
                                                        __ptext74 0CF4  
                                                        __ptext66 22B0  
                                                        __ptext58 07E2  
                                                        __ptext91 20F4  
                                                        __ptext83 1976  
                                                        __ptext75 2462  
                                                        __ptext67 14B8  
                                                        __ptext59 1328  
                                                        __ptext92 0000  
                                                        __ptext84 2060  
                                                        __ptext76 1E3C  
                                                        __ptext68 1F5A  
                                                        __ptext85 2092  
                                                        __ptext77 1D04  
                                                        __ptext69 0F40  
                                                        __ptext86 2406  
                                                        __ptext78 1B3C  
                                                        __ptext87 0BC0  
                                                        __ptext79 246C  
                                                        __ptext88 221A  
                                                        __ptext89 23A6  
                                       i2_Sensor_scheduleNextScan 0934  
                                       __end_of_MTOUCH_Initialize 23D0  
                                       ??_Sensor_RawSample_Update 00B9  
                                     __size_of_EUSART2_Initialize 005E  
                                                        _freq_hop 00DE  
                                      __size_of_Sensor_setSampled 0010  
                                               _currentScanSensor 003B  
                                                   __size_of_main 009A  
                                 __end_of_MTOUCH_Sensor_SampleAll 1CC0  
                                            __CFG_WDTCWS$WDTCWS_7 000000  
                                      Sensor_autoCalibration@name 000D  
                                    __size_ofi2_Sensor_SetTrisBit 0062  
                                   MTOUCH_needReburst@needReburst 00B0  
                                              __CFG_BORV$VBOR_190 000000  
                                                      _RC2STAbits 000EF5  
                                                        int$flags 004F  
                              __size_of_Button_State_Initializing 00CC  
                                                       printf@val 00C5  
                                 __size_of_Button_Baseline_Update 0100  
                                    ?_MTOUCH_Button_InitializeAll 0001  
                                    ?_MTOUCH_Sensor_InitializeAll 0001  
                                                   _mtouch_button 0140  
                                                      _INTCONbits 000FF2  
                                                   _mtouch_sensor 0083  
                                                        memcpy@d1 00B0  
                                                        memcpy@s1 00B2  
                                 __end_of_MTOUCH_Button_isPressed 1EEA  
                                        ??_Sensor_setSamplePeriod 00B0  
                                      ??_MTOUCH_Sensor_isSampling 00B0  
                                          ??_INTERRUPT_Initialize 00B0  
                                                     _MTOUCH_Tick 2486  
                                          ?_Button_Reading_Update 00B7  
                                Button_Deviation_Update@deviation 00B8  
                                    MTOUCH_Button_Initialize@name 00B1  
                               __size_of_MTOUCH_Button_Initialize 0076  
                                                        intlevel2 0000  
                                       ?_MTOUCH_Button_Initialize 0001  
                                                ___lwmod@dividend 00B7  
                                         ?_PIN_MANAGER_Initialize 0001  
                               __size_of_ADCC_ThresholdISR_mTouch 000A  
                                     ??_Sensor_setCalibratAcqTime 0003  
                                       ?_ADCC_ThresholdISR_mTouch 0001  
                                               __CFG_CLKOUTEN$OFF 000000  
                                     ?_MTOUCH_Sensor_isCalibrated 0001  
                Sensor_FrequencyHopping_Autotune_Process@variance 00BB  
                                    Sensor_scheduleNextScan@state 00B4  
                                     __size_of_Button_Tick_helper 0052  
                                 __end_of_Button_State_NotPressed 0934  
                                                        printf@ap 00C1  
                                         _Sensor_FrequencyHopping 2268  
                                         ??_MTOUCH_Sensor_Service 000E  
                                  ?_EUSART2_SetRxInterruptHandler 00B0  
                                    __end_of_Sensor_Sampled_Reset 23E2  
                                 __end_of_MTOUCH_Sensor_isEnabled 1FC6  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                          __size_of_EUSART2_Write 003E  
                                             _EUSART2_Receive_ISR 1560  
                               i2Sensor_scheduleNextScan@skipScan 0006  
                                 Sensor_scheduleNextScan@skipScan 00B5  
                          __end_of_INTERRUPT_InterruptManagerHigh 00E4  
                         __size_of_INTERRUPT_InterruptManagerHigh 00DC  
                                  _INTERRUPT_InterruptManagerHigh 0008  
                                                      _RX2PPSbits 000E11  
                                   ??_MTOUCH_Button_InitializeAll 00BB  
                                                        strcmp@s1 00B0  
                                                        strcmp@s2 00B2  
                                               ringBufferLUT@line 00C8  
                                        ??_Button_DefaultCallback 00B0  
                                                 ___lwmod@divisor 00B9  
                                   ??_MTOUCH_Sensor_InitializeAll 00BB  
                                __size_of_MTOUCH_Sensor_Calibrate 0028  
                                                        strlen@cp 00B4  
                                                 ___lwmod@counter 00BB  
                                          ??_MTOUCH_Sensor_Enable 00B0  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 00BA  
                             i2Sensor_isCalibratingAcqTime@sensor 0001  
                               Sensor_isCalibratingAcqTime@sensor 00B0  
                                    __size_of_Sensor_isCalibrated 001A  
                                        ??_Sensor_DefaultCallback 00B0  
                                    __end_of_Sensor_setCalibrated 22F2  
                            __end_of_Button_Reading_Update_Helper 1560  
                           __size_of_Button_Reading_Update_Helper 00A8  
                                    _Button_Reading_Update_Helper 14B8  
                                                      _TX2STAbits 000EF6  
                               __size_of_MTOUCH_Button_ServiceAll 001A  
                                       ?_MTOUCH_Button_ServiceAll 0001  
                                   Button_State_NotPressed@button 00B9  
                                      __size_of_MTOUCH_Initialize 0012  
                                  __end_of_PIN_MANAGER_Initialize 1736  
                                          _Button_Baseline_Update 1052  
                                 ??_EUSART2_SetTxInterruptHandler 00B3  
                                            ?_EUSART2_Receive_ISR 0001  
                                        ?_Sensor_scheduleNextScan 0001  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 00B0  
                                     MTOUCH_Button_isPressed@name 00B1  
                                      ??_MTOUCH_Sensor_wasSampled 00B0  
                               _EUSART2_RxDefaultInterruptHandler 00E1  
                                __size_of_MTOUCH_Button_State_Get 002C  
                                           i2_Sensor_isCalibrated 238E  
