

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 28 15:11:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.45 (B)
   117                           ; Generated 30/01/2018 GMT
   118                           ; 
   119                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18LF67K40 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataCOMRAM
   152  012476                     __pidataCOMRAM:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _callback_notPressed
   156  012476  92                 	db	low _Button_DefaultCallback
   157  012477  24                 	db	high _Button_DefaultCallback
   158  012478  01                 	db	low (_Button_DefaultCallback shr (0+16))
   159                           
   160                           ;initializer for _callback_pressed
   161  012479  92                 	db	low _Button_DefaultCallback
   162  01247A  24                 	db	high _Button_DefaultCallback
   163  01247B  01                 	db	low (_Button_DefaultCallback shr (0+16))
   164                           
   165                           ;initializer for _callback_sampled
   166  01247C  90                 	db	low _Sensor_DefaultCallback
   167  01247D  24                 	db	high _Sensor_DefaultCallback
   168  01247E  01                 	db	low (_Sensor_DefaultCallback shr (0+16))
   169                           
   170                           	psect	idataBANK0
   171  012440                     __pidataBANK0:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _Button_StateMachine
   175  012440  28                 	db	low _Button_State_Initializing
   176  012441  13                 	db	high _Button_State_Initializing
   177  012442  01                 	db	low (_Button_State_Initializing shr (0+16))
   178  012443  E2                 	db	low _Button_State_NotPressed
   179  012444  07                 	db	high _Button_State_NotPressed
   180  012445  01                 	db	low (_Button_State_NotPressed shr (0+16))
   181  012446  52                 	db	low _Button_State_Pressed
   182  012447  11                 	db	high _Button_State_Pressed
   183  012448  01                 	db	low (_Button_State_Pressed shr (0+16))
   184                           
   185                           ;initializer for _freq_hop
   186  012449  00                 	db	0
   187  01244A  3C                 	db	60
   188  01244B  78                 	db	120
   189                           
   190                           	psect	mediumconst
   191  00FBCA                     __pmediumconst:
   192                           	opt stack 0
   193  00FBCA  00                 	db	0
   194  00FBCB                     _dpowers:
   195                           	opt stack 0
   196  00FBCB  0001               	dw	1
   197  00FBCD  000A               	dw	10
   198  00FBCF  0064               	dw	100
   199  00FBD1  03E8               	dw	1000
   200  00FBD3  2710               	dw	10000
   201  00FBD5                     __end_of_dpowers:
   202                           	opt stack 0
   203  00FBD5                     _mtouch_button_init:
   204                           	opt stack 0
   205  00FBD5  00                 	db	0
   206  00FBD6  00                 	db	0
   207  00FBD7  00                 	db	0
   208  00FBD8  0000               	dw	0
   209  00FBDA  0000               	dw	0
   210  00FBDC  0000               	dw	0
   211  00FBDE  00                 	db	0
   212  00FBDF  0000               	dw	0
   213  00FBE1  0000               	dw	0
   214  00FBE3  64                 	db	100
   215  00FBE4  01                 	db	1
   216  00FBE5  01                 	db	1
   217  00FBE6  01                 	db	1
   218  00FBE7  00                 	db	0
   219  00FBE8  0000               	dw	0
   220  00FBEA  0000               	dw	0
   221  00FBEC  0000               	dw	0
   222  00FBEE  00                 	db	0
   223  00FBEF  0000               	dw	0
   224  00FBF1  0000               	dw	0
   225  00FBF3  64                 	db	100
   226  00FBF4  01                 	db	1
   227  00FBF5  02                 	db	2
   228  00FBF6  02                 	db	2
   229  00FBF7  00                 	db	0
   230  00FBF8  0000               	dw	0
   231  00FBFA  0000               	dw	0
   232  00FBFC  0000               	dw	0
   233  00FBFE  00                 	db	0
   234  00FBFF  0000               	dw	0
   235  00FC01  0000               	dw	0
   236  00FC03  64                 	db	100
   237  00FC04  01                 	db	1
   238  00FC05  03                 	db	3
   239  00FC06  03                 	db	3
   240  00FC07  00                 	db	0
   241  00FC08  0000               	dw	0
   242  00FC0A  0000               	dw	0
   243  00FC0C  0000               	dw	0
   244  00FC0E  00                 	db	0
   245  00FC0F  0000               	dw	0
   246  00FC11  0000               	dw	0
   247  00FC13  64                 	db	100
   248  00FC14  01                 	db	1
   249  00FC15  04                 	db	4
   250  00FC16  04                 	db	4
   251  00FC17  00                 	db	0
   252  00FC18  0000               	dw	0
   253  00FC1A  0000               	dw	0
   254  00FC1C  0000               	dw	0
   255  00FC1E  00                 	db	0
   256  00FC1F  0000               	dw	0
   257  00FC21  0000               	dw	0
   258  00FC23  64                 	db	100
   259  00FC24  01                 	db	1
   260  00FC25                     __end_of_mtouch_button_init:
   261                           	opt stack 0
   262  00FC25                     _mtouch_sensor_init:
   263                           	opt stack 0
   264  00FC25  00                 	db	0
   265  00FC26  22                 	db	34
   266  00FC27  50                 	db	80
   267  00FC28  28                 	db	40
   268  00FC29  20                 	db	32
   269  00FC2A  00                 	db	0
   270  00FC2B  0000               	dw	0
   271  00FC2D  00                 	db	0
   272  00FC2E  01                 	db	1
   273  00FC2F  23                 	db	35
   274  00FC30  50                 	db	80
   275  00FC31  28                 	db	40
   276  00FC32  20                 	db	32
   277  00FC33  00                 	db	0
   278  00FC34  0000               	dw	0
   279  00FC36  00                 	db	0
   280  00FC37  02                 	db	2
   281  00FC38  24                 	db	36
   282  00FC39  50                 	db	80
   283  00FC3A  28                 	db	40
   284  00FC3B  20                 	db	32
   285  00FC3C  00                 	db	0
   286  00FC3D  0000               	dw	0
   287  00FC3F  00                 	db	0
   288  00FC40  03                 	db	3
   289  00FC41  25                 	db	37
   290  00FC42  50                 	db	80
   291  00FC43  28                 	db	40
   292  00FC44  20                 	db	32
   293  00FC45  00                 	db	0
   294  00FC46  0000               	dw	0
   295  00FC48  00                 	db	0
   296  00FC49  04                 	db	4
   297  00FC4A  26                 	db	38
   298  00FC4B  50                 	db	80
   299  00FC4C  28                 	db	40
   300  00FC4D  20                 	db	32
   301  00FC4E  00                 	db	0
   302  00FC4F  0000               	dw	0
   303  00FC51  00                 	db	0
   304  00FC52                     __end_of_mtouch_sensor_init:
   305                           	opt stack 0
   306  00FC52                     STR_4:
   307  00FC52  20                 	db	32
   308  00FC53  20                 	db	32
   309  00FC54  20                 	db	32
   310  00FC55  20                 	db	32
   311  00FC56  42                 	db	66	;'B'
   312  00FC57  6F                 	db	111	;'o'
   313  00FC58  6F                 	db	111	;'o'
   314  00FC59  74                 	db	116	;'t'
   315  00FC5A  20                 	db	32
   316  00FC5B  63                 	db	99	;'c'
   317  00FC5C  6F                 	db	111	;'o'
   318  00FC5D  6D                 	db	109	;'m'
   319  00FC5E  70                 	db	112	;'p'
   320  00FC5F  6C                 	db	108	;'l'
   321  00FC60  65                 	db	101	;'e'
   322  00FC61  74                 	db	116	;'t'
   323  00FC62  65                 	db	101	;'e'
   324  00FC63  0A                 	db	10
   325  00FC64  0D                 	db	13
   326  00FC65  20                 	db	32
   327  00FC66  20                 	db	32
   328  00FC67  20                 	db	32
   329  00FC68  50                 	db	80	;'P'
   330  00FC69  49                 	db	73	;'I'
   331  00FC6A  43                 	db	67	;'C'
   332  00FC6B  31                 	db	49	;'1'
   333  00FC6C  38                 	db	56	;'8'
   334  00FC6D  46                 	db	70	;'F'
   335  00FC6E  36                 	db	54	;'6'
   336  00FC6F  37                 	db	55	;'7'
   337  00FC70  4B                 	db	75	;'K'
   338  00FC71  34                 	db	52	;'4'
   339  00FC72  30                 	db	48	;'0'
   340  00FC73  20                 	db	32
   341  00FC74  6D                 	db	109	;'m'
   342  00FC75  54                 	db	84	;'T'
   343  00FC76  6F                 	db	111	;'o'
   344  00FC77  75                 	db	117	;'u'
   345  00FC78  63                 	db	99	;'c'
   346  00FC79  68                 	db	104	;'h'
   347  00FC7A  20                 	db	32
   348  00FC7B  54                 	db	84	;'T'
   349  00FC7C  65                 	db	101	;'e'
   350  00FC7D  73                 	db	115	;'s'
   351  00FC7E  74                 	db	116	;'t'
   352  00FC7F  20                 	db	32
   353  00FC80  42                 	db	66	;'B'
   354  00FC81  6F                 	db	111	;'o'
   355  00FC82  61                 	db	97	;'a'
   356  00FC83  72                 	db	114	;'r'
   357  00FC84  64                 	db	100	;'d'
   358  00FC85  0A                 	db	10
   359  00FC86  0D                 	db	13
   360  00FC87  20                 	db	32
   361  00FC88  20                 	db	32
   362  00FC89  20                 	db	32
   363  00FC8A  45                 	db	69	;'E'
   364  00FC8B  76                 	db	118	;'v'
   365  00FC8C  61                 	db	97	;'a'
   366  00FC8D  6C                 	db	108	;'l'
   367  00FC8E  75                 	db	117	;'u'
   368  00FC8F  61                 	db	97	;'a'
   369  00FC90  74                 	db	116	;'t'
   370  00FC91  65                 	db	101	;'e'
   371  00FC92  73                 	db	115	;'s'
   372  00FC93  20                 	db	32
   373  00FC94  74                 	db	116	;'t'
   374  00FC95  68                 	db	104	;'h'
   375  00FC96  65                 	db	101	;'e'
   376  00FC97  20                 	db	32
   377  00FC98  6D                 	db	109	;'m'
   378  00FC99  54                 	db	84	;'T'
   379  00FC9A  6F                 	db	111	;'o'
   380  00FC9B  75                 	db	117	;'u'
   381  00FC9C  63                 	db	99	;'c'
   382  00FC9D  68                 	db	104	;'h'
   383  00FC9E  20                 	db	32
   384  00FC9F  63                 	db	99	;'c'
   385  00FCA0  61                 	db	97	;'a'
   386  00FCA1  70                 	db	112	;'p'
   387  00FCA2  61                 	db	97	;'a'
   388  00FCA3  63                 	db	99	;'c'
   389  00FCA4  69                 	db	105	;'i'
   390  00FCA5  74                 	db	116	;'t'
   391  00FCA6  69                 	db	105	;'i'
   392  00FCA7  76                 	db	118	;'v'
   393  00FCA8  65                 	db	101	;'e'
   394  00FCA9  20                 	db	32
   395  00FCAA  74                 	db	116	;'t'
   396  00FCAB  6F                 	db	111	;'o'
   397  00FCAC  75                 	db	117	;'u'
   398  00FCAD  63                 	db	99	;'c'
   399  00FCAE  68                 	db	104	;'h'
   400  00FCAF  20                 	db	32
   401  00FCB0  6C                 	db	108	;'l'
   402  00FCB1  69                 	db	105	;'i'
   403  00FCB2  62                 	db	98	;'b'
   404  00FCB3  72                 	db	114	;'r'
   405  00FCB4  61                 	db	97	;'a'
   406  00FCB5  72                 	db	114	;'r'
   407  00FCB6  79                 	db	121	;'y'
   408  00FCB7  20                 	db	32
   409  00FCB8  64                 	db	100	;'d'
   410  00FCB9  69                 	db	105	;'i'
   411  00FCBA  73                 	db	115	;'s'
   412  00FCBB  74                 	db	116	;'t'
   413  00FCBC  72                 	db	114	;'r'
   414  00FCBD  69                 	db	105	;'i'
   415  00FCBE  62                 	db	98	;'b'
   416  00FCBF  75                 	db	117	;'u'
   417  00FCC0  74                 	db	116	;'t'
   418  00FCC1  65                 	db	101	;'e'
   419  00FCC2  64                 	db	100	;'d'
   420  00FCC3  20                 	db	32
   421  00FCC4  62                 	db	98	;'b'
   422  00FCC5  79                 	db	121	;'y'
   423  00FCC6  20                 	db	32
   424  00FCC7  4D                 	db	77	;'M'
   425  00FCC8  69                 	db	105	;'i'
   426  00FCC9  63                 	db	99	;'c'
   427  00FCCA  72                 	db	114	;'r'
   428  00FCCB  6F                 	db	111	;'o'
   429  00FCCC  63                 	db	99	;'c'
   430  00FCCD  68                 	db	104	;'h'
   431  00FCCE  69                 	db	105	;'i'
   432  00FCCF  70                 	db	112	;'p'
   433  00FCD0  0A                 	db	10
   434  00FCD1  0D                 	db	13
   435  00FCD2  20                 	db	32
   436  00FCD3  20                 	db	32
   437  00FCD4  20                 	db	32
   438  00FCD5  53                 	db	83	;'S'
   439  00FCD6  65                 	db	101	;'e'
   440  00FCD7  74                 	db	116	;'t'
   441  00FCD8  73                 	db	115	;'s'
   442  00FCD9  20                 	db	32
   443  00FCDA  74                 	db	116	;'t'
   444  00FCDB  68                 	db	104	;'h'
   445  00FCDC  65                 	db	101	;'e'
   446  00FCDD  20                 	db	32
   447  00FCDE  73                 	db	115	;'s'
   448  00FCDF  74                 	db	116	;'t'
   449  00FCE0  61                 	db	97	;'a'
   450  00FCE1  74                 	db	116	;'t'
   451  00FCE2  65                 	db	101	;'e'
   452  00FCE3  20                 	db	32
   453  00FCE4  6F                 	db	111	;'o'
   454  00FCE5  66                 	db	102	;'f'
   455  00FCE6  20                 	db	32
   456  00FCE7  66                 	db	102	;'f'
   457  00FCE8  69                 	db	105	;'i'
   458  00FCE9  76                 	db	118	;'v'
   459  00FCEA  65                 	db	101	;'e'
   460  00FCEB  20                 	db	32
   461  00FCEC  4C                 	db	76	;'L'
   462  00FCED  45                 	db	69	;'E'
   463  00FCEE  44                 	db	68	;'D'
   464  00FCEF  73                 	db	115	;'s'
   465  00FCF0  20                 	db	32
   466  00FCF1  62                 	db	98	;'b'
   467  00FCF2  61                 	db	97	;'a'
   468  00FCF3  73                 	db	115	;'s'
   469  00FCF4  65                 	db	101	;'e'
   470  00FCF5  64                 	db	100	;'d'
   471  00FCF6  20                 	db	32
   472  00FCF7  6F                 	db	111	;'o'
   473  00FCF8  6E                 	db	110	;'n'
   474  00FCF9  20                 	db	32
   475  00FCFA  6D                 	db	109	;'m'
   476  00FCFB  54                 	db	84	;'T'
   477  00FCFC  6F                 	db	111	;'o'
   478  00FCFD  75                 	db	117	;'u'
   479  00FCFE  63                 	db	99	;'c'
   480  00FCFF  68                 	db	104	;'h'
   481  00FD00  20                 	db	32
   482  00FD01  63                 	db	99	;'c'
   483  00FD02  61                 	db	97	;'a'
   484  00FD03  70                 	db	112	;'p'
   485  00FD04  61                 	db	97	;'a'
   486  00FD05  63                 	db	99	;'c'
   487  00FD06  69                 	db	105	;'i'
   488  00FD07  74                 	db	116	;'t'
   489  00FD08  69                 	db	105	;'i'
   490  00FD09  76                 	db	118	;'v'
   491  00FD0A  65                 	db	101	;'e'
   492  00FD0B  20                 	db	32
   493  00FD0C  70                 	db	112	;'p'
   494  00FD0D  75                 	db	117	;'u'
   495  00FD0E  73                 	db	115	;'s'
   496  00FD0F  68                 	db	104	;'h'
   497  00FD10  62                 	db	98	;'b'
   498  00FD11  75                 	db	117	;'u'
   499  00FD12  74                 	db	116	;'t'
   500  00FD13  74                 	db	116	;'t'
   501  00FD14  6F                 	db	111	;'o'
   502  00FD15  6E                 	db	110	;'n'
   503  00FD16  73                 	db	115	;'s'
   504  00FD17  0A                 	db	10
   505  00FD18  0D                 	db	13
   506  00FD19  20                 	db	32
   507  00FD1A  20                 	db	32
   508  00FD1B  20                 	db	32
   509  00FD1C  42                 	db	66	;'B'
   510  00FD1D  61                 	db	97	;'a'
   511  00FD1E  75                 	db	117	;'u'
   512  00FD1F  64                 	db	100	;'d'
   513  00FD20  20                 	db	32
   514  00FD21  72                 	db	114	;'r'
   515  00FD22  61                 	db	97	;'a'
   516  00FD23  74                 	db	116	;'t'
   517  00FD24  65                 	db	101	;'e'
   518  00FD25  3A                 	db	58	;':'
   519  00FD26  20                 	db	32
   520  00FD27  31                 	db	49	;'1'
   521  00FD28  31                 	db	49	;'1'
   522  00FD29  35                 	db	53	;'5'
   523  00FD2A  32                 	db	50	;'2'
   524  00FD2B  30                 	db	48	;'0'
   525  00FD2C  30                 	db	48	;'0'
   526  00FD2D  20                 	db	32
   527  00FD2E  62                 	db	98	;'b'
   528  00FD2F  70                 	db	112	;'p'
   529  00FD30  73                 	db	115	;'s'
   530  00FD31  0A                 	db	10
   531  00FD32  0D                 	db	13
   532  00FD33  20                 	db	32
   533  00FD34  20                 	db	32
   534  00FD35  20                 	db	32
   535  00FD36  4E                 	db	78	;'N'
   536  00FD37  6F                 	db	111	;'o'
   537  00FD38  20                 	db	32
   538  00FD39  70                 	db	112	;'p'
   539  00FD3A  61                 	db	97	;'a'
   540  00FD3B  72                 	db	114	;'r'
   541  00FD3C  69                 	db	105	;'i'
   542  00FD3D  74                 	db	116	;'t'
   543  00FD3E  79                 	db	121	;'y'
   544  00FD3F  2C                 	db	44
   545  00FD40  20                 	db	32
   546  00FD41  38                 	db	56	;'8'
   547  00FD42  20                 	db	32
   548  00FD43  62                 	db	98	;'b'
   549  00FD44  69                 	db	105	;'i'
   550  00FD45  74                 	db	116	;'t'
   551  00FD46  73                 	db	115	;'s'
   552  00FD47  2C                 	db	44
   553  00FD48  20                 	db	32
   554  00FD49  6E                 	db	110	;'n'
   555  00FD4A  6F                 	db	111	;'o'
   556  00FD4B  20                 	db	32
   557  00FD4C  66                 	db	102	;'f'
   558  00FD4D  6C                 	db	108	;'l'
   559  00FD4E  6F                 	db	111	;'o'
   560  00FD4F  77                 	db	119	;'w'
   561  00FD50  20                 	db	32
   562  00FD51  63                 	db	99	;'c'
   563  00FD52  6F                 	db	111	;'o'
   564  00FD53  6E                 	db	110	;'n'
   565  00FD54  74                 	db	116	;'t'
   566  00FD55  72                 	db	114	;'r'
   567  00FD56  6F                 	db	111	;'o'
   568  00FD57  6C                 	db	108	;'l'
   569  00FD58  2C                 	db	44
   570  00FD59  20                 	db	32
   571  00FD5A  31                 	db	49	;'1'
   572  00FD5B  20                 	db	32
   573  00FD5C  73                 	db	115	;'s'
   574  00FD5D  74                 	db	116	;'t'
   575  00FD5E  6F                 	db	111	;'o'
   576  00FD5F  70                 	db	112	;'p'
   577  00FD60  20                 	db	32
   578  00FD61  62                 	db	98	;'b'
   579  00FD62  69                 	db	105	;'i'
   580  00FD63  74                 	db	116	;'t'
   581  00FD64  0A                 	db	10
   582  00FD65  0D                 	db	13
   583  00FD66  20                 	db	32
   584  00FD67  20                 	db	32
   585  00FD68  20                 	db	32
   586  00FD69  43                 	db	67	;'C'
   587  00FD6A  6F                 	db	111	;'o'
   588  00FD6B  6D                 	db	109	;'m'
   589  00FD6C  6D                 	db	109	;'m'
   590  00FD6D  61                 	db	97	;'a'
   591  00FD6E  6E                 	db	110	;'n'
   592  00FD6F  64                 	db	100	;'d'
   593  00FD70  73                 	db	115	;'s'
   594  00FD71  20                 	db	32
   595  00FD72  61                 	db	97	;'a'
   596  00FD73  72                 	db	114	;'r'
   597  00FD74  65                 	db	101	;'e'
   598  00FD75  20                 	db	32
   599  00FD76  63                 	db	99	;'c'
   600  00FD77  61                 	db	97	;'a'
   601  00FD78  73                 	db	115	;'s'
   602  00FD79  65                 	db	101	;'e'
   603  00FD7A  20                 	db	32
   604  00FD7B  73                 	db	115	;'s'
   605  00FD7C  65                 	db	101	;'e'
   606  00FD7D  6E                 	db	110	;'n'
   607  00FD7E  73                 	db	115	;'s'
   608  00FD7F  69                 	db	105	;'i'
   609  00FD80  74                 	db	116	;'t'
   610  00FD81  69                 	db	105	;'i'
   611  00FD82  76                 	db	118	;'v'
   612  00FD83  65                 	db	101	;'e'
   613  00FD84  0A                 	db	10
   614  00FD85  0D                 	db	13
   615  00FD86  20                 	db	32
   616  00FD87  20                 	db	32
   617  00FD88  20                 	db	32
   618  00FD89  45                 	db	69	;'E'
   619  00FD8A  6E                 	db	110	;'n'
   620  00FD8B  74                 	db	116	;'t'
   621  00FD8C  65                 	db	101	;'e'
   622  00FD8D  72                 	db	114	;'r'
   623  00FD8E  20                 	db	32
   624  00FD8F  61                 	db	97	;'a'
   625  00FD90  20                 	db	32
   626  00FD91  63                 	db	99	;'c'
   627  00FD92  6F                 	db	111	;'o'
   628  00FD93  6D                 	db	109	;'m'
   629  00FD94  6D                 	db	109	;'m'
   630  00FD95  61                 	db	97	;'a'
   631  00FD96  6E                 	db	110	;'n'
   632  00FD97  64                 	db	100	;'d'
   633  00FD98  2C                 	db	44
   634  00FD99  20                 	db	32
   635  00FD9A  6F                 	db	111	;'o'
   636  00FD9B  72                 	db	114	;'r'
   637  00FD9C  20                 	db	32
   638  00FD9D  65                 	db	101	;'e'
   639  00FD9E  6E                 	db	110	;'n'
   640  00FD9F  74                 	db	116	;'t'
   641  00FDA0  65                 	db	101	;'e'
   642  00FDA1  72                 	db	114	;'r'
   643  00FDA2  20                 	db	32
   644  00FDA3  48                 	db	72	;'H'
   645  00FDA4  65                 	db	101	;'e'
   646  00FDA5  6C                 	db	108	;'l'
   647  00FDA6  70                 	db	112	;'p'
   648  00FDA7  20                 	db	32
   649  00FDA8  66                 	db	102	;'f'
   650  00FDA9  6F                 	db	111	;'o'
   651  00FDAA  72                 	db	114	;'r'
   652  00FDAB  20                 	db	32
   653  00FDAC  6C                 	db	108	;'l'
   654  00FDAD  69                 	db	105	;'i'
   655  00FDAE  73                 	db	115	;'s'
   656  00FDAF  74                 	db	116	;'t'
   657  00FDB0  20                 	db	32
   658  00FDB1  6F                 	db	111	;'o'
   659  00FDB2  66                 	db	102	;'f'
   660  00FDB3  20                 	db	32
   661  00FDB4  63                 	db	99	;'c'
   662  00FDB5  6F                 	db	111	;'o'
   663  00FDB6  6D                 	db	109	;'m'
   664  00FDB7  6D                 	db	109	;'m'
   665  00FDB8  61                 	db	97	;'a'
   666  00FDB9  6E                 	db	110	;'n'
   667  00FDBA  64                 	db	100	;'d'
   668  00FDBB  73                 	db	115	;'s'
   669  00FDBC  0A                 	db	10
   670  00FDBD  0D                 	db	13
   671  00FDBE  00                 	db	0
   672  00FDBF                     STR_35:
   673  00FDBF  20                 	db	32
   674  00FDC0  20                 	db	32
   675  00FDC1  20                 	db	32
   676  00FDC2  4C                 	db	76	;'L'
   677  00FDC3  69                 	db	105	;'i'
   678  00FDC4  73                 	db	115	;'s'
   679  00FDC5  74                 	db	116	;'t'
   680  00FDC6  20                 	db	32
   681  00FDC7  6F                 	db	111	;'o'
   682  00FDC8  66                 	db	102	;'f'
   683  00FDC9  20                 	db	32
   684  00FDCA  73                 	db	115	;'s'
   685  00FDCB  75                 	db	117	;'u'
   686  00FDCC  70                 	db	112	;'p'
   687  00FDCD  70                 	db	112	;'p'
   688  00FDCE  6F                 	db	111	;'o'
   689  00FDCF  72                 	db	114	;'r'
   690  00FDD0  74                 	db	116	;'t'
   691  00FDD1  65                 	db	101	;'e'
   692  00FDD2  64                 	db	100	;'d'
   693  00FDD3  20                 	db	32
   694  00FDD4  63                 	db	99	;'c'
   695  00FDD5  6F                 	db	111	;'o'
   696  00FDD6  6D                 	db	109	;'m'
   697  00FDD7  6D                 	db	109	;'m'
   698  00FDD8  61                 	db	97	;'a'
   699  00FDD9  6E                 	db	110	;'n'
   700  00FDDA  64                 	db	100	;'d'
   701  00FDDB  73                 	db	115	;'s'
   702  00FDDC  3A                 	db	58	;':'
   703  00FDDD  0A                 	db	10
   704  00FDDE  0D                 	db	13
   705  00FDDF  20                 	db	32
   706  00FDE0  20                 	db	32
   707  00FDE1  20                 	db	32
   708  00FDE2  4C                 	db	76	;'L'
   709  00FDE3  45                 	db	69	;'E'
   710  00FDE4  44                 	db	68	;'D'
   711  00FDE5  73                 	db	115	;'s'
   712  00FDE6  20                 	db	32
   713  00FDE7  4F                 	db	79	;'O'
   714  00FDE8  6E                 	db	110	;'n'
   715  00FDE9  3A                 	db	58	;':'
   716  00FDEA  20                 	db	32
   717  00FDEB  54                 	db	84	;'T'
   718  00FDEC  75                 	db	117	;'u'
   719  00FDED  72                 	db	114	;'r'
   720  00FDEE  6E                 	db	110	;'n'
   721  00FDEF  73                 	db	115	;'s'
   722  00FDF0  20                 	db	32
   723  00FDF1  61                 	db	97	;'a'
   724  00FDF2  6C                 	db	108	;'l'
   725  00FDF3  6C                 	db	108	;'l'
   726  00FDF4  20                 	db	32
   727  00FDF5  4C                 	db	76	;'L'
   728  00FDF6  45                 	db	69	;'E'
   729  00FDF7  44                 	db	68	;'D'
   730  00FDF8  73                 	db	115	;'s'
   731  00FDF9  20                 	db	32
   732  00FDFA  4F                 	db	79	;'O'
   733  00FDFB  6E                 	db	110	;'n'
   734  00FDFC  0A                 	db	10
   735  00FDFD  0D                 	db	13
   736  00FDFE  20                 	db	32
   737  00FDFF  20                 	db	32
   738  00FE00  20                 	db	32
   739  00FE01  4C                 	db	76	;'L'
   740  00FE02  45                 	db	69	;'E'
   741  00FE03  44                 	db	68	;'D'
   742  00FE04  73                 	db	115	;'s'
   743  00FE05  20                 	db	32
   744  00FE06  4F                 	db	79	;'O'
   745  00FE07  66                 	db	102	;'f'
   746  00FE08  66                 	db	102	;'f'
   747  00FE09  3A                 	db	58	;':'
   748  00FE0A  20                 	db	32
   749  00FE0B  54                 	db	84	;'T'
   750  00FE0C  75                 	db	117	;'u'
   751  00FE0D  72                 	db	114	;'r'
   752  00FE0E  6E                 	db	110	;'n'
   753  00FE0F  73                 	db	115	;'s'
   754  00FE10  20                 	db	32
   755  00FE11  61                 	db	97	;'a'
   756  00FE12  6C                 	db	108	;'l'
   757  00FE13  6C                 	db	108	;'l'
   758  00FE14  20                 	db	32
   759  00FE15  4C                 	db	76	;'L'
   760  00FE16  45                 	db	69	;'E'
   761  00FE17  44                 	db	68	;'D'
   762  00FE18  73                 	db	115	;'s'
   763  00FE19  20                 	db	32
   764  00FE1A  4F                 	db	79	;'O'
   765  00FE1B  66                 	db	102	;'f'
   766  00FE1C  66                 	db	102	;'f'
   767  00FE1D  0A                 	db	10
   768  00FE1E  0D                 	db	13
   769  00FE1F  20                 	db	32
   770  00FE20  20                 	db	32
   771  00FE21  20                 	db	32
   772  00FE22  42                 	db	66	;'B'
   773  00FE23  75                 	db	117	;'u'
   774  00FE24  74                 	db	116	;'t'
   775  00FE25  74                 	db	116	;'t'
   776  00FE26  6F                 	db	111	;'o'
   777  00FE27  6E                 	db	110	;'n'
   778  00FE28  20                 	db	32
   779  00FE29  53                 	db	83	;'S'
   780  00FE2A  74                 	db	116	;'t'
   781  00FE2B  61                 	db	97	;'a'
   782  00FE2C  74                 	db	116	;'t'
   783  00FE2D  65                 	db	101	;'e'
   784  00FE2E  73                 	db	115	;'s'
   785  00FE2F  3F                 	db	63	;'?'
   786  00FE30  3A                 	db	58	;':'
   787  00FE31  20                 	db	32
   788  00FE32  52                 	db	82	;'R'
   789  00FE33  65                 	db	101	;'e'
   790  00FE34  74                 	db	116	;'t'
   791  00FE35  75                 	db	117	;'u'
   792  00FE36  72                 	db	114	;'r'
   793  00FE37  6E                 	db	110	;'n'
   794  00FE38  73                 	db	115	;'s'
   795  00FE39  20                 	db	32
   796  00FE3A  73                 	db	115	;'s'
   797  00FE3B  74                 	db	116	;'t'
   798  00FE3C  61                 	db	97	;'a'
   799  00FE3D  74                 	db	116	;'t'
   800  00FE3E  65                 	db	101	;'e'
   801  00FE3F  20                 	db	32
   802  00FE40  6F                 	db	111	;'o'
   803  00FE41  66                 	db	102	;'f'
   804  00FE42  20                 	db	32
   805  00FE43  61                 	db	97	;'a'
   806  00FE44  6C                 	db	108	;'l'
   807  00FE45  6C                 	db	108	;'l'
   808  00FE46  20                 	db	32
   809  00FE47  66                 	db	102	;'f'
   810  00FE48  69                 	db	105	;'i'
   811  00FE49  76                 	db	118	;'v'
   812  00FE4A  65                 	db	101	;'e'
   813  00FE4B  20                 	db	32
   814  00FE4C  6D                 	db	109	;'m'
   815  00FE4D  54                 	db	84	;'T'
   816  00FE4E  6F                 	db	111	;'o'
   817  00FE4F  75                 	db	117	;'u'
   818  00FE50  63                 	db	99	;'c'
   819  00FE51  68                 	db	104	;'h'
   820  00FE52  20                 	db	32
   821  00FE53  62                 	db	98	;'b'
   822  00FE54  75                 	db	117	;'u'
   823  00FE55  74                 	db	116	;'t'
   824  00FE56  74                 	db	116	;'t'
   825  00FE57  6F                 	db	111	;'o'
   826  00FE58  6E                 	db	110	;'n'
   827  00FE59  73                 	db	115	;'s'
   828  00FE5A  0A                 	db	10
   829  00FE5B  0D                 	db	13
   830  00FE5C  20                 	db	32
   831  00FE5D  20                 	db	32
   832  00FE5E  20                 	db	32
   833  00FE5F  52                 	db	82	;'R'
   834  00FE60  65                 	db	101	;'e'
   835  00FE61  73                 	db	115	;'s'
   836  00FE62  65                 	db	101	;'e'
   837  00FE63  74                 	db	116	;'t'
   838  00FE64  3A                 	db	58	;':'
   839  00FE65  20                 	db	32
   840  00FE66  43                 	db	67	;'C'
   841  00FE67  6C                 	db	108	;'l'
   842  00FE68  65                 	db	101	;'e'
   843  00FE69  61                 	db	97	;'a'
   844  00FE6A  72                 	db	114	;'r'
   845  00FE6B  73                 	db	115	;'s'
   846  00FE6C  20                 	db	32
   847  00FE6D  74                 	db	116	;'t'
   848  00FE6E  68                 	db	104	;'h'
   849  00FE6F  65                 	db	101	;'e'
   850  00FE70  20                 	db	32
   851  00FE71  74                 	db	116	;'t'
   852  00FE72  65                 	db	101	;'e'
   853  00FE73  72                 	db	114	;'r'
   854  00FE74  6D                 	db	109	;'m'
   855  00FE75  69                 	db	105	;'i'
   856  00FE76  6E                 	db	110	;'n'
   857  00FE77  61                 	db	97	;'a'
   858  00FE78  6C                 	db	108	;'l'
   859  00FE79  20                 	db	32
   860  00FE7A  61                 	db	97	;'a'
   861  00FE7B  6E                 	db	110	;'n'
   862  00FE7C  64                 	db	100	;'d'
   863  00FE7D  20                 	db	32
   864  00FE7E  72                 	db	114	;'r'
   865  00FE7F  65                 	db	101	;'e'
   866  00FE80  73                 	db	115	;'s'
   867  00FE81  65                 	db	101	;'e'
   868  00FE82  74                 	db	116	;'t'
   869  00FE83  73                 	db	115	;'s'
   870  00FE84  20                 	db	32
   871  00FE85  74                 	db	116	;'t'
   872  00FE86  68                 	db	104	;'h'
   873  00FE87  65                 	db	101	;'e'
   874  00FE88  20                 	db	32
   875  00FE89  6D                 	db	109	;'m'
   876  00FE8A  69                 	db	105	;'i'
   877  00FE8B  63                 	db	99	;'c'
   878  00FE8C  72                 	db	114	;'r'
   879  00FE8D  6F                 	db	111	;'o'
   880  00FE8E  0A                 	db	10
   881  00FE8F  0D                 	db	13
   882  00FE90  20                 	db	32
   883  00FE91  20                 	db	32
   884  00FE92  20                 	db	32
   885  00FE93  43                 	db	67	;'C'
   886  00FE94  6C                 	db	108	;'l'
   887  00FE95  65                 	db	101	;'e'
   888  00FE96  61                 	db	97	;'a'
   889  00FE97  72                 	db	114	;'r'
   890  00FE98  3A                 	db	58	;':'
   891  00FE99  20                 	db	32
   892  00FE9A  43                 	db	67	;'C'
   893  00FE9B  6C                 	db	108	;'l'
   894  00FE9C  65                 	db	101	;'e'
   895  00FE9D  61                 	db	97	;'a'
   896  00FE9E  72                 	db	114	;'r'
   897  00FE9F  73                 	db	115	;'s'
   898  00FEA0  20                 	db	32
   899  00FEA1  74                 	db	116	;'t'
   900  00FEA2  68                 	db	104	;'h'
   901  00FEA3  65                 	db	101	;'e'
   902  00FEA4  20                 	db	32
   903  00FEA5  74                 	db	116	;'t'
   904  00FEA6  65                 	db	101	;'e'
   905  00FEA7  72                 	db	114	;'r'
   906  00FEA8  6D                 	db	109	;'m'
   907  00FEA9  69                 	db	105	;'i'
   908  00FEAA  6E                 	db	110	;'n'
   909  00FEAB  61                 	db	97	;'a'
   910  00FEAC  6C                 	db	108	;'l'
   911  00FEAD  20                 	db	32
   912  00FEAE  62                 	db	98	;'b'
   913  00FEAF  75                 	db	117	;'u'
   914  00FEB0  74                 	db	116	;'t'
   915  00FEB1  20                 	db	32
   916  00FEB2  64                 	db	100	;'d'
   917  00FEB3  6F                 	db	111	;'o'
   918  00FEB4  65                 	db	101	;'e'
   919  00FEB5  73                 	db	115	;'s'
   920  00FEB6  6E                 	db	110	;'n'
   921  00FEB7  27                 	db	39
   922  00FEB8  74                 	db	116	;'t'
   923  00FEB9  20                 	db	32
   924  00FEBA  72                 	db	114	;'r'
   925  00FEBB  65                 	db	101	;'e'
   926  00FEBC  73                 	db	115	;'s'
   927  00FEBD  65                 	db	101	;'e'
   928  00FEBE  74                 	db	116	;'t'
   929  00FEBF  20                 	db	32
   930  00FEC0  74                 	db	116	;'t'
   931  00FEC1  68                 	db	104	;'h'
   932  00FEC2  65                 	db	101	;'e'
   933  00FEC3  20                 	db	32
   934  00FEC4  6D                 	db	109	;'m'
   935  00FEC5  69                 	db	105	;'i'
   936  00FEC6  63                 	db	99	;'c'
   937  00FEC7  72                 	db	114	;'r'
   938  00FEC8  6F                 	db	111	;'o'
   939  00FEC9  0A                 	db	10
   940  00FECA  0D                 	db	13
   941  00FECB  20                 	db	32
   942  00FECC  20                 	db	32
   943  00FECD  20                 	db	32
   944  00FECE  2A                 	db	42
   945  00FECF  49                 	db	73	;'I'
   946  00FED0  44                 	db	68	;'D'
   947  00FED1  4E                 	db	78	;'N'
   948  00FED2  3F                 	db	63	;'?'
   949  00FED3  3A                 	db	58	;':'
   950  00FED4  20                 	db	32
   951  00FED5  52                 	db	82	;'R'
   952  00FED6  65                 	db	101	;'e'
   953  00FED7  74                 	db	116	;'t'
   954  00FED8  75                 	db	117	;'u'
   955  00FED9  72                 	db	114	;'r'
   956  00FEDA  6E                 	db	110	;'n'
   957  00FEDB  73                 	db	115	;'s'
   958  00FEDC  20                 	db	32
   959  00FEDD  64                 	db	100	;'d'
   960  00FEDE  65                 	db	101	;'e'
   961  00FEDF  76                 	db	118	;'v'
   962  00FEE0  69                 	db	105	;'i'
   963  00FEE1  63                 	db	99	;'c'
   964  00FEE2  65                 	db	101	;'e'
   965  00FEE3  20                 	db	32
   966  00FEE4  69                 	db	105	;'i'
   967  00FEE5  64                 	db	100	;'d'
   968  00FEE6  65                 	db	101	;'e'
   969  00FEE7  6E                 	db	110	;'n'
   970  00FEE8  74                 	db	116	;'t'
   971  00FEE9  69                 	db	105	;'i'
   972  00FEEA  66                 	db	102	;'f'
   973  00FEEB  69                 	db	105	;'i'
   974  00FEEC  63                 	db	99	;'c'
   975  00FEED  61                 	db	97	;'a'
   976  00FEEE  74                 	db	116	;'t'
   977  00FEEF  69                 	db	105	;'i'
   978  00FEF0  6F                 	db	111	;'o'
   979  00FEF1  6E                 	db	110	;'n'
   980  00FEF2  0A                 	db	10
   981  00FEF3  0D                 	db	13
   982  00FEF4  20                 	db	32
   983  00FEF5  20                 	db	32
   984  00FEF6  20                 	db	32
   985  00FEF7  48                 	db	72	;'H'
   986  00FEF8  65                 	db	101	;'e'
   987  00FEF9  6C                 	db	108	;'l'
   988  00FEFA  70                 	db	112	;'p'
   989  00FEFB  3A                 	db	58	;':'
   990  00FEFC  20                 	db	32
   991  00FEFD  54                 	db	84	;'T'
   992  00FEFE  68                 	db	104	;'h'
   993  00FEFF  69                 	db	105	;'i'
   994  00FF00  73                 	db	115	;'s'
   995  00FF01  20                 	db	32
   996  00FF02  6D                 	db	109	;'m'
   997  00FF03  65                 	db	101	;'e'
   998  00FF04  73                 	db	115	;'s'
   999  00FF05  73                 	db	115	;'s'
  1000  00FF06  61                 	db	97	;'a'
  1001  00FF07  67                 	db	103	;'g'
  1002  00FF08  65                 	db	101	;'e'
  1003  00FF09  2C                 	db	44
  1004  00FF0A  20                 	db	32
  1005  00FF0B  6C                 	db	108	;'l'
  1006  00FF0C  69                 	db	105	;'i'
  1007  00FF0D  73                 	db	115	;'s'
  1008  00FF0E  74                 	db	116	;'t'
  1009  00FF0F  73                 	db	115	;'s'
  1010  00FF10  20                 	db	32
  1011  00FF11  63                 	db	99	;'c'
  1012  00FF12  6F                 	db	111	;'o'
  1013  00FF13  6D                 	db	109	;'m'
  1014  00FF14  6D                 	db	109	;'m'
  1015  00FF15  61                 	db	97	;'a'
  1016  00FF16  6E                 	db	110	;'n'
  1017  00FF17  64                 	db	100	;'d'
  1018  00FF18  73                 	db	115	;'s'
  1019  00FF19  0A                 	db	10
  1020  00FF1A  0D                 	db	13
  1021  00FF1B  00                 	db	0
  1022  00FF1C                     STR_31:
  1023  00FF1C  20                 	db	32
  1024  00FF1D  20                 	db	32
  1025  00FF1E  20                 	db	32
  1026  00FF1F  20                 	db	32
  1027  00FF20  6D                 	db	109	;'m'
  1028  00FF21  54                 	db	84	;'T'
  1029  00FF22  6F                 	db	111	;'o'
  1030  00FF23  75                 	db	117	;'u'
  1031  00FF24  63                 	db	99	;'c'
  1032  00FF25  68                 	db	104	;'h'
  1033  00FF26  20                 	db	32
  1034  00FF27  54                 	db	84	;'T'
  1035  00FF28  65                 	db	101	;'e'
  1036  00FF29  73                 	db	115	;'s'
  1037  00FF2A  74                 	db	116	;'t'
  1038  00FF2B  20                 	db	32
  1039  00FF2C  42                 	db	66	;'B'
  1040  00FF2D  6F                 	db	111	;'o'
  1041  00FF2E  61                 	db	97	;'a'
  1042  00FF2F  72                 	db	114	;'r'
  1043  00FF30  64                 	db	100	;'d'
  1044  00FF31  2C                 	db	44
  1045  00FF32  20                 	db	32
  1046  00FF33  52                 	db	82	;'R'
  1047  00FF34  45                 	db	69	;'E'
  1048  00FF35  56                 	db	86	;'V'
  1049  00FF36  41                 	db	65	;'A'
  1050  00FF37  00                 	db	0
  1051  00FF38                     STR_16:
  1052  00FF38  20                 	db	32
  1053  00FF39  20                 	db	32
  1054  00FF3A  20                 	db	32
  1055  00FF3B  20                 	db	32
  1056  00FF3C  42                 	db	66	;'B'
  1057  00FF3D  75                 	db	117	;'u'
  1058  00FF3E  74                 	db	116	;'t'
  1059  00FF3F  74                 	db	116	;'t'
  1060  00FF40  6F                 	db	111	;'o'
  1061  00FF41  6E                 	db	110	;'n'
  1062  00FF42  20                 	db	32
  1063  00FF43  30                 	db	48	;'0'
  1064  00FF44  3A                 	db	58	;':'
  1065  00FF45  20                 	db	32
  1066  00FF46  25                 	db	37
  1067  00FF47  64                 	db	100	;'d'
  1068  00FF48  0A                 	db	10
  1069  00FF49  0D                 	db	13
  1070  00FF4A  00                 	db	0
  1071  00FF4B                     STR_17:
  1072  00FF4B  20                 	db	32
  1073  00FF4C  20                 	db	32
  1074  00FF4D  20                 	db	32
  1075  00FF4E  20                 	db	32
  1076  00FF4F  42                 	db	66	;'B'
  1077  00FF50  75                 	db	117	;'u'
  1078  00FF51  74                 	db	116	;'t'
  1079  00FF52  74                 	db	116	;'t'
  1080  00FF53  6F                 	db	111	;'o'
  1081  00FF54  6E                 	db	110	;'n'
  1082  00FF55  20                 	db	32
  1083  00FF56  31                 	db	49	;'1'
  1084  00FF57  3A                 	db	58	;':'
  1085  00FF58  20                 	db	32
  1086  00FF59  25                 	db	37
  1087  00FF5A  64                 	db	100	;'d'
  1088  00FF5B  0A                 	db	10
  1089  00FF5C  0D                 	db	13
  1090  00FF5D  00                 	db	0
  1091  00FF5E                     STR_18:
  1092  00FF5E  20                 	db	32
  1093  00FF5F  20                 	db	32
  1094  00FF60  20                 	db	32
  1095  00FF61  20                 	db	32
  1096  00FF62  42                 	db	66	;'B'
  1097  00FF63  75                 	db	117	;'u'
  1098  00FF64  74                 	db	116	;'t'
  1099  00FF65  74                 	db	116	;'t'
  1100  00FF66  6F                 	db	111	;'o'
  1101  00FF67  6E                 	db	110	;'n'
  1102  00FF68  20                 	db	32
  1103  00FF69  32                 	db	50	;'2'
  1104  00FF6A  3A                 	db	58	;':'
  1105  00FF6B  20                 	db	32
  1106  00FF6C  25                 	db	37
  1107  00FF6D  64                 	db	100	;'d'
  1108  00FF6E  0A                 	db	10
  1109  00FF6F  0D                 	db	13
  1110  00FF70  00                 	db	0
  1111  00FF71                     STR_19:
  1112  00FF71  20                 	db	32
  1113  00FF72  20                 	db	32
  1114  00FF73  20                 	db	32
  1115  00FF74  20                 	db	32
  1116  00FF75  42                 	db	66	;'B'
  1117  00FF76  75                 	db	117	;'u'
  1118  00FF77  74                 	db	116	;'t'
  1119  00FF78  74                 	db	116	;'t'
  1120  00FF79  6F                 	db	111	;'o'
  1121  00FF7A  6E                 	db	110	;'n'
  1122  00FF7B  20                 	db	32
  1123  00FF7C  33                 	db	51	;'3'
  1124  00FF7D  3A                 	db	58	;':'
  1125  00FF7E  20                 	db	32
  1126  00FF7F  25                 	db	37
  1127  00FF80  64                 	db	100	;'d'
  1128  00FF81  0A                 	db	10
  1129  00FF82  0D                 	db	13
  1130  00FF83  00                 	db	0
  1131  00FF84                     STR_20:
  1132  00FF84  20                 	db	32
  1133  00FF85  20                 	db	32
  1134  00FF86  20                 	db	32
  1135  00FF87  20                 	db	32
  1136  00FF88  42                 	db	66	;'B'
  1137  00FF89  75                 	db	117	;'u'
  1138  00FF8A  74                 	db	116	;'t'
  1139  00FF8B  74                 	db	116	;'t'
  1140  00FF8C  6F                 	db	111	;'o'
  1141  00FF8D  6E                 	db	110	;'n'
  1142  00FF8E  20                 	db	32
  1143  00FF8F  34                 	db	52	;'4'
  1144  00FF90  3A                 	db	58	;':'
  1145  00FF91  20                 	db	32
  1146  00FF92  25                 	db	37
  1147  00FF93  64                 	db	100	;'d'
  1148  00FF94  0A                 	db	10
  1149  00FF95  0D                 	db	13
  1150  00FF96  00                 	db	0
  1151  00FF97                     STR_8:
  1152  00FF97  20                 	db	32
  1153  00FF98  20                 	db	32
  1154  00FF99  20                 	db	32
  1155  00FF9A  20                 	db	32
  1156  00FF9B  4C                 	db	76	;'L'
  1157  00FF9C  41                 	db	65	;'A'
  1158  00FF9D  54                 	db	84	;'T'
  1159  00FF9E  46                 	db	70	;'F'
  1160  00FF9F  20                 	db	32
  1161  00FFA0  3D                 	db	61	;'='
  1162  00FFA1  20                 	db	32
  1163  00FFA2  30                 	db	48	;'0'
  1164  00FFA3  78                 	db	120	;'x'
  1165  00FFA4  30                 	db	48	;'0'
  1166  00FFA5  30                 	db	48	;'0'
  1167  00FFA6  0A                 	db	10
  1168  00FFA7  0D                 	db	13
  1169  00FFA8  00                 	db	0
  1170  00FFA9                     STR_14:
  1171  00FFA9  42                 	db	66	;'B'
  1172  00FFAA  75                 	db	117	;'u'
  1173  00FFAB  74                 	db	116	;'t'
  1174  00FFAC  74                 	db	116	;'t'
  1175  00FFAD  6F                 	db	111	;'o'
  1176  00FFAE  6E                 	db	110	;'n'
  1177  00FFAF  20                 	db	32
  1178  00FFB0  53                 	db	83	;'S'
  1179  00FFB1  74                 	db	116	;'t'
  1180  00FFB2  61                 	db	97	;'a'
  1181  00FFB3  74                 	db	116	;'t'
  1182  00FFB4  65                 	db	101	;'e'
  1183  00FFB5  73                 	db	115	;'s'
  1184  00FFB6  3F                 	db	63	;'?'
  1185  00FFB7  00                 	db	0
  1186  00FFB8                     STR_12:
  1187  00FFB8  4C                 	db	76	;'L'
  1188  00FFB9  41                 	db	65	;'A'
  1189  00FFBA  54                 	db	84	;'T'
  1190  00FFBB  46                 	db	70	;'F'
  1191  00FFBC  20                 	db	32
  1192  00FFBD  3D                 	db	61	;'='
  1193  00FFBE  20                 	db	32
  1194  00FFBF  30                 	db	48	;'0'
  1195  00FFC0  78                 	db	120	;'x'
  1196  00FFC1  46                 	db	70	;'F'
  1197  00FFC2  46                 	db	70	;'F'
  1198  00FFC3  0A                 	db	10
  1199  00FFC4  0D                 	db	13
  1200  00FFC5  00                 	db	0
  1201  00FFC6                     STR_10:
  1202  00FFC6  4C                 	db	76	;'L'
  1203  00FFC7  45                 	db	69	;'E'
  1204  00FFC8  44                 	db	68	;'D'
  1205  00FFC9  73                 	db	115	;'s'
  1206  00FFCA  20                 	db	32
  1207  00FFCB  4F                 	db	79	;'O'
  1208  00FFCC  66                 	db	102	;'f'
  1209  00FFCD  66                 	db	102	;'f'
  1210  00FFCE  00                 	db	0
  1211  00FFCF                     STR_6:
  1212  00FFCF  4C                 	db	76	;'L'
  1213  00FFD0  45                 	db	69	;'E'
  1214  00FFD1  44                 	db	68	;'D'
  1215  00FFD2  73                 	db	115	;'s'
  1216  00FFD3  20                 	db	32
  1217  00FFD4  4F                 	db	79	;'O'
  1218  00FFD5  6E                 	db	110	;'n'
  1219  00FFD6  00                 	db	0
  1220  00FFD7                     STR_28:
  1221  00FFD7  2A                 	db	42
  1222  00FFD8  49                 	db	73	;'I'
  1223  00FFD9  44                 	db	68	;'D'
  1224  00FFDA  4E                 	db	78	;'N'
  1225  00FFDB  3F                 	db	63	;'?'
  1226  00FFDC  00                 	db	0
  1227  00FFDD                     STR_25:
  1228  00FFDD  43                 	db	67	;'C'
  1229  00FFDE  6C                 	db	108	;'l'
  1230  00FFDF  65                 	db	101	;'e'
  1231  00FFE0  61                 	db	97	;'a'
  1232  00FFE1  72                 	db	114	;'r'
  1233  00FFE2  00                 	db	0
  1234  00FFE3                     STR_22:
  1235  00FFE3  52                 	db	82	;'R'
  1236  00FFE4  65                 	db	101	;'e'
  1237  00FFE5  73                 	db	115	;'s'
  1238  00FFE6  65                 	db	101	;'e'
  1239  00FFE7  74                 	db	116	;'t'
  1240  00FFE8  00                 	db	0
  1241  00FFE9                     STR_33:
  1242  00FFE9  48                 	db	72	;'H'
  1243  00FFEA  65                 	db	101	;'e'
  1244  00FFEB  6C                 	db	108	;'l'
  1245  00FFEC  70                 	db	112	;'p'
  1246  00FFED  00                 	db	0
  1247  00FFEE                     STR_2:
  1248  00FFEE  1B                 	db	27
  1249  00FFEF  5B                 	db	91	;'['
  1250  00FFF0  32                 	db	50	;'2'
  1251  00FFF1  4A                 	db	74	;'J'
  1252  00FFF2  00                 	db	0
  1253  00FFF3                     STR_29:
  1254  00FFF3  49                 	db	73	;'I'
  1255  00FFF4  44                 	db	68	;'D'
  1256  00FFF5  4E                 	db	78	;'N'
  1257  00FFF6  00                 	db	0
  1258  00FFF7                     STR_3:
  1259  00FFF7  1B                 	db	27
  1260  00FFF8  5B                 	db	91	;'['
  1261  00FFF9  48                 	db	72	;'H'
  1262  00FFFA  00                 	db	0
  1263  00FFFB                     STR_1:
  1264  00FFFB  1B                 	db	27
  1265  00FFFC  5B                 	db	91	;'['
  1266  00FFFD  4B                 	db	75	;'K'
  1267  00FFFE  00                 	db	0
  1268  0000                     
  1269                           ; #config settings
  1270  00FFFF  00                 	db	0	; dummy byte at the end
  1271  0000                     
  1272                           	psect	nvCOMRAM
  1273  00004B                     __pnvCOMRAM:
  1274                           	opt stack 0
  1275  00004B                     _EUSART2_TxDefaultInterruptHandler:
  1276                           	opt stack 0
  1277  00004B                     	ds	3
  1278  00004E                     _eusart2TxBufferRemaining:
  1279                           	opt stack 0
  1280  00004E                     	ds	1
  1281                           
  1282                           	psect	nvBANK0
  1283  0000E1                     __pnvBANK0:
  1284                           	opt stack 0
  1285  0000E1                     _EUSART2_RxDefaultInterruptHandler:
  1286                           	opt stack 0
  1287  0000E1                     	ds	3
  1288  0000                     _ANSELEbits	set	3759
  1289  0000                     _WPUEbits	set	3758
  1290  0000                     _PMD5	set	3665
  1291  0000                     _PMD4	set	3664
  1292  0000                     _PMD3	set	3663
  1293  0000                     _PMD2	set	3662
  1294  0000                     _PMD1	set	3661
  1295  0000                     _PMD0	set	3660
  1296  0000                     _OSCTUNE	set	3656
  1297  0000                     _OSCFRQ	set	3657
  1298  0000                     _OSCEN	set	3655
  1299  0000                     _OSCCON3	set	3653
  1300  0000                     _OSCCON1	set	3651
  1301  0000                     _RC2REG	set	3825
  1302  0000                     _RC2STAbits	set	3829
  1303  0000                     _TX2REG	set	3826
  1304  0000                     _TX2STAbits	set	3830
  1305  0000                     _SP2BRGH	set	3828
  1306  0000                     _SP2BRGL	set	3827
  1307  0000                     _TX2STA	set	3830
  1308  0000                     _RC2STA	set	3829
  1309  0000                     _BAUD2CON	set	3831
  1310  0000                     _PIR1bits	set	3636
  1311  0000                     _PIE1bits	set	3626
  1312  0000                     _PIR3bits	set	3638
  1313  0000                     _PIE3bits	set	3628
  1314  0000                     _IPR1bits	set	3616
  1315  0000                     _IPR3bits	set	3618
  1316  0000                     _RX2PPSbits	set	3601
  1317  0000                     _RG7PPS	set	3721
  1318  0000                     _ODCOND	set	3749
  1319  0000                     _ODCONC	set	3744
  1320  0000                     _ODCONH	set	3775
  1321  0000                     _ODCONB	set	3736
  1322  0000                     _ODCONG	set	3770
  1323  0000                     _ODCONA	set	3728
  1324  0000                     _ODCONF	set	3762
  1325  0000                     _ODCONE	set	3757
  1326  0000                     _WPUH	set	3776
  1327  0000                     _WPUC	set	3745
  1328  0000                     _WPUA	set	3729
  1329  0000                     _WPUG	set	3771
  1330  0000                     _WPUB	set	3737
  1331  0000                     _WPUE	set	3758
  1332  0000                     _WPUF	set	3763
  1333  0000                     _WPUD	set	3750
  1334  0000                     _ANSELA	set	3730
  1335  0000                     _ANSELF	set	3764
  1336  0000                     _ANSELG	set	3772
  1337  0000                     _ANSELE	set	3759
  1338  0000                     _ANSELB	set	3738
  1339  0000                     _ANSELD	set	3751
  1340  0000                     _ADPCH	set	3935
  1341  0000                     _ADPRE	set	3934
  1342  0000                     _ADACQ	set	3932
  1343  0000                     _ADCON3	set	3931
  1344  0000                     _ADCON2	set	3930
  1345  0000                     _ADCON1	set	3929
  1346  0000                     _ADCAP	set	3933
  1347  0000                     _ADREF	set	3928
  1348  0000                     _ADCLK	set	3927
  1349  0000                     _ADFLTR	set	3954
  1350  0000                     _ADACC	set	3952
  1351  0000                     _ADCON0bits	set	3936
  1352  0000                     _ADRPT	set	3942
  1353  0000                     _ADCON0	set	3936
  1354  0000                     _ADSTPTH	set	3945
  1355  0000                     _ADSTPTL	set	3944
  1356  0000                     _ADUTHH	set	3949
  1357  0000                     _ADUTHL	set	3948
  1358  0000                     _ADLTHH	set	3947
  1359  0000                     _ADLTHL	set	3946
  1360  0000                     _TRISEbits	set	3973
  1361  0000                     _LATFbits	set	3966
  1362  0000                     _INTCONbits	set	4082
  1363  0000                     _TRISD	set	3972
  1364  0000                     _TRISC	set	3971
  1365  0000                     _TRISH	set	3976
  1366  0000                     _TRISB	set	3970
  1367  0000                     _TRISG	set	3975
  1368  0000                     _TRISA	set	3969
  1369  0000                     _TRISF	set	3974
  1370  0000                     _TRISE	set	3973
  1371  0000                     _LATH	set	3968
  1372  0000                     _LATC	set	3963
  1373  0000                     _LATG	set	3967
  1374  0000                     _LATB	set	3962
  1375  0000                     _LATF	set	3966
  1376  0000                     _LATA	set	3961
  1377  0000                     _LATD	set	3964
  1378  0000                     _LATE	set	3965
  1379  0000                     _GIE	set	32663
  1380                           
  1381                           	psect	cinit
  1382  011736                     __pcinit:
  1383                           	opt stack 0
  1384  011736                     start_initialization:
  1385                           	opt stack 0
  1386  011736                     __initialization:
  1387                           	opt stack 0
  1388                           
  1389                           ; Initialize objects allocated to BANK0 (12 bytes)
  1390                           ; load TBLPTR registers with __pidataBANK0
  1391  011736  0E40               	movlw	low __pidataBANK0
  1392  011738  6EF6               	movwf	tblptrl,c
  1393  01173A  0E24               	movlw	high __pidataBANK0
  1394  01173C  6EF7               	movwf	tblptrh,c
  1395  01173E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1396  011740  6EF8               	movwf	tblptru,c
  1397  011742  EE00  F0D5         	lfsr	0,__pdataBANK0
  1398  011746  EE10 F00C          	lfsr	1,12
  1399  01174A                     copy_data0:
  1400  01174A  0009               	tblrd		*+
  1401  01174C  CFF5 FFEE          	movff	tablat,postinc0
  1402  011750  50E5               	movf	postdec1,w,c
  1403  011752  50E1               	movf	fsr1l,w,c
  1404  011754  E1FA               	bnz	copy_data0
  1405                           
  1406                           ; Initialize objects allocated to COMRAM (9 bytes)
  1407                           ; load TBLPTR registers with __pidataCOMRAM
  1408  011756  0E76               	movlw	low __pidataCOMRAM
  1409  011758  6EF6               	movwf	tblptrl,c
  1410  01175A  0E24               	movlw	high __pidataCOMRAM
  1411  01175C  6EF7               	movwf	tblptrh,c
  1412  01175E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1413  011760  6EF8               	movwf	tblptru,c
  1414  011762  EE00  F042         	lfsr	0,__pdataCOMRAM
  1415  011766  EE10 F009          	lfsr	1,9
  1416  01176A                     copy_data1:
  1417  01176A  0009               	tblrd		*+
  1418  01176C  CFF5 FFEE          	movff	tablat,postinc0
  1419  011770  50E5               	movf	postdec1,w,c
  1420  011772  50E1               	movf	fsr1l,w,c
  1421  011774  E1FA               	bnz	copy_data1
  1422                           
  1423                           ; Clear objects allocated to BANK2 (64 bytes)
  1424  011776  EE02  F000         	lfsr	0,__pbssBANK2
  1425  01177A  0E40               	movlw	64
  1426  01177C                     clear_0:
  1427  01177C  6AEE               	clrf	postinc0,c
  1428  01177E  06E8               	decf	wreg,f,c
  1429  011780  E1FD               	bnz	clear_0
  1430                           
  1431                           ; Clear objects allocated to BANK1 (208 bytes)
  1432  011782  EE01  F000         	lfsr	0,__pbssBANK1
  1433  011786  0ED0               	movlw	208
  1434  011788                     clear_1:
  1435  011788  6AEE               	clrf	postinc0,c
  1436  01178A  06E8               	decf	wreg,f,c
  1437  01178C  E1FD               	bnz	clear_1
  1438                           
  1439                           ; Clear objects allocated to BANK0 (80 bytes)
  1440  01178E  EE00  F060         	lfsr	0,__pbssBANK0
  1441  011792  0E50               	movlw	80
  1442  011794                     clear_2:
  1443  011794  6AEE               	clrf	postinc0,c
  1444  011796  06E8               	decf	wreg,f,c
  1445  011798  E1FD               	bnz	clear_2
  1446                           
  1447                           ; Clear objects allocated to COMRAM (25 bytes)
  1448  01179A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1449  01179E  0E19               	movlw	25
  1450  0117A0                     clear_3:
  1451  0117A0  6AEE               	clrf	postinc0,c
  1452  0117A2  06E8               	decf	wreg,f,c
  1453  0117A4  E1FD               	bnz	clear_3
  1454  0117A6                     end_of_initialization:
  1455                           	opt stack 0
  1456  0117A6                     __end_of__initialization:
  1457                           	opt stack 0
  1458  0117A6  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1459  0117A8  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1460  0117AA  0100               	movlb	0
  1461  0117AC  EF01  F08B         	goto	_main	;jump to C main() function
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	bssCOMRAM
  1472  000029                     __pbssCOMRAM:
  1473                           	opt stack 0
  1474  000029                     _packet_sample:
  1475                           	opt stack 0
  1476  000029                     	ds	10
  1477  000033                     medianFilter@bufferIndex:
  1478                           	opt stack 0
  1479  000033                     	ds	5
  1480  000038                     _sample_delay:
  1481                           	opt stack 0
  1482  000038                     	ds	1
  1483  000039                     _scanInterrupted:
  1484                           	opt stack 0
  1485  000039                     	ds	1
  1486  00003A                     _sampling_flag:
  1487                           	opt stack 0
  1488  00003A                     	ds	1
  1489  00003B                     _currentScanSensor:
  1490                           	opt stack 0
  1491  00003B                     	ds	1
  1492  00003C                     _mtouch_time_toScan:
  1493                           	opt stack 0
  1494  00003C                     	ds	1
  1495  00003D                     _eusart2RxCount:
  1496                           	opt stack 0
  1497  00003D                     	ds	1
  1498  00003E                     _eusart2RxTail:
  1499                           	opt stack 0
  1500  00003E                     	ds	1
  1501  00003F                     _eusart2RxHead:
  1502                           	opt stack 0
  1503  00003F                     	ds	1
  1504  000040                     _eusart2TxTail:
  1505                           	opt stack 0
  1506  000040                     	ds	1
  1507  000041                     _eusart2TxHead:
  1508                           	opt stack 0
  1509  000041                     	ds	1
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	dataCOMRAM
  1520  000042                     __pdataCOMRAM:
  1521                           	opt stack 0
  1522  000042                     _callback_notPressed:
  1523                           	opt stack 0
  1524  000042                     	ds	3
  1525  000045                     _callback_pressed:
  1526                           	opt stack 0
  1527  000045                     	ds	3
  1528  000048                     _callback_sampled:
  1529                           	opt stack 0
  1530  000048                     	ds	3
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1l	equ	0xFE1
  1539                           
  1540                           	psect	bssBANK0
  1541  000060                     __pbssBANK0:
  1542                           	opt stack 0
  1543  000060                     _sensor_medianBuffer:
  1544                           	opt stack 0
  1545  000060                     	ds	30
  1546  00007E                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:
  1547                           	opt stack 0
  1548  00007E                     	ds	3
  1549  000081                     _freq_index:
  1550                           	opt stack 0
  1551  000081                     	ds	1
  1552  000082                     _eusart2RxStringReady:
  1553                           	opt stack 0
  1554  000082                     	ds	1
  1555  000083                     _mtouch_sensor:
  1556                           	opt stack 0
  1557  000083                     	ds	45
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           postdec1	equ	0xFE5
  1565                           fsr1l	equ	0xFE1
  1566                           
  1567                           	psect	dataBANK0
  1568  0000D5                     __pdataBANK0:
  1569                           	opt stack 0
  1570  0000D5                     _Button_StateMachine:
  1571                           	opt stack 0
  1572  0000D5                     	ds	9
  1573  0000DE                     _freq_hop:
  1574                           	opt stack 0
  1575  0000DE                     	ds	3
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585                           	psect	bssBANK1
  1586  000100                     __pbssBANK1:
  1587                           	opt stack 0
  1588  000100                     _eusart2RxBuffer:
  1589                           	opt stack 0
  1590  000100                     	ds	64
  1591  000140                     _mtouch_button:
  1592                           	opt stack 0
  1593  000140                     	ds	80
  1594  000190                     _line:
  1595                           	opt stack 0
  1596  000190                     	ds	64
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1l	equ	0xFE1
  1605                           
  1606                           	psect	bssBANK2
  1607  000200                     __pbssBANK2:
  1608                           	opt stack 0
  1609  000200                     _eusart2TxBuffer:
  1610                           	opt stack 0
  1611  000200                     	ds	64
  1612                           tblptru	equ	0xFF8
  1613                           tblptrh	equ	0xFF7
  1614                           tblptrl	equ	0xFF6
  1615                           tablat	equ	0xFF5
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postdec1	equ	0xFE5
  1619                           fsr1l	equ	0xFE1
  1620                           
  1621                           	psect	cstackBANK0
  1622  0000B0                     __pcstackBANK0:
  1623                           	opt stack 0
  1624  0000B0                     ?_strlen:
  1625                           	opt stack 0
  1626  0000B0                     ?_strcmp:
  1627                           	opt stack 0
  1628  0000B0                     ?_abs:
  1629                           	opt stack 0
  1630  0000B0                     ?_medianFilter:
  1631                           	opt stack 0
  1632  0000B0                     ?_MTOUCH_Sensor_RawSample_Get:
  1633                           	opt stack 0
  1634  0000B0                     ?___lwdiv:
  1635                           	opt stack 0
  1636  0000B0                     EUSART2_Read@readValue:
  1637                           	opt stack 0
  1638  0000B0                     EUSART2_Write@txData:
  1639                           	opt stack 0
  1640  0000B0                     MTOUCH_needReburst@needReburst:
  1641                           	opt stack 0
  1642  0000B0                     Sensor_SetTrisBit@TrisBit:
  1643                           	opt stack 0
  1644  0000B0                     MTOUCH_Sensor_Enable@sensor:
  1645                           	opt stack 0
  1646  0000B0                     MTOUCH_Sensor_isEnabled@sensor:
  1647                           	opt stack 0
  1648  0000B0                     MTOUCH_Sensor_Calibrate@sensor:
  1649                           	opt stack 0
  1650  0000B0                     MTOUCH_Sensor_isCalibrated@sensor:
  1651                           	opt stack 0
  1652  0000B0                     MTOUCH_Sensor_wasSampled@sensor:
  1653                           	opt stack 0
  1654  0000B0                     MTOUCH_Button_State_Get@name:
  1655                           	opt stack 0
  1656  0000B0                     Sensor_isEnabled@sensor:
  1657                           	opt stack 0
  1658  0000B0                     Sensor_setActive@sensor:
  1659                           	opt stack 0
  1660  0000B0                     Sensor_setInactive@sensor:
  1661                           	opt stack 0
  1662  0000B0                     Sensor_isCalibrated@sensor:
  1663                           	opt stack 0
  1664  0000B0                     Sensor_isCalibratingAcqTime@sensor:
  1665                           	opt stack 0
  1666  0000B0                     Sensor_Sampled_Reset@sensor:
  1667                           	opt stack 0
  1668  0000B0                     Button_Tick_helper@button:
  1669                           	opt stack 0
  1670  0000B0                     Button_Deviation_Update@button:
  1671                           	opt stack 0
  1672  0000B0                     Button_Baseline_Update@button:
  1673                           	opt stack 0
  1674  0000B0                     abs@a:
  1675                           	opt stack 0
  1676  0000B0                     ___lwdiv@dividend:
  1677                           	opt stack 0
  1678  0000B0                     memcpy@d1:
  1679                           	opt stack 0
  1680  0000B0                     strcmp@s1:
  1681                           	opt stack 0
  1682  0000B0                     strlen@s:
  1683                           	opt stack 0
  1684  0000B0                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1685                           	opt stack 0
  1686  0000B0                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x0
  1690  0000B0                     	ds	1
  1691  0000B1                     putch@txData:
  1692                           	opt stack 0
  1693  0000B1                     Sensor_SetTrisBit@sensor:
  1694                           	opt stack 0
  1695  0000B1                     MTOUCH_Button_Initialize@name:
  1696                           	opt stack 0
  1697  0000B1                     MTOUCH_Button_isPressed@name:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x1
  1701  0000B1                     	ds	1
  1702  0000B2                     ??_strlen:
  1703  0000B2                     ??_Sensor_scheduleNextScan:
  1704  0000B2                     ??_abs:
  1705  0000B2                     ??_medianFilter:
  1706  0000B2                     ??_Button_Deviation_Update:
  1707  0000B2                     ??_Button_Baseline_Update:
  1708  0000B2                     MTOUCH_Sensor_Initialize@sensor:
  1709                           	opt stack 0
  1710  0000B2                     MTOUCH_Sensor_RawSample_Get@name:
  1711                           	opt stack 0
  1712  0000B2                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
  1713                           	opt stack 0
  1714  0000B2                     MTOUCH_Button_Initialize@button:
  1715                           	opt stack 0
  1716  0000B2                     ___lwdiv@divisor:
  1717                           	opt stack 0
  1718  0000B2                     memcpy@s1:
  1719                           	opt stack 0
  1720  0000B2                     strcmp@s2:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x2
  1724  0000B2                     	ds	1
  1725  0000B3                     Button_Reading_Update_Helper@button:
  1726                           	opt stack 0
  1727  0000B3                     Button_Baseline_Initialize@button:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x3
  1731  0000B3                     	ds	1
  1732  0000B4                     ??_strcmp:
  1733  0000B4                     ??_Sensor_FrequencyHopping_Autotune_Process:
  1734  0000B4                     Sensor_scheduleNextScan@state:
  1735                           	opt stack 0
  1736  0000B4                     MTOUCH_Button_Tick@i:
  1737                           	opt stack 0
  1738  0000B4                     ___lwdiv@counter:
  1739                           	opt stack 0
  1740  0000B4                     memcpy@n:
  1741                           	opt stack 0
  1742  0000B4                     strlen@cp:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0x4
  1746  0000B4                     	ds	1
  1747  0000B5                     ??_Button_Baseline_Initialize:
  1748  0000B5                     ??_Button_Reading_Update_Helper:
  1749  0000B5                     Sensor_scheduleNextScan@skipScan:
  1750                           	opt stack 0
  1751  0000B5                     strcmp@r:
  1752                           	opt stack 0
  1753  0000B5                     ___lwdiv@quotient:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x5
  1757  0000B5                     	ds	1
  1758  0000B6                     medianFilter@sensor:
  1759                           	opt stack 0
  1760  0000B6                     memcpy@tmp:
  1761                           	opt stack 0
  1762  0000B6                     Sensor_scheduleNextScan@sensor:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x6
  1766  0000B6                     	ds	1
  1767  0000B7                     ?___lwmod:
  1768                           	opt stack 0
  1769  0000B7                     Sensor_RawSample_Update@sensor:
  1770                           	opt stack 0
  1771  0000B7                     Button_Reading_Update@button:
  1772                           	opt stack 0
  1773  0000B7                     ___lwmod@dividend:
  1774                           	opt stack 0
  1775  0000B7                     memcpy@d:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x7
  1779  0000B7                     	ds	1
  1780  0000B8                     Button_Deviation_Update@deviation:
  1781                           	opt stack 0
  1782                           
  1783                           ; 4 bytes @ 0x8
  1784  0000B8                     	ds	1
  1785  0000B9                     Sensor_RawSample_Update@result:
  1786                           	opt stack 0
  1787  0000B9                     Button_State_Initializing@button:
  1788                           	opt stack 0
  1789  0000B9                     Button_State_NotPressed@button:
  1790                           	opt stack 0
  1791  0000B9                     Button_State_Pressed@button:
  1792                           	opt stack 0
  1793  0000B9                     ___lwmod@divisor:
  1794                           	opt stack 0
  1795  0000B9                     memcpy@s:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x9
  1799  0000B9                     	ds	1
  1800  0000BA                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0xA
  1804  0000BA                     	ds	1
  1805  0000BB                     ??_Button_State_Initializing:
  1806  0000BB                     ??_Button_State_NotPressed:
  1807  0000BB                     ??_Button_State_Pressed:
  1808  0000BB                     ??_Sensor_postAcquisitionProcess:
  1809  0000BB                     MTOUCH_Sensor_InitializeAll@sensor:
  1810                           	opt stack 0
  1811  0000BB                     MTOUCH_Button_InitializeAll@button:
  1812                           	opt stack 0
  1813  0000BB                     ___lwmod@counter:
  1814                           	opt stack 0
  1815  0000BB                     Sensor_FrequencyHopping_Autotune_Process@variance:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0xB
  1819  0000BB                     	ds	1
  1820  0000BC                     ?_printf:
  1821                           	opt stack 0
  1822  0000BC                     printf@f:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0xC
  1826  0000BC                     	ds	1
  1827  0000BD                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0xD
  1831  0000BD                     	ds	2
  1832  0000BF                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:
  1833                           	opt stack 0
  1834                           
  1835                           ; 1 bytes @ 0xF
  1836  0000BF                     	ds	1
  1837  0000C0                     ??_printf:
  1838  0000C0                     ??_Button_Service:
  1839  0000C0                     Sensor_FrequencyHopping_Autotune_Process@sensor:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x10
  1843  0000C0                     	ds	1
  1844  0000C1                     Sensor_postAcquisitionProcess@name:
  1845                           	opt stack 0
  1846  0000C1                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:
  1847                           	opt stack 0
  1848  0000C1                     Button_Service@name:
  1849                           	opt stack 0
  1850  0000C1                     printf@ap:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x11
  1854  0000C1                     	ds	1
  1855  0000C2                     Sensor_postAcquisitionProcess@sensor:
  1856                           	opt stack 0
  1857  0000C2                     Button_Service@button:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x12
  1861  0000C2                     	ds	1
  1862  0000C3                     printf@flag:
  1863                           	opt stack 0
  1864                           
  1865                           ; 1 bytes @ 0x13
  1866  0000C3                     	ds	1
  1867  0000C4                     Sensor_FrequencyHopping@sensor:
  1868                           	opt stack 0
  1869  0000C4                     MTOUCH_Button_ServiceAll@button:
  1870                           	opt stack 0
  1871  0000C4                     printf@prec:
  1872                           	opt stack 0
  1873                           
  1874                           ; 1 bytes @ 0x14
  1875  0000C4                     	ds	1
  1876  0000C5                     MTOUCH_Sensor_SampleAll@sensor:
  1877                           	opt stack 0
  1878  0000C5                     printf@val:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x15
  1882  0000C5                     	ds	1
  1883  0000C6                     
  1884                           ; 1 bytes @ 0x16
  1885  0000C6                     	ds	1
  1886  0000C7                     printf@c:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0x17
  1890  0000C7                     	ds	1
  1891  0000C8                     ringBufferLUT@line:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x18
  1895  0000C8                     	ds	2
  1896  0000CA                     ??_ringBufferLUT:
  1897                           
  1898                           ; 1 bytes @ 0x1A
  1899  0000CA                     	ds	1
  1900  0000CB                     ??_ringBufferPull:
  1901                           
  1902                           ; 1 bytes @ 0x1B
  1903  0000CB                     	ds	3
  1904  0000CE                     ringBufferPull@charNumber:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x1E
  1908  0000CE                     	ds	2
  1909  0000D0                     ringBufferPull@index_724:
  1910                           	opt stack 0
  1911                           
  1912                           ; 2 bytes @ 0x20
  1913  0000D0                     	ds	2
  1914  0000D2                     ringBufferPull@index:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x22
  1918  0000D2                     	ds	2
  1919  0000D4                     ??_main:
  1920                           
  1921                           ; 1 bytes @ 0x24
  1922  0000D4                     	ds	1
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           postdec1	equ	0xFE5
  1930                           fsr1l	equ	0xFE1
  1931                           
  1932                           	psect	cstackCOMRAM
  1933  000001                     __pcstackCOMRAM:
  1934                           	opt stack 0
  1935  000001                     ?i2_abs:
  1936                           	opt stack 0
  1937  000001                     ?i2___lwdiv:
  1938                           	opt stack 0
  1939  000001                     i2EUSART2_Write@txData:
  1940                           	opt stack 0
  1941  000001                     i2Sensor_SetTrisBit@TrisBit:
  1942                           	opt stack 0
  1943  000001                     i2MTOUCH_Sensor_isEnabled@sensor:
  1944                           	opt stack 0
  1945  000001                     i2MTOUCH_Sensor_wasSampled@sensor:
  1946                           	opt stack 0
  1947  000001                     Sensor_setCalibrated@sensor:
  1948                           	opt stack 0
  1949  000001                     Sensor_setCalibratAcqTime@sensor:
  1950                           	opt stack 0
  1951  000001                     Sensor_setSampled@sensor:
  1952                           	opt stack 0
  1953  000001                     i2Sensor_isCalibrated@sensor:
  1954                           	opt stack 0
  1955  000001                     i2Sensor_isCalibratingAcqTime@sensor:
  1956                           	opt stack 0
  1957  000001                     i2abs@a:
  1958                           	opt stack 0
  1959  000001                     i2___lwdiv@dividend:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x0
  1963  000001                     	ds	1
  1964  000002                     i2putch@txData:
  1965                           	opt stack 0
  1966  000002                     i2Sensor_SetTrisBit@sensor:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x1
  1970  000002                     	ds	1
  1971  000003                     ??i2_Sensor_scheduleNextScan:
  1972  000003                     ??i2_abs:
  1973  000003                     i2___lwdiv@divisor:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x2
  1977  000003                     	ds	2
  1978  000005                     i2Sensor_scheduleNextScan@state:
  1979                           	opt stack 0
  1980  000005                     Sensor_autoCalibration@sensor:
  1981                           	opt stack 0
  1982  000005                     i2___lwdiv@quotient:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x4
  1986  000005                     	ds	1
  1987  000006                     i2Sensor_scheduleNextScan@skipScan:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x5
  1991  000006                     	ds	1
  1992  000007                     ??_Sensor_autoCalibration:
  1993  000007                     i2___lwdiv@counter:
  1994                           	opt stack 0
  1995  000007                     i2Sensor_scheduleNextScan@sensor:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x6
  1999  000007                     	ds	1
  2000  000008                     ?i2___lwmod:
  2001                           	opt stack 0
  2002  000008                     i2___lwmod@dividend:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x7
  2006  000008                     	ds	2
  2007  00000A                     i2___lwmod@divisor:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x9
  2011  00000A                     	ds	2
  2012  00000C                     i2___lwmod@counter:
  2013                           	opt stack 0
  2014                           
  2015                           ; 1 bytes @ 0xB
  2016  00000C                     	ds	1
  2017  00000D                     ?i2_printf:
  2018                           	opt stack 0
  2019  00000D                     Sensor_autoCalibration@name:
  2020                           	opt stack 0
  2021  00000D                     i2printf@f:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0xC
  2025  00000D                     	ds	1
  2026  00000E                     MTOUCH_Sensor_Service@sensor:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0xD
  2030  00000E                     	ds	1
  2031  00000F                     ??i2_printf:
  2032                           
  2033                           ; 1 bytes @ 0xE
  2034  00000F                     	ds	1
  2035  000010                     i2printf@ap:
  2036                           	opt stack 0
  2037                           
  2038                           ; 2 bytes @ 0xF
  2039  000010                     	ds	2
  2040  000012                     i2printf@flag:
  2041                           	opt stack 0
  2042                           
  2043                           ; 1 bytes @ 0x11
  2044  000012                     	ds	1
  2045  000013                     i2printf@prec:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x12
  2049  000013                     	ds	1
  2050  000014                     i2printf@val:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x13
  2054  000014                     	ds	2
  2055  000016                     i2printf@c:
  2056                           	opt stack 0
  2057                           
  2058                           ; 1 bytes @ 0x15
  2059  000016                     	ds	1
  2060  000017                     ??_INTERRUPT_InterruptManagerHigh:
  2061                           
  2062                           ; 1 bytes @ 0x16
  2063  000017                     	ds	18
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postdec1	equ	0xFE5
  2071                           fsr1l	equ	0xFE1
  2072                           
  2073 ;;
  2074 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2075 ;;
  2076 ;; *************** function _main *****************
  2077 ;; Defined at:
  2078 ;;		line 58 in file "main.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;		None
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2096 ;;Total ram usage:        1 bytes
  2097 ;; Hardware stack levels required when called:   11
  2098 ;; This function calls:
  2099 ;;		_MTOUCH_Button_State_Get
  2100 ;;		_MTOUCH_Service_Mainloop
  2101 ;;		_SYSTEM_Initialize
  2102 ;;		_printResetMessage
  2103 ;;		_ringBufferPull
  2104 ;; This function is called by:
  2105 ;;		Startup code after reset
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text0
  2110  011602                     __ptext0:
  2111                           	opt stack 0
  2112  011602                     _main:
  2113                           	opt stack 20
  2114                           
  2115                           ;main.c: 61: SYSTEM_Initialize();
  2116                           
  2117                           ;incstack = 0
  2118  011602  EC87  F091         	call	_SYSTEM_Initialize	;wreg free
  2119                           
  2120                           ;main.c: 68: (INTCONbits.GIEH = 1);
  2121  011606  8EF2               	bsf	intcon,7,c	;volatile
  2122                           
  2123                           ;main.c: 71: (INTCONbits.GIEL = 1);
  2124  011608  8CF2               	bsf	intcon,6,c	;volatile
  2125                           
  2126                           ;main.c: 74: printResetMessage();
  2127  01160A  EC3C  F08F         	call	_printResetMessage	;wreg free
  2128  01160E                     
  2129                           ;main.c: 77: {
  2130                           ;main.c: 79: if (eusart2RxStringReady) {
  2131  01160E  0100               	movlb	0	; () banked
  2132  011610  5182               	movf	_eusart2RxStringReady& (0+255),w,b	;volatile
  2133  011612  A4D8               	btfss	status,2,c
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;main.c: 80: ringBufferPull();
  2137  011614  EC13  F087         	call	_ringBufferPull	;wreg free
  2138                           
  2139                           ;main.c: 81: }
  2140                           ;main.c: 84: MTOUCH_Service_Mainloop();
  2141  011618  ECD1  F090         	call	_MTOUCH_Service_Mainloop	;wreg free
  2142                           
  2143                           ;main.c: 87: LATFbits.LATF0 = ~MTOUCH_Button_State_Get(Button0);
  2144  01161C  0E00               	movlw	0
  2145  01161E  EC92  F090         	call	_MTOUCH_Button_State_Get
  2146  011622  0AFF               	xorlw	255
  2147  011624  0100               	movlb	0	; () banked
  2148  011626  6FD4               	movwf	??_main& (0+255),b
  2149  011628  507E               	movf	3966,w,c	;volatile
  2150  01162A  19D4               	xorwf	??_main& (0+255),w,b
  2151  01162C  0BFE               	andlw	-2
  2152  01162E  19D4               	xorwf	??_main& (0+255),w,b
  2153  011630  6E7E               	movwf	3966,c	;volatile
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;main.c: 88: LATFbits.LATF1 = ~MTOUCH_Button_State_Get(Button1);
  2157  011632  0E01               	movlw	1
  2158  011634  EC92  F090         	call	_MTOUCH_Button_State_Get
  2159  011638  0AFF               	xorlw	255
  2160  01163A  0100               	movlb	0	; () banked
  2161  01163C  6FD4               	movwf	??_main& (0+255),b
  2162  01163E  47D4               	rlncf	??_main& (0+255),f,b
  2163  011640  507E               	movf	3966,w,c	;volatile
  2164  011642  19D4               	xorwf	??_main& (0+255),w,b
  2165  011644  0BFD               	andlw	-3
  2166  011646  19D4               	xorwf	??_main& (0+255),w,b
  2167  011648  6E7E               	movwf	3966,c	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 89: LATFbits.LATF2 = ~MTOUCH_Button_State_Get(Button2);
  2171  01164A  0E02               	movlw	2
  2172  01164C  EC92  F090         	call	_MTOUCH_Button_State_Get
  2173  011650  0AFF               	xorlw	255
  2174  011652  0100               	movlb	0	; () banked
  2175  011654  6FD4               	movwf	??_main& (0+255),b
  2176  011656  47D4               	rlncf	??_main& (0+255),f,b
  2177  011658  47D4               	rlncf	??_main& (0+255),f,b
  2178  01165A  507E               	movf	3966,w,c	;volatile
  2179  01165C  19D4               	xorwf	??_main& (0+255),w,b
  2180  01165E  0BFB               	andlw	-5
  2181  011660  19D4               	xorwf	??_main& (0+255),w,b
  2182  011662  6E7E               	movwf	3966,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 90: LATFbits.LATF3 = ~MTOUCH_Button_State_Get(Button3);
  2186  011664  0E03               	movlw	3
  2187  011666  EC92  F090         	call	_MTOUCH_Button_State_Get
  2188  01166A  0AFF               	xorlw	255
  2189  01166C  0100               	movlb	0	; () banked
  2190  01166E  6FD4               	movwf	??_main& (0+255),b
  2191  011670  47D4               	rlncf	??_main& (0+255),f,b
  2192  011672  47D4               	rlncf	??_main& (0+255),f,b
  2193  011674  47D4               	rlncf	??_main& (0+255),f,b
  2194  011676  507E               	movf	3966,w,c	;volatile
  2195  011678  19D4               	xorwf	??_main& (0+255),w,b
  2196  01167A  0BF7               	andlw	-9
  2197  01167C  19D4               	xorwf	??_main& (0+255),w,b
  2198  01167E  6E7E               	movwf	3966,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;main.c: 91: LATFbits.LATF4 = ~MTOUCH_Button_State_Get(Button4);
  2202  011680  0E04               	movlw	4
  2203  011682  EC92  F090         	call	_MTOUCH_Button_State_Get
  2204  011686  0AFF               	xorlw	255
  2205  011688  0100               	movlb	0	; () banked
  2206  01168A  6FD4               	movwf	??_main& (0+255),b
  2207  01168C  3BD4               	swapf	??_main& (0+255),f,b
  2208  01168E  507E               	movf	3966,w,c	;volatile
  2209  011690  19D4               	xorwf	??_main& (0+255),w,b
  2210  011692  0BEF               	andlw	-17
  2211  011694  19D4               	xorwf	??_main& (0+255),w,b
  2212  011696  6E7E               	movwf	3966,c	;volatile
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 117: __nop();
  2216  011698  F000               	nop	
  2217  01169A  D7B9               	goto	l305
  2218  01169C                     __end_of_main:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           intcon	equ	0xFF2
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1l	equ	0xFE1
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _ringBufferPull *****************
  2232 ;; Defined at:
  2233 ;;		line 8 in file "ring_buffer_interface.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  index           2   32[BANK0 ] int 
  2238 ;;  index           2   34[BANK0 ] int 
  2239 ;;  charNumber      2   30[BANK0 ] int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2250 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2251 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2252 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2253 ;;Total ram usage:        9 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    9
  2256 ;; This function calls:
  2257 ;;		_EUSART2_Read
  2258 ;;		_ringBufferLUT
  2259 ;;		_strlen
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text1
  2266  010E26                     __ptext1:
  2267                           	opt stack 0
  2268  010E26                     _ringBufferPull:
  2269                           	opt stack 21
  2270                           
  2271                           ;ring_buffer_interface.c: 10: int charNumber = eusart2RxCount;
  2272                           
  2273                           ;incstack = 0
  2274  010E26  C03D  F0CE         	movff	_eusart2RxCount,ringBufferPull@charNumber	;volatile
  2275  010E2A  0100               	movlb	0	; () banked
  2276  010E2C  6BCF               	clrf	(ringBufferPull@charNumber+1)& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;ring_buffer_interface.c: 13: for (int index = 0; index < 64; index++) {
  2280  010E2E  0E00               	movlw	0
  2281  010E30  6FD3               	movwf	(ringBufferPull@index+1)& (0+255),b
  2282  010E32  0E00               	movlw	0
  2283  010E34  6FD2               	movwf	ringBufferPull@index& (0+255),b
  2284  010E36                     l5137:
  2285                           
  2286                           ; BSR set to: 0
  2287  010E36  BFD3               	btfsc	(ringBufferPull@index+1)& (0+255),7,b
  2288  010E38  D006               	goto	l334
  2289  010E3A  51D3               	movf	(ringBufferPull@index+1)& (0+255),w,b
  2290  010E3C  E10F               	bnz	l5147
  2291  010E3E  0E40               	movlw	64
  2292  010E40  5DD2               	subwf	ringBufferPull@index& (0+255),w,b
  2293  010E42  B0D8               	btfsc	status,0,c
  2294  010E44  D00B               	goto	u5670
  2295  010E46                     l334:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;ring_buffer_interface.c: 15: line[index] = '\0';
  2299                           
  2300                           ; BSR set to: 0
  2301  010E46  0E90               	movlw	low _line
  2302  010E48  25D2               	addwf	ringBufferPull@index& (0+255),w,b
  2303  010E4A  6ED9               	movwf	fsr2l,c
  2304  010E4C  0E01               	movlw	high _line
  2305  010E4E  21D3               	addwfc	(ringBufferPull@index+1)& (0+255),w,b
  2306  010E50  6EDA               	movwf	fsr2h,c
  2307  010E52  0E00               	movlw	0
  2308  010E54  6EDF               	movwf	indf2,c
  2309                           
  2310                           ; BSR set to: 0
  2311  010E56  4BD2               	infsnz	ringBufferPull@index& (0+255),f,b
  2312  010E58  2BD3               	incf	(ringBufferPull@index+1)& (0+255),f,b
  2313  010E5A  D7ED               	goto	l5137
  2314  010E5C                     u5670:
  2315  010E5C                     l5147:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;ring_buffer_interface.c: 17: }
  2319                           ;ring_buffer_interface.c: 20: for(int index = 0; index < charNumber; index++){
  2320  010E5C  0E00               	movlw	0
  2321  010E5E  6FD1               	movwf	(ringBufferPull@index_724+1)& (0+255),b
  2322  010E60  0E00               	movlw	0
  2323  010E62  6FD0               	movwf	ringBufferPull@index_724& (0+255),b
  2324  010E64  D00E               	goto	l336
  2325  010E66                     
  2326                           ; BSR set to: 0
  2327                           ;ring_buffer_interface.c: 22: line[index] = EUSART2_Read();
  2328                           
  2329                           ; BSR set to: 0
  2330  010E66  EC00  F08F         	call	_EUSART2_Read	;wreg free
  2331  010E6A  0100               	movlb	0	; () banked
  2332  010E6C  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2333  010E6E  0E90               	movlw	low _line
  2334  010E70  25D0               	addwf	ringBufferPull@index_724& (0+255),w,b
  2335  010E72  6ED9               	movwf	fsr2l,c
  2336  010E74  0E01               	movlw	high _line
  2337  010E76  21D1               	addwfc	(ringBufferPull@index_724+1)& (0+255),w,b
  2338  010E78  6EDA               	movwf	fsr2h,c
  2339  010E7A  C0CB  FFDF         	movff	??_ringBufferPull,indf2
  2340                           
  2341                           ; BSR set to: 0
  2342  010E7E  4BD0               	infsnz	ringBufferPull@index_724& (0+255),f,b
  2343  010E80  2BD1               	incf	(ringBufferPull@index_724+1)& (0+255),f,b
  2344  010E82                     l336:
  2345                           
  2346                           ; BSR set to: 0
  2347                           
  2348                           ; BSR set to: 0
  2349  010E82  51CE               	movf	ringBufferPull@charNumber& (0+255),w,b
  2350  010E84  5DD0               	subwf	ringBufferPull@index_724& (0+255),w,b
  2351  010E86  51D1               	movf	(ringBufferPull@index_724+1)& (0+255),w,b
  2352  010E88  0A80               	xorlw	128
  2353  010E8A  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2354  010E8C  51CF               	movf	(ringBufferPull@charNumber+1)& (0+255),w,b
  2355  010E8E  0A80               	xorlw	128
  2356  010E90  59CB               	subwfb	??_ringBufferPull& (0+255),w,b
  2357  010E92  A0D8               	btfss	status,0,c
  2358  010E94  D7E8               	goto	l337
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;ring_buffer_interface.c: 24: }
  2362                           ;ring_buffer_interface.c: 27: eusart2RxTail = eusart2RxHead;
  2363  010E96  C03F  F03E         	movff	_eusart2RxHead,_eusart2RxTail	;volatile
  2364                           
  2365                           ;ring_buffer_interface.c: 30: while((line[strlen(line) - 1] == (int) '\n') ||
  2366                           ;ring_buffer_interface.c: 31: (line[strlen(line) - 1] == (int) '\r')) {
  2367  010E9A  D017               	goto	l339
  2368  010E9C                     
  2369                           ; BSR set to: 0
  2370                           ;ring_buffer_interface.c: 34: line[strlen(line) - 1] = '\0';
  2371                           
  2372                           ; BSR set to: 0
  2373  010E9C  0EFF               	movlw	255
  2374  010E9E  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2375  010EA0  0EFF               	movlw	255
  2376  010EA2  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2377  010EA4  0E90               	movlw	low _line
  2378  010EA6  6FB0               	movwf	strlen@s& (0+255),b
  2379  010EA8  0E01               	movlw	high _line
  2380  010EAA  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2381  010EAC  ECA3  F08E         	call	_strlen	;wreg free
  2382  010EB0  0100               	movlb	0	; () banked
  2383  010EB2  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2384  010EB4  27B0               	addwf	?_strlen& (0+255),f,b
  2385  010EB6  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2386  010EB8  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2387  010EBA  0E90               	movlw	low _line
  2388  010EBC  25B0               	addwf	?_strlen& (0+255),w,b
  2389  010EBE  6ED9               	movwf	fsr2l,c
  2390  010EC0  0E01               	movlw	high _line
  2391  010EC2  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2392  010EC4  6EDA               	movwf	fsr2h,c
  2393  010EC6  0E00               	movlw	0
  2394  010EC8  6EDF               	movwf	indf2,c
  2395  010ECA                     l339:
  2396                           
  2397                           ; BSR set to: 0
  2398  010ECA  0EFF               	movlw	255
  2399  010ECC  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2400  010ECE  0EFF               	movlw	255
  2401  010ED0  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2402  010ED2  0E90               	movlw	low _line
  2403  010ED4  6FB0               	movwf	strlen@s& (0+255),b
  2404  010ED6  0E01               	movlw	high _line
  2405  010ED8  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2406  010EDA  ECA3  F08E         	call	_strlen	;wreg free
  2407  010EDE  0100               	movlb	0	; () banked
  2408  010EE0  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2409  010EE2  27B0               	addwf	?_strlen& (0+255),f,b
  2410  010EE4  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2411  010EE6  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2412  010EE8  0E90               	movlw	low _line
  2413  010EEA  25B0               	addwf	?_strlen& (0+255),w,b
  2414  010EEC  6ED9               	movwf	fsr2l,c
  2415  010EEE  0E01               	movlw	high _line
  2416  010EF0  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2417  010EF2  6EDA               	movwf	fsr2h,c
  2418  010EF4  0E0A               	movlw	10
  2419  010EF6  18DE               	xorwf	postinc2,w,c
  2420  010EF8  B4D8               	btfsc	status,2,c
  2421  010EFA  D7D0               	goto	l340
  2422                           
  2423                           ; BSR set to: 0
  2424  010EFC  0EFF               	movlw	255
  2425  010EFE  6FCB               	movwf	??_ringBufferPull& (0+255),b
  2426  010F00  0EFF               	movlw	255
  2427  010F02  6FCC               	movwf	(??_ringBufferPull+1)& (0+255),b
  2428  010F04  0E90               	movlw	low _line
  2429  010F06  6FB0               	movwf	strlen@s& (0+255),b
  2430  010F08  0E01               	movlw	high _line
  2431  010F0A  6FB1               	movwf	(strlen@s+1)& (0+255),b
  2432  010F0C  ECA3  F08E         	call	_strlen	;wreg free
  2433  010F10  0100               	movlb	0	; () banked
  2434  010F12  51CB               	movf	??_ringBufferPull& (0+255),w,b
  2435  010F14  27B0               	addwf	?_strlen& (0+255),f,b
  2436  010F16  51CC               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2437  010F18  23B1               	addwfc	(?_strlen+1)& (0+255),f,b
  2438  010F1A  0E90               	movlw	low _line
  2439  010F1C  25B0               	addwf	?_strlen& (0+255),w,b
  2440  010F1E  6ED9               	movwf	fsr2l,c
  2441  010F20  0E01               	movlw	high _line
  2442  010F22  21B1               	addwfc	(?_strlen+1)& (0+255),w,b
  2443  010F24  6EDA               	movwf	fsr2h,c
  2444  010F26  0E0D               	movlw	13
  2445  010F28  18DE               	xorwf	postinc2,w,c
  2446  010F2A  B4D8               	btfsc	status,2,c
  2447  010F2C  D7B7               	goto	l340
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;ring_buffer_interface.c: 36: }
  2451                           ;ring_buffer_interface.c: 40: eusart2RxStringReady = 0;
  2452                           
  2453                           ; BSR set to: 0
  2454  010F2E  0E00               	movlw	0
  2455  010F30  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;ring_buffer_interface.c: 43: ringBufferLUT(line);
  2459  010F32  0E90               	movlw	low _line
  2460  010F34  6FC8               	movwf	ringBufferLUT@line& (0+255),b
  2461  010F36  0E01               	movlw	high _line
  2462  010F38  6FC9               	movwf	(ringBufferLUT@line+1)& (0+255),b
  2463  010F3A  EC00  F080         	call	_ringBufferLUT	;wreg free
  2464  010F3E  0012               	return		;funcret
  2465  010F40                     __end_of_ringBufferPull:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           intcon	equ	0xFF2
  2472                           postinc0	equ	0xFEE
  2473                           wreg	equ	0xFE8
  2474                           postdec1	equ	0xFE5
  2475                           fsr1l	equ	0xFE1
  2476                           indf2	equ	0xFDF
  2477                           postinc2	equ	0xFDE
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _strlen *****************
  2483 ;; Defined at:
  2484 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2487 ;;		 -> line(64), 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  2490 ;;		 -> line(64), 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2    0[BANK0 ] unsigned int 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2501 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2503 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2504 ;;Total ram usage:        6 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    5
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_ringBufferPull
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text2
  2515  011D46                     __ptext2:
  2516                           	opt stack 0
  2517  011D46                     _strlen:
  2518                           	opt stack 24
  2519                           
  2520                           ;incstack = 0
  2521  011D46  C0B0  F0B4         	movff	strlen@s,strlen@cp
  2522  011D4A  C0B1  F0B5         	movff	strlen@s+1,strlen@cp+1
  2523  011D4E  D003               	goto	l1557
  2524  011D50  0100               	movlb	0	; () banked
  2525  011D52  4BB4               	infsnz	strlen@cp& (0+255),f,b
  2526  011D54  2BB5               	incf	(strlen@cp+1)& (0+255),f,b
  2527  011D56                     l1557:
  2528                           
  2529                           ; BSR set to: 0
  2530  011D56  C0B4  FFD9         	movff	strlen@cp,fsr2l
  2531  011D5A  C0B5  FFDA         	movff	strlen@cp+1,fsr2h
  2532  011D5E  50DF               	movf	indf2,w,c
  2533  011D60  A4D8               	btfss	status,2,c
  2534  011D62  D7F6               	goto	l1558
  2535  011D64  C0B0  F0B2         	movff	strlen@s,??_strlen
  2536  011D68  C0B1  F0B3         	movff	strlen@s+1,??_strlen+1
  2537  011D6C  0100               	movlb	0	; () banked
  2538  011D6E  1FB2               	comf	??_strlen& (0+255),f,b
  2539  011D70  1FB3               	comf	(??_strlen+1)& (0+255),f,b
  2540  011D72  4BB2               	infsnz	??_strlen& (0+255),f,b
  2541  011D74  2BB3               	incf	(??_strlen+1)& (0+255),f,b
  2542  011D76  51B4               	movf	strlen@cp& (0+255),w,b
  2543  011D78  25B2               	addwf	??_strlen& (0+255),w,b
  2544  011D7A  6FB0               	movwf	?_strlen& (0+255),b
  2545  011D7C  51B5               	movf	(strlen@cp+1)& (0+255),w,b
  2546  011D7E  21B3               	addwfc	(??_strlen+1)& (0+255),w,b
  2547  011D80  6FB1               	movwf	(?_strlen+1)& (0+255),b
  2548  011D82  0012               	return	
  2549  011D84                     __end_of_strlen:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           intcon	equ	0xFF2
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           postdec1	equ	0xFE5
  2559                           fsr1l	equ	0xFE1
  2560                           indf2	equ	0xFDF
  2561                           postinc2	equ	0xFDE
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function _ringBufferLUT *****************
  2567 ;; Defined at:
  2568 ;;		line 9 in file "ring_buffer_LUT.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  line            2   24[BANK0 ] PTR unsigned char 
  2571 ;;		 -> line(64), 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2587 ;;Total ram usage:        3 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    8
  2590 ;; This function calls:
  2591 ;;		_MTOUCH_Button_isPressed
  2592 ;;		_printf
  2593 ;;		_strcmp
  2594 ;; This function is called by:
  2595 ;;		_ringBufferPull
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text3
  2600  010000                     __ptext3:
  2601                           	opt stack 0
  2602  010000                     _ringBufferLUT:
  2603                           	opt stack 21
  2604                           
  2605                           ;ring_buffer_LUT.c: 15: if((0 == strcmp(line, "LEDs On"))) {
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;incstack = 0
  2609  010000  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2610  010004  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2611  010008  0ECF               	movlw	low STR_6
  2612  01000A  0100               	movlb	0	; () banked
  2613  01000C  6FB2               	movwf	strcmp@s2& (0+255),b
  2614  01000E  0EFF               	movlw	high STR_6
  2615  010010  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2616  010012  ECC7  F08D         	call	_strcmp	;wreg free
  2617  010016  0100               	movlb	0	; () banked
  2618  010018  51B0               	movf	?_strcmp& (0+255),w,b
  2619  01001A  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2620  01001C  A4D8               	btfss	status,2,c
  2621  01001E  D017               	goto	l360
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;ring_buffer_LUT.c: 18: LATF = 0x00;
  2625  010020  0E00               	movlw	0
  2626  010022  6E7E               	movwf	3966,c	;volatile
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;ring_buffer_LUT.c: 21: printf("\n\r");
  2630  010024  0EA6               	movlw	low (STR_8+15)
  2631  010026  6FBC               	movwf	printf@f& (0+255),b
  2632  010028  0EFF               	movlw	high (STR_8+15)
  2633  01002A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2634  01002C  EC40  F085         	call	_printf	;wreg free
  2635                           
  2636                           ;ring_buffer_LUT.c: 23: printf("    LATF = 0x00\n\r");
  2637  010030  0E97               	movlw	low STR_8
  2638  010032  0100               	movlb	0	; () banked
  2639  010034  6FBC               	movwf	printf@f& (0+255),b
  2640  010036  0EFF               	movlw	high STR_8
  2641  010038  6FBD               	movwf	(printf@f+1)& (0+255),b
  2642  01003A  EC40  F085         	call	_printf	;wreg free
  2643                           
  2644                           ;ring_buffer_LUT.c: 26: printf("\n\r");
  2645  01003E  0EA6               	movlw	low (STR_8+15)
  2646  010040  0100               	movlb	0	; () banked
  2647  010042  6FBC               	movwf	printf@f& (0+255),b
  2648  010044  0EFF               	movlw	high (STR_8+15)
  2649  010046  6FBD               	movwf	(printf@f+1)& (0+255),b
  2650  010048  EC40  F085         	call	_printf	;wreg free
  2651                           
  2652                           ;ring_buffer_LUT.c: 28: }
  2653  01004C  0012               	return	
  2654  01004E                     l360:
  2655                           
  2656                           ;ring_buffer_LUT.c: 32: else if((0 == strcmp(line, "LEDs Off"))) {
  2657  01004E  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2658  010052  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2659  010056  0EC6               	movlw	low STR_10
  2660  010058  0100               	movlb	0	; () banked
  2661  01005A  6FB2               	movwf	strcmp@s2& (0+255),b
  2662  01005C  0EFF               	movlw	high STR_10
  2663  01005E  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2664  010060  ECC7  F08D         	call	_strcmp	;wreg free
  2665  010064  0100               	movlb	0	; () banked
  2666  010066  51B0               	movf	?_strcmp& (0+255),w,b
  2667  010068  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2668  01006A  A4D8               	btfss	status,2,c
  2669  01006C  D016               	goto	l362
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;ring_buffer_LUT.c: 35: LATF = 0xFF;
  2673  01006E  687E               	setf	3966,c	;volatile
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;ring_buffer_LUT.c: 38: printf("\n\r");
  2677  010070  0EA6               	movlw	low (STR_8+15)
  2678  010072  6FBC               	movwf	printf@f& (0+255),b
  2679  010074  0EFF               	movlw	high (STR_8+15)
  2680  010076  6FBD               	movwf	(printf@f+1)& (0+255),b
  2681  010078  EC40  F085         	call	_printf	;wreg free
  2682                           
  2683                           ;ring_buffer_LUT.c: 40: printf("LATF = 0xFF\n\r");
  2684  01007C  0EB8               	movlw	low STR_12
  2685  01007E  0100               	movlb	0	; () banked
  2686  010080  6FBC               	movwf	printf@f& (0+255),b
  2687  010082  0EFF               	movlw	high STR_12
  2688  010084  6FBD               	movwf	(printf@f+1)& (0+255),b
  2689  010086  EC40  F085         	call	_printf	;wreg free
  2690                           
  2691                           ;ring_buffer_LUT.c: 43: printf("\n\r");
  2692  01008A  0EA6               	movlw	low (STR_8+15)
  2693  01008C  0100               	movlb	0	; () banked
  2694  01008E  6FBC               	movwf	printf@f& (0+255),b
  2695  010090  0EFF               	movlw	high (STR_8+15)
  2696  010092  6FBD               	movwf	(printf@f+1)& (0+255),b
  2697  010094  EC40  F085         	call	_printf	;wreg free
  2698                           
  2699                           ;ring_buffer_LUT.c: 45: }
  2700  010098  0012               	return	
  2701  01009A                     l362:
  2702                           
  2703                           ;ring_buffer_LUT.c: 48: else if((0 == strcmp(line, "Button States?"))) {
  2704  01009A  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2705  01009E  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2706  0100A2  0EA9               	movlw	low STR_14
  2707  0100A4  0100               	movlb	0	; () banked
  2708  0100A6  6FB2               	movwf	strcmp@s2& (0+255),b
  2709  0100A8  0EFF               	movlw	high STR_14
  2710  0100AA  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2711  0100AC  ECC7  F08D         	call	_strcmp	;wreg free
  2712  0100B0  0100               	movlb	0	; () banked
  2713  0100B2  51B0               	movf	?_strcmp& (0+255),w,b
  2714  0100B4  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2715  0100B6  A4D8               	btfss	status,2,c
  2716  0100B8  D059               	goto	l364
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;ring_buffer_LUT.c: 51: printf("\n\r");
  2720  0100BA  0EA6               	movlw	low (STR_8+15)
  2721  0100BC  6FBC               	movwf	printf@f& (0+255),b
  2722  0100BE  0EFF               	movlw	high (STR_8+15)
  2723  0100C0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2724  0100C2  EC40  F085         	call	_printf	;wreg free
  2725                           
  2726                           ;ring_buffer_LUT.c: 54: printf("    Button 0: %d\n\r", MTOUCH_Button_isPressed(Button0))
      +                          ;
  2727  0100C6  0E38               	movlw	low STR_16
  2728  0100C8  0100               	movlb	0	; () banked
  2729  0100CA  6FBC               	movwf	printf@f& (0+255),b
  2730  0100CC  0EFF               	movlw	high STR_16
  2731  0100CE  6FBD               	movwf	(printf@f+1)& (0+255),b
  2732  0100D0  0E00               	movlw	0
  2733  0100D2  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2734  0100D6  0100               	movlb	0	; () banked
  2735  0100D8  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2736  0100DA  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2737  0100DC  6FBE               	movwf	(?_printf+2)& (0+255),b
  2738  0100DE  6BBF               	clrf	(?_printf+3)& (0+255),b
  2739  0100E0  EC40  F085         	call	_printf	;wreg free
  2740                           
  2741                           ;ring_buffer_LUT.c: 55: printf("    Button 1: %d\n\r", MTOUCH_Button_isPressed(Button1))
      +                          ;
  2742  0100E4  0E4B               	movlw	low STR_17
  2743  0100E6  0100               	movlb	0	; () banked
  2744  0100E8  6FBC               	movwf	printf@f& (0+255),b
  2745  0100EA  0EFF               	movlw	high STR_17
  2746  0100EC  6FBD               	movwf	(printf@f+1)& (0+255),b
  2747  0100EE  0E01               	movlw	1
  2748  0100F0  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2749  0100F4  0100               	movlb	0	; () banked
  2750  0100F6  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2751  0100F8  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2752  0100FA  6FBE               	movwf	(?_printf+2)& (0+255),b
  2753  0100FC  6BBF               	clrf	(?_printf+3)& (0+255),b
  2754  0100FE  EC40  F085         	call	_printf	;wreg free
  2755                           
  2756                           ;ring_buffer_LUT.c: 56: printf("    Button 2: %d\n\r", MTOUCH_Button_isPressed(Button2))
      +                          ;
  2757  010102  0E5E               	movlw	low STR_18
  2758  010104  0100               	movlb	0	; () banked
  2759  010106  6FBC               	movwf	printf@f& (0+255),b
  2760  010108  0EFF               	movlw	high STR_18
  2761  01010A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2762  01010C  0E02               	movlw	2
  2763  01010E  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2764  010112  0100               	movlb	0	; () banked
  2765  010114  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2766  010116  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2767  010118  6FBE               	movwf	(?_printf+2)& (0+255),b
  2768  01011A  6BBF               	clrf	(?_printf+3)& (0+255),b
  2769  01011C  EC40  F085         	call	_printf	;wreg free
  2770                           
  2771                           ;ring_buffer_LUT.c: 57: printf("    Button 3: %d\n\r", MTOUCH_Button_isPressed(Button3))
      +                          ;
  2772  010120  0E71               	movlw	low STR_19
  2773  010122  0100               	movlb	0	; () banked
  2774  010124  6FBC               	movwf	printf@f& (0+255),b
  2775  010126  0EFF               	movlw	high STR_19
  2776  010128  6FBD               	movwf	(printf@f+1)& (0+255),b
  2777  01012A  0E03               	movlw	3
  2778  01012C  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2779  010130  0100               	movlb	0	; () banked
  2780  010132  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2781  010134  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2782  010136  6FBE               	movwf	(?_printf+2)& (0+255),b
  2783  010138  6BBF               	clrf	(?_printf+3)& (0+255),b
  2784  01013A  EC40  F085         	call	_printf	;wreg free
  2785                           
  2786                           ;ring_buffer_LUT.c: 58: printf("    Button 4: %d\n\r", MTOUCH_Button_isPressed(Button4))
      +                          ;
  2787  01013E  0E84               	movlw	low STR_20
  2788  010140  0100               	movlb	0	; () banked
  2789  010142  6FBC               	movwf	printf@f& (0+255),b
  2790  010144  0EFF               	movlw	high STR_20
  2791  010146  6FBD               	movwf	(printf@f+1)& (0+255),b
  2792  010148  0E04               	movlw	4
  2793  01014A  EC59  F08F         	call	_MTOUCH_Button_isPressed
  2794  01014E  0100               	movlb	0	; () banked
  2795  010150  6FCA               	movwf	??_ringBufferLUT& (0+255),b
  2796  010152  51CA               	movf	??_ringBufferLUT& (0+255),w,b
  2797  010154  6FBE               	movwf	(?_printf+2)& (0+255),b
  2798  010156  6BBF               	clrf	(?_printf+3)& (0+255),b
  2799  010158  EC40  F085         	call	_printf	;wreg free
  2800                           
  2801                           ;ring_buffer_LUT.c: 61: printf("\n\r");
  2802  01015C  0EA6               	movlw	low (STR_8+15)
  2803  01015E  0100               	movlb	0	; () banked
  2804  010160  6FBC               	movwf	printf@f& (0+255),b
  2805  010162  0EFF               	movlw	high (STR_8+15)
  2806  010164  6FBD               	movwf	(printf@f+1)& (0+255),b
  2807  010166  EC40  F085         	call	_printf	;wreg free
  2808                           
  2809                           ;ring_buffer_LUT.c: 62: }
  2810  01016A  0012               	return	
  2811  01016C                     l364:
  2812                           
  2813                           ;ring_buffer_LUT.c: 66: else if((0 == strcmp(line, "Reset"))) {
  2814  01016C  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2815  010170  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2816  010174  0EE3               	movlw	low STR_22
  2817  010176  0100               	movlb	0	; () banked
  2818  010178  6FB2               	movwf	strcmp@s2& (0+255),b
  2819  01017A  0EFF               	movlw	high STR_22
  2820  01017C  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2821  01017E  ECC7  F08D         	call	_strcmp	;wreg free
  2822  010182  0100               	movlb	0	; () banked
  2823  010184  51B0               	movf	?_strcmp& (0+255),w,b
  2824  010186  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2825  010188  A4D8               	btfss	status,2,c
  2826  01018A  D00F               	goto	l366
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;ring_buffer_LUT.c: 69: printf("\033[2J");
  2830  01018C  0EEE               	movlw	low STR_2
  2831  01018E  6FBC               	movwf	printf@f& (0+255),b
  2832  010190  0EFF               	movlw	high STR_2
  2833  010192  6FBD               	movwf	(printf@f+1)& (0+255),b
  2834  010194  EC40  F085         	call	_printf	;wreg free
  2835                           
  2836                           ;ring_buffer_LUT.c: 72: printf("\033[H");
  2837  010198  0EF7               	movlw	low STR_3
  2838  01019A  0100               	movlb	0	; () banked
  2839  01019C  6FBC               	movwf	printf@f& (0+255),b
  2840  01019E  0EFF               	movlw	high STR_3
  2841  0101A0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2842  0101A2  EC40  F085         	call	_printf	;wreg free
  2843  0101A6  00FF               	reset		;# 
  2844                           
  2845                           ;ring_buffer_LUT.c: 77: }
  2846  0101A8  0012               	return	
  2847  0101AA                     l366:
  2848                           
  2849                           ;ring_buffer_LUT.c: 80: else if((0 == strcmp(line, "Clear"))) {
  2850  0101AA  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2851  0101AE  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2852  0101B2  0EDD               	movlw	low STR_25
  2853  0101B4  0100               	movlb	0	; () banked
  2854  0101B6  6FB2               	movwf	strcmp@s2& (0+255),b
  2855  0101B8  0EFF               	movlw	high STR_25
  2856  0101BA  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2857  0101BC  ECC7  F08D         	call	_strcmp	;wreg free
  2858  0101C0  0100               	movlb	0	; () banked
  2859  0101C2  51B0               	movf	?_strcmp& (0+255),w,b
  2860  0101C4  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2861  0101C6  A4D8               	btfss	status,2,c
  2862  0101C8  D00E               	goto	l368
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;ring_buffer_LUT.c: 83: printf("\033[2J");
  2866  0101CA  0EEE               	movlw	low STR_2
  2867  0101CC  6FBC               	movwf	printf@f& (0+255),b
  2868  0101CE  0EFF               	movlw	high STR_2
  2869  0101D0  6FBD               	movwf	(printf@f+1)& (0+255),b
  2870  0101D2  EC40  F085         	call	_printf	;wreg free
  2871                           
  2872                           ;ring_buffer_LUT.c: 86: printf("\033[H");
  2873  0101D6  0EF7               	movlw	low STR_3
  2874  0101D8  0100               	movlb	0	; () banked
  2875  0101DA  6FBC               	movwf	printf@f& (0+255),b
  2876  0101DC  0EFF               	movlw	high STR_3
  2877  0101DE  6FBD               	movwf	(printf@f+1)& (0+255),b
  2878  0101E0  EC40  F085         	call	_printf	;wreg free
  2879                           
  2880                           ;ring_buffer_LUT.c: 88: }
  2881  0101E4  0012               	return	
  2882  0101E6                     l368:
  2883                           
  2884                           ;ring_buffer_LUT.c: 91: else if((0 == strcmp(line, "*IDN?")) || (0 == strcmp(line, "IDN"
      +                          ))) {
  2885  0101E6  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2886  0101EA  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2887  0101EE  0ED7               	movlw	low STR_28
  2888  0101F0  0100               	movlb	0	; () banked
  2889  0101F2  6FB2               	movwf	strcmp@s2& (0+255),b
  2890  0101F4  0EFF               	movlw	high STR_28
  2891  0101F6  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2892  0101F8  ECC7  F08D         	call	_strcmp	;wreg free
  2893  0101FC  0100               	movlb	0	; () banked
  2894  0101FE  51B0               	movf	?_strcmp& (0+255),w,b
  2895  010200  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2896  010202  B4D8               	btfsc	status,2,c
  2897  010204  D00F               	goto	u5570
  2898                           
  2899                           ; BSR set to: 0
  2900  010206  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2901  01020A  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2902  01020E  0EF3               	movlw	low STR_29
  2903  010210  6FB2               	movwf	strcmp@s2& (0+255),b
  2904  010212  0EFF               	movlw	high STR_29
  2905  010214  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2906  010216  ECC7  F08D         	call	_strcmp	;wreg free
  2907  01021A  0100               	movlb	0	; () banked
  2908  01021C  51B0               	movf	?_strcmp& (0+255),w,b
  2909  01021E  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2910  010220  A4D8               	btfss	status,2,c
  2911  010222  D015               	goto	l370
  2912  010224                     u5570:
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;ring_buffer_LUT.c: 94: printf("\n\r");
  2916                           
  2917                           ; BSR set to: 0
  2918  010224  0EA6               	movlw	low (STR_8+15)
  2919  010226  6FBC               	movwf	printf@f& (0+255),b
  2920  010228  0EFF               	movlw	high (STR_8+15)
  2921  01022A  6FBD               	movwf	(printf@f+1)& (0+255),b
  2922  01022C  EC40  F085         	call	_printf	;wreg free
  2923                           
  2924                           ;ring_buffer_LUT.c: 97: printf("    mTouch Test Board, REVA");
  2925  010230  0E1C               	movlw	low STR_31
  2926  010232  0100               	movlb	0	; () banked
  2927  010234  6FBC               	movwf	printf@f& (0+255),b
  2928  010236  0EFF               	movlw	high STR_31
  2929  010238  6FBD               	movwf	(printf@f+1)& (0+255),b
  2930  01023A  EC40  F085         	call	_printf	;wreg free
  2931                           
  2932                           ;ring_buffer_LUT.c: 100: printf("\n\r");
  2933  01023E  0EA6               	movlw	low (STR_8+15)
  2934  010240  0100               	movlb	0	; () banked
  2935  010242  6FBC               	movwf	printf@f& (0+255),b
  2936  010244  0EFF               	movlw	high (STR_8+15)
  2937  010246  6FBD               	movwf	(printf@f+1)& (0+255),b
  2938  010248  EC40  F085         	call	_printf	;wreg free
  2939                           
  2940                           ;ring_buffer_LUT.c: 102: }
  2941  01024C  0012               	return	
  2942  01024E                     l370:
  2943                           
  2944                           ;ring_buffer_LUT.c: 105: else if((0 == strcmp(line, "Help"))) {
  2945  01024E  C0C8  F0B0         	movff	ringBufferLUT@line,strcmp@s1
  2946  010252  C0C9  F0B1         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2947  010256  0EE9               	movlw	low STR_33
  2948  010258  0100               	movlb	0	; () banked
  2949  01025A  6FB2               	movwf	strcmp@s2& (0+255),b
  2950  01025C  0EFF               	movlw	high STR_33
  2951  01025E  6FB3               	movwf	(strcmp@s2+1)& (0+255),b
  2952  010260  ECC7  F08D         	call	_strcmp	;wreg free
  2953  010264  0100               	movlb	0	; () banked
  2954  010266  51B0               	movf	?_strcmp& (0+255),w,b
  2955  010268  11B1               	iorwf	(?_strcmp+1)& (0+255),w,b
  2956  01026A  A4D8               	btfss	status,2,c
  2957  01026C  0012               	return	
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;ring_buffer_LUT.c: 108: printf("\n\r");
  2961  01026E  0EA6               	movlw	low (STR_8+15)
  2962  010270  6FBC               	movwf	printf@f& (0+255),b
  2963  010272  0EFF               	movlw	high (STR_8+15)
  2964  010274  6FBD               	movwf	(printf@f+1)& (0+255),b
  2965  010276  EC40  F085         	call	_printf	;wreg free
  2966                           
  2967                           ;ring_buffer_LUT.c: 110: printf("   List of supported commands:\n\r"
  2968                           ;ring_buffer_LUT.c: 111: "   LEDs On: Turns all LEDs On\n\r"
  2969                           ;ring_buffer_LUT.c: 112: "   LEDs Off: Turns all LEDs Off\n\r"
  2970                           ;ring_buffer_LUT.c: 113: "   Button States?: Returns state of all five mTouch buttons\n\
      +                          r"
  2971                           ;ring_buffer_LUT.c: 114: "   Reset: Clears the terminal and resets the micro\n\r"
  2972                           ;ring_buffer_LUT.c: 115: "   Clear: Clears the terminal but doesn't reset the micro\n\r"
  2973                           ;ring_buffer_LUT.c: 116: "   *IDN?: Returns device identification\n\r"
  2974  01027A  0EBF               	movlw	low STR_35
  2975  01027C  0100               	movlb	0	; () banked
  2976  01027E  6FBC               	movwf	printf@f& (0+255),b
  2977  010280  0EFD               	movlw	high STR_35
  2978  010282  6FBD               	movwf	(printf@f+1)& (0+255),b
  2979  010284  EC40  F085         	call	_printf	;wreg free
  2980                           
  2981                           ;ring_buffer_LUT.c: 120: printf("\n\r");
  2982  010288  0EA6               	movlw	low (STR_8+15)
  2983  01028A  0100               	movlb	0	; () banked
  2984  01028C  6FBC               	movwf	printf@f& (0+255),b
  2985  01028E  0EFF               	movlw	high (STR_8+15)
  2986  010290  6FBD               	movwf	(printf@f+1)& (0+255),b
  2987  010292  EC40  F085         	call	_printf	;wreg free
  2988  010296  0012               	return	
  2989  010298                     __end_of_ringBufferLUT:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           intcon	equ	0xFF2
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _strcmp *****************
  3007 ;; Defined at:
  3008 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3011 ;;		 -> line(64), 
  3012 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3013 ;;		 -> STR_33(5), STR_29(4), STR_28(6), STR_25(6), 
  3014 ;;		 -> STR_22(6), STR_14(15), STR_10(9), STR_6(8), 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  r               1    5[BANK0 ] char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  2    0[BANK0 ] int 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3026 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3030 ;;Total ram usage:        6 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    5
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_ringBufferLUT
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text4
  3041  011B8E                     __ptext4:
  3042                           	opt stack 0
  3043  011B8E                     _strcmp:
  3044                           	opt stack 23
  3045                           
  3046                           ;incstack = 0
  3047  011B8E  D005               	goto	l1549
  3048  011B90  0100               	movlb	0	; () banked
  3049  011B92  4BB0               	infsnz	strcmp@s1& (0+255),f,b
  3050  011B94  2BB1               	incf	(strcmp@s1+1)& (0+255),f,b
  3051  011B96  4BB2               	infsnz	strcmp@s2& (0+255),f,b
  3052  011B98  2BB3               	incf	(strcmp@s2+1)& (0+255),f,b
  3053  011B9A                     l1549:
  3054                           
  3055                           ; BSR set to: 0
  3056  011B9A  C0B0  FFD9         	movff	strcmp@s1,fsr2l
  3057  011B9E  C0B1  FFDA         	movff	strcmp@s1+1,fsr2h
  3058  011BA2  50DF               	movf	indf2,w,c
  3059  011BA4  0100               	movlb	0	; () banked
  3060  011BA6  6FB4               	movwf	??_strcmp& (0+255),b
  3061  011BA8  C0B2  FFF6         	movff	strcmp@s2,tblptrl
  3062  011BAC  C0B3  FFF7         	movff	strcmp@s2+1,tblptrh
  3063  011BB0                     	if	0	;tblptru may be non-zero
  3064  011BB0                     	endif
  3065  011BB0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3066  011BB0  0E00               	movlw	low (__mediumconst shr (0+16))
  3067  011BB2  6EF8               	movwf	tblptru,c
  3068  011BB4                     	endif
  3069  011BB4  0008               	tblrd		*
  3070  011BB6  50F5               	movf	tablat,w,c
  3071  011BB8  0800               	sublw	0
  3072  011BBA  25B4               	addwf	??_strcmp& (0+255),w,b
  3073  011BBC  6FB5               	movwf	strcmp@r& (0+255),b
  3074  011BBE  51B5               	movf	strcmp@r& (0+255),w,b
  3075  011BC0  A4D8               	btfss	status,2,c
  3076  011BC2  D007               	goto	u5210
  3077                           
  3078                           ; BSR set to: 0
  3079  011BC4  C0B0  FFD9         	movff	strcmp@s1,fsr2l
  3080  011BC8  C0B1  FFDA         	movff	strcmp@s1+1,fsr2h
  3081  011BCC  50DF               	movf	indf2,w,c
  3082  011BCE  A4D8               	btfss	status,2,c
  3083  011BD0  D7DF               	goto	l1550
  3084  011BD2                     u5210:
  3085                           
  3086                           ; BSR set to: 0
  3087                           
  3088                           ; BSR set to: 0
  3089                           
  3090                           ; BSR set to: 0
  3091  011BD2  51B5               	movf	strcmp@r& (0+255),w,b
  3092  011BD4  6FB0               	movwf	?_strcmp& (0+255),b
  3093  011BD6  6BB1               	clrf	(?_strcmp+1)& (0+255),b
  3094  011BD8  BFB0               	btfsc	?_strcmp& (0+255),7,b
  3095  011BDA  07B1               	decf	(?_strcmp+1)& (0+255),f,b
  3096  011BDC  0012               	return	
  3097  011BDE                     __end_of_strcmp:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           intcon	equ	0xFF2
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           postdec1	equ	0xFE5
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           postinc2	equ	0xFDE
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _MTOUCH_Button_isPressed *****************
  3115 ;; Defined at:
  3116 ;;		line 377 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  name            1    wreg     enum E17454
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  name            1    1[BANK0 ] enum E17454
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      unsigned char 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3134 ;;Total ram usage:        2 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    5
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_ringBufferLUT
  3141 ;;		_MTOUCH_Button_Buttonmask_Get
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text5
  3146  011EB2                     __ptext5:
  3147                           	opt stack 0
  3148  011EB2                     _MTOUCH_Button_isPressed:
  3149                           	opt stack 23
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;incstack = 0
  3153                           ;MTOUCH_Button_isPressed@name stored from wreg
  3154  011EB2  0100               	movlb	0	; () banked
  3155  011EB4  6FB1               	movwf	MTOUCH_Button_isPressed@name& (0+255),b
  3156                           
  3157                           ;mtouch_button.c: 379: if(name < 5)
  3158  011EB6  0E05               	movlw	5
  3159  011EB8  0100               	movlb	0	; () banked
  3160  011EBA  61B1               	cpfslt	MTOUCH_Button_isPressed@name& (0+255),b
  3161  011EBC  D014               	goto	l893
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;mtouch_button.c: 380: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  3165  011EBE  51B1               	movf	MTOUCH_Button_isPressed@name& (0+255),w,b
  3166  011EC0  0D10               	mullw	16
  3167  011EC2  0E02               	movlw	2
  3168  011EC4  26F3               	addwf	prodl,f,c
  3169  011EC6  0E00               	movlw	0
  3170  011EC8  22F4               	addwfc	prodh,f,c
  3171  011ECA  0E40               	movlw	low _mtouch_button
  3172  011ECC  24F3               	addwf	prodl,w,c
  3173  011ECE  6ED9               	movwf	fsr2l,c
  3174  011ED0  0E01               	movlw	high _mtouch_button
  3175  011ED2  20F4               	addwfc	prodh,w,c
  3176  011ED4  6EDA               	movwf	fsr2h,c
  3177  011ED6  0E02               	movlw	2
  3178  011ED8  18DE               	xorwf	postinc2,w,c
  3179  011EDA  A4D8               	btfss	status,2,c
  3180  011EDC  D002               	goto	u5230
  3181  011EDE  0E01               	movlw	1
  3182  011EE0  0012               	return	
  3183  011EE2                     u5230:
  3184  011EE2  0E00               	movlw	0
  3185                           
  3186                           ; BSR set to: 0
  3187                           
  3188                           ; BSR set to: 0
  3189  011EE4  0012               	return	
  3190  011EE6                     l893:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;mtouch_button.c: 381: else
  3194                           ;mtouch_button.c: 382: return 0;
  3195                           
  3196                           ; BSR set to: 0
  3197  011EE6  0E00               	movlw	0
  3198                           
  3199                           ; BSR set to: 0
  3200  011EE8  0012               	return	
  3201  011EEA                     __end_of_MTOUCH_Button_isPressed:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _EUSART2_Read *****************
  3221 ;; Defined at:
  3222 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  readValue       1    0[BANK0 ] unsigned char 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  1    wreg      unsigned char 
  3229 ;; Registers used:
  3230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3240 ;;Total ram usage:        1 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    5
  3243 ;; This function calls:
  3244 ;;		Nothing
  3245 ;; This function is called by:
  3246 ;;		_ringBufferPull
  3247 ;;		_getch
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text6
  3252  011E00                     __ptext6:
  3253                           	opt stack 0
  3254  011E00                     _EUSART2_Read:
  3255                           	opt stack 24
  3256                           
  3257                           ;eusart2.c: 132: uint8_t readValue = 0;
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;incstack = 0
  3261  011E00  0E00               	movlw	0
  3262  011E02  0100               	movlb	0	; () banked
  3263  011E04  6FB0               	movwf	EUSART2_Read@readValue& (0+255),b
  3264  011E06                     
  3265                           ; BSR set to: 0
  3266                           
  3267                           ;eusart2.c: 135: {
  3268                           
  3269                           ; BSR set to: 0
  3270  011E06  503D               	movf	_eusart2RxCount,w,c	;volatile
  3271  011E08  B4D8               	btfsc	status,2,c
  3272  011E0A  D7FD               	goto	l188
  3273                           
  3274                           ;eusart2.c: 136: }
  3275                           ;eusart2.c: 138: readValue = eusart2RxBuffer[eusart2RxTail++];
  3276  011E0C  503E               	movf	_eusart2RxTail,w,c	;volatile
  3277  011E0E  0D01               	mullw	1
  3278  011E10  0E00               	movlw	low _eusart2RxBuffer
  3279  011E12  24F3               	addwf	prodl,w,c
  3280  011E14  6ED9               	movwf	fsr2l,c
  3281  011E16  0E01               	movlw	high _eusart2RxBuffer
  3282  011E18  20F4               	addwfc	prodh,w,c
  3283  011E1A  6EDA               	movwf	fsr2h,c
  3284  011E1C  50DF               	movf	indf2,w,c
  3285  011E1E  0100               	movlb	0	; () banked
  3286  011E20  6FB0               	movwf	EUSART2_Read@readValue& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289  011E22  2A3E               	incf	_eusart2RxTail,f,c	;volatile
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;eusart2.c: 139: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  3293  011E24  0E3F               	movlw	63
  3294  011E26  643E               	cpfsgt	_eusart2RxTail,c	;volatile
  3295  011E28  D002               	goto	l190
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;eusart2.c: 140: {
  3299                           ;eusart2.c: 141: eusart2RxTail = 0;
  3300  011E2A  0E00               	movlw	0
  3301  011E2C  6E3E               	movwf	_eusart2RxTail,c	;volatile
  3302  011E2E                     l190:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;eusart2.c: 142: }
  3306                           ;eusart2.c: 143: PIE3bits.RC2IE = 0;
  3307                           
  3308                           ; BSR set to: 0
  3309  011E2E  010E               	movlb	14	; () banked
  3310  011E30  9F2C               	bcf	44,7,b	;volatile
  3311                           
  3312                           ; BSR set to: 14
  3313                           ;eusart2.c: 144: eusart2RxCount--;
  3314  011E32  063D               	decf	_eusart2RxCount,f,c	;volatile
  3315                           
  3316                           ; BSR set to: 14
  3317                           ;eusart2.c: 145: PIE3bits.RC2IE = 1;
  3318  011E34  8F2C               	bsf	44,7,b	;volatile
  3319                           
  3320                           ; BSR set to: 14
  3321                           ;eusart2.c: 147: return readValue;
  3322  011E36  0100               	movlb	0	; () banked
  3323  011E38  51B0               	movf	EUSART2_Read@readValue& (0+255),w,b
  3324  011E3A  0012               	return	
  3325  011E3C                     __end_of_EUSART2_Read:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           postdec1	equ	0xFE5
  3337                           fsr1l	equ	0xFE1
  3338                           indf2	equ	0xFDF
  3339                           postinc2	equ	0xFDE
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _printResetMessage *****************
  3345 ;; Defined at:
  3346 ;;		line 50 in file "ring_buffer_interface.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    8
  3367 ;; This function calls:
  3368 ;;		_printf
  3369 ;; This function is called by:
  3370 ;;		_main
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text7
  3375  011E78                     __ptext7:
  3376                           	opt stack 0
  3377  011E78                     _printResetMessage:
  3378                           	opt stack 22
  3379                           
  3380                           ;ring_buffer_interface.c: 53: printf("\033[2J");
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;incstack = 0
  3384  011E78  0EEE               	movlw	low STR_2
  3385  011E7A  0100               	movlb	0	; () banked
  3386  011E7C  6FBC               	movwf	printf@f& (0+255),b
  3387  011E7E  0EFF               	movlw	high STR_2
  3388  011E80  6FBD               	movwf	(printf@f+1)& (0+255),b
  3389  011E82  EC40  F085         	call	_printf	;wreg free
  3390                           
  3391                           ;ring_buffer_interface.c: 56: printf("\033[H");
  3392  011E86  0EF7               	movlw	low STR_3
  3393  011E88  0100               	movlb	0	; () banked
  3394  011E8A  6FBC               	movwf	printf@f& (0+255),b
  3395  011E8C  0EFF               	movlw	high STR_3
  3396  011E8E  6FBD               	movwf	(printf@f+1)& (0+255),b
  3397  011E90  EC40  F085         	call	_printf	;wreg free
  3398                           
  3399                           ;ring_buffer_interface.c: 59: printf("    Boot complete\n\r"
  3400                           ;ring_buffer_interface.c: 60: "   PIC18F67K40 mTouch Test Board\n\r"
  3401                           ;ring_buffer_interface.c: 61: "   Evaluates the mTouch capacitive touch library distribu
      +                          ted by Microchip\n\r"
  3402                           ;ring_buffer_interface.c: 62: "   Sets the state of five LEDs based on mTouch capacitive
      +                           pushbuttons\n\r"
  3403                           ;ring_buffer_interface.c: 63: "   Baud rate: 115200 bps\n\r"
  3404                           ;ring_buffer_interface.c: 64: "   No parity, 8 bits, no flow control, 1 stop bit\n\r"
  3405                           ;ring_buffer_interface.c: 65: "   Commands are case sensitive\n\r"
  3406  011E94  0E52               	movlw	low STR_4
  3407  011E96  0100               	movlb	0	; () banked
  3408  011E98  6FBC               	movwf	printf@f& (0+255),b
  3409  011E9A  0EFC               	movlw	high STR_4
  3410  011E9C  6FBD               	movwf	(printf@f+1)& (0+255),b
  3411  011E9E  EC40  F085         	call	_printf	;wreg free
  3412                           
  3413                           ;ring_buffer_interface.c: 70: printf("\n\r");
  3414  011EA2  0EA6               	movlw	low (STR_8+15)
  3415  011EA4  0100               	movlb	0	; () banked
  3416  011EA6  6FBC               	movwf	printf@f& (0+255),b
  3417  011EA8  0EFF               	movlw	high (STR_8+15)
  3418  011EAA  6FBD               	movwf	(printf@f+1)& (0+255),b
  3419  011EAC  EC40  F085         	call	_printf	;wreg free
  3420  011EB0  0012               	return		;funcret
  3421  011EB2                     __end_of_printResetMessage:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           intcon	equ	0xFF2
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postdec1	equ	0xFE5
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _printf *****************
  3441 ;; Defined at:
  3442 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3445 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
  3446 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
  3447 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
  3448 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
  3449 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
  3450 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
  3451 ;;		 -> STR_4(365), STR_3(4), STR_2(5), STR_1(4), 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  tmpval          4    0        struct .
  3454 ;;  cp              3    0        PTR const unsigned char 
  3455 ;;  val             2   21[BANK0 ] unsigned int 
  3456 ;;  ap              2   17[BANK0 ] PTR void [1]
  3457 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3458 ;;  len             2    0        unsigned int 
  3459 ;;  c               1   23[BANK0 ] char 
  3460 ;;  prec            1   20[BANK0 ] char 
  3461 ;;  flag            1   19[BANK0 ] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  2   12[BANK0 ] int 
  3464 ;; Registers used:
  3465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3472 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3474 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3475 ;;Total ram usage:       12 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    7
  3478 ;; This function calls:
  3479 ;;		___lwdiv
  3480 ;;		___lwmod
  3481 ;;		_putch
  3482 ;; This function is called by:
  3483 ;;		_printResetMessage
  3484 ;;		_ringBufferLUT
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text8
  3489  010A80                     __ptext8:
  3490                           	opt stack 0
  3491  010A80                     _printf:
  3492                           	opt stack 21
  3493                           
  3494                           ;doprnt.c: 466: va_list ap;
  3495                           ;doprnt.c: 499: signed char c;
  3496                           ;doprnt.c: 506: signed char prec;
  3497                           ;doprnt.c: 508: unsigned char flag;
  3498                           ;doprnt.c: 523: union {
  3499                           ;doprnt.c: 524: unsigned long vd;
  3500                           ;doprnt.c: 525: double integ;
  3501                           ;doprnt.c: 526: } tmpval;
  3502                           ;doprnt.c: 528: unsigned int val;
  3503                           ;doprnt.c: 529: unsigned len;
  3504                           ;doprnt.c: 530: const char * cp;
  3505                           ;doprnt.c: 533: *ap = __va_start();
  3506                           
  3507                           ;incstack = 0
  3508  010A80  0EBE               	movlw	low (?_printf+2)
  3509  010A82  0100               	movlb	0	; () banked
  3510  010A84  6FC1               	movwf	printf@ap& (0+255),b
  3511  010A86  0E00               	movlw	high (?_printf+2)
  3512  010A88  6FC2               	movwf	(printf@ap+1)& (0+255),b
  3513                           
  3514                           ;doprnt.c: 536: while(c = *f++) {
  3515  010A8A  D08A               	goto	u5180
  3516  010A8C                     
  3517                           ; BSR set to: 0
  3518                           ;doprnt.c: 538: if(c != '%')
  3519                           
  3520                           ; BSR set to: 0
  3521  010A8C  0E25               	movlw	37
  3522  010A8E  19C7               	xorwf	printf@c& (0+255),w,b
  3523  010A90  B4D8               	btfsc	status,2,c
  3524  010A92  D004               	goto	l974
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;doprnt.c: 540: {
  3528                           ;doprnt.c: 541: (putch(c) );
  3529  010A94  51C7               	movf	printf@c& (0+255),w,b
  3530  010A96  EC0B  F092         	call	_putch
  3531                           
  3532                           ;doprnt.c: 542: continue;
  3533  010A9A  D082               	goto	u5180
  3534  010A9C                     l974:
  3535                           
  3536                           ;doprnt.c: 543: }
  3537                           ;doprnt.c: 548: flag = 0;
  3538  010A9C  0E00               	movlw	0
  3539  010A9E  0100               	movlb	0	; () banked
  3540  010AA0  6FC3               	movwf	printf@flag& (0+255),b
  3541                           
  3542                           ; BSR set to: 0
  3543                           
  3544                           ; BSR set to: 0
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 822: }
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;doprnt.c: 813: continue;
  3551                           
  3552                           ;doprnt.c: 802: default:
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;doprnt.c: 698: case 'i':
  3556                           ;doprnt.c: 699: break;
  3557                           
  3558                           ; BSR set to: 0
  3559                           
  3560                           ;doprnt.c: 697: case 'd':
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;doprnt.c: 638: goto alldone;
  3564                           
  3565                           ;doprnt.c: 637: case 0:
  3566                           
  3567                           ;doprnt.c: 635: switch(c = *f++) {
  3568  010AA2  C0BC  FFF6         	movff	printf@f,tblptrl
  3569  010AA6  C0BD  FFF7         	movff	printf@f+1,tblptrh
  3570  010AAA  4BBC               	infsnz	printf@f& (0+255),f,b
  3571  010AAC  2BBD               	incf	(printf@f+1)& (0+255),f,b
  3572  010AAE                     	if	0	;tblptru may be non-zero
  3573  010AAE                     	endif
  3574  010AAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3575  010AAE  0E00               	movlw	low (__mediumconst shr (0+16))
  3576  010AB0  6EF8               	movwf	tblptru,c
  3577  010AB2                     	endif
  3578  010AB2  0008               	tblrd		*
  3579  010AB4  CFF5 F0C7          	movff	tablat,printf@c
  3580  010AB8  51C7               	movf	printf@c& (0+255),w,b
  3581                           
  3582                           ; Switch size 1, requested type "space"
  3583                           ; Number of cases is 3, Range of values is 0 to 105
  3584                           ; switch strategies available:
  3585                           ; Name         Instructions Cycles
  3586                           ; simple_byte           10     6 (average)
  3587                           ;	Chosen strategy is simple_byte
  3588  010ABA  0A00               	xorlw	0	; case 0
  3589  010ABC  B4D8               	btfsc	status,2,c
  3590  010ABE  0012               	return	
  3591  010AC0  0A64               	xorlw	100	; case 100
  3592  010AC2  B4D8               	btfsc	status,2,c
  3593  010AC4  D003               	goto	l980
  3594  010AC6  0A0D               	xorlw	13	; case 105
  3595  010AC8  A4D8               	btfss	status,2,c
  3596  010ACA  D06A               	goto	u5180
  3597  010ACC                     l980:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 1253: {
  3601                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3602                           
  3603                           ; BSR set to: 0
  3604  010ACC  C0C1  FFD9         	movff	printf@ap,fsr2l
  3605  010AD0  C0C2  FFDA         	movff	printf@ap+1,fsr2h
  3606  010AD4  CFDE F0C5          	movff	postinc2,printf@val
  3607  010AD8  CFDD F0C6          	movff	postdec2,printf@val+1
  3608                           
  3609                           ; BSR set to: 0
  3610  010ADC  0E02               	movlw	2
  3611  010ADE  27C1               	addwf	printf@ap& (0+255),f,b
  3612  010AE0  0E00               	movlw	0
  3613  010AE2  23C2               	addwfc	(printf@ap+1)& (0+255),f,b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;doprnt.c: 1261: if((int)val < 0) {
  3617  010AE4  AFC6               	btfss	(printf@val+1)& (0+255),7,b
  3618  010AE6  D006               	goto	l982
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 1262: flag |= 0x03;
  3622  010AE8  0E03               	movlw	3
  3623  010AEA  13C3               	iorwf	printf@flag& (0+255),f,b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;doprnt.c: 1263: val = -val;
  3627  010AEC  6DC5               	negf	printf@val& (0+255),b
  3628  010AEE  1FC6               	comf	(printf@val+1)& (0+255),f,b
  3629  010AF0  B0D8               	btfsc	status,0,c
  3630  010AF2  2BC6               	incf	(printf@val+1)& (0+255),f,b
  3631  010AF4                     l982:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 1264: }
  3635                           ;doprnt.c: 1266: }
  3636                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3637                           
  3638                           ; BSR set to: 0
  3639  010AF4  0E01               	movlw	1
  3640  010AF6  6FC7               	movwf	printf@c& (0+255),b
  3641  010AF8                     l4753:
  3642                           
  3643                           ; BSR set to: 0
  3644  010AF8  0E05               	movlw	5
  3645  010AFA  19C7               	xorwf	printf@c& (0+255),w,b
  3646  010AFC  B4D8               	btfsc	status,2,c
  3647  010AFE  D015               	goto	u5160
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;doprnt.c: 1306: if(val < dpowers[c])
  3651                           
  3652                           ; BSR set to: 0
  3653                           
  3654                           ; BSR set to: 0
  3655  010B00  51C7               	movf	printf@c& (0+255),w,b
  3656  010B02  0D02               	mullw	2
  3657  010B04  0ECB               	movlw	low _dpowers
  3658  010B06  24F3               	addwf	prodl,w,c
  3659  010B08  6EF6               	movwf	tblptrl,c
  3660  010B0A  0EFB               	movlw	high _dpowers
  3661  010B0C  20F4               	addwfc	prodh,w,c
  3662  010B0E  6EF7               	movwf	tblptrh,c
  3663  010B10                     	if	1	;There are 3 active tblptr bytes
  3664  010B10  6AF8               	clrf	tblptru,c
  3665  010B12  0E00               	movlw	low (__mediumconst shr (0+16))
  3666  010B14  22F8               	addwfc	tblptru,f,c
  3667  010B16                     	endif
  3668  010B16  0009               	tblrd		*+
  3669  010B18  50F5               	movf	tablat,w,c
  3670  010B1A  5DC5               	subwf	printf@val& (0+255),w,b
  3671  010B1C  0009               	tblrd		*+
  3672  010B1E  50F5               	movf	tablat,w,c
  3673  010B20  59C6               	subwfb	(printf@val+1)& (0+255),w,b
  3674  010B22  A0D8               	btfss	status,0,c
  3675  010B24  D002               	goto	u5160
  3676                           
  3677                           ; BSR set to: 0
  3678                           
  3679                           ; BSR set to: 0
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;doprnt.c: 1307: break;
  3683  010B26  2BC7               	incf	printf@c& (0+255),f,b
  3684  010B28  D7E7               	goto	l4753
  3685  010B2A                     u5160:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;doprnt.c: 1422: {
  3689                           ;doprnt.c: 1438: if(flag & 0x03)
  3690                           
  3691                           ; BSR set to: 0
  3692  010B2A  C0C3  F0C0         	movff	printf@flag,??_printf
  3693  010B2E  0E03               	movlw	3
  3694  010B30  17C0               	andwf	??_printf& (0+255),f,b
  3695  010B32  B4D8               	btfsc	status,2,c
  3696  010B34  D003               	goto	l986
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;doprnt.c: 1439: (putch('-') );
  3700  010B36  0E2D               	movlw	45
  3701  010B38  EC0B  F092         	call	_putch
  3702  010B3C                     l986:
  3703                           
  3704                           ;doprnt.c: 1469: }
  3705                           ;doprnt.c: 1472: prec = c;
  3706  010B3C  C0C7  F0C4         	movff	printf@c,printf@prec
  3707                           
  3708                           ;doprnt.c: 1474: while(prec--) {
  3709  010B40  D02A               	goto	l987
  3710  010B42                     
  3711                           ;doprnt.c: 1478: {
  3712                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3713  010B42  0100               	movlb	0	; () banked
  3714  010B44  51C4               	movf	printf@prec& (0+255),w,b
  3715  010B46  0D02               	mullw	2
  3716  010B48  0ECB               	movlw	low _dpowers
  3717  010B4A  24F3               	addwf	prodl,w,c
  3718  010B4C  6EF6               	movwf	tblptrl,c
  3719  010B4E  0EFB               	movlw	high _dpowers
  3720  010B50  20F4               	addwfc	prodh,w,c
  3721  010B52  6EF7               	movwf	tblptrh,c
  3722  010B54                     	if	1	;There are 3 active tblptr bytes
  3723  010B54  6AF8               	clrf	tblptru,c
  3724  010B56  0E00               	movlw	low (__mediumconst shr (0+16))
  3725  010B58  22F8               	addwfc	tblptru,f,c
  3726  010B5A                     	endif
  3727  010B5A  0009               	tblrd		*+
  3728  010B5C  CFF5 F0B2          	movff	tablat,___lwdiv@divisor
  3729  010B60  000A               	tblrd		*-
  3730  010B62  CFF5 F0B3          	movff	tablat,___lwdiv@divisor+1
  3731  010B66  C0C5  F0B0         	movff	printf@val,___lwdiv@dividend
  3732  010B6A  C0C6  F0B1         	movff	printf@val+1,___lwdiv@dividend+1
  3733  010B6E  EC4B  F08D         	call	___lwdiv	;wreg free
  3734  010B72  C0B0  F0B7         	movff	?___lwdiv,___lwmod@dividend
  3735  010B76  C0B1  F0B8         	movff	?___lwdiv+1,___lwmod@dividend+1
  3736  010B7A  0E00               	movlw	0
  3737  010B7C  0100               	movlb	0	; () banked
  3738  010B7E  6FBA               	movwf	(___lwmod@divisor+1)& (0+255),b
  3739  010B80  0E0A               	movlw	10
  3740  010B82  6FB9               	movwf	___lwmod@divisor& (0+255),b
  3741  010B84  EC60  F08E         	call	___lwmod	;wreg free
  3742  010B88  0100               	movlb	0	; () banked
  3743  010B8A  51B7               	movf	?___lwmod& (0+255),w,b
  3744  010B8C  0F30               	addlw	48
  3745  010B8E  6FC7               	movwf	printf@c& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;doprnt.c: 1523: }
  3749                           ;doprnt.c: 1524: (putch(c) );
  3750  010B90  51C7               	movf	printf@c& (0+255),w,b
  3751  010B92  EC0B  F092         	call	_putch
  3752  010B96                     l987:
  3753  010B96  0100               	movlb	0	; () banked
  3754  010B98  07C4               	decf	printf@prec& (0+255),f,b
  3755  010B9A  29C4               	incf	printf@prec& (0+255),w,b
  3756  010B9C  A4D8               	btfss	status,2,c
  3757  010B9E  D7D1               	goto	l988
  3758  010BA0                     u5180:
  3759                           
  3760                           ; BSR set to: 0
  3761                           
  3762                           ; BSR set to: 0
  3763  010BA0  C0BC  FFF6         	movff	printf@f,tblptrl
  3764  010BA4  C0BD  FFF7         	movff	printf@f+1,tblptrh
  3765  010BA8  0100               	movlb	0	; () banked
  3766  010BAA  4BBC               	infsnz	printf@f& (0+255),f,b
  3767  010BAC  2BBD               	incf	(printf@f+1)& (0+255),f,b
  3768  010BAE                     	if	0	;tblptru may be non-zero
  3769  010BAE                     	endif
  3770  010BAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3771  010BAE  0E00               	movlw	low (__mediumconst shr (0+16))
  3772  010BB0  6EF8               	movwf	tblptru,c
  3773  010BB2                     	endif
  3774  010BB2  0008               	tblrd		*
  3775  010BB4  CFF5 F0C7          	movff	tablat,printf@c
  3776  010BB8  51C7               	movf	printf@c& (0+255),w,b
  3777  010BBA  B4D8               	btfsc	status,2,c
  3778  010BBC  0012               	return	
  3779  010BBE  D766               	goto	l973
  3780  010BC0                     __end_of_printf:
  3781                           	opt stack 0
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           postdec1	equ	0xFE5
  3792                           fsr1l	equ	0xFE1
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _putch *****************
  3801 ;; Defined at:
  3802 ;;		line 178 in file "mcc_generated_files/eusart2.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  txData          1    wreg     unsigned char 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  txData          1    1[BANK0 ] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;Total ram usage:        1 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    6
  3823 ;; This function calls:
  3824 ;;		_EUSART2_Write
  3825 ;; This function is called by:
  3826 ;;		_printf
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text9
  3831  012416                     __ptext9:
  3832                           	opt stack 0
  3833  012416                     _putch:
  3834                           	opt stack 21
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;incstack = 0
  3838                           ;putch@txData stored from wreg
  3839  012416  0100               	movlb	0	; () banked
  3840  012418  6FB1               	movwf	putch@txData& (0+255),b
  3841                           
  3842                           ;eusart2.c: 180: EUSART2_Write(txData);
  3843  01241A  0100               	movlb	0	; () banked
  3844  01241C  51B1               	movf	putch@txData& (0+255),w,b
  3845  01241E  ECC2  F08E         	call	_EUSART2_Write
  3846  012422  0012               	return		;funcret
  3847  012424                     __end_of_putch:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           postdec1	equ	0xFE5
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _EUSART2_Write *****************
  3868 ;; Defined at:
  3869 ;;		line 150 in file "mcc_generated_files/eusart2.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  txData          1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  txData          1    0[BANK0 ] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;Total ram usage:        1 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    5
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_putch
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text10
  3898  011D84                     __ptext10:
  3899                           	opt stack 0
  3900  011D84                     _EUSART2_Write:
  3901                           	opt stack 21
  3902                           
  3903                           ;incstack = 0
  3904                           ;EUSART2_Write@txData stored from wreg
  3905  011D84  0100               	movlb	0	; () banked
  3906  011D86  6FB0               	movwf	EUSART2_Write@txData& (0+255),b
  3907  011D88                     
  3908                           ;eusart2.c: 153: {
  3909                           
  3910                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
  3911  011D88  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  3912  011D8A  B4D8               	btfsc	status,2,c
  3913  011D8C  D7FD               	goto	l4355
  3914                           
  3915                           ;eusart2.c: 154: }
  3916                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
  3917  011D8E  010E               	movlb	14	; () banked
  3918  011D90  BD2C               	btfsc	44,6,b	;volatile
  3919  011D92  D003               	goto	l197
  3920                           
  3921                           ; BSR set to: 14
  3922                           ;eusart2.c: 157: {
  3923                           ;eusart2.c: 158: TX2REG = txData;
  3924  011D94  C0B0  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
  3925                           
  3926                           ;eusart2.c: 159: }
  3927  011D98  D012               	goto	l198
  3928  011D9A                     l197:
  3929                           
  3930                           ; BSR set to: 14
  3931                           ;eusart2.c: 160: else
  3932                           ;eusart2.c: 161: {
  3933                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
  3934  011D9A  9D2C               	bcf	44,6,b	;volatile
  3935                           
  3936                           ; BSR set to: 14
  3937                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
  3938  011D9C  5041               	movf	_eusart2TxHead,w,c	;volatile
  3939  011D9E  0D01               	mullw	1
  3940  011DA0  0E00               	movlw	low _eusart2TxBuffer
  3941  011DA2  24F3               	addwf	prodl,w,c
  3942  011DA4  6ED9               	movwf	fsr2l,c
  3943  011DA6  0E02               	movlw	high _eusart2TxBuffer
  3944  011DA8  20F4               	addwfc	prodh,w,c
  3945  011DAA  6EDA               	movwf	fsr2h,c
  3946  011DAC  C0B0  FFDF         	movff	EUSART2_Write@txData,indf2
  3947                           
  3948                           ; BSR set to: 14
  3949  011DB0  2A41               	incf	_eusart2TxHead,f,c	;volatile
  3950                           
  3951                           ; BSR set to: 14
  3952                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  3953  011DB2  0E3F               	movlw	63
  3954  011DB4  6441               	cpfsgt	_eusart2TxHead,c	;volatile
  3955  011DB6  D002               	goto	l199
  3956                           
  3957                           ; BSR set to: 14
  3958                           ;eusart2.c: 165: {
  3959                           ;eusart2.c: 166: eusart2TxHead = 0;
  3960  011DB8  0E00               	movlw	0
  3961  011DBA  6E41               	movwf	_eusart2TxHead,c	;volatile
  3962  011DBC                     l199:
  3963                           
  3964                           ; BSR set to: 14
  3965                           ;eusart2.c: 167: }
  3966                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
  3967                           
  3968                           ; BSR set to: 14
  3969  011DBC  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  3970  011DBE                     l198:
  3971                           
  3972                           ; BSR set to: 14
  3973                           ;eusart2.c: 169: }
  3974                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
  3975                           
  3976                           ; BSR set to: 14
  3977  011DBE  8D2C               	bsf	44,6,b	;volatile
  3978                           
  3979                           ; BSR set to: 14
  3980  011DC0  0012               	return		;funcret
  3981  011DC2                     __end_of_EUSART2_Write:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function ___lwmod *****************
  4002 ;; Defined at:
  4003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  dividend        2    7[BANK0 ] unsigned int 
  4006 ;;  divisor         2    9[BANK0 ] unsigned int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  counter         1   11[BANK0 ] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  2    7[BANK0 ] unsigned int 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4021 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4022 ;;Total ram usage:        5 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    5
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_printf
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text11
  4033  011CC0                     __ptext11:
  4034                           	opt stack 0
  4035  011CC0                     ___lwmod:
  4036                           	opt stack 22
  4037                           
  4038                           ; BSR set to: 14
  4039                           ;incstack = 0
  4040  011CC0  0100               	movlb	0	; () banked
  4041  011CC2  51B9               	movf	___lwmod@divisor& (0+255),w,b
  4042  011CC4  11BA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4043  011CC6  B4D8               	btfsc	status,2,c
  4044  011CC8  D018               	goto	l1414
  4045                           
  4046                           ; BSR set to: 0
  4047  011CCA  0E01               	movlw	1
  4048  011CCC  6FBB               	movwf	___lwmod@counter& (0+255),b
  4049  011CCE  D004               	goto	l1409
  4050  011CD0                     
  4051                           ; BSR set to: 0
  4052                           
  4053                           ; BSR set to: 0
  4054  011CD0  90D8               	bcf	status,0,c
  4055  011CD2  37B9               	rlcf	___lwmod@divisor& (0+255),f,b
  4056  011CD4  37BA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4057  011CD6  2BBB               	incf	___lwmod@counter& (0+255),f,b
  4058  011CD8                     l1409:
  4059                           
  4060                           ; BSR set to: 0
  4061                           
  4062                           ; BSR set to: 0
  4063  011CD8  AFBA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4064  011CDA  D7FA               	goto	l1410
  4065  011CDC                     u5100:
  4066                           
  4067                           ; BSR set to: 0
  4068                           
  4069                           ; BSR set to: 0
  4070                           
  4071                           ; BSR set to: 0
  4072  011CDC  51B9               	movf	___lwmod@divisor& (0+255),w,b
  4073  011CDE  5DB7               	subwf	___lwmod@dividend& (0+255),w,b
  4074  011CE0  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4075  011CE2  59B8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4076  011CE4  A0D8               	btfss	status,0,c
  4077  011CE6  D004               	goto	l1413
  4078                           
  4079                           ; BSR set to: 0
  4080  011CE8  51B9               	movf	___lwmod@divisor& (0+255),w,b
  4081  011CEA  5FB7               	subwf	___lwmod@dividend& (0+255),f,b
  4082  011CEC  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4083  011CEE  5BB8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4084  011CF0                     l1413:
  4085                           
  4086                           ; BSR set to: 0
  4087                           
  4088                           ; BSR set to: 0
  4089  011CF0  90D8               	bcf	status,0,c
  4090  011CF2  33BA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4091  011CF4  33B9               	rrcf	___lwmod@divisor& (0+255),f,b
  4092                           
  4093                           ; BSR set to: 0
  4094  011CF6  2FBB               	decfsz	___lwmod@counter& (0+255),f,b
  4095  011CF8  D7F1               	goto	u5100
  4096  011CFA                     l1414:
  4097                           
  4098                           ; BSR set to: 0
  4099                           
  4100                           ; BSR set to: 0
  4101  011CFA  C0B7  F0B7         	movff	___lwmod@dividend,?___lwmod
  4102  011CFE  C0B8  F0B8         	movff	___lwmod@dividend+1,?___lwmod+1
  4103                           
  4104                           ; BSR set to: 0
  4105  011D02  0012               	return		;funcret
  4106  011D04                     __end_of___lwmod:
  4107                           	opt stack 0
  4108                           tblptru	equ	0xFF8
  4109                           tblptrh	equ	0xFF7
  4110                           tblptrl	equ	0xFF6
  4111                           tablat	equ	0xFF5
  4112                           prodh	equ	0xFF4
  4113                           prodl	equ	0xFF3
  4114                           intcon	equ	0xFF2
  4115                           postinc0	equ	0xFEE
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           fsr1l	equ	0xFE1
  4119                           indf2	equ	0xFDF
  4120                           postinc2	equ	0xFDE
  4121                           postdec2	equ	0xFDD
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function ___lwdiv *****************
  4127 ;; Defined at:
  4128 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  dividend        2    0[BANK0 ] unsigned int 
  4131 ;;  divisor         2    2[BANK0 ] unsigned int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quotient        2    5[BANK0 ] unsigned int 
  4134 ;;  counter         1    4[BANK0 ] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  2    0[BANK0 ] unsigned int 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;Total ram usage:        7 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    5
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_printf
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text12
  4159  011A96                     __ptext12:
  4160                           	opt stack 0
  4161  011A96                     ___lwdiv:
  4162                           	opt stack 22
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;incstack = 0
  4166  011A96  0E00               	movlw	0
  4167  011A98  0100               	movlb	0	; () banked
  4168  011A9A  6FB6               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4169  011A9C  0E00               	movlw	0
  4170  011A9E  6FB5               	movwf	___lwdiv@quotient& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173  011AA0  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4174  011AA2  11B3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4175  011AA4  B4D8               	btfsc	status,2,c
  4176  011AA6  D01C               	goto	l1404
  4177                           
  4178                           ; BSR set to: 0
  4179  011AA8  0E01               	movlw	1
  4180  011AAA  6FB4               	movwf	___lwdiv@counter& (0+255),b
  4181  011AAC  D004               	goto	l1399
  4182  011AAE                     
  4183                           ; BSR set to: 0
  4184                           
  4185                           ; BSR set to: 0
  4186  011AAE  90D8               	bcf	status,0,c
  4187  011AB0  37B2               	rlcf	___lwdiv@divisor& (0+255),f,b
  4188  011AB2  37B3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4189  011AB4  2BB4               	incf	___lwdiv@counter& (0+255),f,b
  4190  011AB6                     l1399:
  4191                           
  4192                           ; BSR set to: 0
  4193                           
  4194                           ; BSR set to: 0
  4195  011AB6  AFB3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4196  011AB8  D7FA               	goto	l1400
  4197  011ABA                     u5070:
  4198                           
  4199                           ; BSR set to: 0
  4200                           
  4201                           ; BSR set to: 0
  4202                           
  4203                           ; BSR set to: 0
  4204  011ABA  90D8               	bcf	status,0,c
  4205  011ABC  37B5               	rlcf	___lwdiv@quotient& (0+255),f,b
  4206  011ABE  37B6               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4207                           
  4208                           ; BSR set to: 0
  4209  011AC0  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4210  011AC2  5DB0               	subwf	___lwdiv@dividend& (0+255),w,b
  4211  011AC4  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4212  011AC6  59B1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4213  011AC8  A0D8               	btfss	status,0,c
  4214  011ACA  D005               	goto	l1403
  4215                           
  4216                           ; BSR set to: 0
  4217  011ACC  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  4218  011ACE  5FB0               	subwf	___lwdiv@dividend& (0+255),f,b
  4219  011AD0  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4220  011AD2  5BB1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4221                           
  4222                           ; BSR set to: 0
  4223  011AD4  81B5               	bsf	___lwdiv@quotient& (0+255),0,b
  4224  011AD6                     l1403:
  4225                           
  4226                           ; BSR set to: 0
  4227                           
  4228                           ; BSR set to: 0
  4229  011AD6  90D8               	bcf	status,0,c
  4230  011AD8  33B3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4231  011ADA  33B2               	rrcf	___lwdiv@divisor& (0+255),f,b
  4232                           
  4233                           ; BSR set to: 0
  4234  011ADC  2FB4               	decfsz	___lwdiv@counter& (0+255),f,b
  4235  011ADE  D7ED               	goto	u5070
  4236  011AE0                     l1404:
  4237                           
  4238                           ; BSR set to: 0
  4239                           
  4240                           ; BSR set to: 0
  4241  011AE0  C0B5  F0B0         	movff	___lwdiv@quotient,?___lwdiv
  4242  011AE4  C0B6  F0B1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4243                           
  4244                           ; BSR set to: 0
  4245  011AE8  0012               	return		;funcret
  4246  011AEA                     __end_of___lwdiv:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           postinc0	equ	0xFEE
  4256                           wreg	equ	0xFE8
  4257                           postdec1	equ	0xFE5
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           postdec2	equ	0xFDD
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _SYSTEM_Initialize *****************
  4267 ;; Defined at:
  4268 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    9
  4289 ;; This function calls:
  4290 ;;		_EUSART2_Initialize
  4291 ;;		_INTERRUPT_Initialize
  4292 ;;		_MTOUCH_Initialize
  4293 ;;		_OSCILLATOR_Initialize
  4294 ;;		_PIN_MANAGER_Initialize
  4295 ;;		_PMD_Initialize
  4296 ;; This function is called by:
  4297 ;;		_main
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text13
  4302  01230E                     __ptext13:
  4303                           	opt stack 0
  4304  01230E                     _SYSTEM_Initialize:
  4305                           	opt stack 21
  4306                           
  4307                           ;mcc.c: 52: INTERRUPT_Initialize();
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;incstack = 0
  4311  01230E  EC26  F092         	call	_INTERRUPT_Initialize	;wreg free
  4312                           
  4313                           ;mcc.c: 53: PMD_Initialize();
  4314  012312  EC79  F091         	call	_PMD_Initialize	;wreg free
  4315                           
  4316                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4317  012316  EC4E  F08B         	call	_PIN_MANAGER_Initialize	;wreg free
  4318                           
  4319                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4320  01231A  ECBB  F091         	call	_OSCILLATOR_Initialize	;wreg free
  4321                           
  4322                           ;mcc.c: 56: EUSART2_Initialize();
  4323  01231E  EC1C  F08D         	call	_EUSART2_Initialize	;wreg free
  4324                           
  4325                           ;mcc.c: 57: MTOUCH_Initialize();
  4326  012322  ECDF  F091         	call	_MTOUCH_Initialize	;wreg free
  4327  012326  0012               	return		;funcret
  4328  012328                     __end_of_SYSTEM_Initialize:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           fsr1l	equ	0xFE1
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           postdec2	equ	0xFDD
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function _PMD_Initialize *****************
  4349 ;; Defined at:
  4350 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    5
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_SYSTEM_Initialize
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text14
  4379  0122F2                     __ptext14:
  4380                           	opt stack 0
  4381  0122F2                     _PMD_Initialize:
  4382                           	opt stack 24
  4383                           
  4384                           ;mcc.c: 77: PMD0 = 0x00;
  4385                           
  4386                           ;incstack = 0
  4387  0122F2  0E00               	movlw	0
  4388  0122F4  010E               	movlb	14	; () banked
  4389  0122F6  6F4C               	movwf	76,b	;volatile
  4390                           
  4391                           ;mcc.c: 79: PMD1 = 0x00;
  4392  0122F8  0E00               	movlw	0
  4393  0122FA  6F4D               	movwf	77,b	;volatile
  4394                           
  4395                           ;mcc.c: 81: PMD2 = 0x00;
  4396  0122FC  0E00               	movlw	0
  4397  0122FE  6F4E               	movwf	78,b	;volatile
  4398                           
  4399                           ;mcc.c: 83: PMD3 = 0x00;
  4400  012300  0E00               	movlw	0
  4401  012302  6F4F               	movwf	79,b	;volatile
  4402                           
  4403                           ;mcc.c: 85: PMD4 = 0x00;
  4404  012304  0E00               	movlw	0
  4405  012306  6F50               	movwf	80,b	;volatile
  4406                           
  4407                           ;mcc.c: 87: PMD5 = 0x00;
  4408  012308  0E00               	movlw	0
  4409  01230A  6F51               	movwf	81,b	;volatile
  4410                           
  4411                           ; BSR set to: 14
  4412  01230C  0012               	return		;funcret
  4413  01230E                     __end_of_PMD_Initialize:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           intcon	equ	0xFF2
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postdec1	equ	0xFE5
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _PIN_MANAGER_Initialize *****************
  4434 ;; Defined at:
  4435 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;Total ram usage:        0 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    5
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_SYSTEM_Initialize
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text15
  4464  01169C                     __ptext15:
  4465                           	opt stack 0
  4466  01169C                     _PIN_MANAGER_Initialize:
  4467                           	opt stack 24
  4468                           
  4469                           ;pin_manager.c: 62: LATE = 0x00;
  4470                           
  4471                           ; BSR set to: 14
  4472                           ;incstack = 0
  4473  01169C  0E00               	movlw	0
  4474  01169E  6E7D               	movwf	3965,c	;volatile
  4475                           
  4476                           ;pin_manager.c: 63: LATD = 0x00;
  4477  0116A0  0E00               	movlw	0
  4478  0116A2  6E7C               	movwf	3964,c	;volatile
  4479                           
  4480                           ;pin_manager.c: 64: LATA = 0x00;
  4481  0116A4  0E00               	movlw	0
  4482  0116A6  6E79               	movwf	3961,c	;volatile
  4483                           
  4484                           ;pin_manager.c: 65: LATF = 0x1F;
  4485  0116A8  0E1F               	movlw	31
  4486  0116AA  6E7E               	movwf	3966,c	;volatile
  4487                           
  4488                           ;pin_manager.c: 66: LATB = 0x00;
  4489  0116AC  0E00               	movlw	0
  4490  0116AE  6E7A               	movwf	3962,c	;volatile
  4491                           
  4492                           ;pin_manager.c: 67: LATG = 0x00;
  4493  0116B0  0E00               	movlw	0
  4494  0116B2  6E7F               	movwf	3967,c	;volatile
  4495                           
  4496                           ;pin_manager.c: 68: LATC = 0x00;
  4497  0116B4  0E00               	movlw	0
  4498  0116B6  6E7B               	movwf	3963,c	;volatile
  4499                           
  4500                           ;pin_manager.c: 69: LATH = 0x00;
  4501  0116B8  0E00               	movlw	0
  4502  0116BA  6E80               	movwf	3968,c	;volatile
  4503                           
  4504                           ;pin_manager.c: 74: TRISE = 0xFF;
  4505  0116BC  6885               	setf	3973,c	;volatile
  4506                           
  4507                           ;pin_manager.c: 75: TRISF = 0xE0;
  4508  0116BE  0EE0               	movlw	224
  4509  0116C0  6E86               	movwf	3974,c	;volatile
  4510                           
  4511                           ;pin_manager.c: 76: TRISA = 0xFF;
  4512  0116C2  6881               	setf	3969,c	;volatile
  4513                           
  4514                           ;pin_manager.c: 77: TRISG = 0x5F;
  4515  0116C4  0E5F               	movlw	95
  4516  0116C6  6E87               	movwf	3975,c	;volatile
  4517                           
  4518                           ;pin_manager.c: 78: TRISB = 0xFF;
  4519  0116C8  6882               	setf	3970,c	;volatile
  4520                           
  4521                           ;pin_manager.c: 79: TRISH = 0x0F;
  4522  0116CA  0E0F               	movlw	15
  4523  0116CC  6E88               	movwf	3976,c	;volatile
  4524                           
  4525                           ;pin_manager.c: 80: TRISC = 0xFF;
  4526  0116CE  6883               	setf	3971,c	;volatile
  4527                           
  4528                           ;pin_manager.c: 81: TRISD = 0xFF;
  4529  0116D0  6884               	setf	3972,c	;volatile
  4530                           
  4531                           ;pin_manager.c: 86: ANSELD = 0xFF;
  4532  0116D2  010E               	movlb	14	; () banked
  4533  0116D4  69A7               	setf	167,b	;volatile
  4534                           
  4535                           ; BSR set to: 14
  4536                           ;pin_manager.c: 87: ANSELB = 0xFF;
  4537  0116D6  699A               	setf	154,b	;volatile
  4538                           
  4539                           ; BSR set to: 14
  4540                           ;pin_manager.c: 88: ANSELE = 0xFF;
  4541  0116D8  69AF               	setf	175,b	;volatile
  4542                           
  4543                           ;pin_manager.c: 89: ANSELG = 0xBF;
  4544  0116DA  0EBF               	movlw	191
  4545  0116DC  6FBC               	movwf	188,b	;volatile
  4546                           
  4547                           ;pin_manager.c: 90: ANSELF = 0xE0;
  4548  0116DE  0EE0               	movlw	224
  4549  0116E0  6FB4               	movwf	180,b	;volatile
  4550                           
  4551                           ; BSR set to: 14
  4552                           ;pin_manager.c: 91: ANSELA = 0xFF;
  4553  0116E2  6992               	setf	146,b	;volatile
  4554                           
  4555                           ;pin_manager.c: 96: WPUD = 0x00;
  4556  0116E4  0E00               	movlw	0
  4557  0116E6  6FA6               	movwf	166,b	;volatile
  4558                           
  4559                           ;pin_manager.c: 97: WPUF = 0x00;
  4560  0116E8  0E00               	movlw	0
  4561  0116EA  6FB3               	movwf	179,b	;volatile
  4562                           
  4563                           ;pin_manager.c: 98: WPUE = 0x00;
  4564  0116EC  0E00               	movlw	0
  4565  0116EE  6FAE               	movwf	174,b	;volatile
  4566                           
  4567                           ;pin_manager.c: 99: WPUB = 0x00;
  4568  0116F0  0E00               	movlw	0
  4569  0116F2  6F99               	movwf	153,b	;volatile
  4570                           
  4571                           ;pin_manager.c: 100: WPUG = 0x00;
  4572  0116F4  0E00               	movlw	0
  4573  0116F6  6FBB               	movwf	187,b	;volatile
  4574                           
  4575                           ;pin_manager.c: 101: WPUA = 0x00;
  4576  0116F8  0E00               	movlw	0
  4577  0116FA  6F91               	movwf	145,b	;volatile
  4578                           
  4579                           ;pin_manager.c: 102: WPUC = 0x00;
  4580  0116FC  0E00               	movlw	0
  4581  0116FE  6FA1               	movwf	161,b	;volatile
  4582                           
  4583                           ;pin_manager.c: 103: WPUH = 0x00;
  4584  011700  0E00               	movlw	0
  4585  011702  6FC0               	movwf	192,b	;volatile
  4586                           
  4587                           ;pin_manager.c: 108: ODCONE = 0x00;
  4588  011704  0E00               	movlw	0
  4589  011706  6FAD               	movwf	173,b	;volatile
  4590                           
  4591                           ;pin_manager.c: 109: ODCONF = 0x1F;
  4592  011708  0E1F               	movlw	31
  4593  01170A  6FB2               	movwf	178,b	;volatile
  4594                           
  4595                           ;pin_manager.c: 110: ODCONA = 0x00;
  4596  01170C  0E00               	movlw	0
  4597  01170E  6F90               	movwf	144,b	;volatile
  4598                           
  4599                           ;pin_manager.c: 111: ODCONG = 0x00;
  4600  011710  0E00               	movlw	0
  4601  011712  6FBA               	movwf	186,b	;volatile
  4602                           
  4603                           ;pin_manager.c: 112: ODCONB = 0x00;
  4604  011714  0E00               	movlw	0
  4605  011716  6F98               	movwf	152,b	;volatile
  4606                           
  4607                           ;pin_manager.c: 113: ODCONH = 0x00;
  4608  011718  0E00               	movlw	0
  4609  01171A  6FBF               	movwf	191,b	;volatile
  4610                           
  4611                           ;pin_manager.c: 114: ODCONC = 0x00;
  4612  01171C  0E00               	movlw	0
  4613  01171E  6FA0               	movwf	160,b	;volatile
  4614                           
  4615                           ;pin_manager.c: 115: ODCOND = 0x00;
  4616  011720  0E00               	movlw	0
  4617  011722  6FA5               	movwf	165,b	;volatile
  4618                           
  4619                           ;pin_manager.c: 124: RG7PPS = 0x0E;
  4620  011724  0E0E               	movlw	14
  4621  011726  6F89               	movwf	137,b	;volatile
  4622                           
  4623                           ; BSR set to: 14
  4624                           ;pin_manager.c: 125: RX2PPSbits.RX2PPS = 0x36;
  4625  011728  9111               	bcf	17,0,b	;volatile
  4626  01172A  8311               	bsf	17,1,b	;volatile
  4627  01172C  8511               	bsf	17,2,b	;volatile
  4628  01172E  9711               	bcf	17,3,b	;volatile
  4629  011730  8911               	bsf	17,4,b	;volatile
  4630  011732  8B11               	bsf	17,5,b	;volatile
  4631                           
  4632                           ; BSR set to: 14
  4633  011734  0012               	return		;funcret
  4634  011736                     __end_of_PIN_MANAGER_Initialize:
  4635                           	opt stack 0
  4636                           tblptru	equ	0xFF8
  4637                           tblptrh	equ	0xFF7
  4638                           tblptrl	equ	0xFF6
  4639                           tablat	equ	0xFF5
  4640                           prodh	equ	0xFF4
  4641                           prodl	equ	0xFF3
  4642                           intcon	equ	0xFF2
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           postdec1	equ	0xFE5
  4646                           fsr1l	equ	0xFE1
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           fsr2h	equ	0xFDA
  4651                           fsr2l	equ	0xFD9
  4652                           status	equ	0xFD8
  4653                           
  4654 ;; *************** function _OSCILLATOR_Initialize *****************
  4655 ;; Defined at:
  4656 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    5
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_SYSTEM_Initialize
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text16
  4685  012376                     __ptext16:
  4686                           	opt stack 0
  4687  012376                     _OSCILLATOR_Initialize:
  4688                           	opt stack 24
  4689                           
  4690                           ;mcc.c: 63: OSCCON1 = 0x60;
  4691                           
  4692                           ; BSR set to: 14
  4693                           ;incstack = 0
  4694  012376  0E60               	movlw	96
  4695  012378  010E               	movlb	14	; () banked
  4696  01237A  6F43               	movwf	67,b	;volatile
  4697                           
  4698                           ;mcc.c: 65: OSCCON3 = 0x00;
  4699  01237C  0E00               	movlw	0
  4700  01237E  6F45               	movwf	69,b	;volatile
  4701                           
  4702                           ;mcc.c: 67: OSCEN = 0x00;
  4703  012380  0E00               	movlw	0
  4704  012382  6F47               	movwf	71,b	;volatile
  4705                           
  4706                           ;mcc.c: 69: OSCFRQ = 0x08;
  4707  012384  0E08               	movlw	8
  4708  012386  6F49               	movwf	73,b	;volatile
  4709                           
  4710                           ;mcc.c: 71: OSCTUNE = 0x00;
  4711  012388  0E00               	movlw	0
  4712  01238A  6F48               	movwf	72,b	;volatile
  4713                           
  4714                           ; BSR set to: 14
  4715  01238C  0012               	return		;funcret
  4716  01238E                     __end_of_OSCILLATOR_Initialize:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postdec1	equ	0xFE5
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _MTOUCH_Initialize *****************
  4737 ;; Defined at:
  4738 ;;		line 75 in file "mcc_generated_files/mtouch/mtouch.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    8
  4759 ;; This function calls:
  4760 ;;		_MTOUCH_Button_InitializeAll
  4761 ;;		_MTOUCH_Sensor_InitializeAll
  4762 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4763 ;;		_MTOUCH_Sensor_Scan_Initialize
  4764 ;; This function is called by:
  4765 ;;		_SYSTEM_Initialize
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text17
  4770  0123BE                     __ptext17:
  4771                           	opt stack 0
  4772  0123BE                     _MTOUCH_Initialize:
  4773                           	opt stack 21
  4774                           
  4775                           ;mtouch.c: 77: MTOUCH_Sensor_InitializeAll();
  4776                           
  4777                           ; BSR set to: 14
  4778                           ;incstack = 0
  4779  0123BE  EC75  F08F         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  4780                           
  4781                           ;mtouch.c: 78: MTOUCH_Button_InitializeAll();
  4782  0123C2  EC91  F08F         	call	_MTOUCH_Button_InitializeAll	;wreg free
  4783                           
  4784                           ;mtouch.c: 79: MTOUCH_Sensor_Sampled_ResetAll();
  4785  0123C6  EC62  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  4786                           
  4787                           ;mtouch.c: 80: MTOUCH_Sensor_Scan_Initialize();
  4788  0123CA  EC40  F092         	call	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  4789  0123CE  0012               	return		;funcret
  4790  0123D0                     __end_of_MTOUCH_Initialize:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  4811 ;; Defined at:
  4812 ;;		line 327 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    6
  4833 ;; This function calls:
  4834 ;;		_MTOUCH_Sensor_ADCC_Initialize
  4835 ;; This function is called by:
  4836 ;;		_MTOUCH_Initialize
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text18
  4841  012480                     __ptext18:
  4842                           	opt stack 0
  4843  012480                     _MTOUCH_Sensor_Scan_Initialize:
  4844                           	opt stack 22
  4845                           
  4846                           ;mtouch_sensor.c: 329: MTOUCH_Sensor_ADCC_Initialize();
  4847                           
  4848                           ;incstack = 0
  4849  012480  ECE1  F08E         	call	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  4850  012484  0012               	return		;funcret
  4851  012486                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  4852                           	opt stack 0
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           postdec1	equ	0xFE5
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           fsr2h	equ	0xFDA
  4868                           fsr2l	equ	0xFD9
  4869                           status	equ	0xFD8
  4870                           
  4871 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  4872 ;; Defined at:
  4873 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    5
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		_MTOUCH_Sensor_Scan_Initialize
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text19
  4902  011DC2                     __ptext19:
  4903                           	opt stack 0
  4904  011DC2                     _MTOUCH_Sensor_ADCC_Initialize:
  4905                           	opt stack 22
  4906                           
  4907                           ;mtouch_sensor.c: 254: ADCLK = 0x1f;
  4908                           
  4909                           ;incstack = 0
  4910  011DC2  0E1F               	movlw	31
  4911  011DC4  010F               	movlb	15	; () banked
  4912  011DC6  6F57               	movwf	87,b	;volatile
  4913                           
  4914                           ;mtouch_sensor.c: 256: ADREF = 0x00;
  4915  011DC8  0E00               	movlw	0
  4916  011DCA  6F58               	movwf	88,b	;volatile
  4917                           
  4918                           ;mtouch_sensor.c: 258: ADCAP = 0x00;
  4919  011DCC  0E00               	movlw	0
  4920  011DCE  6F5D               	movwf	93,b	;volatile
  4921                           
  4922                           ;mtouch_sensor.c: 260: ADLTHL = 0x00;
  4923  011DD0  0E00               	movlw	0
  4924  011DD2  6E6A               	movwf	3946,c	;volatile
  4925                           
  4926                           ;mtouch_sensor.c: 262: ADLTHH = 0x00;
  4927  011DD4  0E00               	movlw	0
  4928  011DD6  6E6B               	movwf	3947,c	;volatile
  4929                           
  4930                           ;mtouch_sensor.c: 264: ADUTHL = 0x00;
  4931  011DD8  0E00               	movlw	0
  4932  011DDA  6E6C               	movwf	3948,c	;volatile
  4933                           
  4934                           ;mtouch_sensor.c: 266: ADUTHH = 0x00;
  4935  011DDC  0E00               	movlw	0
  4936  011DDE  6E6D               	movwf	3949,c	;volatile
  4937                           
  4938                           ;mtouch_sensor.c: 268: ADSTPTL = 0x00;
  4939  011DE0  0E00               	movlw	0
  4940  011DE2  6E68               	movwf	3944,c	;volatile
  4941                           
  4942                           ;mtouch_sensor.c: 270: ADSTPTH = 0x00;
  4943  011DE4  0E00               	movlw	0
  4944  011DE6  6E69               	movwf	3945,c	;volatile
  4945                           
  4946                           ;mtouch_sensor.c: 273: ADCON1 = 0x41;
  4947  011DE8  0E41               	movlw	65
  4948  011DEA  6F59               	movwf	89,b	;volatile
  4949                           
  4950                           ;mtouch_sensor.c: 275: ADCON2 = 0x8B;
  4951  011DEC  0E8B               	movlw	139
  4952  011DEE  6F5A               	movwf	90,b	;volatile
  4953                           
  4954                           ;mtouch_sensor.c: 278: ADCON3 = 0x0F;
  4955  011DF0  0E0F               	movlw	15
  4956  011DF2  6F5B               	movwf	91,b	;volatile
  4957                           
  4958                           ;mtouch_sensor.c: 281: ADCON0 = 0xC4;
  4959  011DF4  0EC4               	movlw	196
  4960  011DF6  6E60               	movwf	3936,c	;volatile
  4961                           
  4962                           ; BSR set to: 15
  4963                           ;mtouch_sensor.c: 284: PIR1bits.ADTIF = 0;
  4964  011DF8  010E               	movlb	14	; () banked
  4965  011DFA  9334               	bcf	52,1,b	;volatile
  4966                           
  4967                           ; BSR set to: 14
  4968                           ;mtouch_sensor.c: 286: PIE1bits.ADTIE = 1;
  4969  011DFC  832A               	bsf	42,1,b	;volatile
  4970                           
  4971                           ; BSR set to: 14
  4972  011DFE  0012               	return		;funcret
  4973  011E00                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4994 ;; Defined at:
  4995 ;;		line 290 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  sensor          1   11[BANK0 ] enum E17513
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5013 ;;Total ram usage:        1 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    7
  5016 ;; This function calls:
  5017 ;;		_MTOUCH_Sensor_Initialize
  5018 ;;		_memcpy
  5019 ;; This function is called by:
  5020 ;;		_MTOUCH_Initialize
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text20
  5025  011EEA                     __ptext20:
  5026                           	opt stack 0
  5027  011EEA                     _MTOUCH_Sensor_InitializeAll:
  5028                           	opt stack 21
  5029                           
  5030                           ;mtouch_sensor.c: 292: enum mtouch_sensor_names sensor;
  5031                           ;mtouch_sensor.c: 294: memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init
      +                          ));
  5032                           
  5033                           ; BSR set to: 14
  5034                           ;incstack = 0
  5035  011EEA  0E83               	movlw	low _mtouch_sensor
  5036  011EEC  0100               	movlb	0	; () banked
  5037  011EEE  6FB0               	movwf	memcpy@d1& (0+255),b
  5038  011EF0  0E00               	movlw	high _mtouch_sensor
  5039  011EF2  6FB1               	movwf	(memcpy@d1+1)& (0+255),b
  5040  011EF4  0E25               	movlw	low _mtouch_sensor_init
  5041  011EF6  6FB2               	movwf	memcpy@s1& (0+255),b
  5042  011EF8  0EFC               	movlw	high _mtouch_sensor_init
  5043  011EFA  6FB3               	movwf	(memcpy@s1+1)& (0+255),b
  5044  011EFC  0E00               	movlw	0
  5045  011EFE  6FB5               	movwf	(memcpy@n+1)& (0+255),b
  5046  011F00  0E2D               	movlw	45
  5047  011F02  6FB4               	movwf	memcpy@n& (0+255),b
  5048  011F04  ECEF  F08D         	call	_memcpy	;wreg free
  5049                           
  5050                           ;mtouch_sensor.c: 296: for (sensor = 0; sensor < 5; sensor++)
  5051  011F08  0E00               	movlw	0
  5052  011F0A  0100               	movlb	0	; () banked
  5053  011F0C  6FBB               	movwf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  5054  011F0E                     l4807:
  5055                           
  5056                           ; BSR set to: 0
  5057  011F0E  0E04               	movlw	4
  5058  011F10  65BB               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  5059  011F12  D001               	goto	l569
  5060  011F14  0012               	return	
  5061  011F16                     l569:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;mtouch_sensor.c: 297: {
  5065                           ;mtouch_sensor.c: 298: MTOUCH_Sensor_Initialize(sensor);
  5066                           
  5067                           ; BSR set to: 0
  5068  011F16  51BB               	movf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),w,b
  5069  011F18  ECD8  F08B         	call	_MTOUCH_Sensor_Initialize
  5070  011F1C  0100               	movlb	0	; () banked
  5071  011F1E  2BBB               	incf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),f,b
  5072  011F20  D7F6               	goto	l4807
  5073  011F22                     __end_of_MTOUCH_Sensor_InitializeAll:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           postinc0	equ	0xFEE
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5094 ;; Defined at:
  5095 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  sensor          1    wreg     enum E17513
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;  sensor          1    2[BANK0 ] enum E17513
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      enum E17519
  5102 ;; Registers used:
  5103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5113 ;;Total ram usage:        1 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    6
  5116 ;; This function calls:
  5117 ;;		_MTOUCH_Sensor_Calibrate
  5118 ;;		_MTOUCH_Sensor_Enable
  5119 ;;		_Sensor_Sampled_Reset
  5120 ;; This function is called by:
  5121 ;;		_MTOUCH_Sensor_InitializeAll
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text21
  5126  0117B0                     __ptext21:
  5127                           	opt stack 0
  5128  0117B0                     _MTOUCH_Sensor_Initialize:
  5129                           	opt stack 21
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;incstack = 0
  5133                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5134  0117B0  0100               	movlb	0	; () banked
  5135  0117B2  6FB2               	movwf	MTOUCH_Sensor_Initialize@sensor& (0+255),b
  5136                           
  5137                           ;mtouch_sensor.c: 191: switch(sensor)
  5138  0117B4  D014               	goto	l544
  5139  0117B6                     l545:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;mtouch_sensor.c: 194: WPUEbits.WPUE2 = 0;
  5143  0117B6  010E               	movlb	14	; () banked
  5144  0117B8  95AE               	bcf	174,2,b	;volatile
  5145                           
  5146                           ;mtouch_sensor.c: 195: ANSELEbits.ANSELE2 = 0;
  5147  0117BA  95AF               	bcf	175,2,b	;volatile
  5148                           
  5149                           ;mtouch_sensor.c: 196: break;
  5150  0117BC  D022               	goto	l546
  5151  0117BE                     l547:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;mtouch_sensor.c: 198: WPUEbits.WPUE3 = 0;
  5155  0117BE  010E               	movlb	14	; () banked
  5156  0117C0  97AE               	bcf	174,3,b	;volatile
  5157                           
  5158                           ;mtouch_sensor.c: 199: ANSELEbits.ANSELE3 = 0;
  5159  0117C2  97AF               	bcf	175,3,b	;volatile
  5160                           
  5161                           ;mtouch_sensor.c: 200: break;
  5162  0117C4  D01E               	goto	l546
  5163  0117C6                     l548:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;mtouch_sensor.c: 202: WPUEbits.WPUE4 = 0;
  5167  0117C6  010E               	movlb	14	; () banked
  5168  0117C8  99AE               	bcf	174,4,b	;volatile
  5169                           
  5170                           ;mtouch_sensor.c: 203: ANSELEbits.ANSELE4 = 0;
  5171  0117CA  99AF               	bcf	175,4,b	;volatile
  5172                           
  5173                           ;mtouch_sensor.c: 204: break;
  5174  0117CC  D01A               	goto	l546
  5175  0117CE                     l549:
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;mtouch_sensor.c: 206: WPUEbits.WPUE5 = 0;
  5179  0117CE  010E               	movlb	14	; () banked
  5180  0117D0  9BAE               	bcf	174,5,b	;volatile
  5181                           
  5182                           ;mtouch_sensor.c: 207: ANSELEbits.ANSELE5 = 0;
  5183  0117D2  9BAF               	bcf	175,5,b	;volatile
  5184                           
  5185                           ;mtouch_sensor.c: 208: break;
  5186  0117D4  D016               	goto	l546
  5187  0117D6                     l550:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;mtouch_sensor.c: 210: WPUEbits.WPUE6 = 0;
  5191  0117D6  010E               	movlb	14	; () banked
  5192  0117D8  9DAE               	bcf	174,6,b	;volatile
  5193                           
  5194                           ;mtouch_sensor.c: 211: ANSELEbits.ANSELE6 = 0;
  5195  0117DA  9DAF               	bcf	175,6,b	;volatile
  5196                           
  5197                           ;mtouch_sensor.c: 212: break;
  5198  0117DC  D012               	goto	l546
  5199  0117DE                     l544:
  5200                           
  5201                           ; BSR set to: 14
  5202  0117DE  0100               	movlb	0	; () banked
  5203  0117E0  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5204                           
  5205                           ; Switch size 1, requested type "space"
  5206                           ; Number of cases is 5, Range of values is 0 to 4
  5207                           ; switch strategies available:
  5208                           ; Name         Instructions Cycles
  5209                           ; simple_byte           16     9 (average)
  5210                           ;	Chosen strategy is simple_byte
  5211  0117E2  0A00               	xorlw	0	; case 0
  5212  0117E4  B4D8               	btfsc	status,2,c
  5213  0117E6  D7E7               	goto	l545
  5214  0117E8  0A01               	xorlw	1	; case 1
  5215  0117EA  B4D8               	btfsc	status,2,c
  5216  0117EC  D7E8               	goto	l547
  5217  0117EE  0A03               	xorlw	3	; case 2
  5218  0117F0  B4D8               	btfsc	status,2,c
  5219  0117F2  D7E9               	goto	l548
  5220  0117F4  0A01               	xorlw	1	; case 3
  5221  0117F6  B4D8               	btfsc	status,2,c
  5222  0117F8  D7EA               	goto	l549
  5223  0117FA  0A07               	xorlw	7	; case 4
  5224  0117FC  A4D8               	btfss	status,2,c
  5225  0117FE  0012               	return	
  5226  011800  D7EA               	goto	l550
  5227  011802                     l546:
  5228                           
  5229                           ;mtouch_sensor.c: 215: MTOUCH_Sensor_Enable(sensor);
  5230                           
  5231                           ; BSR set to: 0
  5232  011802  0100               	movlb	0	; () banked
  5233  011804  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5234  011806  ECBD  F090         	call	_MTOUCH_Sensor_Enable
  5235                           
  5236                           ;mtouch_sensor.c: 216: MTOUCH_Sensor_Calibrate(sensor);
  5237  01180A  0100               	movlb	0	; () banked
  5238  01180C  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5239  01180E  ECF9  F090         	call	_MTOUCH_Sensor_Calibrate
  5240                           
  5241                           ;mtouch_sensor.c: 217: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  5242  011812  0100               	movlb	0	; () banked
  5243  011814  51B2               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  5244  011816  0D09               	mullw	9
  5245  011818  0E83               	movlw	low _mtouch_sensor
  5246  01181A  24F3               	addwf	prodl,w,c
  5247  01181C  6FB0               	movwf	Sensor_Sampled_Reset@sensor& (0+255),b
  5248  01181E  0E00               	movlw	high _mtouch_sensor
  5249  011820  20F4               	addwfc	prodh,w,c
  5250  011822  6FB1               	movwf	(Sensor_Sampled_Reset@sensor+1)& (0+255),b
  5251  011824  ECE8  F091         	call	_Sensor_Sampled_Reset	;wreg free
  5252  011828  0012               	return	
  5253  01182A                     __end_of_MTOUCH_Sensor_Initialize:
  5254                           	opt stack 0
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           postinc0	equ	0xFEE
  5263                           wreg	equ	0xFE8
  5264                           postdec1	equ	0xFE5
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5274 ;; Defined at:
  5275 ;;		line 711 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  sensor          1    wreg     enum E17513
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  sensor          1    0[BANK0 ] enum E17513
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;Total ram usage:        1 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    5
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_MTOUCH_Sensor_Initialize
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text22
  5304  01217A                     __ptext22:
  5305                           	opt stack 0
  5306  01217A                     _MTOUCH_Sensor_Enable:
  5307                           	opt stack 21
  5308                           
  5309                           ;incstack = 0
  5310                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5311  01217A  0100               	movlb	0	; () banked
  5312  01217C  6FB0               	movwf	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5313                           
  5314                           ;mtouch_sensor.c: 713: if(sensor < 5)
  5315  01217E  0E05               	movlw	5
  5316  012180  0100               	movlb	0	; () banked
  5317  012182  61B0               	cpfslt	MTOUCH_Sensor_Enable@sensor& (0+255),b
  5318  012184  0012               	return	
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;mtouch_sensor.c: 714: mtouch_sensor[sensor].enabled = 1;
  5322  012186  51B0               	movf	MTOUCH_Sensor_Enable@sensor& (0+255),w,b
  5323  012188  0D09               	mullw	9
  5324  01218A  0E08               	movlw	8
  5325  01218C  26F3               	addwf	prodl,f,c
  5326  01218E  0E00               	movlw	0
  5327  012190  22F4               	addwfc	prodh,f,c
  5328  012192  0E83               	movlw	low _mtouch_sensor
  5329  012194  24F3               	addwf	prodl,w,c
  5330  012196  6ED9               	movwf	fsr2l,c
  5331  012198  0E00               	movlw	high _mtouch_sensor
  5332  01219A  20F4               	addwfc	prodh,w,c
  5333  01219C  6EDA               	movwf	fsr2h,c
  5334  01219E  80DF               	bsf	indf2,0,c
  5335  0121A0  0012               	return	
  5336  0121A2                     __end_of_MTOUCH_Sensor_Enable:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon	equ	0xFF2
  5345                           postinc0	equ	0xFEE
  5346                           wreg	equ	0xFE8
  5347                           postdec1	equ	0xFE5
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5357 ;; Defined at:
  5358 ;;		line 190 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  button          1   11[BANK0 ] enum E17454
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5376 ;;Total ram usage:        1 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    7
  5379 ;; This function calls:
  5380 ;;		_MTOUCH_Button_Initialize
  5381 ;;		_memcpy
  5382 ;; This function is called by:
  5383 ;;		_MTOUCH_Initialize
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text23
  5388  011F22                     __ptext23:
  5389                           	opt stack 0
  5390  011F22                     _MTOUCH_Button_InitializeAll:
  5391                           	opt stack 21
  5392                           
  5393                           ;mtouch_button.c: 192: enum mtouch_button_names button;
  5394                           ;mtouch_button.c: 194: memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init
      +                          ));
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;incstack = 0
  5398  011F22  0E40               	movlw	low _mtouch_button
  5399  011F24  0100               	movlb	0	; () banked
  5400  011F26  6FB0               	movwf	memcpy@d1& (0+255),b
  5401  011F28  0E01               	movlw	high _mtouch_button
  5402  011F2A  6FB1               	movwf	(memcpy@d1+1)& (0+255),b
  5403  011F2C  0ED5               	movlw	low _mtouch_button_init
  5404  011F2E  6FB2               	movwf	memcpy@s1& (0+255),b
  5405  011F30  0EFB               	movlw	high _mtouch_button_init
  5406  011F32  6FB3               	movwf	(memcpy@s1+1)& (0+255),b
  5407  011F34  0E00               	movlw	0
  5408  011F36  6FB5               	movwf	(memcpy@n+1)& (0+255),b
  5409  011F38  0E50               	movlw	80
  5410  011F3A  6FB4               	movwf	memcpy@n& (0+255),b
  5411  011F3C  ECEF  F08D         	call	_memcpy	;wreg free
  5412                           
  5413                           ;mtouch_button.c: 196: for (button = 0; button < 5; button++)
  5414  011F40  0E00               	movlw	0
  5415  011F42  0100               	movlb	0	; () banked
  5416  011F44  6FBB               	movwf	MTOUCH_Button_InitializeAll@button& (0+255),b
  5417  011F46                     l4821:
  5418                           
  5419                           ; BSR set to: 0
  5420  011F46  0E04               	movlw	4
  5421  011F48  65BB               	cpfsgt	MTOUCH_Button_InitializeAll@button& (0+255),b
  5422  011F4A  D001               	goto	l827
  5423  011F4C  0012               	return	
  5424  011F4E                     l827:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;mtouch_button.c: 197: {
  5428                           ;mtouch_button.c: 198: MTOUCH_Button_Initialize(button);
  5429                           
  5430                           ; BSR set to: 0
  5431  011F4E  51BB               	movf	MTOUCH_Button_InitializeAll@button& (0+255),w,b
  5432  011F50  EC15  F08C         	call	_MTOUCH_Button_Initialize
  5433  011F54  0100               	movlb	0	; () banked
  5434  011F56  2BBB               	incf	MTOUCH_Button_InitializeAll@button& (0+255),f,b
  5435  011F58  D7F6               	goto	l4821
  5436  011F5A                     __end_of_MTOUCH_Button_InitializeAll:
  5437                           	opt stack 0
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           prodh	equ	0xFF4
  5443                           prodl	equ	0xFF3
  5444                           intcon	equ	0xFF2
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           postdec1	equ	0xFE5
  5448                           fsr1l	equ	0xFE1
  5449                           indf2	equ	0xFDF
  5450                           postinc2	equ	0xFDE
  5451                           postdec2	equ	0xFDD
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _memcpy *****************
  5457 ;; Defined at:
  5458 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  d1              2    0[BANK0 ] PTR void 
  5461 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5462 ;;  s1              2    2[BANK0 ] PTR const void 
  5463 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5464 ;;  n               2    4[BANK0 ] unsigned int 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  5467 ;;		 -> mtouch_button_init(80), mtouch_sensor_init(45), 
  5468 ;;  d               2    7[BANK0 ] PTR unsigned char 
  5469 ;;		 -> mtouch_button(80), mtouch_sensor(45), 
  5470 ;;  tmp             1    6[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  2    0[BANK0 ] PTR void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5480 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;Total ram usage:       11 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    5
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_MTOUCH_Sensor_InitializeAll
  5491 ;;		_MTOUCH_Button_InitializeAll
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text24
  5496  011BDE                     __ptext24:
  5497                           	opt stack 0
  5498  011BDE                     _memcpy:
  5499                           	opt stack 22
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;incstack = 0
  5503  011BDE  C0B2  F0B9         	movff	memcpy@s1,memcpy@s
  5504  011BE2  C0B3  F0BA         	movff	memcpy@s1+1,memcpy@s+1
  5505  011BE6  C0B0  F0B7         	movff	memcpy@d1,memcpy@d
  5506  011BEA  C0B1  F0B8         	movff	memcpy@d1+1,memcpy@d+1
  5507  011BEE  D014               	goto	l1423
  5508  011BF0                     l4471:
  5509  011BF0  C0B9  FFF6         	movff	memcpy@s,tblptrl
  5510  011BF4  C0BA  FFF7         	movff	memcpy@s+1,tblptrh
  5511  011BF8                     	if	0	;tblptru may be non-zero
  5512  011BF8                     	endif
  5513  011BF8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5514  011BF8  0E00               	movlw	low (__mediumconst shr (0+16))
  5515  011BFA  6EF8               	movwf	tblptru,c
  5516  011BFC                     	endif
  5517  011BFC  0008               	tblrd		*
  5518  011BFE  CFF5 F0B6          	movff	tablat,memcpy@tmp
  5519  011C02  0100               	movlb	0	; () banked
  5520  011C04  4BB9               	infsnz	memcpy@s& (0+255),f,b
  5521  011C06  2BBA               	incf	(memcpy@s+1)& (0+255),f,b
  5522                           
  5523                           ; BSR set to: 0
  5524  011C08  C0B7  FFD9         	movff	memcpy@d,fsr2l
  5525  011C0C  C0B8  FFDA         	movff	memcpy@d+1,fsr2h
  5526  011C10  C0B6  FFDF         	movff	memcpy@tmp,indf2
  5527                           
  5528                           ; BSR set to: 0
  5529  011C14  4BB7               	infsnz	memcpy@d& (0+255),f,b
  5530  011C16  2BB8               	incf	(memcpy@d+1)& (0+255),f,b
  5531  011C18                     l1423:
  5532                           
  5533                           ; BSR set to: 0
  5534  011C18  0100               	movlb	0	; () banked
  5535  011C1A  07B4               	decf	memcpy@n& (0+255),f,b
  5536  011C1C  A0D8               	btfss	status,0,c
  5537  011C1E  07B5               	decf	(memcpy@n+1)& (0+255),f,b
  5538  011C20  29B4               	incf	memcpy@n& (0+255),w,b
  5539  011C22  E1E6               	bnz	l4471
  5540  011C24  29B5               	incf	(memcpy@n+1)& (0+255),w,b
  5541  011C26  B4D8               	btfsc	status,2,c
  5542  011C28  0012               	return	
  5543  011C2A  D7E2               	goto	l1424
  5544  011C2C                     __end_of_memcpy:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _INTERRUPT_Initialize *****************
  5565 ;; Defined at:
  5566 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		None
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    5
  5587 ;; This function calls:
  5588 ;;		Nothing
  5589 ;; This function is called by:
  5590 ;;		_SYSTEM_Initialize
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text25
  5595  01244C                     __ptext25:
  5596                           	opt stack 0
  5597  01244C                     _INTERRUPT_Initialize:
  5598                           	opt stack 24
  5599                           
  5600                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 1;
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;incstack = 0
  5604  01244C  8AF2               	bsf	intcon,5,c	;volatile
  5605                           
  5606                           ;interrupt_manager.c: 60: IPR3bits.TX2IP = 1;
  5607  01244E  010E               	movlb	14	; () banked
  5608  012450  8D22               	bsf	34,6,b	;volatile
  5609                           
  5610                           ;interrupt_manager.c: 63: IPR3bits.RC2IP = 1;
  5611  012452  8F22               	bsf	34,7,b	;volatile
  5612                           
  5613                           ;interrupt_manager.c: 66: IPR1bits.ADTIP = 1;
  5614  012454  8320               	bsf	32,1,b	;volatile
  5615                           
  5616                           ; BSR set to: 14
  5617  012456  0012               	return		;funcret
  5618  012458                     __end_of_INTERRUPT_Initialize:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           postinc0	equ	0xFEE
  5628                           wreg	equ	0xFE8
  5629                           postdec1	equ	0xFE5
  5630                           fsr1l	equ	0xFE1
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _EUSART2_Initialize *****************
  5639 ;; Defined at:
  5640 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    6
  5661 ;; This function calls:
  5662 ;;		_EUSART2_SetRxInterruptHandler
  5663 ;;		_EUSART2_SetTxInterruptHandler
  5664 ;; This function is called by:
  5665 ;;		_SYSTEM_Initialize
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text26
  5670  011A38                     __ptext26:
  5671                           	opt stack 0
  5672  011A38                     _EUSART2_Initialize:
  5673                           	opt stack 23
  5674                           
  5675                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  5676                           
  5677                           ; BSR set to: 14
  5678                           ;incstack = 0
  5679  011A38  010E               	movlb	14	; () banked
  5680  011A3A  9F2C               	bcf	44,7,b	;volatile
  5681                           
  5682                           ; BSR set to: 14
  5683                           ;eusart2.c: 81: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  5684  011A3C  0E60               	movlw	low _EUSART2_Receive_ISR
  5685  011A3E  0100               	movlb	0	; () banked
  5686  011A40  6FB0               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  5687  011A42  0E15               	movlw	high _EUSART2_Receive_ISR
  5688  011A44  6FB1               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5689  011A46  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
  5690  011A48  6FB2               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  5691  011A4A  EC19  F092         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  5692                           
  5693                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  5694  011A4E  010E               	movlb	14	; () banked
  5695  011A50  9D2C               	bcf	44,6,b	;volatile
  5696                           
  5697                           ;eusart2.c: 83: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  5698  011A52  0E2E               	movlw	low _EUSART2_Transmit_ISR
  5699  011A54  0100               	movlb	0	; () banked
  5700  011A56  6FB0               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  5701  011A58  0E20               	movlw	high _EUSART2_Transmit_ISR
  5702  011A5A  6FB1               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5703  011A5C  0E01               	movlw	low (_EUSART2_Transmit_ISR shr (0+16))
  5704  011A5E  6FB2               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  5705  011A60  EC12  F092         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  5706                           
  5707                           ;eusart2.c: 87: BAUD2CON = 0x08;
  5708  011A64  0E08               	movlw	8
  5709  011A66  010E               	movlb	14	; () banked
  5710  011A68  6FF7               	movwf	247,b	;volatile
  5711                           
  5712                           ; BSR set to: 14
  5713                           ;eusart2.c: 90: RC2STA = 0x90;
  5714  011A6A  0E90               	movlw	144
  5715  011A6C  6FF5               	movwf	245,b	;volatile
  5716                           
  5717                           ; BSR set to: 14
  5718                           ;eusart2.c: 93: TX2STA = 0x24;
  5719  011A6E  0E24               	movlw	36
  5720  011A70  6FF6               	movwf	246,b	;volatile
  5721                           
  5722                           ; BSR set to: 14
  5723                           ;eusart2.c: 96: SP2BRGL = 0x8A;
  5724  011A72  0E8A               	movlw	138
  5725  011A74  6FF3               	movwf	243,b	;volatile
  5726                           
  5727                           ; BSR set to: 14
  5728                           ;eusart2.c: 99: SP2BRGH = 0x00;
  5729  011A76  0E00               	movlw	0
  5730  011A78  6FF4               	movwf	244,b	;volatile
  5731                           
  5732                           ; BSR set to: 14
  5733                           ;eusart2.c: 103: eusart2TxHead = 0;
  5734  011A7A  0E00               	movlw	0
  5735  011A7C  6E41               	movwf	_eusart2TxHead,c	;volatile
  5736                           
  5737                           ; BSR set to: 14
  5738                           ;eusart2.c: 104: eusart2TxTail = 0;
  5739  011A7E  0E00               	movlw	0
  5740  011A80  6E40               	movwf	_eusart2TxTail,c	;volatile
  5741                           
  5742                           ; BSR set to: 14
  5743                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  5744  011A82  0E40               	movlw	64
  5745  011A84  6E4E               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5746                           
  5747                           ; BSR set to: 14
  5748                           ;eusart2.c: 107: eusart2RxHead = 0;
  5749  011A86  0E00               	movlw	0
  5750  011A88  6E3F               	movwf	_eusart2RxHead,c	;volatile
  5751                           
  5752                           ; BSR set to: 14
  5753                           ;eusart2.c: 108: eusart2RxTail = 0;
  5754  011A8A  0E00               	movlw	0
  5755  011A8C  6E3E               	movwf	_eusart2RxTail,c	;volatile
  5756                           
  5757                           ; BSR set to: 14
  5758                           ;eusart2.c: 109: eusart2RxCount = 0;
  5759  011A8E  0E00               	movlw	0
  5760  011A90  6E3D               	movwf	_eusart2RxCount,c	;volatile
  5761                           
  5762                           ; BSR set to: 14
  5763                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  5764  011A92  8F2C               	bsf	44,7,b	;volatile
  5765                           
  5766                           ; BSR set to: 14
  5767  011A94  0012               	return		;funcret
  5768  011A96                     __end_of_EUSART2_Initialize:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  5789 ;; Defined at:
  5790 ;;		line 258 in file "mcc_generated_files/eusart2.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5793 ;;		 -> EUSART2_Transmit_ISR(1), 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5805 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5809 ;;Total ram usage:        3 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    5
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_EUSART2_Initialize
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text27
  5820  012424                     __ptext27:
  5821                           	opt stack 0
  5822  012424                     _EUSART2_SetTxInterruptHandler:
  5823                           	opt stack 23
  5824                           
  5825                           ;eusart2.c: 259: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  5826                           
  5827                           ; BSR set to: 14
  5828                           ;incstack = 0
  5829  012424  C0B0  F04B         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  5830  012428  C0B1  F04C         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  5831  01242C  C0B2  F04D         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+2,_EUSART2_TxDefaultInterruptHandl
      +                          er+2
  5832  012430  0012               	return		;funcret
  5833  012432                     __end_of_EUSART2_SetTxInterruptHandler:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  5854 ;; Defined at:
  5855 ;;		line 262 in file "mcc_generated_files/eusart2.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5858 ;;		 -> EUSART2_Receive_ISR(1), 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5870 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5874 ;;Total ram usage:        3 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    5
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_EUSART2_Initialize
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text28
  5885  012432                     __ptext28:
  5886                           	opt stack 0
  5887  012432                     _EUSART2_SetRxInterruptHandler:
  5888                           	opt stack 23
  5889                           
  5890                           ;eusart2.c: 263: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  5891                           
  5892                           ;incstack = 0
  5893  012432  C0B0  F0E1         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  5894  012436  C0B1  F0E2         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  5895  01243A  C0B2  F0E3         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
  5896  01243E  0012               	return		;funcret
  5897  012440                     __end_of_EUSART2_SetRxInterruptHandler:
  5898                           	opt stack 0
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5918 ;; Defined at:
  5919 ;;		line 89 in file "mcc_generated_files/mtouch/mtouch.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      unsigned char 
  5926 ;; Registers used:
  5927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5937 ;;Total ram usage:        0 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:   10
  5940 ;; This function calls:
  5941 ;;		_MTOUCH_Button_ServiceAll
  5942 ;;		_MTOUCH_Sensor_SampleAll
  5943 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5944 ;;		_MTOUCH_Tick
  5945 ;;		_MTOUCH_needReburst
  5946 ;; This function is called by:
  5947 ;;		_main
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text29
  5952  0121A2                     __ptext29:
  5953                           	opt stack 0
  5954  0121A2                     _MTOUCH_Service_Mainloop:
  5955                           	opt stack 20
  5956                           
  5957                           ;mtouch.c: 93: mtouch_time_toScan = 1;
  5958                           
  5959                           ;incstack = 0
  5960  0121A2  0E01               	movlw	1
  5961  0121A4  6E3C               	movwf	_mtouch_time_toScan,c
  5962                           
  5963                           ;mtouch.c: 95: if(mtouch_time_toScan)
  5964  0121A6  503C               	movf	_mtouch_time_toScan,w,c
  5965  0121A8  B4D8               	btfsc	status,2,c
  5966  0121AA  0012               	return	
  5967                           
  5968                           ;mtouch.c: 96: {
  5969                           ;mtouch.c: 97: if(MTOUCH_Sensor_SampleAll() == 0)
  5970  0121AC  EC3D  F08E         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  5971  0121B0  0900               	iorlw	0
  5972  0121B2  B4D8               	btfsc	status,2,c
  5973  0121B4  0012               	return	
  5974                           
  5975                           ;mtouch.c: 99: MTOUCH_Button_ServiceAll();
  5976                           
  5977                           ;mtouch.c: 98: return 0;
  5978                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5979  0121B6  ECAE  F091         	call	_MTOUCH_Button_ServiceAll	;wreg free
  5980                           
  5981                           ;mtouch.c: 100: mtouch_time_toScan = MTOUCH_needReburst();
  5982  0121BA  EC2C  F092         	call	_MTOUCH_needReburst	;wreg free
  5983  0121BE  6E3C               	movwf	_mtouch_time_toScan,c
  5984                           
  5985                           ;mtouch.c: 101: MTOUCH_Sensor_Sampled_ResetAll();
  5986  0121C0  EC62  F090         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  5987                           
  5988                           ;mtouch.c: 102: MTOUCH_Tick();
  5989  0121C4  EC43  F092         	call	_MTOUCH_Tick	;wreg free
  5990                           
  5991                           ;mtouch.c: 105: else
  5992                           ;mtouch.c: 106: {
  5993                           ;mtouch.c: 107: return 0;
  5994                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5995                           
  5996                           ;mtouch.c: 104: }
  5997                           
  5998                           ;mtouch.c: 103: return 1;
  5999                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  6000  0121C8  0012               	return	
  6001  0121CA                     __end_of_MTOUCH_Service_Mainloop:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           postinc0	equ	0xFEE
  6011                           wreg	equ	0xFE8
  6012                           postdec1	equ	0xFE5
  6013                           fsr1l	equ	0xFE1
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _MTOUCH_needReburst *****************
  6022 ;; Defined at:
  6023 ;;		line 126 in file "mcc_generated_files/mtouch/mtouch.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;		None
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  needReburst     1    0[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6041 ;;Total ram usage:        1 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    5
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_MTOUCH_Service_Mainloop
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text30
  6052  012458                     __ptext30:
  6053                           	opt stack 0
  6054  012458                     _MTOUCH_needReburst:
  6055                           	opt stack 24
  6056                           
  6057                           ;mtouch.c: 128: bool needReburst = 0;
  6058                           
  6059                           ;incstack = 0
  6060  012458  0E00               	movlw	0
  6061  01245A  0100               	movlb	0	; () banked
  6062  01245C  6FB0               	movwf	MTOUCH_needReburst@needReburst& (0+255),b
  6063                           
  6064                           ;mtouch.c: 130: return needReburst;
  6065  01245E  51B0               	movf	MTOUCH_needReburst@needReburst& (0+255),w,b
  6066  012460  0012               	return	
  6067  012462                     __end_of_MTOUCH_needReburst:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           postdec1	equ	0xFE5
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function _MTOUCH_Tick *****************
  6088 ;; Defined at:
  6089 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    7
  6110 ;; This function calls:
  6111 ;;		_MTOUCH_Button_Tick
  6112 ;; This function is called by:
  6113 ;;		_MTOUCH_Service_Mainloop
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text31
  6118  012486                     __ptext31:
  6119                           	opt stack 0
  6120  012486                     _MTOUCH_Tick:
  6121                           	opt stack 22
  6122                           
  6123                           ;mtouch.c: 118: MTOUCH_Button_Tick();
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;incstack = 0
  6127  012486  ECE5  F090         	call	_MTOUCH_Button_Tick	;wreg free
  6128  01248A  0012               	return		;funcret
  6129  01248C                     __end_of_MTOUCH_Tick:
  6130                           	opt stack 0
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           intcon	equ	0xFF2
  6138                           postinc0	equ	0xFEE
  6139                           wreg	equ	0xFE8
  6140                           postdec1	equ	0xFE5
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _MTOUCH_Button_Tick *****************
  6150 ;; Defined at:
  6151 ;;		line 316 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;		None
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  i               1    4[BANK0 ] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6169 ;;Total ram usage:        1 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    6
  6172 ;; This function calls:
  6173 ;;		_Button_Tick_helper
  6174 ;; This function is called by:
  6175 ;;		_MTOUCH_Tick
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text32
  6180  0121CA                     __ptext32:
  6181                           	opt stack 0
  6182  0121CA                     _MTOUCH_Button_Tick:
  6183                           	opt stack 22
  6184                           
  6185                           ;mtouch_button.c: 318: uint8_t i;
  6186                           ;mtouch_button.c: 319: for (i = 0; i < 5; i++)
  6187                           
  6188                           ;incstack = 0
  6189  0121CA  0E00               	movlw	0
  6190  0121CC  0100               	movlb	0	; () banked
  6191  0121CE  6FB4               	movwf	MTOUCH_Button_Tick@i& (0+255),b
  6192  0121D0                     l4845:
  6193                           
  6194                           ; BSR set to: 0
  6195  0121D0  0E04               	movlw	4
  6196  0121D2  65B4               	cpfsgt	MTOUCH_Button_Tick@i& (0+255),b
  6197  0121D4  D001               	goto	l863
  6198  0121D6  0012               	return	
  6199  0121D8                     l863:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;mtouch_button.c: 320: {
  6203                           ;mtouch_button.c: 321: Button_Tick_helper(&mtouch_button[i]);
  6204                           
  6205                           ; BSR set to: 0
  6206  0121D8  51B4               	movf	MTOUCH_Button_Tick@i& (0+255),w,b
  6207  0121DA  0D10               	mullw	16
  6208  0121DC  0E40               	movlw	low _mtouch_button
  6209  0121DE  24F3               	addwf	prodl,w,c
  6210  0121E0  6FB0               	movwf	Button_Tick_helper@button& (0+255),b
  6211  0121E2  0E01               	movlw	high _mtouch_button
  6212  0121E4  20F4               	addwfc	prodh,w,c
  6213  0121E6  6FB1               	movwf	(Button_Tick_helper@button+1)& (0+255),b
  6214  0121E8  EC75  F08D         	call	_Button_Tick_helper	;wreg free
  6215  0121EC  0100               	movlb	0	; () banked
  6216  0121EE  2BB4               	incf	MTOUCH_Button_Tick@i& (0+255),f,b
  6217  0121F0  D7EF               	goto	l4845
  6218  0121F2                     __end_of_MTOUCH_Button_Tick:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           postinc0	equ	0xFEE
  6228                           wreg	equ	0xFE8
  6229                           postdec1	equ	0xFE5
  6230                           fsr1l	equ	0xFE1
  6231                           indf2	equ	0xFDF
  6232                           postinc2	equ	0xFDE
  6233                           postdec2	equ	0xFDD
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238 ;; *************** function _Button_Tick_helper *****************
  6239 ;; Defined at:
  6240 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  button          2    0[BANK0 ] PTR struct .
  6243 ;;		 -> mtouch_button(80), 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;		None
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6255 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6259 ;;Total ram usage:        4 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    5
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		_MTOUCH_Button_Tick
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           	psect	text33
  6270  011AEA                     __ptext33:
  6271                           	opt stack 0
  6272  011AEA                     _Button_Tick_helper:
  6273                           	opt stack 22
  6274                           
  6275                           ;mtouch_button.c: 327: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;incstack = 0
  6279  011AEA  0100               	movlb	0	; () banked
  6280  011AEC  EE20 F002          	lfsr	2,2
  6281  011AF0  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6282  011AF2  26D9               	addwf	fsr2l,f,c
  6283  011AF4  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6284  011AF6  22DA               	addwfc	fsr2h,f,c
  6285  011AF8  0E02               	movlw	2
  6286  011AFA  18DE               	xorwf	postinc2,w,c
  6287  011AFC  A4D8               	btfss	status,2,c
  6288  011AFE  0012               	return	
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;mtouch_button.c: 328: {
  6292                           ;mtouch_button.c: 329: (button->counter)++;
  6293  011B00  EE20 F00A          	lfsr	2,10
  6294  011B04  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6295  011B06  26D9               	addwf	fsr2l,f,c
  6296  011B08  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6297  011B0A  22DA               	addwfc	fsr2h,f,c
  6298  011B0C  2ADE               	incf	postinc2,f,c
  6299  011B0E  0E00               	movlw	0
  6300  011B10  22DD               	addwfc	postdec2,f,c
  6301                           
  6302                           ;mtouch_button.c: 330: if (button->counter == (mtouch_button_statecounter_t)0)
  6303  011B12  EE20 F00A          	lfsr	2,10
  6304  011B16  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6305  011B18  26D9               	addwf	fsr2l,f,c
  6306  011B1A  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6307  011B1C  22DA               	addwfc	fsr2h,f,c
  6308  011B1E  50DE               	movf	postinc2,w,c
  6309  011B20  10DE               	iorwf	postinc2,w,c
  6310  011B22  A4D8               	btfss	status,2,c
  6311  011B24  0012               	return	
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;mtouch_button.c: 331: {
  6315                           ;mtouch_button.c: 332: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6316  011B26  EE20 F00A          	lfsr	2,10
  6317  011B2A  51B0               	movf	Button_Tick_helper@button& (0+255),w,b
  6318  011B2C  26D9               	addwf	fsr2l,f,c
  6319  011B2E  51B1               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  6320  011B30  22DA               	addwfc	fsr2h,f,c
  6321  011B32  0EFF               	movlw	255
  6322  011B34  6EDE               	movwf	postinc2,c
  6323  011B36  0EFF               	movlw	255
  6324  011B38  6EDD               	movwf	postdec2,c
  6325                           
  6326                           ; BSR set to: 0
  6327  011B3A  0012               	return	
  6328  011B3C                     __end_of_Button_Tick_helper:
  6329                           	opt stack 0
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6349 ;; Defined at:
  6350 ;;		line 811 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;		None
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  sensor          2    2[BANK0 ] PTR struct .
  6355 ;;		 -> mtouch_sensor(45), 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6366 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6369 ;;Total ram usage:        2 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    6
  6372 ;; This function calls:
  6373 ;;		_Sensor_Sampled_Reset
  6374 ;; This function is called by:
  6375 ;;		_MTOUCH_Initialize
  6376 ;;		_MTOUCH_Service_Mainloop
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text34
  6381  0120C4                     __ptext34:
  6382                           	opt stack 0
  6383  0120C4                     _MTOUCH_Sensor_Sampled_ResetAll:
  6384                           	opt stack 22
  6385                           
  6386                           ;mtouch_sensor.c: 813: mtouch_sensor_t* sensor;
  6387                           ;mtouch_sensor.c: 814: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[5-1];senso
      +                          r++)
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;incstack = 0
  6391  0120C4  0E83               	movlw	low _mtouch_sensor
  6392  0120C6  0100               	movlb	0	; () banked
  6393  0120C8  6FB2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),b
  6394  0120CA  0E00               	movlw	high _mtouch_sensor
  6395  0120CC  6FB3               	movwf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),b
  6396  0120CE  51B3               	movf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),w,b
  6397  0120D0  0800               	sublw	high (_mtouch_sensor+36)
  6398  0120D2  E102               	bnz	u5295
  6399  0120D4  51B2               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),w,b
  6400  0120D6  08A7               	sublw	low (_mtouch_sensor+36)
  6401  0120D8                     u5295:
  6402  0120D8  A0D8               	btfss	status,0,c
  6403  0120DA  0012               	return	
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;mtouch_sensor.c: 815: {
  6407                           ;mtouch_sensor.c: 816: Sensor_Sampled_Reset(sensor);
  6408                           
  6409                           ; BSR set to: 0
  6410                           
  6411                           ; BSR set to: 0
  6412  0120DC  C0B2  F0B0         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  6413  0120E0  C0B3  F0B1         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor+1,Sensor_Sampled_Reset@sensor+1
  6414  0120E4  ECE8  F091         	call	_Sensor_Sampled_Reset	;wreg free
  6415  0120E8  0E09               	movlw	9
  6416  0120EA  0100               	movlb	0	; () banked
  6417  0120EC  27B2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),f,b
  6418  0120EE  0E00               	movlw	0
  6419  0120F0  23B3               	addwfc	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),f,b
  6420  0120F2  D7ED               	goto	L2
  6421  0120F4                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  6422                           	opt stack 0
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           postdec1	equ	0xFE5
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _Sensor_Sampled_Reset *****************
  6442 ;; Defined at:
  6443 ;;		line 828 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  sensor          2    0[BANK0 ] PTR struct .
  6446 ;;		 -> mtouch_sensor(45), 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      void 
  6451 ;; Registers used:
  6452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6458 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6462 ;;Total ram usage:        2 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    5
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_MTOUCH_Sensor_Initialize
  6469 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           	psect	text35
  6474  0123D0                     __ptext35:
  6475                           	opt stack 0
  6476  0123D0                     _Sensor_Sampled_Reset:
  6477                           	opt stack 22
  6478                           
  6479                           ;mtouch_sensor.c: 830: sensor->sampled = 0;
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;incstack = 0
  6483  0123D0  0100               	movlb	0	; () banked
  6484  0123D2  EE20 F008          	lfsr	2,8
  6485  0123D6  51B0               	movf	Sensor_Sampled_Reset@sensor& (0+255),w,b
  6486  0123D8  26D9               	addwf	fsr2l,f,c
  6487  0123DA  51B1               	movf	(Sensor_Sampled_Reset@sensor+1)& (0+255),w,b
  6488  0123DC  22DA               	addwfc	fsr2h,f,c
  6489  0123DE  92DF               	bcf	indf2,1,c
  6490                           
  6491                           ; BSR set to: 0
  6492  0123E0  0012               	return		;funcret
  6493  0123E2                     __end_of_Sensor_Sampled_Reset:
  6494                           	opt stack 0
  6495                           tblptru	equ	0xFF8
  6496                           tblptrh	equ	0xFF7
  6497                           tblptrl	equ	0xFF6
  6498                           tablat	equ	0xFF5
  6499                           prodh	equ	0xFF4
  6500                           prodl	equ	0xFF3
  6501                           intcon	equ	0xFF2
  6502                           postinc0	equ	0xFEE
  6503                           wreg	equ	0xFE8
  6504                           postdec1	equ	0xFE5
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6514 ;; Defined at:
  6515 ;;		line 302 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;		None
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;  sensor          1   21[BANK0 ] enum E17513
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      unsigned char 
  6522 ;; Registers used:
  6523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6533 ;;Total ram usage:        1 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    9
  6536 ;; This function calls:
  6537 ;;		_MTOUCH_Sensor_isEnabled
  6538 ;;		_MTOUCH_Sensor_isSampling
  6539 ;;		_MTOUCH_Sensor_wasSampled
  6540 ;;		_Sensor_FrequencyHopping
  6541 ;;		_Sensor_scheduleNextScan
  6542 ;; This function is called by:
  6543 ;;		_MTOUCH_Service_Mainloop
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text36
  6548  011C7A                     __ptext36:
  6549                           	opt stack 0
  6550  011C7A                     _MTOUCH_Sensor_SampleAll:
  6551                           	opt stack 20
  6552                           
  6553                           ;mtouch_sensor.c: 304: enum mtouch_sensor_names sensor;
  6554                           ;mtouch_sensor.c: 306: for (sensor = 0; sensor < 5; sensor++)
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;incstack = 0
  6558  011C7A  0E00               	movlw	0
  6559  011C7C  0100               	movlb	0	; () banked
  6560  011C7E  6FC5               	movwf	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6561  011C80                     l5075:
  6562                           
  6563                           ; BSR set to: 0
  6564  011C80  0E04               	movlw	4
  6565  011C82  65C5               	cpfsgt	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  6566  011C84  D001               	goto	l574
  6567  011C86  D018               	goto	u5630
  6568  011C88                     l574:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;mtouch_sensor.c: 307: {
  6572                           ;mtouch_sensor.c: 308: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  6573                           
  6574                           ; BSR set to: 0
  6575  011C88  51C5               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6576  011C8A  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  6577  011C8E  0900               	iorlw	0
  6578  011C90  A4D8               	btfss	status,2,c
  6579  011C92  D00F               	goto	l576
  6580  011C94  0100               	movlb	0	; () banked
  6581  011C96  51C5               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  6582  011C98  ECC9  F08F         	call	_MTOUCH_Sensor_isEnabled
  6583  011C9C  0900               	iorlw	0
  6584  011C9E  B4D8               	btfsc	status,2,c
  6585  011CA0  D008               	goto	l576
  6586                           
  6587                           ;mtouch_sensor.c: 309: {
  6588                           ;mtouch_sensor.c: 310: if(MTOUCH_Sensor_isSampling() == 0)
  6589  011CA2  EC46  F092         	call	_MTOUCH_Sensor_isSampling	;wreg free
  6590  011CA6  0900               	iorlw	0
  6591  011CA8  B4D8               	btfsc	status,2,c
  6592                           
  6593                           ;mtouch_sensor.c: 311: Sensor_scheduleNextScan();
  6594  011CAA  EC3C  F083         	call	_Sensor_scheduleNextScan	;wreg free
  6595                           
  6596                           ;mtouch_sensor.c: 312: return 0;
  6597  011CAE  0E00               	movlw	0
  6598  011CB0  0012               	return	
  6599  011CB2                     l576:
  6600  011CB2  0100               	movlb	0	; () banked
  6601  011CB4  2BC5               	incf	MTOUCH_Sensor_SampleAll@sensor& (0+255),f,b
  6602  011CB6  D7E4               	goto	l5075
  6603  011CB8                     u5630:
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;mtouch_sensor.c: 313: }
  6607                           ;mtouch_sensor.c: 314: }
  6608                           ;mtouch_sensor.c: 316: Sensor_FrequencyHopping();
  6609                           
  6610                           ; BSR set to: 0
  6611  011CB8  EC34  F091         	call	_Sensor_FrequencyHopping	;wreg free
  6612                           
  6613                           ;mtouch_sensor.c: 318: return 1;
  6614  011CBC  0E01               	movlw	1
  6615  011CBE  0012               	return	
  6616  011CC0                     __end_of_MTOUCH_Sensor_SampleAll:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _Sensor_scheduleNextScan *****************
  6637 ;; Defined at:
  6638 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  sensor          2    6[BANK0 ] PTR struct .
  6643 ;;		 -> mtouch_sensor(45), 
  6644 ;;  skipScan        1    5[BANK0 ] unsigned char 
  6645 ;;  state           1    4[BANK0 ] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      void 
  6648 ;; Registers used:
  6649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6656 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6658 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6659 ;;Total ram usage:        6 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    6
  6662 ;; This function calls:
  6663 ;;		_MTOUCH_Sensor_isEnabled
  6664 ;;		_MTOUCH_Sensor_wasSampled
  6665 ;;		_Sensor_SetTrisBit
  6666 ;;		_Sensor_isCalibrated
  6667 ;;		_Sensor_isCalibratingAcqTime
  6668 ;; This function is called by:
  6669 ;;		_MTOUCH_Sensor_SampleAll
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text37
  6674  010678                     __ptext37:
  6675                           	opt stack 0
  6676  010678                     _Sensor_scheduleNextScan:
  6677                           	opt stack 22
  6678                           
  6679                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
  6680                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
  6681                           
  6682                           ;incstack = 0
  6683  010678  0E00               	movlw	0
  6684  01067A  0100               	movlb	0	; () banked
  6685  01067C  6FB5               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6686                           
  6687                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
  6688  01067E  0E00               	movlw	0
  6689  010680  BEF2               	btfsc	intcon,7,c	;volatile
  6690  010682  0E01               	movlw	1
  6691  010684  6FB4               	movwf	Sensor_scheduleNextScan@state& (0+255),b
  6692                           
  6693                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
  6694  010686  D00D               	goto	l586
  6695  010688                     
  6696                           ;mtouch_sensor.c: 347: {
  6697                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
  6698                           
  6699                           ; BSR set to: 0
  6700  010688  2A3B               	incf	_currentScanSensor,f,c
  6701  01068A  0E05               	movlw	5
  6702  01068C  183B               	xorwf	_currentScanSensor,w,c
  6703  01068E  A4D8               	btfss	status,2,c
  6704  010690  D008               	goto	l586
  6705                           
  6706                           ;mtouch_sensor.c: 349: {
  6707                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
  6708  010692  0E00               	movlw	0
  6709  010694  6E3B               	movwf	_currentScanSensor,c
  6710                           
  6711                           ;mtouch_sensor.c: 351: sampling_flag = 0;
  6712  010696  0E00               	movlw	0
  6713  010698  6E3A               	movwf	_sampling_flag,c
  6714                           
  6715                           ;mtouch_sensor.c: 352: skipScan = 1;
  6716  01069A  0E01               	movlw	1
  6717  01069C  0100               	movlb	0	; () banked
  6718  01069E  6FB5               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6719                           
  6720                           ;mtouch_sensor.c: 353: break;
  6721  0106A0  D00C               	goto	u5350
  6722  0106A2                     l586:
  6723                           
  6724                           ; BSR set to: 0
  6725                           
  6726                           ; BSR set to: 0
  6727  0106A2  503B               	movf	_currentScanSensor,w,c
  6728  0106A4  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  6729  0106A8  0900               	iorlw	0
  6730  0106AA  A4D8               	btfss	status,2,c
  6731  0106AC  D7ED               	goto	l585
  6732  0106AE  503B               	movf	_currentScanSensor,w,c
  6733  0106B0  ECC9  F08F         	call	_MTOUCH_Sensor_isEnabled
  6734  0106B4  0900               	iorlw	0
  6735  0106B6  B4D8               	btfsc	status,2,c
  6736  0106B8  D7E7               	goto	l585
  6737  0106BA                     u5350:
  6738                           
  6739                           ;mtouch_sensor.c: 354: }
  6740                           ;mtouch_sensor.c: 355: }
  6741                           ;mtouch_sensor.c: 358: if(skipScan==0)
  6742  0106BA  0100               	movlb	0	; () banked
  6743  0106BC  51B5               	movf	Sensor_scheduleNextScan@skipScan& (0+255),w,b
  6744  0106BE  A4D8               	btfss	status,2,c
  6745  0106C0  0012               	return	
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;mtouch_sensor.c: 359: {
  6749                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
  6750  0106C2  503B               	movf	_currentScanSensor,w,c
  6751  0106C4  0D09               	mullw	9
  6752  0106C6  0E83               	movlw	low _mtouch_sensor
  6753  0106C8  24F3               	addwf	prodl,w,c
  6754  0106CA  6FB6               	movwf	Sensor_scheduleNextScan@sensor& (0+255),b
  6755  0106CC  0E00               	movlw	high _mtouch_sensor
  6756  0106CE  20F4               	addwfc	prodh,w,c
  6757  0106D0  6FB7               	movwf	(Sensor_scheduleNextScan@sensor+1)& (0+255),b
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
  6761  0106D2  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  6762  0106D6  C0B7  F0B1         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibrated@sensor+1
  6763  0106DA  ECA1  F091         	call	_Sensor_isCalibrated	;wreg free
  6764  0106DE  0900               	iorlw	0
  6765  0106E0  B4D8               	btfsc	status,2,c
  6766  0106E2  D015               	goto	l589
  6767                           
  6768                           ;mtouch_sensor.c: 362: {
  6769                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
  6770  0106E4  0100               	movlb	0	; () banked
  6771  0106E6  EE20 F003          	lfsr	2,3
  6772  0106EA  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6773  0106EC  26D9               	addwf	fsr2l,f,c
  6774  0106EE  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6775  0106F0  22DA               	addwfc	fsr2h,f,c
  6776  0106F2  50DF               	movf	indf2,w,c
  6777  0106F4  010F               	movlb	15	; () banked
  6778  0106F6  6F5C               	movwf	92,b	;volatile
  6779                           
  6780                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
  6781  0106F8  0100               	movlb	0	; () banked
  6782  0106FA  EE20 F002          	lfsr	2,2
  6783  0106FE  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6784  010700  26D9               	addwf	fsr2l,f,c
  6785  010702  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6786  010704  22DA               	addwfc	fsr2h,f,c
  6787  010706  50DF               	movf	indf2,w,c
  6788  010708  010F               	movlb	15	; () banked
  6789  01070A  6F5E               	movwf	94,b	;volatile
  6790                           
  6791                           ;mtouch_sensor.c: 365: }
  6792  01070C  D022               	goto	l592
  6793  01070E                     l589:
  6794                           
  6795                           ;mtouch_sensor.c: 366: else
  6796                           ;mtouch_sensor.c: 367: {
  6797                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
  6798                           
  6799                           ; BSR set to: 15
  6800  01070E  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  6801  010712  C0B7  F0B1         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibratingAcqTime@sensor+1
  6802  010716  EC94  F091         	call	_Sensor_isCalibratingAcqTime	;wreg free
  6803  01071A  0900               	iorlw	0
  6804  01071C  B4D8               	btfsc	status,2,c
  6805  01071E  D014               	goto	l591
  6806                           
  6807                           ;mtouch_sensor.c: 369: {
  6808                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
  6809  010720  0100               	movlb	0	; () banked
  6810  010722  EE20 F002          	lfsr	2,2
  6811  010726  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6812  010728  26D9               	addwf	fsr2l,f,c
  6813  01072A  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6814  01072C  22DA               	addwfc	fsr2h,f,c
  6815  01072E  50DF               	movf	indf2,w,c
  6816  010730  010F               	movlb	15	; () banked
  6817  010732  6F5E               	movwf	94,b	;volatile
  6818                           
  6819                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
  6820  010734  0100               	movlb	0	; () banked
  6821  010736  EE20 F003          	lfsr	2,3
  6822  01073A  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6823  01073C  26D9               	addwf	fsr2l,f,c
  6824  01073E  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6825  010740  22DA               	addwfc	fsr2h,f,c
  6826  010742  50DF               	movf	indf2,w,c
  6827  010744  010F               	movlb	15	; () banked
  6828  010746  D004               	goto	L3
  6829  010748                     l591:
  6830                           
  6831                           ;mtouch_sensor.c: 373: else
  6832                           ;mtouch_sensor.c: 374: {
  6833                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6834                           
  6835                           ; BSR set to: 15
  6836  010748  0E80               	movlw	128
  6837  01074A  010F               	movlb	15	; () banked
  6838  01074C  6F5E               	movwf	94,b	;volatile
  6839                           
  6840                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6841  01074E  0E80               	movlw	128
  6842  010750                     L3:
  6843  010750  6F5C               	movwf	92,b	;volatile
  6844  010752                     l592:
  6845                           
  6846                           ; BSR set to: 15
  6847                           ;mtouch_sensor.c: 377: }
  6848                           ;mtouch_sensor.c: 378: }
  6849                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
  6850                           
  6851                           ; BSR set to: 15
  6852                           
  6853                           ; BSR set to: 15
  6854  010752  5038               	movf	_sample_delay,w,c
  6855  010754  275E               	addwf	94,f,b	;volatile
  6856                           
  6857                           ; BSR set to: 15
  6858                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
  6859  010756  0100               	movlb	0	; () banked
  6860  010758  EE20 F001          	lfsr	2,1
  6861  01075C  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6862  01075E  26D9               	addwf	fsr2l,f,c
  6863  010760  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6864  010762  22DA               	addwfc	fsr2h,f,c
  6865  010764  50DF               	movf	indf2,w,c
  6866  010766  010F               	movlb	15	; () banked
  6867  010768  6F5F               	movwf	95,b	;volatile
  6868                           
  6869                           ; BSR set to: 15
  6870                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
  6871  01076A  0100               	movlb	0	; () banked
  6872  01076C  EE20 F004          	lfsr	2,4
  6873  010770  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6874  010772  26D9               	addwf	fsr2l,f,c
  6875  010774  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6876  010776  22DA               	addwfc	fsr2h,f,c
  6877  010778  50DF               	movf	indf2,w,c
  6878  01077A  6FB2               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6879  01077C  90D8               	bcf	status,0,c
  6880  01077E  31B2               	rrcf	??_Sensor_scheduleNextScan& (0+255),w,b
  6881  010780  6E66               	movwf	3942,c	;volatile
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
  6885  010782  EE20 F005          	lfsr	2,5
  6886  010786  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6887  010788  26D9               	addwf	fsr2l,f,c
  6888  01078A  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6889  01078C  22DA               	addwfc	fsr2h,f,c
  6890  01078E  50DF               	movf	indf2,w,c
  6891  010790  010F               	movlb	15	; () banked
  6892  010792  6F5D               	movwf	93,b	;volatile
  6893                           
  6894                           ; BSR set to: 15
  6895                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
  6896  010794  8E60               	bsf	3936,7,c	;volatile
  6897                           
  6898                           ; BSR set to: 15
  6899                           ;mtouch_sensor.c: 385: sampling_flag= 1;
  6900  010796  0E01               	movlw	1
  6901  010798  6E3A               	movwf	_sampling_flag,c
  6902                           
  6903                           ; BSR set to: 15
  6904                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
  6905  01079A  0E01               	movlw	1
  6906  01079C  0100               	movlb	0	; () banked
  6907  01079E  6FB0               	movwf	Sensor_SetTrisBit@TrisBit& (0+255),b
  6908  0107A0  503B               	movf	_currentScanSensor,w,c
  6909  0107A2  EC88  F08C         	call	_Sensor_SetTrisBit
  6910                           
  6911                           ;mtouch_sensor.c: 387: GIE = 0;
  6912  0107A6  9EF2               	bcf	intcon,7,c	;volatile
  6913                           
  6914                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
  6915  0107A8  8060               	bsf	3936,0,c	;volatile
  6916                           
  6917                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
  6918  0107AA  0100               	movlb	0	; () banked
  6919  0107AC  EE20 F004          	lfsr	2,4
  6920  0107B0  51B6               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6921  0107B2  26D9               	addwf	fsr2l,f,c
  6922  0107B4  51B7               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6923  0107B6  22DA               	addwfc	fsr2h,f,c
  6924  0107B8  50DF               	movf	indf2,w,c
  6925  0107BA  6FB2               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6926  0107BC  6BB3               	clrf	(??_Sensor_scheduleNextScan+1)& (0+255),b
  6927  0107BE  0E09               	movlw	9
  6928  0107C0                     u5395:
  6929  0107C0  90D8               	bcf	status,0,c
  6930  0107C2  37B2               	rlcf	??_Sensor_scheduleNextScan& (0+255),f,b
  6931  0107C4  37B3               	rlcf	(??_Sensor_scheduleNextScan+1)& (0+255),f,b
  6932  0107C6  2EE8               	decfsz	wreg,f,c
  6933  0107C8  D7FB               	goto	u5395
  6934  0107CA  C0B2  FF70         	movff	??_Sensor_scheduleNextScan,3952	;volatile
  6935  0107CE  C0B3  FF71         	movff	??_Sensor_scheduleNextScan+1,3953	;volatile
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;mtouch_sensor.c: 390: GIE = state;
  6939  0107D2  A1B4               	btfss	Sensor_scheduleNextScan@state& (0+255),0,b
  6940  0107D4  D002               	goto	u5400
  6941  0107D6  8EF2               	bsf	intcon,7,c	;volatile
  6942  0107D8  D001               	goto	u5415
  6943  0107DA                     u5400:
  6944  0107DA  9EF2               	bcf	intcon,7,c	;volatile
  6945  0107DC                     u5415:
  6946                           
  6947                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
  6948  0107DC  0E00               	movlw	0
  6949  0107DE  6E39               	movwf	_scanInterrupted,c	;volatile
  6950  0107E0  0012               	return	
  6951  0107E2                     __end_of_Sensor_scheduleNextScan:
  6952                           	opt stack 0
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           postinc0	equ	0xFEE
  6961                           wreg	equ	0xFE8
  6962                           postdec1	equ	0xFE5
  6963                           fsr1l	equ	0xFE1
  6964                           indf2	equ	0xFDF
  6965                           postinc2	equ	0xFDE
  6966                           postdec2	equ	0xFDD
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  6972 ;; Defined at:
  6973 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  sensor          2    0[BANK0 ] PTR struct .
  6976 ;;		 -> mtouch_sensor(45), 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      unsigned char 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    5
  6995 ;; This function calls:
  6996 ;;		Nothing
  6997 ;; This function is called by:
  6998 ;;		_Sensor_scheduleNextScan
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text38
  7003  012328                     __ptext38:
  7004                           	opt stack 0
  7005  012328                     _Sensor_isCalibratingAcqTime:
  7006                           	opt stack 22
  7007                           
  7008                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
  7009                           
  7010                           ;incstack = 0
  7011  012328  0100               	movlb	0	; () banked
  7012  01232A  EE20 F008          	lfsr	2,8
  7013  01232E  51B0               	movf	Sensor_isCalibratingAcqTime@sensor& (0+255),w,b
  7014  012330  26D9               	addwf	fsr2l,f,c
  7015  012332  51B1               	movf	(Sensor_isCalibratingAcqTime@sensor+1)& (0+255),w,b
  7016  012334  22DA               	addwfc	fsr2h,f,c
  7017  012336  A8DF               	btfss	indf2,4,c
  7018  012338  D002               	goto	u4650
  7019  01233A  0E01               	movlw	1
  7020  01233C  0012               	return	
  7021  01233E                     u4650:
  7022  01233E  0E00               	movlw	0
  7023  012340  0012               	return	
  7024  012342                     __end_of_Sensor_isCalibratingAcqTime:
  7025                           	opt stack 0
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           prodh	equ	0xFF4
  7031                           prodl	equ	0xFF3
  7032                           intcon	equ	0xFF2
  7033                           postinc0	equ	0xFEE
  7034                           wreg	equ	0xFE8
  7035                           postdec1	equ	0xFE5
  7036                           fsr1l	equ	0xFE1
  7037                           indf2	equ	0xFDF
  7038                           postinc2	equ	0xFDE
  7039                           postdec2	equ	0xFDD
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044 ;; *************** function _Sensor_isCalibrated *****************
  7045 ;; Defined at:
  7046 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  sensor          2    0[BANK0 ] PTR struct .
  7049 ;;		 -> mtouch_sensor(45), 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;		None
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      unsigned char 
  7054 ;; Registers used:
  7055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;Total ram usage:        2 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    5
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_Sensor_scheduleNextScan
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text39
  7076  012342                     __ptext39:
  7077                           	opt stack 0
  7078  012342                     _Sensor_isCalibrated:
  7079                           	opt stack 22
  7080                           
  7081                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;incstack = 0
  7085  012342  0100               	movlb	0	; () banked
  7086  012344  EE20 F008          	lfsr	2,8
  7087  012348  51B0               	movf	Sensor_isCalibrated@sensor& (0+255),w,b
  7088  01234A  26D9               	addwf	fsr2l,f,c
  7089  01234C  51B1               	movf	(Sensor_isCalibrated@sensor+1)& (0+255),w,b
  7090  01234E  22DA               	addwfc	fsr2h,f,c
  7091  012350  A6DF               	btfss	indf2,3,c
  7092  012352  D002               	goto	u4640
  7093  012354  0E01               	movlw	1
  7094  012356  0012               	return	
  7095  012358                     u4640:
  7096  012358  0E00               	movlw	0
  7097  01235A  0012               	return	
  7098  01235C                     __end_of_Sensor_isCalibrated:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           postdec1	equ	0xFE5
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _Sensor_SetTrisBit *****************
  7119 ;; Defined at:
  7120 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  sensor          1    wreg     enum E17513
  7123 ;;  TrisBit         1    0[BANK0 ] unsigned char 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  sensor          1    1[BANK0 ] enum E17513
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;Total ram usage:        2 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    5
  7142 ;; This function calls:
  7143 ;;		Nothing
  7144 ;; This function is called by:
  7145 ;;		_Sensor_scheduleNextScan
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text40
  7150  011910                     __ptext40:
  7151                           	opt stack 0
  7152  011910                     _Sensor_SetTrisBit:
  7153                           	opt stack 22
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;incstack = 0
  7157                           ;Sensor_SetTrisBit@sensor stored from wreg
  7158  011910  0100               	movlb	0	; () banked
  7159  011912  6FB1               	movwf	Sensor_SetTrisBit@sensor& (0+255),b
  7160                           
  7161                           ;mtouch_sensor.c: 224: switch(sensor)
  7162  011914  D01E               	goto	l555
  7163  011916                     l556:
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
  7167  011916  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7168  011918  D002               	bra	u4545
  7169  01191A  9485               	bcf	3973,2,c	;volatile
  7170  01191C  D001               	bra	u4546
  7171  01191E                     u4545:
  7172  01191E  8485               	bsf	3973,2,c	;volatile
  7173  011920                     u4546:
  7174                           
  7175                           ;mtouch_sensor.c: 228: break;
  7176  011920  0012               	return	
  7177  011922                     l558:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
  7181  011922  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7182  011924  D002               	bra	u4555
  7183  011926  9685               	bcf	3973,3,c	;volatile
  7184  011928  D001               	bra	u4556
  7185  01192A                     u4555:
  7186  01192A  8685               	bsf	3973,3,c	;volatile
  7187  01192C                     u4556:
  7188                           
  7189                           ;mtouch_sensor.c: 231: break;
  7190  01192C  0012               	return	
  7191  01192E                     l559:
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
  7195  01192E  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7196  011930  D002               	bra	u4565
  7197  011932  9885               	bcf	3973,4,c	;volatile
  7198  011934  D001               	bra	u4566
  7199  011936                     u4565:
  7200  011936  8885               	bsf	3973,4,c	;volatile
  7201  011938                     u4566:
  7202                           
  7203                           ;mtouch_sensor.c: 234: break;
  7204  011938  0012               	return	
  7205  01193A                     l560:
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
  7209  01193A  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7210  01193C  D002               	bra	u4575
  7211  01193E  9A85               	bcf	3973,5,c	;volatile
  7212  011940  D001               	bra	u4576
  7213  011942                     u4575:
  7214  011942  8A85               	bsf	3973,5,c	;volatile
  7215  011944                     u4576:
  7216                           
  7217                           ;mtouch_sensor.c: 237: break;
  7218  011944  0012               	return	
  7219  011946                     l561:
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
  7223  011946  B1B0               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  7224  011948  D002               	bra	u4585
  7225  01194A  9C85               	bcf	3973,6,c	;volatile
  7226  01194C  D001               	bra	u4586
  7227  01194E                     u4585:
  7228  01194E  8C85               	bsf	3973,6,c	;volatile
  7229  011950                     u4586:
  7230                           
  7231                           ;mtouch_sensor.c: 242: }
  7232                           
  7233                           ;mtouch_sensor.c: 241: default: break;
  7234                           
  7235                           ;mtouch_sensor.c: 240: break;
  7236  011950  0012               	return	
  7237  011952                     l555:
  7238  011952  0100               	movlb	0	; () banked
  7239  011954  51B1               	movf	Sensor_SetTrisBit@sensor& (0+255),w,b
  7240                           
  7241                           ; Switch size 1, requested type "space"
  7242                           ; Number of cases is 5, Range of values is 0 to 4
  7243                           ; switch strategies available:
  7244                           ; Name         Instructions Cycles
  7245                           ; simple_byte           16     9 (average)
  7246                           ;	Chosen strategy is simple_byte
  7247  011956  0A00               	xorlw	0	; case 0
  7248  011958  B4D8               	btfsc	status,2,c
  7249  01195A  D7DD               	goto	l556
  7250  01195C  0A01               	xorlw	1	; case 1
  7251  01195E  B4D8               	btfsc	status,2,c
  7252  011960  D7E0               	goto	l558
  7253  011962  0A03               	xorlw	3	; case 2
  7254  011964  B4D8               	btfsc	status,2,c
  7255  011966  D7E3               	goto	l559
  7256  011968  0A01               	xorlw	1	; case 3
  7257  01196A  B4D8               	btfsc	status,2,c
  7258  01196C  D7E6               	goto	l560
  7259  01196E  0A07               	xorlw	7	; case 4
  7260  011970  A4D8               	btfss	status,2,c
  7261  011972  0012               	return	
  7262  011974  D7E8               	goto	l561
  7263  011976                     __end_of_Sensor_SetTrisBit:
  7264                           	opt stack 0
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           postinc0	equ	0xFEE
  7273                           wreg	equ	0xFE8
  7274                           postdec1	equ	0xFE5
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           postinc2	equ	0xFDE
  7278                           postdec2	equ	0xFDD
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  7284 ;; Defined at:
  7285 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  sensor          1    wreg     enum E17513
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  sensor          1    0[BANK0 ] enum E17513
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      unsigned char 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7302 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7303 ;;Total ram usage:        1 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    5
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_MTOUCH_Sensor_SampleAll
  7310 ;;		_Sensor_scheduleNextScan
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text41
  7315  011F92                     __ptext41:
  7316                           	opt stack 0
  7317  011F92                     _MTOUCH_Sensor_isEnabled:
  7318                           	opt stack 22
  7319                           
  7320                           ;incstack = 0
  7321                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  7322  011F92  0100               	movlb	0	; () banked
  7323  011F94  6FB0               	movwf	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7324                           
  7325                           ;mtouch_sensor.c: 719: if(sensor < 5)
  7326  011F96  0E05               	movlw	5
  7327  011F98  0100               	movlb	0	; () banked
  7328  011F9A  61B0               	cpfslt	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  7329  011F9C  D012               	goto	l703
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
  7333  011F9E  51B0               	movf	MTOUCH_Sensor_isEnabled@sensor& (0+255),w,b
  7334  011FA0  0D09               	mullw	9
  7335  011FA2  0E08               	movlw	8
  7336  011FA4  26F3               	addwf	prodl,f,c
  7337  011FA6  0E00               	movlw	0
  7338  011FA8  22F4               	addwfc	prodh,f,c
  7339  011FAA  0E83               	movlw	low _mtouch_sensor
  7340  011FAC  24F3               	addwf	prodl,w,c
  7341  011FAE  6ED9               	movwf	fsr2l,c
  7342  011FB0  0E00               	movlw	high _mtouch_sensor
  7343  011FB2  20F4               	addwfc	prodh,w,c
  7344  011FB4  6EDA               	movwf	fsr2h,c
  7345  011FB6  A0DF               	btfss	indf2,0,c
  7346  011FB8  D002               	goto	u4630
  7347  011FBA  0E01               	movlw	1
  7348  011FBC  0012               	return	
  7349  011FBE                     u4630:
  7350  011FBE  0E00               	movlw	0
  7351                           
  7352                           ; BSR set to: 0
  7353                           
  7354                           ; BSR set to: 0
  7355  011FC0  0012               	return	
  7356  011FC2                     l703:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;mtouch_sensor.c: 721: else
  7360                           ;mtouch_sensor.c: 722: return 0;
  7361                           
  7362                           ; BSR set to: 0
  7363  011FC2  0E00               	movlw	0
  7364                           
  7365                           ; BSR set to: 0
  7366  011FC4  0012               	return	
  7367  011FC6                     __end_of_MTOUCH_Sensor_isEnabled:
  7368                           	opt stack 0
  7369                           tblptru	equ	0xFF8
  7370                           tblptrh	equ	0xFF7
  7371                           tblptrl	equ	0xFF6
  7372                           tablat	equ	0xFF5
  7373                           prodh	equ	0xFF4
  7374                           prodl	equ	0xFF3
  7375                           intcon	equ	0xFF2
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           postdec1	equ	0xFE5
  7379                           fsr1l	equ	0xFE1
  7380                           indf2	equ	0xFDF
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _Sensor_FrequencyHopping *****************
  7388 ;; Defined at:
  7389 ;;		line 595 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  sensor          1   20[BANK0 ] enum E17513
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7406 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7407 ;;Total ram usage:        1 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    8
  7410 ;; This function calls:
  7411 ;;		_Sensor_FrequencyHopping_Autotune_Process
  7412 ;;		_Sensor_postAcquisitionProcess
  7413 ;;		_Sensor_setSamplePeriod
  7414 ;; This function is called by:
  7415 ;;		_MTOUCH_Sensor_SampleAll
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text42
  7420  012268                     __ptext42:
  7421                           	opt stack 0
  7422  012268                     _Sensor_FrequencyHopping:
  7423                           	opt stack 20
  7424                           
  7425                           ;mtouch_sensor.c: 597: enum mtouch_sensor_names sensor;
  7426                           ;mtouch_sensor.c: 599: Sensor_FrequencyHopping_Autotune_Process();
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;incstack = 0
  7430  012268  EC76  F082         	call	_Sensor_FrequencyHopping_Autotune_Process	;wreg free
  7431                           
  7432                           ;mtouch_sensor.c: 601: for (sensor = 0; sensor < 5; sensor++)
  7433  01226C  0E00               	movlw	0
  7434  01226E  0100               	movlb	0	; () banked
  7435  012270  6FC4               	movwf	Sensor_FrequencyHopping@sensor& (0+255),b
  7436  012272                     l4911:
  7437                           
  7438                           ; BSR set to: 0
  7439  012272  0E04               	movlw	4
  7440  012274  65C4               	cpfsgt	Sensor_FrequencyHopping@sensor& (0+255),b
  7441  012276  D001               	goto	l658
  7442  012278  D006               	goto	u5430
  7443  01227A                     l658:
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;mtouch_sensor.c: 602: {
  7447                           ;mtouch_sensor.c: 603: Sensor_postAcquisitionProcess(sensor);
  7448                           
  7449                           ; BSR set to: 0
  7450  01227A  51C4               	movf	Sensor_FrequencyHopping@sensor& (0+255),w,b
  7451  01227C  EC1F  F089         	call	_Sensor_postAcquisitionProcess
  7452  012280  0100               	movlb	0	; () banked
  7453  012282  2BC4               	incf	Sensor_FrequencyHopping@sensor& (0+255),f,b
  7454  012284  D7F6               	goto	l4911
  7455  012286                     u5430:
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;mtouch_sensor.c: 604: }
  7459                           ;mtouch_sensor.c: 606: Sensor_setSamplePeriod();
  7460                           
  7461                           ; BSR set to: 0
  7462  012286  EC46  F091         	call	_Sensor_setSamplePeriod	;wreg free
  7463  01228A  0012               	return		;funcret
  7464  01228C                     __end_of_Sensor_FrequencyHopping:
  7465                           	opt stack 0
  7466                           tblptru	equ	0xFF8
  7467                           tblptrh	equ	0xFF7
  7468                           tblptrl	equ	0xFF6
  7469                           tablat	equ	0xFF5
  7470                           prodh	equ	0xFF4
  7471                           prodl	equ	0xFF3
  7472                           intcon	equ	0xFF2
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function _Sensor_setSamplePeriod *****************
  7485 ;; Defined at:
  7486 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;		None
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;		None
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  1    wreg      void 
  7493 ;; Registers used:
  7494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7495 ;; Tracked objects:
  7496 ;;		On entry : 0/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7504 ;;Total ram usage:        0 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; Hardware stack levels required when called:    5
  7507 ;; This function calls:
  7508 ;;		Nothing
  7509 ;; This function is called by:
  7510 ;;		_Sensor_FrequencyHopping
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text43
  7515  01228C                     __ptext43:
  7516                           	opt stack 0
  7517  01228C                     _Sensor_setSamplePeriod:
  7518                           	opt stack 22
  7519                           
  7520                           ;mtouch_sensor.c: 522: if(++freq_index >= sizeof(freq_hop) )
  7521                           
  7522                           ;incstack = 0
  7523  01228C  0100               	movlb	0	; () banked
  7524  01228E  2B81               	incf	_freq_index& (0+255),f,b
  7525  012290  0E02               	movlw	2
  7526  012292  6581               	cpfsgt	_freq_index& (0+255),b
  7527  012294  D002               	goto	l628
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;mtouch_sensor.c: 523: freq_index = 0;
  7531  012296  0E00               	movlw	0
  7532  012298  6F81               	movwf	_freq_index& (0+255),b
  7533  01229A                     l628:
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;mtouch_sensor.c: 525: sample_delay = freq_hop[freq_index];
  7537                           
  7538                           ; BSR set to: 0
  7539  01229A  5181               	movf	_freq_index& (0+255),w,b
  7540  01229C  0D01               	mullw	1
  7541  01229E  0EDE               	movlw	low _freq_hop
  7542  0122A0  24F3               	addwf	prodl,w,c
  7543  0122A2  6ED9               	movwf	fsr2l,c
  7544  0122A4  0E00               	movlw	high _freq_hop
  7545  0122A6  20F4               	addwfc	prodh,w,c
  7546  0122A8  6EDA               	movwf	fsr2h,c
  7547  0122AA  50DF               	movf	indf2,w,c
  7548  0122AC  6E38               	movwf	_sample_delay,c
  7549                           
  7550                           ; BSR set to: 0
  7551  0122AE  0012               	return		;funcret
  7552  0122B0                     __end_of_Sensor_setSamplePeriod:
  7553                           	opt stack 0
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           postinc0	equ	0xFEE
  7562                           wreg	equ	0xFE8
  7563                           postdec1	equ	0xFE5
  7564                           fsr1l	equ	0xFE1
  7565                           indf2	equ	0xFDF
  7566                           postinc2	equ	0xFDE
  7567                           postdec2	equ	0xFDD
  7568                           fsr2h	equ	0xFDA
  7569                           fsr2l	equ	0xFD9
  7570                           status	equ	0xFD8
  7571                           
  7572 ;; *************** function _Sensor_postAcquisitionProcess *****************
  7573 ;; Defined at:
  7574 ;;		line 450 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;  name            1    wreg     enum E17513
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;  name            1   17[BANK0 ] enum E17513
  7579 ;;  sensor          2   18[BANK0 ] PTR struct .
  7580 ;;		 -> mtouch_sensor(45), 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      void 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7591 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7592 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7593 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7594 ;;Total ram usage:        9 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    7
  7597 ;; This function calls:
  7598 ;;		_Sensor_DefaultCallback
  7599 ;;		_Sensor_RawSample_Update
  7600 ;;		_Sensor_isEnabled
  7601 ;;		_Sensor_setActive
  7602 ;;		_Sensor_setInactive
  7603 ;;		_abs
  7604 ;; This function is called by:
  7605 ;;		_Sensor_FrequencyHopping
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text44
  7610  01123E                     __ptext44:
  7611                           	opt stack 0
  7612  01123E                     _Sensor_postAcquisitionProcess:
  7613                           	opt stack 20
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;incstack = 0
  7617                           ;Sensor_postAcquisitionProcess@name stored from wreg
  7618  01123E  0100               	movlb	0	; () banked
  7619  011240  6FC1               	movwf	Sensor_postAcquisitionProcess@name& (0+255),b
  7620                           
  7621                           ;mtouch_sensor.c: 452: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  7622  011242  0100               	movlb	0	; () banked
  7623  011244  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7624  011246  0D09               	mullw	9
  7625  011248  0E83               	movlw	low _mtouch_sensor
  7626  01124A  24F3               	addwf	prodl,w,c
  7627  01124C  6FC2               	movwf	Sensor_postAcquisitionProcess@sensor& (0+255),b
  7628  01124E  0E00               	movlw	high _mtouch_sensor
  7629  011250  20F4               	addwfc	prodh,w,c
  7630  011252  6FC3               	movwf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),b
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;mtouch_sensor.c: 454: if(Sensor_isEnabled(sensor))
  7634  011254  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_isEnabled@sensor
  7635  011258  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_isEnabled@sensor+1
  7636  01125C  EC21  F091         	call	_Sensor_isEnabled	;wreg free
  7637  011260  0900               	iorlw	0
  7638  011262  B4D8               	btfsc	status,2,c
  7639  011264  D05A               	goto	l608
  7640                           
  7641                           ;mtouch_sensor.c: 455: {
  7642                           ;mtouch_sensor.c: 456: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - sensor
      +                          ->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<2))
  7643  011266  0100               	movlb	0	; () banked
  7644  011268  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7645  01126A  0D02               	mullw	2
  7646  01126C  0E29               	movlw	low _packet_sample
  7647  01126E  24F3               	addwf	prodl,w,c
  7648  011270  6ED9               	movwf	fsr2l,c
  7649  011272  0E00               	movlw	high _packet_sample
  7650  011274  20F4               	addwfc	prodh,w,c
  7651  011276  6EDA               	movwf	fsr2h,c
  7652  011278  CFDE F0BB          	movff	postinc2,??_Sensor_postAcquisitionProcess
  7653  01127C  CFDD F0BC          	movff	postdec2,??_Sensor_postAcquisitionProcess+1
  7654  011280  EE20 F006          	lfsr	2,6
  7655  011284  51C2               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7656  011286  26D9               	addwf	fsr2l,f,c
  7657  011288  51C3               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7658  01128A  22DA               	addwfc	fsr2h,f,c
  7659  01128C  CFDE F0BD          	movff	postinc2,??_Sensor_postAcquisitionProcess+2
  7660  011290  CFDD F0BE          	movff	postdec2,??_Sensor_postAcquisitionProcess+3
  7661  011294  1FBD               	comf	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7662  011296  1FBE               	comf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7663  011298  4BBD               	infsnz	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7664  01129A  2BBE               	incf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7665  01129C  51BB               	movf	??_Sensor_postAcquisitionProcess& (0+255),w,b
  7666  01129E  25BD               	addwf	(??_Sensor_postAcquisitionProcess+2)& (0+255),w,b
  7667  0112A0  6FB0               	movwf	abs@a& (0+255),b
  7668  0112A2  51BC               	movf	(??_Sensor_postAcquisitionProcess+1)& (0+255),w,b
  7669  0112A4  21BE               	addwfc	(??_Sensor_postAcquisitionProcess+3)& (0+255),w,b
  7670  0112A6  6FB1               	movwf	(abs@a+1)& (0+255),b
  7671  0112A8  ECA8  F090         	call	_abs	;wreg free
  7672  0112AC  0100               	movlb	0	; () banked
  7673  0112AE  EE20 F004          	lfsr	2,4
  7674  0112B2  51C2               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7675  0112B4  26D9               	addwf	fsr2l,f,c
  7676  0112B6  51C3               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7677  0112B8  22DA               	addwfc	fsr2h,f,c
  7678  0112BA  50DF               	movf	indf2,w,c
  7679  0112BC  6FBF               	movwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),b
  7680  0112BE  6BC0               	clrf	(??_Sensor_postAcquisitionProcess+5)& (0+255),b
  7681  0112C0  90D8               	bcf	status,0,c
  7682  0112C2  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7683  0112C4  37C0               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7684  0112C6  90D8               	bcf	status,0,c
  7685  0112C8  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7686  0112CA  37C0               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7687  0112CC  51B0               	movf	?_abs& (0+255),w,b
  7688  0112CE  5DBF               	subwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),w,b
  7689  0112D0  51B1               	movf	(?_abs+1)& (0+255),w,b
  7690  0112D2  59C0               	subwfb	(??_Sensor_postAcquisitionProcess+5)& (0+255),w,b
  7691  0112D4  B0D8               	btfsc	status,0,c
  7692  0112D6  D007               	goto	l609
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;mtouch_sensor.c: 457: Sensor_setActive(sensor);
  7696  0112D8  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setActive@sensor
  7697  0112DC  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setActive@sensor+1
  7698  0112E0  ECFA  F091         	call	_Sensor_setActive	;wreg free
  7699  0112E4  D006               	goto	l610
  7700  0112E6                     l609:
  7701                           
  7702                           ;mtouch_sensor.c: 458: else
  7703                           ;mtouch_sensor.c: 459: Sensor_setInactive(sensor);
  7704  0112E6  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7705  0112EA  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7706  0112EE  ECF1  F091         	call	_Sensor_setInactive	;wreg free
  7707  0112F2                     l610:
  7708                           
  7709                           ;mtouch_sensor.c: 461: Sensor_RawSample_Update(sensor);
  7710  0112F2  C0C2  F0B7         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_RawSample_Update@sensor
  7711  0112F6  C0C3  F0B8         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_RawSample_Update@sensor+1
  7712  0112FA  EC16  F08E         	call	_Sensor_RawSample_Update	;wreg free
  7713                           
  7714                           ;mtouch_sensor.c: 462: callback_sampled(name);
  7715  0112FE  D801               	call	u4688
  7716  011300  0012               	return	
  7717  011302                     u4688:
  7718  011302  0005               	push	
  7719  011304  6EFA               	movwf	pclath,c
  7720  011306  5048               	movf	_callback_sampled,w,c
  7721  011308  6EFD               	movwf	tosl,c
  7722  01130A  5049               	movf	_callback_sampled+1,w,c
  7723  01130C  6EFE               	movwf	tosh,c
  7724  01130E  504A               	movf	_callback_sampled+2,w,c
  7725  011310  6EFF               	movwf	tosu,c
  7726  011312  50FA               	movf	pclath,w,c
  7727  011314  0100               	movlb	0	; () banked
  7728  011316  51C1               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7729  011318  0012               	return		;indir
  7730  01131A                     l608:
  7731                           
  7732                           ;mtouch_sensor.c: 464: else
  7733                           ;mtouch_sensor.c: 465: {
  7734                           ;mtouch_sensor.c: 466: Sensor_setInactive(sensor);
  7735  01131A  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7736  01131E  C0C3  F0B1         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7737  011322  ECF1  F091         	call	_Sensor_setInactive
  7738  011326  0012               	return	
  7739  011328                     __end_of_Sensor_postAcquisitionProcess:
  7740                           	opt stack 0
  7741                           tosu	equ	0xFFF
  7742                           tosh	equ	0xFFE
  7743                           tosl	equ	0xFFD
  7744                           pclath	equ	0xFFA
  7745                           tblptru	equ	0xFF8
  7746                           tblptrh	equ	0xFF7
  7747                           tblptrl	equ	0xFF6
  7748                           tablat	equ	0xFF5
  7749                           prodh	equ	0xFF4
  7750                           prodl	equ	0xFF3
  7751                           intcon	equ	0xFF2
  7752                           postinc0	equ	0xFEE
  7753                           wreg	equ	0xFE8
  7754                           postdec1	equ	0xFE5
  7755                           fsr1l	equ	0xFE1
  7756                           indf2	equ	0xFDF
  7757                           postinc2	equ	0xFDE
  7758                           postdec2	equ	0xFDD
  7759                           fsr2h	equ	0xFDA
  7760                           fsr2l	equ	0xFD9
  7761                           status	equ	0xFD8
  7762                           
  7763 ;; *************** function _Sensor_setInactive *****************
  7764 ;; Defined at:
  7765 ;;		line 745 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  sensor          2    0[BANK0 ] PTR struct .
  7768 ;;		 -> mtouch_sensor(45), 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;		None
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      void 
  7773 ;; Registers used:
  7774 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7784 ;;Total ram usage:        2 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; Hardware stack levels required when called:    5
  7787 ;; This function calls:
  7788 ;;		Nothing
  7789 ;; This function is called by:
  7790 ;;		_Sensor_postAcquisitionProcess
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text45
  7795  0123E2                     __ptext45:
  7796                           	opt stack 0
  7797  0123E2                     _Sensor_setInactive:
  7798                           	opt stack 21
  7799                           
  7800                           ;mtouch_sensor.c: 747: sensor->acitve = 0;
  7801                           
  7802                           ;incstack = 0
  7803  0123E2  0100               	movlb	0	; () banked
  7804  0123E4  EE20 F008          	lfsr	2,8
  7805  0123E8  51B0               	movf	Sensor_setInactive@sensor& (0+255),w,b
  7806  0123EA  26D9               	addwf	fsr2l,f,c
  7807  0123EC  51B1               	movf	(Sensor_setInactive@sensor+1)& (0+255),w,b
  7808  0123EE  22DA               	addwfc	fsr2h,f,c
  7809  0123F0  94DF               	bcf	indf2,2,c
  7810                           
  7811                           ; BSR set to: 0
  7812  0123F2  0012               	return		;funcret
  7813  0123F4                     __end_of_Sensor_setInactive:
  7814                           	opt stack 0
  7815                           tosu	equ	0xFFF
  7816                           tosh	equ	0xFFE
  7817                           tosl	equ	0xFFD
  7818                           pclath	equ	0xFFA
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           intcon	equ	0xFF2
  7826                           postinc0	equ	0xFEE
  7827                           wreg	equ	0xFE8
  7828                           postdec1	equ	0xFE5
  7829                           fsr1l	equ	0xFE1
  7830                           indf2	equ	0xFDF
  7831                           postinc2	equ	0xFDE
  7832                           postdec2	equ	0xFDD
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function _Sensor_setActive *****************
  7838 ;; Defined at:
  7839 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  sensor          2    0[BANK0 ] PTR struct .
  7842 ;;		 -> mtouch_sensor(45), 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;		None
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7854 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7858 ;;Total ram usage:        2 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    5
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_Sensor_postAcquisitionProcess
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text46
  7869  0123F4                     __ptext46:
  7870                           	opt stack 0
  7871  0123F4                     _Sensor_setActive:
  7872                           	opt stack 21
  7873                           
  7874                           ;mtouch_sensor.c: 742: sensor->acitve = 1;
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;incstack = 0
  7878  0123F4  0100               	movlb	0	; () banked
  7879  0123F6  EE20 F008          	lfsr	2,8
  7880  0123FA  51B0               	movf	Sensor_setActive@sensor& (0+255),w,b
  7881  0123FC  26D9               	addwf	fsr2l,f,c
  7882  0123FE  51B1               	movf	(Sensor_setActive@sensor+1)& (0+255),w,b
  7883  012400  22DA               	addwfc	fsr2h,f,c
  7884  012402  84DF               	bsf	indf2,2,c
  7885                           
  7886                           ; BSR set to: 0
  7887  012404  0012               	return		;funcret
  7888  012406                     __end_of_Sensor_setActive:
  7889                           	opt stack 0
  7890                           tosu	equ	0xFFF
  7891                           tosh	equ	0xFFE
  7892                           tosl	equ	0xFFD
  7893                           pclath	equ	0xFFA
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           intcon	equ	0xFF2
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           postdec1	equ	0xFE5
  7904                           fsr1l	equ	0xFE1
  7905                           indf2	equ	0xFDF
  7906                           postinc2	equ	0xFDE
  7907                           postdec2	equ	0xFDD
  7908                           fsr2h	equ	0xFDA
  7909                           fsr2l	equ	0xFD9
  7910                           status	equ	0xFD8
  7911                           
  7912 ;; *************** function _Sensor_isEnabled *****************
  7913 ;; Defined at:
  7914 ;;		line 725 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  sensor          2    0[BANK0 ] PTR struct .
  7917 ;;		 -> mtouch_sensor(45), 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      unsigned char 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7929 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    5
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Sensor_postAcquisitionProcess
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text47
  7944  012242                     __ptext47:
  7945                           	opt stack 0
  7946  012242                     _Sensor_isEnabled:
  7947                           	opt stack 21
  7948                           
  7949                           ;mtouch_sensor.c: 727: if(sensor!=(0))
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;incstack = 0
  7953  012242  0100               	movlb	0	; () banked
  7954  012244  51B0               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7955  012246  11B1               	iorwf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7956  012248  B4D8               	btfsc	status,2,c
  7957  01224A  D00C               	goto	l708
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;mtouch_sensor.c: 728: return (bool)sensor->enabled;
  7961  01224C  EE20 F008          	lfsr	2,8
  7962  012250  51B0               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7963  012252  26D9               	addwf	fsr2l,f,c
  7964  012254  51B1               	movf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7965  012256  22DA               	addwfc	fsr2h,f,c
  7966  012258  A0DF               	btfss	indf2,0,c
  7967  01225A  D002               	goto	u4470
  7968  01225C  0E01               	movlw	1
  7969  01225E  0012               	return	
  7970  012260                     u4470:
  7971  012260  0E00               	movlw	0
  7972                           
  7973                           ; BSR set to: 0
  7974                           
  7975                           ; BSR set to: 0
  7976  012262  0012               	return	
  7977  012264                     l708:
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;mtouch_sensor.c: 729: else
  7981                           ;mtouch_sensor.c: 730: return 0;
  7982                           
  7983                           ; BSR set to: 0
  7984  012264  0E00               	movlw	0
  7985                           
  7986                           ; BSR set to: 0
  7987  012266  0012               	return	
  7988  012268                     __end_of_Sensor_isEnabled:
  7989                           	opt stack 0
  7990                           tosu	equ	0xFFF
  7991                           tosh	equ	0xFFE
  7992                           tosl	equ	0xFFD
  7993                           pclath	equ	0xFFA
  7994                           tblptru	equ	0xFF8
  7995                           tblptrh	equ	0xFF7
  7996                           tblptrl	equ	0xFF6
  7997                           tablat	equ	0xFF5
  7998                           prodh	equ	0xFF4
  7999                           prodl	equ	0xFF3
  8000                           intcon	equ	0xFF2
  8001                           postinc0	equ	0xFEE
  8002                           wreg	equ	0xFE8
  8003                           postdec1	equ	0xFE5
  8004                           fsr1l	equ	0xFE1
  8005                           indf2	equ	0xFDF
  8006                           postinc2	equ	0xFDE
  8007                           postdec2	equ	0xFDD
  8008                           fsr2h	equ	0xFDA
  8009                           fsr2l	equ	0xFD9
  8010                           status	equ	0xFD8
  8011                           
  8012 ;; *************** function _Sensor_RawSample_Update *****************
  8013 ;; Defined at:
  8014 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;  sensor          2    7[BANK0 ] PTR struct .
  8017 ;;		 -> mtouch_sensor(45), 
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;  result          2    9[BANK0 ] unsigned int 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8029 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8030 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8033 ;;Total ram usage:        4 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    6
  8036 ;; This function calls:
  8037 ;;		_medianFilter
  8038 ;; This function is called by:
  8039 ;;		_Sensor_postAcquisitionProcess
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text48
  8044  011C2C                     __ptext48:
  8045                           	opt stack 0
  8046  011C2C                     _Sensor_RawSample_Update:
  8047                           	opt stack 20
  8048                           
  8049                           ;mtouch_sensor.c: 544: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;incstack = 0
  8053  011C2C  C0B7  FFD9         	movff	Sensor_RawSample_Update@sensor,fsr2l
  8054  011C30  C0B8  FFDA         	movff	Sensor_RawSample_Update@sensor+1,fsr2h
  8055  011C34  50DF               	movf	indf2,w,c
  8056  011C36  EC4C  F081         	call	_medianFilter
  8057  011C3A  C0B0  F0B9         	movff	?_medianFilter,Sensor_RawSample_Update@result
  8058  011C3E  C0B1  F0BA         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  8059                           
  8060                           ;mtouch_sensor.c: 546: if (GIE == (uint8_t)1)
  8061  011C42  AEF2               	btfss	intcon,7,c	;volatile
  8062  011C44  D00E               	goto	l637
  8063                           
  8064                           ;mtouch_sensor.c: 547: {
  8065                           ;mtouch_sensor.c: 548: GIE = (uint8_t)0;
  8066  011C46  9EF2               	bcf	intcon,7,c	;volatile
  8067                           
  8068                           ;mtouch_sensor.c: 549: sensor->rawSample = result;
  8069  011C48  0100               	movlb	0	; () banked
  8070  011C4A  EE20 F006          	lfsr	2,6
  8071  011C4E  51B7               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  8072  011C50  26D9               	addwf	fsr2l,f,c
  8073  011C52  51B8               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  8074  011C54  22DA               	addwfc	fsr2h,f,c
  8075  011C56  C0B9  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  8076  011C5A  C0BA  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  8077                           
  8078                           ; BSR set to: 0
  8079                           ;mtouch_sensor.c: 550: GIE = (uint8_t)1;
  8080  011C5E  8EF2               	bsf	intcon,7,c	;volatile
  8081                           
  8082                           ;mtouch_sensor.c: 551: }
  8083  011C60  0012               	return	
  8084  011C62                     l637:
  8085                           
  8086                           ;mtouch_sensor.c: 552: else
  8087                           ;mtouch_sensor.c: 553: {
  8088                           ;mtouch_sensor.c: 554: sensor->rawSample = result;
  8089                           
  8090                           ; BSR set to: 0
  8091  011C62  0100               	movlb	0	; () banked
  8092  011C64  EE20 F006          	lfsr	2,6
  8093  011C68  51B7               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  8094  011C6A  26D9               	addwf	fsr2l,f,c
  8095  011C6C  51B8               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  8096  011C6E  22DA               	addwfc	fsr2h,f,c
  8097  011C70  C0B9  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  8098  011C74  C0BA  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  8099  011C78  0012               	return	
  8100  011C7A                     __end_of_Sensor_RawSample_Update:
  8101                           	opt stack 0
  8102                           tosu	equ	0xFFF
  8103                           tosh	equ	0xFFE
  8104                           tosl	equ	0xFFD
  8105                           pclath	equ	0xFFA
  8106                           tblptru	equ	0xFF8
  8107                           tblptrh	equ	0xFF7
  8108                           tblptrl	equ	0xFF6
  8109                           tablat	equ	0xFF5
  8110                           prodh	equ	0xFF4
  8111                           prodl	equ	0xFF3
  8112                           intcon	equ	0xFF2
  8113                           postinc0	equ	0xFEE
  8114                           wreg	equ	0xFE8
  8115                           postdec1	equ	0xFE5
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _medianFilter *****************
  8125 ;; Defined at:
  8126 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  sensor          1    wreg     enum E17513
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  sensor          1    6[BANK0 ] enum E17513
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  2    0[BANK0 ] unsigned int 
  8133 ;; Registers used:
  8134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8140 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8142 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8143 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8144 ;;Total ram usage:        7 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    5
  8147 ;; This function calls:
  8148 ;;		Nothing
  8149 ;; This function is called by:
  8150 ;;		_Sensor_RawSample_Update
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text49
  8155  010298                     __ptext49:
  8156                           	opt stack 0
  8157  010298                     _medianFilter:
  8158                           	opt stack 20
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;incstack = 0
  8162                           ;medianFilter@sensor stored from wreg
  8163  010298  0100               	movlb	0	; () banked
  8164  01029A  6FB6               	movwf	medianFilter@sensor& (0+255),b
  8165                           
  8166                           ;mtouch_sensor.c: 561: static uint8_t bufferIndex[5];
  8167                           ;mtouch_sensor.c: 563: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
  8168  01029C  0100               	movlb	0	; () banked
  8169  01029E  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8170  0102A0  0D02               	mullw	2
  8171  0102A2  0E29               	movlw	low _packet_sample
  8172  0102A4  24F3               	addwf	prodl,w,c
  8173  0102A6  6ED9               	movwf	fsr2l,c
  8174  0102A8  0E00               	movlw	high _packet_sample
  8175  0102AA  20F4               	addwfc	prodh,w,c
  8176  0102AC  6EDA               	movwf	fsr2h,c
  8177  0102AE  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8178  0102B0  0D06               	mullw	6
  8179  0102B2  0E60               	movlw	low _sensor_medianBuffer
  8180  0102B4  6FB2               	movwf	??_medianFilter& (0+255),b
  8181  0102B6  0E00               	movlw	high _sensor_medianBuffer
  8182  0102B8  6FB3               	movwf	(??_medianFilter+1)& (0+255),b
  8183  0102BA  50F3               	movf	prodl,w,c
  8184  0102BC  27B2               	addwf	??_medianFilter& (0+255),f,b
  8185  0102BE  50F4               	movf	prodh,w,c
  8186  0102C0  23B3               	addwfc	(??_medianFilter+1)& (0+255),f,b
  8187  0102C2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8188  0102C4  0D01               	mullw	1
  8189  0102C6  0E33               	movlw	low medianFilter@bufferIndex
  8190  0102C8  24F3               	addwf	prodl,w,c
  8191  0102CA  6EE1               	movwf	fsr1l,c
  8192  0102CC  0E00               	movlw	high medianFilter@bufferIndex
  8193  0102CE  20F4               	addwfc	prodh,w,c
  8194  0102D0  6EE2               	movwf	fsr1h,c
  8195  0102D2  CFE7 F0B4          	movff	indf1,??_medianFilter+2
  8196  0102D6  0E01               	movlw	1
  8197  0102D8  26E7               	addwf	indf1,f,c
  8198  0102DA  51B4               	movf	(??_medianFilter+2)& (0+255),w,b
  8199  0102DC  0D02               	mullw	2
  8200  0102DE  50F3               	movf	prodl,w,c
  8201  0102E0  25B2               	addwf	??_medianFilter& (0+255),w,b
  8202  0102E2  6EE1               	movwf	fsr1l,c
  8203  0102E4  50F4               	movf	prodh,w,c
  8204  0102E6  21B3               	addwfc	(??_medianFilter+1)& (0+255),w,b
  8205  0102E8  6EE2               	movwf	fsr1h,c
  8206  0102EA  CFDE FFE6          	movff	postinc2,postinc1
  8207  0102EE  CFDD FFE5          	movff	postdec2,postdec1
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;mtouch_sensor.c: 565: if(bufferIndex[sensor]>=3)
  8211  0102F2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8212  0102F4  0D01               	mullw	1
  8213  0102F6  0E33               	movlw	low medianFilter@bufferIndex
  8214  0102F8  24F3               	addwf	prodl,w,c
  8215  0102FA  6ED9               	movwf	fsr2l,c
  8216  0102FC  0E00               	movlw	high medianFilter@bufferIndex
  8217  0102FE  20F4               	addwfc	prodh,w,c
  8218  010300  6EDA               	movwf	fsr2h,c
  8219  010302  0E02               	movlw	2
  8220  010304  64DF               	cpfsgt	indf2,c
  8221  010306  D00A               	goto	l644
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;mtouch_sensor.c: 566: bufferIndex[sensor] = 0;
  8225  010308  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8226  01030A  0D01               	mullw	1
  8227  01030C  0E33               	movlw	low medianFilter@bufferIndex
  8228  01030E  24F3               	addwf	prodl,w,c
  8229  010310  6ED9               	movwf	fsr2l,c
  8230  010312  0E00               	movlw	high medianFilter@bufferIndex
  8231  010314  20F4               	addwfc	prodh,w,c
  8232  010316  6EDA               	movwf	fsr2h,c
  8233  010318  0E00               	movlw	0
  8234  01031A  6EDF               	movwf	indf2,c
  8235  01031C                     l644:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;mtouch_sensor.c: 568: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
  8239                           
  8240                           ; BSR set to: 0
  8241  01031C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8242  01031E  0D06               	mullw	6
  8243  010320  0E02               	movlw	2
  8244  010322  26F3               	addwf	prodl,f,c
  8245  010324  0E00               	movlw	0
  8246  010326  22F4               	addwfc	prodh,f,c
  8247  010328  0E60               	movlw	low _sensor_medianBuffer
  8248  01032A  24F3               	addwf	prodl,w,c
  8249  01032C  6ED9               	movwf	fsr2l,c
  8250  01032E  0E00               	movlw	high _sensor_medianBuffer
  8251  010330  20F4               	addwfc	prodh,w,c
  8252  010332  6EDA               	movwf	fsr2h,c
  8253  010334  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8254  010336  0D06               	mullw	6
  8255  010338  0E60               	movlw	low _sensor_medianBuffer
  8256  01033A  24F3               	addwf	prodl,w,c
  8257  01033C  6EE1               	movwf	fsr1l,c
  8258  01033E  0E00               	movlw	high _sensor_medianBuffer
  8259  010340  20F4               	addwfc	prodh,w,c
  8260  010342  6EE2               	movwf	fsr1h,c
  8261  010344  50DE               	movf	postinc2,w,c
  8262  010346  5CE6               	subwf	postinc1,w,c
  8263  010348  50DE               	movf	postinc2,w,c
  8264  01034A  58E6               	subwfb	postinc1,w,c
  8265  01034C  A0D8               	btfss	status,0,c
  8266  01034E  D067               	goto	l645
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;mtouch_sensor.c: 569: {
  8270                           ;mtouch_sensor.c: 570: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8271  010350  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8272  010352  0D06               	mullw	6
  8273  010354  0E04               	movlw	4
  8274  010356  26F3               	addwf	prodl,f,c
  8275  010358  0E00               	movlw	0
  8276  01035A  22F4               	addwfc	prodh,f,c
  8277  01035C  0E60               	movlw	low _sensor_medianBuffer
  8278  01035E  24F3               	addwf	prodl,w,c
  8279  010360  6ED9               	movwf	fsr2l,c
  8280  010362  0E00               	movlw	high _sensor_medianBuffer
  8281  010364  20F4               	addwfc	prodh,w,c
  8282  010366  6EDA               	movwf	fsr2h,c
  8283  010368  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8284  01036A  0D06               	mullw	6
  8285  01036C  0E02               	movlw	2
  8286  01036E  26F3               	addwf	prodl,f,c
  8287  010370  0E00               	movlw	0
  8288  010372  22F4               	addwfc	prodh,f,c
  8289  010374  0E60               	movlw	low _sensor_medianBuffer
  8290  010376  24F3               	addwf	prodl,w,c
  8291  010378  6EE1               	movwf	fsr1l,c
  8292  01037A  0E00               	movlw	high _sensor_medianBuffer
  8293  01037C  20F4               	addwfc	prodh,w,c
  8294  01037E  6EE2               	movwf	fsr1h,c
  8295  010380  50DE               	movf	postinc2,w,c
  8296  010382  5CE6               	subwf	postinc1,w,c
  8297  010384  50DE               	movf	postinc2,w,c
  8298  010386  58E6               	subwfb	postinc1,w,c
  8299  010388  A0D8               	btfss	status,0,c
  8300  01038A  D011               	goto	l646
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;mtouch_sensor.c: 571: return sensor_medianBuffer[sensor][1];
  8304  01038C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8305  01038E  0D06               	mullw	6
  8306  010390  0E02               	movlw	2
  8307  010392  26F3               	addwf	prodl,f,c
  8308  010394  0E00               	movlw	0
  8309  010396  22F4               	addwfc	prodh,f,c
  8310  010398  0E60               	movlw	low _sensor_medianBuffer
  8311  01039A  24F3               	addwf	prodl,w,c
  8312  01039C  6ED9               	movwf	fsr2l,c
  8313  01039E  0E00               	movlw	high _sensor_medianBuffer
  8314  0103A0  20F4               	addwfc	prodh,w,c
  8315  0103A2  6EDA               	movwf	fsr2h,c
  8316  0103A4  CFDE F0B0          	movff	postinc2,?_medianFilter
  8317  0103A8  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8318                           
  8319                           ; BSR set to: 0
  8320                           
  8321                           ; BSR set to: 0
  8322  0103AC  0012               	return	
  8323  0103AE                     l646:
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;mtouch_sensor.c: 572: else
  8327                           ;mtouch_sensor.c: 573: {
  8328                           ;mtouch_sensor.c: 574: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8329                           
  8330                           ; BSR set to: 0
  8331  0103AE  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8332  0103B0  0D06               	mullw	6
  8333  0103B2  0E04               	movlw	4
  8334  0103B4  26F3               	addwf	prodl,f,c
  8335  0103B6  0E00               	movlw	0
  8336  0103B8  22F4               	addwfc	prodh,f,c
  8337  0103BA  0E60               	movlw	low _sensor_medianBuffer
  8338  0103BC  24F3               	addwf	prodl,w,c
  8339  0103BE  6ED9               	movwf	fsr2l,c
  8340  0103C0  0E00               	movlw	high _sensor_medianBuffer
  8341  0103C2  20F4               	addwfc	prodh,w,c
  8342  0103C4  6EDA               	movwf	fsr2h,c
  8343  0103C6  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8344  0103C8  0D06               	mullw	6
  8345  0103CA  0E60               	movlw	low _sensor_medianBuffer
  8346  0103CC  24F3               	addwf	prodl,w,c
  8347  0103CE  6EE1               	movwf	fsr1l,c
  8348  0103D0  0E00               	movlw	high _sensor_medianBuffer
  8349  0103D2  20F4               	addwfc	prodh,w,c
  8350  0103D4  6EE2               	movwf	fsr1h,c
  8351  0103D6  50DE               	movf	postinc2,w,c
  8352  0103D8  5CE6               	subwf	postinc1,w,c
  8353  0103DA  50DE               	movf	postinc2,w,c
  8354  0103DC  58E6               	subwfb	postinc1,w,c
  8355  0103DE  A0D8               	btfss	status,0,c
  8356  0103E0  D011               	goto	l649
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;mtouch_sensor.c: 575: return sensor_medianBuffer[sensor][2];
  8360  0103E2  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8361  0103E4  0D06               	mullw	6
  8362  0103E6  0E04               	movlw	4
  8363  0103E8  26F3               	addwf	prodl,f,c
  8364  0103EA  0E00               	movlw	0
  8365  0103EC  22F4               	addwfc	prodh,f,c
  8366  0103EE  0E60               	movlw	low _sensor_medianBuffer
  8367  0103F0  24F3               	addwf	prodl,w,c
  8368  0103F2  6ED9               	movwf	fsr2l,c
  8369  0103F4  0E00               	movlw	high _sensor_medianBuffer
  8370  0103F6  20F4               	addwfc	prodh,w,c
  8371  0103F8  6EDA               	movwf	fsr2h,c
  8372  0103FA  CFDE F0B0          	movff	postinc2,?_medianFilter
  8373  0103FE  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8374                           
  8375                           ; BSR set to: 0
  8376                           
  8377                           ; BSR set to: 0
  8378  010402  0012               	return	
  8379  010404                     l649:
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;mtouch_sensor.c: 576: else
  8383                           ;mtouch_sensor.c: 577: return sensor_medianBuffer[sensor][0];
  8384                           
  8385                           ; BSR set to: 0
  8386  010404  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8387  010406  0D06               	mullw	6
  8388  010408  0E60               	movlw	low _sensor_medianBuffer
  8389  01040A  24F3               	addwf	prodl,w,c
  8390  01040C  6ED9               	movwf	fsr2l,c
  8391  01040E  0E00               	movlw	high _sensor_medianBuffer
  8392  010410  20F4               	addwfc	prodh,w,c
  8393  010412  6EDA               	movwf	fsr2h,c
  8394  010414  CFDE F0B0          	movff	postinc2,?_medianFilter
  8395  010418  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;mtouch_sensor.c: 578: }
  8399                           ;mtouch_sensor.c: 580: }
  8400                           
  8401                           ; BSR set to: 0
  8402                           
  8403                           ; BSR set to: 0
  8404  01041C  0012               	return	
  8405  01041E                     l645:
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;mtouch_sensor.c: 581: else
  8409                           ;mtouch_sensor.c: 582: {
  8410                           ;mtouch_sensor.c: 583: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  8411                           
  8412                           ; BSR set to: 0
  8413  01041E  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8414  010420  0D06               	mullw	6
  8415  010422  0E04               	movlw	4
  8416  010424  26F3               	addwf	prodl,f,c
  8417  010426  0E00               	movlw	0
  8418  010428  22F4               	addwfc	prodh,f,c
  8419  01042A  0E60               	movlw	low _sensor_medianBuffer
  8420  01042C  24F3               	addwf	prodl,w,c
  8421  01042E  6ED9               	movwf	fsr2l,c
  8422  010430  0E00               	movlw	high _sensor_medianBuffer
  8423  010432  20F4               	addwfc	prodh,w,c
  8424  010434  6EDA               	movwf	fsr2h,c
  8425  010436  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8426  010438  0D06               	mullw	6
  8427  01043A  0E60               	movlw	low _sensor_medianBuffer
  8428  01043C  24F3               	addwf	prodl,w,c
  8429  01043E  6EE1               	movwf	fsr1l,c
  8430  010440  0E00               	movlw	high _sensor_medianBuffer
  8431  010442  20F4               	addwfc	prodh,w,c
  8432  010444  6EE2               	movwf	fsr1h,c
  8433  010446  50DE               	movf	postinc2,w,c
  8434  010448  5CE6               	subwf	postinc1,w,c
  8435  01044A  50DE               	movf	postinc2,w,c
  8436  01044C  58E6               	subwfb	postinc1,w,c
  8437  01044E  A0D8               	btfss	status,0,c
  8438  010450  D00D               	goto	l652
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;mtouch_sensor.c: 584: return sensor_medianBuffer[sensor][0];
  8442  010452  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8443  010454  0D06               	mullw	6
  8444  010456  0E60               	movlw	low _sensor_medianBuffer
  8445  010458  24F3               	addwf	prodl,w,c
  8446  01045A  6ED9               	movwf	fsr2l,c
  8447  01045C  0E00               	movlw	high _sensor_medianBuffer
  8448  01045E  20F4               	addwfc	prodh,w,c
  8449  010460  6EDA               	movwf	fsr2h,c
  8450  010462  CFDE F0B0          	movff	postinc2,?_medianFilter
  8451  010466  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  01046A  0012               	return	
  8457  01046C                     l652:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;mtouch_sensor.c: 585: else
  8461                           ;mtouch_sensor.c: 586: {
  8462                           ;mtouch_sensor.c: 587: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  8463                           
  8464                           ; BSR set to: 0
  8465  01046C  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8466  01046E  0D06               	mullw	6
  8467  010470  0E04               	movlw	4
  8468  010472  26F3               	addwf	prodl,f,c
  8469  010474  0E00               	movlw	0
  8470  010476  22F4               	addwfc	prodh,f,c
  8471  010478  0E60               	movlw	low _sensor_medianBuffer
  8472  01047A  24F3               	addwf	prodl,w,c
  8473  01047C  6ED9               	movwf	fsr2l,c
  8474  01047E  0E00               	movlw	high _sensor_medianBuffer
  8475  010480  20F4               	addwfc	prodh,w,c
  8476  010482  6EDA               	movwf	fsr2h,c
  8477  010484  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8478  010486  0D06               	mullw	6
  8479  010488  0E02               	movlw	2
  8480  01048A  26F3               	addwf	prodl,f,c
  8481  01048C  0E00               	movlw	0
  8482  01048E  22F4               	addwfc	prodh,f,c
  8483  010490  0E60               	movlw	low _sensor_medianBuffer
  8484  010492  24F3               	addwf	prodl,w,c
  8485  010494  6EE1               	movwf	fsr1l,c
  8486  010496  0E00               	movlw	high _sensor_medianBuffer
  8487  010498  20F4               	addwfc	prodh,w,c
  8488  01049A  6EE2               	movwf	fsr1h,c
  8489  01049C  50DE               	movf	postinc2,w,c
  8490  01049E  5CE6               	subwf	postinc1,w,c
  8491  0104A0  50DE               	movf	postinc2,w,c
  8492  0104A2  58E6               	subwfb	postinc1,w,c
  8493  0104A4  A0D8               	btfss	status,0,c
  8494  0104A6  D011               	goto	l654
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;mtouch_sensor.c: 588: return sensor_medianBuffer[sensor][2];
  8498  0104A8  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8499  0104AA  0D06               	mullw	6
  8500  0104AC  0E04               	movlw	4
  8501  0104AE  26F3               	addwf	prodl,f,c
  8502  0104B0  0E00               	movlw	0
  8503  0104B2  22F4               	addwfc	prodh,f,c
  8504  0104B4  0E60               	movlw	low _sensor_medianBuffer
  8505  0104B6  24F3               	addwf	prodl,w,c
  8506  0104B8  6ED9               	movwf	fsr2l,c
  8507  0104BA  0E00               	movlw	high _sensor_medianBuffer
  8508  0104BC  20F4               	addwfc	prodh,w,c
  8509  0104BE  6EDA               	movwf	fsr2h,c
  8510  0104C0  CFDE F0B0          	movff	postinc2,?_medianFilter
  8511  0104C4  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8512                           
  8513                           ; BSR set to: 0
  8514                           
  8515                           ; BSR set to: 0
  8516  0104C8  0012               	return	
  8517  0104CA                     l654:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;mtouch_sensor.c: 589: else
  8521                           ;mtouch_sensor.c: 590: return sensor_medianBuffer[sensor][1];
  8522                           
  8523                           ; BSR set to: 0
  8524  0104CA  51B6               	movf	medianFilter@sensor& (0+255),w,b
  8525  0104CC  0D06               	mullw	6
  8526  0104CE  0E02               	movlw	2
  8527  0104D0  26F3               	addwf	prodl,f,c
  8528  0104D2  0E00               	movlw	0
  8529  0104D4  22F4               	addwfc	prodh,f,c
  8530  0104D6  0E60               	movlw	low _sensor_medianBuffer
  8531  0104D8  24F3               	addwf	prodl,w,c
  8532  0104DA  6ED9               	movwf	fsr2l,c
  8533  0104DC  0E00               	movlw	high _sensor_medianBuffer
  8534  0104DE  20F4               	addwfc	prodh,w,c
  8535  0104E0  6EDA               	movwf	fsr2h,c
  8536  0104E2  CFDE F0B0          	movff	postinc2,?_medianFilter
  8537  0104E6  CFDD F0B1          	movff	postdec2,?_medianFilter+1
  8538                           
  8539                           ; BSR set to: 0
  8540                           
  8541                           ; BSR set to: 0
  8542                           
  8543                           ; BSR set to: 0
  8544  0104EA  0012               	return	
  8545  0104EC                     __end_of_medianFilter:
  8546                           	opt stack 0
  8547                           tosu	equ	0xFFF
  8548                           tosh	equ	0xFFE
  8549                           tosl	equ	0xFFD
  8550                           pclath	equ	0xFFA
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           postinc0	equ	0xFEE
  8559                           wreg	equ	0xFE8
  8560                           indf1	equ	0xFE7
  8561                           postinc1	equ	0xFE6
  8562                           postdec1	equ	0xFE5
  8563                           fsr1h	equ	0xFE2
  8564                           fsr1l	equ	0xFE1
  8565                           indf2	equ	0xFDF
  8566                           postinc2	equ	0xFDE
  8567                           postdec2	equ	0xFDD
  8568                           fsr2h	equ	0xFDA
  8569                           fsr2l	equ	0xFD9
  8570                           status	equ	0xFD8
  8571                           
  8572 ;; *************** function _Sensor_DefaultCallback *****************
  8573 ;; Defined at:
  8574 ;;		line 691 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8575 ;; Parameters:    Size  Location     Type
  8576 ;;  sensor          1    wreg     enum E17513
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  sensor          1    0[COMRAM] enum E17513
  8579 ;; Return value:  Size  Location     Type
  8580 ;;                  1    wreg      void 
  8581 ;; Registers used:
  8582 ;;		wreg
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : 0/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8592 ;;Total ram usage:        0 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; Hardware stack levels required when called:    5
  8595 ;; This function calls:
  8596 ;;		Nothing
  8597 ;; This function is called by:
  8598 ;;		_Sensor_postAcquisitionProcess
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text50
  8603  012490                     __ptext50:
  8604                           	opt stack 0
  8605  012490                     _Sensor_DefaultCallback:
  8606                           	opt stack 21
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;incstack = 0
  8610  012490  0012               	return		;funcret
  8611  012492                     __end_of_Sensor_DefaultCallback:
  8612                           	opt stack 0
  8613                           tosu	equ	0xFFF
  8614                           tosh	equ	0xFFE
  8615                           tosl	equ	0xFFD
  8616                           pclath	equ	0xFFA
  8617                           tblptru	equ	0xFF8
  8618                           tblptrh	equ	0xFF7
  8619                           tblptrl	equ	0xFF6
  8620                           tablat	equ	0xFF5
  8621                           prodh	equ	0xFF4
  8622                           prodl	equ	0xFF3
  8623                           intcon	equ	0xFF2
  8624                           postinc0	equ	0xFEE
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           postinc1	equ	0xFE6
  8628                           postdec1	equ	0xFE5
  8629                           fsr1h	equ	0xFE2
  8630                           fsr1l	equ	0xFE1
  8631                           indf2	equ	0xFDF
  8632                           postinc2	equ	0xFDE
  8633                           postdec2	equ	0xFDD
  8634                           fsr2h	equ	0xFDA
  8635                           fsr2l	equ	0xFD9
  8636                           status	equ	0xFD8
  8637                           
  8638 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
  8639 ;; Defined at:
  8640 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  maxVariance     2   13[BANK0 ] unsigned int 
  8645 ;;  variance        2   11[BANK0 ] unsigned int 
  8646 ;;  frequencyInd    1   17[BANK0 ] unsigned char 
  8647 ;;  sensor          1   16[BANK0 ] enum E17513
  8648 ;;  selectedFreq    1   15[BANK0 ] unsigned char 
  8649 ;;  newfrequency    1   10[BANK0 ] unsigned char 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  1    wreg      void 
  8652 ;; Registers used:
  8653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8660 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8661 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8662 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8663 ;;Total ram usage:       14 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    6
  8666 ;; This function calls:
  8667 ;;		_abs
  8668 ;; This function is called by:
  8669 ;;		_Sensor_FrequencyHopping
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           	psect	text51
  8674  0104EC                     __ptext51:
  8675                           	opt stack 0
  8676  0104EC                     _Sensor_FrequencyHopping_Autotune_Process:
  8677                           	opt stack 21
  8678                           
  8679                           ;mtouch_sensor.c: 617: enum mtouch_sensor_names sensor;
  8680                           ;mtouch_sensor.c: 618: uint8_t frequencyIndex;
  8681                           ;mtouch_sensor.c: 619: uint8_t newfrequencyFound,selectedFrequency;
  8682                           ;mtouch_sensor.c: 620: uint16_t variance,maxVariance;
  8683                           ;mtouch_sensor.c: 623: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
  8684                           ;mtouch_sensor.c: 625: maxVariance = 0;
  8685                           
  8686                           ;incstack = 0
  8687  0104EC  0E00               	movlw	0
  8688  0104EE  0100               	movlb	0	; () banked
  8689  0104F0  6FBE               	movwf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),b
  8690  0104F2  0E00               	movlw	0
  8691  0104F4  6FBD               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),b
  8692                           
  8693                           ;mtouch_sensor.c: 627: for(sensor = 0; sensor < 5; sensor++)
  8694  0104F6  0E00               	movlw	0
  8695  0104F8  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8696  0104FA                     l4537:
  8697                           
  8698                           ; BSR set to: 0
  8699  0104FA  0E04               	movlw	4
  8700  0104FC  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8701  0104FE  D001               	goto	l665
  8702  010500  D03F               	goto	u4720
  8703  010502                     l665:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;mtouch_sensor.c: 628: {
  8707                           ;mtouch_sensor.c: 629: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
  8708                           
  8709                           ; BSR set to: 0
  8710  010502  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8711  010504  0D02               	mullw	2
  8712  010506  0E29               	movlw	low _packet_sample
  8713  010508  24F3               	addwf	prodl,w,c
  8714  01050A  6ED9               	movwf	fsr2l,c
  8715  01050C  0E00               	movlw	high _packet_sample
  8716  01050E  20F4               	addwfc	prodh,w,c
  8717  010510  6EDA               	movwf	fsr2h,c
  8718  010512  CFDE F0B4          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process
  8719  010516  CFDD F0B5          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+1
  8720  01051A  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8721  01051C  0D06               	mullw	6
  8722  01051E  0E60               	movlw	low _sensor_medianBuffer
  8723  010520  6FB6               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),b
  8724  010522  0E00               	movlw	high _sensor_medianBuffer
  8725  010524  6FB7               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),b
  8726  010526  50F3               	movf	prodl,w,c
  8727  010528  27B6               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),f,b
  8728  01052A  50F4               	movf	prodh,w,c
  8729  01052C  23B7               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),f,b
  8730  01052E  5181               	movf	_freq_index& (0+255),w,b
  8731  010530  0D02               	mullw	2
  8732  010532  50F3               	movf	prodl,w,c
  8733  010534  25B6               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),w,b
  8734  010536  6ED9               	movwf	fsr2l,c
  8735  010538  50F4               	movf	prodh,w,c
  8736  01053A  21B7               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),w,b
  8737  01053C  6EDA               	movwf	fsr2h,c
  8738  01053E  CFDE F0B8          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process+4
  8739  010542  CFDD F0B9          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+5
  8740  010546  1FB8               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8741  010548  1FB9               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8742  01054A  4BB8               	infsnz	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8743  01054C  2BB9               	incf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8744  01054E  51B4               	movf	??_Sensor_FrequencyHopping_Autotune_Process& (0+255),w,b
  8745  010550  25B8               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),w,b
  8746  010552  6FB0               	movwf	abs@a& (0+255),b
  8747  010554  51B5               	movf	(??_Sensor_FrequencyHopping_Autotune_Process+1)& (0+255),w,b
  8748  010556  21B9               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),w,b
  8749  010558  6FB1               	movwf	(abs@a+1)& (0+255),b
  8750  01055A  ECA8  F090         	call	_abs	;wreg free
  8751  01055E  C0B0  F0BB         	movff	?_abs,Sensor_FrequencyHopping_Autotune_Process@variance
  8752  010562  C0B1  F0BC         	movff	?_abs+1,Sensor_FrequencyHopping_Autotune_Process@variance+1
  8753                           
  8754                           ;mtouch_sensor.c: 630: if(variance > maxVariance)
  8755  010566  0100               	movlb	0	; () banked
  8756  010568  51BB               	movf	Sensor_FrequencyHopping_Autotune_Process@variance& (0+255),w,b
  8757  01056A  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8758  01056C  51BC               	movf	(Sensor_FrequencyHopping_Autotune_Process@variance+1)& (0+255),w,b
  8759  01056E  59BE               	subwfb	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8760  010570  B0D8               	btfsc	status,0,c
  8761  010572  D004               	goto	l667
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;mtouch_sensor.c: 631: maxVariance = variance;
  8765  010574  C0BB  F0BD         	movff	Sensor_FrequencyHopping_Autotune_Process@variance,Sensor_FrequencyHopping_Autotun
      +                          e_Process@maxVariance
  8766  010578  C0BC  F0BE         	movff	Sensor_FrequencyHopping_Autotune_Process@variance+1,Sensor_FrequencyHopping_Autot
      +                          une_Process@maxVariance+1
  8767  01057C                     l667:
  8768                           
  8769                           ; BSR set to: 0
  8770                           
  8771                           ; BSR set to: 0
  8772  01057C  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),f,b
  8773  01057E  D7BD               	goto	l4537
  8774  010580                     u4720:
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;mtouch_sensor.c: 632: }
  8778                           ;mtouch_sensor.c: 634: if(maxVariance > (mtouch_sensor_packetsample_t)100)
  8779                           
  8780                           ; BSR set to: 0
  8781  010580  51BE               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8782  010582  E104               	bnz	u4730
  8783  010584  0E65               	movlw	101
  8784  010586  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8785  010588  A0D8               	btfss	status,0,c
  8786  01058A  D05A               	goto	l668
  8787  01058C                     u4730:
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;mtouch_sensor.c: 635: {
  8791                           ;mtouch_sensor.c: 636: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
  8792  01058C  5181               	movf	_freq_index& (0+255),w,b
  8793  01058E  0D01               	mullw	1
  8794  010590  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8795  010592  24F3               	addwf	prodl,w,c
  8796  010594  6ED9               	movwf	fsr2l,c
  8797  010596  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8798  010598  20F4               	addwfc	prodh,w,c
  8799  01059A  6EDA               	movwf	fsr2h,c
  8800  01059C  2ADF               	incf	indf2,f,c
  8801  01059E  0E05               	movlw	5
  8802  0105A0  64DF               	cpfsgt	indf2,c
  8803  0105A2  0012               	return	
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;mtouch_sensor.c: 637: {
  8807                           ;mtouch_sensor.c: 638: newfrequencyFound = 0;
  8808  0105A4  0E00               	movlw	0
  8809  0105A6  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;mtouch_sensor.c: 639: selectedFrequency = freq_hop[freq_index];
  8813  0105A8  5181               	movf	_freq_index& (0+255),w,b
  8814  0105AA  0D01               	mullw	1
  8815  0105AC  0EDE               	movlw	low _freq_hop
  8816  0105AE  24F3               	addwf	prodl,w,c
  8817  0105B0  6ED9               	movwf	fsr2l,c
  8818  0105B2  0E00               	movlw	high _freq_hop
  8819  0105B4  20F4               	addwfc	prodh,w,c
  8820  0105B6  6EDA               	movwf	fsr2h,c
  8821  0105B8  50DF               	movf	indf2,w,c
  8822  0105BA  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8823  0105BC                     
  8824                           ; BSR set to: 0
  8825                           ;mtouch_sensor.c: 641: {
  8826                           ;mtouch_sensor.c: 642: if(selectedFrequency>(uint8_t)((mtouch_sensor_time_t)0 << (uint8_
      +                          t)3))
  8827                           
  8828                           ; BSR set to: 0
  8829  0105BC  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8830  0105BE  B4D8               	btfsc	status,2,c
  8831  0105C0  D002               	goto	l671
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;mtouch_sensor.c: 643: selectedFrequency--;
  8835  0105C2  07BF               	decf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),f,b
  8836  0105C4  D002               	goto	l672
  8837  0105C6                     l671:
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;mtouch_sensor.c: 644: else
  8841                           ;mtouch_sensor.c: 645: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)3);
  8842                           
  8843                           ; BSR set to: 0
  8844  0105C6  0E78               	movlw	120
  8845  0105C8  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8846  0105CA                     l672:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;mtouch_sensor.c: 646: newfrequencyFound = 1;
  8850  0105CA  0E01               	movlw	1
  8851  0105CC  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8852                           
  8853                           ;mtouch_sensor.c: 648: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8854  0105CE  0E00               	movlw	0
  8855  0105D0  6FC1               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8856  0105D2                     l4565:
  8857                           
  8858                           ; BSR set to: 0
  8859  0105D2  0E02               	movlw	2
  8860  0105D4  65C1               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8861  0105D6  D001               	goto	l673
  8862  0105D8  D014               	goto	u4790
  8863  0105DA                     l673:
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;mtouch_sensor.c: 649: {
  8867                           ;mtouch_sensor.c: 650: if(frequencyIndex == freq_index)
  8868                           
  8869                           ; BSR set to: 0
  8870  0105DA  5181               	movf	_freq_index& (0+255),w,b
  8871  0105DC  19C1               	xorwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8872  0105DE  B4D8               	btfsc	status,2,c
  8873  0105E0  D00E               	goto	l677
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;mtouch_sensor.c: 654: else if(selectedFrequency==freq_hop[frequencyIndex])
  8877                           
  8878                           ; BSR set to: 0
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;mtouch_sensor.c: 651: {
  8882                           ;mtouch_sensor.c: 653: }
  8883  0105E2  51C1               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8884  0105E4  0D01               	mullw	1
  8885  0105E6  0EDE               	movlw	low _freq_hop
  8886  0105E8  24F3               	addwf	prodl,w,c
  8887  0105EA  6ED9               	movwf	fsr2l,c
  8888  0105EC  0E00               	movlw	high _freq_hop
  8889  0105EE  20F4               	addwfc	prodh,w,c
  8890  0105F0  6EDA               	movwf	fsr2h,c
  8891  0105F2  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8892  0105F4  18DE               	xorwf	postinc2,w,c
  8893  0105F6  A4D8               	btfss	status,2,c
  8894  0105F8  D002               	goto	l677
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;mtouch_sensor.c: 655: {
  8898                           ;mtouch_sensor.c: 656: newfrequencyFound = 0;
  8899  0105FA  0E00               	movlw	0
  8900  0105FC  6FBA               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8901  0105FE                     l677:
  8902                           
  8903                           ; BSR set to: 0
  8904                           
  8905                           ; BSR set to: 0
  8906                           
  8907                           ; BSR set to: 0
  8908                           
  8909                           ;mtouch_sensor.c: 658: else
  8910                           ;mtouch_sensor.c: 659: {
  8911                           
  8912                           ; BSR set to: 0
  8913  0105FE  2BC1               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8914  010600  D7E8               	goto	l4565
  8915  010602                     u4790:
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;mtouch_sensor.c: 661: }
  8919                           ;mtouch_sensor.c: 662: }
  8920                           ;mtouch_sensor.c: 664: }while(!newfrequencyFound);
  8921                           
  8922                           ; BSR set to: 0
  8923  010602  51BA               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),w,b
  8924  010604  B4D8               	btfsc	status,2,c
  8925  010606  D7DA               	goto	l670
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;mtouch_sensor.c: 666: freq_hop[freq_index] = selectedFrequency;
  8929                           
  8930                           ; BSR set to: 0
  8931  010608  5181               	movf	_freq_index& (0+255),w,b
  8932  01060A  0D01               	mullw	1
  8933  01060C  0EDE               	movlw	low _freq_hop
  8934  01060E  24F3               	addwf	prodl,w,c
  8935  010610  6ED9               	movwf	fsr2l,c
  8936  010612  0E00               	movlw	high _freq_hop
  8937  010614  20F4               	addwfc	prodh,w,c
  8938  010616  6EDA               	movwf	fsr2h,c
  8939  010618  C0BF  FFDF         	movff	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,indf2
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;mtouch_sensor.c: 668: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8943  01061C  0E00               	movlw	0
  8944  01061E  6FC1               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8945  010620                     l4587:
  8946                           
  8947                           ; BSR set to: 0
  8948  010620  0E02               	movlw	2
  8949  010622  65C1               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8950  010624  D001               	goto	l680
  8951  010626  0012               	return	
  8952  010628                     l680:
  8953                           
  8954                           ; BSR set to: 0
  8955                           ;mtouch_sensor.c: 669: {
  8956                           ;mtouch_sensor.c: 670: varianceOverLimitCounter[frequencyIndex] = 0;
  8957                           
  8958                           ; BSR set to: 0
  8959  010628  51C1               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8960  01062A  0D01               	mullw	1
  8961  01062C  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8962  01062E  24F3               	addwf	prodl,w,c
  8963  010630  6ED9               	movwf	fsr2l,c
  8964  010632  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8965  010634  20F4               	addwfc	prodh,w,c
  8966  010636  6EDA               	movwf	fsr2h,c
  8967  010638  0E00               	movlw	0
  8968  01063A  6EDF               	movwf	indf2,c
  8969                           
  8970                           ; BSR set to: 0
  8971  01063C  2BC1               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8972  01063E  D7F0               	goto	l4587
  8973  010640                     l668:
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;mtouch_sensor.c: 674: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
  8977                           
  8978                           ; BSR set to: 0
  8979  010640  51BE               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8980  010642  E119               	bnz	l686
  8981  010644  0E32               	movlw	50
  8982  010646  5DBD               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8983  010648  B0D8               	btfsc	status,0,c
  8984  01064A  0012               	return	
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;mtouch_sensor.c: 675: {
  8988                           ;mtouch_sensor.c: 677: if(varianceOverLimitCounter[freq_index] > 0)
  8989  01064C  5181               	movf	_freq_index& (0+255),w,b
  8990  01064E  0D01               	mullw	1
  8991  010650  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8992  010652  24F3               	addwf	prodl,w,c
  8993  010654  6ED9               	movwf	fsr2l,c
  8994  010656  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8995  010658  20F4               	addwfc	prodh,w,c
  8996  01065A  6EDA               	movwf	fsr2h,c
  8997  01065C  50DF               	movf	indf2,w,c
  8998  01065E  B4D8               	btfsc	status,2,c
  8999  010660  0012               	return	
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;mtouch_sensor.c: 678: varianceOverLimitCounter[freq_index]--;
  9003  010662  5181               	movf	_freq_index& (0+255),w,b
  9004  010664  0D01               	mullw	1
  9005  010666  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9006  010668  24F3               	addwf	prodl,w,c
  9007  01066A  6ED9               	movwf	fsr2l,c
  9008  01066C  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  9009  01066E  20F4               	addwfc	prodh,w,c
  9010  010670  6EDA               	movwf	fsr2h,c
  9011  010672  06DF               	decf	indf2,f,c
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ;mtouch_sensor.c: 680: else
  9016                           ;mtouch_sensor.c: 681: {
  9017                           
  9018                           ; BSR set to: 0
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;mtouch_sensor.c: 679: }
  9022  010674  0012               	return	
  9023  010676                     l686:
  9024                           
  9025                           ; BSR set to: 0
  9026  010676  0012               	return		;funcret
  9027  010678                     __end_of_Sensor_FrequencyHopping_Autotune_Process:
  9028                           	opt stack 0
  9029                           tosu	equ	0xFFF
  9030                           tosh	equ	0xFFE
  9031                           tosl	equ	0xFFD
  9032                           pclath	equ	0xFFA
  9033                           tblptru	equ	0xFF8
  9034                           tblptrh	equ	0xFF7
  9035                           tblptrl	equ	0xFF6
  9036                           tablat	equ	0xFF5
  9037                           prodh	equ	0xFF4
  9038                           prodl	equ	0xFF3
  9039                           intcon	equ	0xFF2
  9040                           postinc0	equ	0xFEE
  9041                           wreg	equ	0xFE8
  9042                           indf1	equ	0xFE7
  9043                           postinc1	equ	0xFE6
  9044                           postdec1	equ	0xFE5
  9045                           fsr1h	equ	0xFE2
  9046                           fsr1l	equ	0xFE1
  9047                           indf2	equ	0xFDF
  9048                           postinc2	equ	0xFDE
  9049                           postdec2	equ	0xFDD
  9050                           fsr2h	equ	0xFDA
  9051                           fsr2l	equ	0xFD9
  9052                           status	equ	0xFD8
  9053                           
  9054 ;; *************** function _abs *****************
  9055 ;; Defined at:
  9056 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;  a               2    0[BANK0 ] int 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;		None
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  2    0[BANK0 ] int 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9070 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9073 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9074 ;;Total ram usage:        4 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:    5
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_Sensor_postAcquisitionProcess
  9081 ;;		_Sensor_FrequencyHopping_Autotune_Process
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text52
  9086  012150                     __ptext52:
  9087                           	opt stack 0
  9088  012150                     _abs:
  9089                           	opt stack 21
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;incstack = 0
  9093  012150  0100               	movlb	0	; () banked
  9094  012152  AFB1               	btfss	(abs@a+1)& (0+255),7,b
  9095  012154  D00D               	goto	l1041
  9096                           
  9097                           ; BSR set to: 0
  9098  012156  C0B0  F0B2         	movff	abs@a,??_abs
  9099  01215A  C0B1  F0B3         	movff	abs@a+1,??_abs+1
  9100  01215E  1FB2               	comf	??_abs& (0+255),f,b
  9101  012160  1FB3               	comf	(??_abs+1)& (0+255),f,b
  9102  012162  4BB2               	infsnz	??_abs& (0+255),f,b
  9103  012164  2BB3               	incf	(??_abs+1)& (0+255),f,b
  9104  012166  C0B2  F0B0         	movff	??_abs,?_abs
  9105  01216A  C0B3  F0B1         	movff	??_abs+1,?_abs+1
  9106  01216E  0012               	return	
  9107  012170                     l1041:
  9108                           
  9109                           ; BSR set to: 0
  9110  012170  C0B0  F0B0         	movff	abs@a,?_abs
  9111  012174  C0B1  F0B1         	movff	abs@a+1,?_abs+1
  9112                           
  9113                           ; BSR set to: 0
  9114  012178  0012               	return		;funcret
  9115  01217A                     __end_of_abs:
  9116                           	opt stack 0
  9117                           tosu	equ	0xFFF
  9118                           tosh	equ	0xFFE
  9119                           tosl	equ	0xFFD
  9120                           pclath	equ	0xFFA
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           prodh	equ	0xFF4
  9126                           prodl	equ	0xFF3
  9127                           intcon	equ	0xFF2
  9128                           postinc0	equ	0xFEE
  9129                           wreg	equ	0xFE8
  9130                           indf1	equ	0xFE7
  9131                           postinc1	equ	0xFE6
  9132                           postdec1	equ	0xFE5
  9133                           fsr1h	equ	0xFE2
  9134                           fsr1l	equ	0xFE1
  9135                           indf2	equ	0xFDF
  9136                           postinc2	equ	0xFDE
  9137                           postdec2	equ	0xFDD
  9138                           fsr2h	equ	0xFDA
  9139                           fsr2l	equ	0xFD9
  9140                           status	equ	0xFD8
  9141                           
  9142 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  9143 ;; Defined at:
  9144 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;		None
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  1    wreg      unsigned char 
  9151 ;; Registers used:
  9152 ;;		wreg, status,2
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9162 ;;Total ram usage:        0 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    5
  9165 ;; This function calls:
  9166 ;;		Nothing
  9167 ;; This function is called by:
  9168 ;;		_MTOUCH_Sensor_SampleAll
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text53
  9173  01248C                     __ptext53:
  9174                           	opt stack 0
  9175  01248C                     _MTOUCH_Sensor_isSampling:
  9176                           	opt stack 23
  9177                           
  9178                           ;mtouch_sensor.c: 840: return sampling_flag;
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;incstack = 0
  9182  01248C  503A               	movf	_sampling_flag,w,c
  9183  01248E  0012               	return	
  9184  012490                     __end_of_MTOUCH_Sensor_isSampling:
  9185                           	opt stack 0
  9186                           tosu	equ	0xFFF
  9187                           tosh	equ	0xFFE
  9188                           tosl	equ	0xFFD
  9189                           pclath	equ	0xFFA
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           intcon	equ	0xFF2
  9197                           postinc0	equ	0xFEE
  9198                           wreg	equ	0xFE8
  9199                           indf1	equ	0xFE7
  9200                           postinc1	equ	0xFE6
  9201                           postdec1	equ	0xFE5
  9202                           fsr1h	equ	0xFE2
  9203                           fsr1l	equ	0xFE1
  9204                           indf2	equ	0xFDF
  9205                           postinc2	equ	0xFDE
  9206                           postdec2	equ	0xFDD
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9212 ;; Defined at:
  9213 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;		None
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  button          1   20[BANK0 ] enum E17454
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9231 ;;Total ram usage:        1 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    9
  9234 ;; This function calls:
  9235 ;;		_Button_Service
  9236 ;; This function is called by:
  9237 ;;		_MTOUCH_Service_Mainloop
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           	psect	text54
  9242  01235C                     __ptext54:
  9243                           	opt stack 0
  9244  01235C                     _MTOUCH_Button_ServiceAll:
  9245                           	opt stack 20
  9246                           
  9247                           ;mtouch_button.c: 210: enum mtouch_button_names button;
  9248                           ;mtouch_button.c: 213: for (button = 0; button < 5; button++)
  9249                           
  9250                           ;incstack = 0
  9251  01235C  0E00               	movlw	0
  9252  01235E  0100               	movlb	0	; () banked
  9253  012360  6FC4               	movwf	MTOUCH_Button_ServiceAll@button& (0+255),b
  9254  012362                     l5103:
  9255                           
  9256                           ; BSR set to: 0
  9257  012362  0E04               	movlw	4
  9258  012364  65C4               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  9259  012366  D001               	goto	l832
  9260  012368  0012               	return	
  9261  01236A                     l832:
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;mtouch_button.c: 214: {
  9265                           ;mtouch_button.c: 215: Button_Service(button);
  9266                           
  9267                           ; BSR set to: 0
  9268  01236A  51C4               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  9269  01236C  ECFA  F089         	call	_Button_Service
  9270  012370  0100               	movlb	0	; () banked
  9271  012372  2BC4               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  9272  012374  D7F6               	goto	l5103
  9273  012376                     __end_of_MTOUCH_Button_ServiceAll:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           postinc0	equ	0xFEE
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           postinc1	equ	0xFE6
  9290                           postdec1	equ	0xFE5
  9291                           fsr1h	equ	0xFE2
  9292                           fsr1l	equ	0xFE1
  9293                           indf2	equ	0xFDF
  9294                           postinc2	equ	0xFDE
  9295                           postdec2	equ	0xFDD
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300 ;; *************** function _Button_Service *****************
  9301 ;; Defined at:
  9302 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  name            1    wreg     enum E17454
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  name            1   17[BANK0 ] enum E17454
  9307 ;;  button          2   18[BANK0 ] PTR struct .
  9308 ;;		 -> mtouch_button(80), 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9319 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9321 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9322 ;;Total ram usage:        4 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    8
  9325 ;; This function calls:
  9326 ;;		_Button_Deviation_Update
  9327 ;;		_Button_Reading_Update
  9328 ;;		_Button_State_Initializing
  9329 ;;		_Button_State_NotPressed
  9330 ;;		_Button_State_Pressed
  9331 ;;		_MTOUCH_Button_Initialize
  9332 ;;		_MTOUCH_Sensor_isCalibrated
  9333 ;;		_MTOUCH_Sensor_wasSampled
  9334 ;; This function is called by:
  9335 ;;		_MTOUCH_Button_ServiceAll
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text55
  9340  0113F4                     __ptext55:
  9341                           	opt stack 0
  9342  0113F4                     _Button_Service:
  9343                           	opt stack 20
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;incstack = 0
  9347                           ;Button_Service@name stored from wreg
  9348  0113F4  0100               	movlb	0	; () banked
  9349  0113F6  6FC1               	movwf	Button_Service@name& (0+255),b
  9350                           
  9351                           ;mtouch_button.c: 221: mtouch_button_t* button = &mtouch_button[name];
  9352  0113F8  0100               	movlb	0	; () banked
  9353  0113FA  51C1               	movf	Button_Service@name& (0+255),w,b
  9354  0113FC  0D10               	mullw	16
  9355  0113FE  0E40               	movlw	low _mtouch_button
  9356  011400  24F3               	addwf	prodl,w,c
  9357  011402  6FC2               	movwf	Button_Service@button& (0+255),b
  9358  011404  0E01               	movlw	high _mtouch_button
  9359  011406  20F4               	addwfc	prodh,w,c
  9360  011408  6FC3               	movwf	(Button_Service@button+1)& (0+255),b
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;mtouch_button.c: 223: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  9364  01140A  EE20 F001          	lfsr	2,1
  9365  01140E  51C2               	movf	Button_Service@button& (0+255),w,b
  9366  011410  26D9               	addwf	fsr2l,f,c
  9367  011412  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9368  011414  22DA               	addwfc	fsr2h,f,c
  9369  011416  50DF               	movf	indf2,w,c
  9370  011418  ECE3  F08F         	call	_MTOUCH_Sensor_wasSampled
  9371  01141C  0900               	iorlw	0
  9372  01141E  B4D8               	btfsc	status,2,c
  9373  011420  0012               	return	
  9374  011422  0100               	movlb	0	; () banked
  9375  011424  EE20 F001          	lfsr	2,1
  9376  011428  51C2               	movf	Button_Service@button& (0+255),w,b
  9377  01142A  26D9               	addwf	fsr2l,f,c
  9378  01142C  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9379  01142E  22DA               	addwfc	fsr2h,f,c
  9380  011430  50DF               	movf	indf2,w,c
  9381  011432  ECFD  F08F         	call	_MTOUCH_Sensor_isCalibrated
  9382  011436  0900               	iorlw	0
  9383  011438  B4D8               	btfsc	status,2,c
  9384  01143A  0012               	return	
  9385                           
  9386                           ;mtouch_button.c: 224: {
  9387                           ;mtouch_button.c: 225: Button_Reading_Update(button);
  9388  01143C  C0C2  F0B7         	movff	Button_Service@button,Button_Reading_Update@button
  9389  011440  C0C3  F0B8         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  9390  011444  EC58  F091         	call	_Button_Reading_Update	;wreg free
  9391                           
  9392                           ;mtouch_button.c: 226: Button_Deviation_Update(button);
  9393  011448  C0C2  F0B0         	movff	Button_Service@button,Button_Deviation_Update@button
  9394  01144C  C0C3  F0B1         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  9395  011450  ECA0  F087         	call	_Button_Deviation_Update	;wreg free
  9396                           
  9397                           ;mtouch_button.c: 228: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  9398  011454  0100               	movlb	0	; () banked
  9399  011456  EE20 F002          	lfsr	2,2
  9400  01145A  51C2               	movf	Button_Service@button& (0+255),w,b
  9401  01145C  26D9               	addwf	fsr2l,f,c
  9402  01145E  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9403  011460  22DA               	addwfc	fsr2h,f,c
  9404  011462  0E02               	movlw	2
  9405  011464  64DF               	cpfsgt	indf2,c
  9406  011466  D007               	goto	l838
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;mtouch_button.c: 229: {
  9410                           ;mtouch_button.c: 230: MTOUCH_Button_Initialize(button->name);
  9411  011468  C0C2  FFD9         	movff	Button_Service@button,fsr2l
  9412  01146C  C0C3  FFDA         	movff	Button_Service@button+1,fsr2h
  9413  011470  50DF               	movf	indf2,w,c
  9414  011472  EC15  F08C         	call	_MTOUCH_Button_Initialize
  9415  011476                     l838:
  9416                           
  9417                           ;mtouch_button.c: 231: }
  9418                           ;mtouch_button.c: 232: Button_StateMachine[button->state](button);
  9419  011476  C0C2  F0B9         	movff	Button_Service@button,Button_State_Pressed@button
  9420  01147A  C0C3  F0BA         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  9421  01147E  0100               	movlb	0	; () banked
  9422  011480  EE20 F002          	lfsr	2,2
  9423  011484  51C2               	movf	Button_Service@button& (0+255),w,b
  9424  011486  26D9               	addwf	fsr2l,f,c
  9425  011488  51C3               	movf	(Button_Service@button+1)& (0+255),w,b
  9426  01148A  22DA               	addwfc	fsr2h,f,c
  9427  01148C  50DF               	movf	indf2,w,c
  9428  01148E  6FC0               	movwf	??_Button_Service& (0+255),b
  9429  011490  51C0               	movf	??_Button_Service& (0+255),w,b
  9430  011492  0D03               	mullw	3
  9431  011494  0ED5               	movlw	low _Button_StateMachine
  9432  011496  24F3               	addwf	prodl,w,c
  9433  011498  6ED9               	movwf	fsr2l,c
  9434  01149A  0E00               	movlw	high _Button_StateMachine
  9435  01149C  20F4               	addwfc	prodh,w,c
  9436  01149E  6EDA               	movwf	fsr2h,c
  9437  0114A0  D801               	call	u5478
  9438  0114A2  0012               	return	
  9439  0114A4                     u5478:
  9440  0114A4  0005               	push	
  9441  0114A6  6EFA               	movwf	pclath,c
  9442  0114A8  50DE               	movf	postinc2,w,c
  9443  0114AA  6EFD               	movwf	tosl,c
  9444  0114AC  50DE               	movf	postinc2,w,c
  9445  0114AE  6EFE               	movwf	tosh,c
  9446  0114B0  50DE               	movf	postinc2,w,c
  9447  0114B2  6EFF               	movwf	tosu,c
  9448  0114B4  50FA               	movf	pclath,w,c
  9449  0114B6  0012               	return		;indir
  9450  0114B8                     __end_of_Button_Service:
  9451                           	opt stack 0
  9452                           tosu	equ	0xFFF
  9453                           tosh	equ	0xFFE
  9454                           tosl	equ	0xFFD
  9455                           pclath	equ	0xFFA
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           postinc0	equ	0xFEE
  9464                           wreg	equ	0xFE8
  9465                           indf1	equ	0xFE7
  9466                           postinc1	equ	0xFE6
  9467                           postdec1	equ	0xFE5
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9478 ;; Defined at:
  9479 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;  sensor          1    wreg     enum E17513
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;  sensor          1    0[BANK0 ] enum E17513
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      unsigned char 
  9486 ;; Registers used:
  9487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9497 ;;Total ram usage:        1 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    5
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_MTOUCH_Sensor_SampleAll
  9504 ;;		_Sensor_scheduleNextScan
  9505 ;;		_Button_Service
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text56
  9510  011FC6                     __ptext56:
  9511                           	opt stack 0
  9512  011FC6                     _MTOUCH_Sensor_wasSampled:
  9513                           	opt stack 22
  9514                           
  9515                           ;incstack = 0
  9516                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9517  011FC6  0100               	movlb	0	; () banked
  9518  011FC8  6FB0               	movwf	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9519                           
  9520                           ;mtouch_sensor.c: 822: if(sensor < 5)
  9521  011FCA  0E05               	movlw	5
  9522  011FCC  0100               	movlb	0	; () banked
  9523  011FCE  61B0               	cpfslt	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  9524  011FD0  D012               	goto	l749
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
  9528  011FD2  51B0               	movf	MTOUCH_Sensor_wasSampled@sensor& (0+255),w,b
  9529  011FD4  0D09               	mullw	9
  9530  011FD6  0E08               	movlw	8
  9531  011FD8  26F3               	addwf	prodl,f,c
  9532  011FDA  0E00               	movlw	0
  9533  011FDC  22F4               	addwfc	prodh,f,c
  9534  011FDE  0E83               	movlw	low _mtouch_sensor
  9535  011FE0  24F3               	addwf	prodl,w,c
  9536  011FE2  6ED9               	movwf	fsr2l,c
  9537  011FE4  0E00               	movlw	high _mtouch_sensor
  9538  011FE6  20F4               	addwfc	prodh,w,c
  9539  011FE8  6EDA               	movwf	fsr2h,c
  9540  011FEA  A2DF               	btfss	indf2,1,c
  9541  011FEC  D002               	goto	u4610
  9542  011FEE  0E01               	movlw	1
  9543  011FF0  0012               	return	
  9544  011FF2                     u4610:
  9545  011FF2  0E00               	movlw	0
  9546                           
  9547                           ; BSR set to: 0
  9548                           
  9549                           ; BSR set to: 0
  9550  011FF4  0012               	return	
  9551  011FF6                     l749:
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;mtouch_sensor.c: 824: else
  9555                           ;mtouch_sensor.c: 825: return 0;
  9556                           
  9557                           ; BSR set to: 0
  9558  011FF6  0E00               	movlw	0
  9559                           
  9560                           ; BSR set to: 0
  9561  011FF8  0012               	return	
  9562  011FFA                     __end_of_MTOUCH_Sensor_wasSampled:
  9563                           	opt stack 0
  9564                           tosu	equ	0xFFF
  9565                           tosh	equ	0xFFE
  9566                           tosl	equ	0xFFD
  9567                           pclath	equ	0xFFA
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           postinc0	equ	0xFEE
  9576                           wreg	equ	0xFE8
  9577                           indf1	equ	0xFE7
  9578                           postinc1	equ	0xFE6
  9579                           postdec1	equ	0xFE5
  9580                           fsr1h	equ	0xFE2
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           postdec2	equ	0xFDD
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8
  9588                           
  9589 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9590 ;; Defined at:
  9591 ;;		line 772 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;  sensor          1    wreg     enum E17513
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  sensor          1    0[BANK0 ] enum E17513
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      unsigned char 
  9598 ;; Registers used:
  9599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9609 ;;Total ram usage:        1 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    5
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_Button_Service
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text57
  9620  011FFA                     __ptext57:
  9621                           	opt stack 0
  9622  011FFA                     _MTOUCH_Sensor_isCalibrated:
  9623                           	opt stack 22
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;incstack = 0
  9627                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9628  011FFA  0100               	movlb	0	; () banked
  9629  011FFC  6FB0               	movwf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9630                           
  9631                           ;mtouch_sensor.c: 774: if(sensor < 5)
  9632  011FFE  0E05               	movlw	5
  9633  012000  0100               	movlb	0	; () banked
  9634  012002  61B0               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  9635  012004  D012               	goto	l727
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;mtouch_sensor.c: 775: return (bool)mtouch_sensor[sensor].calibrated;
  9639  012006  51B0               	movf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),w,b
  9640  012008  0D09               	mullw	9
  9641  01200A  0E08               	movlw	8
  9642  01200C  26F3               	addwf	prodl,f,c
  9643  01200E  0E00               	movlw	0
  9644  012010  22F4               	addwfc	prodh,f,c
  9645  012012  0E83               	movlw	low _mtouch_sensor
  9646  012014  24F3               	addwf	prodl,w,c
  9647  012016  6ED9               	movwf	fsr2l,c
  9648  012018  0E00               	movlw	high _mtouch_sensor
  9649  01201A  20F4               	addwfc	prodh,w,c
  9650  01201C  6EDA               	movwf	fsr2h,c
  9651  01201E  A6DF               	btfss	indf2,3,c
  9652  012020  D002               	goto	u4860
  9653  012022  0E01               	movlw	1
  9654  012024  0012               	return	
  9655  012026                     u4860:
  9656  012026  0E00               	movlw	0
  9657                           
  9658                           ; BSR set to: 0
  9659                           
  9660                           ; BSR set to: 0
  9661  012028  0012               	return	
  9662  01202A                     l727:
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;mtouch_sensor.c: 776: else
  9666                           ;mtouch_sensor.c: 777: return 0;
  9667                           
  9668                           ; BSR set to: 0
  9669  01202A  0E00               	movlw	0
  9670                           
  9671                           ; BSR set to: 0
  9672  01202C  0012               	return	
  9673  01202E                     __end_of_MTOUCH_Sensor_isCalibrated:
  9674                           	opt stack 0
  9675                           tosu	equ	0xFFF
  9676                           tosh	equ	0xFFE
  9677                           tosl	equ	0xFFD
  9678                           pclath	equ	0xFFA
  9679                           tblptru	equ	0xFF8
  9680                           tblptrh	equ	0xFF7
  9681                           tblptrl	equ	0xFF6
  9682                           tablat	equ	0xFF5
  9683                           prodh	equ	0xFF4
  9684                           prodl	equ	0xFF3
  9685                           intcon	equ	0xFF2
  9686                           postinc0	equ	0xFEE
  9687                           wreg	equ	0xFE8
  9688                           indf1	equ	0xFE7
  9689                           postinc1	equ	0xFE6
  9690                           postdec1	equ	0xFE5
  9691                           fsr1h	equ	0xFE2
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function _Button_State_NotPressed *****************
  9701 ;; Defined at:
  9702 ;;		line 256 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  button          2    9[BANK0 ] PTR struct .
  9705 ;;		 -> mtouch_button(80), 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      void 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9717 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9719 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9720 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9721 ;;Total ram usage:        5 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    7
  9724 ;; This function calls:
  9725 ;;		_Button_Baseline_Update
  9726 ;;		_Button_DefaultCallback
  9727 ;;		_MTOUCH_Button_Initialize
  9728 ;; This function is called by:
  9729 ;;		_Button_Service
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           	psect	text58
  9734  0107E2                     __ptext58:
  9735                           	opt stack 0
  9736  0107E2                     _Button_State_NotPressed:
  9737                           	opt stack 20
  9738                           
  9739                           ;mtouch_button.c: 259: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;incstack = 0
  9743  0107E2  0100               	movlb	0	; () banked
  9744  0107E4  EE20 F00E          	lfsr	2,14
  9745  0107E8  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9746  0107EA  26D9               	addwf	fsr2l,f,c
  9747  0107EC  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9748  0107EE  22DA               	addwfc	fsr2h,f,c
  9749  0107F0  50DF               	movf	indf2,w,c
  9750  0107F2  0800               	sublw	0
  9751  0107F4  6FBB               	movwf	??_Button_State_NotPressed& (0+255),b
  9752  0107F6  EE20 F009          	lfsr	2,9
  9753  0107FA  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9754  0107FC  26D9               	addwf	fsr2l,f,c
  9755  0107FE  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9756  010800  22DA               	addwfc	fsr2h,f,c
  9757  010802  50DE               	movf	postinc2,w,c
  9758  010804  0A80               	xorlw	128
  9759  010806  6FBD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9760  010808  51BB               	movf	??_Button_State_NotPressed& (0+255),w,b
  9761  01080A  0A80               	xorlw	128
  9762  01080C  5DBD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9763  01080E  B0D8               	btfsc	status,0,c
  9764  010810  D028               	goto	l848
  9765                           
  9766                           ; BSR set to: 0
  9767                           ;mtouch_button.c: 260: {
  9768                           ;mtouch_button.c: 261: (button->counter)++;
  9769  010812  EE20 F00A          	lfsr	2,10
  9770  010816  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9771  010818  26D9               	addwf	fsr2l,f,c
  9772  01081A  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9773  01081C  22DA               	addwfc	fsr2h,f,c
  9774  01081E  2ADE               	incf	postinc2,f,c
  9775  010820  0E00               	movlw	0
  9776  010822  22DD               	addwfc	postdec2,f,c
  9777                           
  9778                           ;mtouch_button.c: 262: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  9779  010824  EE20 F00A          	lfsr	2,10
  9780  010828  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9781  01082A  26D9               	addwf	fsr2l,f,c
  9782  01082C  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9783  01082E  22DA               	addwfc	fsr2h,f,c
  9784  010830  0E01               	movlw	1
  9785  010832  50DB               	movf	plusw2,w,c
  9786  010834  E104               	bnz	u4960
  9787  010836  0E41               	movlw	65
  9788  010838  5CDE               	subwf	postinc2,w,c
  9789  01083A  A0D8               	btfss	status,0,c
  9790  01083C  D055               	goto	l852
  9791  01083E                     u4960:
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;mtouch_button.c: 263: {
  9795                           ;mtouch_button.c: 264: button->counter = (mtouch_button_statecounter_t)0;
  9796  01083E  EE20 F00A          	lfsr	2,10
  9797  010842  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9798  010844  26D9               	addwf	fsr2l,f,c
  9799  010846  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9800  010848  22DA               	addwfc	fsr2h,f,c
  9801  01084A  0E00               	movlw	0
  9802  01084C  6EDE               	movwf	postinc2,c
  9803  01084E  0E00               	movlw	0
  9804  010850  6EDD               	movwf	postdec2,c
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;mtouch_button.c: 265: MTOUCH_Button_Initialize(button->name);
  9808  010852  C0B9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9809  010856  C0BA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9810  01085A  50DF               	movf	indf2,w,c
  9811  01085C  EC15  F08C         	call	_MTOUCH_Button_Initialize
  9812                           
  9813                           ;mtouch_button.c: 266: }
  9814                           ;mtouch_button.c: 267: }
  9815  010860  D043               	goto	l852
  9816  010862                     l848:
  9817                           
  9818                           ;mtouch_button.c: 269: else if ((button->deviation) > (button->threshold))
  9819  010862  0100               	movlb	0	; () banked
  9820  010864  EE20 F009          	lfsr	2,9
  9821  010868  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9822  01086A  26D9               	addwf	fsr2l,f,c
  9823  01086C  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9824  01086E  22DA               	addwfc	fsr2h,f,c
  9825  010870  EE10 F00E          	lfsr	1,14
  9826  010874  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9827  010876  26E1               	addwf	fsr1l,f,c
  9828  010878  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9829  01087A  22E2               	addwfc	fsr1h,f,c
  9830  01087C  50E6               	movf	postinc1,w,c
  9831  01087E  0A80               	xorlw	128
  9832  010880  6FBD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9833  010882  50DE               	movf	postinc2,w,c
  9834  010884  0A80               	xorlw	128
  9835  010886  5DBD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9836  010888  B0D8               	btfsc	status,0,c
  9837  01088A  D023               	goto	l851
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;mtouch_button.c: 270: {
  9841                           ;mtouch_button.c: 272: button->state = MTOUCH_BUTTON_STATE_pressed;
  9842  01088C  EE20 F002          	lfsr	2,2
  9843  010890  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9844  010892  26D9               	addwf	fsr2l,f,c
  9845  010894  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9846  010896  22DA               	addwfc	fsr2h,f,c
  9847  010898  0E02               	movlw	2
  9848  01089A  6EDF               	movwf	indf2,c
  9849                           
  9850                           ;mtouch_button.c: 273: button->counter = (mtouch_button_statecounter_t)0;
  9851  01089C  EE20 F00A          	lfsr	2,10
  9852  0108A0  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9853  0108A2  26D9               	addwf	fsr2l,f,c
  9854  0108A4  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9855  0108A6  22DA               	addwfc	fsr2h,f,c
  9856  0108A8  0E00               	movlw	0
  9857  0108AA  6EDE               	movwf	postinc2,c
  9858  0108AC  0E00               	movlw	0
  9859  0108AE  6EDD               	movwf	postdec2,c
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;mtouch_button.c: 274: callback_pressed(button->name);
  9863  0108B0  D801               	call	u4988
  9864  0108B2  D01A               	goto	l852
  9865  0108B4                     u4988:
  9866  0108B4  0005               	push	
  9867  0108B6  6EFA               	movwf	pclath,c
  9868  0108B8  5045               	movf	_callback_pressed,w,c
  9869  0108BA  6EFD               	movwf	tosl,c
  9870  0108BC  5046               	movf	_callback_pressed+1,w,c
  9871  0108BE  6EFE               	movwf	tosh,c
  9872  0108C0  5047               	movf	_callback_pressed+2,w,c
  9873  0108C2  6EFF               	movwf	tosu,c
  9874  0108C4  50FA               	movf	pclath,w,c
  9875  0108C6  C0B9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9876  0108CA  C0BA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9877  0108CE  50DF               	movf	indf2,w,c
  9878  0108D0  0012               	return		;indir
  9879  0108D2                     l851:
  9880                           
  9881                           ;mtouch_button.c: 276: else
  9882                           ;mtouch_button.c: 277: {
  9883                           ;mtouch_button.c: 279: button->counter = (mtouch_button_statecounter_t)0;
  9884  0108D2  0100               	movlb	0	; () banked
  9885  0108D4  EE20 F00A          	lfsr	2,10
  9886  0108D8  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9887  0108DA  26D9               	addwf	fsr2l,f,c
  9888  0108DC  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9889  0108DE  22DA               	addwfc	fsr2h,f,c
  9890  0108E0  0E00               	movlw	0
  9891  0108E2  6EDE               	movwf	postinc2,c
  9892  0108E4  0E00               	movlw	0
  9893  0108E6  6EDD               	movwf	postdec2,c
  9894  0108E8                     l852:
  9895                           
  9896                           ;mtouch_button.c: 280: }
  9897                           ;mtouch_button.c: 284: (button->baseline_count)++;
  9898                           
  9899                           ; BSR set to: 0
  9900  0108E8  0100               	movlb	0	; () banked
  9901  0108EA  EE20 F00C          	lfsr	2,12
  9902  0108EE  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9903  0108F0  26D9               	addwf	fsr2l,f,c
  9904  0108F2  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9905  0108F4  22DA               	addwfc	fsr2h,f,c
  9906  0108F6  2ADE               	incf	postinc2,f,c
  9907  0108F8  0E00               	movlw	0
  9908  0108FA  22DD               	addwfc	postdec2,f,c
  9909                           
  9910                           ;mtouch_button.c: 285: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
  9911  0108FC  EE20 F00C          	lfsr	2,12
  9912  010900  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9913  010902  26D9               	addwf	fsr2l,f,c
  9914  010904  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9915  010906  22DA               	addwfc	fsr2h,f,c
  9916  010908  0E40               	movlw	64
  9917  01090A  18DE               	xorwf	postinc2,w,c
  9918  01090C  10DE               	iorwf	postinc2,w,c
  9919  01090E  A4D8               	btfss	status,2,c
  9920  010910  0012               	return	
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;mtouch_button.c: 286: {
  9924                           ;mtouch_button.c: 287: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9925  010912  EE20 F00C          	lfsr	2,12
  9926  010916  51B9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9927  010918  26D9               	addwf	fsr2l,f,c
  9928  01091A  51BA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9929  01091C  22DA               	addwfc	fsr2h,f,c
  9930  01091E  0E00               	movlw	0
  9931  010920  6EDE               	movwf	postinc2,c
  9932  010922  0E00               	movlw	0
  9933  010924  6EDD               	movwf	postdec2,c
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;mtouch_button.c: 288: Button_Baseline_Update(button);
  9937  010926  C0B9  F0B0         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
  9938  01092A  C0BA  F0B1         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
  9939  01092E  EC29  F088         	call	_Button_Baseline_Update
  9940  010932  0012               	return	
  9941  010934                     __end_of_Button_State_NotPressed:
  9942                           	opt stack 0
  9943                           tosu	equ	0xFFF
  9944                           tosh	equ	0xFFE
  9945                           tosl	equ	0xFFD
  9946                           pclath	equ	0xFFA
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           postinc0	equ	0xFEE
  9955                           wreg	equ	0xFE8
  9956                           indf1	equ	0xFE7
  9957                           postinc1	equ	0xFE6
  9958                           postdec1	equ	0xFE5
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           plusw2	equ	0xFDB
  9965                           fsr2h	equ	0xFDA
  9966                           fsr2l	equ	0xFD9
  9967                           status	equ	0xFD8
  9968                           
  9969 ;; *************** function _Button_State_Initializing *****************
  9970 ;; Defined at:
  9971 ;;		line 236 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  button          2    9[BANK0 ] PTR struct .
  9974 ;;		 -> mtouch_button(80), 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      void 
  9979 ;; Registers used:
  9980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9986 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9988 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9989 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9990 ;;Total ram usage:        6 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    7
  9993 ;; This function calls:
  9994 ;;		_Button_Baseline_Initialize
  9995 ;;		_Button_Baseline_Update
  9996 ;; This function is called by:
  9997 ;;		_Button_Service
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           	psect	text59
 10002  011328                     __ptext59:
 10003                           	opt stack 0
 10004  011328                     _Button_State_Initializing:
 10005                           	opt stack 20
 10006                           
 10007                           ;mtouch_button.c: 239: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
 10008                           
 10009                           ;incstack = 0
 10010  011328  0100               	movlb	0	; () banked
 10011  01132A  EE20 F00A          	lfsr	2,10
 10012  01132E  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10013  011330  26D9               	addwf	fsr2l,f,c
 10014  011332  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10015  011334  22DA               	addwfc	fsr2h,f,c
 10016  011336  0E01               	movlw	1
 10017  011338  50DB               	movf	plusw2,w,c
 10018  01133A  E10B               	bnz	l4641
 10019  01133C  0E09               	movlw	9
 10020  01133E  5CDE               	subwf	postinc2,w,c
 10021  011340  B0D8               	btfsc	status,0,c
 10022  011342  D007               	goto	l842
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;mtouch_button.c: 240: {
 10026                           ;mtouch_button.c: 241: Button_Baseline_Initialize(button);
 10027  011344  C0B9  F0B3         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
 10028  011348  C0BA  F0B4         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
 10029  01134C  ECEC  F08C         	call	_Button_Baseline_Initialize	;wreg free
 10030                           
 10031                           ;mtouch_button.c: 242: } else {
 10032  011350  D006               	goto	l843
 10033  011352                     l842:
 10034  011352                     l4641:
 10035                           
 10036                           ;mtouch_button.c: 243: Button_Baseline_Update(button);
 10037  011352  C0B9  F0B0         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
 10038  011356  C0BA  F0B1         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
 10039  01135A  EC29  F088         	call	_Button_Baseline_Update	;wreg free
 10040  01135E                     l843:
 10041                           
 10042                           ;mtouch_button.c: 244: }
 10043                           ;mtouch_button.c: 247: (button->counter)++;
 10044  01135E  0100               	movlb	0	; () banked
 10045  011360  EE20 F00A          	lfsr	2,10
 10046  011364  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10047  011366  26D9               	addwf	fsr2l,f,c
 10048  011368  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10049  01136A  22DA               	addwfc	fsr2h,f,c
 10050  01136C  2ADE               	incf	postinc2,f,c
 10051  01136E  0E00               	movlw	0
 10052  011370  22DD               	addwfc	postdec2,f,c
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;mtouch_button.c: 248: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
 10056  011372  EE20 F00A          	lfsr	2,10
 10057  011376  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10058  011378  26D9               	addwf	fsr2l,f,c
 10059  01137A  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10060  01137C  22DA               	addwfc	fsr2h,f,c
 10061  01137E  0E01               	movlw	1
 10062  011380  50DB               	movf	plusw2,w,c
 10063  011382  E104               	bnz	u4930
 10064  011384  0E10               	movlw	16
 10065  011386  5CDE               	subwf	postinc2,w,c
 10066  011388  A0D8               	btfss	status,0,c
 10067  01138A  0012               	return	
 10068  01138C                     u4930:
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;mtouch_button.c: 249: {
 10072                           ;mtouch_button.c: 250: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
 10073  01138C  EE20 F005          	lfsr	2,5
 10074  011390  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10075  011392  26D9               	addwf	fsr2l,f,c
 10076  011394  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10077  011396  22DA               	addwfc	fsr2h,f,c
 10078  011398  CFDE F0BB          	movff	postinc2,??_Button_State_Initializing
 10079  01139C  CFDE F0BC          	movff	postinc2,??_Button_State_Initializing+1
 10080  0113A0  CFDE F0BD          	movff	postinc2,??_Button_State_Initializing+2
 10081  0113A4  CFDE F0BE          	movff	postinc2,??_Button_State_Initializing+3
 10082  0113A8  0E05               	movlw	5
 10083  0113AA  D005               	goto	u4940
 10084  0113AC                     u4945:
 10085  0113AC  90D8               	bcf	status,0,c
 10086  0113AE  33BE               	rrcf	(??_Button_State_Initializing+3)& (0+255),f,b
 10087  0113B0  33BD               	rrcf	(??_Button_State_Initializing+2)& (0+255),f,b
 10088  0113B2  33BC               	rrcf	(??_Button_State_Initializing+1)& (0+255),f,b
 10089  0113B4  33BB               	rrcf	??_Button_State_Initializing& (0+255),f,b
 10090  0113B6                     u4940:
 10091  0113B6  2EE8               	decfsz	wreg,f,c
 10092  0113B8  D7F9               	goto	u4945
 10093  0113BA  EE20 F003          	lfsr	2,3
 10094  0113BE  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10095  0113C0  26D9               	addwf	fsr2l,f,c
 10096  0113C2  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10097  0113C4  22DA               	addwfc	fsr2h,f,c
 10098  0113C6  C0BB  FFDE         	movff	??_Button_State_Initializing,postinc2
 10099  0113CA  C0BC  FFDD         	movff	??_Button_State_Initializing+1,postdec2
 10100                           
 10101                           ;mtouch_button.c: 251: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10102  0113CE  EE20 F002          	lfsr	2,2
 10103  0113D2  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10104  0113D4  26D9               	addwf	fsr2l,f,c
 10105  0113D6  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10106  0113D8  22DA               	addwfc	fsr2h,f,c
 10107  0113DA  0E01               	movlw	1
 10108  0113DC  6EDF               	movwf	indf2,c
 10109                           
 10110                           ;mtouch_button.c: 252: button->counter = (mtouch_button_statecounter_t)0;
 10111  0113DE  EE20 F00A          	lfsr	2,10
 10112  0113E2  51B9               	movf	Button_State_Initializing@button& (0+255),w,b
 10113  0113E4  26D9               	addwf	fsr2l,f,c
 10114  0113E6  51BA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
 10115  0113E8  22DA               	addwfc	fsr2h,f,c
 10116  0113EA  0E00               	movlw	0
 10117  0113EC  6EDE               	movwf	postinc2,c
 10118  0113EE  0E00               	movlw	0
 10119  0113F0  6EDD               	movwf	postdec2,c
 10120  0113F2  0012               	return	
 10121  0113F4                     __end_of_Button_State_Initializing:
 10122                           	opt stack 0
 10123                           tosu	equ	0xFFF
 10124                           tosh	equ	0xFFE
 10125                           tosl	equ	0xFFD
 10126                           pclath	equ	0xFFA
 10127                           tblptru	equ	0xFF8
 10128                           tblptrh	equ	0xFF7
 10129                           tblptrl	equ	0xFF6
 10130                           tablat	equ	0xFF5
 10131                           prodh	equ	0xFF4
 10132                           prodl	equ	0xFF3
 10133                           intcon	equ	0xFF2
 10134                           postinc0	equ	0xFEE
 10135                           wreg	equ	0xFE8
 10136                           indf1	equ	0xFE7
 10137                           postinc1	equ	0xFE6
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           plusw2	equ	0xFDB
 10145                           fsr2h	equ	0xFDA
 10146                           fsr2l	equ	0xFD9
 10147                           status	equ	0xFD8
 10148                           
 10149 ;; *************** function _Button_State_Pressed *****************
 10150 ;; Defined at:
 10151 ;;		line 292 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  button          2    9[BANK0 ] PTR struct .
 10154 ;;		 -> mtouch_button(80), 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  1    wreg      void 
 10159 ;; Registers used:
 10160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10168 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10169 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10170 ;;Total ram usage:        7 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    7
 10173 ;; This function calls:
 10174 ;;		_Button_DefaultCallback
 10175 ;;		_MTOUCH_Button_Initialize
 10176 ;; This function is called by:
 10177 ;;		_Button_Service
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text60
 10182  011152                     __ptext60:
 10183                           	opt stack 0
 10184  011152                     _Button_State_Pressed:
 10185                           	opt stack 20
 10186                           
 10187                           ;mtouch_button.c: 295: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;incstack = 0
 10191  011152  0100               	movlb	0	; () banked
 10192  011154  EE20 F00A          	lfsr	2,10
 10193  011158  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10194  01115A  26D9               	addwf	fsr2l,f,c
 10195  01115C  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10196  01115E  22DA               	addwfc	fsr2h,f,c
 10197  011160  0EE8               	movlw	232
 10198  011162  5CDE               	subwf	postinc2,w,c
 10199  011164  0E03               	movlw	3
 10200  011166  58DE               	subwfb	postinc2,w,c
 10201  011168  A0D8               	btfss	status,0,c
 10202  01116A  D018               	goto	l857
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;mtouch_button.c: 296: {
 10206                           ;mtouch_button.c: 297: MTOUCH_Button_Initialize(button->name);
 10207  01116C  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10208  011170  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10209  011174  50DF               	movf	indf2,w,c
 10210  011176  EC15  F08C         	call	_MTOUCH_Button_Initialize
 10211                           
 10212                           ;mtouch_button.c: 298: callback_notPressed(button->name);
 10213  01117A  D801               	call	u5018
 10214  01117C  0012               	return	
 10215  01117E                     u5018:
 10216  01117E  0005               	push	
 10217  011180  6EFA               	movwf	pclath,c
 10218  011182  5042               	movf	_callback_notPressed,w,c
 10219  011184  6EFD               	movwf	tosl,c
 10220  011186  5043               	movf	_callback_notPressed+1,w,c
 10221  011188  6EFE               	movwf	tosh,c
 10222  01118A  5044               	movf	_callback_notPressed+2,w,c
 10223  01118C  6EFF               	movwf	tosu,c
 10224  01118E  50FA               	movf	pclath,w,c
 10225  011190  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10226  011194  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10227  011198  50DF               	movf	indf2,w,c
 10228  01119A  0012               	return		;indir
 10229  01119C                     l857:
 10230                           
 10231                           ;mtouch_button.c: 302: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
 10232  01119C  0100               	movlb	0	; () banked
 10233  01119E  EE20 F00E          	lfsr	2,14
 10234  0111A2  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10235  0111A4  26D9               	addwf	fsr2l,f,c
 10236  0111A6  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10237  0111A8  22DA               	addwfc	fsr2h,f,c
 10238  0111AA  50DF               	movf	indf2,w,c
 10239  0111AC  6FBB               	movwf	??_Button_State_Pressed& (0+255),b
 10240  0111AE  EE20 F00E          	lfsr	2,14
 10241  0111B2  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10242  0111B4  26D9               	addwf	fsr2l,f,c
 10243  0111B6  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10244  0111B8  22DA               	addwfc	fsr2h,f,c
 10245  0111BA  50DF               	movf	indf2,w,c
 10246  0111BC  6FBC               	movwf	(??_Button_State_Pressed+1)& (0+255),b
 10247  0111BE  35BC               	rlcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10248  0111C0  31BC               	rrcf	(??_Button_State_Pressed+1)& (0+255),w,b
 10249  0111C2  0800               	sublw	0
 10250  0111C4  25BB               	addwf	??_Button_State_Pressed& (0+255),w,b
 10251  0111C6  6FBD               	movwf	(??_Button_State_Pressed+2)& (0+255),b
 10252  0111C8  EE20 F009          	lfsr	2,9
 10253  0111CC  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10254  0111CE  26D9               	addwf	fsr2l,f,c
 10255  0111D0  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10256  0111D2  22DA               	addwfc	fsr2h,f,c
 10257  0111D4  50DE               	movf	postinc2,w,c
 10258  0111D6  0A80               	xorlw	128
 10259  0111D8  6FBF               	movwf	(??_Button_State_Pressed+4)& (0+255),b
 10260  0111DA  51BD               	movf	(??_Button_State_Pressed+2)& (0+255),w,b
 10261  0111DC  0A80               	xorlw	128
 10262  0111DE  5DBF               	subwf	(??_Button_State_Pressed+4)& (0+255),w,b
 10263  0111E0  B0D8               	btfsc	status,0,c
 10264  0111E2  0012               	return	
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;mtouch_button.c: 303: {
 10268                           ;mtouch_button.c: 304: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10269  0111E4  EE20 F002          	lfsr	2,2
 10270  0111E8  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10271  0111EA  26D9               	addwf	fsr2l,f,c
 10272  0111EC  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10273  0111EE  22DA               	addwfc	fsr2h,f,c
 10274  0111F0  0E01               	movlw	1
 10275  0111F2  6EDF               	movwf	indf2,c
 10276                           
 10277                           ;mtouch_button.c: 305: button->counter = (mtouch_button_statecounter_t)0;
 10278  0111F4  EE20 F00A          	lfsr	2,10
 10279  0111F8  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10280  0111FA  26D9               	addwf	fsr2l,f,c
 10281  0111FC  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10282  0111FE  22DA               	addwfc	fsr2h,f,c
 10283  011200  0E00               	movlw	0
 10284  011202  6EDE               	movwf	postinc2,c
 10285  011204  0E00               	movlw	0
 10286  011206  6EDD               	movwf	postdec2,c
 10287                           
 10288                           ;mtouch_button.c: 306: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
 10289  011208  EE20 F00C          	lfsr	2,12
 10290  01120C  51B9               	movf	Button_State_Pressed@button& (0+255),w,b
 10291  01120E  26D9               	addwf	fsr2l,f,c
 10292  011210  51BA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
 10293  011212  22DA               	addwfc	fsr2h,f,c
 10294  011214  0EFF               	movlw	255
 10295  011216  6EDE               	movwf	postinc2,c
 10296  011218  0EFB               	movlw	251
 10297  01121A  6EDD               	movwf	postdec2,c
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;mtouch_button.c: 307: callback_notPressed(button->name);
 10301  01121C  D801               	call	u5038
 10302  01121E  0012               	return	
 10303  011220                     u5038:
 10304  011220  0005               	push	
 10305  011222  6EFA               	movwf	pclath,c
 10306  011224  5042               	movf	_callback_notPressed,w,c
 10307  011226  6EFD               	movwf	tosl,c
 10308  011228  5043               	movf	_callback_notPressed+1,w,c
 10309  01122A  6EFE               	movwf	tosh,c
 10310  01122C  5044               	movf	_callback_notPressed+2,w,c
 10311  01122E  6EFF               	movwf	tosu,c
 10312  011230  50FA               	movf	pclath,w,c
 10313  011232  C0B9  FFD9         	movff	Button_State_Pressed@button,fsr2l
 10314  011236  C0BA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
 10315  01123A  50DF               	movf	indf2,w,c
 10316  01123C  0012               	return		;indir
 10317  01123E                     __end_of_Button_State_Pressed:
 10318                           	opt stack 0
 10319                           tosu	equ	0xFFF
 10320                           tosh	equ	0xFFE
 10321                           tosl	equ	0xFFD
 10322                           pclath	equ	0xFFA
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           postinc0	equ	0xFEE
 10331                           wreg	equ	0xFE8
 10332                           indf1	equ	0xFE7
 10333                           postinc1	equ	0xFE6
 10334                           postdec1	equ	0xFE5
 10335                           fsr1h	equ	0xFE2
 10336                           fsr1l	equ	0xFE1
 10337                           indf2	equ	0xFDF
 10338                           postinc2	equ	0xFDE
 10339                           postdec2	equ	0xFDD
 10340                           plusw2	equ	0xFDB
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function _MTOUCH_Button_Initialize *****************
 10346 ;; Defined at:
 10347 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  name            1    wreg     enum E17454
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  name            1    1[BANK0 ] enum E17454
 10352 ;;  button          2    2[BANK0 ] PTR struct .
 10353 ;;		 -> mtouch_button(80), 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      void 
 10356 ;; Registers used:
 10357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10364 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10366 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10367 ;;Total ram usage:        3 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    6
 10370 ;; This function calls:
 10371 ;;		_MTOUCH_Sensor_Calibrate
 10372 ;; This function is called by:
 10373 ;;		_MTOUCH_Button_InitializeAll
 10374 ;;		_Button_Service
 10375 ;;		_Button_State_NotPressed
 10376 ;;		_Button_State_Pressed
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text61
 10381  01182A                     __ptext61:
 10382                           	opt stack 0
 10383  01182A                     _MTOUCH_Button_Initialize:
 10384                           	opt stack 21
 10385                           
 10386                           ;incstack = 0
 10387                           ;MTOUCH_Button_Initialize@name stored from wreg
 10388  01182A  0100               	movlb	0	; () banked
 10389  01182C  6FB1               	movwf	MTOUCH_Button_Initialize@name& (0+255),b
 10390                           
 10391                           ;mtouch_button.c: 180: mtouch_button_t* button = &mtouch_button[name];
 10392  01182E  0100               	movlb	0	; () banked
 10393  011830  51B1               	movf	MTOUCH_Button_Initialize@name& (0+255),w,b
 10394  011832  0D10               	mullw	16
 10395  011834  0E40               	movlw	low _mtouch_button
 10396  011836  24F3               	addwf	prodl,w,c
 10397  011838  6FB2               	movwf	MTOUCH_Button_Initialize@button& (0+255),b
 10398  01183A  0E01               	movlw	high _mtouch_button
 10399  01183C  20F4               	addwfc	prodh,w,c
 10400  01183E  6FB3               	movwf	(MTOUCH_Button_Initialize@button+1)& (0+255),b
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;mtouch_button.c: 182: button->state = MTOUCH_BUTTON_STATE_initializing;
 10404  011840  EE20 F002          	lfsr	2,2
 10405  011844  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10406  011846  26D9               	addwf	fsr2l,f,c
 10407  011848  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10408  01184A  22DA               	addwfc	fsr2h,f,c
 10409  01184C  0E00               	movlw	0
 10410  01184E  6EDF               	movwf	indf2,c
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;mtouch_button.c: 183: button->baseline = (mtouch_button_baseline_t)0;
 10414  011850  EE20 F005          	lfsr	2,5
 10415  011854  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10416  011856  26D9               	addwf	fsr2l,f,c
 10417  011858  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10418  01185A  22DA               	addwfc	fsr2h,f,c
 10419  01185C  6ADE               	clrf	postinc2,c
 10420  01185E  6ADE               	clrf	postinc2,c
 10421  011860  6ADE               	clrf	postinc2,c
 10422  011862  6ADD               	clrf	postdec2,c
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;mtouch_button.c: 184: button->counter = (mtouch_button_statecounter_t)0;
 10426  011864  EE20 F00A          	lfsr	2,10
 10427  011868  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10428  01186A  26D9               	addwf	fsr2l,f,c
 10429  01186C  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10430  01186E  22DA               	addwfc	fsr2h,f,c
 10431  011870  0E00               	movlw	0
 10432  011872  6EDE               	movwf	postinc2,c
 10433  011874  0E00               	movlw	0
 10434  011876  6EDD               	movwf	postdec2,c
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;mtouch_button.c: 185: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10438  011878  EE20 F00C          	lfsr	2,12
 10439  01187C  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10440  01187E  26D9               	addwf	fsr2l,f,c
 10441  011880  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10442  011882  22DA               	addwfc	fsr2h,f,c
 10443  011884  0E00               	movlw	0
 10444  011886  6EDE               	movwf	postinc2,c
 10445  011888  0E00               	movlw	0
 10446  01188A  6EDD               	movwf	postdec2,c
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;mtouch_button.c: 187: MTOUCH_Sensor_Calibrate(button->sensor);
 10450  01188C  EE20 F001          	lfsr	2,1
 10451  011890  51B2               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 10452  011892  26D9               	addwf	fsr2l,f,c
 10453  011894  51B3               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 10454  011896  22DA               	addwfc	fsr2h,f,c
 10455  011898  50DF               	movf	indf2,w,c
 10456  01189A  ECF9  F090         	call	_MTOUCH_Sensor_Calibrate
 10457  01189E  0012               	return		;funcret
 10458  0118A0                     __end_of_MTOUCH_Button_Initialize:
 10459                           	opt stack 0
 10460                           tosu	equ	0xFFF
 10461                           tosh	equ	0xFFE
 10462                           tosl	equ	0xFFD
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           postinc0	equ	0xFEE
 10472                           wreg	equ	0xFE8
 10473                           indf1	equ	0xFE7
 10474                           postinc1	equ	0xFE6
 10475                           postdec1	equ	0xFE5
 10476                           fsr1h	equ	0xFE2
 10477                           fsr1l	equ	0xFE1
 10478                           indf2	equ	0xFDF
 10479                           postinc2	equ	0xFDE
 10480                           postdec2	equ	0xFDD
 10481                           plusw2	equ	0xFDB
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10487 ;; Defined at:
 10488 ;;		line 764 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;  sensor          1    wreg     enum E17513
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  sensor          1    0[BANK0 ] enum E17513
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      void 
 10495 ;; Registers used:
 10496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10506 ;;Total ram usage:        1 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_MTOUCH_Sensor_Initialize
 10513 ;;		_MTOUCH_Button_Initialize
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text62
 10518  0121F2                     __ptext62:
 10519                           	opt stack 0
 10520  0121F2                     _MTOUCH_Sensor_Calibrate:
 10521                           	opt stack 21
 10522                           
 10523                           ;incstack = 0
 10524                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10525  0121F2  0100               	movlb	0	; () banked
 10526  0121F4  6FB0               	movwf	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10527                           
 10528                           ;mtouch_sensor.c: 766: if(sensor < 5)
 10529  0121F6  0E05               	movlw	5
 10530  0121F8  0100               	movlb	0	; () banked
 10531  0121FA  61B0               	cpfslt	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 10532  0121FC  0012               	return	
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;mtouch_sensor.c: 767: {
 10536                           ;mtouch_sensor.c: 768: mtouch_sensor[sensor].calibrated = 0;
 10537  0121FE  51B0               	movf	MTOUCH_Sensor_Calibrate@sensor& (0+255),w,b
 10538  012200  0D09               	mullw	9
 10539  012202  0E08               	movlw	8
 10540  012204  26F3               	addwf	prodl,f,c
 10541  012206  0E00               	movlw	0
 10542  012208  22F4               	addwfc	prodh,f,c
 10543  01220A  0E83               	movlw	low _mtouch_sensor
 10544  01220C  24F3               	addwf	prodl,w,c
 10545  01220E  6ED9               	movwf	fsr2l,c
 10546  012210  0E00               	movlw	high _mtouch_sensor
 10547  012212  20F4               	addwfc	prodh,w,c
 10548  012214  6EDA               	movwf	fsr2h,c
 10549  012216  96DF               	bcf	indf2,3,c
 10550  012218  0012               	return	
 10551  01221A                     __end_of_MTOUCH_Sensor_Calibrate:
 10552                           	opt stack 0
 10553                           tosu	equ	0xFFF
 10554                           tosh	equ	0xFFE
 10555                           tosl	equ	0xFFD
 10556                           pclath	equ	0xFFA
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           postinc0	equ	0xFEE
 10565                           wreg	equ	0xFE8
 10566                           indf1	equ	0xFE7
 10567                           postinc1	equ	0xFE6
 10568                           postdec1	equ	0xFE5
 10569                           fsr1h	equ	0xFE2
 10570                           fsr1l	equ	0xFE1
 10571                           indf2	equ	0xFDF
 10572                           postinc2	equ	0xFDE
 10573                           postdec2	equ	0xFDD
 10574                           plusw2	equ	0xFDB
 10575                           fsr2h	equ	0xFDA
 10576                           fsr2l	equ	0xFD9
 10577                           status	equ	0xFD8
 10578                           
 10579 ;; *************** function _Button_DefaultCallback *****************
 10580 ;; Defined at:
 10581 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  button          1    wreg     enum E17454
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  button          1    0[COMRAM] enum E17454
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      void 
 10588 ;; Registers used:
 10589 ;;		wreg
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10599 ;;Total ram usage:        0 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    5
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_Button_State_NotPressed
 10606 ;;		_Button_State_Pressed
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text63
 10611  012492                     __ptext63:
 10612                           	opt stack 0
 10613  012492                     _Button_DefaultCallback:
 10614                           	opt stack 21
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;incstack = 0
 10618  012492  0012               	return		;funcret
 10619  012494                     __end_of_Button_DefaultCallback:
 10620                           	opt stack 0
 10621                           tosu	equ	0xFFF
 10622                           tosh	equ	0xFFE
 10623                           tosl	equ	0xFFD
 10624                           pclath	equ	0xFFA
 10625                           tblptru	equ	0xFF8
 10626                           tblptrh	equ	0xFF7
 10627                           tblptrl	equ	0xFF6
 10628                           tablat	equ	0xFF5
 10629                           prodh	equ	0xFF4
 10630                           prodl	equ	0xFF3
 10631                           intcon	equ	0xFF2
 10632                           postinc0	equ	0xFEE
 10633                           wreg	equ	0xFE8
 10634                           indf1	equ	0xFE7
 10635                           postinc1	equ	0xFE6
 10636                           postdec1	equ	0xFE5
 10637                           fsr1h	equ	0xFE2
 10638                           fsr1l	equ	0xFE1
 10639                           indf2	equ	0xFDF
 10640                           postinc2	equ	0xFDE
 10641                           postdec2	equ	0xFDD
 10642                           plusw2	equ	0xFDB
 10643                           fsr2h	equ	0xFDA
 10644                           fsr2l	equ	0xFD9
 10645                           status	equ	0xFD8
 10646                           
 10647 ;; *************** function _Button_Baseline_Update *****************
 10648 ;; Defined at:
 10649 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  button          2    0[BANK0 ] PTR struct .
 10652 ;;		 -> mtouch_button(80), 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;		None
 10655 ;; Return value:  Size  Location     Type
 10656 ;;                  1    wreg      void 
 10657 ;; Registers used:
 10658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10667 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10668 ;;Total ram usage:        6 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    5
 10671 ;; This function calls:
 10672 ;;		Nothing
 10673 ;; This function is called by:
 10674 ;;		_Button_State_Initializing
 10675 ;;		_Button_State_NotPressed
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text64
 10680  011052                     __ptext64:
 10681                           	opt stack 0
 10682  011052                     _Button_Baseline_Update:
 10683                           	opt stack 21
 10684                           
 10685                           ;mtouch_button.c: 486: if (GIE == (uint8_t)1)
 10686                           
 10687                           ;incstack = 0
 10688  011052  AEF2               	btfss	intcon,7,c	;volatile
 10689  011054  D040               	goto	l937
 10690                           
 10691                           ;mtouch_button.c: 487: {
 10692                           ;mtouch_button.c: 488: GIE = (uint8_t)0;
 10693  011056  9EF2               	bcf	intcon,7,c	;volatile
 10694                           
 10695                           ;mtouch_button.c: 489: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10696  011058  0100               	movlb	0	; () banked
 10697  01105A  EE20 F005          	lfsr	2,5
 10698  01105E  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10699  011060  26D9               	addwf	fsr2l,f,c
 10700  011062  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10701  011064  22DA               	addwfc	fsr2h,f,c
 10702  011066  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10703  01106A  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+1
 10704  01106E  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+2
 10705  011072  CFDE F0B5          	movff	postinc2,??_Button_Baseline_Update+3
 10706  011076  0E05               	movlw	5
 10707  011078  D005               	goto	u4510
 10708  01107A                     u4515:
 10709  01107A  90D8               	bcf	status,0,c
 10710  01107C  33B5               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10711  01107E  33B4               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10712  011080  33B3               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10713  011082  33B2               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10714  011084                     u4510:
 10715  011084  2EE8               	decfsz	wreg,f,c
 10716  011086  D7F9               	goto	u4515
 10717  011088  EE20 F005          	lfsr	2,5
 10718  01108C  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10719  01108E  26D9               	addwf	fsr2l,f,c
 10720  011090  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10721  011092  22DA               	addwfc	fsr2h,f,c
 10722  011094  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10723  011096  5EDE               	subwf	postinc2,f,c
 10724  011098  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10725  01109A  5ADE               	subwfb	postinc2,f,c
 10726  01109C  51B4               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10727  01109E  5ADE               	subwfb	postinc2,f,c
 10728  0110A0  51B5               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10729  0110A2  5ADE               	subwfb	postinc2,f,c
 10730                           
 10731                           ;mtouch_button.c: 490: button->baseline += button->reading;
 10732  0110A4  EE20 F003          	lfsr	2,3
 10733  0110A8  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10734  0110AA  26D9               	addwf	fsr2l,f,c
 10735  0110AC  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10736  0110AE  22DA               	addwfc	fsr2h,f,c
 10737  0110B0  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10738  0110B4  CFDD F0B3          	movff	postdec2,??_Button_Baseline_Update+1
 10739  0110B8  EE20 F005          	lfsr	2,5
 10740  0110BC  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10741  0110BE  26D9               	addwf	fsr2l,f,c
 10742  0110C0  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10743  0110C2  22DA               	addwfc	fsr2h,f,c
 10744  0110C4  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10745  0110C6  26DE               	addwf	postinc2,f,c
 10746  0110C8  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10747  0110CA  22DE               	addwfc	postinc2,f,c
 10748  0110CC  0E00               	movlw	0
 10749  0110CE  22DE               	addwfc	postinc2,f,c
 10750  0110D0  22DE               	addwfc	postinc2,f,c
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;mtouch_button.c: 491: GIE = (uint8_t)1;
 10754  0110D2  8EF2               	bsf	intcon,7,c	;volatile
 10755                           
 10756                           ;mtouch_button.c: 492: }
 10757  0110D4  0012               	return	
 10758  0110D6                     l937:
 10759                           
 10760                           ;mtouch_button.c: 493: else
 10761                           ;mtouch_button.c: 494: {
 10762                           ;mtouch_button.c: 495: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10763                           
 10764                           ; BSR set to: 0
 10765  0110D6  0100               	movlb	0	; () banked
 10766  0110D8  EE20 F005          	lfsr	2,5
 10767  0110DC  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10768  0110DE  26D9               	addwf	fsr2l,f,c
 10769  0110E0  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10770  0110E2  22DA               	addwfc	fsr2h,f,c
 10771  0110E4  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10772  0110E8  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+1
 10773  0110EC  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+2
 10774  0110F0  CFDE F0B5          	movff	postinc2,??_Button_Baseline_Update+3
 10775  0110F4  0E05               	movlw	5
 10776  0110F6  D005               	goto	u4520
 10777  0110F8                     u4525:
 10778  0110F8  90D8               	bcf	status,0,c
 10779  0110FA  33B5               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 10780  0110FC  33B4               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 10781  0110FE  33B3               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 10782  011100  33B2               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 10783  011102                     u4520:
 10784  011102  2EE8               	decfsz	wreg,f,c
 10785  011104  D7F9               	goto	u4525
 10786  011106  EE20 F005          	lfsr	2,5
 10787  01110A  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10788  01110C  26D9               	addwf	fsr2l,f,c
 10789  01110E  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10790  011110  22DA               	addwfc	fsr2h,f,c
 10791  011112  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10792  011114  5EDE               	subwf	postinc2,f,c
 10793  011116  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10794  011118  5ADE               	subwfb	postinc2,f,c
 10795  01111A  51B4               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 10796  01111C  5ADE               	subwfb	postinc2,f,c
 10797  01111E  51B5               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 10798  011120  5ADE               	subwfb	postinc2,f,c
 10799                           
 10800                           ;mtouch_button.c: 496: button->baseline += button->reading;
 10801  011122  EE20 F003          	lfsr	2,3
 10802  011126  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10803  011128  26D9               	addwf	fsr2l,f,c
 10804  01112A  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10805  01112C  22DA               	addwfc	fsr2h,f,c
 10806  01112E  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update
 10807  011132  CFDD F0B3          	movff	postdec2,??_Button_Baseline_Update+1
 10808  011136  EE20 F005          	lfsr	2,5
 10809  01113A  51B0               	movf	Button_Baseline_Update@button& (0+255),w,b
 10810  01113C  26D9               	addwf	fsr2l,f,c
 10811  01113E  51B1               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 10812  011140  22DA               	addwfc	fsr2h,f,c
 10813  011142  51B2               	movf	??_Button_Baseline_Update& (0+255),w,b
 10814  011144  26DE               	addwf	postinc2,f,c
 10815  011146  51B3               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 10816  011148  22DE               	addwfc	postinc2,f,c
 10817  01114A  0E00               	movlw	0
 10818  01114C  22DE               	addwfc	postinc2,f,c
 10819  01114E  22DE               	addwfc	postinc2,f,c
 10820  011150  0012               	return	
 10821  011152                     __end_of_Button_Baseline_Update:
 10822                           	opt stack 0
 10823                           tosu	equ	0xFFF
 10824                           tosh	equ	0xFFE
 10825                           tosl	equ	0xFFD
 10826                           pclath	equ	0xFFA
 10827                           tblptru	equ	0xFF8
 10828                           tblptrh	equ	0xFF7
 10829                           tblptrl	equ	0xFF6
 10830                           tablat	equ	0xFF5
 10831                           prodh	equ	0xFF4
 10832                           prodl	equ	0xFF3
 10833                           intcon	equ	0xFF2
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           indf1	equ	0xFE7
 10837                           postinc1	equ	0xFE6
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _Button_Baseline_Initialize *****************
 10850 ;; Defined at:
 10851 ;;		line 478 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  button          2    3[BANK0 ] PTR struct .
 10854 ;;		 -> mtouch_button(80), 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      void 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10869 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10870 ;;Total ram usage:        6 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    6
 10873 ;; This function calls:
 10874 ;;		_MTOUCH_Sensor_RawSample_Get
 10875 ;; This function is called by:
 10876 ;;		_Button_State_Initializing
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text65
 10881  0119D8                     __ptext65:
 10882                           	opt stack 0
 10883  0119D8                     _Button_Baseline_Initialize:
 10884                           	opt stack 20
 10885                           
 10886                           ;mtouch_button.c: 480: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;incstack = 0
 10890  0119D8  0100               	movlb	0	; () banked
 10891  0119DA  EE20 F001          	lfsr	2,1
 10892  0119DE  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10893  0119E0  26D9               	addwf	fsr2l,f,c
 10894  0119E2  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10895  0119E4  22DA               	addwfc	fsr2h,f,c
 10896  0119E6  50DF               	movf	indf2,w,c
 10897  0119E8  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 10898  0119EC  0100               	movlb	0	; () banked
 10899  0119EE  51B0               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 10900  0119F0  6FB5               	movwf	??_Button_Baseline_Initialize& (0+255),b
 10901  0119F2  51B1               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 10902  0119F4  6FB6               	movwf	(??_Button_Baseline_Initialize+1)& (0+255),b
 10903  0119F6  6BB7               	clrf	(??_Button_Baseline_Initialize+2)& (0+255),b
 10904  0119F8  6BB8               	clrf	(??_Button_Baseline_Initialize+3)& (0+255),b
 10905  0119FA  EE20 F005          	lfsr	2,5
 10906  0119FE  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10907  011A00  26D9               	addwf	fsr2l,f,c
 10908  011A02  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10909  011A04  22DA               	addwfc	fsr2h,f,c
 10910  011A06  C0B5  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
 10911  011A0A  C0B6  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
 10912  011A0E  C0B7  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
 10913  011A12  C0B8  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;mtouch_button.c: 481: button->baseline <<= ((uint8_t)4);
 10917  011A16  EE20 F005          	lfsr	2,5
 10918  011A1A  51B3               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 10919  011A1C  26D9               	addwf	fsr2l,f,c
 10920  011A1E  51B4               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 10921  011A20  22DA               	addwfc	fsr2h,f,c
 10922  011A22  0E04               	movlw	4
 10923  011A24                     u4495:
 10924  011A24  90D8               	bcf	status,0,c
 10925  011A26  36DE               	rlcf	postinc2,f,c
 10926  011A28  36DE               	rlcf	postinc2,f,c
 10927  011A2A  36DE               	rlcf	postinc2,f,c
 10928  011A2C  36DD               	rlcf	postdec2,f,c
 10929  011A2E  06D9               	decf	fsr2l,f,c
 10930  011A30  06D9               	decf	fsr2l,f,c
 10931  011A32  2EE8               	decfsz	wreg,f,c
 10932  011A34  D7F7               	goto	u4495
 10933                           
 10934                           ; BSR set to: 0
 10935  011A36  0012               	return		;funcret
 10936  011A38                     __end_of_Button_Baseline_Initialize:
 10937                           	opt stack 0
 10938                           tosu	equ	0xFFF
 10939                           tosh	equ	0xFFE
 10940                           tosl	equ	0xFFD
 10941                           pclath	equ	0xFFA
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postinc1	equ	0xFE6
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           plusw2	equ	0xFDB
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _Button_Reading_Update *****************
 10965 ;; Defined at:
 10966 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  button          2    7[BANK0 ] PTR struct .
 10969 ;;		 -> mtouch_button(80), 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10981 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10984 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10985 ;;Total ram usage:        2 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    7
 10988 ;; This function calls:
 10989 ;;		_Button_Reading_Update_Helper
 10990 ;; This function is called by:
 10991 ;;		_Button_Service
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text66
 10996  0122B0                     __ptext66:
 10997                           	opt stack 0
 10998  0122B0                     _Button_Reading_Update:
 10999                           	opt stack 20
 11000                           
 11001                           ;mtouch_button.c: 453: if (GIE == (uint8_t) 1)
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;incstack = 0
 11005  0122B0  AEF2               	btfss	intcon,7,c	;volatile
 11006  0122B2  D009               	goto	l924
 11007                           
 11008                           ;mtouch_button.c: 454: {
 11009                           ;mtouch_button.c: 455: GIE = (uint8_t) 0;
 11010  0122B4  9EF2               	bcf	intcon,7,c	;volatile
 11011                           
 11012                           ;mtouch_button.c: 456: Button_Reading_Update_Helper(button);
 11013  0122B6  C0B7  F0B3         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 11014  0122BA  C0B8  F0B4         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 11015  0122BE  EC5C  F08A         	call	_Button_Reading_Update_Helper	;wreg free
 11016                           
 11017                           ;mtouch_button.c: 457: GIE = (uint8_t) 1;
 11018  0122C2  8EF2               	bsf	intcon,7,c	;volatile
 11019                           
 11020                           ;mtouch_button.c: 458: }
 11021  0122C4  0012               	return	
 11022  0122C6                     l924:
 11023                           
 11024                           ;mtouch_button.c: 459: else
 11025                           ;mtouch_button.c: 460: {
 11026                           ;mtouch_button.c: 461: Button_Reading_Update_Helper(button);
 11027  0122C6  C0B7  F0B3         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 11028  0122CA  C0B8  F0B4         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 11029  0122CE  EC5C  F08A         	call	_Button_Reading_Update_Helper	;wreg free
 11030  0122D2  0012               	return	
 11031  0122D4                     __end_of_Button_Reading_Update:
 11032                           	opt stack 0
 11033                           tosu	equ	0xFFF
 11034                           tosh	equ	0xFFE
 11035                           tosl	equ	0xFFD
 11036                           pclath	equ	0xFFA
 11037                           tblptru	equ	0xFF8
 11038                           tblptrh	equ	0xFF7
 11039                           tblptrl	equ	0xFF6
 11040                           tablat	equ	0xFF5
 11041                           prodh	equ	0xFF4
 11042                           prodl	equ	0xFF3
 11043                           intcon	equ	0xFF2
 11044                           postinc0	equ	0xFEE
 11045                           wreg	equ	0xFE8
 11046                           indf1	equ	0xFE7
 11047                           postinc1	equ	0xFE6
 11048                           postdec1	equ	0xFE5
 11049                           fsr1h	equ	0xFE2
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           plusw2	equ	0xFDB
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059 ;; *************** function _Button_Reading_Update_Helper *****************
 11060 ;; Defined at:
 11061 ;;		line 465 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  button          2    3[BANK0 ] PTR struct .
 11064 ;;		 -> mtouch_button(80), 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11080 ;;Total ram usage:        4 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    6
 11083 ;; This function calls:
 11084 ;;		_MTOUCH_Sensor_RawSample_Get
 11085 ;; This function is called by:
 11086 ;;		_Button_Reading_Update
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           	psect	text67
 11091  0114B8                     __ptext67:
 11092                           	opt stack 0
 11093  0114B8                     _Button_Reading_Update_Helper:
 11094                           	opt stack 20
 11095                           
 11096                           ;mtouch_button.c: 467: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 11097                           
 11098                           ;incstack = 0
 11099  0114B8  0100               	movlb	0	; () banked
 11100  0114BA  EE20 F002          	lfsr	2,2
 11101  0114BE  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11102  0114C0  26D9               	addwf	fsr2l,f,c
 11103  0114C2  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11104  0114C4  22DA               	addwfc	fsr2h,f,c
 11105  0114C6  50DF               	movf	indf2,w,c
 11106  0114C8  B4D8               	btfsc	status,2,c
 11107  0114CA  D035               	goto	l929
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;mtouch_button.c: 468: {
 11111                           ;mtouch_button.c: 469: button->reading -= button->reading>>(uint8_t)2;
 11112  0114CC  EE20 F003          	lfsr	2,3
 11113  0114D0  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11114  0114D2  26D9               	addwf	fsr2l,f,c
 11115  0114D4  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11116  0114D6  22DA               	addwfc	fsr2h,f,c
 11117  0114D8  CFDE F0B5          	movff	postinc2,??_Button_Reading_Update_Helper
 11118  0114DC  CFDD F0B6          	movff	postdec2,??_Button_Reading_Update_Helper+1
 11119  0114E0  90D8               	bcf	status,0,c
 11120  0114E2  33B6               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11121  0114E4  33B5               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11122  0114E6  90D8               	bcf	status,0,c
 11123  0114E8  33B6               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 11124  0114EA  33B5               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 11125  0114EC  EE20 F003          	lfsr	2,3
 11126  0114F0  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11127  0114F2  26D9               	addwf	fsr2l,f,c
 11128  0114F4  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11129  0114F6  22DA               	addwfc	fsr2h,f,c
 11130  0114F8  51B5               	movf	??_Button_Reading_Update_Helper& (0+255),w,b
 11131  0114FA  5EDE               	subwf	postinc2,f,c
 11132  0114FC  51B6               	movf	(??_Button_Reading_Update_Helper+1)& (0+255),w,b
 11133  0114FE  5ADD               	subwfb	postdec2,f,c
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;mtouch_button.c: 470: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
 11137  011500  EE20 F001          	lfsr	2,1
 11138  011504  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11139  011506  26D9               	addwf	fsr2l,f,c
 11140  011508  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11141  01150A  22DA               	addwfc	fsr2h,f,c
 11142  01150C  50DF               	movf	indf2,w,c
 11143  01150E  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11144  011512  0100               	movlb	0	; () banked
 11145  011514  90D8               	bcf	status,0,c
 11146  011516  33B1               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11147  011518  33B0               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11148  01151A  90D8               	bcf	status,0,c
 11149  01151C  33B1               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 11150  01151E  33B0               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 11151  011520  EE20 F003          	lfsr	2,3
 11152  011524  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11153  011526  26D9               	addwf	fsr2l,f,c
 11154  011528  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11155  01152A  22DA               	addwfc	fsr2h,f,c
 11156  01152C  51B0               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 11157  01152E  26DE               	addwf	postinc2,f,c
 11158  011530  51B1               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 11159  011532  22DD               	addwfc	postdec2,f,c
 11160                           
 11161                           ;mtouch_button.c: 471: }
 11162  011534  0012               	return	
 11163  011536                     l929:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;mtouch_button.c: 472: else
 11167                           ;mtouch_button.c: 473: {
 11168                           ;mtouch_button.c: 474: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11169                           
 11170                           ; BSR set to: 0
 11171  011536  EE20 F001          	lfsr	2,1
 11172  01153A  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11173  01153C  26D9               	addwf	fsr2l,f,c
 11174  01153E  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11175  011540  22DA               	addwfc	fsr2h,f,c
 11176  011542  50DF               	movf	indf2,w,c
 11177  011544  ECAD  F08F         	call	_MTOUCH_Sensor_RawSample_Get
 11178  011548  0100               	movlb	0	; () banked
 11179  01154A  EE20 F003          	lfsr	2,3
 11180  01154E  51B3               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 11181  011550  26D9               	addwf	fsr2l,f,c
 11182  011552  51B4               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 11183  011554  22DA               	addwfc	fsr2h,f,c
 11184  011556  C0B0  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
 11185  01155A  C0B1  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
 11186  01155E  0012               	return	
 11187  011560                     __end_of_Button_Reading_Update_Helper:
 11188                           	opt stack 0
 11189                           tosu	equ	0xFFF
 11190                           tosh	equ	0xFFE
 11191                           tosl	equ	0xFFD
 11192                           pclath	equ	0xFFA
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           indf1	equ	0xFE7
 11203                           postinc1	equ	0xFE6
 11204                           postdec1	equ	0xFE5
 11205                           fsr1h	equ	0xFE2
 11206                           fsr1l	equ	0xFE1
 11207                           indf2	equ	0xFDF
 11208                           postinc2	equ	0xFDE
 11209                           postdec2	equ	0xFDD
 11210                           plusw2	equ	0xFDB
 11211                           fsr2h	equ	0xFDA
 11212                           fsr2l	equ	0xFD9
 11213                           status	equ	0xFD8
 11214                           
 11215 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11216 ;; Defined at:
 11217 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;  name            1    wreg     enum E17513
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  name            1    2[BANK0 ] enum E17513
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  2    0[BANK0 ] unsigned int 
 11224 ;; Registers used:
 11225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11231 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11234 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11235 ;;Total ram usage:        3 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    5
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_Button_Reading_Update_Helper
 11242 ;;		_Button_Baseline_Initialize
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text68
 11247  011F5A                     __ptext68:
 11248                           	opt stack 0
 11249  011F5A                     _MTOUCH_Sensor_RawSample_Get:
 11250                           	opt stack 20
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;incstack = 0
 11254                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11255  011F5A  0100               	movlb	0	; () banked
 11256  011F5C  6FB2               	movwf	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11257                           
 11258                           ;mtouch_sensor.c: 534: if (name < 5)
 11259  011F5E  0E05               	movlw	5
 11260  011F60  0100               	movlb	0	; () banked
 11261  011F62  61B2               	cpfslt	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 11262  011F64  D011               	goto	l632
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;mtouch_sensor.c: 535: {
 11266                           ;mtouch_sensor.c: 536: return mtouch_sensor[name].rawSample;
 11267  011F66  51B2               	movf	MTOUCH_Sensor_RawSample_Get@name& (0+255),w,b
 11268  011F68  0D09               	mullw	9
 11269  011F6A  0E06               	movlw	6
 11270  011F6C  26F3               	addwf	prodl,f,c
 11271  011F6E  0E00               	movlw	0
 11272  011F70  22F4               	addwfc	prodh,f,c
 11273  011F72  0E83               	movlw	low _mtouch_sensor
 11274  011F74  24F3               	addwf	prodl,w,c
 11275  011F76  6ED9               	movwf	fsr2l,c
 11276  011F78  0E00               	movlw	high _mtouch_sensor
 11277  011F7A  20F4               	addwfc	prodh,w,c
 11278  011F7C  6EDA               	movwf	fsr2h,c
 11279  011F7E  CFDE F0B0          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
 11280  011F82  CFDD F0B1          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;mtouch_sensor.c: 537: }
 11284                           
 11285                           ; BSR set to: 0
 11286  011F86  0012               	return	
 11287  011F88                     l632:
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;mtouch_sensor.c: 538: else
 11291                           ;mtouch_sensor.c: 539: return (mtouch_sensor_sample_t)0;
 11292                           
 11293                           ; BSR set to: 0
 11294  011F88  0E00               	movlw	0
 11295  011F8A  6FB1               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),b
 11296  011F8C  0E00               	movlw	0
 11297  011F8E  6FB0               	movwf	?_MTOUCH_Sensor_RawSample_Get& (0+255),b
 11298                           
 11299                           ; BSR set to: 0
 11300  011F90  0012               	return	
 11301  011F92                     __end_of_MTOUCH_Sensor_RawSample_Get:
 11302                           	opt stack 0
 11303                           tosu	equ	0xFFF
 11304                           tosh	equ	0xFFE
 11305                           tosl	equ	0xFFD
 11306                           pclath	equ	0xFFA
 11307                           tblptru	equ	0xFF8
 11308                           tblptrh	equ	0xFF7
 11309                           tblptrl	equ	0xFF6
 11310                           tablat	equ	0xFF5
 11311                           prodh	equ	0xFF4
 11312                           prodl	equ	0xFF3
 11313                           intcon	equ	0xFF2
 11314                           postinc0	equ	0xFEE
 11315                           wreg	equ	0xFE8
 11316                           indf1	equ	0xFE7
 11317                           postinc1	equ	0xFE6
 11318                           postdec1	equ	0xFE5
 11319                           fsr1h	equ	0xFE2
 11320                           fsr1l	equ	0xFE1
 11321                           indf2	equ	0xFDF
 11322                           postinc2	equ	0xFDE
 11323                           postdec2	equ	0xFDD
 11324                           plusw2	equ	0xFDB
 11325                           fsr2h	equ	0xFDA
 11326                           fsr2l	equ	0xFD9
 11327                           status	equ	0xFD8
 11328                           
 11329 ;; *************** function _Button_Deviation_Update *****************
 11330 ;; Defined at:
 11331 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;  button          2    0[BANK0 ] PTR struct .
 11334 ;;		 -> mtouch_button(80), 
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  deviation       4    8[BANK0 ] long 
 11337 ;; Return value:  Size  Location     Type
 11338 ;;                  1    wreg      void 
 11339 ;; Registers used:
 11340 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11346 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11348 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11349 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11350 ;;Total ram usage:       12 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    5
 11353 ;; This function calls:
 11354 ;;		Nothing
 11355 ;; This function is called by:
 11356 ;;		_Button_Service
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           	psect	text69
 11361  010F40                     __ptext69:
 11362                           	opt stack 0
 11363  010F40                     _Button_Deviation_Update:
 11364                           	opt stack 22
 11365                           
 11366                           ;mtouch_button.c: 404: int32_t deviation;
 11367                           ;mtouch_button.c: 406: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;incstack = 0
 11371  010F40  0100               	movlb	0	; () banked
 11372  010F42  EE20 F005          	lfsr	2,5
 11373  010F46  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11374  010F48  26D9               	addwf	fsr2l,f,c
 11375  010F4A  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11376  010F4C  22DA               	addwfc	fsr2h,f,c
 11377  010F4E  CFDE F0B2          	movff	postinc2,??_Button_Deviation_Update
 11378  010F52  CFDE F0B3          	movff	postinc2,??_Button_Deviation_Update+1
 11379  010F56  CFDE F0B4          	movff	postinc2,??_Button_Deviation_Update+2
 11380  010F5A  CFDE F0B5          	movff	postinc2,??_Button_Deviation_Update+3
 11381  010F5E  0E05               	movlw	5
 11382  010F60  D005               	goto	u4880
 11383  010F62                     u4885:
 11384  010F62  90D8               	bcf	status,0,c
 11385  010F64  33B5               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11386  010F66  33B4               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11387  010F68  33B3               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11388  010F6A  33B2               	rrcf	??_Button_Deviation_Update& (0+255),f,b
 11389  010F6C                     u4880:
 11390  010F6C  2EE8               	decfsz	wreg,f,c
 11391  010F6E  D7F9               	goto	u4885
 11392  010F70  1FB2               	comf	??_Button_Deviation_Update& (0+255),f,b
 11393  010F72  1FB3               	comf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11394  010F74  1FB4               	comf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11395  010F76  1FB5               	comf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11396  010F78  2BB2               	incf	??_Button_Deviation_Update& (0+255),f,b
 11397  010F7A  0E00               	movlw	0
 11398  010F7C  23B3               	addwfc	(??_Button_Deviation_Update+1)& (0+255),f,b
 11399  010F7E  23B4               	addwfc	(??_Button_Deviation_Update+2)& (0+255),f,b
 11400  010F80  23B5               	addwfc	(??_Button_Deviation_Update+3)& (0+255),f,b
 11401  010F82  EE20 F003          	lfsr	2,3
 11402  010F86  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11403  010F88  26D9               	addwf	fsr2l,f,c
 11404  010F8A  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11405  010F8C  22DA               	addwfc	fsr2h,f,c
 11406  010F8E  CFDE F0B6          	movff	postinc2,??_Button_Deviation_Update+4
 11407  010F92  CFDD F0B7          	movff	postdec2,??_Button_Deviation_Update+5
 11408  010F96  51B6               	movf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11409  010F98  25B2               	addwf	??_Button_Deviation_Update& (0+255),w,b
 11410  010F9A  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11411  010F9C  51B7               	movf	(??_Button_Deviation_Update+5)& (0+255),w,b
 11412  010F9E  21B3               	addwfc	(??_Button_Deviation_Update+1)& (0+255),w,b
 11413  010FA0  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11414  010FA2  0E00               	movlw	0
 11415  010FA4  21B4               	addwfc	(??_Button_Deviation_Update+2)& (0+255),w,b
 11416  010FA6  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11417  010FA8  0E00               	movlw	0
 11418  010FAA  21B5               	addwfc	(??_Button_Deviation_Update+3)& (0+255),w,b
 11419  010FAC  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11420                           
 11421                           ;mtouch_button.c: 409: deviation = deviation >> (button->scaling);
 11422  010FAE  EE20 F00F          	lfsr	2,15
 11423  010FB2  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11424  010FB4  26D9               	addwf	fsr2l,f,c
 11425  010FB6  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11426  010FB8  22DA               	addwfc	fsr2h,f,c
 11427  010FBA  50DF               	movf	indf2,w,c
 11428  010FBC  6FB2               	movwf	??_Button_Deviation_Update& (0+255),b
 11429  010FBE  C0B8  F0B3         	movff	Button_Deviation_Update@deviation,??_Button_Deviation_Update+1
 11430  010FC2  C0B9  F0B4         	movff	Button_Deviation_Update@deviation+1,??_Button_Deviation_Update+2
 11431  010FC6  C0BA  F0B5         	movff	Button_Deviation_Update@deviation+2,??_Button_Deviation_Update+3
 11432  010FCA  C0BB  F0B6         	movff	Button_Deviation_Update@deviation+3,??_Button_Deviation_Update+4
 11433  010FCE                     u4895:
 11434  010FCE  67B2               	tstfsz	??_Button_Deviation_Update& (0+255),b
 11435  010FD0  D001               	goto	u4896
 11436  010FD2  D007               	goto	u4897
 11437  010FD4                     u4896:
 11438  010FD4  35B6               	rlcf	(??_Button_Deviation_Update+4)& (0+255),w,b
 11439  010FD6  33B6               	rrcf	(??_Button_Deviation_Update+4)& (0+255),f,b
 11440  010FD8  33B5               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 11441  010FDA  33B4               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 11442  010FDC  33B3               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 11443  010FDE  2FB2               	decfsz	??_Button_Deviation_Update& (0+255),f,b
 11444  010FE0  D7F6               	goto	u4895
 11445  010FE2                     u4897:
 11446  010FE2  C0B3  F0B8         	movff	??_Button_Deviation_Update+1,Button_Deviation_Update@deviation
 11447  010FE6  C0B4  F0B9         	movff	??_Button_Deviation_Update+2,Button_Deviation_Update@deviation+1
 11448  010FEA  C0B5  F0BA         	movff	??_Button_Deviation_Update+3,Button_Deviation_Update@deviation+2
 11449  010FEE  C0B6  F0BB         	movff	??_Button_Deviation_Update+4,Button_Deviation_Update@deviation+3
 11450                           
 11451                           ;mtouch_button.c: 412: if (deviation > ((127)))
 11452  010FF2  0100               	movlb	0	; () banked
 11453  010FF4  BFBB               	btfsc	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11454  010FF6  D010               	goto	l908
 11455  010FF8  51BB               	movf	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11456  010FFA  11BA               	iorwf	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11457  010FFC  11B9               	iorwf	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11458  010FFE  E104               	bnz	u4900
 11459  011000  0E80               	movlw	128
 11460  011002  5DB8               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11461  011004  A0D8               	btfss	status,0,c
 11462  011006  D008               	goto	l908
 11463  011008                     u4900:
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;mtouch_button.c: 413: {
 11467                           ;mtouch_button.c: 414: deviation = ((127));
 11468  011008  0E7F               	movlw	127
 11469  01100A  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11470  01100C  0E00               	movlw	0
 11471  01100E  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11472  011010  0E00               	movlw	0
 11473  011012  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11474  011014  0E00               	movlw	0
 11475  011016  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11476  011018                     l908:
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;mtouch_button.c: 415: }
 11480                           ;mtouch_button.c: 416: if (deviation < ((-128)))
 11481                           
 11482                           ; BSR set to: 0
 11483  011018  AFBB               	btfss	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 11484  01101A  D012               	goto	l909
 11485  01101C  0E80               	movlw	128
 11486  01101E  5DB8               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 11487  011020  0EFF               	movlw	255
 11488  011022  59B9               	subwfb	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 11489  011024  0EFF               	movlw	255
 11490  011026  59BA               	subwfb	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 11491  011028  0EFF               	movlw	255
 11492  01102A  59BB               	subwfb	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 11493  01102C  B0D8               	btfsc	status,0,c
 11494  01102E  D008               	goto	l909
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;mtouch_button.c: 417: {
 11498                           ;mtouch_button.c: 418: deviation = ((-128));
 11499  011030  0E80               	movlw	128
 11500  011032  6FB8               	movwf	Button_Deviation_Update@deviation& (0+255),b
 11501  011034  0EFF               	movlw	255
 11502  011036  6FB9               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 11503  011038  0EFF               	movlw	255
 11504  01103A  6FBA               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 11505  01103C  0EFF               	movlw	255
 11506  01103E  6FBB               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 11507  011040                     l909:
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;mtouch_button.c: 419: }
 11511                           ;mtouch_button.c: 421: button->deviation = (mtouch_button_deviation_t)deviation;
 11512                           
 11513                           ; BSR set to: 0
 11514  011040  EE20 F009          	lfsr	2,9
 11515  011044  51B0               	movf	Button_Deviation_Update@button& (0+255),w,b
 11516  011046  26D9               	addwf	fsr2l,f,c
 11517  011048  51B1               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 11518  01104A  22DA               	addwfc	fsr2h,f,c
 11519  01104C  C0B8  FFDF         	movff	Button_Deviation_Update@deviation,indf2
 11520                           
 11521                           ; BSR set to: 0
 11522  011050  0012               	return		;funcret
 11523  011052                     __end_of_Button_Deviation_Update:
 11524                           	opt stack 0
 11525                           tosu	equ	0xFFF
 11526                           tosh	equ	0xFFE
 11527                           tosl	equ	0xFFD
 11528                           pclath	equ	0xFFA
 11529                           tblptru	equ	0xFF8
 11530                           tblptrh	equ	0xFF7
 11531                           tblptrl	equ	0xFF6
 11532                           tablat	equ	0xFF5
 11533                           prodh	equ	0xFF4
 11534                           prodl	equ	0xFF3
 11535                           intcon	equ	0xFF2
 11536                           postinc0	equ	0xFEE
 11537                           wreg	equ	0xFE8
 11538                           indf1	equ	0xFE7
 11539                           postinc1	equ	0xFE6
 11540                           postdec1	equ	0xFE5
 11541                           fsr1h	equ	0xFE2
 11542                           fsr1l	equ	0xFE1
 11543                           indf2	equ	0xFDF
 11544                           postinc2	equ	0xFDE
 11545                           postdec2	equ	0xFDD
 11546                           plusw2	equ	0xFDB
 11547                           fsr2h	equ	0xFDA
 11548                           fsr2l	equ	0xFD9
 11549                           status	equ	0xFD8
 11550                           
 11551 ;; *************** function _MTOUCH_Button_State_Get *****************
 11552 ;; Defined at:
 11553 ;;		line 513 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;  name            1    wreg     enum E17454
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;  name            1    0[BANK0 ] enum E17454
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  1    wreg      unsigned char 
 11560 ;; Registers used:
 11561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11571 ;;Total ram usage:        1 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    5
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           	psect	text70
 11582  012124                     __ptext70:
 11583                           	opt stack 0
 11584  012124                     _MTOUCH_Button_State_Get:
 11585                           	opt stack 25
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;incstack = 0
 11589                           ;MTOUCH_Button_State_Get@name stored from wreg
 11590  012124  0100               	movlb	0	; () banked
 11591  012126  6FB0               	movwf	MTOUCH_Button_State_Get@name& (0+255),b
 11592                           
 11593                           ;mtouch_button.c: 515: if(name < 5)
 11594  012128  0E05               	movlw	5
 11595  01212A  0100               	movlb	0	; () banked
 11596  01212C  61B0               	cpfslt	MTOUCH_Button_State_Get@name& (0+255),b
 11597  01212E  D00E               	goto	l950
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;mtouch_button.c: 516: return (uint8_t)mtouch_button[name].state;
 11601  012130  51B0               	movf	MTOUCH_Button_State_Get@name& (0+255),w,b
 11602  012132  0D10               	mullw	16
 11603  012134  0E02               	movlw	2
 11604  012136  26F3               	addwf	prodl,f,c
 11605  012138  0E00               	movlw	0
 11606  01213A  22F4               	addwfc	prodh,f,c
 11607  01213C  0E40               	movlw	low _mtouch_button
 11608  01213E  24F3               	addwf	prodl,w,c
 11609  012140  6ED9               	movwf	fsr2l,c
 11610  012142  0E01               	movlw	high _mtouch_button
 11611  012144  20F4               	addwfc	prodh,w,c
 11612  012146  6EDA               	movwf	fsr2h,c
 11613  012148  50DF               	movf	indf2,w,c
 11614                           
 11615                           ; BSR set to: 0
 11616                           
 11617                           ; BSR set to: 0
 11618  01214A  0012               	return	
 11619  01214C                     l950:
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;mtouch_button.c: 517: else
 11623                           ;mtouch_button.c: 518: return 0;
 11624                           
 11625                           ; BSR set to: 0
 11626  01214C  0E00               	movlw	0
 11627                           
 11628                           ; BSR set to: 0
 11629  01214E  0012               	return	
 11630  012150                     __end_of_MTOUCH_Button_State_Get:
 11631                           	opt stack 0
 11632                           tosu	equ	0xFFF
 11633                           tosh	equ	0xFFE
 11634                           tosl	equ	0xFFD
 11635                           pclath	equ	0xFFA
 11636                           tblptru	equ	0xFF8
 11637                           tblptrh	equ	0xFF7
 11638                           tblptrl	equ	0xFF6
 11639                           tablat	equ	0xFF5
 11640                           prodh	equ	0xFF4
 11641                           prodl	equ	0xFF3
 11642                           intcon	equ	0xFF2
 11643                           postinc0	equ	0xFEE
 11644                           wreg	equ	0xFE8
 11645                           indf1	equ	0xFE7
 11646                           postinc1	equ	0xFE6
 11647                           postdec1	equ	0xFE5
 11648                           fsr1h	equ	0xFE2
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           plusw2	equ	0xFDB
 11654                           fsr2h	equ	0xFDA
 11655                           fsr2l	equ	0xFD9
 11656                           status	equ	0xFD8
 11657                           
 11658 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 11659 ;; Defined at:
 11660 ;;		line 71 in file "mcc_generated_files/interrupt_manager.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;		None
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      void 
 11667 ;; Registers used:
 11668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11676 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11677 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11678 ;;Total ram usage:       18 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    4
 11681 ;; This function calls:
 11682 ;;		Absolute function
 11683 ;;		_ADCC_ThresholdISR_mTouch
 11684 ;;		_EUSART2_Receive_ISR
 11685 ;;		_EUSART2_Transmit_ISR
 11686 ;; This function is called by:
 11687 ;;		Interrupt level 2
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           	psect	intcode
 11692  000008                     __pintcode:
 11693                           	opt stack 0
 11694  000008                     _INTERRUPT_InterruptManagerHigh:
 11695                           	opt stack 20
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;incstack = 0
 11699  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11700  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 11701  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 11702  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 11703  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 11704  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 11705  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 11706  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 11707  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 11708  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 11709  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 11710  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 11711  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 11712  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 11713  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 11714  000042  C04F  F025         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 11715  000046  C050  F026         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 11716  00004A  C051  F027         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 11717  00004E  C052  F028         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 11718                           
 11719                           ;interrupt_manager.c: 74: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 11720  000052  010E               	movlb	14	; () banked
 11721  000054  BD2C               	btfsc	44,6,b	;volatile
 11722                           
 11723                           ; BSR set to: 14
 11724  000056  AD36               	btfss	54,6,b	;volatile
 11725  000058  D00A               	goto	i2l114
 11726                           
 11727                           ; BSR set to: 14
 11728                           ;interrupt_manager.c: 75: {
 11729                           ;interrupt_manager.c: 76: EUSART2_TxDefaultInterruptHandler();
 11730  00005A  D801               	call	i2u414_48
 11731  00005C  D01D               	goto	i2l118
 11732  00005E                     i2u414_48:
 11733  00005E  0005               	push	
 11734  000060  6EFA               	movwf	pclath,c
 11735  000062  504B               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 11736  000064  6EFD               	movwf	tosl,c
 11737  000066  504C               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 11738  000068  6EFE               	movwf	tosh,c
 11739  00006A  504D               	movf	_EUSART2_TxDefaultInterruptHandler+2,w,c
 11740  00006C  D00D               	goto	L4
 11741  00006E                     i2l114:
 11742                           
 11743                           ; BSR set to: 14
 11744                           ;interrupt_manager.c: 78: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 11745  00006E  BF2C               	btfsc	44,7,b	;volatile
 11746                           
 11747                           ; BSR set to: 14
 11748  000070  AF36               	btfss	54,7,b	;volatile
 11749  000072  D00D               	goto	i2l116
 11750                           
 11751                           ; BSR set to: 14
 11752                           ;interrupt_manager.c: 79: {
 11753                           ;interrupt_manager.c: 80: EUSART2_RxDefaultInterruptHandler();
 11754  000074  D801               	call	i2u417_48
 11755  000076  D010               	goto	i2l118
 11756  000078                     i2u417_48:
 11757  000078  0005               	push	
 11758  00007A  6EFA               	movwf	pclath,c
 11759  00007C  0100               	movlb	0	; () banked
 11760  00007E  51E1               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
 11761  000080  6EFD               	movwf	tosl,c
 11762  000082  51E2               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
 11763  000084  6EFE               	movwf	tosh,c
 11764  000086  51E3               	movf	(_EUSART2_RxDefaultInterruptHandler+2)& (0+255),w,b
 11765  000088                     L4:
 11766  000088  6EFF               	movwf	tosu,c
 11767  00008A  50FA               	movf	pclath,w,c
 11768  00008C  0012               	return		;indir
 11769  00008E                     i2l116:
 11770                           
 11771                           ; BSR set to: 14
 11772                           ;interrupt_manager.c: 82: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 11773  00008E  B32A               	btfsc	42,1,b	;volatile
 11774                           
 11775                           ; BSR set to: 14
 11776  000090  A334               	btfss	52,1,b	;volatile
 11777  000092  D002               	goto	i2l118
 11778                           
 11779                           ; BSR set to: 14
 11780                           ;interrupt_manager.c: 83: {
 11781                           ;interrupt_manager.c: 84: ADCC_ThresholdISR_mTouch();
 11782  000094  EC36  F092         	call	_ADCC_ThresholdISR_mTouch	;wreg free
 11783  000098                     i2l118:
 11784                           
 11785                           ;interrupt_manager.c: 86: else
 11786                           ;interrupt_manager.c: 87: {
 11787  000098  C028  F052         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 11788  00009C  C027  F051         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 11789  0000A0  C026  F050         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 11790  0000A4  C025  F04F         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 11791  0000A8  C024  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 11792  0000AC  C023  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 11793  0000B0  C022  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 11794  0000B4  C021  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 11795  0000B8  C020  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 11796  0000BC  C01F  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 11797  0000C0  C01E  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 11798  0000C4  C01D  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 11799  0000C8  C01C  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 11800  0000CC  C01B  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 11801  0000D0  C01A  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 11802  0000D4  C019  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 11803  0000D8  C018  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 11804  0000DC  C017  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 11805  0000E0  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11806  0000E2  0011               	retfie		f
 11807  0000E4                     __end_of_INTERRUPT_InterruptManagerHigh:
 11808                           	opt stack 0
 11809                           tosu	equ	0xFFF
 11810                           tosh	equ	0xFFE
 11811                           tosl	equ	0xFFD
 11812                           pclatu	equ	0xFFB
 11813                           pclath	equ	0xFFA
 11814                           tblptru	equ	0xFF8
 11815                           tblptrh	equ	0xFF7
 11816                           tblptrl	equ	0xFF6
 11817                           tablat	equ	0xFF5
 11818                           prodh	equ	0xFF4
 11819                           prodl	equ	0xFF3
 11820                           intcon	equ	0xFF2
 11821                           postinc0	equ	0xFEE
 11822                           fsr0h	equ	0xFEA
 11823                           fsr0l	equ	0xFE9
 11824                           wreg	equ	0xFE8
 11825                           indf1	equ	0xFE7
 11826                           postinc1	equ	0xFE6
 11827                           postdec1	equ	0xFE5
 11828                           fsr1h	equ	0xFE2
 11829                           fsr1l	equ	0xFE1
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           plusw2	equ	0xFDB
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function _EUSART2_Transmit_ISR *****************
 11839 ;; Defined at:
 11840 ;;		line 183 in file "mcc_generated_files/eusart2.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;		None
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;		None
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  1    wreg      void 
 11847 ;; Registers used:
 11848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11858 ;;Total ram usage:        0 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_EUSART2_Initialize
 11864 ;;		_INTERRUPT_InterruptManagerHigh
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text72
 11869  01202E                     __ptext72:
 11870                           	opt stack 0
 11871  01202E                     _EUSART2_Transmit_ISR:
 11872                           	opt stack 23
 11873                           
 11874                           ;eusart2.c: 187: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 11875                           
 11876                           ;incstack = 0
 11877  01202E  0E40               	movlw	64
 11878  012030  604E               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 11879  012032  D013               	goto	i2l209
 11880                           
 11881                           ;eusart2.c: 188: {
 11882                           ;eusart2.c: 189: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 11883  012034  5040               	movf	_eusart2TxTail,w,c	;volatile
 11884  012036  0D01               	mullw	1
 11885  012038  0E00               	movlw	low _eusart2TxBuffer
 11886  01203A  24F3               	addwf	prodl,w,c
 11887  01203C  6ED9               	movwf	fsr2l,c
 11888  01203E  0E02               	movlw	high _eusart2TxBuffer
 11889  012040  20F4               	addwfc	prodh,w,c
 11890  012042  6EDA               	movwf	fsr2h,c
 11891  012044  50DF               	movf	indf2,w,c
 11892  012046  010E               	movlb	14	; () banked
 11893  012048  6FF2               	movwf	242,b	;volatile
 11894                           
 11895                           ; BSR set to: 14
 11896  01204A  2A40               	incf	_eusart2TxTail,f,c	;volatile
 11897                           
 11898                           ; BSR set to: 14
 11899                           ;eusart2.c: 190: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 11900  01204C  0E3F               	movlw	63
 11901  01204E  6440               	cpfsgt	_eusart2TxTail,c	;volatile
 11902  012050  D002               	goto	i2l210
 11903                           
 11904                           ; BSR set to: 14
 11905                           ;eusart2.c: 191: {
 11906                           ;eusart2.c: 192: eusart2TxTail = 0;
 11907  012052  0E00               	movlw	0
 11908  012054  6E40               	movwf	_eusart2TxTail,c	;volatile
 11909  012056                     i2l210:
 11910                           
 11911                           ; BSR set to: 14
 11912                           ;eusart2.c: 193: }
 11913                           ;eusart2.c: 194: eusart2TxBufferRemaining++;
 11914                           
 11915                           ; BSR set to: 14
 11916  012056  2A4E               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 11917                           
 11918                           ;eusart2.c: 195: }
 11919  012058  0012               	return	
 11920  01205A                     i2l209:
 11921                           
 11922                           ;eusart2.c: 196: else
 11923                           ;eusart2.c: 197: {
 11924                           ;eusart2.c: 198: PIE3bits.TX2IE = 0;
 11925  01205A  010E               	movlb	14	; () banked
 11926  01205C  9D2C               	bcf	44,6,b	;volatile
 11927  01205E  0012               	return	
 11928  012060                     __end_of_EUSART2_Transmit_ISR:
 11929                           	opt stack 0
 11930                           tosu	equ	0xFFF
 11931                           tosh	equ	0xFFE
 11932                           tosl	equ	0xFFD
 11933                           pclatu	equ	0xFFB
 11934                           pclath	equ	0xFFA
 11935                           tblptru	equ	0xFF8
 11936                           tblptrh	equ	0xFF7
 11937                           tblptrl	equ	0xFF6
 11938                           tablat	equ	0xFF5
 11939                           prodh	equ	0xFF4
 11940                           prodl	equ	0xFF3
 11941                           intcon	equ	0xFF2
 11942                           postinc0	equ	0xFEE
 11943                           fsr0h	equ	0xFEA
 11944                           fsr0l	equ	0xFE9
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           postinc1	equ	0xFE6
 11948                           postdec1	equ	0xFE5
 11949                           fsr1h	equ	0xFE2
 11950                           fsr1l	equ	0xFE1
 11951                           indf2	equ	0xFDF
 11952                           postinc2	equ	0xFDE
 11953                           postdec2	equ	0xFDD
 11954                           plusw2	equ	0xFDB
 11955                           fsr2h	equ	0xFDA
 11956                           fsr2l	equ	0xFD9
 11957                           status	equ	0xFD8
 11958                           
 11959 ;; *************** function _EUSART2_Receive_ISR *****************
 11960 ;; Defined at:
 11961 ;;		line 202 in file "mcc_generated_files/eusart2.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;		None
 11964 ;; Auto vars:     Size  Location     Type
 11965 ;;		None
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  1    wreg      void 
 11968 ;; Registers used:
 11969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11979 ;;Total ram usage:        0 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    3
 11982 ;; This function calls:
 11983 ;;		i2_printf
 11984 ;; This function is called by:
 11985 ;;		_EUSART2_Initialize
 11986 ;;		_INTERRUPT_InterruptManagerHigh
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text73
 11991  011560                     __ptext73:
 11992                           	opt stack 0
 11993  011560                     _EUSART2_Receive_ISR:
 11994                           	opt stack 20
 11995                           
 11996                           ;eusart2.c: 205: if(1 == RC2STAbits.OERR)
 11997                           
 11998                           ; BSR set to: 14
 11999                           ;incstack = 0
 12000  011560  010E               	movlb	14	; () banked
 12001  011562  A3F5               	btfss	245,1,b	;volatile
 12002  011564  D002               	goto	i2l215
 12003                           
 12004                           ; BSR set to: 14
 12005                           ;eusart2.c: 206: {
 12006                           ;eusart2.c: 209: RC2STAbits.CREN = 0;
 12007  011566  99F5               	bcf	245,4,b	;volatile
 12008                           
 12009                           ;eusart2.c: 210: RC2STAbits.CREN = 1;
 12010  011568  89F5               	bsf	245,4,b	;volatile
 12011  01156A                     i2l215:
 12012                           
 12013                           ; BSR set to: 14
 12014                           ;eusart2.c: 211: }
 12015                           ;eusart2.c: 214: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 12016                           
 12017                           ; BSR set to: 14
 12018  01156A  503F               	movf	_eusart2RxHead,w,c	;volatile
 12019  01156C  0D01               	mullw	1
 12020  01156E  0E00               	movlw	low _eusart2RxBuffer
 12021  011570  24F3               	addwf	prodl,w,c
 12022  011572  6ED9               	movwf	fsr2l,c
 12023  011574  0E01               	movlw	high _eusart2RxBuffer
 12024  011576  20F4               	addwfc	prodh,w,c
 12025  011578  6EDA               	movwf	fsr2h,c
 12026  01157A  CEF1 FFDF          	movff	3825,indf2	;volatile
 12027                           
 12028                           ; BSR set to: 14
 12029  01157E  2A3F               	incf	_eusart2RxHead,f,c	;volatile
 12030                           
 12031                           ; BSR set to: 14
 12032                           ;eusart2.c: 215: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 12033  011580  0E3F               	movlw	63
 12034  011582  643F               	cpfsgt	_eusart2RxHead,c	;volatile
 12035  011584  D002               	goto	i2l216
 12036                           
 12037                           ; BSR set to: 14
 12038                           ;eusart2.c: 216: {
 12039                           ;eusart2.c: 217: eusart2RxHead = 0;
 12040  011586  0E00               	movlw	0
 12041  011588  6E3F               	movwf	_eusart2RxHead,c	;volatile
 12042  01158A                     i2l216:
 12043                           
 12044                           ; BSR set to: 14
 12045                           ;eusart2.c: 218: }
 12046                           ;eusart2.c: 219: eusart2RxCount++;
 12047                           
 12048                           ; BSR set to: 14
 12049  01158A  2A3D               	incf	_eusart2RxCount,f,c	;volatile
 12050                           
 12051                           ; BSR set to: 14
 12052                           ;eusart2.c: 221: if((RC2REG == (int) '\n') || (RC2REG == (int) '\r')) {
 12053  01158C  0E0A               	movlw	10
 12054  01158E  19F1               	xorwf	241,w,b	;volatile
 12055  011590  B4D8               	btfsc	status,2,c
 12056  011592  D004               	goto	i2u401_40
 12057                           
 12058                           ; BSR set to: 14
 12059  011594  0E0D               	movlw	13
 12060  011596  19F1               	xorwf	241,w,b	;volatile
 12061  011598  A4D8               	btfss	status,2,c
 12062  01159A  D007               	goto	i2l217
 12063  01159C                     i2u401_40:
 12064                           
 12065                           ; BSR set to: 14
 12066                           ;eusart2.c: 223: eusart2RxStringReady = 1;
 12067                           
 12068                           ; BSR set to: 14
 12069  01159C  0E01               	movlw	1
 12070  01159E  0100               	movlb	0	; () banked
 12071  0115A0  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
 12072                           
 12073                           ;eusart2.c: 226: RC2REG = 0;
 12074  0115A2  0E00               	movlw	0
 12075  0115A4  010E               	movlb	14	; () banked
 12076  0115A6  6FF1               	movwf	241,b	;volatile
 12077                           
 12078                           ;eusart2.c: 228: }
 12079  0115A8  D003               	goto	i2l220
 12080  0115AA                     i2l217:
 12081                           
 12082                           ; BSR set to: 14
 12083                           ;eusart2.c: 230: else {
 12084                           ;eusart2.c: 232: eusart2RxStringReady = 0;
 12085                           
 12086                           ; BSR set to: 14
 12087  0115AA  0E00               	movlw	0
 12088  0115AC  0100               	movlb	0	; () banked
 12089  0115AE  6F82               	movwf	_eusart2RxStringReady& (0+255),b	;volatile
 12090  0115B0                     i2l220:
 12091                           
 12092                           ;eusart2.c: 234: }
 12093                           ;eusart2.c: 237: if((RC2REG == (int) '\b')) {
 12094                           
 12095                           ; BSR set to: 0
 12096  0115B0  0E08               	movlw	8
 12097  0115B2  010E               	movlb	14	; () banked
 12098  0115B4  19F1               	xorwf	241,w,b	;volatile
 12099  0115B6  A4D8               	btfss	status,2,c
 12100  0115B8  0012               	return	
 12101                           
 12102                           ; BSR set to: 14
 12103                           ;eusart2.c: 239: eusart2RxBuffer[eusart2RxHead] = '\0';
 12104  0115BA  503F               	movf	_eusart2RxHead,w,c	;volatile
 12105  0115BC  0D01               	mullw	1
 12106  0115BE  0E00               	movlw	low _eusart2RxBuffer
 12107  0115C0  24F3               	addwf	prodl,w,c
 12108  0115C2  6ED9               	movwf	fsr2l,c
 12109  0115C4  0E01               	movlw	high _eusart2RxBuffer
 12110  0115C6  20F4               	addwfc	prodh,w,c
 12111  0115C8  6EDA               	movwf	fsr2h,c
 12112  0115CA  0E00               	movlw	0
 12113  0115CC  6EDF               	movwf	indf2,c
 12114                           
 12115                           ; BSR set to: 14
 12116                           ;eusart2.c: 240: eusart2RxHead--;
 12117  0115CE  063F               	decf	_eusart2RxHead,f,c	;volatile
 12118                           
 12119                           ; BSR set to: 14
 12120                           ;eusart2.c: 243: printf("\033[K");
 12121  0115D0  0EFB               	movlw	low STR_1
 12122  0115D2  6E0D               	movwf	i2printf@f,c
 12123  0115D4  0EFF               	movlw	high STR_1
 12124  0115D6  6E0E               	movwf	i2printf@f+1,c
 12125  0115D8  EC7A  F086         	call	i2_printf	;wreg free
 12126                           
 12127                           ;eusart2.c: 245: if(eusart2RxHead != eusart2RxTail) {
 12128  0115DC  503E               	movf	_eusart2RxTail,w,c	;volatile
 12129  0115DE  183F               	xorwf	_eusart2RxHead,w,c	;volatile
 12130  0115E0  B4D8               	btfsc	status,2,c
 12131  0115E2  D00B               	goto	i2l222
 12132                           
 12133                           ;eusart2.c: 247: eusart2RxBuffer[eusart2RxHead] = '\0';
 12134  0115E4  503F               	movf	_eusart2RxHead,w,c	;volatile
 12135  0115E6  0D01               	mullw	1
 12136  0115E8  0E00               	movlw	low _eusart2RxBuffer
 12137  0115EA  24F3               	addwf	prodl,w,c
 12138  0115EC  6ED9               	movwf	fsr2l,c
 12139  0115EE  0E01               	movlw	high _eusart2RxBuffer
 12140  0115F0  20F4               	addwfc	prodh,w,c
 12141  0115F2  6EDA               	movwf	fsr2h,c
 12142  0115F4  0E00               	movlw	0
 12143  0115F6  6EDF               	movwf	indf2,c
 12144                           
 12145                           ;eusart2.c: 248: eusart2RxHead--;
 12146  0115F8  063F               	decf	_eusart2RxHead,f,c	;volatile
 12147  0115FA                     i2l222:
 12148                           
 12149                           ;eusart2.c: 250: }
 12150                           ;eusart2.c: 252: RC2REG = 0;
 12151  0115FA  0E00               	movlw	0
 12152  0115FC  010E               	movlb	14	; () banked
 12153  0115FE  6FF1               	movwf	241,b	;volatile
 12154  011600  0012               	return	
 12155  011602                     __end_of_EUSART2_Receive_ISR:
 12156                           	opt stack 0
 12157                           tosu	equ	0xFFF
 12158                           tosh	equ	0xFFE
 12159                           tosl	equ	0xFFD
 12160                           pclatu	equ	0xFFB
 12161                           pclath	equ	0xFFA
 12162                           tblptru	equ	0xFF8
 12163                           tblptrh	equ	0xFF7
 12164                           tblptrl	equ	0xFF6
 12165                           tablat	equ	0xFF5
 12166                           prodh	equ	0xFF4
 12167                           prodl	equ	0xFF3
 12168                           intcon	equ	0xFF2
 12169                           postinc0	equ	0xFEE
 12170                           fsr0h	equ	0xFEA
 12171                           fsr0l	equ	0xFE9
 12172                           wreg	equ	0xFE8
 12173                           indf1	equ	0xFE7
 12174                           postinc1	equ	0xFE6
 12175                           postdec1	equ	0xFE5
 12176                           fsr1h	equ	0xFE2
 12177                           fsr1l	equ	0xFE1
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           plusw2	equ	0xFDB
 12182                           fsr2h	equ	0xFDA
 12183                           fsr2l	equ	0xFD9
 12184                           status	equ	0xFD8
 12185                           
 12186 ;; *************** function i2_printf *****************
 12187 ;; Defined at:
 12188 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12191 ;;		 -> STR_36(3), STR_35(349), STR_34(3), STR_32(3), 
 12192 ;;		 -> STR_31(28), STR_30(3), STR_27(4), STR_26(5), 
 12193 ;;		 -> STR_24(4), STR_23(5), STR_21(3), STR_20(19), 
 12194 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
 12195 ;;		 -> STR_15(3), STR_13(3), STR_12(14), STR_11(3), 
 12196 ;;		 -> STR_9(3), STR_8(18), STR_7(3), STR_5(3), 
 12197 ;;		 -> STR_4(365), STR_3(4), STR_2(5), STR_1(4), 
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;  printf          4    0        struct .
 12200 ;;  printf          3    0        PTR const unsigned char 
 12201 ;;  printf          2   19[COMRAM] unsigned int 
 12202 ;;  printf          2   15[COMRAM] PTR void [1]
 12203 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12204 ;;  printf          2    0        unsigned int 
 12205 ;;  printf          1   21[COMRAM] char 
 12206 ;;  printf          1   18[COMRAM] char 
 12207 ;;  printf          1   17[COMRAM] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  2   12[COMRAM] int 
 12210 ;; Registers used:
 12211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12218 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12220 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12221 ;;Total ram usage:       10 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    2
 12224 ;; This function calls:
 12225 ;;		i2___lwdiv
 12226 ;;		i2___lwmod
 12227 ;;		i2_putch
 12228 ;; This function is called by:
 12229 ;;		_EUSART2_Receive_ISR
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           	psect	text74
 12234  010CF4                     __ptext74:
 12235                           	opt stack 0
 12236  010CF4                     i2_printf:
 12237                           	opt stack 20
 12238                           
 12239                           ;doprnt.c: 466: va_list ap;
 12240                           ;doprnt.c: 499: signed char c;
 12241                           ;doprnt.c: 506: signed char prec;
 12242                           ;doprnt.c: 508: unsigned char flag;
 12243                           ;doprnt.c: 523: union {
 12244                           ;doprnt.c: 524: unsigned long vd;
 12245                           ;doprnt.c: 525: double integ;
 12246                           ;doprnt.c: 526: } tmpval;
 12247                           ;doprnt.c: 528: unsigned int val;
 12248                           ;doprnt.c: 529: unsigned len;
 12249                           ;doprnt.c: 530: const char * cp;
 12250                           ;doprnt.c: 533: *ap = __va_start();
 12251                           
 12252                           ; BSR set to: 14
 12253                           ;incstack = 0
 12254  010CF4  0E0F               	movlw	low (?i2_printf+2)
 12255  010CF6  6E10               	movwf	i2printf@ap,c
 12256  010CF8  0E00               	movlw	high (?i2_printf+2)
 12257  010CFA  6E11               	movwf	i2printf@ap+1,c
 12258                           
 12259                           ;doprnt.c: 536: while(c = *f++) {
 12260  010CFC  D085               	goto	i2u394_40
 12261  010CFE                     
 12262                           ;doprnt.c: 538: if(c != '%')
 12263  010CFE  0E25               	movlw	37
 12264  010D00  1816               	xorwf	i2printf@c,w,c
 12265  010D02  B4D8               	btfsc	status,2,c
 12266  010D04  D004               	goto	i2l974
 12267                           
 12268                           ;doprnt.c: 540: {
 12269                           ;doprnt.c: 541: (putch(c) );
 12270  010D06  5016               	movf	i2printf@c,w,c
 12271  010D08  EC31  F092         	call	i2_putch
 12272                           
 12273                           ;doprnt.c: 542: continue;
 12274  010D0C  D07D               	goto	i2u394_40
 12275  010D0E                     i2l974:
 12276                           
 12277                           ;doprnt.c: 543: }
 12278                           ;doprnt.c: 548: flag = 0;
 12279  010D0E  0E00               	movlw	0
 12280  010D10  6E12               	movwf	i2printf@flag,c
 12281                           
 12282                           ;doprnt.c: 822: }
 12283                           
 12284                           ;doprnt.c: 813: continue;
 12285                           
 12286                           ;doprnt.c: 802: default:
 12287                           
 12288                           ;doprnt.c: 698: case 'i':
 12289                           ;doprnt.c: 699: break;
 12290                           
 12291                           ;doprnt.c: 697: case 'd':
 12292                           
 12293                           ;doprnt.c: 638: goto alldone;
 12294                           
 12295                           ;doprnt.c: 637: case 0:
 12296                           
 12297                           ;doprnt.c: 635: switch(c = *f++) {
 12298  010D12  C00D  FFF6         	movff	i2printf@f,tblptrl
 12299  010D16  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12300  010D1A  4A0D               	infsnz	i2printf@f,f,c
 12301  010D1C  2A0E               	incf	i2printf@f+1,f,c
 12302  010D1E                     	if	0	;tblptru may be non-zero
 12303  010D1E                     	endif
 12304  010D1E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12305  010D1E  0E00               	movlw	low (__mediumconst shr (0+16))
 12306  010D20  6EF8               	movwf	tblptru,c
 12307  010D22                     	endif
 12308  010D22  0008               	tblrd		*
 12309  010D24  CFF5 F016          	movff	tablat,i2printf@c
 12310  010D28  5016               	movf	i2printf@c,w,c
 12311                           
 12312                           ; Switch size 1, requested type "space"
 12313                           ; Number of cases is 3, Range of values is 0 to 105
 12314                           ; switch strategies available:
 12315                           ; Name         Instructions Cycles
 12316                           ; simple_byte           10     6 (average)
 12317                           ;	Chosen strategy is simple_byte
 12318  010D2A  0A00               	xorlw	0	; case 0
 12319  010D2C  B4D8               	btfsc	status,2,c
 12320  010D2E  0012               	return	
 12321  010D30  0A64               	xorlw	100	; case 100
 12322  010D32  B4D8               	btfsc	status,2,c
 12323  010D34  D003               	goto	i2l980
 12324  010D36  0A0D               	xorlw	13	; case 105
 12325  010D38  A4D8               	btfss	status,2,c
 12326  010D3A  D066               	goto	i2u394_40
 12327  010D3C                     i2l980:
 12328                           
 12329                           ;doprnt.c: 1253: {
 12330                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12331  010D3C  C010  FFD9         	movff	i2printf@ap,fsr2l
 12332  010D40  C011  FFDA         	movff	i2printf@ap+1,fsr2h
 12333  010D44  CFDE F014          	movff	postinc2,i2printf@val
 12334  010D48  CFDD F015          	movff	postdec2,i2printf@val+1
 12335  010D4C  0E02               	movlw	2
 12336  010D4E  2610               	addwf	i2printf@ap,f,c
 12337  010D50  0E00               	movlw	0
 12338  010D52  2211               	addwfc	i2printf@ap+1,f,c
 12339                           
 12340                           ;doprnt.c: 1261: if((int)val < 0) {
 12341  010D54  AE15               	btfss	i2printf@val+1,7,c
 12342  010D56  D006               	goto	i2l982
 12343                           
 12344                           ;doprnt.c: 1262: flag |= 0x03;
 12345  010D58  0E03               	movlw	3
 12346  010D5A  1212               	iorwf	i2printf@flag,f,c
 12347                           
 12348                           ;doprnt.c: 1263: val = -val;
 12349  010D5C  6C14               	negf	i2printf@val,c
 12350  010D5E  1E15               	comf	i2printf@val+1,f,c
 12351  010D60  B0D8               	btfsc	status,0,c
 12352  010D62  2A15               	incf	i2printf@val+1,f,c
 12353  010D64                     i2l982:
 12354                           
 12355                           ;doprnt.c: 1264: }
 12356                           ;doprnt.c: 1266: }
 12357                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12358  010D64  0E01               	movlw	1
 12359  010D66  6E16               	movwf	i2printf@c,c
 12360  010D68                     i2l4051:
 12361  010D68  0E05               	movlw	5
 12362  010D6A  1816               	xorwf	i2printf@c,w,c
 12363  010D6C  B4D8               	btfsc	status,2,c
 12364  010D6E  D015               	goto	i2u392_40
 12365                           
 12366                           ;doprnt.c: 1306: if(val < dpowers[c])
 12367  010D70  5016               	movf	i2printf@c,w,c
 12368  010D72  0D02               	mullw	2
 12369  010D74  0ECB               	movlw	low _dpowers
 12370  010D76  24F3               	addwf	prodl,w,c
 12371  010D78  6EF6               	movwf	tblptrl,c
 12372  010D7A  0EFB               	movlw	high _dpowers
 12373  010D7C  20F4               	addwfc	prodh,w,c
 12374  010D7E  6EF7               	movwf	tblptrh,c
 12375  010D80                     	if	1	;There are 3 active tblptr bytes
 12376  010D80  6AF8               	clrf	tblptru,c
 12377  010D82  0E00               	movlw	low (__mediumconst shr (0+16))
 12378  010D84  22F8               	addwfc	tblptru,f,c
 12379  010D86                     	endif
 12380  010D86  0009               	tblrd		*+
 12381  010D88  50F5               	movf	tablat,w,c
 12382  010D8A  5C14               	subwf	i2printf@val,w,c
 12383  010D8C  0009               	tblrd		*+
 12384  010D8E  50F5               	movf	tablat,w,c
 12385  010D90  5815               	subwfb	i2printf@val+1,w,c
 12386  010D92  A0D8               	btfss	status,0,c
 12387  010D94  D002               	goto	i2u392_40
 12388                           
 12389                           ;doprnt.c: 1307: break;
 12390  010D96  2A16               	incf	i2printf@c,f,c
 12391  010D98  D7E7               	goto	i2l4051
 12392  010D9A                     i2u392_40:
 12393                           
 12394                           ;doprnt.c: 1422: {
 12395                           ;doprnt.c: 1438: if(flag & 0x03)
 12396  010D9A  C012  F00F         	movff	i2printf@flag,??i2_printf
 12397  010D9E  0E03               	movlw	3
 12398  010DA0  160F               	andwf	??i2_printf,f,c
 12399  010DA2  B4D8               	btfsc	status,2,c
 12400  010DA4  D003               	goto	i2l986
 12401                           
 12402                           ;doprnt.c: 1439: (putch('-') );
 12403  010DA6  0E2D               	movlw	45
 12404  010DA8  EC31  F092         	call	i2_putch
 12405  010DAC                     i2l986:
 12406                           
 12407                           ;doprnt.c: 1469: }
 12408                           ;doprnt.c: 1472: prec = c;
 12409  010DAC  C016  F013         	movff	i2printf@c,i2printf@prec
 12410                           
 12411                           ;doprnt.c: 1474: while(prec--) {
 12412  010DB0  D027               	goto	i2l987
 12413  010DB2                     
 12414                           ;doprnt.c: 1478: {
 12415                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12416  010DB2  5013               	movf	i2printf@prec,w,c
 12417  010DB4  0D02               	mullw	2
 12418  010DB6  0ECB               	movlw	low _dpowers
 12419  010DB8  24F3               	addwf	prodl,w,c
 12420  010DBA  6EF6               	movwf	tblptrl,c
 12421  010DBC  0EFB               	movlw	high _dpowers
 12422  010DBE  20F4               	addwfc	prodh,w,c
 12423  010DC0  6EF7               	movwf	tblptrh,c
 12424  010DC2                     	if	1	;There are 3 active tblptr bytes
 12425  010DC2  6AF8               	clrf	tblptru,c
 12426  010DC4  0E00               	movlw	low (__mediumconst shr (0+16))
 12427  010DC6  22F8               	addwfc	tblptru,f,c
 12428  010DC8                     	endif
 12429  010DC8  0009               	tblrd		*+
 12430  010DCA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12431  010DCE  000A               	tblrd		*-
 12432  010DD0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12433  010DD4  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12434  010DD8  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12435  010DDC  EC9E  F08D         	call	i2___lwdiv	;wreg free
 12436  010DE0  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12437  010DE4  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12438  010DE8  0E00               	movlw	0
 12439  010DEA  6E0B               	movwf	i2___lwmod@divisor+1,c
 12440  010DEC  0E0A               	movlw	10
 12441  010DEE  6E0A               	movwf	i2___lwmod@divisor,c
 12442  010DF0  EC82  F08E         	call	i2___lwmod	;wreg free
 12443  010DF4  5008               	movf	?i2___lwmod,w,c
 12444  010DF6  0F30               	addlw	48
 12445  010DF8  6E16               	movwf	i2printf@c,c
 12446                           
 12447                           ;doprnt.c: 1523: }
 12448                           ;doprnt.c: 1524: (putch(c) );
 12449  010DFA  5016               	movf	i2printf@c,w,c
 12450  010DFC  EC31  F092         	call	i2_putch
 12451  010E00                     i2l987:
 12452  010E00  0613               	decf	i2printf@prec,f,c
 12453  010E02  2813               	incf	i2printf@prec,w,c
 12454  010E04  A4D8               	btfss	status,2,c
 12455  010E06  D7D5               	goto	i2l988
 12456  010E08                     i2u394_40:
 12457  010E08  C00D  FFF6         	movff	i2printf@f,tblptrl
 12458  010E0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12459  010E10  4A0D               	infsnz	i2printf@f,f,c
 12460  010E12  2A0E               	incf	i2printf@f+1,f,c
 12461  010E14                     	if	0	;tblptru may be non-zero
 12462  010E14                     	endif
 12463  010E14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12464  010E14  0E00               	movlw	low (__mediumconst shr (0+16))
 12465  010E16  6EF8               	movwf	tblptru,c
 12466  010E18                     	endif
 12467  010E18  0008               	tblrd		*
 12468  010E1A  CFF5 F016          	movff	tablat,i2printf@c
 12469  010E1E  5016               	movf	i2printf@c,w,c
 12470  010E20  B4D8               	btfsc	status,2,c
 12471  010E22  0012               	return	
 12472  010E24  D76C               	goto	i2l973
 12473  010E26                     __end_ofi2_printf:
 12474                           	opt stack 0
 12475                           tosu	equ	0xFFF
 12476                           tosh	equ	0xFFE
 12477                           tosl	equ	0xFFD
 12478                           pclatu	equ	0xFFB
 12479                           pclath	equ	0xFFA
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           intcon	equ	0xFF2
 12487                           postinc0	equ	0xFEE
 12488                           fsr0h	equ	0xFEA
 12489                           fsr0l	equ	0xFE9
 12490                           wreg	equ	0xFE8
 12491                           indf1	equ	0xFE7
 12492                           postinc1	equ	0xFE6
 12493                           postdec1	equ	0xFE5
 12494                           fsr1h	equ	0xFE2
 12495                           fsr1l	equ	0xFE1
 12496                           indf2	equ	0xFDF
 12497                           postinc2	equ	0xFDE
 12498                           postdec2	equ	0xFDD
 12499                           plusw2	equ	0xFDB
 12500                           fsr2h	equ	0xFDA
 12501                           fsr2l	equ	0xFD9
 12502                           status	equ	0xFD8
 12503                           
 12504 ;; *************** function i2_putch *****************
 12505 ;; Defined at:
 12506 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  txData          1    wreg     unsigned char 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  txData          1    1[COMRAM] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  1    wreg      void 
 12513 ;; Registers used:
 12514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12523 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12524 ;;Total ram usage:        1 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    1
 12527 ;; This function calls:
 12528 ;;		i2_EUSART2_Write
 12529 ;; This function is called by:
 12530 ;;		i2_printf
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           	psect	text75
 12535  012462                     __ptext75:
 12536                           	opt stack 0
 12537  012462                     i2_putch:
 12538                           	opt stack 20
 12539                           
 12540                           ;incstack = 0
 12541                           ;i2putch@txData stored from wreg
 12542  012462  6E02               	movwf	i2putch@txData,c
 12543                           
 12544                           ;eusart2.c: 180: EUSART2_Write(txData);
 12545  012464  5002               	movf	i2putch@txData,w,c
 12546  012466  EC1E  F08F         	call	i2_EUSART2_Write
 12547  01246A  0012               	return		;funcret
 12548  01246C                     __end_ofi2_putch:
 12549                           	opt stack 0
 12550                           tosu	equ	0xFFF
 12551                           tosh	equ	0xFFE
 12552                           tosl	equ	0xFFD
 12553                           pclatu	equ	0xFFB
 12554                           pclath	equ	0xFFA
 12555                           tblptru	equ	0xFF8
 12556                           tblptrh	equ	0xFF7
 12557                           tblptrl	equ	0xFF6
 12558                           tablat	equ	0xFF5
 12559                           prodh	equ	0xFF4
 12560                           prodl	equ	0xFF3
 12561                           intcon	equ	0xFF2
 12562                           postinc0	equ	0xFEE
 12563                           fsr0h	equ	0xFEA
 12564                           fsr0l	equ	0xFE9
 12565                           wreg	equ	0xFE8
 12566                           indf1	equ	0xFE7
 12567                           postinc1	equ	0xFE6
 12568                           postdec1	equ	0xFE5
 12569                           fsr1h	equ	0xFE2
 12570                           fsr1l	equ	0xFE1
 12571                           indf2	equ	0xFDF
 12572                           postinc2	equ	0xFDE
 12573                           postdec2	equ	0xFDD
 12574                           plusw2	equ	0xFDB
 12575                           fsr2h	equ	0xFDA
 12576                           fsr2l	equ	0xFD9
 12577                           status	equ	0xFD8
 12578                           
 12579 ;; *************** function i2_EUSART2_Write *****************
 12580 ;; Defined at:
 12581 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  txData          1    wreg     unsigned char 
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;  txData          1    0[COMRAM] unsigned char 
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  1    wreg      void 
 12588 ;; Registers used:
 12589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12599 ;;Total ram usage:        1 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; This function calls:
 12602 ;;		Nothing
 12603 ;; This function is called by:
 12604 ;;		i2_putch
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           	psect	text76
 12609  011E3C                     __ptext76:
 12610                           	opt stack 0
 12611  011E3C                     i2_EUSART2_Write:
 12612                           	opt stack 20
 12613                           
 12614                           ;incstack = 0
 12615                           ;i2EUSART2_Write@txData stored from wreg
 12616  011E3C  6E01               	movwf	i2EUSART2_Write@txData,c
 12617  011E3E                     
 12618                           ;eusart2.c: 153: {
 12619                           
 12620                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 12621  011E3E  504E               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 12622  011E40  B4D8               	btfsc	status,2,c
 12623  011E42  D7FD               	goto	i2l3437
 12624                           
 12625                           ;eusart2.c: 154: }
 12626                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 12627  011E44  010E               	movlb	14	; () banked
 12628  011E46  BD2C               	btfsc	44,6,b	;volatile
 12629  011E48  D003               	goto	i2l197
 12630                           
 12631                           ; BSR set to: 14
 12632                           ;eusart2.c: 157: {
 12633                           ;eusart2.c: 158: TX2REG = txData;
 12634  011E4A  C001  FEF2         	movff	i2EUSART2_Write@txData,3826	;volatile
 12635                           
 12636                           ;eusart2.c: 159: }
 12637  011E4E  D012               	goto	i2l198
 12638  011E50                     i2l197:
 12639                           
 12640                           ; BSR set to: 14
 12641                           ;eusart2.c: 160: else
 12642                           ;eusart2.c: 161: {
 12643                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 12644  011E50  9D2C               	bcf	44,6,b	;volatile
 12645                           
 12646                           ; BSR set to: 14
 12647                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 12648  011E52  5041               	movf	_eusart2TxHead,w,c	;volatile
 12649  011E54  0D01               	mullw	1
 12650  011E56  0E00               	movlw	low _eusart2TxBuffer
 12651  011E58  24F3               	addwf	prodl,w,c
 12652  011E5A  6ED9               	movwf	fsr2l,c
 12653  011E5C  0E02               	movlw	high _eusart2TxBuffer
 12654  011E5E  20F4               	addwfc	prodh,w,c
 12655  011E60  6EDA               	movwf	fsr2h,c
 12656  011E62  C001  FFDF         	movff	i2EUSART2_Write@txData,indf2
 12657                           
 12658                           ; BSR set to: 14
 12659  011E66  2A41               	incf	_eusart2TxHead,f,c	;volatile
 12660                           
 12661                           ; BSR set to: 14
 12662                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 12663  011E68  0E3F               	movlw	63
 12664  011E6A  6441               	cpfsgt	_eusart2TxHead,c	;volatile
 12665  011E6C  D002               	goto	i2l199
 12666                           
 12667                           ; BSR set to: 14
 12668                           ;eusart2.c: 165: {
 12669                           ;eusart2.c: 166: eusart2TxHead = 0;
 12670  011E6E  0E00               	movlw	0
 12671  011E70  6E41               	movwf	_eusart2TxHead,c	;volatile
 12672  011E72                     i2l199:
 12673                           
 12674                           ; BSR set to: 14
 12675                           ;eusart2.c: 167: }
 12676                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 12677                           
 12678                           ; BSR set to: 14
 12679  011E72  064E               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 12680  011E74                     i2l198:
 12681                           
 12682                           ; BSR set to: 14
 12683                           ;eusart2.c: 169: }
 12684                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 12685                           
 12686                           ; BSR set to: 14
 12687  011E74  8D2C               	bsf	44,6,b	;volatile
 12688                           
 12689                           ; BSR set to: 14
 12690  011E76  0012               	return		;funcret
 12691  011E78                     __end_ofi2_EUSART2_Write:
 12692                           	opt stack 0
 12693                           tosu	equ	0xFFF
 12694                           tosh	equ	0xFFE
 12695                           tosl	equ	0xFFD
 12696                           pclatu	equ	0xFFB
 12697                           pclath	equ	0xFFA
 12698                           tblptru	equ	0xFF8
 12699                           tblptrh	equ	0xFF7
 12700                           tblptrl	equ	0xFF6
 12701                           tablat	equ	0xFF5
 12702                           prodh	equ	0xFF4
 12703                           prodl	equ	0xFF3
 12704                           intcon	equ	0xFF2
 12705                           postinc0	equ	0xFEE
 12706                           fsr0h	equ	0xFEA
 12707                           fsr0l	equ	0xFE9
 12708                           wreg	equ	0xFE8
 12709                           indf1	equ	0xFE7
 12710                           postinc1	equ	0xFE6
 12711                           postdec1	equ	0xFE5
 12712                           fsr1h	equ	0xFE2
 12713                           fsr1l	equ	0xFE1
 12714                           indf2	equ	0xFDF
 12715                           postinc2	equ	0xFDE
 12716                           postdec2	equ	0xFDD
 12717                           plusw2	equ	0xFDB
 12718                           fsr2h	equ	0xFDA
 12719                           fsr2l	equ	0xFD9
 12720                           status	equ	0xFD8
 12721                           
 12722 ;; *************** function i2___lwmod *****************
 12723 ;; Defined at:
 12724 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  dividend        2    7[COMRAM] unsigned int 
 12727 ;;  divisor         2    9[COMRAM] unsigned int 
 12728 ;; Auto vars:     Size  Location     Type
 12729 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12730 ;; Return value:  Size  Location     Type
 12731 ;;                  2    7[COMRAM] unsigned int 
 12732 ;; Registers used:
 12733 ;;		wreg, status,2, status,0
 12734 ;; Tracked objects:
 12735 ;;		On entry : 0/0
 12736 ;;		On exit  : 0/0
 12737 ;;		Unchanged: 0/0
 12738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12742 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12743 ;;Total ram usage:        5 bytes
 12744 ;; Hardware stack levels used:    1
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		i2_printf
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text77
 12753  011D04                     __ptext77:
 12754                           	opt stack 0
 12755  011D04                     i2___lwmod:
 12756                           	opt stack 21
 12757                           
 12758                           ; BSR set to: 14
 12759                           ;incstack = 0
 12760  011D04  500A               	movf	i2___lwmod@divisor,w,c
 12761  011D06  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12762  011D08  B4D8               	btfsc	status,2,c
 12763  011D0A  D018               	goto	i2l1414
 12764  011D0C  0E01               	movlw	1
 12765  011D0E  6E0C               	movwf	i2___lwmod@counter,c
 12766  011D10  D004               	goto	i2l1409
 12767  011D12  90D8               	bcf	status,0,c
 12768  011D14  360A               	rlcf	i2___lwmod@divisor,f,c
 12769  011D16  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12770  011D18  2A0C               	incf	i2___lwmod@counter,f,c
 12771  011D1A                     i2l1409:
 12772  011D1A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12773  011D1C  D7FA               	goto	i2l1410
 12774  011D1E                     i2u366_40:
 12775  011D1E  500A               	movf	i2___lwmod@divisor,w,c
 12776  011D20  5C08               	subwf	i2___lwmod@dividend,w,c
 12777  011D22  500B               	movf	i2___lwmod@divisor+1,w,c
 12778  011D24  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12779  011D26  A0D8               	btfss	status,0,c
 12780  011D28  D004               	goto	i2l1413
 12781  011D2A  500A               	movf	i2___lwmod@divisor,w,c
 12782  011D2C  5E08               	subwf	i2___lwmod@dividend,f,c
 12783  011D2E  500B               	movf	i2___lwmod@divisor+1,w,c
 12784  011D30  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12785  011D32                     i2l1413:
 12786  011D32  90D8               	bcf	status,0,c
 12787  011D34  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12788  011D36  320A               	rrcf	i2___lwmod@divisor,f,c
 12789  011D38  2E0C               	decfsz	i2___lwmod@counter,f,c
 12790  011D3A  D7F1               	goto	i2u366_40
 12791  011D3C                     i2l1414:
 12792  011D3C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12793  011D40  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12794  011D44  0012               	return		;funcret
 12795  011D46                     __end_ofi2___lwmod:
 12796                           	opt stack 0
 12797                           tosu	equ	0xFFF
 12798                           tosh	equ	0xFFE
 12799                           tosl	equ	0xFFD
 12800                           pclatu	equ	0xFFB
 12801                           pclath	equ	0xFFA
 12802                           tblptru	equ	0xFF8
 12803                           tblptrh	equ	0xFF7
 12804                           tblptrl	equ	0xFF6
 12805                           tablat	equ	0xFF5
 12806                           prodh	equ	0xFF4
 12807                           prodl	equ	0xFF3
 12808                           intcon	equ	0xFF2
 12809                           postinc0	equ	0xFEE
 12810                           fsr0h	equ	0xFEA
 12811                           fsr0l	equ	0xFE9
 12812                           wreg	equ	0xFE8
 12813                           indf1	equ	0xFE7
 12814                           postinc1	equ	0xFE6
 12815                           postdec1	equ	0xFE5
 12816                           fsr1h	equ	0xFE2
 12817                           fsr1l	equ	0xFE1
 12818                           indf2	equ	0xFDF
 12819                           postinc2	equ	0xFDE
 12820                           postdec2	equ	0xFDD
 12821                           plusw2	equ	0xFDB
 12822                           fsr2h	equ	0xFDA
 12823                           fsr2l	equ	0xFD9
 12824                           status	equ	0xFD8
 12825                           
 12826 ;; *************** function i2___lwdiv *****************
 12827 ;; Defined at:
 12828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  dividend        2    0[COMRAM] unsigned int 
 12831 ;;  divisor         2    2[COMRAM] unsigned int 
 12832 ;; Auto vars:     Size  Location     Type
 12833 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12834 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12835 ;; Return value:  Size  Location     Type
 12836 ;;                  2    0[COMRAM] unsigned int 
 12837 ;; Registers used:
 12838 ;;		wreg, status,2, status,0
 12839 ;; Tracked objects:
 12840 ;;		On entry : 0/0
 12841 ;;		On exit  : 0/0
 12842 ;;		Unchanged: 0/0
 12843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12845 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12848 ;;Total ram usage:        7 bytes
 12849 ;; Hardware stack levels used:    1
 12850 ;; This function calls:
 12851 ;;		Nothing
 12852 ;; This function is called by:
 12853 ;;		i2_printf
 12854 ;; This function uses a non-reentrant model
 12855 ;;
 12856                           
 12857                           	psect	text78
 12858  011B3C                     __ptext78:
 12859                           	opt stack 0
 12860  011B3C                     i2___lwdiv:
 12861                           	opt stack 21
 12862                           
 12863                           ;incstack = 0
 12864  011B3C  0E00               	movlw	0
 12865  011B3E  6E06               	movwf	i2___lwdiv@quotient+1,c
 12866  011B40  0E00               	movlw	0
 12867  011B42  6E05               	movwf	i2___lwdiv@quotient,c
 12868  011B44  5003               	movf	i2___lwdiv@divisor,w,c
 12869  011B46  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12870  011B48  B4D8               	btfsc	status,2,c
 12871  011B4A  D01C               	goto	i2l1404
 12872  011B4C  0E01               	movlw	1
 12873  011B4E  6E07               	movwf	i2___lwdiv@counter,c
 12874  011B50  D004               	goto	i2l1399
 12875  011B52  90D8               	bcf	status,0,c
 12876  011B54  3603               	rlcf	i2___lwdiv@divisor,f,c
 12877  011B56  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12878  011B58  2A07               	incf	i2___lwdiv@counter,f,c
 12879  011B5A                     i2l1399:
 12880  011B5A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12881  011B5C  D7FA               	goto	i2l1400
 12882  011B5E                     i2u363_40:
 12883  011B5E  90D8               	bcf	status,0,c
 12884  011B60  3605               	rlcf	i2___lwdiv@quotient,f,c
 12885  011B62  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12886  011B64  5003               	movf	i2___lwdiv@divisor,w,c
 12887  011B66  5C01               	subwf	i2___lwdiv@dividend,w,c
 12888  011B68  5004               	movf	i2___lwdiv@divisor+1,w,c
 12889  011B6A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12890  011B6C  A0D8               	btfss	status,0,c
 12891  011B6E  D005               	goto	i2l1403
 12892  011B70  5003               	movf	i2___lwdiv@divisor,w,c
 12893  011B72  5E01               	subwf	i2___lwdiv@dividend,f,c
 12894  011B74  5004               	movf	i2___lwdiv@divisor+1,w,c
 12895  011B76  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12896  011B78  8005               	bsf	i2___lwdiv@quotient,0,c
 12897  011B7A                     i2l1403:
 12898  011B7A  90D8               	bcf	status,0,c
 12899  011B7C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12900  011B7E  3203               	rrcf	i2___lwdiv@divisor,f,c
 12901  011B80  2E07               	decfsz	i2___lwdiv@counter,f,c
 12902  011B82  D7ED               	goto	i2u363_40
 12903  011B84                     i2l1404:
 12904  011B84  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12905  011B88  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12906  011B8C  0012               	return		;funcret
 12907  011B8E                     __end_ofi2___lwdiv:
 12908                           	opt stack 0
 12909                           tosu	equ	0xFFF
 12910                           tosh	equ	0xFFE
 12911                           tosl	equ	0xFFD
 12912                           pclatu	equ	0xFFB
 12913                           pclath	equ	0xFFA
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           postinc0	equ	0xFEE
 12922                           fsr0h	equ	0xFEA
 12923                           fsr0l	equ	0xFE9
 12924                           wreg	equ	0xFE8
 12925                           indf1	equ	0xFE7
 12926                           postinc1	equ	0xFE6
 12927                           postdec1	equ	0xFE5
 12928                           fsr1h	equ	0xFE2
 12929                           fsr1l	equ	0xFE1
 12930                           indf2	equ	0xFDF
 12931                           postinc2	equ	0xFDE
 12932                           postdec2	equ	0xFDD
 12933                           plusw2	equ	0xFDB
 12934                           fsr2h	equ	0xFDA
 12935                           fsr2l	equ	0xFD9
 12936                           status	equ	0xFD8
 12937                           
 12938 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 12939 ;; Defined at:
 12940 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;		None
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;		None
 12945 ;; Return value:  Size  Location     Type
 12946 ;;                  1    wreg      void 
 12947 ;; Registers used:
 12948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12949 ;; Tracked objects:
 12950 ;;		On entry : 0/0
 12951 ;;		On exit  : 0/0
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12958 ;;Total ram usage:        0 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:    3
 12961 ;; This function calls:
 12962 ;;		_MTOUCH_Sensor_Service
 12963 ;; This function is called by:
 12964 ;;		_INTERRUPT_InterruptManagerHigh
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           	psect	text79
 12969  01246C                     __ptext79:
 12970                           	opt stack 0
 12971  01246C                     _ADCC_ThresholdISR_mTouch:
 12972                           	opt stack 20
 12973                           
 12974                           ;mtouch_sensor.c: 478: PIR1bits.ADTIF = 0;
 12975                           
 12976                           ;incstack = 0
 12977  01246C  010E               	movlb	14	; () banked
 12978  01246E  9334               	bcf	52,1,b	;volatile
 12979                           
 12980                           ; BSR set to: 14
 12981                           ;mtouch_sensor.c: 479: MTOUCH_Sensor_Service();
 12982  012470  EC50  F08C         	call	_MTOUCH_Sensor_Service	;wreg free
 12983  012474  0012               	return		;funcret
 12984  012476                     __end_of_ADCC_ThresholdISR_mTouch:
 12985                           	opt stack 0
 12986                           tosu	equ	0xFFF
 12987                           tosh	equ	0xFFE
 12988                           tosl	equ	0xFFD
 12989                           pclatu	equ	0xFFB
 12990                           pclath	equ	0xFFA
 12991                           tblptru	equ	0xFF8
 12992                           tblptrh	equ	0xFF7
 12993                           tblptrl	equ	0xFF6
 12994                           tablat	equ	0xFF5
 12995                           prodh	equ	0xFF4
 12996                           prodl	equ	0xFF3
 12997                           intcon	equ	0xFF2
 12998                           postinc0	equ	0xFEE
 12999                           fsr0h	equ	0xFEA
 13000                           fsr0l	equ	0xFE9
 13001                           wreg	equ	0xFE8
 13002                           indf1	equ	0xFE7
 13003                           postinc1	equ	0xFE6
 13004                           postdec1	equ	0xFE5
 13005                           fsr1h	equ	0xFE2
 13006                           fsr1l	equ	0xFE1
 13007                           indf2	equ	0xFDF
 13008                           postinc2	equ	0xFDE
 13009                           postdec2	equ	0xFDD
 13010                           plusw2	equ	0xFDB
 13011                           fsr2h	equ	0xFDA
 13012                           fsr2l	equ	0xFD9
 13013                           status	equ	0xFD8
 13014                           
 13015 ;; *************** function _MTOUCH_Sensor_Service *****************
 13016 ;; Defined at:
 13017 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;		None
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  sensor          2   13[COMRAM] PTR struct .
 13022 ;;		 -> mtouch_sensor(45), 
 13023 ;; Return value:  Size  Location     Type
 13024 ;;                  1    wreg      void 
 13025 ;; Registers used:
 13026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13036 ;;Total ram usage:        2 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; Hardware stack levels required when called:    2
 13039 ;; This function calls:
 13040 ;;		_Sensor_autoCalibration
 13041 ;;		_Sensor_setSampled
 13042 ;;		i2_Sensor_SetTrisBit
 13043 ;;		i2_Sensor_isCalibrated
 13044 ;;		i2_Sensor_scheduleNextScan
 13045 ;; This function is called by:
 13046 ;;		_ADCC_ThresholdISR_mTouch
 13047 ;; This function uses a non-reentrant model
 13048 ;;
 13049                           
 13050                           	psect	text80
 13051  0118A0                     __ptext80:
 13052                           	opt stack 0
 13053  0118A0                     _MTOUCH_Sensor_Service:
 13054                           	opt stack 20
 13055                           
 13056                           ;mtouch_sensor.c: 490: mtouch_sensor_t* sensor;
 13057                           ;mtouch_sensor.c: 492: Sensor_SetTrisBit(currentScanSensor,0);
 13058                           
 13059                           ;incstack = 0
 13060  0118A0  0E00               	movlw	0
 13061  0118A2  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 13062  0118A4  503B               	movf	_currentScanSensor,w,c
 13063  0118A6  ECBB  F08C         	call	i2_Sensor_SetTrisBit
 13064                           
 13065                           ;mtouch_sensor.c: 494: if(scanInterrupted)
 13066  0118AA  5039               	movf	_scanInterrupted,w,c	;volatile
 13067  0118AC  B4D8               	btfsc	status,2,c
 13068  0118AE  D002               	goto	i2l621
 13069                           
 13070                           ;mtouch_sensor.c: 495: {
 13071                           ;mtouch_sensor.c: 496: ADCON0bits.ADON = 0;
 13072  0118B0  9E60               	bcf	3936,7,c	;volatile
 13073                           
 13074                           ;mtouch_sensor.c: 497: }
 13075  0118B2  D02B               	goto	i2l622
 13076  0118B4                     i2l621:
 13077                           
 13078                           ;mtouch_sensor.c: 498: else
 13079                           ;mtouch_sensor.c: 499: {
 13080                           ;mtouch_sensor.c: 500: ADCON0bits.ADON = 0;
 13081  0118B4  9E60               	bcf	3936,7,c	;volatile
 13082                           
 13083                           ;mtouch_sensor.c: 501: sensor = &mtouch_sensor[currentScanSensor];
 13084  0118B6  503B               	movf	_currentScanSensor,w,c
 13085  0118B8  0D09               	mullw	9
 13086  0118BA  0E83               	movlw	low _mtouch_sensor
 13087  0118BC  24F3               	addwf	prodl,w,c
 13088  0118BE  6E0E               	movwf	MTOUCH_Sensor_Service@sensor,c
 13089  0118C0  0E00               	movlw	high _mtouch_sensor
 13090  0118C2  20F4               	addwfc	prodh,w,c
 13091  0118C4  6E0F               	movwf	MTOUCH_Sensor_Service@sensor+1,c
 13092                           
 13093                           ;mtouch_sensor.c: 502: if(!Sensor_isCalibrated(sensor))
 13094  0118C6  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 13095  0118CA  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,i2Sensor_isCalibrated@sensor+1
 13096  0118CE  ECC7  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13097  0118D2  0900               	iorlw	0
 13098  0118D4  A4D8               	btfss	status,2,c
 13099  0118D6  D007               	goto	i2l623
 13100                           
 13101                           ;mtouch_sensor.c: 503: {
 13102                           ;mtouch_sensor.c: 504: Sensor_autoCalibration(sensor);
 13103  0118D8  C00E  F005         	movff	MTOUCH_Sensor_Service@sensor,Sensor_autoCalibration@sensor
 13104  0118DC  C00F  F006         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_autoCalibration@sensor+1
 13105  0118E0  ECE0  F085         	call	_Sensor_autoCalibration	;wreg free
 13106                           
 13107                           ;mtouch_sensor.c: 505: }
 13108  0118E4  D006               	goto	i2l624
 13109  0118E6                     i2l623:
 13110                           
 13111                           ;mtouch_sensor.c: 506: else
 13112                           ;mtouch_sensor.c: 507: {
 13113                           ;mtouch_sensor.c: 508: Sensor_setSampled(sensor);
 13114  0118E6  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 13115  0118EA  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_setSampled@sensor+1
 13116  0118EE  EC03  F092         	call	_Sensor_setSampled	;wreg free
 13117  0118F2                     i2l624:
 13118                           
 13119                           ;mtouch_sensor.c: 509: }
 13120                           ;mtouch_sensor.c: 510: packet_sample[currentScanSensor] = ADFLTR;
 13121  0118F2  503B               	movf	_currentScanSensor,w,c
 13122  0118F4  0D02               	mullw	2
 13123  0118F6  0E29               	movlw	low _packet_sample
 13124  0118F8  24F3               	addwf	prodl,w,c
 13125  0118FA  6ED9               	movwf	fsr2l,c
 13126  0118FC  0E00               	movlw	high _packet_sample
 13127  0118FE  20F4               	addwfc	prodh,w,c
 13128  011900  6EDA               	movwf	fsr2h,c
 13129  011902  CF72 FFDE          	movff	3954,postinc2	;volatile
 13130  011906  CF73 FFDD          	movff	3955,postdec2	;volatile
 13131  01190A                     i2l622:
 13132                           
 13133                           ;mtouch_sensor.c: 511: }
 13134                           ;mtouch_sensor.c: 512: Sensor_scheduleNextScan();
 13135  01190A  EC9A  F084         	call	i2_Sensor_scheduleNextScan	;wreg free
 13136  01190E  0012               	return		;funcret
 13137  011910                     __end_of_MTOUCH_Sensor_Service:
 13138                           	opt stack 0
 13139                           tosu	equ	0xFFF
 13140                           tosh	equ	0xFFE
 13141                           tosl	equ	0xFFD
 13142                           pclatu	equ	0xFFB
 13143                           pclath	equ	0xFFA
 13144                           tblptru	equ	0xFF8
 13145                           tblptrh	equ	0xFF7
 13146                           tblptrl	equ	0xFF6
 13147                           tablat	equ	0xFF5
 13148                           prodh	equ	0xFF4
 13149                           prodl	equ	0xFF3
 13150                           intcon	equ	0xFF2
 13151                           postinc0	equ	0xFEE
 13152                           fsr0h	equ	0xFEA
 13153                           fsr0l	equ	0xFE9
 13154                           wreg	equ	0xFE8
 13155                           indf1	equ	0xFE7
 13156                           postinc1	equ	0xFE6
 13157                           postdec1	equ	0xFE5
 13158                           fsr1h	equ	0xFE2
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           plusw2	equ	0xFDB
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function i2_Sensor_scheduleNextScan *****************
 13169 ;; Defined at:
 13170 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;  Sensor_sched    2    6[COMRAM] PTR struct .
 13175 ;;		 -> mtouch_sensor(45), 
 13176 ;;  Sensor_sched    1    5[COMRAM] unsigned char 
 13177 ;;  Sensor_sched    1    4[COMRAM] unsigned char 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      void 
 13180 ;; Registers used:
 13181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13188 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13190 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13191 ;;Total ram usage:        6 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; Hardware stack levels required when called:    1
 13194 ;; This function calls:
 13195 ;;		i2_MTOUCH_Sensor_isEnabled
 13196 ;;		i2_MTOUCH_Sensor_wasSampled
 13197 ;;		i2_Sensor_SetTrisBit
 13198 ;;		i2_Sensor_isCalibrated
 13199 ;;		i2_Sensor_isCalibratingAcqTime
 13200 ;; This function is called by:
 13201 ;;		_MTOUCH_Sensor_Service
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           	psect	text81
 13206  010934                     __ptext81:
 13207                           	opt stack 0
 13208  010934                     i2_Sensor_scheduleNextScan:
 13209                           	opt stack 20
 13210                           
 13211                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
 13212                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
 13213                           
 13214                           ;incstack = 0
 13215  010934  0E00               	movlw	0
 13216  010936  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13217                           
 13218                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
 13219  010938  0E00               	movlw	0
 13220  01093A  BEF2               	btfsc	intcon,7,c	;volatile
 13221  01093C  0E01               	movlw	1
 13222  01093E  6E05               	movwf	i2Sensor_scheduleNextScan@state,c
 13223                           
 13224                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 13225  010940  D00C               	goto	i2l586
 13226  010942                     
 13227                           ;mtouch_sensor.c: 347: {
 13228                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
 13229  010942  2A3B               	incf	_currentScanSensor,f,c
 13230  010944  0E05               	movlw	5
 13231  010946  183B               	xorwf	_currentScanSensor,w,c
 13232  010948  A4D8               	btfss	status,2,c
 13233  01094A  D007               	goto	i2l586
 13234                           
 13235                           ;mtouch_sensor.c: 349: {
 13236                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
 13237  01094C  0E00               	movlw	0
 13238  01094E  6E3B               	movwf	_currentScanSensor,c
 13239                           
 13240                           ;mtouch_sensor.c: 351: sampling_flag = 0;
 13241  010950  0E00               	movlw	0
 13242  010952  6E3A               	movwf	_sampling_flag,c
 13243                           
 13244                           ;mtouch_sensor.c: 352: skipScan = 1;
 13245  010954  0E01               	movlw	1
 13246  010956  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 13247                           
 13248                           ;mtouch_sensor.c: 353: break;
 13249  010958  D00C               	goto	i2u355_40
 13250  01095A                     i2l586:
 13251  01095A  503B               	movf	_currentScanSensor,w,c
 13252  01095C  EC30  F090         	call	i2_MTOUCH_Sensor_wasSampled
 13253  010960  0900               	iorlw	0
 13254  010962  A4D8               	btfss	status,2,c
 13255  010964  D7EE               	goto	i2l585
 13256  010966  503B               	movf	_currentScanSensor,w,c
 13257  010968  EC49  F090         	call	i2_MTOUCH_Sensor_isEnabled
 13258  01096C  0900               	iorlw	0
 13259  01096E  B4D8               	btfsc	status,2,c
 13260  010970  D7E8               	goto	i2l585
 13261  010972                     i2u355_40:
 13262                           
 13263                           ;mtouch_sensor.c: 354: }
 13264                           ;mtouch_sensor.c: 355: }
 13265                           ;mtouch_sensor.c: 358: if(skipScan==0)
 13266  010972  5006               	movf	i2Sensor_scheduleNextScan@skipScan,w,c
 13267  010974  A4D8               	btfss	status,2,c
 13268  010976  0012               	return	
 13269                           
 13270                           ;mtouch_sensor.c: 359: {
 13271                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
 13272  010978  503B               	movf	_currentScanSensor,w,c
 13273  01097A  0D09               	mullw	9
 13274  01097C  0E83               	movlw	low _mtouch_sensor
 13275  01097E  24F3               	addwf	prodl,w,c
 13276  010980  6E07               	movwf	i2Sensor_scheduleNextScan@sensor,c
 13277  010982  0E00               	movlw	high _mtouch_sensor
 13278  010984  20F4               	addwfc	prodh,w,c
 13279  010986  6E08               	movwf	i2Sensor_scheduleNextScan@sensor+1,c
 13280                           
 13281                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
 13282  010988  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 13283  01098C  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibrated@sensor+1
 13284  010990  ECC7  F091         	call	i2_Sensor_isCalibrated	;wreg free
 13285  010994  0900               	iorlw	0
 13286  010996  B4D8               	btfsc	status,2,c
 13287  010998  D012               	goto	i2l589
 13288                           
 13289                           ;mtouch_sensor.c: 362: {
 13290                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
 13291  01099A  EE20 F003          	lfsr	2,3
 13292  01099E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13293  0109A0  26D9               	addwf	fsr2l,f,c
 13294  0109A2  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13295  0109A4  22DA               	addwfc	fsr2h,f,c
 13296  0109A6  50DF               	movf	indf2,w,c
 13297  0109A8  010F               	movlb	15	; () banked
 13298  0109AA  6F5C               	movwf	92,b	;volatile
 13299                           
 13300                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
 13301  0109AC  EE20 F002          	lfsr	2,2
 13302  0109B0  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13303  0109B2  26D9               	addwf	fsr2l,f,c
 13304  0109B4  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13305  0109B6  22DA               	addwfc	fsr2h,f,c
 13306  0109B8  50DF               	movf	indf2,w,c
 13307  0109BA  6F5E               	movwf	94,b	;volatile
 13308                           
 13309                           ;mtouch_sensor.c: 365: }
 13310  0109BC  D01F               	goto	i2l592
 13311  0109BE                     i2l589:
 13312                           
 13313                           ;mtouch_sensor.c: 366: else
 13314                           ;mtouch_sensor.c: 367: {
 13315                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
 13316                           
 13317                           ; BSR set to: 15
 13318  0109BE  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 13319  0109C2  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 13320  0109C6  ECD3  F091         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 13321  0109CA  0900               	iorlw	0
 13322  0109CC  B4D8               	btfsc	status,2,c
 13323  0109CE  D011               	goto	i2l591
 13324                           
 13325                           ;mtouch_sensor.c: 369: {
 13326                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
 13327  0109D0  EE20 F002          	lfsr	2,2
 13328  0109D4  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13329  0109D6  26D9               	addwf	fsr2l,f,c
 13330  0109D8  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13331  0109DA  22DA               	addwfc	fsr2h,f,c
 13332  0109DC  50DF               	movf	indf2,w,c
 13333  0109DE  010F               	movlb	15	; () banked
 13334  0109E0  6F5E               	movwf	94,b	;volatile
 13335                           
 13336                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
 13337  0109E2  EE20 F003          	lfsr	2,3
 13338  0109E6  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13339  0109E8  26D9               	addwf	fsr2l,f,c
 13340  0109EA  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13341  0109EC  22DA               	addwfc	fsr2h,f,c
 13342  0109EE  50DF               	movf	indf2,w,c
 13343  0109F0  D004               	goto	L5
 13344  0109F2                     i2l591:
 13345                           
 13346                           ;mtouch_sensor.c: 373: else
 13347                           ;mtouch_sensor.c: 374: {
 13348                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13349                           
 13350                           ; BSR set to: 15
 13351  0109F2  0E80               	movlw	128
 13352  0109F4  010F               	movlb	15	; () banked
 13353  0109F6  6F5E               	movwf	94,b	;volatile
 13354                           
 13355                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 13356  0109F8  0E80               	movlw	128
 13357  0109FA                     L5:
 13358  0109FA  6F5C               	movwf	92,b	;volatile
 13359  0109FC                     i2l592:
 13360                           
 13361                           ; BSR set to: 15
 13362                           ;mtouch_sensor.c: 377: }
 13363                           ;mtouch_sensor.c: 378: }
 13364                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
 13365                           
 13366                           ; BSR set to: 15
 13367                           
 13368                           ; BSR set to: 15
 13369  0109FC  5038               	movf	_sample_delay,w,c
 13370  0109FE  275E               	addwf	94,f,b	;volatile
 13371                           
 13372                           ; BSR set to: 15
 13373                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
 13374  010A00  EE20 F001          	lfsr	2,1
 13375  010A04  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13376  010A06  26D9               	addwf	fsr2l,f,c
 13377  010A08  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13378  010A0A  22DA               	addwfc	fsr2h,f,c
 13379  010A0C  50DF               	movf	indf2,w,c
 13380  010A0E  6F5F               	movwf	95,b	;volatile
 13381                           
 13382                           ; BSR set to: 15
 13383                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
 13384  010A10  EE20 F004          	lfsr	2,4
 13385  010A14  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13386  010A16  26D9               	addwf	fsr2l,f,c
 13387  010A18  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13388  010A1A  22DA               	addwfc	fsr2h,f,c
 13389  010A1C  50DF               	movf	indf2,w,c
 13390  010A1E  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13391  010A20  90D8               	bcf	status,0,c
 13392  010A22  3003               	rrcf	??i2_Sensor_scheduleNextScan,w,c
 13393  010A24  6E66               	movwf	3942,c	;volatile
 13394                           
 13395                           ; BSR set to: 15
 13396                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
 13397  010A26  EE20 F005          	lfsr	2,5
 13398  010A2A  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13399  010A2C  26D9               	addwf	fsr2l,f,c
 13400  010A2E  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13401  010A30  22DA               	addwfc	fsr2h,f,c
 13402  010A32  50DF               	movf	indf2,w,c
 13403  010A34  6F5D               	movwf	93,b	;volatile
 13404                           
 13405                           ; BSR set to: 15
 13406                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
 13407  010A36  8E60               	bsf	3936,7,c	;volatile
 13408                           
 13409                           ; BSR set to: 15
 13410                           ;mtouch_sensor.c: 385: sampling_flag= 1;
 13411  010A38  0E01               	movlw	1
 13412  010A3A  6E3A               	movwf	_sampling_flag,c
 13413                           
 13414                           ; BSR set to: 15
 13415                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
 13416  010A3C  0E01               	movlw	1
 13417  010A3E  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 13418  010A40  503B               	movf	_currentScanSensor,w,c
 13419  010A42  ECBB  F08C         	call	i2_Sensor_SetTrisBit
 13420                           
 13421                           ;mtouch_sensor.c: 387: GIE = 0;
 13422  010A46  9EF2               	bcf	intcon,7,c	;volatile
 13423                           
 13424                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
 13425  010A48  8060               	bsf	3936,0,c	;volatile
 13426                           
 13427                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 13428  010A4A  EE20 F004          	lfsr	2,4
 13429  010A4E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 13430  010A50  26D9               	addwf	fsr2l,f,c
 13431  010A52  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 13432  010A54  22DA               	addwfc	fsr2h,f,c
 13433  010A56  50DF               	movf	indf2,w,c
 13434  010A58  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 13435  010A5A  6A04               	clrf	(??i2_Sensor_scheduleNextScan+1)& (0+255),c
 13436  010A5C  0E09               	movlw	9
 13437  010A5E                     i2u359_45:
 13438  010A5E  90D8               	bcf	status,0,c
 13439  010A60  3603               	rlcf	??i2_Sensor_scheduleNextScan,f,c
 13440  010A62  3604               	rlcf	??i2_Sensor_scheduleNextScan+1,f,c
 13441  010A64  2EE8               	decfsz	wreg,f,c
 13442  010A66  D7FB               	goto	i2u359_45
 13443  010A68  C003  FF70         	movff	??i2_Sensor_scheduleNextScan,3952	;volatile
 13444  010A6C  C004  FF71         	movff	??i2_Sensor_scheduleNextScan+1,3953	;volatile
 13445                           
 13446                           ;mtouch_sensor.c: 390: GIE = state;
 13447  010A70  A005               	btfss	i2Sensor_scheduleNextScan@state,0,c
 13448  010A72  D002               	goto	i2u360_40
 13449  010A74  8EF2               	bsf	intcon,7,c	;volatile
 13450  010A76  D001               	goto	i2u361_45
 13451  010A78                     i2u360_40:
 13452  010A78  9EF2               	bcf	intcon,7,c	;volatile
 13453  010A7A                     i2u361_45:
 13454                           
 13455                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
 13456  010A7A  0E00               	movlw	0
 13457  010A7C  6E39               	movwf	_scanInterrupted,c	;volatile
 13458  010A7E  0012               	return	
 13459  010A80                     __end_ofi2_Sensor_scheduleNextScan:
 13460                           	opt stack 0
 13461                           tosu	equ	0xFFF
 13462                           tosh	equ	0xFFE
 13463                           tosl	equ	0xFFD
 13464                           pclatu	equ	0xFFB
 13465                           pclath	equ	0xFFA
 13466                           tblptru	equ	0xFF8
 13467                           tblptrh	equ	0xFF7
 13468                           tblptrl	equ	0xFF6
 13469                           tablat	equ	0xFF5
 13470                           prodh	equ	0xFF4
 13471                           prodl	equ	0xFF3
 13472                           intcon	equ	0xFF2
 13473                           postinc0	equ	0xFEE
 13474                           fsr0h	equ	0xFEA
 13475                           fsr0l	equ	0xFE9
 13476                           wreg	equ	0xFE8
 13477                           indf1	equ	0xFE7
 13478                           postinc1	equ	0xFE6
 13479                           postdec1	equ	0xFE5
 13480                           fsr1h	equ	0xFE2
 13481                           fsr1l	equ	0xFE1
 13482                           indf2	equ	0xFDF
 13483                           postinc2	equ	0xFDE
 13484                           postdec2	equ	0xFDD
 13485                           plusw2	equ	0xFDB
 13486                           fsr2h	equ	0xFDA
 13487                           fsr2l	equ	0xFD9
 13488                           status	equ	0xFD8
 13489                           
 13490 ;; *************** function i2_Sensor_isCalibrated *****************
 13491 ;; Defined at:
 13492 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  sensor          2    0[COMRAM] PTR struct .
 13495 ;;		 -> mtouch_sensor(45), 
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;		None
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      unsigned char 
 13500 ;; Registers used:
 13501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13502 ;; Tracked objects:
 13503 ;;		On entry : 0/0
 13504 ;;		On exit  : 0/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13511 ;;Total ram usage:        2 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; This function calls:
 13514 ;;		Nothing
 13515 ;; This function is called by:
 13516 ;;		_MTOUCH_Sensor_Service
 13517 ;;		i2_Sensor_scheduleNextScan
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text82
 13522  01238E                     __ptext82:
 13523                           	opt stack 0
 13524  01238E                     i2_Sensor_isCalibrated:
 13525                           	opt stack 20
 13526                           
 13527                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
 13528                           
 13529                           ;incstack = 0
 13530  01238E  EE20 F008          	lfsr	2,8
 13531  012392  5001               	movf	i2Sensor_isCalibrated@sensor,w,c
 13532  012394  26D9               	addwf	fsr2l,f,c
 13533  012396  5002               	movf	i2Sensor_isCalibrated@sensor+1,w,c
 13534  012398  22DA               	addwfc	fsr2h,f,c
 13535  01239A  A6DF               	btfss	indf2,3,c
 13536  01239C  D002               	goto	i2u306_40
 13537  01239E  0E01               	movlw	1
 13538  0123A0  0012               	return	
 13539  0123A2                     i2u306_40:
 13540  0123A2  0E00               	movlw	0
 13541  0123A4  0012               	return	
 13542  0123A6                     __end_ofi2_Sensor_isCalibrated:
 13543                           	opt stack 0
 13544                           tosu	equ	0xFFF
 13545                           tosh	equ	0xFFE
 13546                           tosl	equ	0xFFD
 13547                           pclatu	equ	0xFFB
 13548                           pclath	equ	0xFFA
 13549                           tblptru	equ	0xFF8
 13550                           tblptrh	equ	0xFF7
 13551                           tblptrl	equ	0xFF6
 13552                           tablat	equ	0xFF5
 13553                           prodh	equ	0xFF4
 13554                           prodl	equ	0xFF3
 13555                           intcon	equ	0xFF2
 13556                           postinc0	equ	0xFEE
 13557                           fsr0h	equ	0xFEA
 13558                           fsr0l	equ	0xFE9
 13559                           wreg	equ	0xFE8
 13560                           indf1	equ	0xFE7
 13561                           postinc1	equ	0xFE6
 13562                           postdec1	equ	0xFE5
 13563                           fsr1h	equ	0xFE2
 13564                           fsr1l	equ	0xFE1
 13565                           indf2	equ	0xFDF
 13566                           postinc2	equ	0xFDE
 13567                           postdec2	equ	0xFDD
 13568                           plusw2	equ	0xFDB
 13569                           fsr2h	equ	0xFDA
 13570                           fsr2l	equ	0xFD9
 13571                           status	equ	0xFD8
 13572                           
 13573 ;; *************** function i2_Sensor_SetTrisBit *****************
 13574 ;; Defined at:
 13575 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;  sensor          1    wreg     enum E17513
 13578 ;;  TrisBit         1    0[COMRAM] unsigned char 
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;  sensor          1    1[COMRAM] enum E17513
 13581 ;; Return value:  Size  Location     Type
 13582 ;;                  1    wreg      void 
 13583 ;; Registers used:
 13584 ;;		wreg, status,2, status,0
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13590 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13594 ;;Total ram usage:        2 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; This function calls:
 13597 ;;		Nothing
 13598 ;; This function is called by:
 13599 ;;		_MTOUCH_Sensor_Service
 13600 ;;		i2_Sensor_scheduleNextScan
 13601 ;; This function uses a non-reentrant model
 13602 ;;
 13603                           
 13604                           	psect	text83
 13605  011976                     __ptext83:
 13606                           	opt stack 0
 13607  011976                     i2_Sensor_SetTrisBit:
 13608                           	opt stack 20
 13609                           
 13610                           ;incstack = 0
 13611                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 13612  011976  6E02               	movwf	i2Sensor_SetTrisBit@sensor,c
 13613                           
 13614                           ;mtouch_sensor.c: 224: switch(sensor)
 13615  011978  D01E               	goto	i2l555
 13616  01197A                     i2l556:
 13617                           
 13618                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
 13619  01197A  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13620  01197C  D002               	bra	i2u299_45
 13621  01197E  9485               	bcf	3973,2,c	;volatile
 13622  011980  D001               	bra	i2u299_46
 13623  011982                     i2u299_45:
 13624  011982  8485               	bsf	3973,2,c	;volatile
 13625  011984                     i2u299_46:
 13626                           
 13627                           ;mtouch_sensor.c: 228: break;
 13628  011984  0012               	return	
 13629  011986                     i2l558:
 13630                           
 13631                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
 13632  011986  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13633  011988  D002               	bra	i2u300_45
 13634  01198A  9685               	bcf	3973,3,c	;volatile
 13635  01198C  D001               	bra	i2u300_46
 13636  01198E                     i2u300_45:
 13637  01198E  8685               	bsf	3973,3,c	;volatile
 13638  011990                     i2u300_46:
 13639                           
 13640                           ;mtouch_sensor.c: 231: break;
 13641  011990  0012               	return	
 13642  011992                     i2l559:
 13643                           
 13644                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
 13645  011992  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13646  011994  D002               	bra	i2u301_45
 13647  011996  9885               	bcf	3973,4,c	;volatile
 13648  011998  D001               	bra	i2u301_46
 13649  01199A                     i2u301_45:
 13650  01199A  8885               	bsf	3973,4,c	;volatile
 13651  01199C                     i2u301_46:
 13652                           
 13653                           ;mtouch_sensor.c: 234: break;
 13654  01199C  0012               	return	
 13655  01199E                     i2l560:
 13656                           
 13657                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
 13658  01199E  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13659  0119A0  D002               	bra	i2u302_45
 13660  0119A2  9A85               	bcf	3973,5,c	;volatile
 13661  0119A4  D001               	bra	i2u302_46
 13662  0119A6                     i2u302_45:
 13663  0119A6  8A85               	bsf	3973,5,c	;volatile
 13664  0119A8                     i2u302_46:
 13665                           
 13666                           ;mtouch_sensor.c: 237: break;
 13667  0119A8  0012               	return	
 13668  0119AA                     i2l561:
 13669                           
 13670                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
 13671  0119AA  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 13672  0119AC  D002               	bra	i2u303_45
 13673  0119AE  9C85               	bcf	3973,6,c	;volatile
 13674  0119B0  D001               	bra	i2u303_46
 13675  0119B2                     i2u303_45:
 13676  0119B2  8C85               	bsf	3973,6,c	;volatile
 13677  0119B4                     i2u303_46:
 13678                           
 13679                           ;mtouch_sensor.c: 242: }
 13680                           
 13681                           ;mtouch_sensor.c: 241: default: break;
 13682                           
 13683                           ;mtouch_sensor.c: 240: break;
 13684  0119B4  0012               	return	
 13685  0119B6                     i2l555:
 13686  0119B6  5002               	movf	i2Sensor_SetTrisBit@sensor,w,c
 13687                           
 13688                           ; Switch size 1, requested type "space"
 13689                           ; Number of cases is 5, Range of values is 0 to 4
 13690                           ; switch strategies available:
 13691                           ; Name         Instructions Cycles
 13692                           ; simple_byte           16     9 (average)
 13693                           ;	Chosen strategy is simple_byte
 13694  0119B8  0A00               	xorlw	0	; case 0
 13695  0119BA  B4D8               	btfsc	status,2,c
 13696  0119BC  D7DE               	goto	i2l556
 13697  0119BE  0A01               	xorlw	1	; case 1
 13698  0119C0  B4D8               	btfsc	status,2,c
 13699  0119C2  D7E1               	goto	i2l558
 13700  0119C4  0A03               	xorlw	3	; case 2
 13701  0119C6  B4D8               	btfsc	status,2,c
 13702  0119C8  D7E4               	goto	i2l559
 13703  0119CA  0A01               	xorlw	1	; case 3
 13704  0119CC  B4D8               	btfsc	status,2,c
 13705  0119CE  D7E7               	goto	i2l560
 13706  0119D0  0A07               	xorlw	7	; case 4
 13707  0119D2  A4D8               	btfss	status,2,c
 13708  0119D4  0012               	return	
 13709  0119D6  D7E9               	goto	i2l561
 13710  0119D8                     __end_ofi2_Sensor_SetTrisBit:
 13711                           	opt stack 0
 13712                           tosu	equ	0xFFF
 13713                           tosh	equ	0xFFE
 13714                           tosl	equ	0xFFD
 13715                           pclatu	equ	0xFFB
 13716                           pclath	equ	0xFFA
 13717                           tblptru	equ	0xFF8
 13718                           tblptrh	equ	0xFF7
 13719                           tblptrl	equ	0xFF6
 13720                           tablat	equ	0xFF5
 13721                           prodh	equ	0xFF4
 13722                           prodl	equ	0xFF3
 13723                           intcon	equ	0xFF2
 13724                           postinc0	equ	0xFEE
 13725                           fsr0h	equ	0xFEA
 13726                           fsr0l	equ	0xFE9
 13727                           wreg	equ	0xFE8
 13728                           indf1	equ	0xFE7
 13729                           postinc1	equ	0xFE6
 13730                           postdec1	equ	0xFE5
 13731                           fsr1h	equ	0xFE2
 13732                           fsr1l	equ	0xFE1
 13733                           indf2	equ	0xFDF
 13734                           postinc2	equ	0xFDE
 13735                           postdec2	equ	0xFDD
 13736                           plusw2	equ	0xFDB
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 13742 ;; Defined at:
 13743 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  sensor          1    wreg     enum E17513
 13746 ;; Auto vars:     Size  Location     Type
 13747 ;;  sensor          1    0[COMRAM] enum E17513
 13748 ;; Return value:  Size  Location     Type
 13749 ;;                  1    wreg      unsigned char 
 13750 ;; Registers used:
 13751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13752 ;; Tracked objects:
 13753 ;;		On entry : 0/0
 13754 ;;		On exit  : 0/0
 13755 ;;		Unchanged: 0/0
 13756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13761 ;;Total ram usage:        1 bytes
 13762 ;; Hardware stack levels used:    1
 13763 ;; This function calls:
 13764 ;;		Nothing
 13765 ;; This function is called by:
 13766 ;;		i2_Sensor_scheduleNextScan
 13767 ;; This function uses a non-reentrant model
 13768 ;;
 13769                           
 13770                           	psect	text84
 13771  012060                     __ptext84:
 13772                           	opt stack 0
 13773  012060                     i2_MTOUCH_Sensor_wasSampled:
 13774                           	opt stack 20
 13775                           
 13776                           ;incstack = 0
 13777                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 13778  012060  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor,c
 13779                           
 13780                           ;mtouch_sensor.c: 822: if(sensor < 5)
 13781  012062  0E05               	movlw	5
 13782  012064  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor,c
 13783  012066  D013               	goto	i2l749
 13784                           
 13785                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
 13786  012068  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor,w,c
 13787  01206A  0D09               	mullw	9
 13788  01206C  0E08               	movlw	8
 13789  01206E  26F3               	addwf	prodl,f,c
 13790  012070  0E00               	movlw	0
 13791  012072  22F4               	addwfc	prodh,f,c
 13792  012074  0E83               	movlw	low _mtouch_sensor
 13793  012076  24F3               	addwf	prodl,w,c
 13794  012078  6ED9               	movwf	fsr2l,c
 13795  01207A  0E00               	movlw	high _mtouch_sensor
 13796  01207C  20F4               	addwfc	prodh,w,c
 13797  01207E  6EDA               	movwf	fsr2h,c
 13798  012080  0100               	movlb	0	; () banked
 13799  012082  A2DF               	btfss	indf2,1,c
 13800  012084  D002               	goto	i2u309_40
 13801  012086  0E01               	movlw	1
 13802  012088  0012               	return	
 13803  01208A                     i2u309_40:
 13804  01208A  0E00               	movlw	0
 13805                           
 13806                           ; BSR set to: 0
 13807                           
 13808                           ; BSR set to: 0
 13809  01208C  0012               	return	
 13810  01208E                     i2l749:
 13811                           
 13812                           ;mtouch_sensor.c: 824: else
 13813                           ;mtouch_sensor.c: 825: return 0;
 13814                           
 13815                           ; BSR set to: 0
 13816  01208E  0E00               	movlw	0
 13817  012090  0012               	return	
 13818  012092                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 13819                           	opt stack 0
 13820                           tosu	equ	0xFFF
 13821                           tosh	equ	0xFFE
 13822                           tosl	equ	0xFFD
 13823                           pclatu	equ	0xFFB
 13824                           pclath	equ	0xFFA
 13825                           tblptru	equ	0xFF8
 13826                           tblptrh	equ	0xFF7
 13827                           tblptrl	equ	0xFF6
 13828                           tablat	equ	0xFF5
 13829                           prodh	equ	0xFF4
 13830                           prodl	equ	0xFF3
 13831                           intcon	equ	0xFF2
 13832                           postinc0	equ	0xFEE
 13833                           fsr0h	equ	0xFEA
 13834                           fsr0l	equ	0xFE9
 13835                           wreg	equ	0xFE8
 13836                           indf1	equ	0xFE7
 13837                           postinc1	equ	0xFE6
 13838                           postdec1	equ	0xFE5
 13839                           fsr1h	equ	0xFE2
 13840                           fsr1l	equ	0xFE1
 13841                           indf2	equ	0xFDF
 13842                           postinc2	equ	0xFDE
 13843                           postdec2	equ	0xFDD
 13844                           plusw2	equ	0xFDB
 13845                           fsr2h	equ	0xFDA
 13846                           fsr2l	equ	0xFD9
 13847                           status	equ	0xFD8
 13848                           
 13849 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 13850 ;; Defined at:
 13851 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;  sensor          1    wreg     enum E17513
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;  sensor          1    0[COMRAM] enum E17513
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  1    wreg      unsigned char 
 13858 ;; Registers used:
 13859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13869 ;;Total ram usage:        1 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; This function calls:
 13872 ;;		Nothing
 13873 ;; This function is called by:
 13874 ;;		i2_Sensor_scheduleNextScan
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           	psect	text85
 13879  012092                     __ptext85:
 13880                           	opt stack 0
 13881  012092                     i2_MTOUCH_Sensor_isEnabled:
 13882                           	opt stack 20
 13883                           
 13884                           ;incstack = 0
 13885                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 13886  012092  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor,c
 13887                           
 13888                           ;mtouch_sensor.c: 719: if(sensor < 5)
 13889  012094  0E05               	movlw	5
 13890  012096  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor,c
 13891  012098  D013               	goto	i2l703
 13892                           
 13893                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
 13894  01209A  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor,w,c
 13895  01209C  0D09               	mullw	9
 13896  01209E  0E08               	movlw	8
 13897  0120A0  26F3               	addwf	prodl,f,c
 13898  0120A2  0E00               	movlw	0
 13899  0120A4  22F4               	addwfc	prodh,f,c
 13900  0120A6  0E83               	movlw	low _mtouch_sensor
 13901  0120A8  24F3               	addwf	prodl,w,c
 13902  0120AA  6ED9               	movwf	fsr2l,c
 13903  0120AC  0E00               	movlw	high _mtouch_sensor
 13904  0120AE  20F4               	addwfc	prodh,w,c
 13905  0120B0  6EDA               	movwf	fsr2h,c
 13906  0120B2  0100               	movlb	0	; () banked
 13907  0120B4  A0DF               	btfss	indf2,0,c
 13908  0120B6  D002               	goto	i2u305_40
 13909  0120B8  0E01               	movlw	1
 13910  0120BA  0012               	return	
 13911  0120BC                     i2u305_40:
 13912  0120BC  0E00               	movlw	0
 13913                           
 13914                           ; BSR set to: 0
 13915                           
 13916                           ; BSR set to: 0
 13917  0120BE  0012               	return	
 13918  0120C0                     i2l703:
 13919                           
 13920                           ;mtouch_sensor.c: 721: else
 13921                           ;mtouch_sensor.c: 722: return 0;
 13922                           
 13923                           ; BSR set to: 0
 13924  0120C0  0E00               	movlw	0
 13925  0120C2  0012               	return	
 13926  0120C4                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 13927                           	opt stack 0
 13928                           tosu	equ	0xFFF
 13929                           tosh	equ	0xFFE
 13930                           tosl	equ	0xFFD
 13931                           pclatu	equ	0xFFB
 13932                           pclath	equ	0xFFA
 13933                           tblptru	equ	0xFF8
 13934                           tblptrh	equ	0xFF7
 13935                           tblptrl	equ	0xFF6
 13936                           tablat	equ	0xFF5
 13937                           prodh	equ	0xFF4
 13938                           prodl	equ	0xFF3
 13939                           intcon	equ	0xFF2
 13940                           postinc0	equ	0xFEE
 13941                           fsr0h	equ	0xFEA
 13942                           fsr0l	equ	0xFE9
 13943                           wreg	equ	0xFE8
 13944                           indf1	equ	0xFE7
 13945                           postinc1	equ	0xFE6
 13946                           postdec1	equ	0xFE5
 13947                           fsr1h	equ	0xFE2
 13948                           fsr1l	equ	0xFE1
 13949                           indf2	equ	0xFDF
 13950                           postinc2	equ	0xFDE
 13951                           postdec2	equ	0xFDD
 13952                           plusw2	equ	0xFDB
 13953                           fsr2h	equ	0xFDA
 13954                           fsr2l	equ	0xFD9
 13955                           status	equ	0xFD8
 13956                           
 13957 ;; *************** function _Sensor_setSampled *****************
 13958 ;; Defined at:
 13959 ;;		line 833 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;  sensor          2    0[COMRAM] PTR struct .
 13962 ;;		 -> mtouch_sensor(45), 
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;		None
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  1    wreg      void 
 13967 ;; Registers used:
 13968 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13978 ;;Total ram usage:        2 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; This function calls:
 13981 ;;		Nothing
 13982 ;; This function is called by:
 13983 ;;		_MTOUCH_Sensor_Service
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           	psect	text86
 13988  012406                     __ptext86:
 13989                           	opt stack 0
 13990  012406                     _Sensor_setSampled:
 13991                           	opt stack 21
 13992                           
 13993                           ;mtouch_sensor.c: 835: sensor->sampled = 1;
 13994                           
 13995                           ;incstack = 0
 13996  012406  EE20 F008          	lfsr	2,8
 13997  01240A  5001               	movf	Sensor_setSampled@sensor,w,c
 13998  01240C  26D9               	addwf	fsr2l,f,c
 13999  01240E  5002               	movf	Sensor_setSampled@sensor+1,w,c
 14000  012410  22DA               	addwfc	fsr2h,f,c
 14001  012412  82DF               	bsf	indf2,1,c
 14002  012414  0012               	return		;funcret
 14003  012416                     __end_of_Sensor_setSampled:
 14004                           	opt stack 0
 14005                           tosu	equ	0xFFF
 14006                           tosh	equ	0xFFE
 14007                           tosl	equ	0xFFD
 14008                           pclatu	equ	0xFFB
 14009                           pclath	equ	0xFFA
 14010                           tblptru	equ	0xFF8
 14011                           tblptrh	equ	0xFF7
 14012                           tblptrl	equ	0xFF6
 14013                           tablat	equ	0xFF5
 14014                           prodh	equ	0xFF4
 14015                           prodl	equ	0xFF3
 14016                           intcon	equ	0xFF2
 14017                           postinc0	equ	0xFEE
 14018                           fsr0h	equ	0xFEA
 14019                           fsr0l	equ	0xFE9
 14020                           wreg	equ	0xFE8
 14021                           indf1	equ	0xFE7
 14022                           postinc1	equ	0xFE6
 14023                           postdec1	equ	0xFE5
 14024                           fsr1h	equ	0xFE2
 14025                           fsr1l	equ	0xFE1
 14026                           indf2	equ	0xFDF
 14027                           postinc2	equ	0xFDE
 14028                           postdec2	equ	0xFDD
 14029                           plusw2	equ	0xFDB
 14030                           fsr2h	equ	0xFDA
 14031                           fsr2l	equ	0xFD9
 14032                           status	equ	0xFD8
 14033                           
 14034 ;; *************** function _Sensor_autoCalibration *****************
 14035 ;; Defined at:
 14036 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  sensor          2    4[COMRAM] PTR struct .
 14039 ;;		 -> mtouch_sensor(45), 
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;  name            1   12[COMRAM] enum E17513
 14042 ;; Return value:  Size  Location     Type
 14043 ;;                  1    wreg      enum E17519
 14044 ;; Registers used:
 14045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14053 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14054 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14055 ;;Total ram usage:        9 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; Hardware stack levels required when called:    1
 14058 ;; This function calls:
 14059 ;;		_Sensor_setCalibratAcqTime
 14060 ;;		_Sensor_setCalibrated
 14061 ;;		i2_Sensor_isCalibratingAcqTime
 14062 ;;		i2_abs
 14063 ;; This function is called by:
 14064 ;;		_MTOUCH_Sensor_Service
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           	psect	text87
 14069  010BC0                     __ptext87:
 14070                           	opt stack 0
 14071  010BC0                     _Sensor_autoCalibration:
 14072                           	opt stack 20
 14073                           
 14074                           ;mtouch_sensor.c: 404: enum mtouch_sensor_names name = sensor->sensor_name;
 14075                           
 14076                           ;incstack = 0
 14077  010BC0  C005  FFD9         	movff	Sensor_autoCalibration@sensor,fsr2l
 14078  010BC4  C006  FFDA         	movff	Sensor_autoCalibration@sensor+1,fsr2h
 14079  010BC8  50DF               	movf	indf2,w,c
 14080  010BCA  6E0D               	movwf	Sensor_autoCalibration@name,c
 14081                           
 14082                           ;mtouch_sensor.c: 406: if(!Sensor_isCalibratingAcqTime(sensor))
 14083  010BCC  C005  F001         	movff	Sensor_autoCalibration@sensor,i2Sensor_isCalibratingAcqTime@sensor
 14084  010BD0  C006  F002         	movff	Sensor_autoCalibration@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 14085  010BD4  ECD3  F091         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 14086  010BD8  0900               	iorlw	0
 14087  010BDA  A4D8               	btfss	status,2,c
 14088  010BDC  D02D               	goto	i2l596
 14089                           
 14090                           ;mtouch_sensor.c: 407: {
 14091                           ;mtouch_sensor.c: 408: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 14092  010BDE  EE20 F004          	lfsr	2,4
 14093  010BE2  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14094  010BE4  26D9               	addwf	fsr2l,f,c
 14095  010BE6  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14096  010BE8  22DA               	addwfc	fsr2h,f,c
 14097  010BEA  50DF               	movf	indf2,w,c
 14098  010BEC  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14099  010BEE  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14100  010BF0  0E09               	movlw	9
 14101  010BF2                     i2u344_45:
 14102  010BF2  90D8               	bcf	status,0,c
 14103  010BF4  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14104  010BF6  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14105  010BF8  2EE8               	decfsz	wreg,f,c
 14106  010BFA  D7FB               	goto	i2u344_45
 14107  010BFC  5072               	movf	3954,w,c	;volatile
 14108  010BFE  5C07               	subwf	??_Sensor_autoCalibration,w,c
 14109  010C00  5073               	movf	3955,w,c	;volatile
 14110  010C02  5808               	subwfb	??_Sensor_autoCalibration+1,w,c
 14111  010C04  B0D8               	btfsc	status,0,c
 14112  010C06  D011               	goto	i2l597
 14113                           
 14114                           ;mtouch_sensor.c: 409: {
 14115                           ;mtouch_sensor.c: 410: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 14116  010C08  EE20 F005          	lfsr	2,5
 14117  010C0C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14118  010C0E  26D9               	addwf	fsr2l,f,c
 14119  010C10  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14120  010C12  22DA               	addwfc	fsr2h,f,c
 14121  010C14  2ADF               	incf	indf2,f,c
 14122  010C16  0E1E               	movlw	30
 14123  010C18  64DF               	cpfsgt	indf2,c
 14124  010C1A  0012               	return	
 14125                           
 14126                           ;mtouch_sensor.c: 411: Sensor_setCalibratAcqTime(sensor);
 14127  010C1C  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14128  010C20  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14129  010C24  EC7A  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14130                           
 14131                           ;mtouch_sensor.c: 412: }
 14132  010C28  0012               	return	
 14133  010C2A                     i2l597:
 14134                           
 14135                           ;mtouch_sensor.c: 413: else
 14136                           ;mtouch_sensor.c: 414: {
 14137                           ;mtouch_sensor.c: 415: Sensor_setCalibratAcqTime(sensor);
 14138  010C2A  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 14139  010C2E  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 14140  010C32  EC7A  F090         	call	_Sensor_setCalibratAcqTime	;wreg free
 14141                           
 14142                           ;mtouch_sensor.c: 416: }
 14143                           ;mtouch_sensor.c: 417: }
 14144  010C36  0012               	return	
 14145  010C38                     i2l596:
 14146                           
 14147                           ;mtouch_sensor.c: 418: else
 14148                           ;mtouch_sensor.c: 419: {
 14149                           ;mtouch_sensor.c: 420: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 14150  010C38  EE20 F004          	lfsr	2,4
 14151  010C3C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14152  010C3E  26D9               	addwf	fsr2l,f,c
 14153  010C40  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14154  010C42  22DA               	addwfc	fsr2h,f,c
 14155  010C44  50DF               	movf	indf2,w,c
 14156  010C46  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 14157  010C48  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 14158  010C4A  90D8               	bcf	status,0,c
 14159  010C4C  3607               	rlcf	??_Sensor_autoCalibration,f,c
 14160  010C4E  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 14161  010C50  500D               	movf	Sensor_autoCalibration@name,w,c
 14162  010C52  0D02               	mullw	2
 14163  010C54  0E29               	movlw	low _packet_sample
 14164  010C56  24F3               	addwf	prodl,w,c
 14165  010C58  6ED9               	movwf	fsr2l,c
 14166  010C5A  0E00               	movlw	high _packet_sample
 14167  010C5C  20F4               	addwfc	prodh,w,c
 14168  010C5E  6EDA               	movwf	fsr2h,c
 14169  010C60  CFDE F009          	movff	postinc2,??_Sensor_autoCalibration+2
 14170  010C64  CFDD F00A          	movff	postdec2,??_Sensor_autoCalibration+3
 14171  010C68  CF72 F00B          	movff	3954,??_Sensor_autoCalibration+4	;volatile
 14172  010C6C  CF73 F00C          	movff	3955,??_Sensor_autoCalibration+5	;volatile
 14173  010C70  1E0B               	comf	??_Sensor_autoCalibration+4,f,c
 14174  010C72  1E0C               	comf	??_Sensor_autoCalibration+5,f,c
 14175  010C74  4A0B               	infsnz	??_Sensor_autoCalibration+4,f,c
 14176  010C76  2A0C               	incf	??_Sensor_autoCalibration+5,f,c
 14177  010C78  5009               	movf	??_Sensor_autoCalibration+2,w,c
 14178  010C7A  240B               	addwf	??_Sensor_autoCalibration+4,w,c
 14179  010C7C  6E01               	movwf	i2abs@a,c
 14180  010C7E  500A               	movf	??_Sensor_autoCalibration+3,w,c
 14181  010C80  200C               	addwfc	??_Sensor_autoCalibration+5,w,c
 14182  010C82  6E02               	movwf	i2abs@a+1,c
 14183  010C84  EC0D  F091         	call	i2_abs	;wreg free
 14184  010C88  5007               	movf	??_Sensor_autoCalibration,w,c
 14185  010C8A  5C01               	subwf	?i2_abs,w,c
 14186  010C8C  5008               	movf	??_Sensor_autoCalibration+1,w,c
 14187  010C8E  5802               	subwfb	?i2_abs+1,w,c
 14188  010C90  B0D8               	btfsc	status,0,c
 14189  010C92  D00F               	goto	i2l601
 14190                           
 14191                           ;mtouch_sensor.c: 421: {
 14192                           ;mtouch_sensor.c: 422: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14193  010C94  EE20 F002          	lfsr	2,2
 14194  010C98  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14195  010C9A  26D9               	addwf	fsr2l,f,c
 14196  010C9C  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14197  010C9E  22DA               	addwfc	fsr2h,f,c
 14198  010CA0  0E80               	movlw	128
 14199  010CA2  6EDF               	movwf	indf2,c
 14200                           
 14201                           ;mtouch_sensor.c: 423: Sensor_setCalibrated(sensor);
 14202  010CA4  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14203  010CA8  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14204  010CAC  EC6A  F091         	call	_Sensor_setCalibrated	;wreg free
 14205                           
 14206                           ;mtouch_sensor.c: 424: }
 14207  010CB0  0012               	return	
 14208  010CB2                     i2l601:
 14209                           
 14210                           ;mtouch_sensor.c: 425: else
 14211                           ;mtouch_sensor.c: 426: {
 14212                           ;mtouch_sensor.c: 428: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)3)) - ((mtouch_sensor_time_t)1 << (u
      +                          int8_t)3)))
 14213  010CB2  EE20 F003          	lfsr	2,3
 14214  010CB6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14215  010CB8  26D9               	addwf	fsr2l,f,c
 14216  010CBA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14217  010CBC  22DA               	addwfc	fsr2h,f,c
 14218  010CBE  0E77               	movlw	119
 14219  010CC0  64DF               	cpfsgt	indf2,c
 14220  010CC2  D00F               	goto	i2l603
 14221                           
 14222                           ;mtouch_sensor.c: 429: {
 14223                           ;mtouch_sensor.c: 430: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14224  010CC4  EE20 F002          	lfsr	2,2
 14225  010CC8  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14226  010CCA  26D9               	addwf	fsr2l,f,c
 14227  010CCC  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14228  010CCE  22DA               	addwfc	fsr2h,f,c
 14229  010CD0  0E80               	movlw	128
 14230  010CD2  6EDF               	movwf	indf2,c
 14231                           
 14232                           ;mtouch_sensor.c: 431: Sensor_setCalibrated(sensor);
 14233  010CD4  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 14234  010CD8  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 14235  010CDC  EC6A  F091         	call	_Sensor_setCalibrated	;wreg free
 14236                           
 14237                           ;mtouch_sensor.c: 432: }
 14238  010CE0  0012               	return	
 14239  010CE2                     i2l603:
 14240                           
 14241                           ;mtouch_sensor.c: 433: else
 14242                           ;mtouch_sensor.c: 434: {
 14243                           ;mtouch_sensor.c: 435: sensor->acquisition_time += ((mtouch_sensor_time_t)1 << (uint8_t)
      +                          3);
 14244  010CE2  EE20 F003          	lfsr	2,3
 14245  010CE6  5005               	movf	Sensor_autoCalibration@sensor,w,c
 14246  010CE8  26D9               	addwf	fsr2l,f,c
 14247  010CEA  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 14248  010CEC  22DA               	addwfc	fsr2h,f,c
 14249  010CEE  0E08               	movlw	8
 14250  010CF0  26DF               	addwf	indf2,f,c
 14251  010CF2  0012               	return	
 14252  010CF4                     __end_of_Sensor_autoCalibration:
 14253                           	opt stack 0
 14254                           tosu	equ	0xFFF
 14255                           tosh	equ	0xFFE
 14256                           tosl	equ	0xFFD
 14257                           pclatu	equ	0xFFB
 14258                           pclath	equ	0xFFA
 14259                           tblptru	equ	0xFF8
 14260                           tblptrh	equ	0xFF7
 14261                           tblptrl	equ	0xFF6
 14262                           tablat	equ	0xFF5
 14263                           prodh	equ	0xFF4
 14264                           prodl	equ	0xFF3
 14265                           intcon	equ	0xFF2
 14266                           postinc0	equ	0xFEE
 14267                           fsr0h	equ	0xFEA
 14268                           fsr0l	equ	0xFE9
 14269                           wreg	equ	0xFE8
 14270                           indf1	equ	0xFE7
 14271                           postinc1	equ	0xFE6
 14272                           postdec1	equ	0xFE5
 14273                           fsr1h	equ	0xFE2
 14274                           fsr1l	equ	0xFE1
 14275                           indf2	equ	0xFDF
 14276                           postinc2	equ	0xFDE
 14277                           postdec2	equ	0xFDD
 14278                           plusw2	equ	0xFDB
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function i2_abs *****************
 14284 ;; Defined at:
 14285 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  a               2    0[COMRAM] int 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;		None
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  2    0[COMRAM] int 
 14292 ;; Registers used:
 14293 ;;		wreg, status,2, status,0
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14301 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14302 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14303 ;;Total ram usage:        4 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; This function calls:
 14306 ;;		Nothing
 14307 ;; This function is called by:
 14308 ;;		_Sensor_autoCalibration
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           	psect	text88
 14313  01221A                     __ptext88:
 14314                           	opt stack 0
 14315  01221A                     i2_abs:
 14316                           	opt stack 20
 14317                           
 14318                           ;incstack = 0
 14319  01221A  AE02               	btfss	i2abs@a+1,7,c
 14320  01221C  D00D               	goto	i2l1041
 14321  01221E  C001  F003         	movff	i2abs@a,??i2_abs
 14322  012222  C002  F004         	movff	i2abs@a+1,??i2_abs+1
 14323  012226  1E03               	comf	??i2_abs,f,c
 14324  012228  1E04               	comf	??i2_abs+1,f,c
 14325  01222A  4A03               	infsnz	??i2_abs,f,c
 14326  01222C  2A04               	incf	??i2_abs+1,f,c
 14327  01222E  C003  F001         	movff	??i2_abs,?i2_abs
 14328  012232  C004  F002         	movff	??i2_abs+1,?i2_abs+1
 14329  012236  0012               	return	
 14330  012238                     i2l1041:
 14331  012238  C001  F001         	movff	i2abs@a,?i2_abs
 14332  01223C  C002  F002         	movff	i2abs@a+1,?i2_abs+1
 14333  012240  0012               	return		;funcret
 14334  012242                     __end_ofi2_abs:
 14335                           	opt stack 0
 14336                           tosu	equ	0xFFF
 14337                           tosh	equ	0xFFE
 14338                           tosl	equ	0xFFD
 14339                           pclatu	equ	0xFFB
 14340                           pclath	equ	0xFFA
 14341                           tblptru	equ	0xFF8
 14342                           tblptrh	equ	0xFF7
 14343                           tblptrl	equ	0xFF6
 14344                           tablat	equ	0xFF5
 14345                           prodh	equ	0xFF4
 14346                           prodl	equ	0xFF3
 14347                           intcon	equ	0xFF2
 14348                           postinc0	equ	0xFEE
 14349                           fsr0h	equ	0xFEA
 14350                           fsr0l	equ	0xFE9
 14351                           wreg	equ	0xFE8
 14352                           indf1	equ	0xFE7
 14353                           postinc1	equ	0xFE6
 14354                           postdec1	equ	0xFE5
 14355                           fsr1h	equ	0xFE2
 14356                           fsr1l	equ	0xFE1
 14357                           indf2	equ	0xFDF
 14358                           postinc2	equ	0xFDE
 14359                           postdec2	equ	0xFDD
 14360                           plusw2	equ	0xFDB
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 14366 ;; Defined at:
 14367 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  sensor          2    0[COMRAM] PTR struct .
 14370 ;;		 -> mtouch_sensor(45), 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;		None
 14373 ;; Return value:  Size  Location     Type
 14374 ;;                  1    wreg      unsigned char 
 14375 ;; Registers used:
 14376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14385 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14386 ;;Total ram usage:        2 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; This function calls:
 14389 ;;		Nothing
 14390 ;; This function is called by:
 14391 ;;		_Sensor_autoCalibration
 14392 ;;		i2_Sensor_scheduleNextScan
 14393 ;; This function uses a non-reentrant model
 14394 ;;
 14395                           
 14396                           	psect	text89
 14397  0123A6                     __ptext89:
 14398                           	opt stack 0
 14399  0123A6                     i2_Sensor_isCalibratingAcqTime:
 14400                           	opt stack 20
 14401                           
 14402                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
 14403                           
 14404                           ;incstack = 0
 14405  0123A6  EE20 F008          	lfsr	2,8
 14406  0123AA  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor,w,c
 14407  0123AC  26D9               	addwf	fsr2l,f,c
 14408  0123AE  5002               	movf	i2Sensor_isCalibratingAcqTime@sensor+1,w,c
 14409  0123B0  22DA               	addwfc	fsr2h,f,c
 14410  0123B2  A8DF               	btfss	indf2,4,c
 14411  0123B4  D002               	goto	i2u307_40
 14412  0123B6  0E01               	movlw	1
 14413  0123B8  0012               	return	
 14414  0123BA                     i2u307_40:
 14415  0123BA  0E00               	movlw	0
 14416  0123BC  0012               	return	
 14417  0123BE                     __end_ofi2_Sensor_isCalibratingAcqTime:
 14418                           	opt stack 0
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclatu	equ	0xFFB
 14423                           pclath	equ	0xFFA
 14424                           tblptru	equ	0xFF8
 14425                           tblptrh	equ	0xFF7
 14426                           tblptrl	equ	0xFF6
 14427                           tablat	equ	0xFF5
 14428                           prodh	equ	0xFF4
 14429                           prodl	equ	0xFF3
 14430                           intcon	equ	0xFF2
 14431                           postinc0	equ	0xFEE
 14432                           fsr0h	equ	0xFEA
 14433                           fsr0l	equ	0xFE9
 14434                           wreg	equ	0xFE8
 14435                           indf1	equ	0xFE7
 14436                           postinc1	equ	0xFE6
 14437                           postdec1	equ	0xFE5
 14438                           fsr1h	equ	0xFE2
 14439                           fsr1l	equ	0xFE1
 14440                           indf2	equ	0xFDF
 14441                           postinc2	equ	0xFDE
 14442                           postdec2	equ	0xFDD
 14443                           plusw2	equ	0xFDB
 14444                           fsr2h	equ	0xFDA
 14445                           fsr2l	equ	0xFD9
 14446                           status	equ	0xFD8
 14447                           
 14448 ;; *************** function _Sensor_setCalibrated *****************
 14449 ;; Defined at:
 14450 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;  sensor          2    0[COMRAM] PTR struct .
 14453 ;;		 -> mtouch_sensor(45), 
 14454 ;; Auto vars:     Size  Location     Type
 14455 ;;		None
 14456 ;; Return value:  Size  Location     Type
 14457 ;;                  1    wreg      void 
 14458 ;; Registers used:
 14459 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14460 ;; Tracked objects:
 14461 ;;		On entry : 0/0
 14462 ;;		On exit  : 0/0
 14463 ;;		Unchanged: 0/0
 14464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14469 ;;Total ram usage:        2 bytes
 14470 ;; Hardware stack levels used:    1
 14471 ;; This function calls:
 14472 ;;		Nothing
 14473 ;; This function is called by:
 14474 ;;		_Sensor_autoCalibration
 14475 ;; This function uses a non-reentrant model
 14476 ;;
 14477                           
 14478                           	psect	text90
 14479  0122D4                     __ptext90:
 14480                           	opt stack 0
 14481  0122D4                     _Sensor_setCalibrated:
 14482                           	opt stack 20
 14483                           
 14484                           ;mtouch_sensor.c: 787: sensor->calibrated = 1;
 14485                           
 14486                           ;incstack = 0
 14487  0122D4  EE20 F008          	lfsr	2,8
 14488  0122D8  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14489  0122DA  26D9               	addwf	fsr2l,f,c
 14490  0122DC  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14491  0122DE  22DA               	addwfc	fsr2h,f,c
 14492  0122E0  86DF               	bsf	indf2,3,c
 14493                           
 14494                           ;mtouch_sensor.c: 788: sensor->acqTime_cal = 0;
 14495  0122E2  EE20 F008          	lfsr	2,8
 14496  0122E6  5001               	movf	Sensor_setCalibrated@sensor,w,c
 14497  0122E8  26D9               	addwf	fsr2l,f,c
 14498  0122EA  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 14499  0122EC  22DA               	addwfc	fsr2h,f,c
 14500  0122EE  98DF               	bcf	indf2,4,c
 14501  0122F0  0012               	return		;funcret
 14502  0122F2                     __end_of_Sensor_setCalibrated:
 14503                           	opt stack 0
 14504                           tosu	equ	0xFFF
 14505                           tosh	equ	0xFFE
 14506                           tosl	equ	0xFFD
 14507                           pclatu	equ	0xFFB
 14508                           pclath	equ	0xFFA
 14509                           tblptru	equ	0xFF8
 14510                           tblptrh	equ	0xFF7
 14511                           tblptrl	equ	0xFF6
 14512                           tablat	equ	0xFF5
 14513                           prodh	equ	0xFF4
 14514                           prodl	equ	0xFF3
 14515                           intcon	equ	0xFF2
 14516                           postinc0	equ	0xFEE
 14517                           fsr0h	equ	0xFEA
 14518                           fsr0l	equ	0xFE9
 14519                           wreg	equ	0xFE8
 14520                           indf1	equ	0xFE7
 14521                           postinc1	equ	0xFE6
 14522                           postdec1	equ	0xFE5
 14523                           fsr1h	equ	0xFE2
 14524                           fsr1l	equ	0xFE1
 14525                           indf2	equ	0xFDF
 14526                           postinc2	equ	0xFDE
 14527                           postdec2	equ	0xFDD
 14528                           plusw2	equ	0xFDB
 14529                           fsr2h	equ	0xFDA
 14530                           fsr2l	equ	0xFD9
 14531                           status	equ	0xFD8
 14532                           
 14533 ;; *************** function _Sensor_setCalibratAcqTime *****************
 14534 ;; Defined at:
 14535 ;;		line 791 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;  sensor          2    0[COMRAM] PTR struct .
 14538 ;;		 -> mtouch_sensor(45), 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;		None
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14554 ;;Total ram usage:        2 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; This function calls:
 14557 ;;		Nothing
 14558 ;; This function is called by:
 14559 ;;		_Sensor_autoCalibration
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           	psect	text91
 14564  0120F4                     __ptext91:
 14565                           	opt stack 0
 14566  0120F4                     _Sensor_setCalibratAcqTime:
 14567                           	opt stack 20
 14568                           
 14569                           ;mtouch_sensor.c: 793: sensor->acqTime_cal = 1;
 14570                           
 14571                           ;incstack = 0
 14572  0120F4  EE20 F008          	lfsr	2,8
 14573  0120F8  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14574  0120FA  26D9               	addwf	fsr2l,f,c
 14575  0120FC  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14576  0120FE  22DA               	addwfc	fsr2h,f,c
 14577  012100  88DF               	bsf	indf2,4,c
 14578                           
 14579                           ;mtouch_sensor.c: 794: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)3));
 14580  012102  EE20 F003          	lfsr	2,3
 14581  012106  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14582  012108  26D9               	addwf	fsr2l,f,c
 14583  01210A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14584  01210C  22DA               	addwfc	fsr2h,f,c
 14585  01210E  0E08               	movlw	8
 14586  012110  6EDF               	movwf	indf2,c
 14587                           
 14588                           ;mtouch_sensor.c: 795: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 14589  012112  EE20 F002          	lfsr	2,2
 14590  012116  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 14591  012118  26D9               	addwf	fsr2l,f,c
 14592  01211A  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 14593  01211C  22DA               	addwfc	fsr2h,f,c
 14594  01211E  0E80               	movlw	128
 14595  012120  6EDF               	movwf	indf2,c
 14596  012122  0012               	return		;funcret
 14597  012124                     __end_of_Sensor_setCalibratAcqTime:
 14598                           	opt stack 0
 14599                           tosu	equ	0xFFF
 14600                           tosh	equ	0xFFE
 14601                           tosl	equ	0xFFD
 14602                           pclatu	equ	0xFFB
 14603                           pclath	equ	0xFFA
 14604                           tblptru	equ	0xFF8
 14605                           tblptrh	equ	0xFF7
 14606                           tblptrl	equ	0xFF6
 14607                           tablat	equ	0xFF5
 14608                           prodh	equ	0xFF4
 14609                           prodl	equ	0xFF3
 14610                           intcon	equ	0xFF2
 14611                           postinc0	equ	0xFEE
 14612                           fsr0h	equ	0xFEA
 14613                           fsr0l	equ	0xFE9
 14614                           wreg	equ	0xFE8
 14615                           indf1	equ	0xFE7
 14616                           postinc1	equ	0xFE6
 14617                           postdec1	equ	0xFE5
 14618                           fsr1h	equ	0xFE2
 14619                           fsr1l	equ	0xFE1
 14620                           indf2	equ	0xFDF
 14621                           postinc2	equ	0xFDE
 14622                           postdec2	equ	0xFDD
 14623                           plusw2	equ	0xFDB
 14624                           fsr2h	equ	0xFDA
 14625                           fsr2l	equ	0xFD9
 14626                           status	equ	0xFD8
 14627                           tosu	equ	0xFFF
 14628                           tosh	equ	0xFFE
 14629                           tosl	equ	0xFFD
 14630                           pclatu	equ	0xFFB
 14631                           pclath	equ	0xFFA
 14632                           tblptru	equ	0xFF8
 14633                           tblptrh	equ	0xFF7
 14634                           tblptrl	equ	0xFF6
 14635                           tablat	equ	0xFF5
 14636                           prodh	equ	0xFF4
 14637                           prodl	equ	0xFF3
 14638                           intcon	equ	0xFF2
 14639                           postinc0	equ	0xFEE
 14640                           fsr0h	equ	0xFEA
 14641                           fsr0l	equ	0xFE9
 14642                           wreg	equ	0xFE8
 14643                           indf1	equ	0xFE7
 14644                           postinc1	equ	0xFE6
 14645                           postdec1	equ	0xFE5
 14646                           fsr1h	equ	0xFE2
 14647                           fsr1l	equ	0xFE1
 14648                           indf2	equ	0xFDF
 14649                           postinc2	equ	0xFDE
 14650                           postdec2	equ	0xFDD
 14651                           plusw2	equ	0xFDB
 14652                           fsr2h	equ	0xFDA
 14653                           fsr2l	equ	0xFD9
 14654                           status	equ	0xFD8
 14655                           
 14656                           	psect	text92
 14657  000000                     __ptext92:
 14658                           	opt stack 0
 14659                           tosu	equ	0xFFF
 14660                           tosh	equ	0xFFE
 14661                           tosl	equ	0xFFD
 14662                           pclatu	equ	0xFFB
 14663                           pclath	equ	0xFFA
 14664                           tblptru	equ	0xFF8
 14665                           tblptrh	equ	0xFF7
 14666                           tblptrl	equ	0xFF6
 14667                           tablat	equ	0xFF5
 14668                           prodh	equ	0xFF4
 14669                           prodl	equ	0xFF3
 14670                           intcon	equ	0xFF2
 14671                           postinc0	equ	0xFEE
 14672                           fsr0h	equ	0xFEA
 14673                           fsr0l	equ	0xFE9
 14674                           wreg	equ	0xFE8
 14675                           indf1	equ	0xFE7
 14676                           postinc1	equ	0xFE6
 14677                           postdec1	equ	0xFE5
 14678                           fsr1h	equ	0xFE2
 14679                           fsr1l	equ	0xFE1
 14680                           indf2	equ	0xFDF
 14681                           postinc2	equ	0xFDE
 14682                           postdec2	equ	0xFDD
 14683                           plusw2	equ	0xFDB
 14684                           fsr2h	equ	0xFDA
 14685                           fsr2l	equ	0xFD9
 14686                           status	equ	0xFD8
 14687                           
 14688                           	psect	rparam
 14689  0000                     tosu	equ	0xFFF
 14690                           tosh	equ	0xFFE
 14691                           tosl	equ	0xFFD
 14692                           pclatu	equ	0xFFB
 14693                           pclath	equ	0xFFA
 14694                           tblptru	equ	0xFF8
 14695                           tblptrh	equ	0xFF7
 14696                           tblptrl	equ	0xFF6
 14697                           tablat	equ	0xFF5
 14698                           prodh	equ	0xFF4
 14699                           prodl	equ	0xFF3
 14700                           intcon	equ	0xFF2
 14701                           postinc0	equ	0xFEE
 14702                           fsr0h	equ	0xFEA
 14703                           fsr0l	equ	0xFE9
 14704                           wreg	equ	0xFE8
 14705                           indf1	equ	0xFE7
 14706                           postinc1	equ	0xFE6
 14707                           postdec1	equ	0xFE5
 14708                           fsr1h	equ	0xFE2
 14709                           fsr1l	equ	0xFE1
 14710                           indf2	equ	0xFDF
 14711                           postinc2	equ	0xFDE
 14712                           postdec2	equ	0xFDD
 14713                           plusw2	equ	0xFDB
 14714                           fsr2h	equ	0xFDA
 14715                           fsr2l	equ	0xFD9
 14716                           status	equ	0xFD8
 14717                           
 14718                           	psect	temp
 14719  00004F                     btemp:
 14720                           	opt stack 0
 14721  00004F                     	ds	1
 14722  0000                     int$flags	set	btemp
 14723  0000                     wtemp6	set	btemp+1
 14724                           tosu	equ	0xFFF
 14725                           tosh	equ	0xFFE
 14726                           tosl	equ	0xFFD
 14727                           pclatu	equ	0xFFB
 14728                           pclath	equ	0xFFA
 14729                           tblptru	equ	0xFF8
 14730                           tblptrh	equ	0xFF7
 14731                           tblptrl	equ	0xFF6
 14732                           tablat	equ	0xFF5
 14733                           prodh	equ	0xFF4
 14734                           prodl	equ	0xFF3
 14735                           intcon	equ	0xFF2
 14736                           postinc0	equ	0xFEE
 14737                           fsr0h	equ	0xFEA
 14738                           fsr0l	equ	0xFE9
 14739                           wreg	equ	0xFE8
 14740                           indf1	equ	0xFE7
 14741                           postinc1	equ	0xFE6
 14742                           postdec1	equ	0xFE5
 14743                           fsr1h	equ	0xFE2
 14744                           fsr1l	equ	0xFE1
 14745                           indf2	equ	0xFDF
 14746                           postinc2	equ	0xFDE
 14747                           postdec2	equ	0xFDD
 14748                           plusw2	equ	0xFDB
 14749                           fsr2h	equ	0xFDA
 14750                           fsr2l	equ	0xFD9
 14751                           status	equ	0xFD8


Data Sizes:
    Strings     941
    Constant    135
    Data        21
    BSS         377
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      78
    BANK0           160     37     132
    BANK1           256      0     208
    BANK2           256      0      64
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Button_StateMachine$0	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_33(CODE[5]), STR_29(CODE[4]), STR_28(CODE[6]), STR_25(CODE[6]), 
		 -> STR_22(CODE[6]), STR_14(CODE[15]), STR_10(CODE[9]), STR_6(CODE[8]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> mtouch_button_init(CODE[80]), mtouch_sensor_init(CODE[45]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 365
		 -> STR_36(CODE[3]), STR_35(CODE[349]), STR_34(CODE[3]), STR_32(CODE[3]), 
		 -> STR_31(CODE[28]), STR_30(CODE[3]), STR_27(CODE[4]), STR_26(CODE[5]), 
		 -> STR_24(CODE[4]), STR_23(CODE[5]), STR_21(CODE[3]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_12(CODE[14]), STR_11(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[18]), STR_7(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[365]), STR_3(CODE[4]), STR_2(CODE[5]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_Service@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setInactive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setActive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isEnabled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> mtouch_button(BANK1[80]), mtouch_sensor(BANK0[45]), 

    callback_sampled	PTR FTN(enum E17513,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    ringBufferLUT@line	PTR unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Transmit_ISR(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _EUSART2_Receive_ISR->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_EUSART2_Write
    i2___lwmod->i2___lwdiv
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->_Sensor_autoCalibration
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibrated
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->i2_abs

Critical Paths under _main in BANK0

    _main->_ringBufferPull
    _ringBufferPull->_ringBufferLUT
    _ringBufferLUT->_printf
    _printResetMessage->_printf
    _printf->___lwmod
    _putch->_EUSART2_Write
    ___lwmod->___lwdiv
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _Sensor_scheduleNextScan->_Sensor_isCalibrated
    _Sensor_scheduleNextScan->_Sensor_isCalibratingAcqTime
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23485
                                             36 BANK0      1     1      0
            _MTOUCH_Button_State_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                  _printResetMessage
                     _ringBufferPull
 ---------------------------------------------------------------------------------
 (1) _ringBufferPull                                       9     9      0    6695
                                             27 BANK0      9     9      0
                       _EUSART2_Read
                      _ringBufferLUT
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     400
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _ringBufferLUT                                        3     1      2    6057
                                             24 BANK0      3     1      2
            _MTOUCH_Button_isPressed
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1573
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_isPressed                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printResetMessage                                    0     0      0    4084
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4084
                                             12 BANK0     12     8      4
            _MTOUCH_Button_isPressed (ARG)
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     531
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2956
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2714
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1306
                                             11 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     459
                                              2 BANK0      1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             11 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    9688
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                              4 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     310
                                              2 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    4561
                                             21 BANK0      1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              6     6      0    1191
                                              2 BANK0      6     6      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     331
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              1     1      0    3116
                                             20 BANK0      1     1      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        9     9      0    2024
                                             11 BANK0      9     9      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              4     2      2     899
                                              7 BANK0      4     2      2
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         7     5      2     651
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            14    14      0     993
                                              4 BANK0     14    14      0
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     328
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    4470
                                             20 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    4371
                                             16 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     626
                                              9 BANK0      7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    1175
                                              9 BANK0      5     3      2
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                              1 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                              9 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                              3 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                              7 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                              3 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             12    10      2     350
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_State_Get                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                      18    18      0    2979
                                             22 COMRAM    18    18      0
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  0     0      0     903
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            19    17      2     903
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0      66
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (11) i2_EUSART2_Write                                     1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _ADCC_ThresholdISR_mTouch                             0     0      0    2076
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (9) _MTOUCH_Sensor_Service                                2     2      0    2076
                                             13 COMRAM     2     2      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (10) i2_Sensor_scheduleNextScan                           6     6      0     688
                                              2 COMRAM     6     6      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibrated                               2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Sensor_setSampled                                   2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _Sensor_autoCalibration                              9     7      2     965
                                              4 COMRAM     9     7      2
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i2_Sensor_isCalibratingAcqTime
                              i2_abs
 ---------------------------------------------------------------------------------
 (11) i2_abs                                               4     2      2      92
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) i2_Sensor_isCalibratingAcqTime                       2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibrated                                2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _Sensor_setCalibratAcqTime                           2     0      2     218
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_State_Get
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           _abs
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback *
           _Sensor_RawSample_Update *
             _medianFilter
           _Sensor_isEnabled *
           _Sensor_setActive *
           _Sensor_setInactive *
           _abs *
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_wasSampled
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _printResetMessage
     _printf
       _MTOUCH_Button_isPressed (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _putch (ARG)
         _EUSART2_Write
   _ringBufferPull
     _EUSART2_Read
     _ringBufferLUT
       _MTOUCH_Button_isPressed
       _printf
         _MTOUCH_Button_isPressed (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         _putch (ARG)
           _EUSART2_Write
       _strcmp
     _strlen

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i2_Sensor_isCalibratingAcqTime
         i2_abs
       _Sensor_setSampled
       i2_Sensor_SetTrisBit
       i2_Sensor_isCalibrated
       i2_Sensor_scheduleNextScan
         i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_isCalibratingAcqTime
   _EUSART2_Receive_ISR *
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_EUSART2_Write
   _EUSART2_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      40      10       25.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     25      84       5       82.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      4E       1       83.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2       8        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 28 15:11:18 2018

                                    ?_MTOUCH_Sensor_RawSample_Get 00B0  
                                   Sensor_FrequencyHopping@sensor 00C4  
                                                     __CFG_CP$OFF 000000  
                                         ?_Sensor_autoCalibration 0005  
                                      __end_of_Sensor_setInactive 23F4  
                                              i2___lwdiv@dividend 0001  
                                       _Sensor_setCalibratAcqTime 20F4  
                                                             l305 160E  
                                                             l340 0E9C  
                                                             l190 1E2E  
                                                             l334 0E46  
                                                             l360 004E  
                                                             l336 0E82  
                                                             l337 0E66  
                                                             l610 12F2  
                                                             l370 024E  
                                                             l362 009A  
                                                             l339 0ECA  
                                                             l188 1E06  
                                                             l364 016C  
                                                             l197 1D9A  
                                                             l550 17D6  
                                                             l198 1DBE  
                                                             l366 01AA  
                                                             l703 1FC2  
                                                             l199 1DBC  
                                                             l632 1F88  
                                                             l608 131A  
                                                             l560 193A  
                                                             l544 17DE  
                                                             l368 01E6  
                                                             l609 12E6  
                                                             l561 1946  
                                                             l545 17B6  
                                                             l546 1802  
                                                             l555 1952  
                                                             l547 17BE  
                                                             l652 046C  
                                                             l644 031C  
                                                             l708 2264  
                                                             l628 229A  
                                                             l556 1916  
                                                             l548 17C6  
                                                             l645 041E  
                                                             l637 1C62  
                                                             l549 17CE  
                                                             l670 05BC  
                                                             l654 04CA  
                                                             l646 03AE  
                                                             l558 1922  
                                                             l574 1C88  
                                                             l727 202A  
                                                             l671 05C6  
                                                             l559 192E  
                                                             l591 0748  
                                                             l832 236A  
                                                             l680 0628  
                                                             l672 05CA  
                                                             l592 0752  
                                                             l576 1CB2  
                                                             l673 05DA  
                                                             l665 0502  
                                                             l649 0404  
                                                             l585 0688  
                                                             l569 1F16  
                                                             l842 1352  
                                                             l658 227A  
                                                             l586 06A2  
                                                             l843 135E  
                                                             l851 08D2  
                                                             l667 057C  
                                                             l827 1F4E  
                                                             l908 1018  
                                                             l924 22C6  
                                                             l852 08E8  
                                                             l668 0640  
                                                             l909 1040  
                                                             l749 1FF6  
                                                             l677 05FE  
                                                             l589 070E  
                                                             l950 214C  
                                                             l838 1476  
                                                             l686 0676  
                                                             l863 21D8  
                                                             l848 0862  
                                                             l929 1536  
                                                             l937 10D6  
                                                             l857 119C  
                                                             l980 0ACC  
                                                             l973 0A8C  
                                                             l893 1EE6  
                                                             l982 0AF4  
                                                             l974 0A9C  
                                                             l986 0B3C  
                                                             l987 0B96  
                                                             _GIE 007F97  
                                                             l988 0B42  
                                                    __CFG_CPD$OFF 000000  
                                                             _abs 2150  
                                                             fsr2 000FD9  
                                         __size_of_PMD_Initialize 001C  
                                                             prod 000FF3  
                                                             tosl 000FFD  
                                                             wreg 000FE8  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 00B2  
                                __size_of_MTOUCH_Sensor_SampleAll 0046  
                                         __size_of_ringBufferPull 011A  
                               __size_of_MTOUCH_Sensor_Initialize 007A  
                                       ?_MTOUCH_Sensor_Initialize 0001  
                                 __size_of_Sensor_setSamplePeriod 0024  
                                                    __CFG_LVP$OFF 000000  
                                                    __CFG_ZCD$OFF 000000  
                                                            l1041 2170  
                                                            ?_abs 00B0  
                                                            l1400 1AAE  
                                                            l1410 1CD0  
                                                            l1403 1AD6  
                                                            l1404 1AE0  
                                                            l1413 1CF0  
                                                            l1414 1CFA  
                                                            l1423 1C18  
                                                            l1424 1BF0  
                                                            l1409 1CD8  
                                                            l1550 1B90  
                                                            l1549 1B9A  
                                                            l1557 1D56  
                                                            l1558 1D50  
                                                            l5103 2362  
                                                            l1399 1AB6  
                                                            l5137 0E36  
                                                            l5075 1C80  
                                                            l4355 1D88  
                                                            l5147 0E5C  
                                                            l4471 1BF0  
                                                            l4641 1352  
                                                            l4537 04FA  
                                                            l4565 05D2  
                                                            l4821 1F46  
                                                            l4911 2272  
                                                            l4807 1F0E  
                                                            l4753 0AF8  
                                                            l4587 0620  
                                                            l4845 21D0  
                                                            STR_1 FFFB  
                                                            STR_2 FFEE  
                                                            STR_3 FFF7  
                                                            STR_4 FC52  
                                                            STR_5 FFA6  
                                                            STR_6 FFCF  
                                                            STR_7 FFA6  
                                                            STR_8 FF97  
                                                            STR_9 FFA6  
                                   ?_Button_Reading_Update_Helper 00B3  
                                                            _LATA 000F79  
                                                            _LATB 000F7A  
                                                            _LATC 000F7B  
                                                            _LATD 000F7C  
                                                            _LATE 000F7D  
                                                            _LATF 000F7E  
                                                            _LATG 000F7F  
                                                            _LATH 000F80  
                                                            u5100 1CDC  
                                                            u5018 117E  
                                                            u5210 1BD2  
                                                            u4510 1084  
                                                            u5038 1220  
                                                            u5070 1ABA  
                                                            u5230 1EE2  
                                                            u4520 1102  
                                                            u5400 07DA  
                                                            u5160 0B2A  
                                                            u4610 1FF2  
                                                            u4515 107A  
                                                            u5180 0BA0  
                                                            _PMD0 000E4C  
                                                            u4525 10F8  
                                                            _PMD1 000E4D  
                                                            u4470 2260  
                                                            u5430 2286  
                                                            u4630 1FBE  
                                                            u5350 06BA  
                                                            _PMD2 000E4E  
                                                            u5415 07DC  
                                                            _PMD3 000E4F  
                                                            u4720 0580  
                                                            u4640 2358  
                                                            _PMD4 000E50  
                                                            u4545 191E  
                                                            _PMD5 000E51  
                                                            u4730 058C  
                                                            u4546 1920  
                                                            u4650 233E  
                                                            u4555 192A  
                                                            u4900 1008  
                                                            u4556 192C  
                                                            u4565 1936  
                                                            u4566 1938  
                                                            u5630 1CB8  
                                                            u4495 1A24  
                                                            u4575 1942  
                                                            u5295 20D8  
                                                            u4576 1944  
                                                            u4585 194E  
                                                            u4930 138C  
                                                            u4586 1950  
                                                            u5570 0224  
                                                            u5395 07C0  
                                                            u4940 13B6  
                                                            u4860 2026  
                                                            u5478 14A4  
                                                            u4790 0602  
                                                            u5670 0E5C  
                                                            u4880 0F6C  
                                                            u4960 083E  
                                                            u4688 1302  
                                                            u4945 13AC  
                                                            u4885 0F62  
                                                            u4895 0FCE  
                                                            u4896 0FD4  
                                                            u4897 0FE2  
                                                            u4988 08B4  
                                      Button_State_Pressed@button 00B9  
                                                            _WPUA 000E91  
                                                            _WPUB 000E99  
                                                            _WPUC 000EA1  
                                                            _WPUD 000EA6  
                                                            _WPUE 000EAE  
                                                            _WPUF 000EB3  
                                                            _WPUG 000EBB  
                                                            _WPUH 000EC0  
                                           ??_EUSART2_Receive_ISR 0017  
                                             _sensor_medianBuffer 0060  
                                                   __CFG_FCMEN$ON 000000  
                                                   _EUSART2_Write 1D84  
                                              _MTOUCH_needReburst 2458  
                                                            abs@a 00B0  
                                                            _main 1602  
                            __size_of_MTOUCH_Button_InitializeAll 0038  
                                                            _line 0190  
                                                   ?_EUSART2_Read 0001  
                                                            fsr0h 000FEA  
                                                            fsr1h 000FE2  
                                              i2___lwdiv@quotient 0005  
                                                            fsr2h 000FDA  
                                                            fsr0l 000FE9  
                                                            indf1 000FE7  
                                                            indf2 000FDF  
                                                            fsr1l 000FE1  
                                                            fsr2l 000FD9  
                                                            btemp 004F  
                            __size_of_MTOUCH_Sensor_InitializeAll 0038  
                                                            prodh 000FF4  
                                                            prodl 000FF3  
                                                            start 00E4  
                              __size_ofi2_Sensor_scheduleNextScan 014C  
                                    __end_of_EUSART2_Transmit_ISR 2060  
                                       ??_Sensor_FrequencyHopping 00C4  
                                                 __end_ofi2_putch 246C  
                                                   __CFG_CSWEN$ON 000000  
                                             ?_MTOUCH_needReburst 0001  
                                                    ___param_bank 000000  
                                                   ?_medianFilter 00B0  
                                  __end_of_Sensor_autoCalibration 0CF4  
                                                   __CFG_SCANE$ON 000000  
                                        __size_ofi2_EUSART2_Write 003C  
                                        ?_MTOUCH_Service_Mainloop 0001  
                                __size_of_MTOUCH_Button_isPressed 0038  
                                   __size_of_Button_State_Pressed 00EC  
                                                           ??_abs 00B2  
                                     ?_Button_Baseline_Initialize 00B3  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 007E  
                                   ??_MTOUCH_Sensor_RawSample_Get 00B2  
                                   Sensor_RawSample_Update@sensor 00B7  
                                   Sensor_RawSample_Update@result 00B9  
                                       __size_of_Sensor_isEnabled 0026  
                                  __size_of_OSCILLATOR_Initialize 0018  
                                             ringBufferPull@index 00D2  
                                   __end_of_OSCILLATOR_Initialize 238E  
                             __end_of_Sensor_isCalibratingAcqTime 2342  
                                  ?i2_Sensor_isCalibratingAcqTime 0001  
                                     _Sensor_isCalibratingAcqTime 2328  
                                                           _ADACC 000F70  
                                                           _ADACQ 000F5C  
                                                           _ADCAP 000F5D  
                                                           ?_main 0001  
                                                           _ADCLK 000F57  
                                                           _ADPCH 000F5F  
                                                           _ADREF 000F58  
                                                           _ADPRE 000F5E  
                                                           STR_10 FFC6  
                                                           STR_11 FFA6  
                                                           STR_12 FFB8  
                                                           STR_20 FF84  
                                                           STR_21 FFA6  
                                                           STR_13 FFA6  
                                                           STR_30 FFA6  
                                                           STR_22 FFE3  
                                                           STR_14 FFA9  
                                                           STR_15 FFA6  
                                                           STR_23 FFEE  
                                                           STR_31 FF1C  
                                                           STR_32 FFA6  
                                                           STR_24 FFF7  
                                                           STR_16 FF38  
                                                           STR_33 FFE9  
                                                           STR_25 FFDD  
                                                           STR_17 FF4B  
                                                   __CFG_WDTE$OFF 000000  
                                                           STR_34 FFA6  
                                                           STR_26 FFEE  
                                                           STR_18 FF5E  
                                                           STR_27 FFF7  
                                                           STR_19 FF71  
                                                           STR_35 FDBF  
                                                           STR_36 FFA6  
                                                           STR_28 FFD7  
                                                           STR_29 FFF3  
                                                           _ADRPT 000F66  
                                                  __CFG_DEBUG$OFF 000000  
                                         __size_of_Button_Service 00C4  
                                                 __end_of___lwdiv 1AEA  
                                                 __end_of___lwmod 1D04  
                                                           i2l210 2056  
                                                           i2l114 006E  
                                                           i2l220 15B0  
                                                           i2l116 008E  
                                                           i2l222 15FA  
                                                           i2l118 0098  
                                                           i2l215 156A  
                                                           i2l216 158A  
                                                           i2l217 15AA  
                                                           i2l209 205A  
                                                           i2l601 0CB2  
                                                           i2l603 0CE2  
                                                           i2l621 18B4  
                                                           i2l197 1E50  
                                                           i2l622 190A  
                                                           i2l198 1E74  
                                                           i2l703 20C0  
                                                           i2l623 18E6  
                                                           i2l199 1E72  
                                                           i2l560 199E  
                                                           i2l624 18F2  
                                                           i2l561 19AA  
                                                           i2l555 19B6  
                                                           i2l556 197A  
                                                           i2l558 1986  
                                                           i2l559 1992  
                                                           i2l591 09F2  
                                                           i2l592 09FC  
                                                           i2l585 0942  
                                                           i2l586 095A  
                                                           i2l596 0C38  
                                                           i2l597 0C2A  
                                                           i2l749 208E  
                                                           i2l589 09BE  
                                                           i2l980 0D3C  
                                                           i2l973 0CFE  
                                                           i2l982 0D64  
                                                           i2l974 0D0E  
                                                           i2l986 0DAC  
                                                           i2l987 0E00  
                                                           i2l988 0DB2  
                                                           _OSCEN 000E47  
                                                           _TRISA 000F81  
                                                           _TRISB 000F82  
                                                           _TRISC 000F83  
                                                           _TRISD 000F84  
                                                           _TRISE 000F85  
                                                           _TRISF 000F86  
                                                           _TRISG 000F87  
                                                           _TRISH 000F88  
                                                           i2_abs 221A  
                                 __size_of_Button_DefaultCallback 0002  
                                             i2_Sensor_SetTrisBit 1976  
                                                   __CFG_WRT0$OFF 000000  
                                                   __CFG_WRT1$OFF 000000  
                                                   __CFG_WRT2$OFF 000000  
                                                   __CFG_WRT3$OFF 000000  
                                                   __CFG_WRT4$OFF 000000  
                                                   __CFG_WRT5$OFF 000000  
                                                   __CFG_WRT6$OFF 000000  
                                                   __CFG_WRT7$OFF 000000  
                                            ??_MTOUCH_needReburst 00B0  
                                                  __CFG_EBTR0$OFF 000000  
                                                  __CFG_EBTR1$OFF 000000  
                                                  __CFG_EBTR2$OFF 000000  
                                                  __CFG_EBTR3$OFF 000000  
                                                  __CFG_EBTR4$OFF 000000  
                                                  __CFG_EBTR5$OFF 000000  
                                                  __CFG_EBTR6$OFF 000000  
                                                  __CFG_EBTR7$OFF 000000  
                                                   __CFG_WRTB$OFF 000000  
                                                   __CFG_WRTC$OFF 000000  
                                                   __CFG_WRTD$OFF 000000  
                                 __size_of_Sensor_DefaultCallback 0002  
                                                  __CFG_EBTRB$OFF 000000  
                                                 __end_of_dpowers FBD5  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 2486  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
                                   _MTOUCH_Sensor_Scan_Initialize 2480  
                                         Sensor_setSampled@sensor 0001  
                                 __end_of_Sensor_scheduleNextScan 07E2  
                                              __CFG_MCLRE$EXTMCLR 000000  
                                                           _putch 2416  
                                __size_of_Button_State_NotPressed 0152  
                                                  ?_EUSART2_Write 0001  
                                                           pclath 000FFA  
                                                           tablat 000FF5  
                                            _Sensor_Sampled_Reset 23D0  
                                                           plusw2 000FDB  
                                                  ??_EUSART2_Read 00B0  
                                                           status 000FD8  
                                __size_of_MTOUCH_Sensor_isEnabled 0034  
                                                           wtemp6 0050  
                                       __size_of_Sensor_setActive 0012  
                                          ?i2_Sensor_isCalibrated 0001  
                                          Sensor_isEnabled@sensor 00B0  
                                            ?i2_Sensor_SetTrisBit 0001  
                                                __end_ofi2_printf 0E26  
                                              __size_ofi2___lwdiv 0052  
                                              __size_ofi2___lwmod 0042  
                           __end_of_EUSART2_SetTxInterruptHandler 2432  
                          __size_of_EUSART2_SetTxInterruptHandler 000E  
                                   _EUSART2_SetTxInterruptHandler 2424  
                                                  ??_medianFilter 00B2  
                                                 __initialization 1736  
                                          _Sensor_setSamplePeriod 228C  
                                                    __end_of_main 169C  
                                            _Sensor_setCalibrated 22D4  
                                                      i2printf@ap 0010  
                                           __end_of_ringBufferLUT 0298  
                                __end_of_MTOUCH_Button_Initialize 18A0  
                                                          ??_main 00D4  
                                                   __activetblptr 000003  
                                         _MTOUCH_Sensor_Calibrate 21F2  
                                         ??_Button_Reading_Update 00B9  
                                                          ?i2_abs 0001  
                                __end_of_ADCC_ThresholdISR_mTouch 2476  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 00B2  
                                        ?_Button_Deviation_Update 00B0  
                                                    ?_MTOUCH_Tick 0001  
                                    Button_Baseline_Update@button 00B0  
                                      __end_of_EUSART2_Initialize 1A96  
                                                          _ADCON0 000F60  
                                                          _ADCON1 000F59  
                                                          _ADCON2 000F5A  
                                                          _ADCON3 000F5B  
                                        _eusart2TxBufferRemaining 004E  
                                                          _ADFLTR 000F72  
                            __size_of_MTOUCH_Sensor_RawSample_Get 0038  
                                                          _ADLTHH 000F6B  
                                                          _ADLTHL 000F6A  
                                                          _ADUTHH 000F6D  
                                                          _ADUTHL 000F6C  
                                                          _ANSELA 000E92  
                                                          ?_putch 0001  
                                                          _ANSELB 000E9A  
                                                          _ANSELD 000EA7  
                                                          _ANSELE 000EAF  
                                                          _ANSELF 000EB4  
                                                          _ANSELG 000EBC  
                                                          _RC2REG 000EF1  
                                                          _RC2STA 000EF5  
                                                          _ODCONA 000E90  
                                                          _ODCONB 000E98  
                                                          _ODCONC 000EA0  
                                                          _ODCOND 000EA5  
                                                          _ODCONE 000EAD  
                                                          _ODCONF 000EB2  
                                                          _ODCONG 000EBA  
                                                          _ODCONH 000EBF  
                                                          i2l1041 2238  
                                                          i2l1400 1B52  
                                                          i2l1410 1D12  
                                                          i2l1403 1B7A  
                                                          i2l1404 1B84  
                                                          i2l1413 1D32  
                                                          i2l1414 1D3C  
                                                          i2l1409 1D1A  
                                                  __CFG_WDTCCS$SC 000000  
                                                          i2l4051 0D68  
                                                          i2l1399 1B5A  
                                                          i2l3437 1E3E  
                                           ?_Sensor_Sampled_Reset 00B0  
                                                          _RG7PPS 000E89  
                                                   i2putch@txData 0002  
                                                          _OSCFRQ 000E49  
                                                       ??i2_putch 0002  
                                                          _TX2REG 000EF2  
                                                          _TX2STA 000EF6  
                               MTOUCH_Button_InitializeAll@button 00BB  
                                                          i2abs@a 0001  
                                  ??_Button_Reading_Update_Helper 00B5  
                                           ??i2_Sensor_SetTrisBit 0002  
                                         _MTOUCH_Button_State_Get 2124  
                                          _Button_DefaultCallback 2492  
                                 __end_of_MTOUCH_Service_Mainloop 21CA  
                                                  __CFG_PWRTE$OFF 000000  
                                                  __CFG_XINST$OFF 000000  
                                             _Sensor_isCalibrated 2342  
                                     MTOUCH_Sensor_Service@sensor 000E  
                                          _Sensor_DefaultCallback 2490  
                                       __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                                                   _packet_sample 0029  
                                           ?_Sensor_setCalibrated 0001  
                                    Sensor_DefaultCallback@sensor 0001  
                                                  __CFG_STVREN$ON 000000  
                                                       ??___lwdiv 00B4  
                                                       ??___lwmod 00BB  
                                                          _memcpy 1BDE  
                                                          clear_0 177C  
                                                          clear_1 1788  
                                                          clear_2 1794  
                                                          clear_3 17A0  
                                            _eusart2RxStringReady 0082  
                                __end_of_MTOUCH_Button_ServiceAll 2376  
                                  __size_of_MTOUCH_Sensor_Service 0070  
                                                          _printf 0A80  
                                   __end_of_MTOUCH_Sensor_Service 1910  
                                    Sensor_autoCalibration@sensor 0005  
                                                          _strcmp 1B8E  
                                                          _strlen 1D46  
                                  i2Sensor_scheduleNextScan@state 0005  
                                               ??i2_EUSART2_Write 0001  
                                                  _PMD_Initialize 22F2  
                                                    __pdataCOMRAM 0042  
                                         _MTOUCH_Sensor_SampleAll 1C7A  
                                    Button_DefaultCallback@button 0001  
                                               __end_ofi2___lwdiv 1B8E  
                                                    __mediumconst FBCA  
                                               __end_ofi2___lwmod 1D46  
                                                  _ringBufferPull 0E26  
                                            ?_Sensor_isCalibrated 00B0  
                                                          tblptrh 000FF7  
                                                          tblptrl 000FF6  
                                                          tblptru 000FF8  
                                        ?_Sensor_RawSample_Update 00B7  
                                            _EUSART2_Transmit_ISR 202E  
                                         ?_Button_Baseline_Update 00B0  
                             Sensor_postAcquisitionProcess@sensor 00C2  
                                                 ??_EUSART2_Write 00B0  
                              __size_of_Sensor_setCalibratAcqTime 0030  
                                 MTOUCH_Sensor_RawSample_Get@name 00B2  
                                   __size_of_INTERRUPT_Initialize 000C  
                                                 _eusart2RxBuffer 0100  
                                ??_INTERRUPT_InterruptManagerHigh 0017  
                                 ?_INTERRUPT_InterruptManagerHigh 0001  
                                               _SYSTEM_Initialize 230E  
                                                 _eusart2TxBuffer 0200  
                                                      __accesstop 0060  
                                         __end_of__initialization 17A6  
                             __size_of_Button_Baseline_Initialize 0060  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                 ??_Sensor_postAcquisitionProcess 00BB  
                                              ?_SYSTEM_Initialize 0001  
                                             _Button_StateMachine 00D5  
                                                   ___rparam_used 000001  
                                      __end_of_Button_Tick_helper 1B3C  
                                   MTOUCH_Sensor_Calibrate@sensor 00B0  
                                                   __end_ofi2_abs 2242  
                               __size_of_MTOUCH_Sensor_isSampling 0004  
                                              i2___lwmod@dividend 0008  
                                       ?_MTOUCH_Sensor_isSampling 0001  
                                                  __pcstackCOMRAM 0001  
                                         _MTOUCH_Button_isPressed 1EB2  
                                                    __pidataBANK0 2440  
                                             ??_SYSTEM_Initialize 00BC  
                                      __end_of_MTOUCH_Button_Tick 21F2  
                                __end_of_MTOUCH_Sensor_Initialize 182A  
                                  ?_EUSART2_SetTxInterruptHandler 00B0  
                                                   __end_of_putch 2424  
                                       ??_MTOUCH_Sensor_Calibrate 00B0  
                                                _Sensor_isEnabled 2242  
                                __size_of_Sensor_scheduleNextScan 016A  
                                                     i2printf@val 0014  
                                    ??i2_MTOUCH_Sensor_wasSampled 0001  
                                 __end_of_Button_Deviation_Update 1052  
                                          __end_of_PMD_Initialize 230E  
                                        Sensor_setInactive@sensor 00B0  
                                                  _Button_Service 13F4  
                                            __end_of_EUSART2_Read 1E3C  
                                          __end_of_ringBufferPull 0F40  
                                      ?_Button_State_Initializing 00B9  
                                            Button_Service@button 00C2  
                                                         ??i2_abs 0003  
                                           ??_Sensor_isCalibrated 00B2  
                                  __end_of_Button_Baseline_Update 1152  
                                           ?_EUSART2_Transmit_ISR 0001  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 00BF  
                                        _MTOUCH_Button_Initialize 182A  
                                                       ?i2_printf 000D  
                                            __end_of_medianFilter 04EC  
                                         ringBufferPull@index_724 00D0  
                                         _Button_State_NotPressed 07E2  
                                   __size_of_MTOUCH_Sensor_Enable 0028  
                                              _Sensor_setInactive 23E2  
                                       __end_of_SYSTEM_Initialize 2328  
                                MTOUCH_Sensor_isCalibrated@sensor 00B0  
                                          ??_Sensor_Sampled_Reset 00B2  
                                                         ??_putch 00B1  
                                        _ADCC_ThresholdISR_mTouch 246C  
                                                   _eusart2RxHead 003F  
                              __size_ofi2_MTOUCH_Sensor_isEnabled 0032  
                                                   _eusart2TxHead 0041  
                                                      __pbssBANK0 0060  
                                                      __pbssBANK1 0100  
                                                      __pbssBANK2 0200  
                                                   _eusart2RxTail 003E  
                                                   _eusart2TxTail 0040  
                                      ?i2_MTOUCH_Sensor_isEnabled 0001  
                                         _MTOUCH_Sensor_isEnabled 1F92  
                                       ??_MTOUCH_Button_State_Get 00B0  
                                                      __pnvCOMRAM 004B  
                                             ?_Sensor_setInactive 00B0  
                                                _Sensor_setActive 23F4  
                                      __end_of_mtouch_button_init FC25  
                                           EUSART2_Read@readValue 00B0  
                             __size_ofi2_MTOUCH_Sensor_wasSampled 0032  
                                          ??_Sensor_setCalibrated 0003  
                                         Sensor_SetTrisBit@sensor 00B1  
                                i2MTOUCH_Sensor_wasSampled@sensor 0001  
                                  MTOUCH_Sensor_wasSampled@sensor 00B0  
                                          __end_of_Button_Service 14B8  
                                                         ?_memcpy 00B0  
                             __end_of_MTOUCH_Button_InitializeAll 1F5A  
                                     _MTOUCH_Button_InitializeAll 1F22  
                                                         _ADSTPTH 000F69  
                                                         _ADSTPTL 000F68  
                             __end_of_MTOUCH_Sensor_InitializeAll 1F22  
                                     _MTOUCH_Sensor_InitializeAll 1EEA  
                                       ??_MTOUCH_Sensor_SampleAll 00C5  
                                                         ?_printf 00BC  
                                                 ?_PMD_Initialize 0001  
                                 __end_of_Sensor_RawSample_Update 1C7A  
                                            ??_Sensor_setInactive 00B2  
                                                         ?_strcmp 00B0  
                                                         ?_strlen 00B0  
                               __size_of_MTOUCH_Sensor_wasSampled 0034  
                                       ?_MTOUCH_Sensor_wasSampled 0001  
                                                 ?_ringBufferPull 0001  
                                       Sensor_isCalibrated@sensor 00B0  
                               __end_of_Button_State_Initializing 13F4  
                                                         _SP2BRGH 000EF4  
                                                         _SP2BRGL 000EF3  
                                        _MTOUCH_Button_ServiceAll 235C  
                                                         _OSCCON1 000E43  
                                                         _OSCCON3 000E45  
                                     __end_of_EUSART2_Receive_ISR 1602  
                                   MTOUCH_Sensor_SampleAll@sensor 00C5  
                                                      ??i2_printf 000F  
                                                         _OSCTUNE 000E48  
                                __size_of_MTOUCH_Service_Mainloop 0028  
                                    __end_of_Button_State_Pressed 123E  
                                      i2Sensor_SetTrisBit@TrisBit 0001  
                                Button_Baseline_Initialize@button 00B3  
                                 Sensor_setCalibratAcqTime@sensor 0001  
                                            __size_of_MTOUCH_Tick 0006  
                            __size_of_Sensor_isCalibratingAcqTime 001A  
                                 ??i2_Sensor_isCalibratingAcqTime 0003  
                                         ??i2_Sensor_isCalibrated 0003  
                                                         i2_putch 2462  
                               __end_ofi2_MTOUCH_Sensor_isEnabled 20C4  
                                         ?_Sensor_setSamplePeriod 0001  
                                       ??_MTOUCH_Button_isPressed 00B0  
                                                      _freq_index 0081  
                                                         __Hparam 0000  
                                               _Sensor_SetTrisBit 1910  
                                                         __Lparam 0000  
                           __end_of_Sensor_postAcquisitionProcess 1328  
                          __size_of_Sensor_postAcquisitionProcess 00EA  
                                   _Sensor_postAcquisitionProcess 123E  
                                              ?_Sensor_SetTrisBit 00B0  
                                  MTOUCH_Button_Initialize@button 00B2  
                                                         ___lwdiv 1A96  
                                                         ___lwmod 1CC0  
                                                 ?_Button_Service 0001  
                                                         __pcinit 1736  
                                                 __size_of_memcpy 004E  
                                                         __ramtop 0E00  
                                                 _scanInterrupted 0039  
                                                         __ptext0 1602  
                                                         __ptext1 0E26  
                                                         __ptext2 1D46  
                                                         __ptext3 0000  
                                                         __ptext4 1B8E  
                                                         __ptext5 1EB2  
                                                         __ptext6 1E00  
                                                         __ptext7 1E78  
                                                         __ptext8 0A80  
                                                         __ptext9 2416  
                                                 __size_of_printf 0140  
                                     Button_Reading_Update@button 00B7  
                                             ??_Sensor_SetTrisBit 00B1  
                                                 __size_of_strcmp 0050  
                                                 __size_of_strlen 003E  
                                        _MTOUCH_Sensor_Initialize 17B0  
                                                         _dpowers FBCB  
                                           _OSCILLATOR_Initialize 2376  
                                          ??_EUSART2_Transmit_ISR 0001  
                                                    __size_of_abs 002A  
                                       ??_Button_State_NotPressed 00BB  
                                        ??_PIN_MANAGER_Initialize 00B0  
                                  __size_of_Button_Reading_Update 0024  
                                     __size_of_MTOUCH_needReburst 000A  
                                   __end_of_Button_Reading_Update 22D4  
                               MTOUCH_Sensor_InitializeAll@sensor 00BB  
                                                _callback_sampled 0048  
                                       ??_MTOUCH_Sensor_isEnabled 00B0  
                                      __size_of_SYSTEM_Initialize 001A  
                                           i2EUSART2_Write@txData 0001  
                                                _callback_pressed 0045  
                                  MTOUCH_Sensor_Initialize@sensor 00B2  
                                               _printResetMessage 1E78  
                                 i2Sensor_scheduleNextScan@sensor 0007  
                                   Sensor_scheduleNextScan@sensor 00B6  
                                            end_of_initialization 17A6  
                                         ?_Button_DefaultCallback 0001  
                                                         memcpy@d 00B7  
                                                         memcpy@n 00B4  
                                                         memcpy@s 00B9  
                                  __end_of_Sensor_setSamplePeriod 22B0  
                                              ?_printResetMessage 0001  
                                      __end_of_mtouch_sensor_init FC52  
                                        ?_Sensor_FrequencyHopping 0001  
                                       __end_of_Sensor_SetTrisBit 1976  
                                         ?_Sensor_DefaultCallback 0001  
                                __size_of_Button_Deviation_Update 0112  
                                    ??_MTOUCH_Sensor_isCalibrated 00B0  
                                              _EUSART2_Initialize 1A38  
                                             ??_printResetMessage 00C8  
                             __end_of_MTOUCH_Sensor_RawSample_Get 1F92  
                                     _MTOUCH_Sensor_RawSample_Get 1F5A  
                                                 i2_EUSART2_Write 1E3C  
                                                         printf@c 00C7  
                                                         printf@f 00BC  
                                                         postdec1 000FE5  
                                                         postdec2 000FDD  
                                                         postinc0 000FEE  
                                                         postinc1 000FE6  
                                                         postinc2 000FDE  
                                           __size_of_EUSART2_Read 003C  
                                      ?i2_Sensor_scheduleNextScan 0001  
                                         _Sensor_scheduleNextScan 0678  
                              __end_ofi2_MTOUCH_Sensor_wasSampled 2092  
                                      i2_MTOUCH_Sensor_wasSampled 2060  
                                                         strcmp@r 00B5  
                                           __CFG_WDTCPS$WDTCPS_31 000000  
                                             ?_EUSART2_Initialize 0001  
                                                         strlen@s 00B0  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 00C0  
                                           __size_of_medianFilter 0254  
                                          Sensor_setActive@sensor 00B0  
                                   Button_Deviation_Update@button 00B0  
                                                       _TRISEbits 000F85  
                                 i2MTOUCH_Sensor_isEnabled@sensor 0001  
                                   MTOUCH_Sensor_isEnabled@sensor 00B0  
                                       __end_of_printResetMessage 1EB2  
                                      MTOUCH_Sensor_Enable@sensor 00B0  
                                             _callback_notPressed 0042  
                                                __CFG_FEXTOSC$OFF 000000  
                                               i2___lwdiv@divisor 0003  
                                __end_of_MTOUCH_Sensor_isSampling 2490  
                             __size_of_MTOUCH_Sensor_isCalibrated 0034  
                                  __end_of_Button_DefaultCallback 2494  
                                                       i2___lwdiv 1B3C  
                                                       i2___lwmod 1D04  
                                               i2___lwdiv@counter 0007  
                                     __end_ofi2_Sensor_SetTrisBit 19D8  
                                            ??_EUSART2_Initialize 00B3  
                                        __end_of_Sensor_isEnabled 2268  
                                          __size_of_ringBufferLUT 0298  
                                      Sensor_setCalibrated@sensor 0001  
                                  __end_of_Sensor_DefaultCallback 2492  
                                     MTOUCH_Button_State_Get@name 00B0  
                                        ??_Sensor_autoCalibration 0007  
                                                    _EUSART2_Read 1E00  
                                              medianFilter@sensor 00B6  
                                __size_of_Sensor_RawSample_Update 004E  
                           __end_ofi2_Sensor_isCalibratingAcqTime 23BE  
                          __size_ofi2_Sensor_isCalibratingAcqTime 0018  
                                   i2_Sensor_isCalibratingAcqTime 23A6  
                                        ringBufferPull@charNumber 00CE  
                                                    _medianFilter 0298  
                                    __end_of_INTERRUPT_Initialize 2458  
                                            _Button_State_Pressed 1152  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 1E00  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 003E  
                                   _MTOUCH_Sensor_ADCC_Initialize 1DC2  
                               __end_ofi2_Sensor_scheduleNextScan 0A80  
                                      ??_MTOUCH_Button_Initialize 00B1  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 0678  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 018C  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0001  
                      ??_Sensor_FrequencyHopping_Autotune_Process 00B4  
                        _Sensor_FrequencyHopping_Autotune_Process 04EC  
                                 ??_MTOUCH_Sensor_Scan_Initialize 00B0  
                                  ?_Sensor_postAcquisitionProcess 0001  
                                                   __pidataCOMRAM 2476  
                                              _Button_Tick_helper 1AEA  
                                                  __end_of_memcpy 1C2C  
                                          ?_OSCILLATOR_Initialize 0001  
                                             MTOUCH_Button_Tick@i 00B4  
                                      ??_ADCC_ThresholdISR_mTouch 0010  
                                        __end_of_Sensor_setActive 2406  
                                                  __end_of_printf 0BC0  
                                     ??_Button_State_Initializing 00BB  
                                                  __end_of_strcmp 1BDE  
                                                    i2printf@flag 0012  
                                                  __end_of_strlen 1D84  
                                           _MTOUCH_Sensor_Service 18A0  
                                                    i2printf@prec 0013  
                                             start_initialization 1736  
                                         _MTOUCH_Service_Mainloop 21A2  
                                 __size_of_PIN_MANAGER_Initialize 009A  
                                              _MTOUCH_Button_Tick 21CA  
                                             ?_Button_Tick_helper 00B0  
                                                     __end_of_abs 217A  
                                                       i2printf@c 0016  
                                                       i2printf@f 000D  
                                 __end_of_Sensor_FrequencyHopping 228C  
                   EUSART2_SetRxInterruptHandler@interruptHandler 00B0  
                   EUSART2_SetTxInterruptHandler@interruptHandler 00B0  
                                                     putch@txData 00B1  
                                                      ?i2___lwdiv 0001  
                                                      ?i2___lwmod 0008  
                                               __size_ofi2_printf 0132  
                                           __end_of_EUSART2_Write 1DC2  
                                     ??i2_MTOUCH_Sensor_isEnabled 0001  
                                             ?_MTOUCH_Button_Tick 0001  
                                 Button_State_Initializing@button 00B9  
                                         __end_ofi2_EUSART2_Write 1E78  
                                      __size_of_Sensor_SetTrisBit 0066  
                                         medianFilter@bufferIndex 0033  
                                __end_of_MTOUCH_Sensor_wasSampled 1FFA  
                                                __CFG_LPBOREN$OFF 000000  
                                       ??_Sensor_scheduleNextScan 00B2  
                                            ??_Button_Tick_helper 00B2  
                                    __end_of_MTOUCH_Sensor_Enable 21A2  
                                                ??_PMD_Initialize 00B0  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 00BD  
                                           ?_Button_State_Pressed 00B9  
                                                ??_ringBufferPull 00CB  
                                      ??_MTOUCH_Button_ServiceAll 00C4  
                                                     __pdataBANK0 00D5  
                                                        ??_memcpy 00B6  
                                                   _ringBufferLUT 0000  
                                     __end_of_Sensor_isCalibrated 235C  
                                    ??_Button_Baseline_Initialize 00B5  
                                            ??_MTOUCH_Button_Tick 00B4  
                                              _mtouch_button_init FBD5  
                                      Sensor_Sampled_Reset@sensor 00B0  
                                                        ??_printf 00C0  
                                                        ??_strcmp 00B4  
                                                        ??_strlen 00B2  
                                    ?_Sensor_isCalibratingAcqTime 00B0  
                                                  _eusart2RxCount 003D  
                                                     __pbssCOMRAM 0029  
                                                   _sampling_flag 003A  
                                                   __pcstackBANK0 00B0  
                                      __size_of_printResetMessage 003A  
                                               i2___lwmod@divisor 000A  
                                               i2___lwmod@counter 000C  
                                        Sensor_SetTrisBit@TrisBit 00B0  
                                  MTOUCH_Button_ServiceAll@button 00C4  
                                             EUSART2_Write@txData 00B0  
                                 ??_EUSART2_SetRxInterruptHandler 00B3  
                                   __size_of_Sensor_Sampled_Reset 0012  
                                                        ?i2_putch 0001  
                                         _Button_Deviation_Update 0F40  
                                      ?_Sensor_setCalibratAcqTime 0001  
                                  __size_ofi2_Sensor_isCalibrated 0018  
                                   __end_ofi2_Sensor_isCalibrated 23A6  
                                       _Button_State_Initializing 1328  
                                        _MTOUCH_Sensor_isSampling 248C  
                              __end_of_MTOUCH_Sensor_isCalibrated 202E  
                                      _MTOUCH_Sensor_isCalibrated 1FFA  
                                                       __pnvBANK0 00E1  
                                 __size_of_Sensor_autoCalibration 0134  
                                               _Sensor_setSampled 2406  
                                                ___lwdiv@dividend 00B0  
                                          _PIN_MANAGER_Initialize 169C  
                                                ??_Button_Service 00C0  
                                        ?_MTOUCH_Sensor_Calibrate 0001  
                                              ?_Sensor_setSampled 0001  
                                                       __pintcode 0008  
                              Button_Reading_Update_Helper@button 00B3  
                                                   __pmediumconst FBCA  
                                      ??_MTOUCH_Sensor_Initialize 00B2  
                                   __size_of_Sensor_setCalibrated 001E  
                                                        ?___lwdiv 00B0  
                                                        ?___lwmod 00B7  
                                                  ?_ringBufferLUT 00C8  
                               _EUSART2_TxDefaultInterruptHandler 004B  
                                                __CFG_PPS1WAY$OFF 000000  
                                       i2_MTOUCH_Sensor_isEnabled 2092  
                                             ??_Sensor_setSampled 0003  
                                       ??_MTOUCH_Service_Mainloop 00C6  
                                          ?_MTOUCH_Sensor_Service 0001  
                                     __size_of_Sensor_setInactive 0012  
                                                        _BAUD2CON 000EF7  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0001  
                                                  __size_ofi2_abs 0028  
                                   ??_Sensor_isCalibratingAcqTime 00B2  
                                                   ??_MTOUCH_Tick 00B5  
                                       i2Sensor_SetTrisBit@sensor 0002  
                                        ?_MTOUCH_Button_State_Get 0001  
                                                ___lwdiv@quotient 00B5  
                                                     ??i2___lwdiv 0005  
                                                     ??i2___lwmod 000C  
                                                  __size_of_putch 000E  
                                            _INTERRUPT_Initialize 244C  
                                    __size_of_EUSART2_Receive_ISR 00A2  
                                       __end_of_Sensor_setSampled 2416  
                                                ?i2_EUSART2_Write 0001  
                                                        _LATFbits 000F7E  
                                         _Sensor_RawSample_Update 1C2C  
                               __end_of_Sensor_setCalibratAcqTime 2124  
                                                        _IPR1bits 000E20  
                                                        _IPR3bits 000E22  
                                                        _PIE1bits 000E2A  
                                                        _PIE3bits 000E2C  
                                                        i2u300_45 198E  
                                                        i2u300_46 1990  
                                                        i2u301_45 199A  
                                                        i2u301_46 199C  
                                                        i2u302_45 19A6  
                                                        i2u302_46 19A8  
                                                        i2u303_45 19B2  
                                                        i2u303_46 19B4  
                                                        i2u305_40 20BC  
                                                        i2u401_40 159C  
                                                        i2u306_40 23A2  
                                                        i2u307_40 23BA  
                                                        i2u309_40 208A  
                                                        i2u414_48 005E  
                                                        i2u360_40 0A78  
                                                        i2u344_45 0BF2  
                                                        _PIR1bits 000E34  
                                                        i2u361_45 0A7A  
                                                        i2u417_48 0078  
                                                        i2u355_40 0972  
                                                        i2u363_40 1B5E  
                                                        _PIR3bits 000E36  
                                                        i2u366_40 1D1E  
                                                        i2u359_45 0A5E  
                                                        i2u392_40 0D9A  
                                                        i2u394_40 0E08  
                                                        i2u299_45 1982  
                                                        i2u299_46 1984  
                                          ??_Button_State_Pressed 00BB  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 20F4  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0030  
                                  _MTOUCH_Sensor_Sampled_ResetAll 20C4  
                                        ?_MTOUCH_Sensor_SampleAll 0001  
                                              _mtouch_sensor_init FC25  
                                     ??i2_Sensor_scheduleNextScan 0003  
                                     ?i2_MTOUCH_Sensor_wasSampled 0001  
                                        _MTOUCH_Sensor_wasSampled 1FC6  
                                              _mtouch_time_toScan 003C  
                                __size_of_Sensor_FrequencyHopping 0024  
                                        ??_Button_Baseline_Update 00B2  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 00C1  
                                                      _ADCON0bits 000F60  
                                          _Sensor_autoCalibration 0BC0  
                                      __end_of_MTOUCH_needReburst 2462  
                                                      printf@flag 00C3  
                                                      printf@prec 00C4  
                                                        _WPUEbits 000EAE  
                                   __size_of_EUSART2_Transmit_ISR 0032  
                                                        i2_printf 0CF4  
                                            _MTOUCH_Sensor_Enable 217A  
                                                       copy_data0 174A  
                                                       copy_data1 176A  
                                        Button_Tick_helper@button 00B0  
                                       ??_Button_Deviation_Update 00B2  
                                           ?_INTERRUPT_Initialize 0001  
                                           _Button_Reading_Update 22B0  
                                        ?_MTOUCH_Button_isPressed 0001  
                                               ?_Sensor_isEnabled 00B0  
                                             __end_of_MTOUCH_Tick 248C  
                                               _MTOUCH_Initialize 23BE  
                                 __end_of_MTOUCH_Sensor_Calibrate 221A  
                                                __size_ofi2_putch 000A  
                                              ??_Sensor_isEnabled 00B2  
                                              ?_MTOUCH_Initialize 0001  
                                                        __Hrparam 0000  
                           __end_of_EUSART2_SetRxInterruptHandler 2440  
                          __size_of_EUSART2_SetRxInterruptHandler 000E  
                                   _EUSART2_SetRxInterruptHandler 2432  
                                                       memcpy@tmp 00B6  
                                                        __Lrparam 0000  
                                              __CFG_BOREN$SBORDIS 000000  
                                                 ??_ringBufferLUT 00CA  
                                                    _sample_delay 0038  
                               Sensor_postAcquisitionProcess@name 00C1  
                                         ??_OSCILLATOR_Initialize 00B0  
                              __end_of_Button_Baseline_Initialize 1A38  
                                      _Button_Baseline_Initialize 19D8  
                                             ??_MTOUCH_Initialize 00BC  
                                                __size_of___lwdiv 0054  
                                                __size_of___lwmod 0044  
                                        ?_Button_State_NotPressed 00B9  
                                     i2Sensor_isCalibrated@sensor 0001  
                                              Button_Service@name 00C1  
                                                      _ANSELEbits 000EAF  
                                 __end_of_MTOUCH_Button_State_Get 2150  
                                        ?_MTOUCH_Sensor_isEnabled 0001  
                                               ?_Sensor_setActive 00B0  
                                                 ___lwdiv@divisor 00B2  
                                              ??_Sensor_setActive 00B2  
                                                 ___lwdiv@counter 00B4  
                                           ?_MTOUCH_Sensor_Enable 0001  
                                                        __ptext10 1D84  
                                                        __ptext11 1CC0  
                                                        __ptext20 1EEA  
                                                        __ptext12 1A96  
                                                        __ptext21 17B0  
                                                        __ptext13 230E  
                                                        __ptext30 2458  
                                                        __ptext22 217A  
                                                        __ptext14 22F2  
                                                        __ptext31 2486  
                                                        __ptext23 1F22  
                                                        __ptext15 169C  
                                                        __ptext40 1910  
                                                        __ptext32 21CA  
                                                        __ptext24 1BDE  
                                                        __ptext16 2376  
                                                        __ptext41 1F92  
                                                        __ptext33 1AEA  
                                                        __ptext25 244C  
                                                        __ptext17 23BE  
                                                        __ptext50 2490  
                                                        __ptext42 2268  
                                                        __ptext34 20C4  
                                                        __ptext26 1A38  
                                                        __ptext18 2480  
                                                        __ptext51 04EC  
                                                        __ptext43 228C  
                                                        __ptext35 23D0  
                                                        __ptext27 2424  
                                                        __ptext19 1DC2  
                                                        __ptext60 1152  
                                                        __ptext52 2150  
                                                        __ptext44 123E  
                                                        __ptext36 1C7A  
                                                        __ptext28 2432  
                                                        __ptext61 182A  
                                                        __ptext53 248C  
                                                        __ptext45 23E2  
                                                        __ptext37 0678  
                                                        __ptext29 21A2  
                                                        __ptext70 2124  
                                                        __ptext62 21F2  
                                                        __ptext54 235C  
                                                        __ptext46 23F4  
                                                        __ptext38 2328  
                                                        __ptext63 2492  
                                                        __ptext55 13F4  
                                                        __ptext47 2242  
                                                        __ptext39 2342  
                                                        __ptext80 18A0  
                                                        __ptext72 202E  
                                                        __ptext64 1052  
                                                        __ptext56 1FC6  
                                                        __ptext48 1C2C  
                                                        __ptext81 0934  
                                                        __ptext73 1560  
                                                        __ptext65 19D8  
                                                        __ptext57 1FFA  
                                                        __ptext49 0298  
                                                        __ptext90 22D4  
                                                        __ptext82 238E  
                                                        __ptext74 0CF4  
                                                        __ptext66 22B0  
                                                        __ptext58 07E2  
                                                        __ptext91 20F4  
                                                        __ptext83 1976  
                                                        __ptext75 2462  
                                                        __ptext67 14B8  
                                                        __ptext59 1328  
                                                        __ptext92 0000  
                                                        __ptext84 2060  
                                                        __ptext76 1E3C  
                                                        __ptext68 1F5A  
                                                        __ptext85 2092  
                                                        __ptext77 1D04  
                                                        __ptext69 0F40  
                                                        __ptext86 2406  
                                                        __ptext78 1B3C  
                                                        __ptext87 0BC0  
                                                        __ptext79 246C  
                                                        __ptext88 221A  
                                                        __ptext89 23A6  
                                       i2_Sensor_scheduleNextScan 0934  
                                       __end_of_MTOUCH_Initialize 23D0  
                                       ??_Sensor_RawSample_Update 00B9  
                                     __size_of_EUSART2_Initialize 005E  
                                                        _freq_hop 00DE  
                                      __size_of_Sensor_setSampled 0010  
                                               _currentScanSensor 003B  
                                                   __size_of_main 009A  
                                 __end_of_MTOUCH_Sensor_SampleAll 1CC0  
                                            __CFG_WDTCWS$WDTCWS_7 000000  
                                      Sensor_autoCalibration@name 000D  
                                    __size_ofi2_Sensor_SetTrisBit 0062  
                                   MTOUCH_needReburst@needReburst 00B0  
                                              __CFG_BORV$VBOR_190 000000  
                                                      _RC2STAbits 000EF5  
                                                        int$flags 004F  
                              __size_of_Button_State_Initializing 00CC  
                                                       printf@val 00C5  
                                 __size_of_Button_Baseline_Update 0100  
                                    ?_MTOUCH_Button_InitializeAll 0001  
                                    ?_MTOUCH_Sensor_InitializeAll 0001  
                                                   _mtouch_button 0140  
                                                      _INTCONbits 000FF2  
                                                   _mtouch_sensor 0083  
                                                        memcpy@d1 00B0  
                                                        memcpy@s1 00B2  
                                 __end_of_MTOUCH_Button_isPressed 1EEA  
                                        ??_Sensor_setSamplePeriod 00B0  
                                      ??_MTOUCH_Sensor_isSampling 00B0  
                                          ??_INTERRUPT_Initialize 00B0  
                                                     _MTOUCH_Tick 2486  
                                          ?_Button_Reading_Update 00B7  
                                Button_Deviation_Update@deviation 00B8  
                                    MTOUCH_Button_Initialize@name 00B1  
                               __size_of_MTOUCH_Button_Initialize 0076  
                                                        intlevel2 0000  
                                       ?_MTOUCH_Button_Initialize 0001  
                                                ___lwmod@dividend 00B7  
                                         ?_PIN_MANAGER_Initialize 0001  
                               __size_of_ADCC_ThresholdISR_mTouch 000A  
                                     ??_Sensor_setCalibratAcqTime 0003  
                                       ?_ADCC_ThresholdISR_mTouch 0001  
                                               __CFG_CLKOUTEN$OFF 000000  
                                     ?_MTOUCH_Sensor_isCalibrated 0001  
                Sensor_FrequencyHopping_Autotune_Process@variance 00BB  
                                    Sensor_scheduleNextScan@state 00B4  
                                     __size_of_Button_Tick_helper 0052  
                                 __end_of_Button_State_NotPressed 0934  
                                                        printf@ap 00C1  
                                         _Sensor_FrequencyHopping 2268  
                                         ??_MTOUCH_Sensor_Service 000E  
                                  ?_EUSART2_SetRxInterruptHandler 00B0  
                                    __end_of_Sensor_Sampled_Reset 23E2  
                                 __end_of_MTOUCH_Sensor_isEnabled 1FC6  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                          __size_of_EUSART2_Write 003E  
                                             _EUSART2_Receive_ISR 1560  
                               i2Sensor_scheduleNextScan@skipScan 0006  
                                 Sensor_scheduleNextScan@skipScan 00B5  
                          __end_of_INTERRUPT_InterruptManagerHigh 00E4  
                         __size_of_INTERRUPT_InterruptManagerHigh 00DC  
                                  _INTERRUPT_InterruptManagerHigh 0008  
                                                      _RX2PPSbits 000E11  
                                   ??_MTOUCH_Button_InitializeAll 00BB  
                                                        strcmp@s1 00B0  
                                                        strcmp@s2 00B2  
                                               ringBufferLUT@line 00C8  
                                        ??_Button_DefaultCallback 00B0  
                                                 ___lwmod@divisor 00B9  
                                   ??_MTOUCH_Sensor_InitializeAll 00BB  
                                __size_of_MTOUCH_Sensor_Calibrate 0028  
                                                        strlen@cp 00B4  
                                                 ___lwmod@counter 00BB  
                                          ??_MTOUCH_Sensor_Enable 00B0  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 00BA  
                             i2Sensor_isCalibratingAcqTime@sensor 0001  
                               Sensor_isCalibratingAcqTime@sensor 00B0  
                                    __size_of_Sensor_isCalibrated 001A  
                                        ??_Sensor_DefaultCallback 00B0  
                                    __end_of_Sensor_setCalibrated 22F2  
                            __end_of_Button_Reading_Update_Helper 1560  
                           __size_of_Button_Reading_Update_Helper 00A8  
                                    _Button_Reading_Update_Helper 14B8  
                                                      _TX2STAbits 000EF6  
                               __size_of_MTOUCH_Button_ServiceAll 001A  
                                       ?_MTOUCH_Button_ServiceAll 0001  
                                   Button_State_NotPressed@button 00B9  
                                      __size_of_MTOUCH_Initialize 0012  
                                  __end_of_PIN_MANAGER_Initialize 1736  
                                          _Button_Baseline_Update 1052  
                                 ??_EUSART2_SetTxInterruptHandler 00B3  
                                            ?_EUSART2_Receive_ISR 0001  
                                        ?_Sensor_scheduleNextScan 0001  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 00B0  
                                     MTOUCH_Button_isPressed@name 00B1  
                                      ??_MTOUCH_Sensor_wasSampled 00B0  
                               _EUSART2_RxDefaultInterruptHandler 00E1  
                                __size_of_MTOUCH_Button_State_Get 002C  
                                           i2_Sensor_isCalibrated 238E  
