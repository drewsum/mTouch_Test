

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep 02 18:48:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   123                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   124  0000                     
   125                           ; Version 1.45 (B)
   126                           ; Generated 30/01/2018 GMT
   127                           ; 
   128                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution.
   142                           ; 
   143                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   144                           ;        software without specific prior written permission.
   145                           ; 
   146                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   147                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   148                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   149                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   150                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   151                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   152                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   153                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   154                           ; 
   155                           ; 
   156                           ; Code-generator required, PIC18LF67K40 Definitions
   157                           ; 
   158                           ; SFR Addresses
   159  0000                     
   160                           	psect	idataCOMRAM
   161  012766                     __pidataCOMRAM:
   162                           	opt stack 0
   163                           
   164                           ;initializer for _callback_sampled
   165  012766  6A                 	db	low _Sensor_DefaultCallback
   166  012767  27                 	db	high _Sensor_DefaultCallback
   167  012768  01                 	db	low (_Sensor_DefaultCallback shr (0+16))
   168                           
   169                           	psect	idataBANK0
   170  012650                     __pidataBANK0:
   171                           	opt stack 0
   172                           
   173                           ;initializer for _Button_StateMachine
   174  012650  9C                 	db	low _Button_State_Initializing
   175  012651  15                 	db	high _Button_State_Initializing
   176  012652  01                 	db	low (_Button_State_Initializing shr (0+16))
   177  012653  F0                 	db	low _Button_State_NotPressed
   178  012654  04                 	db	high _Button_State_NotPressed
   179  012655  01                 	db	low (_Button_State_NotPressed shr (0+16))
   180  012656  C4                 	db	low _Button_State_Pressed
   181  012657  13                 	db	high _Button_State_Pressed
   182  012658  01                 	db	low (_Button_State_Pressed shr (0+16))
   183                           
   184                           ;initializer for _callback_notPressed
   185  012659  6C                 	db	low _Button_DefaultCallback
   186  01265A  27                 	db	high _Button_DefaultCallback
   187  01265B  01                 	db	low (_Button_DefaultCallback shr (0+16))
   188                           
   189                           ;initializer for _callback_pressed
   190  01265C  6C                 	db	low _Button_DefaultCallback
   191  01265D  27                 	db	high _Button_DefaultCallback
   192  01265E  01                 	db	low (_Button_DefaultCallback shr (0+16))
   193                           
   194                           ;initializer for _freq_hop
   195  01265F  00                 	db	0
   196  012660  3C                 	db	60
   197  012661  78                 	db	120
   198                           
   199                           	psect	mediumconst
   200  00FB1A                     __pmediumconst:
   201                           	opt stack 0
   202  00FB1A  00                 	db	0
   203  00FB1B                     _dpowers:
   204                           	opt stack 0
   205  00FB1B  0001               	dw	1
   206  00FB1D  000A               	dw	10
   207  00FB1F  0064               	dw	100
   208  00FB21  03E8               	dw	1000
   209  00FB23  2710               	dw	10000
   210  00FB25                     __end_of_dpowers:
   211                           	opt stack 0
   212  00FB25                     _mtouch_button_init:
   213                           	opt stack 0
   214  00FB25  00                 	db	0
   215  00FB26  00                 	db	0
   216  00FB27  00                 	db	0
   217  00FB28  01                 	db	1
   218  00FB29  0000               	dw	0
   219  00FB2B  0000               	dw	0
   220  00FB2D  0000               	dw	0
   221  00FB2F  00                 	db	0
   222  00FB30  0000               	dw	0
   223  00FB32  0000               	dw	0
   224  00FB34  64                 	db	100
   225  00FB35  01                 	db	1
   226  00FB36  01                 	db	1
   227  00FB37  01                 	db	1
   228  00FB38  00                 	db	0
   229  00FB39  01                 	db	1
   230  00FB3A  0000               	dw	0
   231  00FB3C  0000               	dw	0
   232  00FB3E  0000               	dw	0
   233  00FB40  00                 	db	0
   234  00FB41  0000               	dw	0
   235  00FB43  0000               	dw	0
   236  00FB45  64                 	db	100
   237  00FB46  01                 	db	1
   238  00FB47  02                 	db	2
   239  00FB48  02                 	db	2
   240  00FB49  00                 	db	0
   241  00FB4A  01                 	db	1
   242  00FB4B  0000               	dw	0
   243  00FB4D  0000               	dw	0
   244  00FB4F  0000               	dw	0
   245  00FB51  00                 	db	0
   246  00FB52  0000               	dw	0
   247  00FB54  0000               	dw	0
   248  00FB56  64                 	db	100
   249  00FB57  01                 	db	1
   250  00FB58  03                 	db	3
   251  00FB59  03                 	db	3
   252  00FB5A  00                 	db	0
   253  00FB5B  01                 	db	1
   254  00FB5C  0000               	dw	0
   255  00FB5E  0000               	dw	0
   256  00FB60  0000               	dw	0
   257  00FB62  00                 	db	0
   258  00FB63  0000               	dw	0
   259  00FB65  0000               	dw	0
   260  00FB67  64                 	db	100
   261  00FB68  01                 	db	1
   262  00FB69  04                 	db	4
   263  00FB6A  04                 	db	4
   264  00FB6B  00                 	db	0
   265  00FB6C  01                 	db	1
   266  00FB6D  0000               	dw	0
   267  00FB6F  0000               	dw	0
   268  00FB71  0000               	dw	0
   269  00FB73  00                 	db	0
   270  00FB74  0000               	dw	0
   271  00FB76  0000               	dw	0
   272  00FB78  64                 	db	100
   273  00FB79  01                 	db	1
   274  00FB7A                     __end_of_mtouch_button_init:
   275                           	opt stack 0
   276  00FB7A                     _mtouch_sensor_init:
   277                           	opt stack 0
   278  00FB7A  00                 	db	0
   279  00FB7B  22                 	db	34
   280  00FB7C  50                 	db	80
   281  00FB7D  28                 	db	40
   282  00FB7E  20                 	db	32
   283  00FB7F  00                 	db	0
   284  00FB80  0000               	dw	0
   285  00FB82  00                 	db	0
   286  00FB83  01                 	db	1
   287  00FB84  23                 	db	35
   288  00FB85  50                 	db	80
   289  00FB86  28                 	db	40
   290  00FB87  20                 	db	32
   291  00FB88  00                 	db	0
   292  00FB89  0000               	dw	0
   293  00FB8B  00                 	db	0
   294  00FB8C  02                 	db	2
   295  00FB8D  24                 	db	36
   296  00FB8E  50                 	db	80
   297  00FB8F  28                 	db	40
   298  00FB90  20                 	db	32
   299  00FB91  00                 	db	0
   300  00FB92  0000               	dw	0
   301  00FB94  00                 	db	0
   302  00FB95  03                 	db	3
   303  00FB96  25                 	db	37
   304  00FB97  50                 	db	80
   305  00FB98  28                 	db	40
   306  00FB99  20                 	db	32
   307  00FB9A  00                 	db	0
   308  00FB9B  0000               	dw	0
   309  00FB9D  00                 	db	0
   310  00FB9E  04                 	db	4
   311  00FB9F  26                 	db	38
   312  00FBA0  50                 	db	80
   313  00FBA1  28                 	db	40
   314  00FBA2  20                 	db	32
   315  00FBA3  00                 	db	0
   316  00FBA4  0000               	dw	0
   317  00FBA6  00                 	db	0
   318  00FBA7                     __end_of_mtouch_sensor_init:
   319                           	opt stack 0
   320  00FBA7                     STR_9:
   321  00FBA7  20                 	db	32
   322  00FBA8  20                 	db	32
   323  00FBA9  20                 	db	32
   324  00FBAA  20                 	db	32
   325  00FBAB  42                 	db	66	;'B'
   326  00FBAC  6F                 	db	111	;'o'
   327  00FBAD  6F                 	db	111	;'o'
   328  00FBAE  74                 	db	116	;'t'
   329  00FBAF  20                 	db	32
   330  00FBB0  63                 	db	99	;'c'
   331  00FBB1  6F                 	db	111	;'o'
   332  00FBB2  6D                 	db	109	;'m'
   333  00FBB3  70                 	db	112	;'p'
   334  00FBB4  6C                 	db	108	;'l'
   335  00FBB5  65                 	db	101	;'e'
   336  00FBB6  74                 	db	116	;'t'
   337  00FBB7  65                 	db	101	;'e'
   338  00FBB8  0A                 	db	10
   339  00FBB9  0D                 	db	13
   340  00FBBA  20                 	db	32
   341  00FBBB  20                 	db	32
   342  00FBBC  20                 	db	32
   343  00FBBD  20                 	db	32
   344  00FBBE  50                 	db	80	;'P'
   345  00FBBF  49                 	db	73	;'I'
   346  00FBC0  43                 	db	67	;'C'
   347  00FBC1  31                 	db	49	;'1'
   348  00FBC2  38                 	db	56	;'8'
   349  00FBC3  46                 	db	70	;'F'
   350  00FBC4  36                 	db	54	;'6'
   351  00FBC5  37                 	db	55	;'7'
   352  00FBC6  4B                 	db	75	;'K'
   353  00FBC7  34                 	db	52	;'4'
   354  00FBC8  30                 	db	48	;'0'
   355  00FBC9  20                 	db	32
   356  00FBCA  6D                 	db	109	;'m'
   357  00FBCB  54                 	db	84	;'T'
   358  00FBCC  6F                 	db	111	;'o'
   359  00FBCD  75                 	db	117	;'u'
   360  00FBCE  63                 	db	99	;'c'
   361  00FBCF  68                 	db	104	;'h'
   362  00FBD0  20                 	db	32
   363  00FBD1  54                 	db	84	;'T'
   364  00FBD2  65                 	db	101	;'e'
   365  00FBD3  73                 	db	115	;'s'
   366  00FBD4  74                 	db	116	;'t'
   367  00FBD5  20                 	db	32
   368  00FBD6  42                 	db	66	;'B'
   369  00FBD7  6F                 	db	111	;'o'
   370  00FBD8  61                 	db	97	;'a'
   371  00FBD9  72                 	db	114	;'r'
   372  00FBDA  64                 	db	100	;'d'
   373  00FBDB  0A                 	db	10
   374  00FBDC  0D                 	db	13
   375  00FBDD  20                 	db	32
   376  00FBDE  20                 	db	32
   377  00FBDF  20                 	db	32
   378  00FBE0  20                 	db	32
   379  00FBE1  45                 	db	69	;'E'
   380  00FBE2  76                 	db	118	;'v'
   381  00FBE3  61                 	db	97	;'a'
   382  00FBE4  6C                 	db	108	;'l'
   383  00FBE5  75                 	db	117	;'u'
   384  00FBE6  61                 	db	97	;'a'
   385  00FBE7  74                 	db	116	;'t'
   386  00FBE8  65                 	db	101	;'e'
   387  00FBE9  73                 	db	115	;'s'
   388  00FBEA  20                 	db	32
   389  00FBEB  74                 	db	116	;'t'
   390  00FBEC  68                 	db	104	;'h'
   391  00FBED  65                 	db	101	;'e'
   392  00FBEE  20                 	db	32
   393  00FBEF  6D                 	db	109	;'m'
   394  00FBF0  54                 	db	84	;'T'
   395  00FBF1  6F                 	db	111	;'o'
   396  00FBF2  75                 	db	117	;'u'
   397  00FBF3  63                 	db	99	;'c'
   398  00FBF4  68                 	db	104	;'h'
   399  00FBF5  20                 	db	32
   400  00FBF6  63                 	db	99	;'c'
   401  00FBF7  61                 	db	97	;'a'
   402  00FBF8  70                 	db	112	;'p'
   403  00FBF9  61                 	db	97	;'a'
   404  00FBFA  63                 	db	99	;'c'
   405  00FBFB  69                 	db	105	;'i'
   406  00FBFC  74                 	db	116	;'t'
   407  00FBFD  69                 	db	105	;'i'
   408  00FBFE  76                 	db	118	;'v'
   409  00FBFF  65                 	db	101	;'e'
   410  00FC00  20                 	db	32
   411  00FC01  74                 	db	116	;'t'
   412  00FC02  6F                 	db	111	;'o'
   413  00FC03  75                 	db	117	;'u'
   414  00FC04  63                 	db	99	;'c'
   415  00FC05  68                 	db	104	;'h'
   416  00FC06  20                 	db	32
   417  00FC07  6C                 	db	108	;'l'
   418  00FC08  69                 	db	105	;'i'
   419  00FC09  62                 	db	98	;'b'
   420  00FC0A  72                 	db	114	;'r'
   421  00FC0B  61                 	db	97	;'a'
   422  00FC0C  72                 	db	114	;'r'
   423  00FC0D  79                 	db	121	;'y'
   424  00FC0E  20                 	db	32
   425  00FC0F  64                 	db	100	;'d'
   426  00FC10  69                 	db	105	;'i'
   427  00FC11  73                 	db	115	;'s'
   428  00FC12  74                 	db	116	;'t'
   429  00FC13  72                 	db	114	;'r'
   430  00FC14  69                 	db	105	;'i'
   431  00FC15  62                 	db	98	;'b'
   432  00FC16  75                 	db	117	;'u'
   433  00FC17  74                 	db	116	;'t'
   434  00FC18  65                 	db	101	;'e'
   435  00FC19  64                 	db	100	;'d'
   436  00FC1A  20                 	db	32
   437  00FC1B  62                 	db	98	;'b'
   438  00FC1C  79                 	db	121	;'y'
   439  00FC1D  20                 	db	32
   440  00FC1E  4D                 	db	77	;'M'
   441  00FC1F  69                 	db	105	;'i'
   442  00FC20  63                 	db	99	;'c'
   443  00FC21  72                 	db	114	;'r'
   444  00FC22  6F                 	db	111	;'o'
   445  00FC23  63                 	db	99	;'c'
   446  00FC24  68                 	db	104	;'h'
   447  00FC25  69                 	db	105	;'i'
   448  00FC26  70                 	db	112	;'p'
   449  00FC27  0A                 	db	10
   450  00FC28  0D                 	db	13
   451  00FC29  20                 	db	32
   452  00FC2A  20                 	db	32
   453  00FC2B  20                 	db	32
   454  00FC2C  20                 	db	32
   455  00FC2D  53                 	db	83	;'S'
   456  00FC2E  65                 	db	101	;'e'
   457  00FC2F  74                 	db	116	;'t'
   458  00FC30  73                 	db	115	;'s'
   459  00FC31  20                 	db	32
   460  00FC32  74                 	db	116	;'t'
   461  00FC33  68                 	db	104	;'h'
   462  00FC34  65                 	db	101	;'e'
   463  00FC35  20                 	db	32
   464  00FC36  73                 	db	115	;'s'
   465  00FC37  74                 	db	116	;'t'
   466  00FC38  61                 	db	97	;'a'
   467  00FC39  74                 	db	116	;'t'
   468  00FC3A  65                 	db	101	;'e'
   469  00FC3B  20                 	db	32
   470  00FC3C  6F                 	db	111	;'o'
   471  00FC3D  66                 	db	102	;'f'
   472  00FC3E  20                 	db	32
   473  00FC3F  66                 	db	102	;'f'
   474  00FC40  69                 	db	105	;'i'
   475  00FC41  76                 	db	118	;'v'
   476  00FC42  65                 	db	101	;'e'
   477  00FC43  20                 	db	32
   478  00FC44  4C                 	db	76	;'L'
   479  00FC45  45                 	db	69	;'E'
   480  00FC46  44                 	db	68	;'D'
   481  00FC47  73                 	db	115	;'s'
   482  00FC48  20                 	db	32
   483  00FC49  62                 	db	98	;'b'
   484  00FC4A  61                 	db	97	;'a'
   485  00FC4B  73                 	db	115	;'s'
   486  00FC4C  65                 	db	101	;'e'
   487  00FC4D  64                 	db	100	;'d'
   488  00FC4E  20                 	db	32
   489  00FC4F  6F                 	db	111	;'o'
   490  00FC50  6E                 	db	110	;'n'
   491  00FC51  20                 	db	32
   492  00FC52  6D                 	db	109	;'m'
   493  00FC53  54                 	db	84	;'T'
   494  00FC54  6F                 	db	111	;'o'
   495  00FC55  75                 	db	117	;'u'
   496  00FC56  63                 	db	99	;'c'
   497  00FC57  68                 	db	104	;'h'
   498  00FC58  20                 	db	32
   499  00FC59  63                 	db	99	;'c'
   500  00FC5A  61                 	db	97	;'a'
   501  00FC5B  70                 	db	112	;'p'
   502  00FC5C  61                 	db	97	;'a'
   503  00FC5D  63                 	db	99	;'c'
   504  00FC5E  69                 	db	105	;'i'
   505  00FC5F  74                 	db	116	;'t'
   506  00FC60  69                 	db	105	;'i'
   507  00FC61  76                 	db	118	;'v'
   508  00FC62  65                 	db	101	;'e'
   509  00FC63  20                 	db	32
   510  00FC64  70                 	db	112	;'p'
   511  00FC65  75                 	db	117	;'u'
   512  00FC66  73                 	db	115	;'s'
   513  00FC67  68                 	db	104	;'h'
   514  00FC68  62                 	db	98	;'b'
   515  00FC69  75                 	db	117	;'u'
   516  00FC6A  74                 	db	116	;'t'
   517  00FC6B  74                 	db	116	;'t'
   518  00FC6C  6F                 	db	111	;'o'
   519  00FC6D  6E                 	db	110	;'n'
   520  00FC6E  73                 	db	115	;'s'
   521  00FC6F  0A                 	db	10
   522  00FC70  0D                 	db	13
   523  00FC71  20                 	db	32
   524  00FC72  20                 	db	32
   525  00FC73  20                 	db	32
   526  00FC74  20                 	db	32
   527  00FC75  42                 	db	66	;'B'
   528  00FC76  61                 	db	97	;'a'
   529  00FC77  75                 	db	117	;'u'
   530  00FC78  64                 	db	100	;'d'
   531  00FC79  20                 	db	32
   532  00FC7A  72                 	db	114	;'r'
   533  00FC7B  61                 	db	97	;'a'
   534  00FC7C  74                 	db	116	;'t'
   535  00FC7D  65                 	db	101	;'e'
   536  00FC7E  3A                 	db	58	;':'
   537  00FC7F  20                 	db	32
   538  00FC80  31                 	db	49	;'1'
   539  00FC81  31                 	db	49	;'1'
   540  00FC82  35                 	db	53	;'5'
   541  00FC83  32                 	db	50	;'2'
   542  00FC84  30                 	db	48	;'0'
   543  00FC85  30                 	db	48	;'0'
   544  00FC86  20                 	db	32
   545  00FC87  62                 	db	98	;'b'
   546  00FC88  70                 	db	112	;'p'
   547  00FC89  73                 	db	115	;'s'
   548  00FC8A  0A                 	db	10
   549  00FC8B  0D                 	db	13
   550  00FC8C  20                 	db	32
   551  00FC8D  20                 	db	32
   552  00FC8E  20                 	db	32
   553  00FC8F  20                 	db	32
   554  00FC90  4E                 	db	78	;'N'
   555  00FC91  6F                 	db	111	;'o'
   556  00FC92  20                 	db	32
   557  00FC93  70                 	db	112	;'p'
   558  00FC94  61                 	db	97	;'a'
   559  00FC95  72                 	db	114	;'r'
   560  00FC96  69                 	db	105	;'i'
   561  00FC97  74                 	db	116	;'t'
   562  00FC98  79                 	db	121	;'y'
   563  00FC99  2C                 	db	44
   564  00FC9A  20                 	db	32
   565  00FC9B  38                 	db	56	;'8'
   566  00FC9C  20                 	db	32
   567  00FC9D  62                 	db	98	;'b'
   568  00FC9E  69                 	db	105	;'i'
   569  00FC9F  74                 	db	116	;'t'
   570  00FCA0  73                 	db	115	;'s'
   571  00FCA1  2C                 	db	44
   572  00FCA2  20                 	db	32
   573  00FCA3  6E                 	db	110	;'n'
   574  00FCA4  6F                 	db	111	;'o'
   575  00FCA5  20                 	db	32
   576  00FCA6  66                 	db	102	;'f'
   577  00FCA7  6C                 	db	108	;'l'
   578  00FCA8  6F                 	db	111	;'o'
   579  00FCA9  77                 	db	119	;'w'
   580  00FCAA  20                 	db	32
   581  00FCAB  63                 	db	99	;'c'
   582  00FCAC  6F                 	db	111	;'o'
   583  00FCAD  6E                 	db	110	;'n'
   584  00FCAE  74                 	db	116	;'t'
   585  00FCAF  72                 	db	114	;'r'
   586  00FCB0  6F                 	db	111	;'o'
   587  00FCB1  6C                 	db	108	;'l'
   588  00FCB2  2C                 	db	44
   589  00FCB3  20                 	db	32
   590  00FCB4  31                 	db	49	;'1'
   591  00FCB5  20                 	db	32
   592  00FCB6  73                 	db	115	;'s'
   593  00FCB7  74                 	db	116	;'t'
   594  00FCB8  6F                 	db	111	;'o'
   595  00FCB9  70                 	db	112	;'p'
   596  00FCBA  20                 	db	32
   597  00FCBB  62                 	db	98	;'b'
   598  00FCBC  69                 	db	105	;'i'
   599  00FCBD  74                 	db	116	;'t'
   600  00FCBE  0A                 	db	10
   601  00FCBF  0D                 	db	13
   602  00FCC0  20                 	db	32
   603  00FCC1  20                 	db	32
   604  00FCC2  20                 	db	32
   605  00FCC3  20                 	db	32
   606  00FCC4  43                 	db	67	;'C'
   607  00FCC5  6F                 	db	111	;'o'
   608  00FCC6  6D                 	db	109	;'m'
   609  00FCC7  6D                 	db	109	;'m'
   610  00FCC8  61                 	db	97	;'a'
   611  00FCC9  6E                 	db	110	;'n'
   612  00FCCA  64                 	db	100	;'d'
   613  00FCCB  73                 	db	115	;'s'
   614  00FCCC  20                 	db	32
   615  00FCCD  61                 	db	97	;'a'
   616  00FCCE  72                 	db	114	;'r'
   617  00FCCF  65                 	db	101	;'e'
   618  00FCD0  20                 	db	32
   619  00FCD1  63                 	db	99	;'c'
   620  00FCD2  61                 	db	97	;'a'
   621  00FCD3  73                 	db	115	;'s'
   622  00FCD4  65                 	db	101	;'e'
   623  00FCD5  20                 	db	32
   624  00FCD6  73                 	db	115	;'s'
   625  00FCD7  65                 	db	101	;'e'
   626  00FCD8  6E                 	db	110	;'n'
   627  00FCD9  73                 	db	115	;'s'
   628  00FCDA  69                 	db	105	;'i'
   629  00FCDB  74                 	db	116	;'t'
   630  00FCDC  69                 	db	105	;'i'
   631  00FCDD  76                 	db	118	;'v'
   632  00FCDE  65                 	db	101	;'e'
   633  00FCDF  0A                 	db	10
   634  00FCE0  0D                 	db	13
   635  00FCE1  20                 	db	32
   636  00FCE2  20                 	db	32
   637  00FCE3  20                 	db	32
   638  00FCE4  20                 	db	32
   639  00FCE5  45                 	db	69	;'E'
   640  00FCE6  6E                 	db	110	;'n'
   641  00FCE7  74                 	db	116	;'t'
   642  00FCE8  65                 	db	101	;'e'
   643  00FCE9  72                 	db	114	;'r'
   644  00FCEA  20                 	db	32
   645  00FCEB  61                 	db	97	;'a'
   646  00FCEC  20                 	db	32
   647  00FCED  63                 	db	99	;'c'
   648  00FCEE  6F                 	db	111	;'o'
   649  00FCEF  6D                 	db	109	;'m'
   650  00FCF0  6D                 	db	109	;'m'
   651  00FCF1  61                 	db	97	;'a'
   652  00FCF2  6E                 	db	110	;'n'
   653  00FCF3  64                 	db	100	;'d'
   654  00FCF4  2C                 	db	44
   655  00FCF5  20                 	db	32
   656  00FCF6  6F                 	db	111	;'o'
   657  00FCF7  72                 	db	114	;'r'
   658  00FCF8  20                 	db	32
   659  00FCF9  65                 	db	101	;'e'
   660  00FCFA  6E                 	db	110	;'n'
   661  00FCFB  74                 	db	116	;'t'
   662  00FCFC  65                 	db	101	;'e'
   663  00FCFD  72                 	db	114	;'r'
   664  00FCFE  20                 	db	32
   665  00FCFF  48                 	db	72	;'H'
   666  00FD00  65                 	db	101	;'e'
   667  00FD01  6C                 	db	108	;'l'
   668  00FD02  70                 	db	112	;'p'
   669  00FD03  20                 	db	32
   670  00FD04  66                 	db	102	;'f'
   671  00FD05  6F                 	db	111	;'o'
   672  00FD06  72                 	db	114	;'r'
   673  00FD07  20                 	db	32
   674  00FD08  6C                 	db	108	;'l'
   675  00FD09  69                 	db	105	;'i'
   676  00FD0A  73                 	db	115	;'s'
   677  00FD0B  74                 	db	116	;'t'
   678  00FD0C  20                 	db	32
   679  00FD0D  6F                 	db	111	;'o'
   680  00FD0E  66                 	db	102	;'f'
   681  00FD0F  20                 	db	32
   682  00FD10  63                 	db	99	;'c'
   683  00FD11  6F                 	db	111	;'o'
   684  00FD12  6D                 	db	109	;'m'
   685  00FD13  6D                 	db	109	;'m'
   686  00FD14  61                 	db	97	;'a'
   687  00FD15  6E                 	db	110	;'n'
   688  00FD16  64                 	db	100	;'d'
   689  00FD17  73                 	db	115	;'s'
   690  00FD18  0A                 	db	10
   691  00FD19  0D                 	db	13
   692  00FD1A  00                 	db	0
   693  00FD1B                     STR_40:
   694  00FD1B  20                 	db	32
   695  00FD1C  20                 	db	32
   696  00FD1D  20                 	db	32
   697  00FD1E  4C                 	db	76	;'L'
   698  00FD1F  69                 	db	105	;'i'
   699  00FD20  73                 	db	115	;'s'
   700  00FD21  74                 	db	116	;'t'
   701  00FD22  20                 	db	32
   702  00FD23  6F                 	db	111	;'o'
   703  00FD24  66                 	db	102	;'f'
   704  00FD25  20                 	db	32
   705  00FD26  73                 	db	115	;'s'
   706  00FD27  75                 	db	117	;'u'
   707  00FD28  70                 	db	112	;'p'
   708  00FD29  70                 	db	112	;'p'
   709  00FD2A  6F                 	db	111	;'o'
   710  00FD2B  72                 	db	114	;'r'
   711  00FD2C  74                 	db	116	;'t'
   712  00FD2D  65                 	db	101	;'e'
   713  00FD2E  64                 	db	100	;'d'
   714  00FD2F  20                 	db	32
   715  00FD30  63                 	db	99	;'c'
   716  00FD31  6F                 	db	111	;'o'
   717  00FD32  6D                 	db	109	;'m'
   718  00FD33  6D                 	db	109	;'m'
   719  00FD34  61                 	db	97	;'a'
   720  00FD35  6E                 	db	110	;'n'
   721  00FD36  64                 	db	100	;'d'
   722  00FD37  73                 	db	115	;'s'
   723  00FD38  3A                 	db	58	;':'
   724  00FD39  0A                 	db	10
   725  00FD3A  0D                 	db	13
   726  00FD3B  20                 	db	32
   727  00FD3C  20                 	db	32
   728  00FD3D  20                 	db	32
   729  00FD3E  4C                 	db	76	;'L'
   730  00FD3F  45                 	db	69	;'E'
   731  00FD40  44                 	db	68	;'D'
   732  00FD41  73                 	db	115	;'s'
   733  00FD42  20                 	db	32
   734  00FD43  4F                 	db	79	;'O'
   735  00FD44  6E                 	db	110	;'n'
   736  00FD45  3A                 	db	58	;':'
   737  00FD46  20                 	db	32
   738  00FD47  54                 	db	84	;'T'
   739  00FD48  75                 	db	117	;'u'
   740  00FD49  72                 	db	114	;'r'
   741  00FD4A  6E                 	db	110	;'n'
   742  00FD4B  73                 	db	115	;'s'
   743  00FD4C  20                 	db	32
   744  00FD4D  61                 	db	97	;'a'
   745  00FD4E  6C                 	db	108	;'l'
   746  00FD4F  6C                 	db	108	;'l'
   747  00FD50  20                 	db	32
   748  00FD51  4C                 	db	76	;'L'
   749  00FD52  45                 	db	69	;'E'
   750  00FD53  44                 	db	68	;'D'
   751  00FD54  73                 	db	115	;'s'
   752  00FD55  20                 	db	32
   753  00FD56  4F                 	db	79	;'O'
   754  00FD57  6E                 	db	110	;'n'
   755  00FD58  0A                 	db	10
   756  00FD59  0D                 	db	13
   757  00FD5A  20                 	db	32
   758  00FD5B  20                 	db	32
   759  00FD5C  20                 	db	32
   760  00FD5D  4C                 	db	76	;'L'
   761  00FD5E  45                 	db	69	;'E'
   762  00FD5F  44                 	db	68	;'D'
   763  00FD60  73                 	db	115	;'s'
   764  00FD61  20                 	db	32
   765  00FD62  4F                 	db	79	;'O'
   766  00FD63  66                 	db	102	;'f'
   767  00FD64  66                 	db	102	;'f'
   768  00FD65  3A                 	db	58	;':'
   769  00FD66  20                 	db	32
   770  00FD67  54                 	db	84	;'T'
   771  00FD68  75                 	db	117	;'u'
   772  00FD69  72                 	db	114	;'r'
   773  00FD6A  6E                 	db	110	;'n'
   774  00FD6B  73                 	db	115	;'s'
   775  00FD6C  20                 	db	32
   776  00FD6D  61                 	db	97	;'a'
   777  00FD6E  6C                 	db	108	;'l'
   778  00FD6F  6C                 	db	108	;'l'
   779  00FD70  20                 	db	32
   780  00FD71  4C                 	db	76	;'L'
   781  00FD72  45                 	db	69	;'E'
   782  00FD73  44                 	db	68	;'D'
   783  00FD74  73                 	db	115	;'s'
   784  00FD75  20                 	db	32
   785  00FD76  4F                 	db	79	;'O'
   786  00FD77  66                 	db	102	;'f'
   787  00FD78  66                 	db	102	;'f'
   788  00FD79  0A                 	db	10
   789  00FD7A  0D                 	db	13
   790  00FD7B  20                 	db	32
   791  00FD7C  20                 	db	32
   792  00FD7D  20                 	db	32
   793  00FD7E  42                 	db	66	;'B'
   794  00FD7F  75                 	db	117	;'u'
   795  00FD80  74                 	db	116	;'t'
   796  00FD81  74                 	db	116	;'t'
   797  00FD82  6F                 	db	111	;'o'
   798  00FD83  6E                 	db	110	;'n'
   799  00FD84  20                 	db	32
   800  00FD85  53                 	db	83	;'S'
   801  00FD86  74                 	db	116	;'t'
   802  00FD87  61                 	db	97	;'a'
   803  00FD88  74                 	db	116	;'t'
   804  00FD89  65                 	db	101	;'e'
   805  00FD8A  73                 	db	115	;'s'
   806  00FD8B  3F                 	db	63	;'?'
   807  00FD8C  3A                 	db	58	;':'
   808  00FD8D  20                 	db	32
   809  00FD8E  52                 	db	82	;'R'
   810  00FD8F  65                 	db	101	;'e'
   811  00FD90  74                 	db	116	;'t'
   812  00FD91  75                 	db	117	;'u'
   813  00FD92  72                 	db	114	;'r'
   814  00FD93  6E                 	db	110	;'n'
   815  00FD94  73                 	db	115	;'s'
   816  00FD95  20                 	db	32
   817  00FD96  73                 	db	115	;'s'
   818  00FD97  74                 	db	116	;'t'
   819  00FD98  61                 	db	97	;'a'
   820  00FD99  74                 	db	116	;'t'
   821  00FD9A  65                 	db	101	;'e'
   822  00FD9B  20                 	db	32
   823  00FD9C  6F                 	db	111	;'o'
   824  00FD9D  66                 	db	102	;'f'
   825  00FD9E  20                 	db	32
   826  00FD9F  61                 	db	97	;'a'
   827  00FDA0  6C                 	db	108	;'l'
   828  00FDA1  6C                 	db	108	;'l'
   829  00FDA2  20                 	db	32
   830  00FDA3  66                 	db	102	;'f'
   831  00FDA4  69                 	db	105	;'i'
   832  00FDA5  76                 	db	118	;'v'
   833  00FDA6  65                 	db	101	;'e'
   834  00FDA7  20                 	db	32
   835  00FDA8  6D                 	db	109	;'m'
   836  00FDA9  54                 	db	84	;'T'
   837  00FDAA  6F                 	db	111	;'o'
   838  00FDAB  75                 	db	117	;'u'
   839  00FDAC  63                 	db	99	;'c'
   840  00FDAD  68                 	db	104	;'h'
   841  00FDAE  20                 	db	32
   842  00FDAF  62                 	db	98	;'b'
   843  00FDB0  75                 	db	117	;'u'
   844  00FDB1  74                 	db	116	;'t'
   845  00FDB2  74                 	db	116	;'t'
   846  00FDB3  6F                 	db	111	;'o'
   847  00FDB4  6E                 	db	110	;'n'
   848  00FDB5  73                 	db	115	;'s'
   849  00FDB6  0A                 	db	10
   850  00FDB7  0D                 	db	13
   851  00FDB8  20                 	db	32
   852  00FDB9  20                 	db	32
   853  00FDBA  20                 	db	32
   854  00FDBB  52                 	db	82	;'R'
   855  00FDBC  65                 	db	101	;'e'
   856  00FDBD  73                 	db	115	;'s'
   857  00FDBE  65                 	db	101	;'e'
   858  00FDBF  74                 	db	116	;'t'
   859  00FDC0  3A                 	db	58	;':'
   860  00FDC1  20                 	db	32
   861  00FDC2  43                 	db	67	;'C'
   862  00FDC3  6C                 	db	108	;'l'
   863  00FDC4  65                 	db	101	;'e'
   864  00FDC5  61                 	db	97	;'a'
   865  00FDC6  72                 	db	114	;'r'
   866  00FDC7  73                 	db	115	;'s'
   867  00FDC8  20                 	db	32
   868  00FDC9  74                 	db	116	;'t'
   869  00FDCA  68                 	db	104	;'h'
   870  00FDCB  65                 	db	101	;'e'
   871  00FDCC  20                 	db	32
   872  00FDCD  74                 	db	116	;'t'
   873  00FDCE  65                 	db	101	;'e'
   874  00FDCF  72                 	db	114	;'r'
   875  00FDD0  6D                 	db	109	;'m'
   876  00FDD1  69                 	db	105	;'i'
   877  00FDD2  6E                 	db	110	;'n'
   878  00FDD3  61                 	db	97	;'a'
   879  00FDD4  6C                 	db	108	;'l'
   880  00FDD5  20                 	db	32
   881  00FDD6  61                 	db	97	;'a'
   882  00FDD7  6E                 	db	110	;'n'
   883  00FDD8  64                 	db	100	;'d'
   884  00FDD9  20                 	db	32
   885  00FDDA  72                 	db	114	;'r'
   886  00FDDB  65                 	db	101	;'e'
   887  00FDDC  73                 	db	115	;'s'
   888  00FDDD  65                 	db	101	;'e'
   889  00FDDE  74                 	db	116	;'t'
   890  00FDDF  73                 	db	115	;'s'
   891  00FDE0  20                 	db	32
   892  00FDE1  74                 	db	116	;'t'
   893  00FDE2  68                 	db	104	;'h'
   894  00FDE3  65                 	db	101	;'e'
   895  00FDE4  20                 	db	32
   896  00FDE5  6D                 	db	109	;'m'
   897  00FDE6  69                 	db	105	;'i'
   898  00FDE7  63                 	db	99	;'c'
   899  00FDE8  72                 	db	114	;'r'
   900  00FDE9  6F                 	db	111	;'o'
   901  00FDEA  0A                 	db	10
   902  00FDEB  0D                 	db	13
   903  00FDEC  20                 	db	32
   904  00FDED  20                 	db	32
   905  00FDEE  20                 	db	32
   906  00FDEF  43                 	db	67	;'C'
   907  00FDF0  6C                 	db	108	;'l'
   908  00FDF1  65                 	db	101	;'e'
   909  00FDF2  61                 	db	97	;'a'
   910  00FDF3  72                 	db	114	;'r'
   911  00FDF4  3A                 	db	58	;':'
   912  00FDF5  20                 	db	32
   913  00FDF6  43                 	db	67	;'C'
   914  00FDF7  6C                 	db	108	;'l'
   915  00FDF8  65                 	db	101	;'e'
   916  00FDF9  61                 	db	97	;'a'
   917  00FDFA  72                 	db	114	;'r'
   918  00FDFB  73                 	db	115	;'s'
   919  00FDFC  20                 	db	32
   920  00FDFD  74                 	db	116	;'t'
   921  00FDFE  68                 	db	104	;'h'
   922  00FDFF  65                 	db	101	;'e'
   923  00FE00  20                 	db	32
   924  00FE01  74                 	db	116	;'t'
   925  00FE02  65                 	db	101	;'e'
   926  00FE03  72                 	db	114	;'r'
   927  00FE04  6D                 	db	109	;'m'
   928  00FE05  69                 	db	105	;'i'
   929  00FE06  6E                 	db	110	;'n'
   930  00FE07  61                 	db	97	;'a'
   931  00FE08  6C                 	db	108	;'l'
   932  00FE09  20                 	db	32
   933  00FE0A  62                 	db	98	;'b'
   934  00FE0B  75                 	db	117	;'u'
   935  00FE0C  74                 	db	116	;'t'
   936  00FE0D  20                 	db	32
   937  00FE0E  64                 	db	100	;'d'
   938  00FE0F  6F                 	db	111	;'o'
   939  00FE10  65                 	db	101	;'e'
   940  00FE11  73                 	db	115	;'s'
   941  00FE12  6E                 	db	110	;'n'
   942  00FE13  27                 	db	39
   943  00FE14  74                 	db	116	;'t'
   944  00FE15  20                 	db	32
   945  00FE16  72                 	db	114	;'r'
   946  00FE17  65                 	db	101	;'e'
   947  00FE18  73                 	db	115	;'s'
   948  00FE19  65                 	db	101	;'e'
   949  00FE1A  74                 	db	116	;'t'
   950  00FE1B  20                 	db	32
   951  00FE1C  74                 	db	116	;'t'
   952  00FE1D  68                 	db	104	;'h'
   953  00FE1E  65                 	db	101	;'e'
   954  00FE1F  20                 	db	32
   955  00FE20  6D                 	db	109	;'m'
   956  00FE21  69                 	db	105	;'i'
   957  00FE22  63                 	db	99	;'c'
   958  00FE23  72                 	db	114	;'r'
   959  00FE24  6F                 	db	111	;'o'
   960  00FE25  0A                 	db	10
   961  00FE26  0D                 	db	13
   962  00FE27  20                 	db	32
   963  00FE28  20                 	db	32
   964  00FE29  20                 	db	32
   965  00FE2A  2A                 	db	42
   966  00FE2B  49                 	db	73	;'I'
   967  00FE2C  44                 	db	68	;'D'
   968  00FE2D  4E                 	db	78	;'N'
   969  00FE2E  3F                 	db	63	;'?'
   970  00FE2F  3A                 	db	58	;':'
   971  00FE30  20                 	db	32
   972  00FE31  52                 	db	82	;'R'
   973  00FE32  65                 	db	101	;'e'
   974  00FE33  74                 	db	116	;'t'
   975  00FE34  75                 	db	117	;'u'
   976  00FE35  72                 	db	114	;'r'
   977  00FE36  6E                 	db	110	;'n'
   978  00FE37  73                 	db	115	;'s'
   979  00FE38  20                 	db	32
   980  00FE39  64                 	db	100	;'d'
   981  00FE3A  65                 	db	101	;'e'
   982  00FE3B  76                 	db	118	;'v'
   983  00FE3C  69                 	db	105	;'i'
   984  00FE3D  63                 	db	99	;'c'
   985  00FE3E  65                 	db	101	;'e'
   986  00FE3F  20                 	db	32
   987  00FE40  69                 	db	105	;'i'
   988  00FE41  64                 	db	100	;'d'
   989  00FE42  65                 	db	101	;'e'
   990  00FE43  6E                 	db	110	;'n'
   991  00FE44  74                 	db	116	;'t'
   992  00FE45  69                 	db	105	;'i'
   993  00FE46  66                 	db	102	;'f'
   994  00FE47  69                 	db	105	;'i'
   995  00FE48  63                 	db	99	;'c'
   996  00FE49  61                 	db	97	;'a'
   997  00FE4A  74                 	db	116	;'t'
   998  00FE4B  69                 	db	105	;'i'
   999  00FE4C  6F                 	db	111	;'o'
  1000  00FE4D  6E                 	db	110	;'n'
  1001  00FE4E  0A                 	db	10
  1002  00FE4F  0D                 	db	13
  1003  00FE50  20                 	db	32
  1004  00FE51  20                 	db	32
  1005  00FE52  20                 	db	32
  1006  00FE53  48                 	db	72	;'H'
  1007  00FE54  65                 	db	101	;'e'
  1008  00FE55  6C                 	db	108	;'l'
  1009  00FE56  70                 	db	112	;'p'
  1010  00FE57  3A                 	db	58	;':'
  1011  00FE58  20                 	db	32
  1012  00FE59  54                 	db	84	;'T'
  1013  00FE5A  68                 	db	104	;'h'
  1014  00FE5B  69                 	db	105	;'i'
  1015  00FE5C  73                 	db	115	;'s'
  1016  00FE5D  20                 	db	32
  1017  00FE5E  6D                 	db	109	;'m'
  1018  00FE5F  65                 	db	101	;'e'
  1019  00FE60  73                 	db	115	;'s'
  1020  00FE61  73                 	db	115	;'s'
  1021  00FE62  61                 	db	97	;'a'
  1022  00FE63  67                 	db	103	;'g'
  1023  00FE64  65                 	db	101	;'e'
  1024  00FE65  2C                 	db	44
  1025  00FE66  20                 	db	32
  1026  00FE67  6C                 	db	108	;'l'
  1027  00FE68  69                 	db	105	;'i'
  1028  00FE69  73                 	db	115	;'s'
  1029  00FE6A  74                 	db	116	;'t'
  1030  00FE6B  73                 	db	115	;'s'
  1031  00FE6C  20                 	db	32
  1032  00FE6D  63                 	db	99	;'c'
  1033  00FE6E  6F                 	db	111	;'o'
  1034  00FE6F  6D                 	db	109	;'m'
  1035  00FE70  6D                 	db	109	;'m'
  1036  00FE71  61                 	db	97	;'a'
  1037  00FE72  6E                 	db	110	;'n'
  1038  00FE73  64                 	db	100	;'d'
  1039  00FE74  73                 	db	115	;'s'
  1040  00FE75  0A                 	db	10
  1041  00FE76  0D                 	db	13
  1042  00FE77  00                 	db	0
  1043  00FE78                     STR_2:
  1044  00FE78  20                 	db	32
  1045  00FE79  20                 	db	32
  1046  00FE7A  20                 	db	32
  1047  00FE7B  20                 	db	32
  1048  00FE7C  42                 	db	66	;'B'
  1049  00FE7D  75                 	db	117	;'u'
  1050  00FE7E  74                 	db	116	;'t'
  1051  00FE7F  74                 	db	116	;'t'
  1052  00FE80  6F                 	db	111	;'o'
  1053  00FE81  6E                 	db	110	;'n'
  1054  00FE82  20                 	db	32
  1055  00FE83  30                 	db	48	;'0'
  1056  00FE84  20                 	db	32
  1057  00FE85  68                 	db	104	;'h'
  1058  00FE86  61                 	db	97	;'a'
  1059  00FE87  73                 	db	115	;'s'
  1060  00FE88  20                 	db	32
  1061  00FE89  62                 	db	98	;'b'
  1062  00FE8A  65                 	db	101	;'e'
  1063  00FE8B  65                 	db	101	;'e'
  1064  00FE8C  6E                 	db	110	;'n'
  1065  00FE8D  20                 	db	32
  1066  00FE8E  70                 	db	112	;'p'
  1067  00FE8F  72                 	db	114	;'r'
  1068  00FE90  65                 	db	101	;'e'
  1069  00FE91  73                 	db	115	;'s'
  1070  00FE92  73                 	db	115	;'s'
  1071  00FE93  65                 	db	101	;'e'
  1072  00FE94  64                 	db	100	;'d'
  1073  00FE95  0A                 	db	10
  1074  00FE96  0D                 	db	13
  1075  00FE97  00                 	db	0
  1076  00FE98                     STR_3:
  1077  00FE98  20                 	db	32
  1078  00FE99  20                 	db	32
  1079  00FE9A  20                 	db	32
  1080  00FE9B  20                 	db	32
  1081  00FE9C  42                 	db	66	;'B'
  1082  00FE9D  75                 	db	117	;'u'
  1083  00FE9E  74                 	db	116	;'t'
  1084  00FE9F  74                 	db	116	;'t'
  1085  00FEA0  6F                 	db	111	;'o'
  1086  00FEA1  6E                 	db	110	;'n'
  1087  00FEA2  20                 	db	32
  1088  00FEA3  31                 	db	49	;'1'
  1089  00FEA4  20                 	db	32
  1090  00FEA5  68                 	db	104	;'h'
  1091  00FEA6  61                 	db	97	;'a'
  1092  00FEA7  73                 	db	115	;'s'
  1093  00FEA8  20                 	db	32
  1094  00FEA9  62                 	db	98	;'b'
  1095  00FEAA  65                 	db	101	;'e'
  1096  00FEAB  65                 	db	101	;'e'
  1097  00FEAC  6E                 	db	110	;'n'
  1098  00FEAD  20                 	db	32
  1099  00FEAE  70                 	db	112	;'p'
  1100  00FEAF  72                 	db	114	;'r'
  1101  00FEB0  65                 	db	101	;'e'
  1102  00FEB1  73                 	db	115	;'s'
  1103  00FEB2  73                 	db	115	;'s'
  1104  00FEB3  65                 	db	101	;'e'
  1105  00FEB4  64                 	db	100	;'d'
  1106  00FEB5  0A                 	db	10
  1107  00FEB6  0D                 	db	13
  1108  00FEB7  00                 	db	0
  1109  00FEB8                     STR_4:
  1110  00FEB8  20                 	db	32
  1111  00FEB9  20                 	db	32
  1112  00FEBA  20                 	db	32
  1113  00FEBB  20                 	db	32
  1114  00FEBC  42                 	db	66	;'B'
  1115  00FEBD  75                 	db	117	;'u'
  1116  00FEBE  74                 	db	116	;'t'
  1117  00FEBF  74                 	db	116	;'t'
  1118  00FEC0  6F                 	db	111	;'o'
  1119  00FEC1  6E                 	db	110	;'n'
  1120  00FEC2  20                 	db	32
  1121  00FEC3  32                 	db	50	;'2'
  1122  00FEC4  20                 	db	32
  1123  00FEC5  68                 	db	104	;'h'
  1124  00FEC6  61                 	db	97	;'a'
  1125  00FEC7  73                 	db	115	;'s'
  1126  00FEC8  20                 	db	32
  1127  00FEC9  62                 	db	98	;'b'
  1128  00FECA  65                 	db	101	;'e'
  1129  00FECB  65                 	db	101	;'e'
  1130  00FECC  6E                 	db	110	;'n'
  1131  00FECD  20                 	db	32
  1132  00FECE  70                 	db	112	;'p'
  1133  00FECF  72                 	db	114	;'r'
  1134  00FED0  65                 	db	101	;'e'
  1135  00FED1  73                 	db	115	;'s'
  1136  00FED2  73                 	db	115	;'s'
  1137  00FED3  65                 	db	101	;'e'
  1138  00FED4  64                 	db	100	;'d'
  1139  00FED5  0A                 	db	10
  1140  00FED6  0D                 	db	13
  1141  00FED7  00                 	db	0
  1142  00FED8                     STR_5:
  1143  00FED8  20                 	db	32
  1144  00FED9  20                 	db	32
  1145  00FEDA  20                 	db	32
  1146  00FEDB  20                 	db	32
  1147  00FEDC  42                 	db	66	;'B'
  1148  00FEDD  75                 	db	117	;'u'
  1149  00FEDE  74                 	db	116	;'t'
  1150  00FEDF  74                 	db	116	;'t'
  1151  00FEE0  6F                 	db	111	;'o'
  1152  00FEE1  6E                 	db	110	;'n'
  1153  00FEE2  20                 	db	32
  1154  00FEE3  33                 	db	51	;'3'
  1155  00FEE4  20                 	db	32
  1156  00FEE5  68                 	db	104	;'h'
  1157  00FEE6  61                 	db	97	;'a'
  1158  00FEE7  73                 	db	115	;'s'
  1159  00FEE8  20                 	db	32
  1160  00FEE9  62                 	db	98	;'b'
  1161  00FEEA  65                 	db	101	;'e'
  1162  00FEEB  65                 	db	101	;'e'
  1163  00FEEC  6E                 	db	110	;'n'
  1164  00FEED  20                 	db	32
  1165  00FEEE  70                 	db	112	;'p'
  1166  00FEEF  72                 	db	114	;'r'
  1167  00FEF0  65                 	db	101	;'e'
  1168  00FEF1  73                 	db	115	;'s'
  1169  00FEF2  73                 	db	115	;'s'
  1170  00FEF3  65                 	db	101	;'e'
  1171  00FEF4  64                 	db	100	;'d'
  1172  00FEF5  0A                 	db	10
  1173  00FEF6  0D                 	db	13
  1174  00FEF7  00                 	db	0
  1175  00FEF8                     STR_6:
  1176  00FEF8  20                 	db	32
  1177  00FEF9  20                 	db	32
  1178  00FEFA  20                 	db	32
  1179  00FEFB  20                 	db	32
  1180  00FEFC  42                 	db	66	;'B'
  1181  00FEFD  75                 	db	117	;'u'
  1182  00FEFE  74                 	db	116	;'t'
  1183  00FEFF  74                 	db	116	;'t'
  1184  00FF00  6F                 	db	111	;'o'
  1185  00FF01  6E                 	db	110	;'n'
  1186  00FF02  20                 	db	32
  1187  00FF03  34                 	db	52	;'4'
  1188  00FF04  20                 	db	32
  1189  00FF05  68                 	db	104	;'h'
  1190  00FF06  61                 	db	97	;'a'
  1191  00FF07  73                 	db	115	;'s'
  1192  00FF08  20                 	db	32
  1193  00FF09  62                 	db	98	;'b'
  1194  00FF0A  65                 	db	101	;'e'
  1195  00FF0B  65                 	db	101	;'e'
  1196  00FF0C  6E                 	db	110	;'n'
  1197  00FF0D  20                 	db	32
  1198  00FF0E  70                 	db	112	;'p'
  1199  00FF0F  72                 	db	114	;'r'
  1200  00FF10  65                 	db	101	;'e'
  1201  00FF11  73                 	db	115	;'s'
  1202  00FF12  73                 	db	115	;'s'
  1203  00FF13  65                 	db	101	;'e'
  1204  00FF14  64                 	db	100	;'d'
  1205  00FF15  0A                 	db	10
  1206  00FF16  0D                 	db	13
  1207  00FF17  00                 	db	0
  1208  00FF18                     STR_36:
  1209  00FF18  20                 	db	32
  1210  00FF19  20                 	db	32
  1211  00FF1A  20                 	db	32
  1212  00FF1B  20                 	db	32
  1213  00FF1C  6D                 	db	109	;'m'
  1214  00FF1D  54                 	db	84	;'T'
  1215  00FF1E  6F                 	db	111	;'o'
  1216  00FF1F  75                 	db	117	;'u'
  1217  00FF20  63                 	db	99	;'c'
  1218  00FF21  68                 	db	104	;'h'
  1219  00FF22  20                 	db	32
  1220  00FF23  54                 	db	84	;'T'
  1221  00FF24  65                 	db	101	;'e'
  1222  00FF25  73                 	db	115	;'s'
  1223  00FF26  74                 	db	116	;'t'
  1224  00FF27  20                 	db	32
  1225  00FF28  42                 	db	66	;'B'
  1226  00FF29  6F                 	db	111	;'o'
  1227  00FF2A  61                 	db	97	;'a'
  1228  00FF2B  72                 	db	114	;'r'
  1229  00FF2C  64                 	db	100	;'d'
  1230  00FF2D  2C                 	db	44
  1231  00FF2E  20                 	db	32
  1232  00FF2F  52                 	db	82	;'R'
  1233  00FF30  45                 	db	69	;'E'
  1234  00FF31  56                 	db	86	;'V'
  1235  00FF32  41                 	db	65	;'A'
  1236  00FF33  00                 	db	0
  1237  00FF34                     STR_21:
  1238  00FF34  20                 	db	32
  1239  00FF35  20                 	db	32
  1240  00FF36  20                 	db	32
  1241  00FF37  20                 	db	32
  1242  00FF38  42                 	db	66	;'B'
  1243  00FF39  75                 	db	117	;'u'
  1244  00FF3A  74                 	db	116	;'t'
  1245  00FF3B  74                 	db	116	;'t'
  1246  00FF3C  6F                 	db	111	;'o'
  1247  00FF3D  6E                 	db	110	;'n'
  1248  00FF3E  20                 	db	32
  1249  00FF3F  30                 	db	48	;'0'
  1250  00FF40  3A                 	db	58	;':'
  1251  00FF41  20                 	db	32
  1252  00FF42  25                 	db	37
  1253  00FF43  64                 	db	100	;'d'
  1254  00FF44  0A                 	db	10
  1255  00FF45  0D                 	db	13
  1256  00FF46  00                 	db	0
  1257  00FF47                     STR_22:
  1258  00FF47  20                 	db	32
  1259  00FF48  20                 	db	32
  1260  00FF49  20                 	db	32
  1261  00FF4A  20                 	db	32
  1262  00FF4B  42                 	db	66	;'B'
  1263  00FF4C  75                 	db	117	;'u'
  1264  00FF4D  74                 	db	116	;'t'
  1265  00FF4E  74                 	db	116	;'t'
  1266  00FF4F  6F                 	db	111	;'o'
  1267  00FF50  6E                 	db	110	;'n'
  1268  00FF51  20                 	db	32
  1269  00FF52  31                 	db	49	;'1'
  1270  00FF53  3A                 	db	58	;':'
  1271  00FF54  20                 	db	32
  1272  00FF55  25                 	db	37
  1273  00FF56  64                 	db	100	;'d'
  1274  00FF57  0A                 	db	10
  1275  00FF58  0D                 	db	13
  1276  00FF59  00                 	db	0
  1277  00FF5A                     STR_23:
  1278  00FF5A  20                 	db	32
  1279  00FF5B  20                 	db	32
  1280  00FF5C  20                 	db	32
  1281  00FF5D  20                 	db	32
  1282  00FF5E  42                 	db	66	;'B'
  1283  00FF5F  75                 	db	117	;'u'
  1284  00FF60  74                 	db	116	;'t'
  1285  00FF61  74                 	db	116	;'t'
  1286  00FF62  6F                 	db	111	;'o'
  1287  00FF63  6E                 	db	110	;'n'
  1288  00FF64  20                 	db	32
  1289  00FF65  32                 	db	50	;'2'
  1290  00FF66  3A                 	db	58	;':'
  1291  00FF67  20                 	db	32
  1292  00FF68  25                 	db	37
  1293  00FF69  64                 	db	100	;'d'
  1294  00FF6A  0A                 	db	10
  1295  00FF6B  0D                 	db	13
  1296  00FF6C  00                 	db	0
  1297  00FF6D                     STR_24:
  1298  00FF6D  20                 	db	32
  1299  00FF6E  20                 	db	32
  1300  00FF6F  20                 	db	32
  1301  00FF70  20                 	db	32
  1302  00FF71  42                 	db	66	;'B'
  1303  00FF72  75                 	db	117	;'u'
  1304  00FF73  74                 	db	116	;'t'
  1305  00FF74  74                 	db	116	;'t'
  1306  00FF75  6F                 	db	111	;'o'
  1307  00FF76  6E                 	db	110	;'n'
  1308  00FF77  20                 	db	32
  1309  00FF78  33                 	db	51	;'3'
  1310  00FF79  3A                 	db	58	;':'
  1311  00FF7A  20                 	db	32
  1312  00FF7B  25                 	db	37
  1313  00FF7C  64                 	db	100	;'d'
  1314  00FF7D  0A                 	db	10
  1315  00FF7E  0D                 	db	13
  1316  00FF7F  00                 	db	0
  1317  00FF80                     STR_25:
  1318  00FF80  20                 	db	32
  1319  00FF81  20                 	db	32
  1320  00FF82  20                 	db	32
  1321  00FF83  20                 	db	32
  1322  00FF84  42                 	db	66	;'B'
  1323  00FF85  75                 	db	117	;'u'
  1324  00FF86  74                 	db	116	;'t'
  1325  00FF87  74                 	db	116	;'t'
  1326  00FF88  6F                 	db	111	;'o'
  1327  00FF89  6E                 	db	110	;'n'
  1328  00FF8A  20                 	db	32
  1329  00FF8B  34                 	db	52	;'4'
  1330  00FF8C  3A                 	db	58	;':'
  1331  00FF8D  20                 	db	32
  1332  00FF8E  25                 	db	37
  1333  00FF8F  64                 	db	100	;'d'
  1334  00FF90  0A                 	db	10
  1335  00FF91  0D                 	db	13
  1336  00FF92  00                 	db	0
  1337  00FF93                     STR_13:
  1338  00FF93  20                 	db	32
  1339  00FF94  20                 	db	32
  1340  00FF95  20                 	db	32
  1341  00FF96  20                 	db	32
  1342  00FF97  4C                 	db	76	;'L'
  1343  00FF98  41                 	db	65	;'A'
  1344  00FF99  54                 	db	84	;'T'
  1345  00FF9A  46                 	db	70	;'F'
  1346  00FF9B  20                 	db	32
  1347  00FF9C  3D                 	db	61	;'='
  1348  00FF9D  20                 	db	32
  1349  00FF9E  30                 	db	48	;'0'
  1350  00FF9F  78                 	db	120	;'x'
  1351  00FFA0  30                 	db	48	;'0'
  1352  00FFA1  30                 	db	48	;'0'
  1353  00FFA2  0A                 	db	10
  1354  00FFA3  0D                 	db	13
  1355  00FFA4  00                 	db	0
  1356  00FFA5                     STR_17:
  1357  00FFA5  20                 	db	32
  1358  00FFA6  20                 	db	32
  1359  00FFA7  20                 	db	32
  1360  00FFA8  20                 	db	32
  1361  00FFA9  4C                 	db	76	;'L'
  1362  00FFAA  41                 	db	65	;'A'
  1363  00FFAB  54                 	db	84	;'T'
  1364  00FFAC  46                 	db	70	;'F'
  1365  00FFAD  20                 	db	32
  1366  00FFAE  3D                 	db	61	;'='
  1367  00FFAF  20                 	db	32
  1368  00FFB0  30                 	db	48	;'0'
  1369  00FFB1  78                 	db	120	;'x'
  1370  00FFB2  46                 	db	70	;'F'
  1371  00FFB3  46                 	db	70	;'F'
  1372  00FFB4  0A                 	db	10
  1373  00FFB5  0D                 	db	13
  1374  00FFB6  00                 	db	0
  1375  00FFB7                     STR_19:
  1376  00FFB7  42                 	db	66	;'B'
  1377  00FFB8  75                 	db	117	;'u'
  1378  00FFB9  74                 	db	116	;'t'
  1379  00FFBA  74                 	db	116	;'t'
  1380  00FFBB  6F                 	db	111	;'o'
  1381  00FFBC  6E                 	db	110	;'n'
  1382  00FFBD  20                 	db	32
  1383  00FFBE  53                 	db	83	;'S'
  1384  00FFBF  74                 	db	116	;'t'
  1385  00FFC0  61                 	db	97	;'a'
  1386  00FFC1  74                 	db	116	;'t'
  1387  00FFC2  65                 	db	101	;'e'
  1388  00FFC3  73                 	db	115	;'s'
  1389  00FFC4  3F                 	db	63	;'?'
  1390  00FFC5  00                 	db	0
  1391  00FFC6                     STR_15:
  1392  00FFC6  4C                 	db	76	;'L'
  1393  00FFC7  45                 	db	69	;'E'
  1394  00FFC8  44                 	db	68	;'D'
  1395  00FFC9  73                 	db	115	;'s'
  1396  00FFCA  20                 	db	32
  1397  00FFCB  4F                 	db	79	;'O'
  1398  00FFCC  66                 	db	102	;'f'
  1399  00FFCD  66                 	db	102	;'f'
  1400  00FFCE  00                 	db	0
  1401  00FFCF                     STR_11:
  1402  00FFCF  4C                 	db	76	;'L'
  1403  00FFD0  45                 	db	69	;'E'
  1404  00FFD1  44                 	db	68	;'D'
  1405  00FFD2  73                 	db	115	;'s'
  1406  00FFD3  20                 	db	32
  1407  00FFD4  4F                 	db	79	;'O'
  1408  00FFD5  6E                 	db	110	;'n'
  1409  00FFD6  00                 	db	0
  1410  00FFD7                     STR_33:
  1411  00FFD7  2A                 	db	42
  1412  00FFD8  49                 	db	73	;'I'
  1413  00FFD9  44                 	db	68	;'D'
  1414  00FFDA  4E                 	db	78	;'N'
  1415  00FFDB  3F                 	db	63	;'?'
  1416  00FFDC  00                 	db	0
  1417  00FFDD                     STR_30:
  1418  00FFDD  43                 	db	67	;'C'
  1419  00FFDE  6C                 	db	108	;'l'
  1420  00FFDF  65                 	db	101	;'e'
  1421  00FFE0  61                 	db	97	;'a'
  1422  00FFE1  72                 	db	114	;'r'
  1423  00FFE2  00                 	db	0
  1424  00FFE3                     STR_27:
  1425  00FFE3  52                 	db	82	;'R'
  1426  00FFE4  65                 	db	101	;'e'
  1427  00FFE5  73                 	db	115	;'s'
  1428  00FFE6  65                 	db	101	;'e'
  1429  00FFE7  74                 	db	116	;'t'
  1430  00FFE8  00                 	db	0
  1431  00FFE9                     STR_38:
  1432  00FFE9  48                 	db	72	;'H'
  1433  00FFEA  65                 	db	101	;'e'
  1434  00FFEB  6C                 	db	108	;'l'
  1435  00FFEC  70                 	db	112	;'p'
  1436  00FFED  00                 	db	0
  1437  00FFEE                     STR_7:
  1438  00FFEE  1B                 	db	27
  1439  00FFEF  5B                 	db	91	;'['
  1440  00FFF0  32                 	db	50	;'2'
  1441  00FFF1  4A                 	db	74	;'J'
  1442  00FFF2  00                 	db	0
  1443  00FFF3                     STR_34:
  1444  00FFF3  49                 	db	73	;'I'
  1445  00FFF4  44                 	db	68	;'D'
  1446  00FFF5  4E                 	db	78	;'N'
  1447  00FFF6  00                 	db	0
  1448  00FFF7                     STR_8:
  1449  00FFF7  1B                 	db	27
  1450  00FFF8  5B                 	db	91	;'['
  1451  00FFF9  48                 	db	72	;'H'
  1452  00FFFA  00                 	db	0
  1453  00FFFB                     STR_1:
  1454  00FFFB  1B                 	db	27
  1455  00FFFC  5B                 	db	91	;'['
  1456  00FFFD  4B                 	db	75	;'K'
  1457  00FFFE  00                 	db	0
  1458  0000                     
  1459                           ; #config settings
  1460  00FFFF  00                 	db	0	; dummy byte at the end
  1461  0000                     
  1462                           	psect	nvCOMRAM
  1463  000042                     __pnvCOMRAM:
  1464                           	opt stack 0
  1465  000042                     _EUSART2_RxDefaultInterruptHandler:
  1466                           	opt stack 0
  1467  000042                     	ds	3
  1468  000045                     _EUSART2_TxDefaultInterruptHandler:
  1469                           	opt stack 0
  1470  000045                     	ds	3
  1471  000048                     _IOCBF2_InterruptHandler:
  1472                           	opt stack 0
  1473  000048                     	ds	3
  1474  00004B                     _eusart2TxBufferRemaining:
  1475                           	opt stack 0
  1476  00004B                     	ds	1
  1477  0000                     _ANSELEbits	set	3759
  1478  0000                     _WPUEbits	set	3758
  1479  0000                     _PMD5	set	3665
  1480  0000                     _PMD4	set	3664
  1481  0000                     _PMD3	set	3663
  1482  0000                     _PMD2	set	3662
  1483  0000                     _PMD1	set	3661
  1484  0000                     _PMD0	set	3660
  1485  0000                     _OSCTUNE	set	3656
  1486  0000                     _OSCFRQ	set	3657
  1487  0000                     _OSCEN	set	3655
  1488  0000                     _OSCCON3	set	3653
  1489  0000                     _OSCCON1	set	3651
  1490  0000                     _RC2REG	set	3825
  1491  0000                     _RC2STAbits	set	3829
  1492  0000                     _TX2REG	set	3826
  1493  0000                     _TX2STAbits	set	3830
  1494  0000                     _SP2BRGH	set	3828
  1495  0000                     _SP2BRGL	set	3827
  1496  0000                     _TX2STA	set	3830
  1497  0000                     _RC2STA	set	3829
  1498  0000                     _BAUD2CON	set	3831
  1499  0000                     _PIR0bits	set	3635
  1500  0000                     _PIR1bits	set	3636
  1501  0000                     _PIE1bits	set	3626
  1502  0000                     _PIR3bits	set	3638
  1503  0000                     _PIE3bits	set	3628
  1504  0000                     _IPR0bits	set	3615
  1505  0000                     _IPR1bits	set	3616
  1506  0000                     _IPR3bits	set	3618
  1507  0000                     _RX2PPSbits	set	3601
  1508  0000                     _RG7PPS	set	3721
  1509  0000                     _PIE0bits	set	3625
  1510  0000                     _IOCBPbits	set	3733
  1511  0000                     _IOCBNbits	set	3732
  1512  0000                     _IOCBFbits	set	3731
  1513  0000                     _ODCOND	set	3749
  1514  0000                     _ODCONC	set	3744
  1515  0000                     _ODCONH	set	3775
  1516  0000                     _ODCONB	set	3736
  1517  0000                     _ODCONG	set	3770
  1518  0000                     _ODCONA	set	3728
  1519  0000                     _ODCONF	set	3762
  1520  0000                     _ODCONE	set	3757
  1521  0000                     _WPUH	set	3776
  1522  0000                     _WPUC	set	3745
  1523  0000                     _WPUA	set	3729
  1524  0000                     _WPUG	set	3771
  1525  0000                     _WPUB	set	3737
  1526  0000                     _WPUE	set	3758
  1527  0000                     _WPUF	set	3763
  1528  0000                     _WPUD	set	3750
  1529  0000                     _ANSELA	set	3730
  1530  0000                     _ANSELF	set	3764
  1531  0000                     _ANSELG	set	3772
  1532  0000                     _ANSELE	set	3759
  1533  0000                     _ANSELB	set	3738
  1534  0000                     _ANSELD	set	3751
  1535  0000                     _ADPCH	set	3935
  1536  0000                     _ADPRE	set	3934
  1537  0000                     _ADACQ	set	3932
  1538  0000                     _ADCON3	set	3931
  1539  0000                     _ADCON2	set	3930
  1540  0000                     _ADCON1	set	3929
  1541  0000                     _ADCAP	set	3933
  1542  0000                     _ADREF	set	3928
  1543  0000                     _ADCLK	set	3927
  1544  0000                     _ADFLTR	set	3954
  1545  0000                     _ADACC	set	3952
  1546  0000                     _LATFbits	set	3966
  1547  0000                     _PORTBbits	set	3978
  1548  0000                     _ADCON0bits	set	3936
  1549  0000                     _ADRPT	set	3942
  1550  0000                     _ADCON0	set	3936
  1551  0000                     _ADSTPTH	set	3945
  1552  0000                     _ADSTPTL	set	3944
  1553  0000                     _ADUTHH	set	3949
  1554  0000                     _ADUTHL	set	3948
  1555  0000                     _ADLTHH	set	3947
  1556  0000                     _ADLTHL	set	3946
  1557  0000                     _TRISEbits	set	3973
  1558  0000                     _INTCONbits	set	4082
  1559  0000                     _TRISD	set	3972
  1560  0000                     _TRISC	set	3971
  1561  0000                     _TRISH	set	3976
  1562  0000                     _TRISB	set	3970
  1563  0000                     _TRISG	set	3975
  1564  0000                     _TRISA	set	3969
  1565  0000                     _TRISF	set	3974
  1566  0000                     _TRISE	set	3973
  1567  0000                     _LATH	set	3968
  1568  0000                     _LATC	set	3963
  1569  0000                     _LATG	set	3967
  1570  0000                     _LATB	set	3962
  1571  0000                     _LATF	set	3966
  1572  0000                     _LATA	set	3961
  1573  0000                     _LATD	set	3964
  1574  0000                     _LATE	set	3965
  1575  0000                     _GIE	set	32663
  1576                           
  1577                           	psect	cinit
  1578  01192C                     __pcinit:
  1579                           	opt stack 0
  1580  01192C                     start_initialization:
  1581                           	opt stack 0
  1582  01192C                     __initialization:
  1583                           	opt stack 0
  1584                           
  1585                           ; Initialize objects allocated to BANK0 (18 bytes)
  1586                           ; load TBLPTR registers with __pidataBANK0
  1587  01192C  0E50               	movlw	low __pidataBANK0
  1588  01192E  6EF6               	movwf	tblptrl,c
  1589  011930  0E26               	movlw	high __pidataBANK0
  1590  011932  6EF7               	movwf	tblptrh,c
  1591  011934  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1592  011936  6EF8               	movwf	tblptru,c
  1593  011938  EE00  F0D5         	lfsr	0,__pdataBANK0
  1594  01193C  EE10 F012          	lfsr	1,18
  1595  011940                     copy_data0:
  1596  011940  0009               	tblrd		*+
  1597  011942  CFF5 FFEE          	movff	tablat,postinc0
  1598  011946  50E5               	movf	postdec1,w,c
  1599  011948  50E1               	movf	fsr1l,w,c
  1600  01194A  E1FA               	bnz	copy_data0
  1601                           
  1602                           ; Initialize objects allocated to COMRAM (3 bytes)
  1603                           ; load TBLPTR registers with __pidataCOMRAM
  1604  01194C  0E66               	movlw	low __pidataCOMRAM
  1605  01194E  6EF6               	movwf	tblptrl,c
  1606  011950  0E27               	movlw	high __pidataCOMRAM
  1607  011952  6EF7               	movwf	tblptrh,c
  1608  011954  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1609  011956  6EF8               	movwf	tblptru,c
  1610  011958  0009               	tblrd		*+	;fetch initializer
  1611  01195A  CFF5 F04C          	movff	tablat,__pdataCOMRAM
  1612  01195E  0009               	tblrd		*+	;fetch initializer
  1613  011960  CFF5 F04D          	movff	tablat,__pdataCOMRAM+1
  1614  011964  0009               	tblrd		*+	;fetch initializer
  1615  011966  CFF5 F04E          	movff	tablat,__pdataCOMRAM+2
  1616                           
  1617                           ; Clear objects allocated to BANK2 (64 bytes)
  1618  01196A  EE02  F000         	lfsr	0,__pbssBANK2
  1619  01196E  0E40               	movlw	64
  1620  011970                     clear_0:
  1621  011970  6AEE               	clrf	postinc0,c
  1622  011972  06E8               	decf	wreg,f,c
  1623  011974  E1FD               	bnz	clear_0
  1624                           
  1625                           ; Clear objects allocated to BANK1 (213 bytes)
  1626  011976  EE01  F000         	lfsr	0,__pbssBANK1
  1627  01197A  0ED5               	movlw	213
  1628  01197C                     clear_1:
  1629  01197C  6AEE               	clrf	postinc0,c
  1630  01197E  06E8               	decf	wreg,f,c
  1631  011980  E1FD               	bnz	clear_1
  1632                           
  1633                           ; Clear objects allocated to BANK0 (79 bytes)
  1634  011982  EE00  F060         	lfsr	0,__pbssBANK0
  1635  011986  0E4F               	movlw	79
  1636  011988                     clear_2:
  1637  011988  6AEE               	clrf	postinc0,c
  1638  01198A  06E8               	decf	wreg,f,c
  1639  01198C  E1FD               	bnz	clear_2
  1640                           
  1641                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1642  01198E  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1643                           
  1644                           ; Clear objects allocated to COMRAM (25 bytes)
  1645  011990  EE00  F029         	lfsr	0,__pbssCOMRAM
  1646  011994  0E19               	movlw	25
  1647  011996                     clear_3:
  1648  011996  6AEE               	clrf	postinc0,c
  1649  011998  06E8               	decf	wreg,f,c
  1650  01199A  E1FD               	bnz	clear_3
  1651  01199C                     end_of_initialization:
  1652                           	opt stack 0
  1653  01199C                     __end_of__initialization:
  1654                           	opt stack 0
  1655  01199C  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1656  01199E  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1657  0119A0  0100               	movlb	0
  1658  0119A2  EFAA  F08F         	goto	_main	;jump to C main() function
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           fsr1l	equ	0xFE1
  1667                           
  1668                           	psect	bitbssCOMRAM
  1669  000278                     __pbitbssCOMRAM:
  1670                           	opt stack 0
  1671  000278                     _USB_DTR:
  1672                           	opt stack 0
  1673  000278                     	ds	1
  1674  000279                     _eusart2RxStringReady:
  1675                           	opt stack 0
  1676  000279                     	ds	1
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           
  1686                           	psect	bssCOMRAM
  1687  000029                     __pbssCOMRAM:
  1688                           	opt stack 0
  1689  000029                     _packet_sample:
  1690                           	opt stack 0
  1691  000029                     	ds	10
  1692  000033                     medianFilter@bufferIndex:
  1693                           	opt stack 0
  1694  000033                     	ds	5
  1695  000038                     _sample_delay:
  1696                           	opt stack 0
  1697  000038                     	ds	1
  1698  000039                     _scanInterrupted:
  1699                           	opt stack 0
  1700  000039                     	ds	1
  1701  00003A                     _sampling_flag:
  1702                           	opt stack 0
  1703  00003A                     	ds	1
  1704  00003B                     _currentScanSensor:
  1705                           	opt stack 0
  1706  00003B                     	ds	1
  1707  00003C                     _mtouch_time_toScan:
  1708                           	opt stack 0
  1709  00003C                     	ds	1
  1710  00003D                     _eusart2RxCount:
  1711                           	opt stack 0
  1712  00003D                     	ds	1
  1713  00003E                     _eusart2RxTail:
  1714                           	opt stack 0
  1715  00003E                     	ds	1
  1716  00003F                     _eusart2RxHead:
  1717                           	opt stack 0
  1718  00003F                     	ds	1
  1719  000040                     _eusart2TxTail:
  1720                           	opt stack 0
  1721  000040                     	ds	1
  1722  000041                     _eusart2TxHead:
  1723                           	opt stack 0
  1724  000041                     	ds	1
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           
  1734                           	psect	dataCOMRAM
  1735  00004C                     __pdataCOMRAM:
  1736                           	opt stack 0
  1737  00004C                     _callback_sampled:
  1738                           	opt stack 0
  1739  00004C                     	ds	3
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1l	equ	0xFE1
  1748                           
  1749                           	psect	bssBANK0
  1750  000060                     __pbssBANK0:
  1751                           	opt stack 0
  1752  000060                     _sensor_medianBuffer:
  1753                           	opt stack 0
  1754  000060                     	ds	30
  1755  00007E                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:
  1756                           	opt stack 0
  1757  00007E                     	ds	3
  1758  000081                     _freq_index:
  1759                           	opt stack 0
  1760  000081                     	ds	1
  1761  000082                     _mtouch_sensor:
  1762                           	opt stack 0
  1763  000082                     	ds	45
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	dataBANK0
  1774  0000D5                     __pdataBANK0:
  1775                           	opt stack 0
  1776  0000D5                     _Button_StateMachine:
  1777                           	opt stack 0
  1778  0000D5                     	ds	9
  1779  0000DE                     _callback_notPressed:
  1780                           	opt stack 0
  1781  0000DE                     	ds	3
  1782  0000E1                     _callback_pressed:
  1783                           	opt stack 0
  1784  0000E1                     	ds	3
  1785  0000E4                     _freq_hop:
  1786                           	opt stack 0
  1787  0000E4                     	ds	3
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1l	equ	0xFE1
  1796                           
  1797                           	psect	bssBANK1
  1798  000100                     __pbssBANK1:
  1799                           	opt stack 0
  1800  000100                     _eusart2RxBuffer:
  1801                           	opt stack 0
  1802  000100                     	ds	64
  1803  000140                     _mtouch_button:
  1804                           	opt stack 0
  1805  000140                     	ds	85
  1806  000195                     _line:
  1807                           	opt stack 0
  1808  000195                     	ds	64
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	bssBANK2
  1819  000200                     __pbssBANK2:
  1820                           	opt stack 0
  1821  000200                     _eusart2TxBuffer:
  1822                           	opt stack 0
  1823  000200                     	ds	64
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           postdec1	equ	0xFE5
  1831                           fsr1l	equ	0xFE1
  1832                           
  1833                           	psect	cstackBANK0
  1834  0000AF                     __pcstackBANK0:
  1835                           	opt stack 0
  1836  0000AF                     ?_abs:
  1837                           	opt stack 0
  1838  0000AF                     ?_medianFilter:
  1839                           	opt stack 0
  1840  0000AF                     ?_strlen:
  1841                           	opt stack 0
  1842  0000AF                     ?_strcmp:
  1843                           	opt stack 0
  1844  0000AF                     ?_MTOUCH_Sensor_RawSample_Get:
  1845                           	opt stack 0
  1846  0000AF                     ?_Button_Unscaled_Deviation_Get:
  1847                           	opt stack 0
  1848  0000AF                     ?___lwdiv:
  1849                           	opt stack 0
  1850  0000AF                     EUSART2_Read@readValue:
  1851                           	opt stack 0
  1852  0000AF                     EUSART2_Write@txData:
  1853                           	opt stack 0
  1854  0000AF                     MTOUCH_needReburst@needReburst:
  1855                           	opt stack 0
  1856  0000AF                     Sensor_SetTrisBit@TrisBit:
  1857                           	opt stack 0
  1858  0000AF                     MTOUCH_Sensor_Enable@sensor:
  1859                           	opt stack 0
  1860  0000AF                     MTOUCH_Sensor_isEnabled@sensor:
  1861                           	opt stack 0
  1862  0000AF                     MTOUCH_Sensor_Calibrate@sensor:
  1863                           	opt stack 0
  1864  0000AF                     MTOUCH_Sensor_isCalibrated@sensor:
  1865                           	opt stack 0
  1866  0000AF                     MTOUCH_Sensor_wasSampled@sensor:
  1867                           	opt stack 0
  1868  0000AF                     Sensor_isEnabled@sensor:
  1869                           	opt stack 0
  1870  0000AF                     Sensor_setActive@sensor:
  1871                           	opt stack 0
  1872  0000AF                     Sensor_setInactive@sensor:
  1873                           	opt stack 0
  1874  0000AF                     Sensor_isCalibrated@sensor:
  1875                           	opt stack 0
  1876  0000AF                     Sensor_isCalibratingAcqTime@sensor:
  1877                           	opt stack 0
  1878  0000AF                     Sensor_Sampled_Reset@sensor:
  1879                           	opt stack 0
  1880  0000AF                     Button_Tick_helper@button:
  1881                           	opt stack 0
  1882  0000AF                     Button_Deviation_Update@button:
  1883                           	opt stack 0
  1884  0000AF                     Button_Unscaled_Deviation_Get@button:
  1885                           	opt stack 0
  1886  0000AF                     Button_Baseline_Update@button:
  1887                           	opt stack 0
  1888  0000AF                     abs@a:
  1889                           	opt stack 0
  1890  0000AF                     ___lwdiv@dividend:
  1891                           	opt stack 0
  1892  0000AF                     memcpy@d1:
  1893                           	opt stack 0
  1894  0000AF                     strcmp@s1:
  1895                           	opt stack 0
  1896  0000AF                     strlen@s:
  1897                           	opt stack 0
  1898  0000AF                     IOCBF2_SetInterruptHandler@InterruptHandler:
  1899                           	opt stack 0
  1900  0000AF                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1901                           	opt stack 0
  1902  0000AF                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1903                           	opt stack 0
  1904  0000AF                     MTOUCH_Button_SetPressedCallback@callback:
  1905                           	opt stack 0
  1906                           
  1907                           ; 3 bytes @ 0x0
  1908  0000AF                     	ds	1
  1909  0000B0                     putch@txData:
  1910                           	opt stack 0
  1911  0000B0                     Sensor_SetTrisBit@sensor:
  1912                           	opt stack 0
  1913  0000B0                     MTOUCH_Button_Initialize@name:
  1914                           	opt stack 0
  1915  0000B0                     MTOUCH_Button_isPressed@name:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0x1
  1919  0000B0                     	ds	1
  1920  0000B1                     ??_Sensor_scheduleNextScan:
  1921  0000B1                     ??_abs:
  1922  0000B1                     ??_medianFilter:
  1923  0000B1                     ??_Button_Deviation_Update:
  1924  0000B1                     ??_Button_Baseline_Update:
  1925  0000B1                     ??_strlen:
  1926  0000B1                     ??_Button_Unscaled_Deviation_Get:
  1927  0000B1                     MTOUCH_Sensor_Initialize@sensor:
  1928                           	opt stack 0
  1929  0000B1                     MTOUCH_Sensor_RawSample_Get@name:
  1930                           	opt stack 0
  1931  0000B1                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
  1932                           	opt stack 0
  1933  0000B1                     MTOUCH_Button_Initialize@button:
  1934                           	opt stack 0
  1935  0000B1                     ___lwdiv@divisor:
  1936                           	opt stack 0
  1937  0000B1                     memcpy@s1:
  1938                           	opt stack 0
  1939  0000B1                     strcmp@s2:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x2
  1943  0000B1                     	ds	1
  1944  0000B2                     Button_Reading_Update_Helper@button:
  1945                           	opt stack 0
  1946  0000B2                     Button_Baseline_Initialize@button:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x3
  1950  0000B2                     	ds	1
  1951  0000B3                     ??_Sensor_FrequencyHopping_Autotune_Process:
  1952  0000B3                     ??_strcmp:
  1953  0000B3                     Sensor_scheduleNextScan@state:
  1954                           	opt stack 0
  1955  0000B3                     MTOUCH_Button_Tick@i:
  1956                           	opt stack 0
  1957  0000B3                     ___lwdiv@counter:
  1958                           	opt stack 0
  1959  0000B3                     memcpy@n:
  1960                           	opt stack 0
  1961  0000B3                     strlen@cp:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x4
  1965  0000B3                     	ds	1
  1966  0000B4                     ??_Button_Baseline_Initialize:
  1967  0000B4                     ??_Button_Reading_Update_Helper:
  1968  0000B4                     Sensor_scheduleNextScan@skipScan:
  1969                           	opt stack 0
  1970  0000B4                     strcmp@r:
  1971                           	opt stack 0
  1972  0000B4                     ___lwdiv@quotient:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x5
  1976  0000B4                     	ds	1
  1977  0000B5                     medianFilter@sensor:
  1978                           	opt stack 0
  1979  0000B5                     memcpy@tmp:
  1980                           	opt stack 0
  1981  0000B5                     Sensor_scheduleNextScan@sensor:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x6
  1985  0000B5                     	ds	1
  1986  0000B6                     ?___lwmod:
  1987                           	opt stack 0
  1988  0000B6                     Sensor_RawSample_Update@sensor:
  1989                           	opt stack 0
  1990  0000B6                     Button_Reading_Update@button:
  1991                           	opt stack 0
  1992  0000B6                     ___lwmod@dividend:
  1993                           	opt stack 0
  1994  0000B6                     memcpy@d:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x7
  1998  0000B6                     	ds	1
  1999  0000B7                     Button_Check_AKS_Block@button:
  2000                           	opt stack 0
  2001  0000B7                     Button_Deviation_Update@deviation:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0x8
  2005  0000B7                     	ds	1
  2006  0000B8                     Sensor_RawSample_Update@result:
  2007                           	opt stack 0
  2008  0000B8                     ___lwmod@divisor:
  2009                           	opt stack 0
  2010  0000B8                     memcpy@s:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x9
  2014  0000B8                     	ds	1
  2015  0000B9                     ??_Button_Check_AKS_Block:
  2016  0000B9                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0xA
  2020  0000B9                     	ds	1
  2021  0000BA                     ??_Sensor_postAcquisitionProcess:
  2022  0000BA                     MTOUCH_Sensor_InitializeAll@sensor:
  2023                           	opt stack 0
  2024  0000BA                     MTOUCH_Button_InitializeAll@button:
  2025                           	opt stack 0
  2026  0000BA                     ___lwmod@counter:
  2027                           	opt stack 0
  2028  0000BA                     Sensor_FrequencyHopping_Autotune_Process@variance:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0xB
  2032  0000BA                     	ds	1
  2033  0000BB                     ?_printf:
  2034                           	opt stack 0
  2035  0000BB                     Button_Check_AKS_Block@surplus_deviation_this_button:
  2036                           	opt stack 0
  2037  0000BB                     printf@f:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0xC
  2041  0000BB                     	ds	1
  2042  0000BC                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0xD
  2046  0000BC                     	ds	1
  2047  0000BD                     Button_Check_AKS_Block@currentAKSGroup:
  2048                           	opt stack 0
  2049                           
  2050                           ; 1 bytes @ 0xE
  2051  0000BD                     	ds	1
  2052  0000BE                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:
  2053                           	opt stack 0
  2054  0000BE                     Button_Check_AKS_Block@surplus_deviation_check_button:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0xF
  2058  0000BE                     	ds	1
  2059  0000BF                     ??_printf:
  2060  0000BF                     Sensor_FrequencyHopping_Autotune_Process@sensor:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x10
  2064  0000BF                     	ds	1
  2065  0000C0                     Sensor_postAcquisitionProcess@name:
  2066                           	opt stack 0
  2067  0000C0                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:
  2068                           	opt stack 0
  2069  0000C0                     Button_Check_AKS_Block@check_button:
  2070                           	opt stack 0
  2071  0000C0                     printf@ap:
  2072                           	opt stack 0
  2073                           
  2074                           ; 2 bytes @ 0x11
  2075  0000C0                     	ds	1
  2076  0000C1                     Sensor_postAcquisitionProcess@sensor:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0x12
  2080  0000C1                     	ds	1
  2081  0000C2                     printf@flag:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x13
  2085  0000C2                     	ds	1
  2086  0000C3                     Sensor_FrequencyHopping@sensor:
  2087                           	opt stack 0
  2088  0000C3                     printf@prec:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x14
  2092  0000C3                     	ds	1
  2093  0000C4                     MTOUCH_Sensor_SampleAll@sensor:
  2094                           	opt stack 0
  2095  0000C4                     printf@val:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x15
  2099  0000C4                     	ds	2
  2100  0000C6                     printf@c:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x17
  2104  0000C6                     	ds	1
  2105  0000C7                     ?_mTouchCallback:
  2106                           	opt stack 0
  2107  0000C7                     ringBufferLUT@line:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x18
  2111  0000C7                     	ds	1
  2112  0000C8                     ??_mTouchCallback:
  2113                           
  2114                           ; 1 bytes @ 0x19
  2115  0000C8                     	ds	1
  2116  0000C9                     ??_ringBufferLUT:
  2117  0000C9                     Button_State_Initializing@button:
  2118                           	opt stack 0
  2119  0000C9                     Button_State_NotPressed@button:
  2120                           	opt stack 0
  2121  0000C9                     Button_State_Pressed@button:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x1A
  2125  0000C9                     	ds	1
  2126  0000CA                     ??_ringBufferPull:
  2127                           
  2128                           ; 1 bytes @ 0x1B
  2129  0000CA                     	ds	1
  2130  0000CB                     ??_Button_State_Initializing:
  2131  0000CB                     ??_Button_State_NotPressed:
  2132  0000CB                     ??_Button_State_Pressed:
  2133                           
  2134                           ; 1 bytes @ 0x1C
  2135  0000CB                     	ds	2
  2136  0000CD                     ringBufferPull@charNumber:
  2137                           	opt stack 0
  2138                           
  2139                           ; 2 bytes @ 0x1E
  2140  0000CD                     	ds	2
  2141  0000CF                     ringBufferPull@index_2050:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x20
  2145  0000CF                     	ds	1
  2146  0000D0                     ??_Button_Service:
  2147                           
  2148                           ; 1 bytes @ 0x21
  2149  0000D0                     	ds	1
  2150  0000D1                     Button_Service@name:
  2151                           	opt stack 0
  2152  0000D1                     ringBufferPull@index:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x22
  2156  0000D1                     	ds	1
  2157  0000D2                     Button_Service@button:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x23
  2161  0000D2                     	ds	2
  2162  0000D4                     MTOUCH_Button_ServiceAll@button:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x25
  2166  0000D4                     	ds	1
  2167  0000D5                     tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postdec1	equ	0xFE5
  2174                           fsr1l	equ	0xFE1
  2175                           
  2176                           ; 1 bytes @ 0x26
  2177                           
  2178                           	psect	cstackCOMRAM
  2179  000001                     __pcstackCOMRAM:
  2180                           	opt stack 0
  2181  000001                     ?i2_abs:
  2182                           	opt stack 0
  2183  000001                     ?i2___lwdiv:
  2184                           	opt stack 0
  2185  000001                     i2EUSART2_Write@txData:
  2186                           	opt stack 0
  2187  000001                     i2Sensor_SetTrisBit@TrisBit:
  2188                           	opt stack 0
  2189  000001                     i2MTOUCH_Sensor_isEnabled@sensor:
  2190                           	opt stack 0
  2191  000001                     i2MTOUCH_Sensor_wasSampled@sensor:
  2192                           	opt stack 0
  2193  000001                     Sensor_setCalibrated@sensor:
  2194                           	opt stack 0
  2195  000001                     Sensor_setCalibratAcqTime@sensor:
  2196                           	opt stack 0
  2197  000001                     Sensor_setSampled@sensor:
  2198                           	opt stack 0
  2199  000001                     i2Sensor_isCalibrated@sensor:
  2200                           	opt stack 0
  2201  000001                     i2Sensor_isCalibratingAcqTime@sensor:
  2202                           	opt stack 0
  2203  000001                     i2abs@a:
  2204                           	opt stack 0
  2205  000001                     i2___lwdiv@dividend:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x0
  2209  000001                     	ds	1
  2210  000002                     i2putch@txData:
  2211                           	opt stack 0
  2212  000002                     i2Sensor_SetTrisBit@sensor:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x1
  2216  000002                     	ds	1
  2217  000003                     ??i2_Sensor_scheduleNextScan:
  2218  000003                     ??i2_abs:
  2219  000003                     i2___lwdiv@divisor:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x2
  2223  000003                     	ds	2
  2224  000005                     i2Sensor_scheduleNextScan@state:
  2225                           	opt stack 0
  2226  000005                     Sensor_autoCalibration@sensor:
  2227                           	opt stack 0
  2228  000005                     i2___lwdiv@quotient:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x4
  2232  000005                     	ds	1
  2233  000006                     i2Sensor_scheduleNextScan@skipScan:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x5
  2237  000006                     	ds	1
  2238  000007                     ??_Sensor_autoCalibration:
  2239  000007                     i2___lwdiv@counter:
  2240                           	opt stack 0
  2241  000007                     i2Sensor_scheduleNextScan@sensor:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x6
  2245  000007                     	ds	1
  2246  000008                     ?i2___lwmod:
  2247                           	opt stack 0
  2248  000008                     i2___lwmod@dividend:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x7
  2252  000008                     	ds	2
  2253  00000A                     i2___lwmod@divisor:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x9
  2257  00000A                     	ds	2
  2258  00000C                     i2___lwmod@counter:
  2259                           	opt stack 0
  2260                           
  2261                           ; 1 bytes @ 0xB
  2262  00000C                     	ds	1
  2263  00000D                     ?i2_printf:
  2264                           	opt stack 0
  2265  00000D                     Sensor_autoCalibration@name:
  2266                           	opt stack 0
  2267  00000D                     i2printf@f:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0xC
  2271  00000D                     	ds	1
  2272  00000E                     MTOUCH_Sensor_Service@sensor:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0xD
  2276  00000E                     	ds	1
  2277  00000F                     ??i2_printf:
  2278                           
  2279                           ; 1 bytes @ 0xE
  2280  00000F                     	ds	1
  2281  000010                     i2printf@ap:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0xF
  2285  000010                     	ds	2
  2286  000012                     i2printf@flag:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x11
  2290  000012                     	ds	1
  2291  000013                     i2printf@prec:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x12
  2295  000013                     	ds	1
  2296  000014                     i2printf@val:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x13
  2300  000014                     	ds	2
  2301  000016                     i2printf@c:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x15
  2305  000016                     	ds	1
  2306  000017                     ??_INTERRUPT_InterruptManagerHigh:
  2307                           
  2308                           ; 1 bytes @ 0x16
  2309  000017                     	ds	18
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           
  2319 ;;
  2320 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2321 ;;
  2322 ;; *************** function _main *****************
  2323 ;; Defined at:
  2324 ;;		line 105 in file "main.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;		None
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;		None
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;Total ram usage:        0 bytes
  2343 ;; Hardware stack levels required when called:   13
  2344 ;; This function calls:
  2345 ;;		_DTR_Callback
  2346 ;;		_IOCBF2_SetInterruptHandler
  2347 ;;		_MTOUCH_Button_SetPressedCallback
  2348 ;;		_MTOUCH_Service_Mainloop
  2349 ;;		_SYSTEM_Initialize
  2350 ;;		_printResetMessage
  2351 ;;		_ringBufferPull
  2352 ;; This function is called by:
  2353 ;;		Startup code after reset
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text0
  2358  011F54                     __ptext0:
  2359                           	opt stack 0
  2360  011F54                     _main:
  2361                           	opt stack 18
  2362                           
  2363                           ;main.c: 108: SYSTEM_Initialize();
  2364                           
  2365                           ;incstack = 0
  2366  011F54  ECD0  F092         	call	_SYSTEM_Initialize	;wreg free
  2367                           
  2368                           ;main.c: 111: IOCBF2_SetInterruptHandler(DTR_Callback);
  2369  011F58  0EAA               	movlw	low _DTR_Callback
  2370  011F5A  0100               	movlb	0	; () banked
  2371  011F5C  6FAF               	movwf	IOCBF2_SetInterruptHandler@InterruptHandler& (0+255),b
  2372  011F5E  0E26               	movlw	high _DTR_Callback
  2373  011F60  6FB0               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2374  011F62  0E01               	movlw	low (_DTR_Callback shr (0+16))
  2375  011F64  6FB1               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  2376  011F66  EC66  F093         	call	_IOCBF2_SetInterruptHandler	;wreg free
  2377                           
  2378                           ;main.c: 114: (INTCONbits.GIEH = 1);
  2379  011F6A  8EF2               	bsf	intcon,7,c	;volatile
  2380                           
  2381                           ;main.c: 117: (INTCONbits.GIEL = 1);
  2382  011F6C  8CF2               	bsf	intcon,6,c	;volatile
  2383                           
  2384                           ;main.c: 120: MTOUCH_Button_SetPressedCallback(mTouchCallback);
  2385  011F6E  0EBA               	movlw	low _mTouchCallback
  2386  011F70  0100               	movlb	0	; () banked
  2387  011F72  6FAF               	movwf	MTOUCH_Button_SetPressedCallback@callback& (0+255),b
  2388  011F74  0E11               	movlw	high _mTouchCallback
  2389  011F76  6FB0               	movwf	(MTOUCH_Button_SetPressedCallback@callback+1)& (0+255),b
  2390  011F78  0E01               	movlw	low (_mTouchCallback shr (0+16))
  2391  011F7A  6FB1               	movwf	(MTOUCH_Button_SetPressedCallback@callback+2)& (0+255),b
  2392  011F7C  EC89  F093         	call	_MTOUCH_Button_SetPressedCallback	;wreg free
  2393                           
  2394                           ;main.c: 123: DTR_Callback();
  2395  011F80  EC55  F093         	call	_DTR_Callback	;wreg free
  2396                           
  2397                           ;main.c: 126: printResetMessage();
  2398  011F84  EC0B  F090         	call	_printResetMessage	;wreg free
  2399  011F88                     
  2400                           ;main.c: 129: {
  2401                           ;main.c: 131: if (eusart2RxStringReady) {
  2402  011F88  B24F               	btfsc	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
  2403                           
  2404                           ;main.c: 132: ringBufferPull();
  2405  011F8A  ECC8  F087         	call	_ringBufferPull	;wreg free
  2406                           
  2407                           ;main.c: 133: }
  2408                           ;main.c: 136: MTOUCH_Service_Mainloop();
  2409  011F8E  EC06  F092         	call	_MTOUCH_Service_Mainloop	;wreg free
  2410                           
  2411                           ;main.c: 139: __nop();
  2412  011F92  F000               	nop	
  2413  011F94  D7F9               	goto	l971
  2414  011F96                     __end_of_main:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           intcon	equ	0xFF2
  2421                           postinc0	equ	0xFEE
  2422                           wreg	equ	0xFE8
  2423                           postdec1	equ	0xFE5
  2424                           fsr1l	equ	0xFE1
  2425                           
  2426 ;; *************** function _ringBufferPull *****************
  2427 ;; Defined at:
  2428 ;;		line 8 in file "ring_buffer_interface.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  index           2   32[BANK0 ] int 
  2433 ;;  index           2   34[BANK0 ] int 
  2434 ;;  charNumber      2   30[BANK0 ] int 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2445 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2446 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2447 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2448 ;;Total ram usage:        9 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    9
  2451 ;; This function calls:
  2452 ;;		_EUSART2_Read
  2453 ;;		_ringBufferLUT
  2454 ;;		_strlen
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text1
  2461  010F90                     __ptext1:
  2462                           	opt stack 0
  2463  010F90                     _ringBufferPull:
  2464                           	opt stack 21
  2465                           
  2466                           ;ring_buffer_interface.c: 10: int charNumber = eusart2RxCount;
  2467                           
  2468                           ;incstack = 0
  2469  010F90  C03D  F0CD         	movff	_eusart2RxCount,ringBufferPull@charNumber	;volatile
  2470  010F94  0100               	movlb	0	; () banked
  2471  010F96  6BCE               	clrf	(ringBufferPull@charNumber+1)& (0+255),b
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;ring_buffer_interface.c: 13: for (int index = 0; index < 64; index++) {
  2475  010F98  0E00               	movlw	0
  2476  010F9A  6FD2               	movwf	(ringBufferPull@index+1)& (0+255),b
  2477  010F9C  0E00               	movlw	0
  2478  010F9E  6FD1               	movwf	ringBufferPull@index& (0+255),b
  2479  010FA0                     l5509:
  2480                           
  2481                           ; BSR set to: 0
  2482  010FA0  BFD2               	btfsc	(ringBufferPull@index+1)& (0+255),7,b
  2483  010FA2  D006               	goto	l1002
  2484  010FA4  51D2               	movf	(ringBufferPull@index+1)& (0+255),w,b
  2485  010FA6  E10F               	bnz	l5519
  2486  010FA8  0E40               	movlw	64
  2487  010FAA  5DD1               	subwf	ringBufferPull@index& (0+255),w,b
  2488  010FAC  B0D8               	btfsc	status,0,c
  2489  010FAE  D00B               	goto	u6670
  2490  010FB0                     l1002:
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;ring_buffer_interface.c: 15: line[index] = '\0';
  2494                           
  2495                           ; BSR set to: 0
  2496  010FB0  0E95               	movlw	low _line
  2497  010FB2  25D1               	addwf	ringBufferPull@index& (0+255),w,b
  2498  010FB4  6ED9               	movwf	fsr2l,c
  2499  010FB6  0E01               	movlw	high _line
  2500  010FB8  21D2               	addwfc	(ringBufferPull@index+1)& (0+255),w,b
  2501  010FBA  6EDA               	movwf	fsr2h,c
  2502  010FBC  0E00               	movlw	0
  2503  010FBE  6EDF               	movwf	indf2,c
  2504                           
  2505                           ; BSR set to: 0
  2506  010FC0  4BD1               	infsnz	ringBufferPull@index& (0+255),f,b
  2507  010FC2  2BD2               	incf	(ringBufferPull@index+1)& (0+255),f,b
  2508  010FC4  D7ED               	goto	l5509
  2509  010FC6                     u6670:
  2510  010FC6                     l5519:
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;ring_buffer_interface.c: 17: }
  2514                           ;ring_buffer_interface.c: 20: for(int index = 0; index < charNumber; index++){
  2515  010FC6  0E00               	movlw	0
  2516  010FC8  6FD0               	movwf	(ringBufferPull@index_2050+1)& (0+255),b
  2517  010FCA  0E00               	movlw	0
  2518  010FCC  6FCF               	movwf	ringBufferPull@index_2050& (0+255),b
  2519  010FCE  D00E               	goto	l1004
  2520  010FD0                     
  2521                           ; BSR set to: 0
  2522                           ;ring_buffer_interface.c: 22: line[index] = EUSART2_Read();
  2523                           
  2524                           ; BSR set to: 0
  2525  010FD0  EC68  F090         	call	_EUSART2_Read	;wreg free
  2526  010FD4  0100               	movlb	0	; () banked
  2527  010FD6  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2528  010FD8  0E95               	movlw	low _line
  2529  010FDA  25CF               	addwf	ringBufferPull@index_2050& (0+255),w,b
  2530  010FDC  6ED9               	movwf	fsr2l,c
  2531  010FDE  0E01               	movlw	high _line
  2532  010FE0  21D0               	addwfc	(ringBufferPull@index_2050+1)& (0+255),w,b
  2533  010FE2  6EDA               	movwf	fsr2h,c
  2534  010FE4  C0CA  FFDF         	movff	??_ringBufferPull,indf2
  2535                           
  2536                           ; BSR set to: 0
  2537  010FE8  4BCF               	infsnz	ringBufferPull@index_2050& (0+255),f,b
  2538  010FEA  2BD0               	incf	(ringBufferPull@index_2050+1)& (0+255),f,b
  2539  010FEC                     l1004:
  2540                           
  2541                           ; BSR set to: 0
  2542                           
  2543                           ; BSR set to: 0
  2544  010FEC  51CD               	movf	ringBufferPull@charNumber& (0+255),w,b
  2545  010FEE  5DCF               	subwf	ringBufferPull@index_2050& (0+255),w,b
  2546  010FF0  51D0               	movf	(ringBufferPull@index_2050+1)& (0+255),w,b
  2547  010FF2  0A80               	xorlw	128
  2548  010FF4  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2549  010FF6  51CE               	movf	(ringBufferPull@charNumber+1)& (0+255),w,b
  2550  010FF8  0A80               	xorlw	128
  2551  010FFA  59CA               	subwfb	??_ringBufferPull& (0+255),w,b
  2552  010FFC  A0D8               	btfss	status,0,c
  2553  010FFE  D7E8               	goto	l1005
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;ring_buffer_interface.c: 24: }
  2557                           ;ring_buffer_interface.c: 27: eusart2RxTail = eusart2RxHead;
  2558  011000  C03F  F03E         	movff	_eusart2RxHead,_eusart2RxTail	;volatile
  2559                           
  2560                           ;ring_buffer_interface.c: 30: while((line[strlen(line) - 1] == (int) '\n') ||
  2561                           ;ring_buffer_interface.c: 31: (line[strlen(line) - 1] == (int) '\r')) {
  2562  011004  D017               	goto	l1007
  2563  011006                     
  2564                           ; BSR set to: 0
  2565                           ;ring_buffer_interface.c: 34: line[strlen(line) - 1] = '\0';
  2566                           
  2567                           ; BSR set to: 0
  2568  011006  0EFF               	movlw	255
  2569  011008  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2570  01100A  0EFF               	movlw	255
  2571  01100C  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2572  01100E  0E95               	movlw	low _line
  2573  011010  6FAF               	movwf	strlen@s& (0+255),b
  2574  011012  0E01               	movlw	high _line
  2575  011014  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2576  011016  ECEC  F08F         	call	_strlen	;wreg free
  2577  01101A  0100               	movlb	0	; () banked
  2578  01101C  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2579  01101E  27AF               	addwf	?_strlen& (0+255),f,b
  2580  011020  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2581  011022  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2582  011024  0E95               	movlw	low _line
  2583  011026  25AF               	addwf	?_strlen& (0+255),w,b
  2584  011028  6ED9               	movwf	fsr2l,c
  2585  01102A  0E01               	movlw	high _line
  2586  01102C  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2587  01102E  6EDA               	movwf	fsr2h,c
  2588  011030  0E00               	movlw	0
  2589  011032  6EDF               	movwf	indf2,c
  2590  011034                     l1007:
  2591                           
  2592                           ; BSR set to: 0
  2593  011034  0EFF               	movlw	255
  2594  011036  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2595  011038  0EFF               	movlw	255
  2596  01103A  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2597  01103C  0E95               	movlw	low _line
  2598  01103E  6FAF               	movwf	strlen@s& (0+255),b
  2599  011040  0E01               	movlw	high _line
  2600  011042  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2601  011044  ECEC  F08F         	call	_strlen	;wreg free
  2602  011048  0100               	movlb	0	; () banked
  2603  01104A  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2604  01104C  27AF               	addwf	?_strlen& (0+255),f,b
  2605  01104E  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2606  011050  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2607  011052  0E95               	movlw	low _line
  2608  011054  25AF               	addwf	?_strlen& (0+255),w,b
  2609  011056  6ED9               	movwf	fsr2l,c
  2610  011058  0E01               	movlw	high _line
  2611  01105A  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2612  01105C  6EDA               	movwf	fsr2h,c
  2613  01105E  0E0A               	movlw	10
  2614  011060  18DE               	xorwf	postinc2,w,c
  2615  011062  B4D8               	btfsc	status,2,c
  2616  011064  D7D0               	goto	l1008
  2617                           
  2618                           ; BSR set to: 0
  2619  011066  0EFF               	movlw	255
  2620  011068  6FCA               	movwf	??_ringBufferPull& (0+255),b
  2621  01106A  0EFF               	movlw	255
  2622  01106C  6FCB               	movwf	(??_ringBufferPull+1)& (0+255),b
  2623  01106E  0E95               	movlw	low _line
  2624  011070  6FAF               	movwf	strlen@s& (0+255),b
  2625  011072  0E01               	movlw	high _line
  2626  011074  6FB0               	movwf	(strlen@s+1)& (0+255),b
  2627  011076  ECEC  F08F         	call	_strlen	;wreg free
  2628  01107A  0100               	movlb	0	; () banked
  2629  01107C  51CA               	movf	??_ringBufferPull& (0+255),w,b
  2630  01107E  27AF               	addwf	?_strlen& (0+255),f,b
  2631  011080  51CB               	movf	(??_ringBufferPull+1)& (0+255),w,b
  2632  011082  23B0               	addwfc	(?_strlen+1)& (0+255),f,b
  2633  011084  0E95               	movlw	low _line
  2634  011086  25AF               	addwf	?_strlen& (0+255),w,b
  2635  011088  6ED9               	movwf	fsr2l,c
  2636  01108A  0E01               	movlw	high _line
  2637  01108C  21B0               	addwfc	(?_strlen+1)& (0+255),w,b
  2638  01108E  6EDA               	movwf	fsr2h,c
  2639  011090  0E0D               	movlw	13
  2640  011092  18DE               	xorwf	postinc2,w,c
  2641  011094  B4D8               	btfsc	status,2,c
  2642  011096  D7B7               	goto	l1008
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;ring_buffer_interface.c: 36: }
  2646                           ;ring_buffer_interface.c: 40: eusart2RxStringReady = 0;
  2647  011098  924F               	bcf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;ring_buffer_interface.c: 43: ringBufferLUT(line);
  2651  01109A  0E95               	movlw	low _line
  2652  01109C  6FC7               	movwf	ringBufferLUT@line& (0+255),b
  2653  01109E  0E01               	movlw	high _line
  2654  0110A0  6FC8               	movwf	(ringBufferLUT@line+1)& (0+255),b
  2655  0110A2  EC00  F080         	call	_ringBufferLUT	;wreg free
  2656  0110A6  0012               	return		;funcret
  2657  0110A8                     __end_of_ringBufferPull:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           intcon	equ	0xFF2
  2664                           postinc0	equ	0xFEE
  2665                           wreg	equ	0xFE8
  2666                           postdec1	equ	0xFE5
  2667                           fsr1l	equ	0xFE1
  2668                           indf2	equ	0xFDF
  2669                           postinc2	equ	0xFDE
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _strlen *****************
  2675 ;; Defined at:
  2676 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2679 ;;		 -> line(64), 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  2682 ;;		 -> line(64), 
  2683 ;; Return value:  Size  Location     Type
  2684 ;;                  2    0[BANK0 ] unsigned int 
  2685 ;; Registers used:
  2686 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2696 ;;Total ram usage:        6 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    5
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_ringBufferPull
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text2
  2707  011FD8                     __ptext2:
  2708                           	opt stack 0
  2709  011FD8                     _strlen:
  2710                           	opt stack 24
  2711                           
  2712                           ;incstack = 0
  2713  011FD8  C0AF  F0B3         	movff	strlen@s,strlen@cp
  2714  011FDC  C0B0  F0B4         	movff	strlen@s+1,strlen@cp+1
  2715  011FE0  D003               	goto	l1643
  2716  011FE2  0100               	movlb	0	; () banked
  2717  011FE4  4BB3               	infsnz	strlen@cp& (0+255),f,b
  2718  011FE6  2BB4               	incf	(strlen@cp+1)& (0+255),f,b
  2719  011FE8                     l1643:
  2720                           
  2721                           ; BSR set to: 0
  2722  011FE8  C0B3  FFD9         	movff	strlen@cp,fsr2l
  2723  011FEC  C0B4  FFDA         	movff	strlen@cp+1,fsr2h
  2724  011FF0  50DF               	movf	indf2,w,c
  2725  011FF2  A4D8               	btfss	status,2,c
  2726  011FF4  D7F6               	goto	l1644
  2727  011FF6  C0AF  F0B1         	movff	strlen@s,??_strlen
  2728  011FFA  C0B0  F0B2         	movff	strlen@s+1,??_strlen+1
  2729  011FFE  0100               	movlb	0	; () banked
  2730  012000  1FB1               	comf	??_strlen& (0+255),f,b
  2731  012002  1FB2               	comf	(??_strlen+1)& (0+255),f,b
  2732  012004  4BB1               	infsnz	??_strlen& (0+255),f,b
  2733  012006  2BB2               	incf	(??_strlen+1)& (0+255),f,b
  2734  012008  51B3               	movf	strlen@cp& (0+255),w,b
  2735  01200A  25B1               	addwf	??_strlen& (0+255),w,b
  2736  01200C  6FAF               	movwf	?_strlen& (0+255),b
  2737  01200E  51B4               	movf	(strlen@cp+1)& (0+255),w,b
  2738  012010  21B2               	addwfc	(??_strlen+1)& (0+255),w,b
  2739  012012  6FB0               	movwf	(?_strlen+1)& (0+255),b
  2740  012014  0012               	return	
  2741  012016                     __end_of_strlen:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           intcon	equ	0xFF2
  2748                           postinc0	equ	0xFEE
  2749                           wreg	equ	0xFE8
  2750                           postdec1	equ	0xFE5
  2751                           fsr1l	equ	0xFE1
  2752                           indf2	equ	0xFDF
  2753                           postinc2	equ	0xFDE
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _ringBufferLUT *****************
  2759 ;; Defined at:
  2760 ;;		line 9 in file "ring_buffer_LUT.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  line            2   24[BANK0 ] PTR unsigned char 
  2763 ;;		 -> line(64), 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;Total ram usage:        3 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    8
  2782 ;; This function calls:
  2783 ;;		_MTOUCH_Button_isPressed
  2784 ;;		_printf
  2785 ;;		_strcmp
  2786 ;; This function is called by:
  2787 ;;		_ringBufferPull
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text3
  2792  010000                     __ptext3:
  2793                           	opt stack 0
  2794  010000                     _ringBufferLUT:
  2795                           	opt stack 21
  2796                           
  2797                           ;ring_buffer_LUT.c: 14: if (USB_DTR == 1) {
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;incstack = 0
  2801  010000  A04F               	btfss	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
  2802  010002  0012               	return	
  2803                           
  2804                           ;ring_buffer_LUT.c: 17: if((0 == strcmp(line, "LEDs On"))) {
  2805  010004  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2806  010008  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2807  01000C  0ECF               	movlw	low STR_11
  2808  01000E  0100               	movlb	0	; () banked
  2809  010010  6FB1               	movwf	strcmp@s2& (0+255),b
  2810  010012  0EFF               	movlw	high STR_11
  2811  010014  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2812  010016  ECEF  F08E         	call	_strcmp	;wreg free
  2813  01001A  0100               	movlb	0	; () banked
  2814  01001C  51AF               	movf	?_strcmp& (0+255),w,b
  2815  01001E  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2816  010020  A4D8               	btfss	status,2,c
  2817  010022  D017               	goto	l1032
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;ring_buffer_LUT.c: 20: LATF = 0x00;
  2821  010024  0E00               	movlw	0
  2822  010026  6E7E               	movwf	3966,c	;volatile
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;ring_buffer_LUT.c: 23: printf("\n\r");
  2826  010028  0EA2               	movlw	low (STR_13+15)
  2827  01002A  6FBB               	movwf	printf@f& (0+255),b
  2828  01002C  0EFF               	movlw	high (STR_13+15)
  2829  01002E  6FBC               	movwf	(printf@f+1)& (0+255),b
  2830  010030  EC68  F085         	call	_printf	;wreg free
  2831                           
  2832                           ;ring_buffer_LUT.c: 25: printf("    LATF = 0x00\n\r");
  2833  010034  0E93               	movlw	low STR_13
  2834  010036  0100               	movlb	0	; () banked
  2835  010038  6FBB               	movwf	printf@f& (0+255),b
  2836  01003A  0EFF               	movlw	high STR_13
  2837  01003C  6FBC               	movwf	(printf@f+1)& (0+255),b
  2838  01003E  EC68  F085         	call	_printf	;wreg free
  2839                           
  2840                           ;ring_buffer_LUT.c: 28: printf("\n\r");
  2841  010042  0EA2               	movlw	low (STR_13+15)
  2842  010044  0100               	movlb	0	; () banked
  2843  010046  6FBB               	movwf	printf@f& (0+255),b
  2844  010048  0EFF               	movlw	high (STR_13+15)
  2845  01004A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2846  01004C  EC68  F085         	call	_printf	;wreg free
  2847                           
  2848                           ;ring_buffer_LUT.c: 30: }
  2849  010050  0012               	return	
  2850  010052                     l1032:
  2851                           
  2852                           ;ring_buffer_LUT.c: 34: else if((0 == strcmp(line, "LEDs Off"))) {
  2853  010052  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2854  010056  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2855  01005A  0EC6               	movlw	low STR_15
  2856  01005C  0100               	movlb	0	; () banked
  2857  01005E  6FB1               	movwf	strcmp@s2& (0+255),b
  2858  010060  0EFF               	movlw	high STR_15
  2859  010062  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2860  010064  ECEF  F08E         	call	_strcmp	;wreg free
  2861  010068  0100               	movlb	0	; () banked
  2862  01006A  51AF               	movf	?_strcmp& (0+255),w,b
  2863  01006C  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2864  01006E  A4D8               	btfss	status,2,c
  2865  010070  D016               	goto	l1034
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;ring_buffer_LUT.c: 37: LATF = 0xFF;
  2869  010072  687E               	setf	3966,c	;volatile
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;ring_buffer_LUT.c: 40: printf("\n\r");
  2873  010074  0EA2               	movlw	low (STR_13+15)
  2874  010076  6FBB               	movwf	printf@f& (0+255),b
  2875  010078  0EFF               	movlw	high (STR_13+15)
  2876  01007A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2877  01007C  EC68  F085         	call	_printf	;wreg free
  2878                           
  2879                           ;ring_buffer_LUT.c: 42: printf("    LATF = 0xFF\n\r");
  2880  010080  0EA5               	movlw	low STR_17
  2881  010082  0100               	movlb	0	; () banked
  2882  010084  6FBB               	movwf	printf@f& (0+255),b
  2883  010086  0EFF               	movlw	high STR_17
  2884  010088  6FBC               	movwf	(printf@f+1)& (0+255),b
  2885  01008A  EC68  F085         	call	_printf	;wreg free
  2886                           
  2887                           ;ring_buffer_LUT.c: 45: printf("\n\r");
  2888  01008E  0EA2               	movlw	low (STR_13+15)
  2889  010090  0100               	movlb	0	; () banked
  2890  010092  6FBB               	movwf	printf@f& (0+255),b
  2891  010094  0EFF               	movlw	high (STR_13+15)
  2892  010096  6FBC               	movwf	(printf@f+1)& (0+255),b
  2893  010098  EC68  F085         	call	_printf	;wreg free
  2894                           
  2895                           ;ring_buffer_LUT.c: 47: }
  2896  01009C  0012               	return	
  2897  01009E                     l1034:
  2898                           
  2899                           ;ring_buffer_LUT.c: 50: else if((0 == strcmp(line, "Button States?"))) {
  2900  01009E  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  2901  0100A2  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  2902  0100A6  0EB7               	movlw	low STR_19
  2903  0100A8  0100               	movlb	0	; () banked
  2904  0100AA  6FB1               	movwf	strcmp@s2& (0+255),b
  2905  0100AC  0EFF               	movlw	high STR_19
  2906  0100AE  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  2907  0100B0  ECEF  F08E         	call	_strcmp	;wreg free
  2908  0100B4  0100               	movlb	0	; () banked
  2909  0100B6  51AF               	movf	?_strcmp& (0+255),w,b
  2910  0100B8  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  2911  0100BA  A4D8               	btfss	status,2,c
  2912  0100BC  D059               	goto	l1036
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;ring_buffer_LUT.c: 53: printf("\n\r");
  2916  0100BE  0EA2               	movlw	low (STR_13+15)
  2917  0100C0  6FBB               	movwf	printf@f& (0+255),b
  2918  0100C2  0EFF               	movlw	high (STR_13+15)
  2919  0100C4  6FBC               	movwf	(printf@f+1)& (0+255),b
  2920  0100C6  EC68  F085         	call	_printf	;wreg free
  2921                           
  2922                           ;ring_buffer_LUT.c: 56: printf("    Button 0: %d\n\r", MTOUCH_Button_isPressed(Button0))
      +                          ;
  2923  0100CA  0E34               	movlw	low STR_21
  2924  0100CC  0100               	movlb	0	; () banked
  2925  0100CE  6FBB               	movwf	printf@f& (0+255),b
  2926  0100D0  0EFF               	movlw	high STR_21
  2927  0100D2  6FBC               	movwf	(printf@f+1)& (0+255),b
  2928  0100D4  0E00               	movlw	0
  2929  0100D6  ECDC  F090         	call	_MTOUCH_Button_isPressed
  2930  0100DA  0100               	movlb	0	; () banked
  2931  0100DC  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2932  0100DE  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2933  0100E0  6FBD               	movwf	(?_printf+2)& (0+255),b
  2934  0100E2  6BBE               	clrf	(?_printf+3)& (0+255),b
  2935  0100E4  EC68  F085         	call	_printf	;wreg free
  2936                           
  2937                           ;ring_buffer_LUT.c: 57: printf("    Button 1: %d\n\r", MTOUCH_Button_isPressed(Button1))
      +                          ;
  2938  0100E8  0E47               	movlw	low STR_22
  2939  0100EA  0100               	movlb	0	; () banked
  2940  0100EC  6FBB               	movwf	printf@f& (0+255),b
  2941  0100EE  0EFF               	movlw	high STR_22
  2942  0100F0  6FBC               	movwf	(printf@f+1)& (0+255),b
  2943  0100F2  0E01               	movlw	1
  2944  0100F4  ECDC  F090         	call	_MTOUCH_Button_isPressed
  2945  0100F8  0100               	movlb	0	; () banked
  2946  0100FA  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2947  0100FC  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2948  0100FE  6FBD               	movwf	(?_printf+2)& (0+255),b
  2949  010100  6BBE               	clrf	(?_printf+3)& (0+255),b
  2950  010102  EC68  F085         	call	_printf	;wreg free
  2951                           
  2952                           ;ring_buffer_LUT.c: 58: printf("    Button 2: %d\n\r", MTOUCH_Button_isPressed(Button2))
      +                          ;
  2953  010106  0E5A               	movlw	low STR_23
  2954  010108  0100               	movlb	0	; () banked
  2955  01010A  6FBB               	movwf	printf@f& (0+255),b
  2956  01010C  0EFF               	movlw	high STR_23
  2957  01010E  6FBC               	movwf	(printf@f+1)& (0+255),b
  2958  010110  0E02               	movlw	2
  2959  010112  ECDC  F090         	call	_MTOUCH_Button_isPressed
  2960  010116  0100               	movlb	0	; () banked
  2961  010118  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2962  01011A  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2963  01011C  6FBD               	movwf	(?_printf+2)& (0+255),b
  2964  01011E  6BBE               	clrf	(?_printf+3)& (0+255),b
  2965  010120  EC68  F085         	call	_printf	;wreg free
  2966                           
  2967                           ;ring_buffer_LUT.c: 59: printf("    Button 3: %d\n\r", MTOUCH_Button_isPressed(Button3))
      +                          ;
  2968  010124  0E6D               	movlw	low STR_24
  2969  010126  0100               	movlb	0	; () banked
  2970  010128  6FBB               	movwf	printf@f& (0+255),b
  2971  01012A  0EFF               	movlw	high STR_24
  2972  01012C  6FBC               	movwf	(printf@f+1)& (0+255),b
  2973  01012E  0E03               	movlw	3
  2974  010130  ECDC  F090         	call	_MTOUCH_Button_isPressed
  2975  010134  0100               	movlb	0	; () banked
  2976  010136  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2977  010138  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2978  01013A  6FBD               	movwf	(?_printf+2)& (0+255),b
  2979  01013C  6BBE               	clrf	(?_printf+3)& (0+255),b
  2980  01013E  EC68  F085         	call	_printf	;wreg free
  2981                           
  2982                           ;ring_buffer_LUT.c: 60: printf("    Button 4: %d\n\r", MTOUCH_Button_isPressed(Button4))
      +                          ;
  2983  010142  0E80               	movlw	low STR_25
  2984  010144  0100               	movlb	0	; () banked
  2985  010146  6FBB               	movwf	printf@f& (0+255),b
  2986  010148  0EFF               	movlw	high STR_25
  2987  01014A  6FBC               	movwf	(printf@f+1)& (0+255),b
  2988  01014C  0E04               	movlw	4
  2989  01014E  ECDC  F090         	call	_MTOUCH_Button_isPressed
  2990  010152  0100               	movlb	0	; () banked
  2991  010154  6FC9               	movwf	??_ringBufferLUT& (0+255),b
  2992  010156  51C9               	movf	??_ringBufferLUT& (0+255),w,b
  2993  010158  6FBD               	movwf	(?_printf+2)& (0+255),b
  2994  01015A  6BBE               	clrf	(?_printf+3)& (0+255),b
  2995  01015C  EC68  F085         	call	_printf	;wreg free
  2996                           
  2997                           ;ring_buffer_LUT.c: 63: printf("\n\r");
  2998  010160  0EA2               	movlw	low (STR_13+15)
  2999  010162  0100               	movlb	0	; () banked
  3000  010164  6FBB               	movwf	printf@f& (0+255),b
  3001  010166  0EFF               	movlw	high (STR_13+15)
  3002  010168  6FBC               	movwf	(printf@f+1)& (0+255),b
  3003  01016A  EC68  F085         	call	_printf	;wreg free
  3004                           
  3005                           ;ring_buffer_LUT.c: 64: }
  3006  01016E  0012               	return	
  3007  010170                     l1036:
  3008                           
  3009                           ;ring_buffer_LUT.c: 68: else if((0 == strcmp(line, "Reset"))) {
  3010  010170  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  3011  010174  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  3012  010178  0EE3               	movlw	low STR_27
  3013  01017A  0100               	movlb	0	; () banked
  3014  01017C  6FB1               	movwf	strcmp@s2& (0+255),b
  3015  01017E  0EFF               	movlw	high STR_27
  3016  010180  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  3017  010182  ECEF  F08E         	call	_strcmp	;wreg free
  3018  010186  0100               	movlb	0	; () banked
  3019  010188  51AF               	movf	?_strcmp& (0+255),w,b
  3020  01018A  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3021  01018C  A4D8               	btfss	status,2,c
  3022  01018E  D00F               	goto	l1038
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;ring_buffer_LUT.c: 71: printf("\033[2J");
  3026  010190  0EEE               	movlw	low STR_7
  3027  010192  6FBB               	movwf	printf@f& (0+255),b
  3028  010194  0EFF               	movlw	high STR_7
  3029  010196  6FBC               	movwf	(printf@f+1)& (0+255),b
  3030  010198  EC68  F085         	call	_printf	;wreg free
  3031                           
  3032                           ;ring_buffer_LUT.c: 74: printf("\033[H");
  3033  01019C  0EF7               	movlw	low STR_8
  3034  01019E  0100               	movlb	0	; () banked
  3035  0101A0  6FBB               	movwf	printf@f& (0+255),b
  3036  0101A2  0EFF               	movlw	high STR_8
  3037  0101A4  6FBC               	movwf	(printf@f+1)& (0+255),b
  3038  0101A6  EC68  F085         	call	_printf	;wreg free
  3039  0101AA  00FF               	reset		;# 
  3040                           
  3041                           ;ring_buffer_LUT.c: 79: }
  3042  0101AC  0012               	return	
  3043  0101AE                     l1038:
  3044                           
  3045                           ;ring_buffer_LUT.c: 82: else if((0 == strcmp(line, "Clear"))) {
  3046  0101AE  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  3047  0101B2  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  3048  0101B6  0EDD               	movlw	low STR_30
  3049  0101B8  0100               	movlb	0	; () banked
  3050  0101BA  6FB1               	movwf	strcmp@s2& (0+255),b
  3051  0101BC  0EFF               	movlw	high STR_30
  3052  0101BE  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  3053  0101C0  ECEF  F08E         	call	_strcmp	;wreg free
  3054  0101C4  0100               	movlb	0	; () banked
  3055  0101C6  51AF               	movf	?_strcmp& (0+255),w,b
  3056  0101C8  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3057  0101CA  A4D8               	btfss	status,2,c
  3058  0101CC  D00E               	goto	l1040
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;ring_buffer_LUT.c: 85: printf("\033[2J");
  3062  0101CE  0EEE               	movlw	low STR_7
  3063  0101D0  6FBB               	movwf	printf@f& (0+255),b
  3064  0101D2  0EFF               	movlw	high STR_7
  3065  0101D4  6FBC               	movwf	(printf@f+1)& (0+255),b
  3066  0101D6  EC68  F085         	call	_printf	;wreg free
  3067                           
  3068                           ;ring_buffer_LUT.c: 88: printf("\033[H");
  3069  0101DA  0EF7               	movlw	low STR_8
  3070  0101DC  0100               	movlb	0	; () banked
  3071  0101DE  6FBB               	movwf	printf@f& (0+255),b
  3072  0101E0  0EFF               	movlw	high STR_8
  3073  0101E2  6FBC               	movwf	(printf@f+1)& (0+255),b
  3074  0101E4  EC68  F085         	call	_printf	;wreg free
  3075                           
  3076                           ;ring_buffer_LUT.c: 90: }
  3077  0101E8  0012               	return	
  3078  0101EA                     l1040:
  3079                           
  3080                           ;ring_buffer_LUT.c: 93: else if((0 == strcmp(line, "*IDN?")) || (0 == strcmp(line, "IDN"
      +                          ))) {
  3081  0101EA  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  3082  0101EE  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  3083  0101F2  0ED7               	movlw	low STR_33
  3084  0101F4  0100               	movlb	0	; () banked
  3085  0101F6  6FB1               	movwf	strcmp@s2& (0+255),b
  3086  0101F8  0EFF               	movlw	high STR_33
  3087  0101FA  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  3088  0101FC  ECEF  F08E         	call	_strcmp	;wreg free
  3089  010200  0100               	movlb	0	; () banked
  3090  010202  51AF               	movf	?_strcmp& (0+255),w,b
  3091  010204  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3092  010206  B4D8               	btfsc	status,2,c
  3093  010208  D00F               	goto	u6590
  3094                           
  3095                           ; BSR set to: 0
  3096  01020A  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  3097  01020E  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  3098  010212  0EF3               	movlw	low STR_34
  3099  010214  6FB1               	movwf	strcmp@s2& (0+255),b
  3100  010216  0EFF               	movlw	high STR_34
  3101  010218  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  3102  01021A  ECEF  F08E         	call	_strcmp	;wreg free
  3103  01021E  0100               	movlb	0	; () banked
  3104  010220  51AF               	movf	?_strcmp& (0+255),w,b
  3105  010222  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3106  010224  A4D8               	btfss	status,2,c
  3107  010226  D015               	goto	l1042
  3108  010228                     u6590:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;ring_buffer_LUT.c: 96: printf("\n\r");
  3112                           
  3113                           ; BSR set to: 0
  3114  010228  0EA2               	movlw	low (STR_13+15)
  3115  01022A  6FBB               	movwf	printf@f& (0+255),b
  3116  01022C  0EFF               	movlw	high (STR_13+15)
  3117  01022E  6FBC               	movwf	(printf@f+1)& (0+255),b
  3118  010230  EC68  F085         	call	_printf	;wreg free
  3119                           
  3120                           ;ring_buffer_LUT.c: 99: printf("    mTouch Test Board, REVA");
  3121  010234  0E18               	movlw	low STR_36
  3122  010236  0100               	movlb	0	; () banked
  3123  010238  6FBB               	movwf	printf@f& (0+255),b
  3124  01023A  0EFF               	movlw	high STR_36
  3125  01023C  6FBC               	movwf	(printf@f+1)& (0+255),b
  3126  01023E  EC68  F085         	call	_printf	;wreg free
  3127                           
  3128                           ;ring_buffer_LUT.c: 102: printf("\n\r");
  3129  010242  0EA2               	movlw	low (STR_13+15)
  3130  010244  0100               	movlb	0	; () banked
  3131  010246  6FBB               	movwf	printf@f& (0+255),b
  3132  010248  0EFF               	movlw	high (STR_13+15)
  3133  01024A  6FBC               	movwf	(printf@f+1)& (0+255),b
  3134  01024C  EC68  F085         	call	_printf	;wreg free
  3135                           
  3136                           ;ring_buffer_LUT.c: 104: }
  3137  010250  0012               	return	
  3138  010252                     l1042:
  3139                           
  3140                           ;ring_buffer_LUT.c: 107: else if((0 == strcmp(line, "Help"))) {
  3141  010252  C0C7  F0AF         	movff	ringBufferLUT@line,strcmp@s1
  3142  010256  C0C8  F0B0         	movff	ringBufferLUT@line+1,strcmp@s1+1
  3143  01025A  0EE9               	movlw	low STR_38
  3144  01025C  0100               	movlb	0	; () banked
  3145  01025E  6FB1               	movwf	strcmp@s2& (0+255),b
  3146  010260  0EFF               	movlw	high STR_38
  3147  010262  6FB2               	movwf	(strcmp@s2+1)& (0+255),b
  3148  010264  ECEF  F08E         	call	_strcmp	;wreg free
  3149  010268  0100               	movlb	0	; () banked
  3150  01026A  51AF               	movf	?_strcmp& (0+255),w,b
  3151  01026C  11B0               	iorwf	(?_strcmp+1)& (0+255),w,b
  3152  01026E  A4D8               	btfss	status,2,c
  3153  010270  0012               	return	
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;ring_buffer_LUT.c: 110: printf("\n\r");
  3157  010272  0EA2               	movlw	low (STR_13+15)
  3158  010274  6FBB               	movwf	printf@f& (0+255),b
  3159  010276  0EFF               	movlw	high (STR_13+15)
  3160  010278  6FBC               	movwf	(printf@f+1)& (0+255),b
  3161  01027A  EC68  F085         	call	_printf	;wreg free
  3162                           
  3163                           ;ring_buffer_LUT.c: 112: printf("   List of supported commands:\n\r"
  3164                           ;ring_buffer_LUT.c: 113: "   LEDs On: Turns all LEDs On\n\r"
  3165                           ;ring_buffer_LUT.c: 114: "   LEDs Off: Turns all LEDs Off\n\r"
  3166                           ;ring_buffer_LUT.c: 115: "   Button States?: Returns state of all five mTouch buttons\n\
      +                          r"
  3167                           ;ring_buffer_LUT.c: 116: "   Reset: Clears the terminal and resets the micro\n\r"
  3168                           ;ring_buffer_LUT.c: 117: "   Clear: Clears the terminal but doesn't reset the micro\n\r"
  3169                           ;ring_buffer_LUT.c: 118: "   *IDN?: Returns device identification\n\r"
  3170  01027E  0E1B               	movlw	low STR_40
  3171  010280  0100               	movlb	0	; () banked
  3172  010282  6FBB               	movwf	printf@f& (0+255),b
  3173  010284  0EFD               	movlw	high STR_40
  3174  010286  6FBC               	movwf	(printf@f+1)& (0+255),b
  3175  010288  EC68  F085         	call	_printf	;wreg free
  3176                           
  3177                           ;ring_buffer_LUT.c: 122: printf("\n\r");
  3178  01028C  0EA2               	movlw	low (STR_13+15)
  3179  01028E  0100               	movlb	0	; () banked
  3180  010290  6FBB               	movwf	printf@f& (0+255),b
  3181  010292  0EFF               	movlw	high (STR_13+15)
  3182  010294  6FBC               	movwf	(printf@f+1)& (0+255),b
  3183  010296  EC68  F085         	call	_printf	;wreg free
  3184  01029A  0012               	return	
  3185  01029C                     __end_of_ringBufferLUT:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           indf2	equ	0xFDF
  3197                           postinc2	equ	0xFDE
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _strcmp *****************
  3203 ;; Defined at:
  3204 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3207 ;;		 -> line(64), 
  3208 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3209 ;;		 -> STR_38(5), STR_34(4), STR_33(6), STR_30(6), 
  3210 ;;		 -> STR_27(6), STR_19(15), STR_15(9), STR_11(8), 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  r               1    5[BANK0 ] char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  2    0[BANK0 ] int 
  3215 ;; Registers used:
  3216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;Total ram usage:        6 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    5
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_ringBufferLUT
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text4
  3237  011DDE                     __ptext4:
  3238                           	opt stack 0
  3239  011DDE                     _strcmp:
  3240                           	opt stack 23
  3241                           
  3242                           ;incstack = 0
  3243  011DDE  D005               	goto	l1635
  3244  011DE0  0100               	movlb	0	; () banked
  3245  011DE2  4BAF               	infsnz	strcmp@s1& (0+255),f,b
  3246  011DE4  2BB0               	incf	(strcmp@s1+1)& (0+255),f,b
  3247  011DE6  4BB1               	infsnz	strcmp@s2& (0+255),f,b
  3248  011DE8  2BB2               	incf	(strcmp@s2+1)& (0+255),f,b
  3249  011DEA                     l1635:
  3250                           
  3251                           ; BSR set to: 0
  3252  011DEA  C0AF  FFD9         	movff	strcmp@s1,fsr2l
  3253  011DEE  C0B0  FFDA         	movff	strcmp@s1+1,fsr2h
  3254  011DF2  50DF               	movf	indf2,w,c
  3255  011DF4  0100               	movlb	0	; () banked
  3256  011DF6  6FB3               	movwf	??_strcmp& (0+255),b
  3257  011DF8  C0B1  FFF6         	movff	strcmp@s2,tblptrl
  3258  011DFC  C0B2  FFF7         	movff	strcmp@s2+1,tblptrh
  3259  011E00                     	if	0	;tblptru may be non-zero
  3260  011E00                     	endif
  3261  011E00                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3262  011E00  0E00               	movlw	low (__mediumconst shr (0+16))
  3263  011E02  6EF8               	movwf	tblptru,c
  3264  011E04                     	endif
  3265  011E04  0008               	tblrd		*
  3266  011E06  50F5               	movf	tablat,w,c
  3267  011E08  0800               	sublw	0
  3268  011E0A  25B3               	addwf	??_strcmp& (0+255),w,b
  3269  011E0C  6FB4               	movwf	strcmp@r& (0+255),b
  3270  011E0E  51B4               	movf	strcmp@r& (0+255),w,b
  3271  011E10  A4D8               	btfss	status,2,c
  3272  011E12  D007               	goto	u6390
  3273                           
  3274                           ; BSR set to: 0
  3275  011E14  C0AF  FFD9         	movff	strcmp@s1,fsr2l
  3276  011E18  C0B0  FFDA         	movff	strcmp@s1+1,fsr2h
  3277  011E1C  50DF               	movf	indf2,w,c
  3278  011E1E  A4D8               	btfss	status,2,c
  3279  011E20  D7DF               	goto	l1636
  3280  011E22                     u6390:
  3281                           
  3282                           ; BSR set to: 0
  3283                           
  3284                           ; BSR set to: 0
  3285                           
  3286                           ; BSR set to: 0
  3287  011E22  51B4               	movf	strcmp@r& (0+255),w,b
  3288  011E24  6FAF               	movwf	?_strcmp& (0+255),b
  3289  011E26  6BB0               	clrf	(?_strcmp+1)& (0+255),b
  3290  011E28  BFAF               	btfsc	?_strcmp& (0+255),7,b
  3291  011E2A  07B0               	decf	(?_strcmp+1)& (0+255),f,b
  3292  011E2C  0012               	return	
  3293  011E2E                     __end_of_strcmp:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           intcon	equ	0xFF2
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1l	equ	0xFE1
  3304                           indf2	equ	0xFDF
  3305                           postinc2	equ	0xFDE
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _EUSART2_Read *****************
  3311 ;; Defined at:
  3312 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  readValue       1    0[BANK0 ] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      unsigned char 
  3319 ;; Registers used:
  3320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;Total ram usage:        1 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    5
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_ringBufferPull
  3337 ;;		_getch
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text5
  3342  0120D0                     __ptext5:
  3343                           	opt stack 0
  3344  0120D0                     _EUSART2_Read:
  3345                           	opt stack 24
  3346                           
  3347                           ;eusart2.c: 132: uint8_t readValue = 0;
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;incstack = 0
  3351  0120D0  0E00               	movlw	0
  3352  0120D2  0100               	movlb	0	; () banked
  3353  0120D4  6FAF               	movwf	EUSART2_Read@readValue& (0+255),b
  3354  0120D6                     
  3355                           ; BSR set to: 0
  3356                           
  3357                           ;eusart2.c: 135: {
  3358                           
  3359                           ; BSR set to: 0
  3360  0120D6  503D               	movf	_eusart2RxCount,w,c	;volatile
  3361  0120D8  B4D8               	btfsc	status,2,c
  3362  0120DA  D7FD               	goto	l225
  3363                           
  3364                           ;eusart2.c: 136: }
  3365                           ;eusart2.c: 138: readValue = eusart2RxBuffer[eusart2RxTail++];
  3366  0120DC  503E               	movf	_eusart2RxTail,w,c	;volatile
  3367  0120DE  0D01               	mullw	1
  3368  0120E0  0E00               	movlw	low _eusart2RxBuffer
  3369  0120E2  24F3               	addwf	prodl,w,c
  3370  0120E4  6ED9               	movwf	fsr2l,c
  3371  0120E6  0E01               	movlw	high _eusart2RxBuffer
  3372  0120E8  20F4               	addwfc	prodh,w,c
  3373  0120EA  6EDA               	movwf	fsr2h,c
  3374  0120EC  50DF               	movf	indf2,w,c
  3375  0120EE  0100               	movlb	0	; () banked
  3376  0120F0  6FAF               	movwf	EUSART2_Read@readValue& (0+255),b
  3377                           
  3378                           ; BSR set to: 0
  3379  0120F2  2A3E               	incf	_eusart2RxTail,f,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;eusart2.c: 139: if(sizeof(eusart2RxBuffer) <= eusart2RxTail)
  3383  0120F4  0E3F               	movlw	63
  3384  0120F6  643E               	cpfsgt	_eusart2RxTail,c	;volatile
  3385  0120F8  D002               	goto	l227
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;eusart2.c: 140: {
  3389                           ;eusart2.c: 141: eusart2RxTail = 0;
  3390  0120FA  0E00               	movlw	0
  3391  0120FC  6E3E               	movwf	_eusart2RxTail,c	;volatile
  3392  0120FE                     l227:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;eusart2.c: 142: }
  3396                           ;eusart2.c: 143: PIE3bits.RC2IE = 0;
  3397                           
  3398                           ; BSR set to: 0
  3399  0120FE  010E               	movlb	14	; () banked
  3400  012100  9F2C               	bcf	44,7,b	;volatile
  3401                           
  3402                           ; BSR set to: 14
  3403                           ;eusart2.c: 144: eusart2RxCount--;
  3404  012102  063D               	decf	_eusart2RxCount,f,c	;volatile
  3405                           
  3406                           ; BSR set to: 14
  3407                           ;eusart2.c: 145: PIE3bits.RC2IE = 1;
  3408  012104  8F2C               	bsf	44,7,b	;volatile
  3409                           
  3410                           ; BSR set to: 14
  3411                           ;eusart2.c: 147: return readValue;
  3412  012106  0100               	movlb	0	; () banked
  3413  012108  51AF               	movf	EUSART2_Read@readValue& (0+255),w,b
  3414  01210A  0012               	return	
  3415  01210C                     __end_of_EUSART2_Read:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           intcon	equ	0xFF2
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           indf2	equ	0xFDF
  3429                           postinc2	equ	0xFDE
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434 ;; *************** function _printResetMessage *****************
  3435 ;; Defined at:
  3436 ;;		line 50 in file "ring_buffer_interface.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    8
  3457 ;; This function calls:
  3458 ;;		_printf
  3459 ;; This function is called by:
  3460 ;;		_main
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text6
  3465  012016                     __ptext6:
  3466                           	opt stack 0
  3467  012016                     _printResetMessage:
  3468                           	opt stack 22
  3469                           
  3470                           ;ring_buffer_interface.c: 52: if (USB_DTR == 1) {
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;incstack = 0
  3474  012016  A04F               	btfss	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
  3475  012018  0012               	return	
  3476                           
  3477                           ;ring_buffer_interface.c: 55: printf("\033[2J");
  3478  01201A  0EEE               	movlw	low STR_7
  3479  01201C  0100               	movlb	0	; () banked
  3480  01201E  6FBB               	movwf	printf@f& (0+255),b
  3481  012020  0EFF               	movlw	high STR_7
  3482  012022  6FBC               	movwf	(printf@f+1)& (0+255),b
  3483  012024  EC68  F085         	call	_printf	;wreg free
  3484                           
  3485                           ;ring_buffer_interface.c: 58: printf("\033[H");
  3486  012028  0EF7               	movlw	low STR_8
  3487  01202A  0100               	movlb	0	; () banked
  3488  01202C  6FBB               	movwf	printf@f& (0+255),b
  3489  01202E  0EFF               	movlw	high STR_8
  3490  012030  6FBC               	movwf	(printf@f+1)& (0+255),b
  3491  012032  EC68  F085         	call	_printf	;wreg free
  3492                           
  3493                           ;ring_buffer_interface.c: 61: printf("    Boot complete\n\r"
  3494                           ;ring_buffer_interface.c: 62: "    PIC18F67K40 mTouch Test Board\n\r"
  3495                           ;ring_buffer_interface.c: 63: "    Evaluates the mTouch capacitive touch library distrib
      +                          uted by Microchip\n\r"
  3496                           ;ring_buffer_interface.c: 64: "    Sets the state of five LEDs based on mTouch capacitiv
      +                          e pushbuttons\n\r"
  3497                           ;ring_buffer_interface.c: 65: "    Baud rate: 115200 bps\n\r"
  3498                           ;ring_buffer_interface.c: 66: "    No parity, 8 bits, no flow control, 1 stop bit\n\r"
  3499                           ;ring_buffer_interface.c: 67: "    Commands are case sensitive\n\r"
  3500  012036  0EA7               	movlw	low STR_9
  3501  012038  0100               	movlb	0	; () banked
  3502  01203A  6FBB               	movwf	printf@f& (0+255),b
  3503  01203C  0EFB               	movlw	high STR_9
  3504  01203E  6FBC               	movwf	(printf@f+1)& (0+255),b
  3505  012040  EC68  F085         	call	_printf	;wreg free
  3506                           
  3507                           ;ring_buffer_interface.c: 72: printf("\n\r");
  3508  012044  0EA2               	movlw	low (STR_13+15)
  3509  012046  0100               	movlb	0	; () banked
  3510  012048  6FBB               	movwf	printf@f& (0+255),b
  3511  01204A  0EFF               	movlw	high (STR_13+15)
  3512  01204C  6FBC               	movwf	(printf@f+1)& (0+255),b
  3513  01204E  EC68  F085         	call	_printf	;wreg free
  3514  012052  0012               	return	
  3515  012054                     __end_of_printResetMessage:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           postinc0	equ	0xFEE
  3525                           wreg	equ	0xFE8
  3526                           postdec1	equ	0xFE5
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _SYSTEM_Initialize *****************
  3535 ;; Defined at:
  3536 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3554 ;;Total ram usage:        0 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    9
  3557 ;; This function calls:
  3558 ;;		_EUSART2_Initialize
  3559 ;;		_INTERRUPT_Initialize
  3560 ;;		_MTOUCH_Initialize
  3561 ;;		_OSCILLATOR_Initialize
  3562 ;;		_PIN_MANAGER_Initialize
  3563 ;;		_PMD_Initialize
  3564 ;; This function is called by:
  3565 ;;		_main
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text7
  3570  0125A0                     __ptext7:
  3571                           	opt stack 0
  3572  0125A0                     _SYSTEM_Initialize:
  3573                           	opt stack 21
  3574                           
  3575                           ;mcc.c: 52: INTERRUPT_Initialize();
  3576                           
  3577                           ;incstack = 0
  3578  0125A0  EC6D  F093         	call	_INTERRUPT_Initialize	;wreg free
  3579                           
  3580                           ;mcc.c: 53: PMD_Initialize();
  3581  0125A4  ECC2  F092         	call	_PMD_Initialize	;wreg free
  3582                           
  3583                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3584  0125A8  EC96  F08B         	call	_PIN_MANAGER_Initialize	;wreg free
  3585                           
  3586                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3587  0125AC  EC04  F093         	call	_OSCILLATOR_Initialize	;wreg free
  3588                           
  3589                           ;mcc.c: 56: EUSART2_Initialize();
  3590  0125B0  EC17  F08E         	call	_EUSART2_Initialize	;wreg free
  3591                           
  3592                           ;mcc.c: 57: MTOUCH_Initialize();
  3593  0125B4  EC31  F093         	call	_MTOUCH_Initialize	;wreg free
  3594  0125B8  0012               	return		;funcret
  3595  0125BA                     __end_of_SYSTEM_Initialize:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           prodh	equ	0xFF4
  3602                           prodl	equ	0xFF3
  3603                           intcon	equ	0xFF2
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1l	equ	0xFE1
  3608                           indf2	equ	0xFDF
  3609                           postinc2	equ	0xFDE
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _PMD_Initialize *****************
  3615 ;; Defined at:
  3616 ;;		line 74 in file "mcc_generated_files/mcc.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;Total ram usage:        0 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    5
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_SYSTEM_Initialize
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text8
  3645  012584                     __ptext8:
  3646                           	opt stack 0
  3647  012584                     _PMD_Initialize:
  3648                           	opt stack 24
  3649                           
  3650                           ;mcc.c: 77: PMD0 = 0x00;
  3651                           
  3652                           ;incstack = 0
  3653  012584  0E00               	movlw	0
  3654  012586  010E               	movlb	14	; () banked
  3655  012588  6F4C               	movwf	76,b	;volatile
  3656                           
  3657                           ;mcc.c: 79: PMD1 = 0x00;
  3658  01258A  0E00               	movlw	0
  3659  01258C  6F4D               	movwf	77,b	;volatile
  3660                           
  3661                           ;mcc.c: 81: PMD2 = 0x00;
  3662  01258E  0E00               	movlw	0
  3663  012590  6F4E               	movwf	78,b	;volatile
  3664                           
  3665                           ;mcc.c: 83: PMD3 = 0x00;
  3666  012592  0E00               	movlw	0
  3667  012594  6F4F               	movwf	79,b	;volatile
  3668                           
  3669                           ;mcc.c: 85: PMD4 = 0x00;
  3670  012596  0E00               	movlw	0
  3671  012598  6F50               	movwf	80,b	;volatile
  3672                           
  3673                           ;mcc.c: 87: PMD5 = 0x00;
  3674  01259A  0E00               	movlw	0
  3675  01259C  6F51               	movwf	81,b	;volatile
  3676                           
  3677                           ; BSR set to: 14
  3678  01259E  0012               	return		;funcret
  3679  0125A0                     __end_of_PMD_Initialize:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1l	equ	0xFE1
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function _PIN_MANAGER_Initialize *****************
  3699 ;; Defined at:
  3700 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      void 
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3718 ;;Total ram usage:        0 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    6
  3721 ;; This function calls:
  3722 ;;		_IOCBF2_SetInterruptHandler
  3723 ;; This function is called by:
  3724 ;;		_SYSTEM_Initialize
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text9
  3729  01172C                     __ptext9:
  3730                           	opt stack 0
  3731  01172C                     _PIN_MANAGER_Initialize:
  3732                           	opt stack 23
  3733                           
  3734                           ;pin_manager.c: 64: LATE = 0x00;
  3735                           
  3736                           ; BSR set to: 14
  3737                           ;incstack = 0
  3738  01172C  0E00               	movlw	0
  3739  01172E  6E7D               	movwf	3965,c	;volatile
  3740                           
  3741                           ;pin_manager.c: 65: LATD = 0x00;
  3742  011730  0E00               	movlw	0
  3743  011732  6E7C               	movwf	3964,c	;volatile
  3744                           
  3745                           ;pin_manager.c: 66: LATA = 0x00;
  3746  011734  0E00               	movlw	0
  3747  011736  6E79               	movwf	3961,c	;volatile
  3748                           
  3749                           ;pin_manager.c: 67: LATF = 0x1F;
  3750  011738  0E1F               	movlw	31
  3751  01173A  6E7E               	movwf	3966,c	;volatile
  3752                           
  3753                           ;pin_manager.c: 68: LATB = 0x00;
  3754  01173C  0E00               	movlw	0
  3755  01173E  6E7A               	movwf	3962,c	;volatile
  3756                           
  3757                           ;pin_manager.c: 69: LATG = 0x00;
  3758  011740  0E00               	movlw	0
  3759  011742  6E7F               	movwf	3967,c	;volatile
  3760                           
  3761                           ;pin_manager.c: 70: LATC = 0x00;
  3762  011744  0E00               	movlw	0
  3763  011746  6E7B               	movwf	3963,c	;volatile
  3764                           
  3765                           ;pin_manager.c: 71: LATH = 0x00;
  3766  011748  0E00               	movlw	0
  3767  01174A  6E80               	movwf	3968,c	;volatile
  3768                           
  3769                           ;pin_manager.c: 76: TRISE = 0x7C;
  3770  01174C  0E7C               	movlw	124
  3771  01174E  6E85               	movwf	3973,c	;volatile
  3772                           
  3773                           ;pin_manager.c: 77: TRISF = 0x00;
  3774  011750  0E00               	movlw	0
  3775  011752  6E86               	movwf	3974,c	;volatile
  3776                           
  3777                           ;pin_manager.c: 78: TRISA = 0x00;
  3778  011754  0E00               	movlw	0
  3779  011756  6E81               	movwf	3969,c	;volatile
  3780                           
  3781                           ;pin_manager.c: 79: TRISG = 0x40;
  3782  011758  0E40               	movlw	64
  3783  01175A  6E87               	movwf	3975,c	;volatile
  3784                           
  3785                           ;pin_manager.c: 80: TRISB = 0x04;
  3786  01175C  0E04               	movlw	4
  3787  01175E  6E82               	movwf	3970,c	;volatile
  3788                           
  3789                           ;pin_manager.c: 81: TRISH = 0x00;
  3790  011760  0E00               	movlw	0
  3791  011762  6E88               	movwf	3976,c	;volatile
  3792                           
  3793                           ;pin_manager.c: 82: TRISC = 0x00;
  3794  011764  0E00               	movlw	0
  3795  011766  6E83               	movwf	3971,c	;volatile
  3796                           
  3797                           ;pin_manager.c: 83: TRISD = 0x00;
  3798  011768  0E00               	movlw	0
  3799  01176A  6E84               	movwf	3972,c	;volatile
  3800                           
  3801                           ;pin_manager.c: 88: ANSELD = 0xFF;
  3802  01176C  010E               	movlb	14	; () banked
  3803  01176E  69A7               	setf	167,b	;volatile
  3804                           
  3805                           ;pin_manager.c: 89: ANSELB = 0xFB;
  3806  011770  0EFB               	movlw	251
  3807  011772  6F9A               	movwf	154,b	;volatile
  3808                           
  3809                           ; BSR set to: 14
  3810                           ;pin_manager.c: 90: ANSELE = 0xFF;
  3811  011774  69AF               	setf	175,b	;volatile
  3812                           
  3813                           ;pin_manager.c: 91: ANSELG = 0xBF;
  3814  011776  0EBF               	movlw	191
  3815  011778  6FBC               	movwf	188,b	;volatile
  3816                           
  3817                           ;pin_manager.c: 92: ANSELF = 0xE0;
  3818  01177A  0EE0               	movlw	224
  3819  01177C  6FB4               	movwf	180,b	;volatile
  3820                           
  3821                           ; BSR set to: 14
  3822                           ;pin_manager.c: 93: ANSELA = 0xFF;
  3823  01177E  6992               	setf	146,b	;volatile
  3824                           
  3825                           ;pin_manager.c: 98: WPUD = 0x00;
  3826  011780  0E00               	movlw	0
  3827  011782  6FA6               	movwf	166,b	;volatile
  3828                           
  3829                           ;pin_manager.c: 99: WPUF = 0x00;
  3830  011784  0E00               	movlw	0
  3831  011786  6FB3               	movwf	179,b	;volatile
  3832                           
  3833                           ;pin_manager.c: 100: WPUE = 0x00;
  3834  011788  0E00               	movlw	0
  3835  01178A  6FAE               	movwf	174,b	;volatile
  3836                           
  3837                           ;pin_manager.c: 101: WPUB = 0x00;
  3838  01178C  0E00               	movlw	0
  3839  01178E  6F99               	movwf	153,b	;volatile
  3840                           
  3841                           ;pin_manager.c: 102: WPUG = 0x00;
  3842  011790  0E00               	movlw	0
  3843  011792  6FBB               	movwf	187,b	;volatile
  3844                           
  3845                           ;pin_manager.c: 103: WPUA = 0x00;
  3846  011794  0E00               	movlw	0
  3847  011796  6F91               	movwf	145,b	;volatile
  3848                           
  3849                           ;pin_manager.c: 104: WPUC = 0x00;
  3850  011798  0E00               	movlw	0
  3851  01179A  6FA1               	movwf	161,b	;volatile
  3852                           
  3853                           ;pin_manager.c: 105: WPUH = 0x00;
  3854  01179C  0E00               	movlw	0
  3855  01179E  6FC0               	movwf	192,b	;volatile
  3856                           
  3857                           ;pin_manager.c: 110: ODCONE = 0x00;
  3858  0117A0  0E00               	movlw	0
  3859  0117A2  6FAD               	movwf	173,b	;volatile
  3860                           
  3861                           ;pin_manager.c: 111: ODCONF = 0x1F;
  3862  0117A4  0E1F               	movlw	31
  3863  0117A6  6FB2               	movwf	178,b	;volatile
  3864                           
  3865                           ;pin_manager.c: 112: ODCONA = 0x00;
  3866  0117A8  0E00               	movlw	0
  3867  0117AA  6F90               	movwf	144,b	;volatile
  3868                           
  3869                           ;pin_manager.c: 113: ODCONG = 0x00;
  3870  0117AC  0E00               	movlw	0
  3871  0117AE  6FBA               	movwf	186,b	;volatile
  3872                           
  3873                           ;pin_manager.c: 114: ODCONB = 0x00;
  3874  0117B0  0E00               	movlw	0
  3875  0117B2  6F98               	movwf	152,b	;volatile
  3876                           
  3877                           ;pin_manager.c: 115: ODCONH = 0x00;
  3878  0117B4  0E00               	movlw	0
  3879  0117B6  6FBF               	movwf	191,b	;volatile
  3880                           
  3881                           ;pin_manager.c: 116: ODCONC = 0x00;
  3882  0117B8  0E00               	movlw	0
  3883  0117BA  6FA0               	movwf	160,b	;volatile
  3884                           
  3885                           ;pin_manager.c: 117: ODCOND = 0x00;
  3886  0117BC  0E00               	movlw	0
  3887  0117BE  6FA5               	movwf	165,b	;volatile
  3888                           
  3889                           ; BSR set to: 14
  3890                           ;pin_manager.c: 124: IOCBFbits.IOCBF2 = 0;
  3891  0117C0  9593               	bcf	147,2,b	;volatile
  3892                           
  3893                           ; BSR set to: 14
  3894                           ;pin_manager.c: 126: IOCBNbits.IOCBN2 = 1;
  3895  0117C2  8594               	bsf	148,2,b	;volatile
  3896                           
  3897                           ; BSR set to: 14
  3898                           ;pin_manager.c: 128: IOCBPbits.IOCBP2 = 1;
  3899  0117C4  8595               	bsf	149,2,b	;volatile
  3900                           
  3901                           ; BSR set to: 14
  3902                           ;pin_manager.c: 133: IOCBF2_SetInterruptHandler(IOCBF2_DefaultInterruptHandler);
  3903  0117C6  0E6E               	movlw	low _IOCBF2_DefaultInterruptHandler
  3904  0117C8  0100               	movlb	0	; () banked
  3905  0117CA  6FAF               	movwf	IOCBF2_SetInterruptHandler@InterruptHandler& (0+255),b
  3906  0117CC  0E27               	movlw	high _IOCBF2_DefaultInterruptHandler
  3907  0117CE  6FB0               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3908  0117D0  0E01               	movlw	low (_IOCBF2_DefaultInterruptHandler shr (0+16))
  3909  0117D2  6FB1               	movwf	(IOCBF2_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  3910  0117D4  EC66  F093         	call	_IOCBF2_SetInterruptHandler	;wreg free
  3911                           
  3912                           ;pin_manager.c: 136: PIE0bits.IOCIE = 1;
  3913  0117D8  010E               	movlb	14	; () banked
  3914  0117DA  8929               	bsf	41,4,b	;volatile
  3915                           
  3916                           ; BSR set to: 14
  3917                           ;pin_manager.c: 139: RG7PPS = 0x0E;
  3918  0117DC  0E0E               	movlw	14
  3919  0117DE  6F89               	movwf	137,b	;volatile
  3920                           
  3921                           ; BSR set to: 14
  3922                           ;pin_manager.c: 140: RX2PPSbits.RX2PPS = 0x36;
  3923  0117E0  9111               	bcf	17,0,b	;volatile
  3924  0117E2  8311               	bsf	17,1,b	;volatile
  3925  0117E4  8511               	bsf	17,2,b	;volatile
  3926  0117E6  9711               	bcf	17,3,b	;volatile
  3927  0117E8  8911               	bsf	17,4,b	;volatile
  3928  0117EA  8B11               	bsf	17,5,b	;volatile
  3929                           
  3930                           ; BSR set to: 14
  3931  0117EC  0012               	return		;funcret
  3932  0117EE                     __end_of_PIN_MANAGER_Initialize:
  3933                           	opt stack 0
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1l	equ	0xFE1
  3945                           indf2	equ	0xFDF
  3946                           postinc2	equ	0xFDE
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _IOCBF2_SetInterruptHandler *****************
  3952 ;; Defined at:
  3953 ;;		line 170 in file "mcc_generated_files/pin_manager.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  InterruptHan    3    0[BANK0 ] PTR FTN()void 
  3956 ;;		 -> DTR_Callback(1), IOCBF2_DefaultInterruptHandler(1), 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3968 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;Total ram usage:        3 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    5
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_PIN_MANAGER_Initialize
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text10
  3984  0126CC                     __ptext10:
  3985                           	opt stack 0
  3986  0126CC                     _IOCBF2_SetInterruptHandler:
  3987                           	opt stack 23
  3988                           
  3989                           ;pin_manager.c: 171: IOCBF2_InterruptHandler = InterruptHandler;
  3990                           
  3991                           ; BSR set to: 14
  3992                           ;incstack = 0
  3993  0126CC  C0AF  F048         	movff	IOCBF2_SetInterruptHandler@InterruptHandler,_IOCBF2_InterruptHandler
  3994  0126D0  C0B0  F049         	movff	IOCBF2_SetInterruptHandler@InterruptHandler+1,_IOCBF2_InterruptHandler+1
  3995  0126D4  C0B1  F04A         	movff	IOCBF2_SetInterruptHandler@InterruptHandler+2,_IOCBF2_InterruptHandler+2
  3996  0126D8  0012               	return		;funcret
  3997  0126DA                     __end_of_IOCBF2_SetInterruptHandler:
  3998                           	opt stack 0
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           intcon	equ	0xFF2
  4006                           postinc0	equ	0xFEE
  4007                           wreg	equ	0xFE8
  4008                           postdec1	equ	0xFE5
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function _OSCILLATOR_Initialize *****************
  4017 ;; Defined at:
  4018 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    5
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_SYSTEM_Initialize
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text11
  4047  012608                     __ptext11:
  4048                           	opt stack 0
  4049  012608                     _OSCILLATOR_Initialize:
  4050                           	opt stack 24
  4051                           
  4052                           ;mcc.c: 63: OSCCON1 = 0x60;
  4053                           
  4054                           ;incstack = 0
  4055  012608  0E60               	movlw	96
  4056  01260A  010E               	movlb	14	; () banked
  4057  01260C  6F43               	movwf	67,b	;volatile
  4058                           
  4059                           ;mcc.c: 65: OSCCON3 = 0x00;
  4060  01260E  0E00               	movlw	0
  4061  012610  6F45               	movwf	69,b	;volatile
  4062                           
  4063                           ;mcc.c: 67: OSCEN = 0x00;
  4064  012612  0E00               	movlw	0
  4065  012614  6F47               	movwf	71,b	;volatile
  4066                           
  4067                           ;mcc.c: 69: OSCFRQ = 0x08;
  4068  012616  0E08               	movlw	8
  4069  012618  6F49               	movwf	73,b	;volatile
  4070                           
  4071                           ;mcc.c: 71: OSCTUNE = 0x00;
  4072  01261A  0E00               	movlw	0
  4073  01261C  6F48               	movwf	72,b	;volatile
  4074                           
  4075                           ; BSR set to: 14
  4076  01261E  0012               	return		;funcret
  4077  012620                     __end_of_OSCILLATOR_Initialize:
  4078                           	opt stack 0
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           prodh	equ	0xFF4
  4084                           prodl	equ	0xFF3
  4085                           intcon	equ	0xFF2
  4086                           postinc0	equ	0xFEE
  4087                           wreg	equ	0xFE8
  4088                           postdec1	equ	0xFE5
  4089                           fsr1l	equ	0xFE1
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _MTOUCH_Initialize *****************
  4097 ;; Defined at:
  4098 ;;		line 75 in file "mcc_generated_files/mtouch/mtouch.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    8
  4119 ;; This function calls:
  4120 ;;		_MTOUCH_Button_InitializeAll
  4121 ;;		_MTOUCH_Sensor_InitializeAll
  4122 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4123 ;;		_MTOUCH_Sensor_Scan_Initialize
  4124 ;; This function is called by:
  4125 ;;		_SYSTEM_Initialize
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text12
  4130  012662                     __ptext12:
  4131                           	opt stack 0
  4132  012662                     _MTOUCH_Initialize:
  4133                           	opt stack 21
  4134                           
  4135                           ;mtouch.c: 77: MTOUCH_Sensor_InitializeAll();
  4136                           
  4137                           ; BSR set to: 14
  4138                           ;incstack = 0
  4139  012662  ECA4  F090         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  4140                           
  4141                           ;mtouch.c: 78: MTOUCH_Button_InitializeAll();
  4142  012666  ECC0  F090         	call	_MTOUCH_Button_InitializeAll	;wreg free
  4143                           
  4144                           ;mtouch.c: 79: MTOUCH_Sensor_Sampled_ResetAll();
  4145  01266A  ECAD  F091         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  4146                           
  4147                           ;mtouch.c: 80: MTOUCH_Sensor_Scan_Initialize();
  4148  01266E  ECAB  F093         	call	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  4149  012672  0012               	return		;funcret
  4150  012674                     __end_of_MTOUCH_Initialize:
  4151                           	opt stack 0
  4152                           tblptru	equ	0xFF8
  4153                           tblptrh	equ	0xFF7
  4154                           tblptrl	equ	0xFF6
  4155                           tablat	equ	0xFF5
  4156                           prodh	equ	0xFF4
  4157                           prodl	equ	0xFF3
  4158                           intcon	equ	0xFF2
  4159                           postinc0	equ	0xFEE
  4160                           wreg	equ	0xFE8
  4161                           postdec1	equ	0xFE5
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  4170 ;; Defined at:
  4171 ;;		line 327 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    6
  4192 ;; This function calls:
  4193 ;;		_MTOUCH_Sensor_ADCC_Initialize
  4194 ;; This function is called by:
  4195 ;;		_MTOUCH_Initialize
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text13
  4200  012756                     __ptext13:
  4201                           	opt stack 0
  4202  012756                     _MTOUCH_Sensor_Scan_Initialize:
  4203                           	opt stack 22
  4204                           
  4205                           ;mtouch_sensor.c: 329: MTOUCH_Sensor_ADCC_Initialize();
  4206                           
  4207                           ;incstack = 0
  4208  012756  EC2A  F090         	call	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  4209  01275A  0012               	return		;funcret
  4210  01275C                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           intcon	equ	0xFF2
  4219                           postinc0	equ	0xFEE
  4220                           wreg	equ	0xFE8
  4221                           postdec1	equ	0xFE5
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  4230 ;; Defined at:
  4231 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4249 ;;Total ram usage:        0 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    5
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_MTOUCH_Sensor_Scan_Initialize
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text14
  4260  012054                     __ptext14:
  4261                           	opt stack 0
  4262  012054                     _MTOUCH_Sensor_ADCC_Initialize:
  4263                           	opt stack 22
  4264                           
  4265                           ;mtouch_sensor.c: 254: ADCLK = 0x1f;
  4266                           
  4267                           ;incstack = 0
  4268  012054  0E1F               	movlw	31
  4269  012056  010F               	movlb	15	; () banked
  4270  012058  6F57               	movwf	87,b	;volatile
  4271                           
  4272                           ;mtouch_sensor.c: 256: ADREF = 0x00;
  4273  01205A  0E00               	movlw	0
  4274  01205C  6F58               	movwf	88,b	;volatile
  4275                           
  4276                           ;mtouch_sensor.c: 258: ADCAP = 0x00;
  4277  01205E  0E00               	movlw	0
  4278  012060  6F5D               	movwf	93,b	;volatile
  4279                           
  4280                           ;mtouch_sensor.c: 260: ADLTHL = 0x00;
  4281  012062  0E00               	movlw	0
  4282  012064  6E6A               	movwf	3946,c	;volatile
  4283                           
  4284                           ;mtouch_sensor.c: 262: ADLTHH = 0x00;
  4285  012066  0E00               	movlw	0
  4286  012068  6E6B               	movwf	3947,c	;volatile
  4287                           
  4288                           ;mtouch_sensor.c: 264: ADUTHL = 0x00;
  4289  01206A  0E00               	movlw	0
  4290  01206C  6E6C               	movwf	3948,c	;volatile
  4291                           
  4292                           ;mtouch_sensor.c: 266: ADUTHH = 0x00;
  4293  01206E  0E00               	movlw	0
  4294  012070  6E6D               	movwf	3949,c	;volatile
  4295                           
  4296                           ;mtouch_sensor.c: 268: ADSTPTL = 0x00;
  4297  012072  0E00               	movlw	0
  4298  012074  6E68               	movwf	3944,c	;volatile
  4299                           
  4300                           ;mtouch_sensor.c: 270: ADSTPTH = 0x00;
  4301  012076  0E00               	movlw	0
  4302  012078  6E69               	movwf	3945,c	;volatile
  4303                           
  4304                           ;mtouch_sensor.c: 273: ADCON1 = 0x41;
  4305  01207A  0E41               	movlw	65
  4306  01207C  6F59               	movwf	89,b	;volatile
  4307                           
  4308                           ;mtouch_sensor.c: 275: ADCON2 = 0x8B;
  4309  01207E  0E8B               	movlw	139
  4310  012080  6F5A               	movwf	90,b	;volatile
  4311                           
  4312                           ;mtouch_sensor.c: 278: ADCON3 = 0x0F;
  4313  012082  0E0F               	movlw	15
  4314  012084  6F5B               	movwf	91,b	;volatile
  4315                           
  4316                           ;mtouch_sensor.c: 281: ADCON0 = 0xC4;
  4317  012086  0EC4               	movlw	196
  4318  012088  6E60               	movwf	3936,c	;volatile
  4319                           
  4320                           ; BSR set to: 15
  4321                           ;mtouch_sensor.c: 284: PIR1bits.ADTIF = 0;
  4322  01208A  010E               	movlb	14	; () banked
  4323  01208C  9334               	bcf	52,1,b	;volatile
  4324                           
  4325                           ; BSR set to: 14
  4326                           ;mtouch_sensor.c: 286: PIE1bits.ADTIE = 1;
  4327  01208E  832A               	bsf	42,1,b	;volatile
  4328                           
  4329                           ; BSR set to: 14
  4330  012090  0012               	return		;funcret
  4331  012092                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           postinc0	equ	0xFEE
  4341                           wreg	equ	0xFE8
  4342                           postdec1	equ	0xFE5
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           fsr2h	equ	0xFDA
  4347                           fsr2l	equ	0xFD9
  4348                           status	equ	0xFD8
  4349                           
  4350 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4351 ;; Defined at:
  4352 ;;		line 290 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  sensor          1   11[BANK0 ] enum E17513
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4370 ;;Total ram usage:        1 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    7
  4373 ;; This function calls:
  4374 ;;		_MTOUCH_Sensor_Initialize
  4375 ;;		_memcpy
  4376 ;; This function is called by:
  4377 ;;		_MTOUCH_Initialize
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text15
  4382  012148                     __ptext15:
  4383                           	opt stack 0
  4384  012148                     _MTOUCH_Sensor_InitializeAll:
  4385                           	opt stack 21
  4386                           
  4387                           ;mtouch_sensor.c: 292: enum mtouch_sensor_names sensor;
  4388                           ;mtouch_sensor.c: 294: memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init
      +                          ));
  4389                           
  4390                           ; BSR set to: 14
  4391                           ;incstack = 0
  4392  012148  0E82               	movlw	low _mtouch_sensor
  4393  01214A  0100               	movlb	0	; () banked
  4394  01214C  6FAF               	movwf	memcpy@d1& (0+255),b
  4395  01214E  0E00               	movlw	high _mtouch_sensor
  4396  012150  6FB0               	movwf	(memcpy@d1+1)& (0+255),b
  4397  012152  0E7A               	movlw	low _mtouch_sensor_init
  4398  012154  6FB1               	movwf	memcpy@s1& (0+255),b
  4399  012156  0EFB               	movlw	high _mtouch_sensor_init
  4400  012158  6FB2               	movwf	(memcpy@s1+1)& (0+255),b
  4401  01215A  0E00               	movlw	0
  4402  01215C  6FB4               	movwf	(memcpy@n+1)& (0+255),b
  4403  01215E  0E2D               	movlw	45
  4404  012160  6FB3               	movwf	memcpy@n& (0+255),b
  4405  012162  EC17  F08F         	call	_memcpy	;wreg free
  4406                           
  4407                           ;mtouch_sensor.c: 296: for (sensor = 0; sensor < 5; sensor++)
  4408  012166  0E00               	movlw	0
  4409  012168  0100               	movlb	0	; () banked
  4410  01216A  6FBA               	movwf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  4411  01216C                     l5129:
  4412                           
  4413                           ; BSR set to: 0
  4414  01216C  0E04               	movlw	4
  4415  01216E  65BA               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor& (0+255),b
  4416  012170  D001               	goto	l507
  4417  012172  0012               	return	
  4418  012174                     l507:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;mtouch_sensor.c: 297: {
  4422                           ;mtouch_sensor.c: 298: MTOUCH_Sensor_Initialize(sensor);
  4423                           
  4424                           ; BSR set to: 0
  4425  012174  51BA               	movf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),w,b
  4426  012176  ECD3  F08C         	call	_MTOUCH_Sensor_Initialize
  4427  01217A  0100               	movlb	0	; () banked
  4428  01217C  2BBA               	incf	MTOUCH_Sensor_InitializeAll@sensor& (0+255),f,b
  4429  01217E  D7F6               	goto	l5129
  4430  012180                     __end_of_MTOUCH_Sensor_InitializeAll:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  4450 ;; Defined at:
  4451 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  sensor          1    wreg     enum E17513
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  sensor          1    2[BANK0 ] enum E17513
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      enum E17519
  4458 ;; Registers used:
  4459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;Total ram usage:        1 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    6
  4472 ;; This function calls:
  4473 ;;		_MTOUCH_Sensor_Calibrate
  4474 ;;		_MTOUCH_Sensor_Enable
  4475 ;;		_Sensor_Sampled_Reset
  4476 ;; This function is called by:
  4477 ;;		_MTOUCH_Sensor_InitializeAll
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text16
  4482  0119A6                     __ptext16:
  4483                           	opt stack 0
  4484  0119A6                     _MTOUCH_Sensor_Initialize:
  4485                           	opt stack 21
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;incstack = 0
  4489                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  4490  0119A6  0100               	movlb	0	; () banked
  4491  0119A8  6FB1               	movwf	MTOUCH_Sensor_Initialize@sensor& (0+255),b
  4492                           
  4493                           ;mtouch_sensor.c: 191: switch(sensor)
  4494  0119AA  D014               	goto	l482
  4495  0119AC                     l483:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;mtouch_sensor.c: 194: WPUEbits.WPUE2 = 0;
  4499  0119AC  010E               	movlb	14	; () banked
  4500  0119AE  95AE               	bcf	174,2,b	;volatile
  4501                           
  4502                           ;mtouch_sensor.c: 195: ANSELEbits.ANSELE2 = 0;
  4503  0119B0  95AF               	bcf	175,2,b	;volatile
  4504                           
  4505                           ;mtouch_sensor.c: 196: break;
  4506  0119B2  D022               	goto	l484
  4507  0119B4                     l485:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;mtouch_sensor.c: 198: WPUEbits.WPUE3 = 0;
  4511  0119B4  010E               	movlb	14	; () banked
  4512  0119B6  97AE               	bcf	174,3,b	;volatile
  4513                           
  4514                           ;mtouch_sensor.c: 199: ANSELEbits.ANSELE3 = 0;
  4515  0119B8  97AF               	bcf	175,3,b	;volatile
  4516                           
  4517                           ;mtouch_sensor.c: 200: break;
  4518  0119BA  D01E               	goto	l484
  4519  0119BC                     l486:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;mtouch_sensor.c: 202: WPUEbits.WPUE4 = 0;
  4523  0119BC  010E               	movlb	14	; () banked
  4524  0119BE  99AE               	bcf	174,4,b	;volatile
  4525                           
  4526                           ;mtouch_sensor.c: 203: ANSELEbits.ANSELE4 = 0;
  4527  0119C0  99AF               	bcf	175,4,b	;volatile
  4528                           
  4529                           ;mtouch_sensor.c: 204: break;
  4530  0119C2  D01A               	goto	l484
  4531  0119C4                     l487:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;mtouch_sensor.c: 206: WPUEbits.WPUE5 = 0;
  4535  0119C4  010E               	movlb	14	; () banked
  4536  0119C6  9BAE               	bcf	174,5,b	;volatile
  4537                           
  4538                           ;mtouch_sensor.c: 207: ANSELEbits.ANSELE5 = 0;
  4539  0119C8  9BAF               	bcf	175,5,b	;volatile
  4540                           
  4541                           ;mtouch_sensor.c: 208: break;
  4542  0119CA  D016               	goto	l484
  4543  0119CC                     l488:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;mtouch_sensor.c: 210: WPUEbits.WPUE6 = 0;
  4547  0119CC  010E               	movlb	14	; () banked
  4548  0119CE  9DAE               	bcf	174,6,b	;volatile
  4549                           
  4550                           ;mtouch_sensor.c: 211: ANSELEbits.ANSELE6 = 0;
  4551  0119D0  9DAF               	bcf	175,6,b	;volatile
  4552                           
  4553                           ;mtouch_sensor.c: 212: break;
  4554  0119D2  D012               	goto	l484
  4555  0119D4                     l482:
  4556                           
  4557                           ; BSR set to: 14
  4558  0119D4  0100               	movlb	0	; () banked
  4559  0119D6  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4560                           
  4561                           ; Switch size 1, requested type "space"
  4562                           ; Number of cases is 5, Range of values is 0 to 4
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte           16     9 (average)
  4566                           ;	Chosen strategy is simple_byte
  4567  0119D8  0A00               	xorlw	0	; case 0
  4568  0119DA  B4D8               	btfsc	status,2,c
  4569  0119DC  D7E7               	goto	l483
  4570  0119DE  0A01               	xorlw	1	; case 1
  4571  0119E0  B4D8               	btfsc	status,2,c
  4572  0119E2  D7E8               	goto	l485
  4573  0119E4  0A03               	xorlw	3	; case 2
  4574  0119E6  B4D8               	btfsc	status,2,c
  4575  0119E8  D7E9               	goto	l486
  4576  0119EA  0A01               	xorlw	1	; case 3
  4577  0119EC  B4D8               	btfsc	status,2,c
  4578  0119EE  D7EA               	goto	l487
  4579  0119F0  0A07               	xorlw	7	; case 4
  4580  0119F2  A4D8               	btfss	status,2,c
  4581  0119F4  0012               	return	
  4582  0119F6  D7EA               	goto	l488
  4583  0119F8                     l484:
  4584                           
  4585                           ;mtouch_sensor.c: 215: MTOUCH_Sensor_Enable(sensor);
  4586                           
  4587                           ; BSR set to: 0
  4588  0119F8  0100               	movlb	0	; () banked
  4589  0119FA  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4590  0119FC  ECF2  F091         	call	_MTOUCH_Sensor_Enable
  4591                           
  4592                           ;mtouch_sensor.c: 216: MTOUCH_Sensor_Calibrate(sensor);
  4593  011A00  0100               	movlb	0	; () banked
  4594  011A02  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4595  011A04  EC2E  F092         	call	_MTOUCH_Sensor_Calibrate
  4596                           
  4597                           ;mtouch_sensor.c: 217: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  4598  011A08  0100               	movlb	0	; () banked
  4599  011A0A  51B1               	movf	MTOUCH_Sensor_Initialize@sensor& (0+255),w,b
  4600  011A0C  0D09               	mullw	9
  4601  011A0E  0E82               	movlw	low _mtouch_sensor
  4602  011A10  24F3               	addwf	prodl,w,c
  4603  011A12  6FAF               	movwf	Sensor_Sampled_Reset@sensor& (0+255),b
  4604  011A14  0E00               	movlw	high _mtouch_sensor
  4605  011A16  20F4               	addwfc	prodh,w,c
  4606  011A18  6FB0               	movwf	(Sensor_Sampled_Reset@sensor+1)& (0+255),b
  4607  011A1A  EC3A  F093         	call	_Sensor_Sampled_Reset	;wreg free
  4608  011A1E  0012               	return	
  4609  011A20                     __end_of_MTOUCH_Sensor_Initialize:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1l	equ	0xFE1
  4622                           indf2	equ	0xFDF
  4623                           postinc2	equ	0xFDE
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4629 ;; Defined at:
  4630 ;;		line 711 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  sensor          1    wreg     enum E17513
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  sensor          1    0[BANK0 ] enum E17513
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;Total ram usage:        1 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    5
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_MTOUCH_Sensor_Initialize
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text17
  4659  0123E4                     __ptext17:
  4660                           	opt stack 0
  4661  0123E4                     _MTOUCH_Sensor_Enable:
  4662                           	opt stack 21
  4663                           
  4664                           ;incstack = 0
  4665                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4666  0123E4  0100               	movlb	0	; () banked
  4667  0123E6  6FAF               	movwf	MTOUCH_Sensor_Enable@sensor& (0+255),b
  4668                           
  4669                           ;mtouch_sensor.c: 713: if(sensor < 5)
  4670  0123E8  0E05               	movlw	5
  4671  0123EA  0100               	movlb	0	; () banked
  4672  0123EC  61AF               	cpfslt	MTOUCH_Sensor_Enable@sensor& (0+255),b
  4673  0123EE  0012               	return	
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;mtouch_sensor.c: 714: mtouch_sensor[sensor].enabled = 1;
  4677  0123F0  51AF               	movf	MTOUCH_Sensor_Enable@sensor& (0+255),w,b
  4678  0123F2  0D09               	mullw	9
  4679  0123F4  0E08               	movlw	8
  4680  0123F6  26F3               	addwf	prodl,f,c
  4681  0123F8  0E00               	movlw	0
  4682  0123FA  22F4               	addwfc	prodh,f,c
  4683  0123FC  0E82               	movlw	low _mtouch_sensor
  4684  0123FE  24F3               	addwf	prodl,w,c
  4685  012400  6ED9               	movwf	fsr2l,c
  4686  012402  0E00               	movlw	high _mtouch_sensor
  4687  012404  20F4               	addwfc	prodh,w,c
  4688  012406  6EDA               	movwf	fsr2h,c
  4689  012408  80DF               	bsf	indf2,0,c
  4690  01240A  0012               	return	
  4691  01240C                     __end_of_MTOUCH_Sensor_Enable:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           fsr1l	equ	0xFE1
  4704                           indf2	equ	0xFDF
  4705                           postinc2	equ	0xFDE
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4711 ;; Defined at:
  4712 ;;		line 209 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  button          1   11[BANK0 ] enum E17454
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;Total ram usage:        1 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    7
  4733 ;; This function calls:
  4734 ;;		_MTOUCH_Button_Initialize
  4735 ;;		_memcpy
  4736 ;; This function is called by:
  4737 ;;		_MTOUCH_Initialize
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text18
  4742  012180                     __ptext18:
  4743                           	opt stack 0
  4744  012180                     _MTOUCH_Button_InitializeAll:
  4745                           	opt stack 21
  4746                           
  4747                           ;mtouch_button.c: 211: enum mtouch_button_names button;
  4748                           ;mtouch_button.c: 213: memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init
      +                          ));
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  012180  0E40               	movlw	low _mtouch_button
  4753  012182  0100               	movlb	0	; () banked
  4754  012184  6FAF               	movwf	memcpy@d1& (0+255),b
  4755  012186  0E01               	movlw	high _mtouch_button
  4756  012188  6FB0               	movwf	(memcpy@d1+1)& (0+255),b
  4757  01218A  0E25               	movlw	low _mtouch_button_init
  4758  01218C  6FB1               	movwf	memcpy@s1& (0+255),b
  4759  01218E  0EFB               	movlw	high _mtouch_button_init
  4760  012190  6FB2               	movwf	(memcpy@s1+1)& (0+255),b
  4761  012192  0E00               	movlw	0
  4762  012194  6FB4               	movwf	(memcpy@n+1)& (0+255),b
  4763  012196  0E55               	movlw	85
  4764  012198  6FB3               	movwf	memcpy@n& (0+255),b
  4765  01219A  EC17  F08F         	call	_memcpy	;wreg free
  4766                           
  4767                           ;mtouch_button.c: 215: for (button = 0; button < 5; button++)
  4768  01219E  0E00               	movlw	0
  4769  0121A0  0100               	movlb	0	; () banked
  4770  0121A2  6FBA               	movwf	MTOUCH_Button_InitializeAll@button& (0+255),b
  4771  0121A4                     l5143:
  4772                           
  4773                           ; BSR set to: 0
  4774  0121A4  0E04               	movlw	4
  4775  0121A6  65BA               	cpfsgt	MTOUCH_Button_InitializeAll@button& (0+255),b
  4776  0121A8  D001               	goto	l767
  4777  0121AA  0012               	return	
  4778  0121AC                     l767:
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;mtouch_button.c: 216: {
  4782                           ;mtouch_button.c: 217: MTOUCH_Button_Initialize(button);
  4783                           
  4784                           ; BSR set to: 0
  4785  0121AC  51BA               	movf	MTOUCH_Button_InitializeAll@button& (0+255),w,b
  4786  0121AE  EC10  F08D         	call	_MTOUCH_Button_Initialize
  4787  0121B2  0100               	movlb	0	; () banked
  4788  0121B4  2BBA               	incf	MTOUCH_Button_InitializeAll@button& (0+255),f,b
  4789  0121B6  D7F6               	goto	l5143
  4790  0121B8                     __end_of_MTOUCH_Button_InitializeAll:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _memcpy *****************
  4810 ;; Defined at:
  4811 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  d1              2    0[BANK0 ] PTR void 
  4814 ;;		 -> mtouch_button(85), mtouch_sensor(45), 
  4815 ;;  s1              2    2[BANK0 ] PTR const void 
  4816 ;;		 -> mtouch_button_init(85), mtouch_sensor_init(45), 
  4817 ;;  n               2    4[BANK0 ] unsigned int 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  4820 ;;		 -> mtouch_button_init(85), mtouch_sensor_init(45), 
  4821 ;;  d               2    7[BANK0 ] PTR unsigned char 
  4822 ;;		 -> mtouch_button(85), mtouch_sensor(45), 
  4823 ;;  tmp             1    6[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  2    0[BANK0 ] PTR void 
  4826 ;; Registers used:
  4827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4833 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4834 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4836 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4837 ;;Total ram usage:       11 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    5
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_MTOUCH_Sensor_InitializeAll
  4844 ;;		_MTOUCH_Button_InitializeAll
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text19
  4849  011E2E                     __ptext19:
  4850                           	opt stack 0
  4851  011E2E                     _memcpy:
  4852                           	opt stack 22
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;incstack = 0
  4856  011E2E  C0B1  F0B8         	movff	memcpy@s1,memcpy@s
  4857  011E32  C0B2  F0B9         	movff	memcpy@s1+1,memcpy@s+1
  4858  011E36  C0AF  F0B6         	movff	memcpy@d1,memcpy@d
  4859  011E3A  C0B0  F0B7         	movff	memcpy@d1+1,memcpy@d+1
  4860  011E3E  D014               	goto	l1509
  4861  011E40                     l4893:
  4862  011E40  C0B8  FFF6         	movff	memcpy@s,tblptrl
  4863  011E44  C0B9  FFF7         	movff	memcpy@s+1,tblptrh
  4864  011E48                     	if	0	;tblptru may be non-zero
  4865  011E48                     	endif
  4866  011E48                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4867  011E48  0E00               	movlw	low (__mediumconst shr (0+16))
  4868  011E4A  6EF8               	movwf	tblptru,c
  4869  011E4C                     	endif
  4870  011E4C  0008               	tblrd		*
  4871  011E4E  CFF5 F0B5          	movff	tablat,memcpy@tmp
  4872  011E52  0100               	movlb	0	; () banked
  4873  011E54  4BB8               	infsnz	memcpy@s& (0+255),f,b
  4874  011E56  2BB9               	incf	(memcpy@s+1)& (0+255),f,b
  4875                           
  4876                           ; BSR set to: 0
  4877  011E58  C0B6  FFD9         	movff	memcpy@d,fsr2l
  4878  011E5C  C0B7  FFDA         	movff	memcpy@d+1,fsr2h
  4879  011E60  C0B5  FFDF         	movff	memcpy@tmp,indf2
  4880                           
  4881                           ; BSR set to: 0
  4882  011E64  4BB6               	infsnz	memcpy@d& (0+255),f,b
  4883  011E66  2BB7               	incf	(memcpy@d+1)& (0+255),f,b
  4884  011E68                     l1509:
  4885                           
  4886                           ; BSR set to: 0
  4887  011E68  0100               	movlb	0	; () banked
  4888  011E6A  07B3               	decf	memcpy@n& (0+255),f,b
  4889  011E6C  A0D8               	btfss	status,0,c
  4890  011E6E  07B4               	decf	(memcpy@n+1)& (0+255),f,b
  4891  011E70  29B3               	incf	memcpy@n& (0+255),w,b
  4892  011E72  E1E6               	bnz	l4893
  4893  011E74  29B4               	incf	(memcpy@n+1)& (0+255),w,b
  4894  011E76  B4D8               	btfsc	status,2,c
  4895  011E78  0012               	return	
  4896  011E7A  D7E2               	goto	l1510
  4897  011E7C                     __end_of_memcpy:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _INTERRUPT_Initialize *****************
  4917 ;; Defined at:
  4918 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		None
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    5
  4939 ;; This function calls:
  4940 ;;		Nothing
  4941 ;; This function is called by:
  4942 ;;		_SYSTEM_Initialize
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text20
  4947  0126DA                     __ptext20:
  4948                           	opt stack 0
  4949  0126DA                     _INTERRUPT_Initialize:
  4950                           	opt stack 24
  4951                           
  4952                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 1;
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;incstack = 0
  4956  0126DA  8AF2               	bsf	intcon,5,c	;volatile
  4957                           
  4958                           ;interrupt_manager.c: 60: IPR3bits.TX2IP = 1;
  4959  0126DC  010E               	movlb	14	; () banked
  4960  0126DE  8D22               	bsf	34,6,b	;volatile
  4961                           
  4962                           ;interrupt_manager.c: 63: IPR3bits.RC2IP = 1;
  4963  0126E0  8F22               	bsf	34,7,b	;volatile
  4964                           
  4965                           ;interrupt_manager.c: 66: IPR1bits.ADTIP = 1;
  4966  0126E2  8320               	bsf	32,1,b	;volatile
  4967                           
  4968                           ;interrupt_manager.c: 69: IPR0bits.IOCIP = 1;
  4969  0126E4  891F               	bsf	31,4,b	;volatile
  4970                           
  4971                           ; BSR set to: 14
  4972  0126E6  0012               	return		;funcret
  4973  0126E8                     __end_of_INTERRUPT_Initialize:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _EUSART2_Initialize *****************
  4993 ;; Defined at:
  4994 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;Total ram usage:        0 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    6
  5015 ;; This function calls:
  5016 ;;		_EUSART2_SetRxInterruptHandler
  5017 ;;		_EUSART2_SetTxInterruptHandler
  5018 ;; This function is called by:
  5019 ;;		_SYSTEM_Initialize
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text21
  5024  011C2E                     __ptext21:
  5025                           	opt stack 0
  5026  011C2E                     _EUSART2_Initialize:
  5027                           	opt stack 23
  5028                           
  5029                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  5030                           
  5031                           ; BSR set to: 14
  5032                           ;incstack = 0
  5033  011C2E  010E               	movlb	14	; () banked
  5034  011C30  9F2C               	bcf	44,7,b	;volatile
  5035                           
  5036                           ; BSR set to: 14
  5037                           ;eusart2.c: 81: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  5038  011C32  0E96               	movlw	low _EUSART2_Receive_ISR
  5039  011C34  0100               	movlb	0	; () banked
  5040  011C36  6FAF               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  5041  011C38  0E18               	movlw	high _EUSART2_Receive_ISR
  5042  011C3A  6FB0               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5043  011C3C  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
  5044  011C3E  6FB1               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  5045  011C40  EC7B  F093         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  5046                           
  5047                           ;eusart2.c: 82: PIE3bits.TX2IE = 0;
  5048  011C44  010E               	movlb	14	; () banked
  5049  011C46  9D2C               	bcf	44,6,b	;volatile
  5050                           
  5051                           ;eusart2.c: 83: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  5052  011C48  0EC4               	movlw	low _EUSART2_Transmit_ISR
  5053  011C4A  0100               	movlb	0	; () banked
  5054  011C4C  6FAF               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  5055  011C4E  0E22               	movlw	high _EUSART2_Transmit_ISR
  5056  011C50  6FB0               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5057  011C52  0E01               	movlw	low (_EUSART2_Transmit_ISR shr (0+16))
  5058  011C54  6FB1               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  5059  011C56  EC74  F093         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  5060                           
  5061                           ;eusart2.c: 87: BAUD2CON = 0x08;
  5062  011C5A  0E08               	movlw	8
  5063  011C5C  010E               	movlb	14	; () banked
  5064  011C5E  6FF7               	movwf	247,b	;volatile
  5065                           
  5066                           ; BSR set to: 14
  5067                           ;eusart2.c: 90: RC2STA = 0x90;
  5068  011C60  0E90               	movlw	144
  5069  011C62  6FF5               	movwf	245,b	;volatile
  5070                           
  5071                           ; BSR set to: 14
  5072                           ;eusart2.c: 93: TX2STA = 0x24;
  5073  011C64  0E24               	movlw	36
  5074  011C66  6FF6               	movwf	246,b	;volatile
  5075                           
  5076                           ; BSR set to: 14
  5077                           ;eusart2.c: 96: SP2BRGL = 0x8A;
  5078  011C68  0E8A               	movlw	138
  5079  011C6A  6FF3               	movwf	243,b	;volatile
  5080                           
  5081                           ; BSR set to: 14
  5082                           ;eusart2.c: 99: SP2BRGH = 0x00;
  5083  011C6C  0E00               	movlw	0
  5084  011C6E  6FF4               	movwf	244,b	;volatile
  5085                           
  5086                           ; BSR set to: 14
  5087                           ;eusart2.c: 103: eusart2TxHead = 0;
  5088  011C70  0E00               	movlw	0
  5089  011C72  6E41               	movwf	_eusart2TxHead,c	;volatile
  5090                           
  5091                           ; BSR set to: 14
  5092                           ;eusart2.c: 104: eusart2TxTail = 0;
  5093  011C74  0E00               	movlw	0
  5094  011C76  6E40               	movwf	_eusart2TxTail,c	;volatile
  5095                           
  5096                           ; BSR set to: 14
  5097                           ;eusart2.c: 105: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  5098  011C78  0E40               	movlw	64
  5099  011C7A  6E4B               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5100                           
  5101                           ; BSR set to: 14
  5102                           ;eusart2.c: 107: eusart2RxHead = 0;
  5103  011C7C  0E00               	movlw	0
  5104  011C7E  6E3F               	movwf	_eusart2RxHead,c	;volatile
  5105                           
  5106                           ; BSR set to: 14
  5107                           ;eusart2.c: 108: eusart2RxTail = 0;
  5108  011C80  0E00               	movlw	0
  5109  011C82  6E3E               	movwf	_eusart2RxTail,c	;volatile
  5110                           
  5111                           ; BSR set to: 14
  5112                           ;eusart2.c: 109: eusart2RxCount = 0;
  5113  011C84  0E00               	movlw	0
  5114  011C86  6E3D               	movwf	_eusart2RxCount,c	;volatile
  5115                           
  5116                           ; BSR set to: 14
  5117                           ;eusart2.c: 112: PIE3bits.RC2IE = 1;
  5118  011C88  8F2C               	bsf	44,7,b	;volatile
  5119                           
  5120                           ; BSR set to: 14
  5121  011C8A  0012               	return		;funcret
  5122  011C8C                     __end_of_EUSART2_Initialize:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           intcon	equ	0xFF2
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1l	equ	0xFE1
  5135                           indf2	equ	0xFDF
  5136                           postinc2	equ	0xFDE
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  5142 ;; Defined at:
  5143 ;;		line 258 in file "mcc_generated_files/eusart2.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5146 ;;		 -> EUSART2_Transmit_ISR(1), 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5158 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;Total ram usage:        3 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    5
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_EUSART2_Initialize
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text22
  5173  0126E8                     __ptext22:
  5174                           	opt stack 0
  5175  0126E8                     _EUSART2_SetTxInterruptHandler:
  5176                           	opt stack 23
  5177                           
  5178                           ;eusart2.c: 259: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  5179                           
  5180                           ; BSR set to: 14
  5181                           ;incstack = 0
  5182  0126E8  C0AF  F045         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  5183  0126EC  C0B0  F046         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  5184  0126F0  C0B1  F047         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+2,_EUSART2_TxDefaultInterruptHandl
      +                          er+2
  5185  0126F4  0012               	return		;funcret
  5186  0126F6                     __end_of_EUSART2_SetTxInterruptHandler:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           postdec1	equ	0xFE5
  5198                           fsr1l	equ	0xFE1
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  5206 ;; Defined at:
  5207 ;;		line 262 in file "mcc_generated_files/eusart2.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  5210 ;;		 -> EUSART2_Receive_ISR(1), 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5222 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5226 ;;Total ram usage:        3 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    5
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_EUSART2_Initialize
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text23
  5237  0126F6                     __ptext23:
  5238                           	opt stack 0
  5239  0126F6                     _EUSART2_SetRxInterruptHandler:
  5240                           	opt stack 23
  5241                           
  5242                           ;eusart2.c: 263: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  5243                           
  5244                           ;incstack = 0
  5245  0126F6  C0AF  F042         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  5246  0126FA  C0B0  F043         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  5247  0126FE  C0B1  F044         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
  5248  012702  0012               	return		;funcret
  5249  012704                     __end_of_EUSART2_SetRxInterruptHandler:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5269 ;; Defined at:
  5270 ;;		line 89 in file "mcc_generated_files/mtouch/mtouch.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:   12
  5291 ;; This function calls:
  5292 ;;		_MTOUCH_Button_ServiceAll
  5293 ;;		_MTOUCH_Sensor_SampleAll
  5294 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5295 ;;		_MTOUCH_Tick
  5296 ;;		_MTOUCH_needReburst
  5297 ;; This function is called by:
  5298 ;;		_main
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text24
  5303  01240C                     __ptext24:
  5304                           	opt stack 0
  5305  01240C                     _MTOUCH_Service_Mainloop:
  5306                           	opt stack 18
  5307                           
  5308                           ;mtouch.c: 93: mtouch_time_toScan = 1;
  5309                           
  5310                           ;incstack = 0
  5311  01240C  0E01               	movlw	1
  5312  01240E  6E3C               	movwf	_mtouch_time_toScan,c
  5313                           
  5314                           ;mtouch.c: 95: if(mtouch_time_toScan)
  5315  012410  503C               	movf	_mtouch_time_toScan,w,c
  5316  012412  B4D8               	btfsc	status,2,c
  5317  012414  0012               	return	
  5318                           
  5319                           ;mtouch.c: 96: {
  5320                           ;mtouch.c: 97: if(MTOUCH_Sensor_SampleAll() == 0)
  5321  012416  EC65  F08F         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  5322  01241A  0900               	iorlw	0
  5323  01241C  B4D8               	btfsc	status,2,c
  5324  01241E  0012               	return	
  5325                           
  5326                           ;mtouch.c: 99: MTOUCH_Button_ServiceAll();
  5327                           
  5328                           ;mtouch.c: 98: return 0;
  5329                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5330  012420  ECF7  F092         	call	_MTOUCH_Button_ServiceAll	;wreg free
  5331                           
  5332                           ;mtouch.c: 100: mtouch_time_toScan = MTOUCH_needReburst();
  5333  012424  EC9C  F093         	call	_MTOUCH_needReburst	;wreg free
  5334  012428  6E3C               	movwf	_mtouch_time_toScan,c
  5335                           
  5336                           ;mtouch.c: 101: MTOUCH_Sensor_Sampled_ResetAll();
  5337  01242A  ECAD  F091         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  5338                           
  5339                           ;mtouch.c: 102: MTOUCH_Tick();
  5340  01242E  ECAE  F093         	call	_MTOUCH_Tick	;wreg free
  5341                           
  5342                           ;mtouch.c: 105: else
  5343                           ;mtouch.c: 106: {
  5344                           ;mtouch.c: 107: return 0;
  5345                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5346                           
  5347                           ;mtouch.c: 104: }
  5348                           
  5349                           ;mtouch.c: 103: return 1;
  5350                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  5351  012432  0012               	return	
  5352  012434                     __end_of_MTOUCH_Service_Mainloop:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           postdec1	equ	0xFE5
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _MTOUCH_needReburst *****************
  5372 ;; Defined at:
  5373 ;;		line 126 in file "mcc_generated_files/mtouch/mtouch.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  needReburst     1    0[BANK0 ] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      unsigned char 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5391 ;;Total ram usage:        1 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    5
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_MTOUCH_Service_Mainloop
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text25
  5402  012738                     __ptext25:
  5403                           	opt stack 0
  5404  012738                     _MTOUCH_needReburst:
  5405                           	opt stack 24
  5406                           
  5407                           ;mtouch.c: 128: bool needReburst = 0;
  5408                           
  5409                           ;incstack = 0
  5410  012738  0E00               	movlw	0
  5411  01273A  0100               	movlb	0	; () banked
  5412  01273C  6FAF               	movwf	MTOUCH_needReburst@needReburst& (0+255),b
  5413                           
  5414                           ;mtouch.c: 130: return needReburst;
  5415  01273E  51AF               	movf	MTOUCH_needReburst@needReburst& (0+255),w,b
  5416  012740  0012               	return	
  5417  012742                     __end_of_MTOUCH_needReburst:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           postinc0	equ	0xFEE
  5427                           wreg	equ	0xFE8
  5428                           postdec1	equ	0xFE5
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           fsr2h	equ	0xFDA
  5433                           fsr2l	equ	0xFD9
  5434                           status	equ	0xFD8
  5435                           
  5436 ;; *************** function _MTOUCH_Tick *****************
  5437 ;; Defined at:
  5438 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;		None
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  1    wreg      void 
  5445 ;; Registers used:
  5446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5456 ;;Total ram usage:        0 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    7
  5459 ;; This function calls:
  5460 ;;		_MTOUCH_Button_Tick
  5461 ;; This function is called by:
  5462 ;;		_MTOUCH_Service_Mainloop
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text26
  5467  01275C                     __ptext26:
  5468                           	opt stack 0
  5469  01275C                     _MTOUCH_Tick:
  5470                           	opt stack 22
  5471                           
  5472                           ;mtouch.c: 118: MTOUCH_Button_Tick();
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;incstack = 0
  5476  01275C  EC1A  F092         	call	_MTOUCH_Button_Tick	;wreg free
  5477  012760  0012               	return		;funcret
  5478  012762                     __end_of_MTOUCH_Tick:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           intcon	equ	0xFF2
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           postdec1	equ	0xFE5
  5490                           fsr1l	equ	0xFE1
  5491                           indf2	equ	0xFDF
  5492                           postinc2	equ	0xFDE
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _MTOUCH_Button_Tick *****************
  5498 ;; Defined at:
  5499 ;;		line 345 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  i               1    4[BANK0 ] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;Total ram usage:        1 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    6
  5520 ;; This function calls:
  5521 ;;		_Button_Tick_helper
  5522 ;; This function is called by:
  5523 ;;		_MTOUCH_Tick
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text27
  5528  012434                     __ptext27:
  5529                           	opt stack 0
  5530  012434                     _MTOUCH_Button_Tick:
  5531                           	opt stack 22
  5532                           
  5533                           ;mtouch_button.c: 347: uint8_t i;
  5534                           ;mtouch_button.c: 348: for (i = 0; i < 5; i++)
  5535                           
  5536                           ;incstack = 0
  5537  012434  0E00               	movlw	0
  5538  012436  0100               	movlb	0	; () banked
  5539  012438  6FB3               	movwf	MTOUCH_Button_Tick@i& (0+255),b
  5540  01243A                     l5167:
  5541                           
  5542                           ; BSR set to: 0
  5543  01243A  0E04               	movlw	4
  5544  01243C  65B3               	cpfsgt	MTOUCH_Button_Tick@i& (0+255),b
  5545  01243E  D001               	goto	l807
  5546  012440  0012               	return	
  5547  012442                     l807:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;mtouch_button.c: 349: {
  5551                           ;mtouch_button.c: 350: Button_Tick_helper(&mtouch_button[i]);
  5552                           
  5553                           ; BSR set to: 0
  5554  012442  51B3               	movf	MTOUCH_Button_Tick@i& (0+255),w,b
  5555  012444  0D11               	mullw	17
  5556  012446  0E40               	movlw	low _mtouch_button
  5557  012448  24F3               	addwf	prodl,w,c
  5558  01244A  6FAF               	movwf	Button_Tick_helper@button& (0+255),b
  5559  01244C  0E01               	movlw	high _mtouch_button
  5560  01244E  20F4               	addwfc	prodh,w,c
  5561  012450  6FB0               	movwf	(Button_Tick_helper@button+1)& (0+255),b
  5562  012452  EC9D  F08E         	call	_Button_Tick_helper	;wreg free
  5563  012456  0100               	movlb	0	; () banked
  5564  012458  2BB3               	incf	MTOUCH_Button_Tick@i& (0+255),f,b
  5565  01245A  D7EF               	goto	l5167
  5566  01245C                     __end_of_MTOUCH_Button_Tick:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           postdec1	equ	0xFE5
  5578                           fsr1l	equ	0xFE1
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           fsr2h	equ	0xFDA
  5582                           fsr2l	equ	0xFD9
  5583                           status	equ	0xFD8
  5584                           
  5585 ;; *************** function _Button_Tick_helper *****************
  5586 ;; Defined at:
  5587 ;;		line 353 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;  button          2    0[BANK0 ] PTR struct .
  5590 ;;		 -> mtouch_button(85), 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      void 
  5595 ;; Registers used:
  5596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5602 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5605 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;Total ram usage:        4 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    5
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_MTOUCH_Button_Tick
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text28
  5617  011D3A                     __ptext28:
  5618                           	opt stack 0
  5619  011D3A                     _Button_Tick_helper:
  5620                           	opt stack 22
  5621                           
  5622                           ;mtouch_button.c: 356: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;incstack = 0
  5626  011D3A  0100               	movlb	0	; () banked
  5627  011D3C  EE20 F002          	lfsr	2,2
  5628  011D40  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  5629  011D42  26D9               	addwf	fsr2l,f,c
  5630  011D44  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5631  011D46  22DA               	addwfc	fsr2h,f,c
  5632  011D48  0E02               	movlw	2
  5633  011D4A  18DE               	xorwf	postinc2,w,c
  5634  011D4C  A4D8               	btfss	status,2,c
  5635  011D4E  0012               	return	
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;mtouch_button.c: 357: {
  5639                           ;mtouch_button.c: 358: (button->counter)++;
  5640  011D50  EE20 F00B          	lfsr	2,11
  5641  011D54  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  5642  011D56  26D9               	addwf	fsr2l,f,c
  5643  011D58  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5644  011D5A  22DA               	addwfc	fsr2h,f,c
  5645  011D5C  2ADE               	incf	postinc2,f,c
  5646  011D5E  0E00               	movlw	0
  5647  011D60  22DD               	addwfc	postdec2,f,c
  5648                           
  5649                           ;mtouch_button.c: 359: if (button->counter == (mtouch_button_statecounter_t)0)
  5650  011D62  EE20 F00B          	lfsr	2,11
  5651  011D66  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  5652  011D68  26D9               	addwf	fsr2l,f,c
  5653  011D6A  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5654  011D6C  22DA               	addwfc	fsr2h,f,c
  5655  011D6E  50DE               	movf	postinc2,w,c
  5656  011D70  10DE               	iorwf	postinc2,w,c
  5657  011D72  A4D8               	btfss	status,2,c
  5658  011D74  0012               	return	
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;mtouch_button.c: 360: {
  5662                           ;mtouch_button.c: 361: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  5663  011D76  EE20 F00B          	lfsr	2,11
  5664  011D7A  51AF               	movf	Button_Tick_helper@button& (0+255),w,b
  5665  011D7C  26D9               	addwf	fsr2l,f,c
  5666  011D7E  51B0               	movf	(Button_Tick_helper@button+1)& (0+255),w,b
  5667  011D80  22DA               	addwfc	fsr2h,f,c
  5668  011D82  0EFF               	movlw	255
  5669  011D84  6EDE               	movwf	postinc2,c
  5670  011D86  0EFF               	movlw	255
  5671  011D88  6EDD               	movwf	postdec2,c
  5672                           
  5673                           ; BSR set to: 0
  5674  011D8A  0012               	return	
  5675  011D8C                     __end_of_Button_Tick_helper:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           postinc0	equ	0xFEE
  5685                           wreg	equ	0xFE8
  5686                           postdec1	equ	0xFE5
  5687                           fsr1l	equ	0xFE1
  5688                           indf2	equ	0xFDF
  5689                           postinc2	equ	0xFDE
  5690                           postdec2	equ	0xFDD
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5696 ;; Defined at:
  5697 ;;		line 811 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;		None
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  sensor          2    2[BANK0 ] PTR struct .
  5702 ;;		 -> mtouch_sensor(45), 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5716 ;;Total ram usage:        2 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    6
  5719 ;; This function calls:
  5720 ;;		_Sensor_Sampled_Reset
  5721 ;; This function is called by:
  5722 ;;		_MTOUCH_Initialize
  5723 ;;		_MTOUCH_Service_Mainloop
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text29
  5728  01235A                     __ptext29:
  5729                           	opt stack 0
  5730  01235A                     _MTOUCH_Sensor_Sampled_ResetAll:
  5731                           	opt stack 22
  5732                           
  5733                           ;mtouch_sensor.c: 813: mtouch_sensor_t* sensor;
  5734                           ;mtouch_sensor.c: 814: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[5-1];senso
      +                          r++)
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;incstack = 0
  5738  01235A  0E82               	movlw	low _mtouch_sensor
  5739  01235C  0100               	movlb	0	; () banked
  5740  01235E  6FB1               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),b
  5741  012360  0E00               	movlw	high _mtouch_sensor
  5742  012362  6FB2               	movwf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),b
  5743  012364  51B2               	movf	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),w,b
  5744  012366  0800               	sublw	high (_mtouch_sensor+36)
  5745  012368  E102               	bnz	u6195
  5746  01236A  51B1               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),w,b
  5747  01236C  08A6               	sublw	low (_mtouch_sensor+36)
  5748  01236E                     u6195:
  5749  01236E  A0D8               	btfss	status,0,c
  5750  012370  0012               	return	
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;mtouch_sensor.c: 815: {
  5754                           ;mtouch_sensor.c: 816: Sensor_Sampled_Reset(sensor);
  5755                           
  5756                           ; BSR set to: 0
  5757                           
  5758                           ; BSR set to: 0
  5759  012372  C0B1  F0AF         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  5760  012376  C0B2  F0B0         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor+1,Sensor_Sampled_Reset@sensor+1
  5761  01237A  EC3A  F093         	call	_Sensor_Sampled_Reset	;wreg free
  5762  01237E  0E09               	movlw	9
  5763  012380  0100               	movlb	0	; () banked
  5764  012382  27B1               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor& (0+255),f,b
  5765  012384  0E00               	movlw	0
  5766  012386  23B2               	addwfc	(MTOUCH_Sensor_Sampled_ResetAll@sensor+1)& (0+255),f,b
  5767  012388  D7ED               	goto	L2
  5768  01238A                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _Sensor_Sampled_Reset *****************
  5789 ;; Defined at:
  5790 ;;		line 828 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  sensor          2    0[BANK0 ] PTR struct .
  5793 ;;		 -> mtouch_sensor(45), 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5809 ;;Total ram usage:        2 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    5
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_MTOUCH_Sensor_Initialize
  5816 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text30
  5821  012674                     __ptext30:
  5822                           	opt stack 0
  5823  012674                     _Sensor_Sampled_Reset:
  5824                           	opt stack 22
  5825                           
  5826                           ;mtouch_sensor.c: 830: sensor->sampled = 0;
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;incstack = 0
  5830  012674  0100               	movlb	0	; () banked
  5831  012676  EE20 F008          	lfsr	2,8
  5832  01267A  51AF               	movf	Sensor_Sampled_Reset@sensor& (0+255),w,b
  5833  01267C  26D9               	addwf	fsr2l,f,c
  5834  01267E  51B0               	movf	(Sensor_Sampled_Reset@sensor+1)& (0+255),w,b
  5835  012680  22DA               	addwfc	fsr2h,f,c
  5836  012682  92DF               	bcf	indf2,1,c
  5837                           
  5838                           ; BSR set to: 0
  5839  012684  0012               	return		;funcret
  5840  012686                     __end_of_Sensor_Sampled_Reset:
  5841                           	opt stack 0
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5861 ;; Defined at:
  5862 ;;		line 302 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  sensor          1   21[BANK0 ] enum E17513
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  1    wreg      unsigned char 
  5869 ;; Registers used:
  5870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5880 ;;Total ram usage:        1 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    9
  5883 ;; This function calls:
  5884 ;;		_MTOUCH_Sensor_isEnabled
  5885 ;;		_MTOUCH_Sensor_isSampling
  5886 ;;		_MTOUCH_Sensor_wasSampled
  5887 ;;		_Sensor_FrequencyHopping
  5888 ;;		_Sensor_scheduleNextScan
  5889 ;; This function is called by:
  5890 ;;		_MTOUCH_Service_Mainloop
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text31
  5895  011ECA                     __ptext31:
  5896                           	opt stack 0
  5897  011ECA                     _MTOUCH_Sensor_SampleAll:
  5898                           	opt stack 20
  5899                           
  5900                           ;mtouch_sensor.c: 304: enum mtouch_sensor_names sensor;
  5901                           ;mtouch_sensor.c: 306: for (sensor = 0; sensor < 5; sensor++)
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;incstack = 0
  5905  011ECA  0E00               	movlw	0
  5906  011ECC  0100               	movlb	0	; () banked
  5907  011ECE  6FC4               	movwf	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  5908  011ED0                     l5367:
  5909                           
  5910                           ; BSR set to: 0
  5911  011ED0  0E04               	movlw	4
  5912  011ED2  65C4               	cpfsgt	MTOUCH_Sensor_SampleAll@sensor& (0+255),b
  5913  011ED4  D001               	goto	l512
  5914  011ED6  D018               	goto	u6480
  5915  011ED8                     l512:
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;mtouch_sensor.c: 307: {
  5919                           ;mtouch_sensor.c: 308: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  5920                           
  5921                           ; BSR set to: 0
  5922  011ED8  51C4               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  5923  011EDA  EC2E  F091         	call	_MTOUCH_Sensor_wasSampled
  5924  011EDE  0900               	iorlw	0
  5925  011EE0  A4D8               	btfss	status,2,c
  5926  011EE2  D00F               	goto	l514
  5927  011EE4  0100               	movlb	0	; () banked
  5928  011EE6  51C4               	movf	MTOUCH_Sensor_SampleAll@sensor& (0+255),w,b
  5929  011EE8  EC14  F091         	call	_MTOUCH_Sensor_isEnabled
  5930  011EEC  0900               	iorlw	0
  5931  011EEE  B4D8               	btfsc	status,2,c
  5932  011EF0  D008               	goto	l514
  5933                           
  5934                           ;mtouch_sensor.c: 309: {
  5935                           ;mtouch_sensor.c: 310: if(MTOUCH_Sensor_isSampling() == 0)
  5936  011EF2  ECB1  F093         	call	_MTOUCH_Sensor_isSampling	;wreg free
  5937  011EF6  0900               	iorlw	0
  5938  011EF8  B4D8               	btfsc	status,2,c
  5939                           
  5940                           ;mtouch_sensor.c: 311: Sensor_scheduleNextScan();
  5941  011EFA  EC0D  F084         	call	_Sensor_scheduleNextScan	;wreg free
  5942                           
  5943                           ;mtouch_sensor.c: 312: return 0;
  5944  011EFE  0E00               	movlw	0
  5945  011F00  0012               	return	
  5946  011F02                     l514:
  5947  011F02  0100               	movlb	0	; () banked
  5948  011F04  2BC4               	incf	MTOUCH_Sensor_SampleAll@sensor& (0+255),f,b
  5949  011F06  D7E4               	goto	l5367
  5950  011F08                     u6480:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;mtouch_sensor.c: 313: }
  5954                           ;mtouch_sensor.c: 314: }
  5955                           ;mtouch_sensor.c: 316: Sensor_FrequencyHopping();
  5956                           
  5957                           ; BSR set to: 0
  5958  011F08  EC7D  F092         	call	_Sensor_FrequencyHopping	;wreg free
  5959                           
  5960                           ;mtouch_sensor.c: 318: return 1;
  5961  011F0C  0E01               	movlw	1
  5962  011F0E  0012               	return	
  5963  011F10                     __end_of_MTOUCH_Sensor_SampleAll:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           postinc0	equ	0xFEE
  5973                           wreg	equ	0xFE8
  5974                           postdec1	equ	0xFE5
  5975                           fsr1l	equ	0xFE1
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _Sensor_scheduleNextScan *****************
  5984 ;; Defined at:
  5985 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;		None
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  sensor          2    6[BANK0 ] PTR struct .
  5990 ;;		 -> mtouch_sensor(45), 
  5991 ;;  skipScan        1    5[BANK0 ] unsigned char 
  5992 ;;  state           1    4[BANK0 ] unsigned char 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6003 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6005 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;Total ram usage:        6 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    6
  6009 ;; This function calls:
  6010 ;;		_MTOUCH_Sensor_isEnabled
  6011 ;;		_MTOUCH_Sensor_wasSampled
  6012 ;;		_Sensor_SetTrisBit
  6013 ;;		_Sensor_isCalibrated
  6014 ;;		_Sensor_isCalibratingAcqTime
  6015 ;; This function is called by:
  6016 ;;		_MTOUCH_Sensor_SampleAll
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text32
  6021  01081A                     __ptext32:
  6022                           	opt stack 0
  6023  01081A                     _Sensor_scheduleNextScan:
  6024                           	opt stack 22
  6025                           
  6026                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
  6027                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
  6028                           
  6029                           ;incstack = 0
  6030  01081A  0E00               	movlw	0
  6031  01081C  0100               	movlb	0	; () banked
  6032  01081E  6FB4               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6033                           
  6034                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
  6035  010820  0E00               	movlw	0
  6036  010822  BEF2               	btfsc	intcon,7,c	;volatile
  6037  010824  0E01               	movlw	1
  6038  010826  6FB3               	movwf	Sensor_scheduleNextScan@state& (0+255),b
  6039                           
  6040                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
  6041  010828  D00D               	goto	l524
  6042  01082A                     
  6043                           ;mtouch_sensor.c: 347: {
  6044                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
  6045                           
  6046                           ; BSR set to: 0
  6047  01082A  2A3B               	incf	_currentScanSensor,f,c
  6048  01082C  0E05               	movlw	5
  6049  01082E  183B               	xorwf	_currentScanSensor,w,c
  6050  010830  A4D8               	btfss	status,2,c
  6051  010832  D008               	goto	l524
  6052                           
  6053                           ;mtouch_sensor.c: 349: {
  6054                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
  6055  010834  0E00               	movlw	0
  6056  010836  6E3B               	movwf	_currentScanSensor,c
  6057                           
  6058                           ;mtouch_sensor.c: 351: sampling_flag = 0;
  6059  010838  0E00               	movlw	0
  6060  01083A  6E3A               	movwf	_sampling_flag,c
  6061                           
  6062                           ;mtouch_sensor.c: 352: skipScan = 1;
  6063  01083C  0E01               	movlw	1
  6064  01083E  0100               	movlb	0	; () banked
  6065  010840  6FB4               	movwf	Sensor_scheduleNextScan@skipScan& (0+255),b
  6066                           
  6067                           ;mtouch_sensor.c: 353: break;
  6068  010842  D00C               	goto	u6250
  6069  010844                     l524:
  6070                           
  6071                           ; BSR set to: 0
  6072                           
  6073                           ; BSR set to: 0
  6074  010844  503B               	movf	_currentScanSensor,w,c
  6075  010846  EC2E  F091         	call	_MTOUCH_Sensor_wasSampled
  6076  01084A  0900               	iorlw	0
  6077  01084C  A4D8               	btfss	status,2,c
  6078  01084E  D7ED               	goto	l523
  6079  010850  503B               	movf	_currentScanSensor,w,c
  6080  010852  EC14  F091         	call	_MTOUCH_Sensor_isEnabled
  6081  010856  0900               	iorlw	0
  6082  010858  B4D8               	btfsc	status,2,c
  6083  01085A  D7E7               	goto	l523
  6084  01085C                     u6250:
  6085                           
  6086                           ;mtouch_sensor.c: 354: }
  6087                           ;mtouch_sensor.c: 355: }
  6088                           ;mtouch_sensor.c: 358: if(skipScan==0)
  6089  01085C  0100               	movlb	0	; () banked
  6090  01085E  51B4               	movf	Sensor_scheduleNextScan@skipScan& (0+255),w,b
  6091  010860  A4D8               	btfss	status,2,c
  6092  010862  0012               	return	
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;mtouch_sensor.c: 359: {
  6096                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
  6097  010864  503B               	movf	_currentScanSensor,w,c
  6098  010866  0D09               	mullw	9
  6099  010868  0E82               	movlw	low _mtouch_sensor
  6100  01086A  24F3               	addwf	prodl,w,c
  6101  01086C  6FB5               	movwf	Sensor_scheduleNextScan@sensor& (0+255),b
  6102  01086E  0E00               	movlw	high _mtouch_sensor
  6103  010870  20F4               	addwfc	prodh,w,c
  6104  010872  6FB6               	movwf	(Sensor_scheduleNextScan@sensor+1)& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
  6108  010874  C0B5  F0AF         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  6109  010878  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibrated@sensor+1
  6110  01087C  ECEA  F092         	call	_Sensor_isCalibrated	;wreg free
  6111  010880  0900               	iorlw	0
  6112  010882  B4D8               	btfsc	status,2,c
  6113  010884  D015               	goto	l527
  6114                           
  6115                           ;mtouch_sensor.c: 362: {
  6116                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
  6117  010886  0100               	movlb	0	; () banked
  6118  010888  EE20 F003          	lfsr	2,3
  6119  01088C  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6120  01088E  26D9               	addwf	fsr2l,f,c
  6121  010890  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6122  010892  22DA               	addwfc	fsr2h,f,c
  6123  010894  50DF               	movf	indf2,w,c
  6124  010896  010F               	movlb	15	; () banked
  6125  010898  6F5C               	movwf	92,b	;volatile
  6126                           
  6127                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
  6128  01089A  0100               	movlb	0	; () banked
  6129  01089C  EE20 F002          	lfsr	2,2
  6130  0108A0  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6131  0108A2  26D9               	addwf	fsr2l,f,c
  6132  0108A4  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6133  0108A6  22DA               	addwfc	fsr2h,f,c
  6134  0108A8  50DF               	movf	indf2,w,c
  6135  0108AA  010F               	movlb	15	; () banked
  6136  0108AC  6F5E               	movwf	94,b	;volatile
  6137                           
  6138                           ;mtouch_sensor.c: 365: }
  6139  0108AE  D022               	goto	l530
  6140  0108B0                     l527:
  6141                           
  6142                           ;mtouch_sensor.c: 366: else
  6143                           ;mtouch_sensor.c: 367: {
  6144                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
  6145                           
  6146                           ; BSR set to: 15
  6147  0108B0  C0B5  F0AF         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  6148  0108B4  C0B6  F0B0         	movff	Sensor_scheduleNextScan@sensor+1,Sensor_isCalibratingAcqTime@sensor+1
  6149  0108B8  ECDD  F092         	call	_Sensor_isCalibratingAcqTime	;wreg free
  6150  0108BC  0900               	iorlw	0
  6151  0108BE  B4D8               	btfsc	status,2,c
  6152  0108C0  D014               	goto	l529
  6153                           
  6154                           ;mtouch_sensor.c: 369: {
  6155                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
  6156  0108C2  0100               	movlb	0	; () banked
  6157  0108C4  EE20 F002          	lfsr	2,2
  6158  0108C8  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6159  0108CA  26D9               	addwf	fsr2l,f,c
  6160  0108CC  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6161  0108CE  22DA               	addwfc	fsr2h,f,c
  6162  0108D0  50DF               	movf	indf2,w,c
  6163  0108D2  010F               	movlb	15	; () banked
  6164  0108D4  6F5E               	movwf	94,b	;volatile
  6165                           
  6166                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
  6167  0108D6  0100               	movlb	0	; () banked
  6168  0108D8  EE20 F003          	lfsr	2,3
  6169  0108DC  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6170  0108DE  26D9               	addwf	fsr2l,f,c
  6171  0108E0  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6172  0108E2  22DA               	addwfc	fsr2h,f,c
  6173  0108E4  50DF               	movf	indf2,w,c
  6174  0108E6  010F               	movlb	15	; () banked
  6175  0108E8  D004               	goto	L3
  6176  0108EA                     l529:
  6177                           
  6178                           ;mtouch_sensor.c: 373: else
  6179                           ;mtouch_sensor.c: 374: {
  6180                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6181                           
  6182                           ; BSR set to: 15
  6183  0108EA  0E80               	movlw	128
  6184  0108EC  010F               	movlb	15	; () banked
  6185  0108EE  6F5E               	movwf	94,b	;volatile
  6186                           
  6187                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
  6188  0108F0  0E80               	movlw	128
  6189  0108F2                     L3:
  6190  0108F2  6F5C               	movwf	92,b	;volatile
  6191  0108F4                     l530:
  6192                           
  6193                           ; BSR set to: 15
  6194                           ;mtouch_sensor.c: 377: }
  6195                           ;mtouch_sensor.c: 378: }
  6196                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
  6197                           
  6198                           ; BSR set to: 15
  6199                           
  6200                           ; BSR set to: 15
  6201  0108F4  5038               	movf	_sample_delay,w,c
  6202  0108F6  275E               	addwf	94,f,b	;volatile
  6203                           
  6204                           ; BSR set to: 15
  6205                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
  6206  0108F8  0100               	movlb	0	; () banked
  6207  0108FA  EE20 F001          	lfsr	2,1
  6208  0108FE  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6209  010900  26D9               	addwf	fsr2l,f,c
  6210  010902  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6211  010904  22DA               	addwfc	fsr2h,f,c
  6212  010906  50DF               	movf	indf2,w,c
  6213  010908  010F               	movlb	15	; () banked
  6214  01090A  6F5F               	movwf	95,b	;volatile
  6215                           
  6216                           ; BSR set to: 15
  6217                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
  6218  01090C  0100               	movlb	0	; () banked
  6219  01090E  EE20 F004          	lfsr	2,4
  6220  010912  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6221  010914  26D9               	addwf	fsr2l,f,c
  6222  010916  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6223  010918  22DA               	addwfc	fsr2h,f,c
  6224  01091A  50DF               	movf	indf2,w,c
  6225  01091C  6FB1               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6226  01091E  90D8               	bcf	status,0,c
  6227  010920  31B1               	rrcf	??_Sensor_scheduleNextScan& (0+255),w,b
  6228  010922  6E66               	movwf	3942,c	;volatile
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
  6232  010924  EE20 F005          	lfsr	2,5
  6233  010928  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6234  01092A  26D9               	addwf	fsr2l,f,c
  6235  01092C  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6236  01092E  22DA               	addwfc	fsr2h,f,c
  6237  010930  50DF               	movf	indf2,w,c
  6238  010932  010F               	movlb	15	; () banked
  6239  010934  6F5D               	movwf	93,b	;volatile
  6240                           
  6241                           ; BSR set to: 15
  6242                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
  6243  010936  8E60               	bsf	3936,7,c	;volatile
  6244                           
  6245                           ; BSR set to: 15
  6246                           ;mtouch_sensor.c: 385: sampling_flag= 1;
  6247  010938  0E01               	movlw	1
  6248  01093A  6E3A               	movwf	_sampling_flag,c
  6249                           
  6250                           ; BSR set to: 15
  6251                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
  6252  01093C  0E01               	movlw	1
  6253  01093E  0100               	movlb	0	; () banked
  6254  010940  6FAF               	movwf	Sensor_SetTrisBit@TrisBit& (0+255),b
  6255  010942  503B               	movf	_currentScanSensor,w,c
  6256  010944  EC83  F08D         	call	_Sensor_SetTrisBit
  6257                           
  6258                           ;mtouch_sensor.c: 387: GIE = 0;
  6259  010948  9EF2               	bcf	intcon,7,c	;volatile
  6260                           
  6261                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
  6262  01094A  8060               	bsf	3936,0,c	;volatile
  6263                           
  6264                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
  6265  01094C  0100               	movlb	0	; () banked
  6266  01094E  EE20 F004          	lfsr	2,4
  6267  010952  51B5               	movf	Sensor_scheduleNextScan@sensor& (0+255),w,b
  6268  010954  26D9               	addwf	fsr2l,f,c
  6269  010956  51B6               	movf	(Sensor_scheduleNextScan@sensor+1)& (0+255),w,b
  6270  010958  22DA               	addwfc	fsr2h,f,c
  6271  01095A  50DF               	movf	indf2,w,c
  6272  01095C  6FB1               	movwf	??_Sensor_scheduleNextScan& (0+255),b
  6273  01095E  6BB2               	clrf	(??_Sensor_scheduleNextScan+1)& (0+255),b
  6274  010960  0E09               	movlw	9
  6275  010962                     u6295:
  6276  010962  90D8               	bcf	status,0,c
  6277  010964  37B1               	rlcf	??_Sensor_scheduleNextScan& (0+255),f,b
  6278  010966  37B2               	rlcf	(??_Sensor_scheduleNextScan+1)& (0+255),f,b
  6279  010968  2EE8               	decfsz	wreg,f,c
  6280  01096A  D7FB               	goto	u6295
  6281  01096C  C0B1  FF70         	movff	??_Sensor_scheduleNextScan,3952	;volatile
  6282  010970  C0B2  FF71         	movff	??_Sensor_scheduleNextScan+1,3953	;volatile
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;mtouch_sensor.c: 390: GIE = state;
  6286  010974  A1B3               	btfss	Sensor_scheduleNextScan@state& (0+255),0,b
  6287  010976  D002               	goto	u6300
  6288  010978  8EF2               	bsf	intcon,7,c	;volatile
  6289  01097A  D001               	goto	u6315
  6290  01097C                     u6300:
  6291  01097C  9EF2               	bcf	intcon,7,c	;volatile
  6292  01097E                     u6315:
  6293                           
  6294                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
  6295  01097E  0E00               	movlw	0
  6296  010980  6E39               	movwf	_scanInterrupted,c	;volatile
  6297  010982  0012               	return	
  6298  010984                     __end_of_Sensor_scheduleNextScan:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           postdec1	equ	0xFE5
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  6319 ;; Defined at:
  6320 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  sensor          2    0[BANK0 ] PTR struct .
  6323 ;;		 -> mtouch_sensor(45), 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      unsigned char 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;Total ram usage:        2 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    5
  6342 ;; This function calls:
  6343 ;;		Nothing
  6344 ;; This function is called by:
  6345 ;;		_Sensor_scheduleNextScan
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text33
  6350  0125BA                     __ptext33:
  6351                           	opt stack 0
  6352  0125BA                     _Sensor_isCalibratingAcqTime:
  6353                           	opt stack 22
  6354                           
  6355                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
  6356                           
  6357                           ;incstack = 0
  6358  0125BA  0100               	movlb	0	; () banked
  6359  0125BC  EE20 F008          	lfsr	2,8
  6360  0125C0  51AF               	movf	Sensor_isCalibratingAcqTime@sensor& (0+255),w,b
  6361  0125C2  26D9               	addwf	fsr2l,f,c
  6362  0125C4  51B0               	movf	(Sensor_isCalibratingAcqTime@sensor+1)& (0+255),w,b
  6363  0125C6  22DA               	addwfc	fsr2h,f,c
  6364  0125C8  A8DF               	btfss	indf2,4,c
  6365  0125CA  D002               	goto	u5700
  6366  0125CC  0E01               	movlw	1
  6367  0125CE  0012               	return	
  6368  0125D0                     u5700:
  6369  0125D0  0E00               	movlw	0
  6370  0125D2  0012               	return	
  6371  0125D4                     __end_of_Sensor_isCalibratingAcqTime:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           intcon	equ	0xFF2
  6380                           postinc0	equ	0xFEE
  6381                           wreg	equ	0xFE8
  6382                           postdec1	equ	0xFE5
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _Sensor_isCalibrated *****************
  6392 ;; Defined at:
  6393 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  sensor          2    0[BANK0 ] PTR struct .
  6396 ;;		 -> mtouch_sensor(45), 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  1    wreg      unsigned char 
  6401 ;; Registers used:
  6402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6408 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6412 ;;Total ram usage:        2 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    5
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_Sensor_scheduleNextScan
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text34
  6423  0125D4                     __ptext34:
  6424                           	opt stack 0
  6425  0125D4                     _Sensor_isCalibrated:
  6426                           	opt stack 22
  6427                           
  6428                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;incstack = 0
  6432  0125D4  0100               	movlb	0	; () banked
  6433  0125D6  EE20 F008          	lfsr	2,8
  6434  0125DA  51AF               	movf	Sensor_isCalibrated@sensor& (0+255),w,b
  6435  0125DC  26D9               	addwf	fsr2l,f,c
  6436  0125DE  51B0               	movf	(Sensor_isCalibrated@sensor+1)& (0+255),w,b
  6437  0125E0  22DA               	addwfc	fsr2h,f,c
  6438  0125E2  A6DF               	btfss	indf2,3,c
  6439  0125E4  D002               	goto	u5690
  6440  0125E6  0E01               	movlw	1
  6441  0125E8  0012               	return	
  6442  0125EA                     u5690:
  6443  0125EA  0E00               	movlw	0
  6444  0125EC  0012               	return	
  6445  0125EE                     __end_of_Sensor_isCalibrated:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           intcon	equ	0xFF2
  6454                           postinc0	equ	0xFEE
  6455                           wreg	equ	0xFE8
  6456                           postdec1	equ	0xFE5
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _Sensor_SetTrisBit *****************
  6466 ;; Defined at:
  6467 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  sensor          1    wreg     enum E17513
  6470 ;;  TrisBit         1    0[BANK0 ] unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  sensor          1    1[BANK0 ] enum E17513
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      void 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6482 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    5
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_Sensor_scheduleNextScan
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text35
  6497  011B06                     __ptext35:
  6498                           	opt stack 0
  6499  011B06                     _Sensor_SetTrisBit:
  6500                           	opt stack 22
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;incstack = 0
  6504                           ;Sensor_SetTrisBit@sensor stored from wreg
  6505  011B06  0100               	movlb	0	; () banked
  6506  011B08  6FB0               	movwf	Sensor_SetTrisBit@sensor& (0+255),b
  6507                           
  6508                           ;mtouch_sensor.c: 224: switch(sensor)
  6509  011B0A  D01E               	goto	l493
  6510  011B0C                     l494:
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
  6514  011B0C  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  6515  011B0E  D002               	bra	u5595
  6516  011B10  9485               	bcf	3973,2,c	;volatile
  6517  011B12  D001               	bra	u5596
  6518  011B14                     u5595:
  6519  011B14  8485               	bsf	3973,2,c	;volatile
  6520  011B16                     u5596:
  6521                           
  6522                           ;mtouch_sensor.c: 228: break;
  6523  011B16  0012               	return	
  6524  011B18                     l496:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
  6528  011B18  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  6529  011B1A  D002               	bra	u5605
  6530  011B1C  9685               	bcf	3973,3,c	;volatile
  6531  011B1E  D001               	bra	u5606
  6532  011B20                     u5605:
  6533  011B20  8685               	bsf	3973,3,c	;volatile
  6534  011B22                     u5606:
  6535                           
  6536                           ;mtouch_sensor.c: 231: break;
  6537  011B22  0012               	return	
  6538  011B24                     l497:
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
  6542  011B24  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  6543  011B26  D002               	bra	u5615
  6544  011B28  9885               	bcf	3973,4,c	;volatile
  6545  011B2A  D001               	bra	u5616
  6546  011B2C                     u5615:
  6547  011B2C  8885               	bsf	3973,4,c	;volatile
  6548  011B2E                     u5616:
  6549                           
  6550                           ;mtouch_sensor.c: 234: break;
  6551  011B2E  0012               	return	
  6552  011B30                     l498:
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
  6556  011B30  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  6557  011B32  D002               	bra	u5625
  6558  011B34  9A85               	bcf	3973,5,c	;volatile
  6559  011B36  D001               	bra	u5626
  6560  011B38                     u5625:
  6561  011B38  8A85               	bsf	3973,5,c	;volatile
  6562  011B3A                     u5626:
  6563                           
  6564                           ;mtouch_sensor.c: 237: break;
  6565  011B3A  0012               	return	
  6566  011B3C                     l499:
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
  6570  011B3C  B1AF               	btfsc	Sensor_SetTrisBit@TrisBit& (0+255),0,b
  6571  011B3E  D002               	bra	u5635
  6572  011B40  9C85               	bcf	3973,6,c	;volatile
  6573  011B42  D001               	bra	u5636
  6574  011B44                     u5635:
  6575  011B44  8C85               	bsf	3973,6,c	;volatile
  6576  011B46                     u5636:
  6577                           
  6578                           ;mtouch_sensor.c: 242: }
  6579                           
  6580                           ;mtouch_sensor.c: 241: default: break;
  6581                           
  6582                           ;mtouch_sensor.c: 240: break;
  6583  011B46  0012               	return	
  6584  011B48                     l493:
  6585  011B48  0100               	movlb	0	; () banked
  6586  011B4A  51B0               	movf	Sensor_SetTrisBit@sensor& (0+255),w,b
  6587                           
  6588                           ; Switch size 1, requested type "space"
  6589                           ; Number of cases is 5, Range of values is 0 to 4
  6590                           ; switch strategies available:
  6591                           ; Name         Instructions Cycles
  6592                           ; simple_byte           16     9 (average)
  6593                           ;	Chosen strategy is simple_byte
  6594  011B4C  0A00               	xorlw	0	; case 0
  6595  011B4E  B4D8               	btfsc	status,2,c
  6596  011B50  D7DD               	goto	l494
  6597  011B52  0A01               	xorlw	1	; case 1
  6598  011B54  B4D8               	btfsc	status,2,c
  6599  011B56  D7E0               	goto	l496
  6600  011B58  0A03               	xorlw	3	; case 2
  6601  011B5A  B4D8               	btfsc	status,2,c
  6602  011B5C  D7E3               	goto	l497
  6603  011B5E  0A01               	xorlw	1	; case 3
  6604  011B60  B4D8               	btfsc	status,2,c
  6605  011B62  D7E6               	goto	l498
  6606  011B64  0A07               	xorlw	7	; case 4
  6607  011B66  A4D8               	btfss	status,2,c
  6608  011B68  0012               	return	
  6609  011B6A  D7E8               	goto	l499
  6610  011B6C                     __end_of_Sensor_SetTrisBit:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  6631 ;; Defined at:
  6632 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  sensor          1    wreg     enum E17513
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  sensor          1    0[BANK0 ] enum E17513
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      unsigned char 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6650 ;;Total ram usage:        1 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    5
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_MTOUCH_Sensor_SampleAll
  6657 ;;		_Sensor_scheduleNextScan
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text36
  6662  012228                     __ptext36:
  6663                           	opt stack 0
  6664  012228                     _MTOUCH_Sensor_isEnabled:
  6665                           	opt stack 22
  6666                           
  6667                           ;incstack = 0
  6668                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  6669  012228  0100               	movlb	0	; () banked
  6670  01222A  6FAF               	movwf	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  6671                           
  6672                           ;mtouch_sensor.c: 719: if(sensor < 5)
  6673  01222C  0E05               	movlw	5
  6674  01222E  0100               	movlb	0	; () banked
  6675  012230  61AF               	cpfslt	MTOUCH_Sensor_isEnabled@sensor& (0+255),b
  6676  012232  D012               	goto	l641
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
  6680  012234  51AF               	movf	MTOUCH_Sensor_isEnabled@sensor& (0+255),w,b
  6681  012236  0D09               	mullw	9
  6682  012238  0E08               	movlw	8
  6683  01223A  26F3               	addwf	prodl,f,c
  6684  01223C  0E00               	movlw	0
  6685  01223E  22F4               	addwfc	prodh,f,c
  6686  012240  0E82               	movlw	low _mtouch_sensor
  6687  012242  24F3               	addwf	prodl,w,c
  6688  012244  6ED9               	movwf	fsr2l,c
  6689  012246  0E00               	movlw	high _mtouch_sensor
  6690  012248  20F4               	addwfc	prodh,w,c
  6691  01224A  6EDA               	movwf	fsr2h,c
  6692  01224C  A0DF               	btfss	indf2,0,c
  6693  01224E  D002               	goto	u5680
  6694  012250  0E01               	movlw	1
  6695  012252  0012               	return	
  6696  012254                     u5680:
  6697  012254  0E00               	movlw	0
  6698                           
  6699                           ; BSR set to: 0
  6700                           
  6701                           ; BSR set to: 0
  6702  012256  0012               	return	
  6703  012258                     l641:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;mtouch_sensor.c: 721: else
  6707                           ;mtouch_sensor.c: 722: return 0;
  6708                           
  6709                           ; BSR set to: 0
  6710  012258  0E00               	movlw	0
  6711                           
  6712                           ; BSR set to: 0
  6713  01225A  0012               	return	
  6714  01225C                     __end_of_MTOUCH_Sensor_isEnabled:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           postdec1	equ	0xFE5
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734 ;; *************** function _Sensor_FrequencyHopping *****************
  6735 ;; Defined at:
  6736 ;;		line 595 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  sensor          1   20[BANK0 ] enum E17513
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    8
  6757 ;; This function calls:
  6758 ;;		_Sensor_FrequencyHopping_Autotune_Process
  6759 ;;		_Sensor_postAcquisitionProcess
  6760 ;;		_Sensor_setSamplePeriod
  6761 ;; This function is called by:
  6762 ;;		_MTOUCH_Sensor_SampleAll
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           	psect	text37
  6767  0124FA                     __ptext37:
  6768                           	opt stack 0
  6769  0124FA                     _Sensor_FrequencyHopping:
  6770                           	opt stack 20
  6771                           
  6772                           ;mtouch_sensor.c: 597: enum mtouch_sensor_names sensor;
  6773                           ;mtouch_sensor.c: 599: Sensor_FrequencyHopping_Autotune_Process();
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;incstack = 0
  6777  0124FA  EC47  F083         	call	_Sensor_FrequencyHopping_Autotune_Process	;wreg free
  6778                           
  6779                           ;mtouch_sensor.c: 601: for (sensor = 0; sensor < 5; sensor++)
  6780  0124FE  0E00               	movlw	0
  6781  012500  0100               	movlb	0	; () banked
  6782  012502  6FC3               	movwf	Sensor_FrequencyHopping@sensor& (0+255),b
  6783  012504                     l5233:
  6784                           
  6785                           ; BSR set to: 0
  6786  012504  0E04               	movlw	4
  6787  012506  65C3               	cpfsgt	Sensor_FrequencyHopping@sensor& (0+255),b
  6788  012508  D001               	goto	l596
  6789  01250A  D006               	goto	u6330
  6790  01250C                     l596:
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;mtouch_sensor.c: 602: {
  6794                           ;mtouch_sensor.c: 603: Sensor_postAcquisitionProcess(sensor);
  6795                           
  6796                           ; BSR set to: 0
  6797  01250C  51C3               	movf	Sensor_FrequencyHopping@sensor& (0+255),w,b
  6798  01250E  EC59  F08A         	call	_Sensor_postAcquisitionProcess
  6799  012512  0100               	movlb	0	; () banked
  6800  012514  2BC3               	incf	Sensor_FrequencyHopping@sensor& (0+255),f,b
  6801  012516  D7F6               	goto	l5233
  6802  012518                     u6330:
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;mtouch_sensor.c: 604: }
  6806                           ;mtouch_sensor.c: 606: Sensor_setSamplePeriod();
  6807                           
  6808                           ; BSR set to: 0
  6809  012518  EC8F  F092         	call	_Sensor_setSamplePeriod	;wreg free
  6810  01251C  0012               	return		;funcret
  6811  01251E                     __end_of_Sensor_FrequencyHopping:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _Sensor_setSamplePeriod *****************
  6832 ;; Defined at:
  6833 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    5
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_Sensor_FrequencyHopping
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text38
  6862  01251E                     __ptext38:
  6863                           	opt stack 0
  6864  01251E                     _Sensor_setSamplePeriod:
  6865                           	opt stack 22
  6866                           
  6867                           ;mtouch_sensor.c: 522: if(++freq_index >= sizeof(freq_hop) )
  6868                           
  6869                           ;incstack = 0
  6870  01251E  0100               	movlb	0	; () banked
  6871  012520  2B81               	incf	_freq_index& (0+255),f,b
  6872  012522  0E02               	movlw	2
  6873  012524  6581               	cpfsgt	_freq_index& (0+255),b
  6874  012526  D002               	goto	l566
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;mtouch_sensor.c: 523: freq_index = 0;
  6878  012528  0E00               	movlw	0
  6879  01252A  6F81               	movwf	_freq_index& (0+255),b
  6880  01252C                     l566:
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;mtouch_sensor.c: 525: sample_delay = freq_hop[freq_index];
  6884                           
  6885                           ; BSR set to: 0
  6886  01252C  5181               	movf	_freq_index& (0+255),w,b
  6887  01252E  0D01               	mullw	1
  6888  012530  0EE4               	movlw	low _freq_hop
  6889  012532  24F3               	addwf	prodl,w,c
  6890  012534  6ED9               	movwf	fsr2l,c
  6891  012536  0E00               	movlw	high _freq_hop
  6892  012538  20F4               	addwfc	prodh,w,c
  6893  01253A  6EDA               	movwf	fsr2h,c
  6894  01253C  50DF               	movf	indf2,w,c
  6895  01253E  6E38               	movwf	_sample_delay,c
  6896                           
  6897                           ; BSR set to: 0
  6898  012540  0012               	return		;funcret
  6899  012542                     __end_of_Sensor_setSamplePeriod:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           postdec1	equ	0xFE5
  6911                           fsr1l	equ	0xFE1
  6912                           indf2	equ	0xFDF
  6913                           postinc2	equ	0xFDE
  6914                           postdec2	equ	0xFDD
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6920 ;; Defined at:
  6921 ;;		line 450 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  name            1    wreg     enum E17513
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  name            1   17[BANK0 ] enum E17513
  6926 ;;  sensor          2   18[BANK0 ] PTR struct .
  6927 ;;		 -> mtouch_sensor(45), 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6938 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6939 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6940 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6941 ;;Total ram usage:        9 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    7
  6944 ;; This function calls:
  6945 ;;		_Sensor_DefaultCallback
  6946 ;;		_Sensor_RawSample_Update
  6947 ;;		_Sensor_isEnabled
  6948 ;;		_Sensor_setActive
  6949 ;;		_Sensor_setInactive
  6950 ;;		_abs
  6951 ;; This function is called by:
  6952 ;;		_Sensor_FrequencyHopping
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text39
  6957  0114B2                     __ptext39:
  6958                           	opt stack 0
  6959  0114B2                     _Sensor_postAcquisitionProcess:
  6960                           	opt stack 20
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;incstack = 0
  6964                           ;Sensor_postAcquisitionProcess@name stored from wreg
  6965  0114B2  0100               	movlb	0	; () banked
  6966  0114B4  6FC0               	movwf	Sensor_postAcquisitionProcess@name& (0+255),b
  6967                           
  6968                           ;mtouch_sensor.c: 452: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  6969  0114B6  0100               	movlb	0	; () banked
  6970  0114B8  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  6971  0114BA  0D09               	mullw	9
  6972  0114BC  0E82               	movlw	low _mtouch_sensor
  6973  0114BE  24F3               	addwf	prodl,w,c
  6974  0114C0  6FC1               	movwf	Sensor_postAcquisitionProcess@sensor& (0+255),b
  6975  0114C2  0E00               	movlw	high _mtouch_sensor
  6976  0114C4  20F4               	addwfc	prodh,w,c
  6977  0114C6  6FC2               	movwf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;mtouch_sensor.c: 454: if(Sensor_isEnabled(sensor))
  6981  0114C8  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_isEnabled@sensor
  6982  0114CC  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_isEnabled@sensor+1
  6983  0114D0  EC6A  F092         	call	_Sensor_isEnabled	;wreg free
  6984  0114D4  0900               	iorlw	0
  6985  0114D6  B4D8               	btfsc	status,2,c
  6986  0114D8  D05A               	goto	l546
  6987                           
  6988                           ;mtouch_sensor.c: 455: {
  6989                           ;mtouch_sensor.c: 456: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - sensor
      +                          ->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<2))
  6990  0114DA  0100               	movlb	0	; () banked
  6991  0114DC  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  6992  0114DE  0D02               	mullw	2
  6993  0114E0  0E29               	movlw	low _packet_sample
  6994  0114E2  24F3               	addwf	prodl,w,c
  6995  0114E4  6ED9               	movwf	fsr2l,c
  6996  0114E6  0E00               	movlw	high _packet_sample
  6997  0114E8  20F4               	addwfc	prodh,w,c
  6998  0114EA  6EDA               	movwf	fsr2h,c
  6999  0114EC  CFDE F0BA          	movff	postinc2,??_Sensor_postAcquisitionProcess
  7000  0114F0  CFDD F0BB          	movff	postdec2,??_Sensor_postAcquisitionProcess+1
  7001  0114F4  EE20 F006          	lfsr	2,6
  7002  0114F8  51C1               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7003  0114FA  26D9               	addwf	fsr2l,f,c
  7004  0114FC  51C2               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7005  0114FE  22DA               	addwfc	fsr2h,f,c
  7006  011500  CFDE F0BC          	movff	postinc2,??_Sensor_postAcquisitionProcess+2
  7007  011504  CFDD F0BD          	movff	postdec2,??_Sensor_postAcquisitionProcess+3
  7008  011508  1FBC               	comf	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7009  01150A  1FBD               	comf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7010  01150C  4BBC               	infsnz	(??_Sensor_postAcquisitionProcess+2)& (0+255),f,b
  7011  01150E  2BBD               	incf	(??_Sensor_postAcquisitionProcess+3)& (0+255),f,b
  7012  011510  51BA               	movf	??_Sensor_postAcquisitionProcess& (0+255),w,b
  7013  011512  25BC               	addwf	(??_Sensor_postAcquisitionProcess+2)& (0+255),w,b
  7014  011514  6FAF               	movwf	abs@a& (0+255),b
  7015  011516  51BB               	movf	(??_Sensor_postAcquisitionProcess+1)& (0+255),w,b
  7016  011518  21BD               	addwfc	(??_Sensor_postAcquisitionProcess+3)& (0+255),w,b
  7017  01151A  6FB0               	movwf	(abs@a+1)& (0+255),b
  7018  01151C  ECDD  F091         	call	_abs	;wreg free
  7019  011520  0100               	movlb	0	; () banked
  7020  011522  EE20 F004          	lfsr	2,4
  7021  011526  51C1               	movf	Sensor_postAcquisitionProcess@sensor& (0+255),w,b
  7022  011528  26D9               	addwf	fsr2l,f,c
  7023  01152A  51C2               	movf	(Sensor_postAcquisitionProcess@sensor+1)& (0+255),w,b
  7024  01152C  22DA               	addwfc	fsr2h,f,c
  7025  01152E  50DF               	movf	indf2,w,c
  7026  011530  6FBE               	movwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),b
  7027  011532  6BBF               	clrf	(??_Sensor_postAcquisitionProcess+5)& (0+255),b
  7028  011534  90D8               	bcf	status,0,c
  7029  011536  37BE               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7030  011538  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7031  01153A  90D8               	bcf	status,0,c
  7032  01153C  37BE               	rlcf	(??_Sensor_postAcquisitionProcess+4)& (0+255),f,b
  7033  01153E  37BF               	rlcf	(??_Sensor_postAcquisitionProcess+5)& (0+255),f,b
  7034  011540  51AF               	movf	?_abs& (0+255),w,b
  7035  011542  5DBE               	subwf	(??_Sensor_postAcquisitionProcess+4)& (0+255),w,b
  7036  011544  51B0               	movf	(?_abs+1)& (0+255),w,b
  7037  011546  59BF               	subwfb	(??_Sensor_postAcquisitionProcess+5)& (0+255),w,b
  7038  011548  B0D8               	btfsc	status,0,c
  7039  01154A  D007               	goto	l547
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;mtouch_sensor.c: 457: Sensor_setActive(sensor);
  7043  01154C  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setActive@sensor
  7044  011550  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setActive@sensor+1
  7045  011554  EC4C  F093         	call	_Sensor_setActive	;wreg free
  7046  011558  D006               	goto	l548
  7047  01155A                     l547:
  7048                           
  7049                           ;mtouch_sensor.c: 458: else
  7050                           ;mtouch_sensor.c: 459: Sensor_setInactive(sensor);
  7051  01155A  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7052  01155E  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7053  011562  EC43  F093         	call	_Sensor_setInactive	;wreg free
  7054  011566                     l548:
  7055                           
  7056                           ;mtouch_sensor.c: 461: Sensor_RawSample_Update(sensor);
  7057  011566  C0C1  F0B6         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_RawSample_Update@sensor
  7058  01156A  C0C2  F0B7         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_RawSample_Update@sensor+1
  7059  01156E  EC3E  F08F         	call	_Sensor_RawSample_Update	;wreg free
  7060                           
  7061                           ;mtouch_sensor.c: 462: callback_sampled(name);
  7062  011572  D801               	call	u5738
  7063  011574  0012               	return	
  7064  011576                     u5738:
  7065  011576  0005               	push	
  7066  011578  6EFA               	movwf	pclath,c
  7067  01157A  504C               	movf	_callback_sampled,w,c
  7068  01157C  6EFD               	movwf	tosl,c
  7069  01157E  504D               	movf	_callback_sampled+1,w,c
  7070  011580  6EFE               	movwf	tosh,c
  7071  011582  504E               	movf	_callback_sampled+2,w,c
  7072  011584  6EFF               	movwf	tosu,c
  7073  011586  50FA               	movf	pclath,w,c
  7074  011588  0100               	movlb	0	; () banked
  7075  01158A  51C0               	movf	Sensor_postAcquisitionProcess@name& (0+255),w,b
  7076  01158C  0012               	return		;indir
  7077  01158E                     l546:
  7078                           
  7079                           ;mtouch_sensor.c: 464: else
  7080                           ;mtouch_sensor.c: 465: {
  7081                           ;mtouch_sensor.c: 466: Sensor_setInactive(sensor);
  7082  01158E  C0C1  F0AF         	movff	Sensor_postAcquisitionProcess@sensor,Sensor_setInactive@sensor
  7083  011592  C0C2  F0B0         	movff	Sensor_postAcquisitionProcess@sensor+1,Sensor_setInactive@sensor+1
  7084  011596  EC43  F093         	call	_Sensor_setInactive
  7085  01159A  0012               	return	
  7086  01159C                     __end_of_Sensor_postAcquisitionProcess:
  7087                           	opt stack 0
  7088                           tosu	equ	0xFFF
  7089                           tosh	equ	0xFFE
  7090                           tosl	equ	0xFFD
  7091                           pclath	equ	0xFFA
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           intcon	equ	0xFF2
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           postdec1	equ	0xFE5
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           fsr2h	equ	0xFDA
  7107                           fsr2l	equ	0xFD9
  7108                           status	equ	0xFD8
  7109                           
  7110 ;; *************** function _Sensor_setInactive *****************
  7111 ;; Defined at:
  7112 ;;		line 745 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  sensor          2    0[BANK0 ] PTR struct .
  7115 ;;		 -> mtouch_sensor(45), 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      void 
  7120 ;; Registers used:
  7121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7131 ;;Total ram usage:        2 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    5
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_Sensor_postAcquisitionProcess
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text40
  7142  012686                     __ptext40:
  7143                           	opt stack 0
  7144  012686                     _Sensor_setInactive:
  7145                           	opt stack 21
  7146                           
  7147                           ;mtouch_sensor.c: 747: sensor->acitve = 0;
  7148                           
  7149                           ;incstack = 0
  7150  012686  0100               	movlb	0	; () banked
  7151  012688  EE20 F008          	lfsr	2,8
  7152  01268C  51AF               	movf	Sensor_setInactive@sensor& (0+255),w,b
  7153  01268E  26D9               	addwf	fsr2l,f,c
  7154  012690  51B0               	movf	(Sensor_setInactive@sensor+1)& (0+255),w,b
  7155  012692  22DA               	addwfc	fsr2h,f,c
  7156  012694  94DF               	bcf	indf2,2,c
  7157                           
  7158                           ; BSR set to: 0
  7159  012696  0012               	return		;funcret
  7160  012698                     __end_of_Sensor_setInactive:
  7161                           	opt stack 0
  7162                           tosu	equ	0xFFF
  7163                           tosh	equ	0xFFE
  7164                           tosl	equ	0xFFD
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           postinc0	equ	0xFEE
  7174                           wreg	equ	0xFE8
  7175                           postdec1	equ	0xFE5
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8
  7183                           
  7184 ;; *************** function _Sensor_setActive *****************
  7185 ;; Defined at:
  7186 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  sensor          2    0[BANK0 ] PTR struct .
  7189 ;;		 -> mtouch_sensor(45), 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;		None
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  1    wreg      void 
  7194 ;; Registers used:
  7195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7205 ;;Total ram usage:        2 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    5
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_Sensor_postAcquisitionProcess
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text41
  7216  012698                     __ptext41:
  7217                           	opt stack 0
  7218  012698                     _Sensor_setActive:
  7219                           	opt stack 21
  7220                           
  7221                           ;mtouch_sensor.c: 742: sensor->acitve = 1;
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;incstack = 0
  7225  012698  0100               	movlb	0	; () banked
  7226  01269A  EE20 F008          	lfsr	2,8
  7227  01269E  51AF               	movf	Sensor_setActive@sensor& (0+255),w,b
  7228  0126A0  26D9               	addwf	fsr2l,f,c
  7229  0126A2  51B0               	movf	(Sensor_setActive@sensor+1)& (0+255),w,b
  7230  0126A4  22DA               	addwfc	fsr2h,f,c
  7231  0126A6  84DF               	bsf	indf2,2,c
  7232                           
  7233                           ; BSR set to: 0
  7234  0126A8  0012               	return		;funcret
  7235  0126AA                     __end_of_Sensor_setActive:
  7236                           	opt stack 0
  7237                           tosu	equ	0xFFF
  7238                           tosh	equ	0xFFE
  7239                           tosl	equ	0xFFD
  7240                           pclath	equ	0xFFA
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           postinc0	equ	0xFEE
  7249                           wreg	equ	0xFE8
  7250                           postdec1	equ	0xFE5
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           fsr2h	equ	0xFDA
  7256                           fsr2l	equ	0xFD9
  7257                           status	equ	0xFD8
  7258                           
  7259 ;; *************** function _Sensor_isEnabled *****************
  7260 ;; Defined at:
  7261 ;;		line 725 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  sensor          2    0[BANK0 ] PTR struct .
  7264 ;;		 -> mtouch_sensor(45), 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      unsigned char 
  7269 ;; Registers used:
  7270 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7280 ;;Total ram usage:        2 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    5
  7283 ;; This function calls:
  7284 ;;		Nothing
  7285 ;; This function is called by:
  7286 ;;		_Sensor_postAcquisitionProcess
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text42
  7291  0124D4                     __ptext42:
  7292                           	opt stack 0
  7293  0124D4                     _Sensor_isEnabled:
  7294                           	opt stack 21
  7295                           
  7296                           ;mtouch_sensor.c: 727: if(sensor!=(0))
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;incstack = 0
  7300  0124D4  0100               	movlb	0	; () banked
  7301  0124D6  51AF               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7302  0124D8  11B0               	iorwf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7303  0124DA  B4D8               	btfsc	status,2,c
  7304  0124DC  D00C               	goto	l646
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;mtouch_sensor.c: 728: return (bool)sensor->enabled;
  7308  0124DE  EE20 F008          	lfsr	2,8
  7309  0124E2  51AF               	movf	Sensor_isEnabled@sensor& (0+255),w,b
  7310  0124E4  26D9               	addwf	fsr2l,f,c
  7311  0124E6  51B0               	movf	(Sensor_isEnabled@sensor+1)& (0+255),w,b
  7312  0124E8  22DA               	addwfc	fsr2h,f,c
  7313  0124EA  A0DF               	btfss	indf2,0,c
  7314  0124EC  D002               	goto	u5300
  7315  0124EE  0E01               	movlw	1
  7316  0124F0  0012               	return	
  7317  0124F2                     u5300:
  7318  0124F2  0E00               	movlw	0
  7319                           
  7320                           ; BSR set to: 0
  7321                           
  7322                           ; BSR set to: 0
  7323  0124F4  0012               	return	
  7324  0124F6                     l646:
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;mtouch_sensor.c: 729: else
  7328                           ;mtouch_sensor.c: 730: return 0;
  7329                           
  7330                           ; BSR set to: 0
  7331  0124F6  0E00               	movlw	0
  7332                           
  7333                           ; BSR set to: 0
  7334  0124F8  0012               	return	
  7335  0124FA                     __end_of_Sensor_isEnabled:
  7336                           	opt stack 0
  7337                           tosu	equ	0xFFF
  7338                           tosh	equ	0xFFE
  7339                           tosl	equ	0xFFD
  7340                           pclath	equ	0xFFA
  7341                           tblptru	equ	0xFF8
  7342                           tblptrh	equ	0xFF7
  7343                           tblptrl	equ	0xFF6
  7344                           tablat	equ	0xFF5
  7345                           prodh	equ	0xFF4
  7346                           prodl	equ	0xFF3
  7347                           intcon	equ	0xFF2
  7348                           postinc0	equ	0xFEE
  7349                           wreg	equ	0xFE8
  7350                           postdec1	equ	0xFE5
  7351                           fsr1l	equ	0xFE1
  7352                           indf2	equ	0xFDF
  7353                           postinc2	equ	0xFDE
  7354                           postdec2	equ	0xFDD
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function _Sensor_RawSample_Update *****************
  7360 ;; Defined at:
  7361 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  sensor          2    7[BANK0 ] PTR struct .
  7364 ;;		 -> mtouch_sensor(45), 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  result          2    9[BANK0 ] unsigned int 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7379 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7380 ;;Total ram usage:        4 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    6
  7383 ;; This function calls:
  7384 ;;		_medianFilter
  7385 ;; This function is called by:
  7386 ;;		_Sensor_postAcquisitionProcess
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text43
  7391  011E7C                     __ptext43:
  7392                           	opt stack 0
  7393  011E7C                     _Sensor_RawSample_Update:
  7394                           	opt stack 20
  7395                           
  7396                           ;mtouch_sensor.c: 544: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;incstack = 0
  7400  011E7C  C0B6  FFD9         	movff	Sensor_RawSample_Update@sensor,fsr2l
  7401  011E80  C0B7  FFDA         	movff	Sensor_RawSample_Update@sensor+1,fsr2h
  7402  011E84  50DF               	movf	indf2,w,c
  7403  011E86  EC4E  F081         	call	_medianFilter
  7404  011E8A  C0AF  F0B8         	movff	?_medianFilter,Sensor_RawSample_Update@result
  7405  011E8E  C0B0  F0B9         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  7406                           
  7407                           ;mtouch_sensor.c: 546: if (GIE == (uint8_t)1)
  7408  011E92  AEF2               	btfss	intcon,7,c	;volatile
  7409  011E94  D00E               	goto	l575
  7410                           
  7411                           ;mtouch_sensor.c: 547: {
  7412                           ;mtouch_sensor.c: 548: GIE = (uint8_t)0;
  7413  011E96  9EF2               	bcf	intcon,7,c	;volatile
  7414                           
  7415                           ;mtouch_sensor.c: 549: sensor->rawSample = result;
  7416  011E98  0100               	movlb	0	; () banked
  7417  011E9A  EE20 F006          	lfsr	2,6
  7418  011E9E  51B6               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  7419  011EA0  26D9               	addwf	fsr2l,f,c
  7420  011EA2  51B7               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  7421  011EA4  22DA               	addwfc	fsr2h,f,c
  7422  011EA6  C0B8  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  7423  011EAA  C0B9  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;mtouch_sensor.c: 550: GIE = (uint8_t)1;
  7427  011EAE  8EF2               	bsf	intcon,7,c	;volatile
  7428                           
  7429                           ;mtouch_sensor.c: 551: }
  7430  011EB0  0012               	return	
  7431  011EB2                     l575:
  7432                           
  7433                           ;mtouch_sensor.c: 552: else
  7434                           ;mtouch_sensor.c: 553: {
  7435                           ;mtouch_sensor.c: 554: sensor->rawSample = result;
  7436                           
  7437                           ; BSR set to: 0
  7438  011EB2  0100               	movlb	0	; () banked
  7439  011EB4  EE20 F006          	lfsr	2,6
  7440  011EB8  51B6               	movf	Sensor_RawSample_Update@sensor& (0+255),w,b
  7441  011EBA  26D9               	addwf	fsr2l,f,c
  7442  011EBC  51B7               	movf	(Sensor_RawSample_Update@sensor+1)& (0+255),w,b
  7443  011EBE  22DA               	addwfc	fsr2h,f,c
  7444  011EC0  C0B8  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  7445  011EC4  C0B9  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  7446  011EC8  0012               	return	
  7447  011ECA                     __end_of_Sensor_RawSample_Update:
  7448                           	opt stack 0
  7449                           tosu	equ	0xFFF
  7450                           tosh	equ	0xFFE
  7451                           tosl	equ	0xFFD
  7452                           pclath	equ	0xFFA
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           postdec1	equ	0xFE5
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           postdec2	equ	0xFDD
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function _medianFilter *****************
  7472 ;; Defined at:
  7473 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  sensor          1    wreg     enum E17513
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  sensor          1    6[BANK0 ] enum E17513
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  2    0[BANK0 ] unsigned int 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7489 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7490 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7491 ;;Total ram usage:        7 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    5
  7494 ;; This function calls:
  7495 ;;		Nothing
  7496 ;; This function is called by:
  7497 ;;		_Sensor_RawSample_Update
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text44
  7502  01029C                     __ptext44:
  7503                           	opt stack 0
  7504  01029C                     _medianFilter:
  7505                           	opt stack 20
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;incstack = 0
  7509                           ;medianFilter@sensor stored from wreg
  7510  01029C  0100               	movlb	0	; () banked
  7511  01029E  6FB5               	movwf	medianFilter@sensor& (0+255),b
  7512                           
  7513                           ;mtouch_sensor.c: 561: static uint8_t bufferIndex[5];
  7514                           ;mtouch_sensor.c: 563: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
  7515  0102A0  0100               	movlb	0	; () banked
  7516  0102A2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7517  0102A4  0D02               	mullw	2
  7518  0102A6  0E29               	movlw	low _packet_sample
  7519  0102A8  24F3               	addwf	prodl,w,c
  7520  0102AA  6ED9               	movwf	fsr2l,c
  7521  0102AC  0E00               	movlw	high _packet_sample
  7522  0102AE  20F4               	addwfc	prodh,w,c
  7523  0102B0  6EDA               	movwf	fsr2h,c
  7524  0102B2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7525  0102B4  0D06               	mullw	6
  7526  0102B6  0E60               	movlw	low _sensor_medianBuffer
  7527  0102B8  6FB1               	movwf	??_medianFilter& (0+255),b
  7528  0102BA  0E00               	movlw	high _sensor_medianBuffer
  7529  0102BC  6FB2               	movwf	(??_medianFilter+1)& (0+255),b
  7530  0102BE  50F3               	movf	prodl,w,c
  7531  0102C0  27B1               	addwf	??_medianFilter& (0+255),f,b
  7532  0102C2  50F4               	movf	prodh,w,c
  7533  0102C4  23B2               	addwfc	(??_medianFilter+1)& (0+255),f,b
  7534  0102C6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7535  0102C8  0D01               	mullw	1
  7536  0102CA  0E33               	movlw	low medianFilter@bufferIndex
  7537  0102CC  24F3               	addwf	prodl,w,c
  7538  0102CE  6EE1               	movwf	fsr1l,c
  7539  0102D0  0E00               	movlw	high medianFilter@bufferIndex
  7540  0102D2  20F4               	addwfc	prodh,w,c
  7541  0102D4  6EE2               	movwf	fsr1h,c
  7542  0102D6  CFE7 F0B3          	movff	indf1,??_medianFilter+2
  7543  0102DA  0E01               	movlw	1
  7544  0102DC  26E7               	addwf	indf1,f,c
  7545  0102DE  51B3               	movf	(??_medianFilter+2)& (0+255),w,b
  7546  0102E0  0D02               	mullw	2
  7547  0102E2  50F3               	movf	prodl,w,c
  7548  0102E4  25B1               	addwf	??_medianFilter& (0+255),w,b
  7549  0102E6  6EE1               	movwf	fsr1l,c
  7550  0102E8  50F4               	movf	prodh,w,c
  7551  0102EA  21B2               	addwfc	(??_medianFilter+1)& (0+255),w,b
  7552  0102EC  6EE2               	movwf	fsr1h,c
  7553  0102EE  CFDE FFE6          	movff	postinc2,postinc1
  7554  0102F2  CFDD FFE5          	movff	postdec2,postdec1
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;mtouch_sensor.c: 565: if(bufferIndex[sensor]>=3)
  7558  0102F6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7559  0102F8  0D01               	mullw	1
  7560  0102FA  0E33               	movlw	low medianFilter@bufferIndex
  7561  0102FC  24F3               	addwf	prodl,w,c
  7562  0102FE  6ED9               	movwf	fsr2l,c
  7563  010300  0E00               	movlw	high medianFilter@bufferIndex
  7564  010302  20F4               	addwfc	prodh,w,c
  7565  010304  6EDA               	movwf	fsr2h,c
  7566  010306  0E02               	movlw	2
  7567  010308  64DF               	cpfsgt	indf2,c
  7568  01030A  D00A               	goto	l582
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;mtouch_sensor.c: 566: bufferIndex[sensor] = 0;
  7572  01030C  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7573  01030E  0D01               	mullw	1
  7574  010310  0E33               	movlw	low medianFilter@bufferIndex
  7575  010312  24F3               	addwf	prodl,w,c
  7576  010314  6ED9               	movwf	fsr2l,c
  7577  010316  0E00               	movlw	high medianFilter@bufferIndex
  7578  010318  20F4               	addwfc	prodh,w,c
  7579  01031A  6EDA               	movwf	fsr2h,c
  7580  01031C  0E00               	movlw	0
  7581  01031E  6EDF               	movwf	indf2,c
  7582  010320                     l582:
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;mtouch_sensor.c: 568: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
  7586                           
  7587                           ; BSR set to: 0
  7588  010320  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7589  010322  0D06               	mullw	6
  7590  010324  0E02               	movlw	2
  7591  010326  26F3               	addwf	prodl,f,c
  7592  010328  0E00               	movlw	0
  7593  01032A  22F4               	addwfc	prodh,f,c
  7594  01032C  0E60               	movlw	low _sensor_medianBuffer
  7595  01032E  24F3               	addwf	prodl,w,c
  7596  010330  6ED9               	movwf	fsr2l,c
  7597  010332  0E00               	movlw	high _sensor_medianBuffer
  7598  010334  20F4               	addwfc	prodh,w,c
  7599  010336  6EDA               	movwf	fsr2h,c
  7600  010338  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7601  01033A  0D06               	mullw	6
  7602  01033C  0E60               	movlw	low _sensor_medianBuffer
  7603  01033E  24F3               	addwf	prodl,w,c
  7604  010340  6EE1               	movwf	fsr1l,c
  7605  010342  0E00               	movlw	high _sensor_medianBuffer
  7606  010344  20F4               	addwfc	prodh,w,c
  7607  010346  6EE2               	movwf	fsr1h,c
  7608  010348  50DE               	movf	postinc2,w,c
  7609  01034A  5CE6               	subwf	postinc1,w,c
  7610  01034C  50DE               	movf	postinc2,w,c
  7611  01034E  58E6               	subwfb	postinc1,w,c
  7612  010350  A0D8               	btfss	status,0,c
  7613  010352  D067               	goto	l583
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;mtouch_sensor.c: 569: {
  7617                           ;mtouch_sensor.c: 570: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  7618  010354  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7619  010356  0D06               	mullw	6
  7620  010358  0E04               	movlw	4
  7621  01035A  26F3               	addwf	prodl,f,c
  7622  01035C  0E00               	movlw	0
  7623  01035E  22F4               	addwfc	prodh,f,c
  7624  010360  0E60               	movlw	low _sensor_medianBuffer
  7625  010362  24F3               	addwf	prodl,w,c
  7626  010364  6ED9               	movwf	fsr2l,c
  7627  010366  0E00               	movlw	high _sensor_medianBuffer
  7628  010368  20F4               	addwfc	prodh,w,c
  7629  01036A  6EDA               	movwf	fsr2h,c
  7630  01036C  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7631  01036E  0D06               	mullw	6
  7632  010370  0E02               	movlw	2
  7633  010372  26F3               	addwf	prodl,f,c
  7634  010374  0E00               	movlw	0
  7635  010376  22F4               	addwfc	prodh,f,c
  7636  010378  0E60               	movlw	low _sensor_medianBuffer
  7637  01037A  24F3               	addwf	prodl,w,c
  7638  01037C  6EE1               	movwf	fsr1l,c
  7639  01037E  0E00               	movlw	high _sensor_medianBuffer
  7640  010380  20F4               	addwfc	prodh,w,c
  7641  010382  6EE2               	movwf	fsr1h,c
  7642  010384  50DE               	movf	postinc2,w,c
  7643  010386  5CE6               	subwf	postinc1,w,c
  7644  010388  50DE               	movf	postinc2,w,c
  7645  01038A  58E6               	subwfb	postinc1,w,c
  7646  01038C  A0D8               	btfss	status,0,c
  7647  01038E  D011               	goto	l584
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;mtouch_sensor.c: 571: return sensor_medianBuffer[sensor][1];
  7651  010390  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7652  010392  0D06               	mullw	6
  7653  010394  0E02               	movlw	2
  7654  010396  26F3               	addwf	prodl,f,c
  7655  010398  0E00               	movlw	0
  7656  01039A  22F4               	addwfc	prodh,f,c
  7657  01039C  0E60               	movlw	low _sensor_medianBuffer
  7658  01039E  24F3               	addwf	prodl,w,c
  7659  0103A0  6ED9               	movwf	fsr2l,c
  7660  0103A2  0E00               	movlw	high _sensor_medianBuffer
  7661  0103A4  20F4               	addwfc	prodh,w,c
  7662  0103A6  6EDA               	movwf	fsr2h,c
  7663  0103A8  CFDE F0AF          	movff	postinc2,?_medianFilter
  7664  0103AC  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ; BSR set to: 0
  7669  0103B0  0012               	return	
  7670  0103B2                     l584:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;mtouch_sensor.c: 572: else
  7674                           ;mtouch_sensor.c: 573: {
  7675                           ;mtouch_sensor.c: 574: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  7676                           
  7677                           ; BSR set to: 0
  7678  0103B2  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7679  0103B4  0D06               	mullw	6
  7680  0103B6  0E04               	movlw	4
  7681  0103B8  26F3               	addwf	prodl,f,c
  7682  0103BA  0E00               	movlw	0
  7683  0103BC  22F4               	addwfc	prodh,f,c
  7684  0103BE  0E60               	movlw	low _sensor_medianBuffer
  7685  0103C0  24F3               	addwf	prodl,w,c
  7686  0103C2  6ED9               	movwf	fsr2l,c
  7687  0103C4  0E00               	movlw	high _sensor_medianBuffer
  7688  0103C6  20F4               	addwfc	prodh,w,c
  7689  0103C8  6EDA               	movwf	fsr2h,c
  7690  0103CA  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7691  0103CC  0D06               	mullw	6
  7692  0103CE  0E60               	movlw	low _sensor_medianBuffer
  7693  0103D0  24F3               	addwf	prodl,w,c
  7694  0103D2  6EE1               	movwf	fsr1l,c
  7695  0103D4  0E00               	movlw	high _sensor_medianBuffer
  7696  0103D6  20F4               	addwfc	prodh,w,c
  7697  0103D8  6EE2               	movwf	fsr1h,c
  7698  0103DA  50DE               	movf	postinc2,w,c
  7699  0103DC  5CE6               	subwf	postinc1,w,c
  7700  0103DE  50DE               	movf	postinc2,w,c
  7701  0103E0  58E6               	subwfb	postinc1,w,c
  7702  0103E2  A0D8               	btfss	status,0,c
  7703  0103E4  D011               	goto	l587
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;mtouch_sensor.c: 575: return sensor_medianBuffer[sensor][2];
  7707  0103E6  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7708  0103E8  0D06               	mullw	6
  7709  0103EA  0E04               	movlw	4
  7710  0103EC  26F3               	addwf	prodl,f,c
  7711  0103EE  0E00               	movlw	0
  7712  0103F0  22F4               	addwfc	prodh,f,c
  7713  0103F2  0E60               	movlw	low _sensor_medianBuffer
  7714  0103F4  24F3               	addwf	prodl,w,c
  7715  0103F6  6ED9               	movwf	fsr2l,c
  7716  0103F8  0E00               	movlw	high _sensor_medianBuffer
  7717  0103FA  20F4               	addwfc	prodh,w,c
  7718  0103FC  6EDA               	movwf	fsr2h,c
  7719  0103FE  CFDE F0AF          	movff	postinc2,?_medianFilter
  7720  010402  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7721                           
  7722                           ; BSR set to: 0
  7723                           
  7724                           ; BSR set to: 0
  7725  010406  0012               	return	
  7726  010408                     l587:
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;mtouch_sensor.c: 576: else
  7730                           ;mtouch_sensor.c: 577: return sensor_medianBuffer[sensor][0];
  7731                           
  7732                           ; BSR set to: 0
  7733  010408  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7734  01040A  0D06               	mullw	6
  7735  01040C  0E60               	movlw	low _sensor_medianBuffer
  7736  01040E  24F3               	addwf	prodl,w,c
  7737  010410  6ED9               	movwf	fsr2l,c
  7738  010412  0E00               	movlw	high _sensor_medianBuffer
  7739  010414  20F4               	addwfc	prodh,w,c
  7740  010416  6EDA               	movwf	fsr2h,c
  7741  010418  CFDE F0AF          	movff	postinc2,?_medianFilter
  7742  01041C  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;mtouch_sensor.c: 578: }
  7746                           ;mtouch_sensor.c: 580: }
  7747                           
  7748                           ; BSR set to: 0
  7749                           
  7750                           ; BSR set to: 0
  7751  010420  0012               	return	
  7752  010422                     l583:
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;mtouch_sensor.c: 581: else
  7756                           ;mtouch_sensor.c: 582: {
  7757                           ;mtouch_sensor.c: 583: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  7758                           
  7759                           ; BSR set to: 0
  7760  010422  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7761  010424  0D06               	mullw	6
  7762  010426  0E04               	movlw	4
  7763  010428  26F3               	addwf	prodl,f,c
  7764  01042A  0E00               	movlw	0
  7765  01042C  22F4               	addwfc	prodh,f,c
  7766  01042E  0E60               	movlw	low _sensor_medianBuffer
  7767  010430  24F3               	addwf	prodl,w,c
  7768  010432  6ED9               	movwf	fsr2l,c
  7769  010434  0E00               	movlw	high _sensor_medianBuffer
  7770  010436  20F4               	addwfc	prodh,w,c
  7771  010438  6EDA               	movwf	fsr2h,c
  7772  01043A  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7773  01043C  0D06               	mullw	6
  7774  01043E  0E60               	movlw	low _sensor_medianBuffer
  7775  010440  24F3               	addwf	prodl,w,c
  7776  010442  6EE1               	movwf	fsr1l,c
  7777  010444  0E00               	movlw	high _sensor_medianBuffer
  7778  010446  20F4               	addwfc	prodh,w,c
  7779  010448  6EE2               	movwf	fsr1h,c
  7780  01044A  50DE               	movf	postinc2,w,c
  7781  01044C  5CE6               	subwf	postinc1,w,c
  7782  01044E  50DE               	movf	postinc2,w,c
  7783  010450  58E6               	subwfb	postinc1,w,c
  7784  010452  A0D8               	btfss	status,0,c
  7785  010454  D00D               	goto	l590
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;mtouch_sensor.c: 584: return sensor_medianBuffer[sensor][0];
  7789  010456  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7790  010458  0D06               	mullw	6
  7791  01045A  0E60               	movlw	low _sensor_medianBuffer
  7792  01045C  24F3               	addwf	prodl,w,c
  7793  01045E  6ED9               	movwf	fsr2l,c
  7794  010460  0E00               	movlw	high _sensor_medianBuffer
  7795  010462  20F4               	addwfc	prodh,w,c
  7796  010464  6EDA               	movwf	fsr2h,c
  7797  010466  CFDE F0AF          	movff	postinc2,?_medianFilter
  7798  01046A  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7799                           
  7800                           ; BSR set to: 0
  7801                           
  7802                           ; BSR set to: 0
  7803  01046E  0012               	return	
  7804  010470                     l590:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;mtouch_sensor.c: 585: else
  7808                           ;mtouch_sensor.c: 586: {
  7809                           ;mtouch_sensor.c: 587: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  7810                           
  7811                           ; BSR set to: 0
  7812  010470  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7813  010472  0D06               	mullw	6
  7814  010474  0E04               	movlw	4
  7815  010476  26F3               	addwf	prodl,f,c
  7816  010478  0E00               	movlw	0
  7817  01047A  22F4               	addwfc	prodh,f,c
  7818  01047C  0E60               	movlw	low _sensor_medianBuffer
  7819  01047E  24F3               	addwf	prodl,w,c
  7820  010480  6ED9               	movwf	fsr2l,c
  7821  010482  0E00               	movlw	high _sensor_medianBuffer
  7822  010484  20F4               	addwfc	prodh,w,c
  7823  010486  6EDA               	movwf	fsr2h,c
  7824  010488  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7825  01048A  0D06               	mullw	6
  7826  01048C  0E02               	movlw	2
  7827  01048E  26F3               	addwf	prodl,f,c
  7828  010490  0E00               	movlw	0
  7829  010492  22F4               	addwfc	prodh,f,c
  7830  010494  0E60               	movlw	low _sensor_medianBuffer
  7831  010496  24F3               	addwf	prodl,w,c
  7832  010498  6EE1               	movwf	fsr1l,c
  7833  01049A  0E00               	movlw	high _sensor_medianBuffer
  7834  01049C  20F4               	addwfc	prodh,w,c
  7835  01049E  6EE2               	movwf	fsr1h,c
  7836  0104A0  50DE               	movf	postinc2,w,c
  7837  0104A2  5CE6               	subwf	postinc1,w,c
  7838  0104A4  50DE               	movf	postinc2,w,c
  7839  0104A6  58E6               	subwfb	postinc1,w,c
  7840  0104A8  A0D8               	btfss	status,0,c
  7841  0104AA  D011               	goto	l592
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;mtouch_sensor.c: 588: return sensor_medianBuffer[sensor][2];
  7845  0104AC  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7846  0104AE  0D06               	mullw	6
  7847  0104B0  0E04               	movlw	4
  7848  0104B2  26F3               	addwf	prodl,f,c
  7849  0104B4  0E00               	movlw	0
  7850  0104B6  22F4               	addwfc	prodh,f,c
  7851  0104B8  0E60               	movlw	low _sensor_medianBuffer
  7852  0104BA  24F3               	addwf	prodl,w,c
  7853  0104BC  6ED9               	movwf	fsr2l,c
  7854  0104BE  0E00               	movlw	high _sensor_medianBuffer
  7855  0104C0  20F4               	addwfc	prodh,w,c
  7856  0104C2  6EDA               	movwf	fsr2h,c
  7857  0104C4  CFDE F0AF          	movff	postinc2,?_medianFilter
  7858  0104C8  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7859                           
  7860                           ; BSR set to: 0
  7861                           
  7862                           ; BSR set to: 0
  7863  0104CC  0012               	return	
  7864  0104CE                     l592:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;mtouch_sensor.c: 589: else
  7868                           ;mtouch_sensor.c: 590: return sensor_medianBuffer[sensor][1];
  7869                           
  7870                           ; BSR set to: 0
  7871  0104CE  51B5               	movf	medianFilter@sensor& (0+255),w,b
  7872  0104D0  0D06               	mullw	6
  7873  0104D2  0E02               	movlw	2
  7874  0104D4  26F3               	addwf	prodl,f,c
  7875  0104D6  0E00               	movlw	0
  7876  0104D8  22F4               	addwfc	prodh,f,c
  7877  0104DA  0E60               	movlw	low _sensor_medianBuffer
  7878  0104DC  24F3               	addwf	prodl,w,c
  7879  0104DE  6ED9               	movwf	fsr2l,c
  7880  0104E0  0E00               	movlw	high _sensor_medianBuffer
  7881  0104E2  20F4               	addwfc	prodh,w,c
  7882  0104E4  6EDA               	movwf	fsr2h,c
  7883  0104E6  CFDE F0AF          	movff	postinc2,?_medianFilter
  7884  0104EA  CFDD F0B0          	movff	postdec2,?_medianFilter+1
  7885                           
  7886                           ; BSR set to: 0
  7887                           
  7888                           ; BSR set to: 0
  7889                           
  7890                           ; BSR set to: 0
  7891  0104EE  0012               	return	
  7892  0104F0                     __end_of_medianFilter:
  7893                           	opt stack 0
  7894                           tosu	equ	0xFFF
  7895                           tosh	equ	0xFFE
  7896                           tosl	equ	0xFFD
  7897                           pclath	equ	0xFFA
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           postinc0	equ	0xFEE
  7906                           wreg	equ	0xFE8
  7907                           indf1	equ	0xFE7
  7908                           postinc1	equ	0xFE6
  7909                           postdec1	equ	0xFE5
  7910                           fsr1h	equ	0xFE2
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function _Sensor_DefaultCallback *****************
  7920 ;; Defined at:
  7921 ;;		line 691 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  sensor          1    wreg     enum E17513
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  sensor          1    0[COMRAM] enum E17513
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;Total ram usage:        0 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    5
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_Sensor_postAcquisitionProcess
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text45
  7950  01276A                     __ptext45:
  7951                           	opt stack 0
  7952  01276A                     _Sensor_DefaultCallback:
  7953                           	opt stack 21
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;incstack = 0
  7957  01276A  0012               	return		;funcret
  7958  01276C                     __end_of_Sensor_DefaultCallback:
  7959                           	opt stack 0
  7960                           tosu	equ	0xFFF
  7961                           tosh	equ	0xFFE
  7962                           tosl	equ	0xFFD
  7963                           pclath	equ	0xFFA
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           postinc0	equ	0xFEE
  7972                           wreg	equ	0xFE8
  7973                           indf1	equ	0xFE7
  7974                           postinc1	equ	0xFE6
  7975                           postdec1	equ	0xFE5
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           fsr2h	equ	0xFDA
  7982                           fsr2l	equ	0xFD9
  7983                           status	equ	0xFD8
  7984                           
  7985 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
  7986 ;; Defined at:
  7987 ;;		line 615 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  maxVariance     2   13[BANK0 ] unsigned int 
  7992 ;;  variance        2   11[BANK0 ] unsigned int 
  7993 ;;  frequencyInd    1   17[BANK0 ] unsigned char 
  7994 ;;  sensor          1   16[BANK0 ] enum E17513
  7995 ;;  selectedFreq    1   15[BANK0 ] unsigned char 
  7996 ;;  newfrequency    1   10[BANK0 ] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8007 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8008 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8009 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8010 ;;Total ram usage:       14 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    6
  8013 ;; This function calls:
  8014 ;;		_abs
  8015 ;; This function is called by:
  8016 ;;		_Sensor_FrequencyHopping
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           	psect	text46
  8021  01068E                     __ptext46:
  8022                           	opt stack 0
  8023  01068E                     _Sensor_FrequencyHopping_Autotune_Process:
  8024                           	opt stack 21
  8025                           
  8026                           ;mtouch_sensor.c: 617: enum mtouch_sensor_names sensor;
  8027                           ;mtouch_sensor.c: 618: uint8_t frequencyIndex;
  8028                           ;mtouch_sensor.c: 619: uint8_t newfrequencyFound,selectedFrequency;
  8029                           ;mtouch_sensor.c: 620: uint16_t variance,maxVariance;
  8030                           ;mtouch_sensor.c: 623: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
  8031                           ;mtouch_sensor.c: 625: maxVariance = 0;
  8032                           
  8033                           ;incstack = 0
  8034  01068E  0E00               	movlw	0
  8035  010690  0100               	movlb	0	; () banked
  8036  010692  6FBD               	movwf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),b
  8037  010694  0E00               	movlw	0
  8038  010696  6FBC               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),b
  8039                           
  8040                           ;mtouch_sensor.c: 627: for(sensor = 0; sensor < 5; sensor++)
  8041  010698  0E00               	movlw	0
  8042  01069A  6FBF               	movwf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8043  01069C                     l4959:
  8044                           
  8045                           ; BSR set to: 0
  8046  01069C  0E04               	movlw	4
  8047  01069E  65BF               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),b
  8048  0106A0  D001               	goto	l603
  8049  0106A2  D03F               	goto	u5770
  8050  0106A4                     l603:
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;mtouch_sensor.c: 628: {
  8054                           ;mtouch_sensor.c: 629: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
  8055                           
  8056                           ; BSR set to: 0
  8057  0106A4  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8058  0106A6  0D02               	mullw	2
  8059  0106A8  0E29               	movlw	low _packet_sample
  8060  0106AA  24F3               	addwf	prodl,w,c
  8061  0106AC  6ED9               	movwf	fsr2l,c
  8062  0106AE  0E00               	movlw	high _packet_sample
  8063  0106B0  20F4               	addwfc	prodh,w,c
  8064  0106B2  6EDA               	movwf	fsr2h,c
  8065  0106B4  CFDE F0B3          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process
  8066  0106B8  CFDD F0B4          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+1
  8067  0106BC  51BF               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),w,b
  8068  0106BE  0D06               	mullw	6
  8069  0106C0  0E60               	movlw	low _sensor_medianBuffer
  8070  0106C2  6FB5               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),b
  8071  0106C4  0E00               	movlw	high _sensor_medianBuffer
  8072  0106C6  6FB6               	movwf	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),b
  8073  0106C8  50F3               	movf	prodl,w,c
  8074  0106CA  27B5               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),f,b
  8075  0106CC  50F4               	movf	prodh,w,c
  8076  0106CE  23B6               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),f,b
  8077  0106D0  5181               	movf	_freq_index& (0+255),w,b
  8078  0106D2  0D02               	mullw	2
  8079  0106D4  50F3               	movf	prodl,w,c
  8080  0106D6  25B5               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+2)& (0+255),w,b
  8081  0106D8  6ED9               	movwf	fsr2l,c
  8082  0106DA  50F4               	movf	prodh,w,c
  8083  0106DC  21B6               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+3)& (0+255),w,b
  8084  0106DE  6EDA               	movwf	fsr2h,c
  8085  0106E0  CFDE F0B7          	movff	postinc2,??_Sensor_FrequencyHopping_Autotune_Process+4
  8086  0106E4  CFDD F0B8          	movff	postdec2,??_Sensor_FrequencyHopping_Autotune_Process+5
  8087  0106E8  1FB7               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8088  0106EA  1FB8               	comf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8089  0106EC  4BB7               	infsnz	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),f,b
  8090  0106EE  2BB8               	incf	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),f,b
  8091  0106F0  51B3               	movf	??_Sensor_FrequencyHopping_Autotune_Process& (0+255),w,b
  8092  0106F2  25B7               	addwf	(??_Sensor_FrequencyHopping_Autotune_Process+4)& (0+255),w,b
  8093  0106F4  6FAF               	movwf	abs@a& (0+255),b
  8094  0106F6  51B4               	movf	(??_Sensor_FrequencyHopping_Autotune_Process+1)& (0+255),w,b
  8095  0106F8  21B8               	addwfc	(??_Sensor_FrequencyHopping_Autotune_Process+5)& (0+255),w,b
  8096  0106FA  6FB0               	movwf	(abs@a+1)& (0+255),b
  8097  0106FC  ECDD  F091         	call	_abs	;wreg free
  8098  010700  C0AF  F0BA         	movff	?_abs,Sensor_FrequencyHopping_Autotune_Process@variance
  8099  010704  C0B0  F0BB         	movff	?_abs+1,Sensor_FrequencyHopping_Autotune_Process@variance+1
  8100                           
  8101                           ;mtouch_sensor.c: 630: if(variance > maxVariance)
  8102  010708  0100               	movlb	0	; () banked
  8103  01070A  51BA               	movf	Sensor_FrequencyHopping_Autotune_Process@variance& (0+255),w,b
  8104  01070C  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8105  01070E  51BB               	movf	(Sensor_FrequencyHopping_Autotune_Process@variance+1)& (0+255),w,b
  8106  010710  59BD               	subwfb	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8107  010712  B0D8               	btfsc	status,0,c
  8108  010714  D004               	goto	l605
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;mtouch_sensor.c: 631: maxVariance = variance;
  8112  010716  C0BA  F0BC         	movff	Sensor_FrequencyHopping_Autotune_Process@variance,Sensor_FrequencyHopping_Autotun
      +                          e_Process@maxVariance
  8113  01071A  C0BB  F0BD         	movff	Sensor_FrequencyHopping_Autotune_Process@variance+1,Sensor_FrequencyHopping_Autot
      +                          une_Process@maxVariance+1
  8114  01071E                     l605:
  8115                           
  8116                           ; BSR set to: 0
  8117                           
  8118                           ; BSR set to: 0
  8119  01071E  2BBF               	incf	Sensor_FrequencyHopping_Autotune_Process@sensor& (0+255),f,b
  8120  010720  D7BD               	goto	l4959
  8121  010722                     u5770:
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;mtouch_sensor.c: 632: }
  8125                           ;mtouch_sensor.c: 634: if(maxVariance > (mtouch_sensor_packetsample_t)100)
  8126                           
  8127                           ; BSR set to: 0
  8128  010722  51BD               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8129  010724  E104               	bnz	u5780
  8130  010726  0E65               	movlw	101
  8131  010728  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8132  01072A  A0D8               	btfss	status,0,c
  8133  01072C  D05A               	goto	l606
  8134  01072E                     u5780:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;mtouch_sensor.c: 635: {
  8138                           ;mtouch_sensor.c: 636: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
  8139  01072E  5181               	movf	_freq_index& (0+255),w,b
  8140  010730  0D01               	mullw	1
  8141  010732  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8142  010734  24F3               	addwf	prodl,w,c
  8143  010736  6ED9               	movwf	fsr2l,c
  8144  010738  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8145  01073A  20F4               	addwfc	prodh,w,c
  8146  01073C  6EDA               	movwf	fsr2h,c
  8147  01073E  2ADF               	incf	indf2,f,c
  8148  010740  0E05               	movlw	5
  8149  010742  64DF               	cpfsgt	indf2,c
  8150  010744  0012               	return	
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;mtouch_sensor.c: 637: {
  8154                           ;mtouch_sensor.c: 638: newfrequencyFound = 0;
  8155  010746  0E00               	movlw	0
  8156  010748  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;mtouch_sensor.c: 639: selectedFrequency = freq_hop[freq_index];
  8160  01074A  5181               	movf	_freq_index& (0+255),w,b
  8161  01074C  0D01               	mullw	1
  8162  01074E  0EE4               	movlw	low _freq_hop
  8163  010750  24F3               	addwf	prodl,w,c
  8164  010752  6ED9               	movwf	fsr2l,c
  8165  010754  0E00               	movlw	high _freq_hop
  8166  010756  20F4               	addwfc	prodh,w,c
  8167  010758  6EDA               	movwf	fsr2h,c
  8168  01075A  50DF               	movf	indf2,w,c
  8169  01075C  6FBE               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8170  01075E                     
  8171                           ; BSR set to: 0
  8172                           ;mtouch_sensor.c: 641: {
  8173                           ;mtouch_sensor.c: 642: if(selectedFrequency>(uint8_t)((mtouch_sensor_time_t)0 << (uint8_
      +                          t)3))
  8174                           
  8175                           ; BSR set to: 0
  8176  01075E  51BE               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8177  010760  B4D8               	btfsc	status,2,c
  8178  010762  D002               	goto	l609
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;mtouch_sensor.c: 643: selectedFrequency--;
  8182  010764  07BE               	decf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),f,b
  8183  010766  D002               	goto	l610
  8184  010768                     l609:
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;mtouch_sensor.c: 644: else
  8188                           ;mtouch_sensor.c: 645: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)3);
  8189                           
  8190                           ; BSR set to: 0
  8191  010768  0E78               	movlw	120
  8192  01076A  6FBE               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),b
  8193  01076C                     l610:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;mtouch_sensor.c: 646: newfrequencyFound = 1;
  8197  01076C  0E01               	movlw	1
  8198  01076E  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8199                           
  8200                           ;mtouch_sensor.c: 648: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8201  010770  0E00               	movlw	0
  8202  010772  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8203  010774                     l4987:
  8204                           
  8205                           ; BSR set to: 0
  8206  010774  0E02               	movlw	2
  8207  010776  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8208  010778  D001               	goto	l611
  8209  01077A  D014               	goto	u5840
  8210  01077C                     l611:
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;mtouch_sensor.c: 649: {
  8214                           ;mtouch_sensor.c: 650: if(frequencyIndex == freq_index)
  8215                           
  8216                           ; BSR set to: 0
  8217  01077C  5181               	movf	_freq_index& (0+255),w,b
  8218  01077E  19C0               	xorwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8219  010780  B4D8               	btfsc	status,2,c
  8220  010782  D00E               	goto	l615
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;mtouch_sensor.c: 654: else if(selectedFrequency==freq_hop[frequencyIndex])
  8224                           
  8225                           ; BSR set to: 0
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;mtouch_sensor.c: 651: {
  8229                           ;mtouch_sensor.c: 653: }
  8230  010784  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8231  010786  0D01               	mullw	1
  8232  010788  0EE4               	movlw	low _freq_hop
  8233  01078A  24F3               	addwf	prodl,w,c
  8234  01078C  6ED9               	movwf	fsr2l,c
  8235  01078E  0E00               	movlw	high _freq_hop
  8236  010790  20F4               	addwfc	prodh,w,c
  8237  010792  6EDA               	movwf	fsr2h,c
  8238  010794  51BE               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency& (0+255),w,b
  8239  010796  18DE               	xorwf	postinc2,w,c
  8240  010798  A4D8               	btfss	status,2,c
  8241  01079A  D002               	goto	l615
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;mtouch_sensor.c: 655: {
  8245                           ;mtouch_sensor.c: 656: newfrequencyFound = 0;
  8246  01079C  0E00               	movlw	0
  8247  01079E  6FB9               	movwf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),b
  8248  0107A0                     l615:
  8249                           
  8250                           ; BSR set to: 0
  8251                           
  8252                           ; BSR set to: 0
  8253                           
  8254                           ; BSR set to: 0
  8255                           
  8256                           ;mtouch_sensor.c: 658: else
  8257                           ;mtouch_sensor.c: 659: {
  8258                           
  8259                           ; BSR set to: 0
  8260  0107A0  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8261  0107A2  D7E8               	goto	l4987
  8262  0107A4                     u5840:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;mtouch_sensor.c: 661: }
  8266                           ;mtouch_sensor.c: 662: }
  8267                           ;mtouch_sensor.c: 664: }while(!newfrequencyFound);
  8268                           
  8269                           ; BSR set to: 0
  8270  0107A4  51B9               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound& (0+255),w,b
  8271  0107A6  B4D8               	btfsc	status,2,c
  8272  0107A8  D7DA               	goto	l608
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;mtouch_sensor.c: 666: freq_hop[freq_index] = selectedFrequency;
  8276                           
  8277                           ; BSR set to: 0
  8278  0107AA  5181               	movf	_freq_index& (0+255),w,b
  8279  0107AC  0D01               	mullw	1
  8280  0107AE  0EE4               	movlw	low _freq_hop
  8281  0107B0  24F3               	addwf	prodl,w,c
  8282  0107B2  6ED9               	movwf	fsr2l,c
  8283  0107B4  0E00               	movlw	high _freq_hop
  8284  0107B6  20F4               	addwfc	prodh,w,c
  8285  0107B8  6EDA               	movwf	fsr2h,c
  8286  0107BA  C0BE  FFDF         	movff	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,indf2
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;mtouch_sensor.c: 668: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
  8290  0107BE  0E00               	movlw	0
  8291  0107C0  6FC0               	movwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8292  0107C2                     l5009:
  8293                           
  8294                           ; BSR set to: 0
  8295  0107C2  0E02               	movlw	2
  8296  0107C4  65C0               	cpfsgt	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),b
  8297  0107C6  D001               	goto	l618
  8298  0107C8  0012               	return	
  8299  0107CA                     l618:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;mtouch_sensor.c: 669: {
  8303                           ;mtouch_sensor.c: 670: varianceOverLimitCounter[frequencyIndex] = 0;
  8304                           
  8305                           ; BSR set to: 0
  8306  0107CA  51C0               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),w,b
  8307  0107CC  0D01               	mullw	1
  8308  0107CE  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8309  0107D0  24F3               	addwf	prodl,w,c
  8310  0107D2  6ED9               	movwf	fsr2l,c
  8311  0107D4  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8312  0107D6  20F4               	addwfc	prodh,w,c
  8313  0107D8  6EDA               	movwf	fsr2h,c
  8314  0107DA  0E00               	movlw	0
  8315  0107DC  6EDF               	movwf	indf2,c
  8316                           
  8317                           ; BSR set to: 0
  8318  0107DE  2BC0               	incf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex& (0+255),f,b
  8319  0107E0  D7F0               	goto	l5009
  8320  0107E2                     l606:
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;mtouch_sensor.c: 674: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
  8324                           
  8325                           ; BSR set to: 0
  8326  0107E2  51BD               	movf	(Sensor_FrequencyHopping_Autotune_Process@maxVariance+1)& (0+255),w,b
  8327  0107E4  E119               	bnz	l624
  8328  0107E6  0E32               	movlw	50
  8329  0107E8  5DBC               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance& (0+255),w,b
  8330  0107EA  B0D8               	btfsc	status,0,c
  8331  0107EC  0012               	return	
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;mtouch_sensor.c: 675: {
  8335                           ;mtouch_sensor.c: 677: if(varianceOverLimitCounter[freq_index] > 0)
  8336  0107EE  5181               	movf	_freq_index& (0+255),w,b
  8337  0107F0  0D01               	mullw	1
  8338  0107F2  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8339  0107F4  24F3               	addwf	prodl,w,c
  8340  0107F6  6ED9               	movwf	fsr2l,c
  8341  0107F8  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8342  0107FA  20F4               	addwfc	prodh,w,c
  8343  0107FC  6EDA               	movwf	fsr2h,c
  8344  0107FE  50DF               	movf	indf2,w,c
  8345  010800  B4D8               	btfsc	status,2,c
  8346  010802  0012               	return	
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;mtouch_sensor.c: 678: varianceOverLimitCounter[freq_index]--;
  8350  010804  5181               	movf	_freq_index& (0+255),w,b
  8351  010806  0D01               	mullw	1
  8352  010808  0E7E               	movlw	low Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8353  01080A  24F3               	addwf	prodl,w,c
  8354  01080C  6ED9               	movwf	fsr2l,c
  8355  01080E  0E00               	movlw	high Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter
  8356  010810  20F4               	addwfc	prodh,w,c
  8357  010812  6EDA               	movwf	fsr2h,c
  8358  010814  06DF               	decf	indf2,f,c
  8359                           
  8360                           ; BSR set to: 0
  8361                           
  8362                           ;mtouch_sensor.c: 680: else
  8363                           ;mtouch_sensor.c: 681: {
  8364                           
  8365                           ; BSR set to: 0
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;mtouch_sensor.c: 679: }
  8369  010816  0012               	return	
  8370  010818                     l624:
  8371                           
  8372                           ; BSR set to: 0
  8373  010818  0012               	return		;funcret
  8374  01081A                     __end_of_Sensor_FrequencyHopping_Autotune_Process:
  8375                           	opt stack 0
  8376                           tosu	equ	0xFFF
  8377                           tosh	equ	0xFFE
  8378                           tosl	equ	0xFFD
  8379                           pclath	equ	0xFFA
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           intcon	equ	0xFF2
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           indf1	equ	0xFE7
  8390                           postinc1	equ	0xFE6
  8391                           postdec1	equ	0xFE5
  8392                           fsr1h	equ	0xFE2
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _abs *****************
  8402 ;; Defined at:
  8403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  a               2    0[BANK0 ] int 
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  2    0[BANK0 ] int 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2, status,0
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8417 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    5
  8424 ;; This function calls:
  8425 ;;		Nothing
  8426 ;; This function is called by:
  8427 ;;		_Sensor_postAcquisitionProcess
  8428 ;;		_Sensor_FrequencyHopping_Autotune_Process
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text47
  8433  0123BA                     __ptext47:
  8434                           	opt stack 0
  8435  0123BA                     _abs:
  8436                           	opt stack 21
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;incstack = 0
  8440  0123BA  0100               	movlb	0	; () banked
  8441  0123BC  AFB0               	btfss	(abs@a+1)& (0+255),7,b
  8442  0123BE  D00D               	goto	l1127
  8443                           
  8444                           ; BSR set to: 0
  8445  0123C0  C0AF  F0B1         	movff	abs@a,??_abs
  8446  0123C4  C0B0  F0B2         	movff	abs@a+1,??_abs+1
  8447  0123C8  1FB1               	comf	??_abs& (0+255),f,b
  8448  0123CA  1FB2               	comf	(??_abs+1)& (0+255),f,b
  8449  0123CC  4BB1               	infsnz	??_abs& (0+255),f,b
  8450  0123CE  2BB2               	incf	(??_abs+1)& (0+255),f,b
  8451  0123D0  C0B1  F0AF         	movff	??_abs,?_abs
  8452  0123D4  C0B2  F0B0         	movff	??_abs+1,?_abs+1
  8453  0123D8  0012               	return	
  8454  0123DA                     l1127:
  8455                           
  8456                           ; BSR set to: 0
  8457  0123DA  C0AF  F0AF         	movff	abs@a,?_abs
  8458  0123DE  C0B0  F0B0         	movff	abs@a+1,?_abs+1
  8459                           
  8460                           ; BSR set to: 0
  8461  0123E2  0012               	return		;funcret
  8462  0123E4                     __end_of_abs:
  8463                           	opt stack 0
  8464                           tosu	equ	0xFFF
  8465                           tosh	equ	0xFFE
  8466                           tosl	equ	0xFFD
  8467                           pclath	equ	0xFFA
  8468                           tblptru	equ	0xFF8
  8469                           tblptrh	equ	0xFF7
  8470                           tblptrl	equ	0xFF6
  8471                           tablat	equ	0xFF5
  8472                           prodh	equ	0xFF4
  8473                           prodl	equ	0xFF3
  8474                           intcon	equ	0xFF2
  8475                           postinc0	equ	0xFEE
  8476                           wreg	equ	0xFE8
  8477                           indf1	equ	0xFE7
  8478                           postinc1	equ	0xFE6
  8479                           postdec1	equ	0xFE5
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  8490 ;; Defined at:
  8491 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;		None
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      unsigned char 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8509 ;;Total ram usage:        0 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    5
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_MTOUCH_Sensor_SampleAll
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text48
  8520  012762                     __ptext48:
  8521                           	opt stack 0
  8522  012762                     _MTOUCH_Sensor_isSampling:
  8523                           	opt stack 23
  8524                           
  8525                           ;mtouch_sensor.c: 840: return sampling_flag;
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;incstack = 0
  8529  012762  503A               	movf	_sampling_flag,w,c
  8530  012764  0012               	return	
  8531  012766                     __end_of_MTOUCH_Sensor_isSampling:
  8532                           	opt stack 0
  8533                           tosu	equ	0xFFF
  8534                           tosh	equ	0xFFE
  8535                           tosl	equ	0xFFD
  8536                           pclath	equ	0xFFA
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           prodh	equ	0xFF4
  8542                           prodl	equ	0xFF3
  8543                           intcon	equ	0xFF2
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           indf1	equ	0xFE7
  8547                           postinc1	equ	0xFE6
  8548                           postdec1	equ	0xFE5
  8549                           fsr1h	equ	0xFE2
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  8559 ;; Defined at:
  8560 ;;		line 227 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  button          1   37[BANK0 ] enum E17454
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      void 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8577 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8578 ;;Total ram usage:        1 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:   11
  8581 ;; This function calls:
  8582 ;;		_Button_Service
  8583 ;; This function is called by:
  8584 ;;		_MTOUCH_Service_Mainloop
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text49
  8589  0125EE                     __ptext49:
  8590                           	opt stack 0
  8591  0125EE                     _MTOUCH_Button_ServiceAll:
  8592                           	opt stack 18
  8593                           
  8594                           ;mtouch_button.c: 229: enum mtouch_button_names button;
  8595                           ;mtouch_button.c: 232: for (button = 0; button < 5; button++)
  8596                           
  8597                           ;incstack = 0
  8598  0125EE  0E00               	movlw	0
  8599  0125F0  0100               	movlb	0	; () banked
  8600  0125F2  6FD4               	movwf	MTOUCH_Button_ServiceAll@button& (0+255),b
  8601  0125F4                     l5395:
  8602                           
  8603                           ; BSR set to: 0
  8604  0125F4  0E04               	movlw	4
  8605  0125F6  65D4               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  8606  0125F8  D001               	goto	l772
  8607  0125FA  0012               	return	
  8608  0125FC                     l772:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;mtouch_button.c: 233: {
  8612                           ;mtouch_button.c: 234: Button_Service(button);
  8613                           
  8614                           ; BSR set to: 0
  8615  0125FC  51D4               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  8616  0125FE  EC34  F08B         	call	_Button_Service
  8617  012602  0100               	movlb	0	; () banked
  8618  012604  2BD4               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  8619  012606  D7F6               	goto	l5395
  8620  012608                     __end_of_MTOUCH_Button_ServiceAll:
  8621                           	opt stack 0
  8622                           tosu	equ	0xFFF
  8623                           tosh	equ	0xFFE
  8624                           tosl	equ	0xFFD
  8625                           pclath	equ	0xFFA
  8626                           tblptru	equ	0xFF8
  8627                           tblptrh	equ	0xFF7
  8628                           tblptrl	equ	0xFF6
  8629                           tablat	equ	0xFF5
  8630                           prodh	equ	0xFF4
  8631                           prodl	equ	0xFF3
  8632                           intcon	equ	0xFF2
  8633                           postinc0	equ	0xFEE
  8634                           wreg	equ	0xFE8
  8635                           indf1	equ	0xFE7
  8636                           postinc1	equ	0xFE6
  8637                           postdec1	equ	0xFE5
  8638                           fsr1h	equ	0xFE2
  8639                           fsr1l	equ	0xFE1
  8640                           indf2	equ	0xFDF
  8641                           postinc2	equ	0xFDE
  8642                           postdec2	equ	0xFDD
  8643                           fsr2h	equ	0xFDA
  8644                           fsr2l	equ	0xFD9
  8645                           status	equ	0xFD8
  8646                           
  8647 ;; *************** function _Button_Service *****************
  8648 ;; Defined at:
  8649 ;;		line 238 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;  name            1    wreg     enum E17454
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  name            1   34[BANK0 ] enum E17454
  8654 ;;  button          2   35[BANK0 ] PTR struct .
  8655 ;;		 -> mtouch_button(85), 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  1    wreg      void 
  8658 ;; Registers used:
  8659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8666 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8668 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8669 ;;Total ram usage:        4 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:   10
  8672 ;; This function calls:
  8673 ;;		_Button_Deviation_Update
  8674 ;;		_Button_Reading_Update
  8675 ;;		_Button_State_Initializing
  8676 ;;		_Button_State_NotPressed
  8677 ;;		_Button_State_Pressed
  8678 ;;		_MTOUCH_Button_Initialize
  8679 ;;		_MTOUCH_Sensor_isCalibrated
  8680 ;;		_MTOUCH_Sensor_wasSampled
  8681 ;; This function is called by:
  8682 ;;		_MTOUCH_Button_ServiceAll
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           	psect	text50
  8687  011668                     __ptext50:
  8688                           	opt stack 0
  8689  011668                     _Button_Service:
  8690                           	opt stack 18
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;incstack = 0
  8694                           ;Button_Service@name stored from wreg
  8695  011668  0100               	movlb	0	; () banked
  8696  01166A  6FD1               	movwf	Button_Service@name& (0+255),b
  8697                           
  8698                           ;mtouch_button.c: 240: mtouch_button_t* button = &mtouch_button[name];
  8699  01166C  0100               	movlb	0	; () banked
  8700  01166E  51D1               	movf	Button_Service@name& (0+255),w,b
  8701  011670  0D11               	mullw	17
  8702  011672  0E40               	movlw	low _mtouch_button
  8703  011674  24F3               	addwf	prodl,w,c
  8704  011676  6FD2               	movwf	Button_Service@button& (0+255),b
  8705  011678  0E01               	movlw	high _mtouch_button
  8706  01167A  20F4               	addwfc	prodh,w,c
  8707  01167C  6FD3               	movwf	(Button_Service@button+1)& (0+255),b
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;mtouch_button.c: 242: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  8711  01167E  EE20 F001          	lfsr	2,1
  8712  011682  51D2               	movf	Button_Service@button& (0+255),w,b
  8713  011684  26D9               	addwf	fsr2l,f,c
  8714  011686  51D3               	movf	(Button_Service@button+1)& (0+255),w,b
  8715  011688  22DA               	addwfc	fsr2h,f,c
  8716  01168A  50DF               	movf	indf2,w,c
  8717  01168C  EC2E  F091         	call	_MTOUCH_Sensor_wasSampled
  8718  011690  0900               	iorlw	0
  8719  011692  B4D8               	btfsc	status,2,c
  8720  011694  0012               	return	
  8721  011696  0100               	movlb	0	; () banked
  8722  011698  EE20 F001          	lfsr	2,1
  8723  01169C  51D2               	movf	Button_Service@button& (0+255),w,b
  8724  01169E  26D9               	addwf	fsr2l,f,c
  8725  0116A0  51D3               	movf	(Button_Service@button+1)& (0+255),w,b
  8726  0116A2  22DA               	addwfc	fsr2h,f,c
  8727  0116A4  50DF               	movf	indf2,w,c
  8728  0116A6  EC48  F091         	call	_MTOUCH_Sensor_isCalibrated
  8729  0116AA  0900               	iorlw	0
  8730  0116AC  B4D8               	btfsc	status,2,c
  8731  0116AE  0012               	return	
  8732                           
  8733                           ;mtouch_button.c: 243: {
  8734                           ;mtouch_button.c: 244: Button_Reading_Update(button);
  8735  0116B0  C0D2  F0B6         	movff	Button_Service@button,Button_Reading_Update@button
  8736  0116B4  C0D3  F0B7         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  8737  0116B8  ECA1  F092         	call	_Button_Reading_Update	;wreg free
  8738                           
  8739                           ;mtouch_button.c: 245: Button_Deviation_Update(button);
  8740  0116BC  C0D2  F0AF         	movff	Button_Service@button,Button_Deviation_Update@button
  8741  0116C0  C0D3  F0B0         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  8742  0116C4  EC54  F088         	call	_Button_Deviation_Update	;wreg free
  8743                           
  8744                           ;mtouch_button.c: 247: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  8745  0116C8  0100               	movlb	0	; () banked
  8746  0116CA  EE20 F002          	lfsr	2,2
  8747  0116CE  51D2               	movf	Button_Service@button& (0+255),w,b
  8748  0116D0  26D9               	addwf	fsr2l,f,c
  8749  0116D2  51D3               	movf	(Button_Service@button+1)& (0+255),w,b
  8750  0116D4  22DA               	addwfc	fsr2h,f,c
  8751  0116D6  0E02               	movlw	2
  8752  0116D8  64DF               	cpfsgt	indf2,c
  8753  0116DA  D007               	goto	l778
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;mtouch_button.c: 248: {
  8757                           ;mtouch_button.c: 249: MTOUCH_Button_Initialize(button->name);
  8758  0116DC  C0D2  FFD9         	movff	Button_Service@button,fsr2l
  8759  0116E0  C0D3  FFDA         	movff	Button_Service@button+1,fsr2h
  8760  0116E4  50DF               	movf	indf2,w,c
  8761  0116E6  EC10  F08D         	call	_MTOUCH_Button_Initialize
  8762  0116EA                     l778:
  8763                           
  8764                           ;mtouch_button.c: 250: }
  8765                           ;mtouch_button.c: 251: Button_StateMachine[button->state](button);
  8766  0116EA  C0D2  F0C9         	movff	Button_Service@button,Button_State_Pressed@button
  8767  0116EE  C0D3  F0CA         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  8768  0116F2  0100               	movlb	0	; () banked
  8769  0116F4  EE20 F002          	lfsr	2,2
  8770  0116F8  51D2               	movf	Button_Service@button& (0+255),w,b
  8771  0116FA  26D9               	addwf	fsr2l,f,c
  8772  0116FC  51D3               	movf	(Button_Service@button+1)& (0+255),w,b
  8773  0116FE  22DA               	addwfc	fsr2h,f,c
  8774  011700  50DF               	movf	indf2,w,c
  8775  011702  6FD0               	movwf	??_Button_Service& (0+255),b
  8776  011704  51D0               	movf	??_Button_Service& (0+255),w,b
  8777  011706  0D03               	mullw	3
  8778  011708  0ED5               	movlw	low _Button_StateMachine
  8779  01170A  24F3               	addwf	prodl,w,c
  8780  01170C  6ED9               	movwf	fsr2l,c
  8781  01170E  0E00               	movlw	high _Button_StateMachine
  8782  011710  20F4               	addwfc	prodh,w,c
  8783  011712  6EDA               	movwf	fsr2h,c
  8784  011714  D801               	call	u6378
  8785  011716  0012               	return	
  8786  011718                     u6378:
  8787  011718  0005               	push	
  8788  01171A  6EFA               	movwf	pclath,c
  8789  01171C  50DE               	movf	postinc2,w,c
  8790  01171E  6EFD               	movwf	tosl,c
  8791  011720  50DE               	movf	postinc2,w,c
  8792  011722  6EFE               	movwf	tosh,c
  8793  011724  50DE               	movf	postinc2,w,c
  8794  011726  6EFF               	movwf	tosu,c
  8795  011728  50FA               	movf	pclath,w,c
  8796  01172A  0012               	return		;indir
  8797  01172C                     __end_of_Button_Service:
  8798                           	opt stack 0
  8799                           tosu	equ	0xFFF
  8800                           tosh	equ	0xFFE
  8801                           tosl	equ	0xFFD
  8802                           pclath	equ	0xFFA
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           indf1	equ	0xFE7
  8813                           postinc1	equ	0xFE6
  8814                           postdec1	equ	0xFE5
  8815                           fsr1h	equ	0xFE2
  8816                           fsr1l	equ	0xFE1
  8817                           indf2	equ	0xFDF
  8818                           postinc2	equ	0xFDE
  8819                           postdec2	equ	0xFDD
  8820                           fsr2h	equ	0xFDA
  8821                           fsr2l	equ	0xFD9
  8822                           status	equ	0xFD8
  8823                           
  8824 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  8825 ;; Defined at:
  8826 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;  sensor          1    wreg     enum E17513
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  sensor          1    0[BANK0 ] enum E17513
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  1    wreg      unsigned char 
  8833 ;; Registers used:
  8834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8844 ;;Total ram usage:        1 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    5
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_MTOUCH_Sensor_SampleAll
  8851 ;;		_Sensor_scheduleNextScan
  8852 ;;		_Button_Service
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text51
  8857  01225C                     __ptext51:
  8858                           	opt stack 0
  8859  01225C                     _MTOUCH_Sensor_wasSampled:
  8860                           	opt stack 22
  8861                           
  8862                           ;incstack = 0
  8863                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8864  01225C  0100               	movlb	0	; () banked
  8865  01225E  6FAF               	movwf	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  8866                           
  8867                           ;mtouch_sensor.c: 822: if(sensor < 5)
  8868  012260  0E05               	movlw	5
  8869  012262  0100               	movlb	0	; () banked
  8870  012264  61AF               	cpfslt	MTOUCH_Sensor_wasSampled@sensor& (0+255),b
  8871  012266  D012               	goto	l687
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
  8875  012268  51AF               	movf	MTOUCH_Sensor_wasSampled@sensor& (0+255),w,b
  8876  01226A  0D09               	mullw	9
  8877  01226C  0E08               	movlw	8
  8878  01226E  26F3               	addwf	prodl,f,c
  8879  012270  0E00               	movlw	0
  8880  012272  22F4               	addwfc	prodh,f,c
  8881  012274  0E82               	movlw	low _mtouch_sensor
  8882  012276  24F3               	addwf	prodl,w,c
  8883  012278  6ED9               	movwf	fsr2l,c
  8884  01227A  0E00               	movlw	high _mtouch_sensor
  8885  01227C  20F4               	addwfc	prodh,w,c
  8886  01227E  6EDA               	movwf	fsr2h,c
  8887  012280  A2DF               	btfss	indf2,1,c
  8888  012282  D002               	goto	u5660
  8889  012284  0E01               	movlw	1
  8890  012286  0012               	return	
  8891  012288                     u5660:
  8892  012288  0E00               	movlw	0
  8893                           
  8894                           ; BSR set to: 0
  8895                           
  8896                           ; BSR set to: 0
  8897  01228A  0012               	return	
  8898  01228C                     l687:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;mtouch_sensor.c: 824: else
  8902                           ;mtouch_sensor.c: 825: return 0;
  8903                           
  8904                           ; BSR set to: 0
  8905  01228C  0E00               	movlw	0
  8906                           
  8907                           ; BSR set to: 0
  8908  01228E  0012               	return	
  8909  012290                     __end_of_MTOUCH_Sensor_wasSampled:
  8910                           	opt stack 0
  8911                           tosu	equ	0xFFF
  8912                           tosh	equ	0xFFE
  8913                           tosl	equ	0xFFD
  8914                           pclath	equ	0xFFA
  8915                           tblptru	equ	0xFF8
  8916                           tblptrh	equ	0xFF7
  8917                           tblptrl	equ	0xFF6
  8918                           tablat	equ	0xFF5
  8919                           prodh	equ	0xFF4
  8920                           prodl	equ	0xFF3
  8921                           intcon	equ	0xFF2
  8922                           postinc0	equ	0xFEE
  8923                           wreg	equ	0xFE8
  8924                           indf1	equ	0xFE7
  8925                           postinc1	equ	0xFE6
  8926                           postdec1	equ	0xFE5
  8927                           fsr1h	equ	0xFE2
  8928                           fsr1l	equ	0xFE1
  8929                           indf2	equ	0xFDF
  8930                           postinc2	equ	0xFDE
  8931                           postdec2	equ	0xFDD
  8932                           fsr2h	equ	0xFDA
  8933                           fsr2l	equ	0xFD9
  8934                           status	equ	0xFD8
  8935                           
  8936 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8937 ;; Defined at:
  8938 ;;		line 772 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  sensor          1    wreg     enum E17513
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  sensor          1    0[BANK0 ] enum E17513
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  1    wreg      unsigned char 
  8945 ;; Registers used:
  8946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8956 ;;Total ram usage:        1 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    5
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_Button_Service
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           	psect	text52
  8967  012290                     __ptext52:
  8968                           	opt stack 0
  8969  012290                     _MTOUCH_Sensor_isCalibrated:
  8970                           	opt stack 22
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;incstack = 0
  8974                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8975  012290  0100               	movlb	0	; () banked
  8976  012292  6FAF               	movwf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  8977                           
  8978                           ;mtouch_sensor.c: 774: if(sensor < 5)
  8979  012294  0E05               	movlw	5
  8980  012296  0100               	movlb	0	; () banked
  8981  012298  61AF               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor& (0+255),b
  8982  01229A  D012               	goto	l665
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;mtouch_sensor.c: 775: return (bool)mtouch_sensor[sensor].calibrated;
  8986  01229C  51AF               	movf	MTOUCH_Sensor_isCalibrated@sensor& (0+255),w,b
  8987  01229E  0D09               	mullw	9
  8988  0122A0  0E08               	movlw	8
  8989  0122A2  26F3               	addwf	prodl,f,c
  8990  0122A4  0E00               	movlw	0
  8991  0122A6  22F4               	addwfc	prodh,f,c
  8992  0122A8  0E82               	movlw	low _mtouch_sensor
  8993  0122AA  24F3               	addwf	prodl,w,c
  8994  0122AC  6ED9               	movwf	fsr2l,c
  8995  0122AE  0E00               	movlw	high _mtouch_sensor
  8996  0122B0  20F4               	addwfc	prodh,w,c
  8997  0122B2  6EDA               	movwf	fsr2h,c
  8998  0122B4  A6DF               	btfss	indf2,3,c
  8999  0122B6  D002               	goto	u5910
  9000  0122B8  0E01               	movlw	1
  9001  0122BA  0012               	return	
  9002  0122BC                     u5910:
  9003  0122BC  0E00               	movlw	0
  9004                           
  9005                           ; BSR set to: 0
  9006                           
  9007                           ; BSR set to: 0
  9008  0122BE  0012               	return	
  9009  0122C0                     l665:
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;mtouch_sensor.c: 776: else
  9013                           ;mtouch_sensor.c: 777: return 0;
  9014                           
  9015                           ; BSR set to: 0
  9016  0122C0  0E00               	movlw	0
  9017                           
  9018                           ; BSR set to: 0
  9019  0122C2  0012               	return	
  9020  0122C4                     __end_of_MTOUCH_Sensor_isCalibrated:
  9021                           	opt stack 0
  9022                           tosu	equ	0xFFF
  9023                           tosh	equ	0xFFE
  9024                           tosl	equ	0xFFD
  9025                           pclath	equ	0xFFA
  9026                           tblptru	equ	0xFF8
  9027                           tblptrh	equ	0xFF7
  9028                           tblptrl	equ	0xFF6
  9029                           tablat	equ	0xFF5
  9030                           prodh	equ	0xFF4
  9031                           prodl	equ	0xFF3
  9032                           intcon	equ	0xFF2
  9033                           postinc0	equ	0xFEE
  9034                           wreg	equ	0xFE8
  9035                           indf1	equ	0xFE7
  9036                           postinc1	equ	0xFE6
  9037                           postdec1	equ	0xFE5
  9038                           fsr1h	equ	0xFE2
  9039                           fsr1l	equ	0xFE1
  9040                           indf2	equ	0xFDF
  9041                           postinc2	equ	0xFDE
  9042                           postdec2	equ	0xFDD
  9043                           fsr2h	equ	0xFDA
  9044                           fsr2l	equ	0xFD9
  9045                           status	equ	0xFD8
  9046                           
  9047 ;; *************** function _Button_State_NotPressed *****************
  9048 ;; Defined at:
  9049 ;;		line 275 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;  button          2   26[BANK0 ] PTR struct .
  9052 ;;		 -> mtouch_button(85), 
  9053 ;; Auto vars:     Size  Location     Type
  9054 ;;		None
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  1    wreg      void 
  9057 ;; Registers used:
  9058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9064 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9066 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9067 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9068 ;;Total ram usage:        5 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    9
  9071 ;; This function calls:
  9072 ;;		_Button_Baseline_Update
  9073 ;;		_Button_Check_AKS_Block
  9074 ;;		_Button_DefaultCallback
  9075 ;;		_MTOUCH_Button_Initialize
  9076 ;;		_mTouchCallback
  9077 ;; This function is called by:
  9078 ;;		_Button_Service
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           	psect	text53
  9083  0104F0                     __ptext53:
  9084                           	opt stack 0
  9085  0104F0                     _Button_State_NotPressed:
  9086                           	opt stack 18
  9087                           
  9088                           ;mtouch_button.c: 278: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;incstack = 0
  9092  0104F0  0100               	movlb	0	; () banked
  9093  0104F2  EE20 F00F          	lfsr	2,15
  9094  0104F6  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9095  0104F8  26D9               	addwf	fsr2l,f,c
  9096  0104FA  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9097  0104FC  22DA               	addwfc	fsr2h,f,c
  9098  0104FE  50DF               	movf	indf2,w,c
  9099  010500  0800               	sublw	0
  9100  010502  6FCB               	movwf	??_Button_State_NotPressed& (0+255),b
  9101  010504  EE20 F00A          	lfsr	2,10
  9102  010508  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9103  01050A  26D9               	addwf	fsr2l,f,c
  9104  01050C  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9105  01050E  22DA               	addwfc	fsr2h,f,c
  9106  010510  50DE               	movf	postinc2,w,c
  9107  010512  0A80               	xorlw	128
  9108  010514  6FCD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9109  010516  51CB               	movf	??_Button_State_NotPressed& (0+255),w,b
  9110  010518  0A80               	xorlw	128
  9111  01051A  5DCD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9112  01051C  B0D8               	btfsc	status,0,c
  9113  01051E  D028               	goto	l788
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;mtouch_button.c: 279: {
  9117                           ;mtouch_button.c: 280: (button->counter)++;
  9118  010520  EE20 F00B          	lfsr	2,11
  9119  010524  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9120  010526  26D9               	addwf	fsr2l,f,c
  9121  010528  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9122  01052A  22DA               	addwfc	fsr2h,f,c
  9123  01052C  2ADE               	incf	postinc2,f,c
  9124  01052E  0E00               	movlw	0
  9125  010530  22DD               	addwfc	postdec2,f,c
  9126                           
  9127                           ;mtouch_button.c: 281: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
  9128  010532  EE20 F00B          	lfsr	2,11
  9129  010536  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9130  010538  26D9               	addwf	fsr2l,f,c
  9131  01053A  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9132  01053C  22DA               	addwfc	fsr2h,f,c
  9133  01053E  0E01               	movlw	1
  9134  010540  50DB               	movf	plusw2,w,c
  9135  010542  E104               	bnz	u6010
  9136  010544  0E41               	movlw	65
  9137  010546  5CDE               	subwf	postinc2,w,c
  9138  010548  A0D8               	btfss	status,0,c
  9139  01054A  D069               	goto	l795
  9140  01054C                     u6010:
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;mtouch_button.c: 282: {
  9144                           ;mtouch_button.c: 283: button->counter = (mtouch_button_statecounter_t)0;
  9145  01054C  EE20 F00B          	lfsr	2,11
  9146  010550  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9147  010552  26D9               	addwf	fsr2l,f,c
  9148  010554  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9149  010556  22DA               	addwfc	fsr2h,f,c
  9150  010558  0E00               	movlw	0
  9151  01055A  6EDE               	movwf	postinc2,c
  9152  01055C  0E00               	movlw	0
  9153  01055E  6EDD               	movwf	postdec2,c
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;mtouch_button.c: 284: MTOUCH_Button_Initialize(button->name);
  9157  010560  C0C9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9158  010564  C0CA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9159  010568  50DF               	movf	indf2,w,c
  9160  01056A  EC10  F08D         	call	_MTOUCH_Button_Initialize
  9161                           
  9162                           ;mtouch_button.c: 285: }
  9163                           ;mtouch_button.c: 286: }
  9164  01056E  D057               	goto	l795
  9165  010570                     l788:
  9166                           
  9167                           ;mtouch_button.c: 288: else if ((button->deviation) > (button->threshold))
  9168  010570  0100               	movlb	0	; () banked
  9169  010572  EE20 F00A          	lfsr	2,10
  9170  010576  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9171  010578  26D9               	addwf	fsr2l,f,c
  9172  01057A  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9173  01057C  22DA               	addwfc	fsr2h,f,c
  9174  01057E  EE10 F00F          	lfsr	1,15
  9175  010582  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9176  010584  26E1               	addwf	fsr1l,f,c
  9177  010586  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9178  010588  22E2               	addwfc	fsr1h,f,c
  9179  01058A  50E6               	movf	postinc1,w,c
  9180  01058C  0A80               	xorlw	128
  9181  01058E  6FCD               	movwf	(??_Button_State_NotPressed+2)& (0+255),b
  9182  010590  50DE               	movf	postinc2,w,c
  9183  010592  0A80               	xorlw	128
  9184  010594  5DCD               	subwf	(??_Button_State_NotPressed+2)& (0+255),w,b
  9185  010596  B0D8               	btfsc	status,0,c
  9186  010598  D037               	goto	l791
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;mtouch_button.c: 289: {
  9190                           ;mtouch_button.c: 290: if(button->aks_group != No_AKS_Group)
  9191  01059A  EE20 F003          	lfsr	2,3
  9192  01059E  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9193  0105A0  26D9               	addwf	fsr2l,f,c
  9194  0105A2  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9195  0105A4  22DA               	addwfc	fsr2h,f,c
  9196  0105A6  50DF               	movf	indf2,w,c
  9197  0105A8  B4D8               	btfsc	status,2,c
  9198  0105AA  D009               	goto	l793
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;mtouch_button.c: 291: {
  9202                           ;mtouch_button.c: 292: if(Button_Check_AKS_Block(button))
  9203  0105AC  C0C9  F0B7         	movff	Button_State_NotPressed@button,Button_Check_AKS_Block@button
  9204  0105B0  C0CA  F0B8         	movff	Button_State_NotPressed@button+1,Button_Check_AKS_Block@button+1
  9205  0105B4  EC3B  F087         	call	_Button_Check_AKS_Block	;wreg free
  9206  0105B8  0900               	iorlw	0
  9207  0105BA  A4D8               	btfss	status,2,c
  9208  0105BC  0012               	return	
  9209  0105BE                     l793:
  9210                           
  9211                           ;mtouch_button.c: 294: }
  9212                           ;mtouch_button.c: 296: button->state = MTOUCH_BUTTON_STATE_pressed;
  9213  0105BE  0100               	movlb	0	; () banked
  9214  0105C0  EE20 F002          	lfsr	2,2
  9215  0105C4  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9216  0105C6  26D9               	addwf	fsr2l,f,c
  9217  0105C8  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9218  0105CA  22DA               	addwfc	fsr2h,f,c
  9219  0105CC  0E02               	movlw	2
  9220  0105CE  6EDF               	movwf	indf2,c
  9221                           
  9222                           ;mtouch_button.c: 297: button->counter = (mtouch_button_statecounter_t)0;
  9223  0105D0  EE20 F00B          	lfsr	2,11
  9224  0105D4  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9225  0105D6  26D9               	addwf	fsr2l,f,c
  9226  0105D8  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9227  0105DA  22DA               	addwfc	fsr2h,f,c
  9228  0105DC  0E00               	movlw	0
  9229  0105DE  6EDE               	movwf	postinc2,c
  9230  0105E0  0E00               	movlw	0
  9231  0105E2  6EDD               	movwf	postdec2,c
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;mtouch_button.c: 298: callback_pressed(button->name);
  9235  0105E4  C0C9  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  9236  0105E8  C0CA  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  9237  0105EC  50DF               	movf	indf2,w,c
  9238  0105EE  6FC7               	movwf	?_mTouchCallback& (0+255),b
  9239  0105F0  D801               	call	u6058
  9240  0105F2  D015               	goto	l795
  9241  0105F4                     u6058:
  9242  0105F4  0005               	push	
  9243  0105F6  6EFA               	movwf	pclath,c
  9244  0105F8  51E1               	movf	_callback_pressed& (0+255),w,b
  9245  0105FA  6EFD               	movwf	tosl,c
  9246  0105FC  51E2               	movf	(_callback_pressed+1)& (0+255),w,b
  9247  0105FE  6EFE               	movwf	tosh,c
  9248  010600  51E3               	movf	(_callback_pressed+2)& (0+255),w,b
  9249  010602  6EFF               	movwf	tosu,c
  9250  010604  50FA               	movf	pclath,w,c
  9251  010606  0012               	return		;indir
  9252  010608                     l791:
  9253                           
  9254                           ;mtouch_button.c: 300: else
  9255                           ;mtouch_button.c: 301: {
  9256                           ;mtouch_button.c: 303: button->counter = (mtouch_button_statecounter_t)0;
  9257  010608  0100               	movlb	0	; () banked
  9258  01060A  EE20 F00B          	lfsr	2,11
  9259  01060E  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9260  010610  26D9               	addwf	fsr2l,f,c
  9261  010612  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9262  010614  22DA               	addwfc	fsr2h,f,c
  9263  010616  0E00               	movlw	0
  9264  010618  6EDE               	movwf	postinc2,c
  9265  01061A  0E00               	movlw	0
  9266  01061C  6EDD               	movwf	postdec2,c
  9267  01061E                     l795:
  9268                           
  9269                           ;mtouch_button.c: 304: }
  9270                           ;mtouch_button.c: 308: (button->baseline_count)++;
  9271                           
  9272                           ; BSR set to: 0
  9273  01061E  0100               	movlb	0	; () banked
  9274  010620  EE20 F00D          	lfsr	2,13
  9275  010624  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9276  010626  26D9               	addwf	fsr2l,f,c
  9277  010628  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9278  01062A  22DA               	addwfc	fsr2h,f,c
  9279  01062C  2ADE               	incf	postinc2,f,c
  9280  01062E  0E00               	movlw	0
  9281  010630  22DD               	addwfc	postdec2,f,c
  9282                           
  9283                           ;mtouch_button.c: 309: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
  9284  010632  EE20 F00D          	lfsr	2,13
  9285  010636  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9286  010638  26D9               	addwf	fsr2l,f,c
  9287  01063A  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9288  01063C  22DA               	addwfc	fsr2h,f,c
  9289  01063E  0E40               	movlw	64
  9290  010640  18DE               	xorwf	postinc2,w,c
  9291  010642  10DE               	iorwf	postinc2,w,c
  9292  010644  A4D8               	btfss	status,2,c
  9293  010646  0012               	return	
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;mtouch_button.c: 310: {
  9297                           ;mtouch_button.c: 311: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9298  010648  EE20 F00D          	lfsr	2,13
  9299  01064C  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9300  01064E  26D9               	addwf	fsr2l,f,c
  9301  010650  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9302  010652  22DA               	addwfc	fsr2h,f,c
  9303  010654  0E00               	movlw	0
  9304  010656  6EDE               	movwf	postinc2,c
  9305  010658  0E00               	movlw	0
  9306  01065A  6EDD               	movwf	postdec2,c
  9307                           
  9308                           ;mtouch_button.c: 312: if(button->aks_group != No_AKS_Group)
  9309  01065C  EE20 F003          	lfsr	2,3
  9310  010660  51C9               	movf	Button_State_NotPressed@button& (0+255),w,b
  9311  010662  26D9               	addwf	fsr2l,f,c
  9312  010664  51CA               	movf	(Button_State_NotPressed@button+1)& (0+255),w,b
  9313  010666  22DA               	addwfc	fsr2h,f,c
  9314  010668  50DF               	movf	indf2,w,c
  9315  01066A  B4D8               	btfsc	status,2,c
  9316  01066C  D009               	goto	l798
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;mtouch_button.c: 313: {
  9320                           ;mtouch_button.c: 314: if(Button_Check_AKS_Block(button))
  9321  01066E  C0C9  F0B7         	movff	Button_State_NotPressed@button,Button_Check_AKS_Block@button
  9322  010672  C0CA  F0B8         	movff	Button_State_NotPressed@button+1,Button_Check_AKS_Block@button+1
  9323  010676  EC3B  F087         	call	_Button_Check_AKS_Block	;wreg free
  9324  01067A  0900               	iorlw	0
  9325  01067C  A4D8               	btfss	status,2,c
  9326  01067E  0012               	return	
  9327  010680                     l798:
  9328                           
  9329                           ;mtouch_button.c: 316: }
  9330                           ;mtouch_button.c: 317: Button_Baseline_Update(button);
  9331  010680  C0C9  F0AF         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
  9332  010684  C0CA  F0B0         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
  9333  010688  EC62  F089         	call	_Button_Baseline_Update	;wreg free
  9334  01068C  0012               	return	
  9335  01068E                     __end_of_Button_State_NotPressed:
  9336                           	opt stack 0
  9337                           tosu	equ	0xFFF
  9338                           tosh	equ	0xFFE
  9339                           tosl	equ	0xFFD
  9340                           pclath	equ	0xFFA
  9341                           tblptru	equ	0xFF8
  9342                           tblptrh	equ	0xFF7
  9343                           tblptrl	equ	0xFF6
  9344                           tablat	equ	0xFF5
  9345                           prodh	equ	0xFF4
  9346                           prodl	equ	0xFF3
  9347                           intcon	equ	0xFF2
  9348                           postinc0	equ	0xFEE
  9349                           wreg	equ	0xFE8
  9350                           indf1	equ	0xFE7
  9351                           postinc1	equ	0xFE6
  9352                           postdec1	equ	0xFE5
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           plusw2	equ	0xFDB
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _Button_State_Initializing *****************
  9364 ;; Defined at:
  9365 ;;		line 255 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;  button          2   26[BANK0 ] PTR struct .
  9368 ;;		 -> mtouch_button(85), 
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  1    wreg      void 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9383 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9384 ;;Total ram usage:        6 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    7
  9387 ;; This function calls:
  9388 ;;		_Button_Baseline_Initialize
  9389 ;;		_Button_Baseline_Update
  9390 ;; This function is called by:
  9391 ;;		_Button_Service
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text54
  9396  01159C                     __ptext54:
  9397                           	opt stack 0
  9398  01159C                     _Button_State_Initializing:
  9399                           	opt stack 20
  9400                           
  9401                           ;mtouch_button.c: 258: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
  9402                           
  9403                           ;incstack = 0
  9404  01159C  0100               	movlb	0	; () banked
  9405  01159E  EE20 F00B          	lfsr	2,11
  9406  0115A2  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9407  0115A4  26D9               	addwf	fsr2l,f,c
  9408  0115A6  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9409  0115A8  22DA               	addwfc	fsr2h,f,c
  9410  0115AA  0E01               	movlw	1
  9411  0115AC  50DB               	movf	plusw2,w,c
  9412  0115AE  E10B               	bnz	l5063
  9413  0115B0  0E09               	movlw	9
  9414  0115B2  5CDE               	subwf	postinc2,w,c
  9415  0115B4  B0D8               	btfsc	status,0,c
  9416  0115B6  D007               	goto	l782
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;mtouch_button.c: 259: {
  9420                           ;mtouch_button.c: 260: Button_Baseline_Initialize(button);
  9421  0115B8  C0C9  F0B2         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
  9422  0115BC  C0CA  F0B3         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
  9423  0115C0  ECE7  F08D         	call	_Button_Baseline_Initialize	;wreg free
  9424                           
  9425                           ;mtouch_button.c: 261: } else {
  9426  0115C4  D006               	goto	l783
  9427  0115C6                     l782:
  9428  0115C6                     l5063:
  9429                           
  9430                           ;mtouch_button.c: 262: Button_Baseline_Update(button);
  9431  0115C6  C0C9  F0AF         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
  9432  0115CA  C0CA  F0B0         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
  9433  0115CE  EC62  F089         	call	_Button_Baseline_Update	;wreg free
  9434  0115D2                     l783:
  9435                           
  9436                           ;mtouch_button.c: 263: }
  9437                           ;mtouch_button.c: 266: (button->counter)++;
  9438  0115D2  0100               	movlb	0	; () banked
  9439  0115D4  EE20 F00B          	lfsr	2,11
  9440  0115D8  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9441  0115DA  26D9               	addwf	fsr2l,f,c
  9442  0115DC  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9443  0115DE  22DA               	addwfc	fsr2h,f,c
  9444  0115E0  2ADE               	incf	postinc2,f,c
  9445  0115E2  0E00               	movlw	0
  9446  0115E4  22DD               	addwfc	postdec2,f,c
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;mtouch_button.c: 267: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
  9450  0115E6  EE20 F00B          	lfsr	2,11
  9451  0115EA  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9452  0115EC  26D9               	addwf	fsr2l,f,c
  9453  0115EE  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9454  0115F0  22DA               	addwfc	fsr2h,f,c
  9455  0115F2  0E01               	movlw	1
  9456  0115F4  50DB               	movf	plusw2,w,c
  9457  0115F6  E104               	bnz	u5980
  9458  0115F8  0E10               	movlw	16
  9459  0115FA  5CDE               	subwf	postinc2,w,c
  9460  0115FC  A0D8               	btfss	status,0,c
  9461  0115FE  0012               	return	
  9462  011600                     u5980:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;mtouch_button.c: 268: {
  9466                           ;mtouch_button.c: 269: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
  9467  011600  EE20 F006          	lfsr	2,6
  9468  011604  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9469  011606  26D9               	addwf	fsr2l,f,c
  9470  011608  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9471  01160A  22DA               	addwfc	fsr2h,f,c
  9472  01160C  CFDE F0CB          	movff	postinc2,??_Button_State_Initializing
  9473  011610  CFDE F0CC          	movff	postinc2,??_Button_State_Initializing+1
  9474  011614  CFDE F0CD          	movff	postinc2,??_Button_State_Initializing+2
  9475  011618  CFDE F0CE          	movff	postinc2,??_Button_State_Initializing+3
  9476  01161C  0E05               	movlw	5
  9477  01161E  D005               	goto	u5990
  9478  011620                     u5995:
  9479  011620  90D8               	bcf	status,0,c
  9480  011622  33CE               	rrcf	(??_Button_State_Initializing+3)& (0+255),f,b
  9481  011624  33CD               	rrcf	(??_Button_State_Initializing+2)& (0+255),f,b
  9482  011626  33CC               	rrcf	(??_Button_State_Initializing+1)& (0+255),f,b
  9483  011628  33CB               	rrcf	??_Button_State_Initializing& (0+255),f,b
  9484  01162A                     u5990:
  9485  01162A  2EE8               	decfsz	wreg,f,c
  9486  01162C  D7F9               	goto	u5995
  9487  01162E  EE20 F004          	lfsr	2,4
  9488  011632  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9489  011634  26D9               	addwf	fsr2l,f,c
  9490  011636  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9491  011638  22DA               	addwfc	fsr2h,f,c
  9492  01163A  C0CB  FFDE         	movff	??_Button_State_Initializing,postinc2
  9493  01163E  C0CC  FFDD         	movff	??_Button_State_Initializing+1,postdec2
  9494                           
  9495                           ;mtouch_button.c: 270: button->state = MTOUCH_BUTTON_STATE_notPressed;
  9496  011642  EE20 F002          	lfsr	2,2
  9497  011646  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9498  011648  26D9               	addwf	fsr2l,f,c
  9499  01164A  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9500  01164C  22DA               	addwfc	fsr2h,f,c
  9501  01164E  0E01               	movlw	1
  9502  011650  6EDF               	movwf	indf2,c
  9503                           
  9504                           ;mtouch_button.c: 271: button->counter = (mtouch_button_statecounter_t)0;
  9505  011652  EE20 F00B          	lfsr	2,11
  9506  011656  51C9               	movf	Button_State_Initializing@button& (0+255),w,b
  9507  011658  26D9               	addwf	fsr2l,f,c
  9508  01165A  51CA               	movf	(Button_State_Initializing@button+1)& (0+255),w,b
  9509  01165C  22DA               	addwfc	fsr2h,f,c
  9510  01165E  0E00               	movlw	0
  9511  011660  6EDE               	movwf	postinc2,c
  9512  011662  0E00               	movlw	0
  9513  011664  6EDD               	movwf	postdec2,c
  9514  011666  0012               	return	
  9515  011668                     __end_of_Button_State_Initializing:
  9516                           	opt stack 0
  9517                           tosu	equ	0xFFF
  9518                           tosh	equ	0xFFE
  9519                           tosl	equ	0xFFD
  9520                           pclath	equ	0xFFA
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           intcon	equ	0xFF2
  9528                           postinc0	equ	0xFEE
  9529                           wreg	equ	0xFE8
  9530                           indf1	equ	0xFE7
  9531                           postinc1	equ	0xFE6
  9532                           postdec1	equ	0xFE5
  9533                           fsr1h	equ	0xFE2
  9534                           fsr1l	equ	0xFE1
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           plusw2	equ	0xFDB
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _Button_State_Pressed *****************
  9544 ;; Defined at:
  9545 ;;		line 321 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  button          2   26[BANK0 ] PTR struct .
  9548 ;;		 -> mtouch_button(85), 
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;		None
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9560 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9562 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9563 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9564 ;;Total ram usage:        7 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    7
  9567 ;; This function calls:
  9568 ;;		_Button_DefaultCallback
  9569 ;;		_MTOUCH_Button_Initialize
  9570 ;; This function is called by:
  9571 ;;		_Button_Service
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text55
  9576  0113C4                     __ptext55:
  9577                           	opt stack 0
  9578  0113C4                     _Button_State_Pressed:
  9579                           	opt stack 20
  9580                           
  9581                           ;mtouch_button.c: 324: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;incstack = 0
  9585  0113C4  0100               	movlb	0	; () banked
  9586  0113C6  EE20 F00B          	lfsr	2,11
  9587  0113CA  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9588  0113CC  26D9               	addwf	fsr2l,f,c
  9589  0113CE  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9590  0113D0  22DA               	addwfc	fsr2h,f,c
  9591  0113D2  0EE8               	movlw	232
  9592  0113D4  5CDE               	subwf	postinc2,w,c
  9593  0113D6  0E03               	movlw	3
  9594  0113D8  58DE               	subwfb	postinc2,w,c
  9595  0113DA  A0D8               	btfss	status,0,c
  9596  0113DC  D019               	goto	l801
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;mtouch_button.c: 325: {
  9600                           ;mtouch_button.c: 326: MTOUCH_Button_Initialize(button->name);
  9601  0113DE  C0C9  FFD9         	movff	Button_State_Pressed@button,fsr2l
  9602  0113E2  C0CA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  9603  0113E6  50DF               	movf	indf2,w,c
  9604  0113E8  EC10  F08D         	call	_MTOUCH_Button_Initialize
  9605                           
  9606                           ;mtouch_button.c: 327: callback_notPressed(button->name);
  9607  0113EC  D801               	call	u6108
  9608  0113EE  0012               	return	
  9609  0113F0                     u6108:
  9610  0113F0  0005               	push	
  9611  0113F2  6EFA               	movwf	pclath,c
  9612  0113F4  0100               	movlb	0	; () banked
  9613  0113F6  51DE               	movf	_callback_notPressed& (0+255),w,b
  9614  0113F8  6EFD               	movwf	tosl,c
  9615  0113FA  51DF               	movf	(_callback_notPressed+1)& (0+255),w,b
  9616  0113FC  6EFE               	movwf	tosh,c
  9617  0113FE  51E0               	movf	(_callback_notPressed+2)& (0+255),w,b
  9618  011400  6EFF               	movwf	tosu,c
  9619  011402  50FA               	movf	pclath,w,c
  9620  011404  C0C9  FFD9         	movff	Button_State_Pressed@button,fsr2l
  9621  011408  C0CA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  9622  01140C  50DF               	movf	indf2,w,c
  9623  01140E  0012               	return		;indir
  9624  011410                     l801:
  9625                           
  9626                           ;mtouch_button.c: 331: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
  9627  011410  0100               	movlb	0	; () banked
  9628  011412  EE20 F00F          	lfsr	2,15
  9629  011416  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9630  011418  26D9               	addwf	fsr2l,f,c
  9631  01141A  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9632  01141C  22DA               	addwfc	fsr2h,f,c
  9633  01141E  50DF               	movf	indf2,w,c
  9634  011420  6FCB               	movwf	??_Button_State_Pressed& (0+255),b
  9635  011422  EE20 F00F          	lfsr	2,15
  9636  011426  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9637  011428  26D9               	addwf	fsr2l,f,c
  9638  01142A  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9639  01142C  22DA               	addwfc	fsr2h,f,c
  9640  01142E  50DF               	movf	indf2,w,c
  9641  011430  6FCC               	movwf	(??_Button_State_Pressed+1)& (0+255),b
  9642  011432  35CC               	rlcf	(??_Button_State_Pressed+1)& (0+255),w,b
  9643  011434  31CC               	rrcf	(??_Button_State_Pressed+1)& (0+255),w,b
  9644  011436  0800               	sublw	0
  9645  011438  25CB               	addwf	??_Button_State_Pressed& (0+255),w,b
  9646  01143A  6FCD               	movwf	(??_Button_State_Pressed+2)& (0+255),b
  9647  01143C  EE20 F00A          	lfsr	2,10
  9648  011440  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9649  011442  26D9               	addwf	fsr2l,f,c
  9650  011444  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9651  011446  22DA               	addwfc	fsr2h,f,c
  9652  011448  50DE               	movf	postinc2,w,c
  9653  01144A  0A80               	xorlw	128
  9654  01144C  6FCF               	movwf	(??_Button_State_Pressed+4)& (0+255),b
  9655  01144E  51CD               	movf	(??_Button_State_Pressed+2)& (0+255),w,b
  9656  011450  0A80               	xorlw	128
  9657  011452  5DCF               	subwf	(??_Button_State_Pressed+4)& (0+255),w,b
  9658  011454  B0D8               	btfsc	status,0,c
  9659  011456  0012               	return	
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;mtouch_button.c: 332: {
  9663                           ;mtouch_button.c: 333: button->state = MTOUCH_BUTTON_STATE_notPressed;
  9664  011458  EE20 F002          	lfsr	2,2
  9665  01145C  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9666  01145E  26D9               	addwf	fsr2l,f,c
  9667  011460  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9668  011462  22DA               	addwfc	fsr2h,f,c
  9669  011464  0E01               	movlw	1
  9670  011466  6EDF               	movwf	indf2,c
  9671                           
  9672                           ;mtouch_button.c: 334: button->counter = (mtouch_button_statecounter_t)0;
  9673  011468  EE20 F00B          	lfsr	2,11
  9674  01146C  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9675  01146E  26D9               	addwf	fsr2l,f,c
  9676  011470  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9677  011472  22DA               	addwfc	fsr2h,f,c
  9678  011474  0E00               	movlw	0
  9679  011476  6EDE               	movwf	postinc2,c
  9680  011478  0E00               	movlw	0
  9681  01147A  6EDD               	movwf	postdec2,c
  9682                           
  9683                           ;mtouch_button.c: 335: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
  9684  01147C  EE20 F00D          	lfsr	2,13
  9685  011480  51C9               	movf	Button_State_Pressed@button& (0+255),w,b
  9686  011482  26D9               	addwf	fsr2l,f,c
  9687  011484  51CA               	movf	(Button_State_Pressed@button+1)& (0+255),w,b
  9688  011486  22DA               	addwfc	fsr2h,f,c
  9689  011488  0EFF               	movlw	255
  9690  01148A  6EDE               	movwf	postinc2,c
  9691  01148C  0EFB               	movlw	251
  9692  01148E  6EDD               	movwf	postdec2,c
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;mtouch_button.c: 336: callback_notPressed(button->name);
  9696  011490  D801               	call	u6128
  9697  011492  0012               	return	
  9698  011494                     u6128:
  9699  011494  0005               	push	
  9700  011496  6EFA               	movwf	pclath,c
  9701  011498  51DE               	movf	_callback_notPressed& (0+255),w,b
  9702  01149A  6EFD               	movwf	tosl,c
  9703  01149C  51DF               	movf	(_callback_notPressed+1)& (0+255),w,b
  9704  01149E  6EFE               	movwf	tosh,c
  9705  0114A0  51E0               	movf	(_callback_notPressed+2)& (0+255),w,b
  9706  0114A2  6EFF               	movwf	tosu,c
  9707  0114A4  50FA               	movf	pclath,w,c
  9708  0114A6  C0C9  FFD9         	movff	Button_State_Pressed@button,fsr2l
  9709  0114AA  C0CA  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  9710  0114AE  50DF               	movf	indf2,w,c
  9711  0114B0  0012               	return		;indir
  9712  0114B2                     __end_of_Button_State_Pressed:
  9713                           	opt stack 0
  9714                           tosu	equ	0xFFF
  9715                           tosh	equ	0xFFE
  9716                           tosl	equ	0xFFD
  9717                           pclath	equ	0xFFA
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon	equ	0xFF2
  9725                           postinc0	equ	0xFEE
  9726                           wreg	equ	0xFE8
  9727                           indf1	equ	0xFE7
  9728                           postinc1	equ	0xFE6
  9729                           postdec1	equ	0xFE5
  9730                           fsr1h	equ	0xFE2
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           plusw2	equ	0xFDB
  9736                           fsr2h	equ	0xFDA
  9737                           fsr2l	equ	0xFD9
  9738                           status	equ	0xFD8
  9739                           
  9740 ;; *************** function _Button_DefaultCallback *****************
  9741 ;; Defined at:
  9742 ;;		line 598 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  button          1    wreg     enum E17454
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  button          1    0[COMRAM] enum E17454
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  1    wreg      void 
  9749 ;; Registers used:
  9750 ;;		wreg
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9756 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9760 ;;Total ram usage:        1 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    5
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_Button_State_NotPressed
  9767 ;;		_Button_State_Pressed
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           	psect	text56
  9772  01276C                     __ptext56:
  9773                           	opt stack 0
  9774  01276C                     _Button_DefaultCallback:
  9775                           	opt stack 21
  9776                           
  9777                           ;incstack = 0
  9778  01276C  0012               	return		;funcret
  9779  01276E                     __end_of_Button_DefaultCallback:
  9780                           	opt stack 0
  9781                           tosu	equ	0xFFF
  9782                           tosh	equ	0xFFE
  9783                           tosl	equ	0xFFD
  9784                           pclath	equ	0xFFA
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           intcon	equ	0xFF2
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           indf1	equ	0xFE7
  9795                           postinc1	equ	0xFE6
  9796                           postdec1	equ	0xFE5
  9797                           fsr1h	equ	0xFE2
  9798                           fsr1l	equ	0xFE1
  9799                           indf2	equ	0xFDF
  9800                           postinc2	equ	0xFDE
  9801                           postdec2	equ	0xFDD
  9802                           plusw2	equ	0xFDB
  9803                           fsr2h	equ	0xFDA
  9804                           fsr2l	equ	0xFD9
  9805                           status	equ	0xFD8
  9806                           
  9807 ;; *************** function _mTouchCallback *****************
  9808 ;; Defined at:
  9809 ;;		line 72 in file "main.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;		None
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  1    wreg      void 
  9816 ;; Registers used:
  9817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9823 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9827 ;;Total ram usage:        2 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    8
  9830 ;; This function calls:
  9831 ;;		_MTOUCH_Button_isPressed
  9832 ;;		_printf
  9833 ;; This function is called by:
  9834 ;;		_main
  9835 ;;		_Button_State_NotPressed
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           	psect	text57
  9840  0111BA                     __ptext57:
  9841                           	opt stack 0
  9842  0111BA                     _mTouchCallback:
  9843                           	opt stack 18
  9844                           
  9845                           ;main.c: 74: if (MTOUCH_Button_isPressed(Button0)) {
  9846                           
  9847                           ;incstack = 0
  9848  0111BA  0E00               	movlw	0
  9849  0111BC  ECDC  F090         	call	_MTOUCH_Button_isPressed
  9850  0111C0  0900               	iorlw	0
  9851  0111C2  B4D8               	btfsc	status,2,c
  9852  0111C4  D013               	goto	l961
  9853                           
  9854                           ;main.c: 75: LATFbits.LATF0 = !LATFbits.LATF0;
  9855  0111C6  B07E               	btfsc	3966,0,c	;volatile
  9856  0111C8  D004               	goto	u5450
  9857  0111CA  0100               	movlb	0	; () banked
  9858  0111CC  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9859  0111CE  2BC8               	incf	??_mTouchCallback& (0+255),f,b
  9860  0111D0  D002               	goto	u5468
  9861  0111D2                     u5450:
  9862  0111D2  0100               	movlb	0	; () banked
  9863  0111D4  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9864  0111D6                     u5468:
  9865  0111D6  507E               	movf	3966,w,c	;volatile
  9866  0111D8  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9867  0111DA  0BFE               	andlw	-2
  9868  0111DC  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9869  0111DE  6E7E               	movwf	3966,c	;volatile
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;main.c: 76: printf("    Button 0 has been pressed\n\r");
  9873  0111E0  0E78               	movlw	low STR_2
  9874  0111E2  6FBB               	movwf	printf@f& (0+255),b
  9875  0111E4  0EFE               	movlw	high STR_2
  9876  0111E6  6FBC               	movwf	(printf@f+1)& (0+255),b
  9877  0111E8  EC68  F085         	call	_printf	;wreg free
  9878  0111EC                     l961:
  9879                           
  9880                           ;main.c: 77: }
  9881                           ;main.c: 79: if (MTOUCH_Button_isPressed(Button1)) {
  9882  0111EC  0E01               	movlw	1
  9883  0111EE  ECDC  F090         	call	_MTOUCH_Button_isPressed
  9884  0111F2  0900               	iorlw	0
  9885  0111F4  B4D8               	btfsc	status,2,c
  9886  0111F6  D014               	goto	l962
  9887                           
  9888                           ;main.c: 80: LATFbits.LATF1 = !LATFbits.LATF1;
  9889  0111F8  B27E               	btfsc	3966,1,c	;volatile
  9890  0111FA  D004               	goto	u5480
  9891  0111FC  0100               	movlb	0	; () banked
  9892  0111FE  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9893  011200  2BC8               	incf	??_mTouchCallback& (0+255),f,b
  9894  011202  D002               	goto	u5498
  9895  011204                     u5480:
  9896  011204  0100               	movlb	0	; () banked
  9897  011206  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9898  011208                     u5498:
  9899  011208  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9900  01120A  507E               	movf	3966,w,c	;volatile
  9901  01120C  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9902  01120E  0BFD               	andlw	-3
  9903  011210  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9904  011212  6E7E               	movwf	3966,c	;volatile
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;main.c: 81: printf("    Button 1 has been pressed\n\r");
  9908  011214  0E98               	movlw	low STR_3
  9909  011216  6FBB               	movwf	printf@f& (0+255),b
  9910  011218  0EFE               	movlw	high STR_3
  9911  01121A  6FBC               	movwf	(printf@f+1)& (0+255),b
  9912  01121C  EC68  F085         	call	_printf	;wreg free
  9913  011220                     l962:
  9914                           
  9915                           ;main.c: 82: }
  9916                           ;main.c: 84: if (MTOUCH_Button_isPressed(Button2)) {
  9917  011220  0E02               	movlw	2
  9918  011222  ECDC  F090         	call	_MTOUCH_Button_isPressed
  9919  011226  0900               	iorlw	0
  9920  011228  B4D8               	btfsc	status,2,c
  9921  01122A  D015               	goto	l963
  9922                           
  9923                           ;main.c: 85: LATFbits.LATF2 = !LATFbits.LATF2;
  9924  01122C  B47E               	btfsc	3966,2,c	;volatile
  9925  01122E  D004               	goto	u5510
  9926  011230  0100               	movlb	0	; () banked
  9927  011232  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9928  011234  2BC8               	incf	??_mTouchCallback& (0+255),f,b
  9929  011236  D002               	goto	u5528
  9930  011238                     u5510:
  9931  011238  0100               	movlb	0	; () banked
  9932  01123A  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9933  01123C                     u5528:
  9934  01123C  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9935  01123E  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9936  011240  507E               	movf	3966,w,c	;volatile
  9937  011242  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9938  011244  0BFB               	andlw	-5
  9939  011246  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9940  011248  6E7E               	movwf	3966,c	;volatile
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;main.c: 86: printf("    Button 2 has been pressed\n\r");
  9944  01124A  0EB8               	movlw	low STR_4
  9945  01124C  6FBB               	movwf	printf@f& (0+255),b
  9946  01124E  0EFE               	movlw	high STR_4
  9947  011250  6FBC               	movwf	(printf@f+1)& (0+255),b
  9948  011252  EC68  F085         	call	_printf	;wreg free
  9949  011256                     l963:
  9950                           
  9951                           ;main.c: 87: }
  9952                           ;main.c: 89: if (MTOUCH_Button_isPressed(Button3)) {
  9953  011256  0E03               	movlw	3
  9954  011258  ECDC  F090         	call	_MTOUCH_Button_isPressed
  9955  01125C  0900               	iorlw	0
  9956  01125E  B4D8               	btfsc	status,2,c
  9957  011260  D016               	goto	l964
  9958                           
  9959                           ;main.c: 90: LATFbits.LATF3 = !LATFbits.LATF3;
  9960  011262  B67E               	btfsc	3966,3,c	;volatile
  9961  011264  D004               	goto	u5540
  9962  011266  0100               	movlb	0	; () banked
  9963  011268  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9964  01126A  2BC8               	incf	??_mTouchCallback& (0+255),f,b
  9965  01126C  D002               	goto	u5558
  9966  01126E                     u5540:
  9967  01126E  0100               	movlb	0	; () banked
  9968  011270  6BC8               	clrf	??_mTouchCallback& (0+255),b
  9969  011272                     u5558:
  9970  011272  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9971  011274  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9972  011276  47C8               	rlncf	??_mTouchCallback& (0+255),f,b
  9973  011278  507E               	movf	3966,w,c	;volatile
  9974  01127A  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9975  01127C  0BF7               	andlw	-9
  9976  01127E  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
  9977  011280  6E7E               	movwf	3966,c	;volatile
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;main.c: 91: printf("    Button 3 has been pressed\n\r");
  9981  011282  0ED8               	movlw	low STR_5
  9982  011284  6FBB               	movwf	printf@f& (0+255),b
  9983  011286  0EFE               	movlw	high STR_5
  9984  011288  6FBC               	movwf	(printf@f+1)& (0+255),b
  9985  01128A  EC68  F085         	call	_printf	;wreg free
  9986  01128E                     l964:
  9987                           
  9988                           ;main.c: 92: }
  9989                           ;main.c: 94: if (MTOUCH_Button_isPressed(Button4)) {
  9990  01128E  0E04               	movlw	4
  9991  011290  ECDC  F090         	call	_MTOUCH_Button_isPressed
  9992  011294  0900               	iorlw	0
  9993  011296  B4D8               	btfsc	status,2,c
  9994  011298  0012               	return	
  9995                           
  9996                           ;main.c: 95: LATFbits.LATF4 = !LATFbits.LATF4;
  9997  01129A  B87E               	btfsc	3966,4,c	;volatile
  9998  01129C  D004               	goto	u5570
  9999  01129E  0100               	movlb	0	; () banked
 10000  0112A0  6BC8               	clrf	??_mTouchCallback& (0+255),b
 10001  0112A2  2BC8               	incf	??_mTouchCallback& (0+255),f,b
 10002  0112A4  D002               	goto	u5588
 10003  0112A6                     u5570:
 10004  0112A6  0100               	movlb	0	; () banked
 10005  0112A8  6BC8               	clrf	??_mTouchCallback& (0+255),b
 10006  0112AA                     u5588:
 10007  0112AA  3BC8               	swapf	??_mTouchCallback& (0+255),f,b
 10008  0112AC  507E               	movf	3966,w,c	;volatile
 10009  0112AE  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
 10010  0112B0  0BEF               	andlw	-17
 10011  0112B2  19C8               	xorwf	??_mTouchCallback& (0+255),w,b
 10012  0112B4  6E7E               	movwf	3966,c	;volatile
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;main.c: 96: printf("    Button 4 has been pressed\n\r");
 10016  0112B6  0EF8               	movlw	low STR_6
 10017  0112B8  6FBB               	movwf	printf@f& (0+255),b
 10018  0112BA  0EFE               	movlw	high STR_6
 10019  0112BC  6FBC               	movwf	(printf@f+1)& (0+255),b
 10020  0112BE  EC68  F085         	call	_printf	;wreg free
 10021  0112C2  0012               	return	
 10022  0112C4                     __end_of_mTouchCallback:
 10023                           	opt stack 0
 10024                           tosu	equ	0xFFF
 10025                           tosh	equ	0xFFE
 10026                           tosl	equ	0xFFD
 10027                           pclath	equ	0xFFA
 10028                           tblptru	equ	0xFF8
 10029                           tblptrh	equ	0xFF7
 10030                           tblptrl	equ	0xFF6
 10031                           tablat	equ	0xFF5
 10032                           prodh	equ	0xFF4
 10033                           prodl	equ	0xFF3
 10034                           intcon	equ	0xFF2
 10035                           postinc0	equ	0xFEE
 10036                           wreg	equ	0xFE8
 10037                           indf1	equ	0xFE7
 10038                           postinc1	equ	0xFE6
 10039                           postdec1	equ	0xFE5
 10040                           fsr1h	equ	0xFE2
 10041                           fsr1l	equ	0xFE1
 10042                           indf2	equ	0xFDF
 10043                           postinc2	equ	0xFDE
 10044                           postdec2	equ	0xFDD
 10045                           plusw2	equ	0xFDB
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function _printf *****************
 10051 ;; Defined at:
 10052 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  f               2   12[BANK0 ] PTR const unsigned char 
 10055 ;;		 -> STR_41(3), STR_40(349), STR_39(3), STR_37(3), 
 10056 ;;		 -> STR_36(28), STR_35(3), STR_32(4), STR_31(5), 
 10057 ;;		 -> STR_29(4), STR_28(5), STR_26(3), STR_25(19), 
 10058 ;;		 -> STR_24(19), STR_23(19), STR_22(19), STR_21(19), 
 10059 ;;		 -> STR_20(3), STR_18(3), STR_17(18), STR_16(3), 
 10060 ;;		 -> STR_14(3), STR_13(18), STR_12(3), STR_10(3), 
 10061 ;;		 -> STR_9(372), STR_8(4), STR_7(5), STR_6(32), 
 10062 ;;		 -> STR_5(32), STR_4(32), STR_3(32), STR_2(32), 
 10063 ;;		 -> STR_1(4), 
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  tmpval          4    0        struct .
 10066 ;;  cp              3    0        PTR const unsigned char 
 10067 ;;  val             2   21[BANK0 ] unsigned int 
 10068 ;;  ap              2   17[BANK0 ] PTR void [1]
 10069 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10070 ;;  len             2    0        unsigned int 
 10071 ;;  c               1   23[BANK0 ] char 
 10072 ;;  prec            1   20[BANK0 ] char 
 10073 ;;  flag            1   19[BANK0 ] unsigned char 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  2   12[BANK0 ] int 
 10076 ;; Registers used:
 10077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10083 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10084 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10086 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10087 ;;Total ram usage:       12 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    7
 10090 ;; This function calls:
 10091 ;;		___lwdiv
 10092 ;;		___lwmod
 10093 ;;		_putch
 10094 ;; This function is called by:
 10095 ;;		_mTouchCallback
 10096 ;;		_printResetMessage
 10097 ;;		_ringBufferLUT
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           	psect	text58
 10102  010AD0                     __ptext58:
 10103                           	opt stack 0
 10104  010AD0                     _printf:
 10105                           	opt stack 21
 10106                           
 10107                           ;doprnt.c: 466: va_list ap;
 10108                           ;doprnt.c: 499: signed char c;
 10109                           ;doprnt.c: 506: signed char prec;
 10110                           ;doprnt.c: 508: unsigned char flag;
 10111                           ;doprnt.c: 523: union {
 10112                           ;doprnt.c: 524: unsigned long vd;
 10113                           ;doprnt.c: 525: double integ;
 10114                           ;doprnt.c: 526: } tmpval;
 10115                           ;doprnt.c: 528: unsigned int val;
 10116                           ;doprnt.c: 529: unsigned len;
 10117                           ;doprnt.c: 530: const char * cp;
 10118                           ;doprnt.c: 533: *ap = __va_start();
 10119                           
 10120                           ;incstack = 0
 10121  010AD0  0EBD               	movlw	low (?_printf+2)
 10122  010AD2  0100               	movlb	0	; () banked
 10123  010AD4  6FC0               	movwf	printf@ap& (0+255),b
 10124  010AD6  0E00               	movlw	high (?_printf+2)
 10125  010AD8  6FC1               	movwf	(printf@ap+1)& (0+255),b
 10126                           
 10127                           ;doprnt.c: 536: while(c = *f++) {
 10128  010ADA  D08A               	goto	u5130
 10129  010ADC                     
 10130                           ; BSR set to: 0
 10131                           ;doprnt.c: 538: if(c != '%')
 10132                           
 10133                           ; BSR set to: 0
 10134  010ADC  0E25               	movlw	37
 10135  010ADE  19C6               	xorwf	printf@c& (0+255),w,b
 10136  010AE0  B4D8               	btfsc	status,2,c
 10137  010AE2  D004               	goto	l1060
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;doprnt.c: 540: {
 10141                           ;doprnt.c: 541: (putch(c) );
 10142  010AE4  51C6               	movf	printf@c& (0+255),w,b
 10143  010AE6  EC82  F093         	call	_putch
 10144                           
 10145                           ;doprnt.c: 542: continue;
 10146  010AEA  D082               	goto	u5130
 10147  010AEC                     l1060:
 10148                           
 10149                           ;doprnt.c: 543: }
 10150                           ;doprnt.c: 548: flag = 0;
 10151  010AEC  0E00               	movlw	0
 10152  010AEE  0100               	movlb	0	; () banked
 10153  010AF0  6FC2               	movwf	printf@flag& (0+255),b
 10154                           
 10155                           ; BSR set to: 0
 10156                           
 10157                           ; BSR set to: 0
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;doprnt.c: 822: }
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;doprnt.c: 813: continue;
 10164                           
 10165                           ;doprnt.c: 802: default:
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;doprnt.c: 698: case 'i':
 10169                           ;doprnt.c: 699: break;
 10170                           
 10171                           ; BSR set to: 0
 10172                           
 10173                           ;doprnt.c: 697: case 'd':
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;doprnt.c: 638: goto alldone;
 10177                           
 10178                           ;doprnt.c: 637: case 0:
 10179                           
 10180                           ;doprnt.c: 635: switch(c = *f++) {
 10181  010AF2  C0BB  FFF6         	movff	printf@f,tblptrl
 10182  010AF6  C0BC  FFF7         	movff	printf@f+1,tblptrh
 10183  010AFA  4BBB               	infsnz	printf@f& (0+255),f,b
 10184  010AFC  2BBC               	incf	(printf@f+1)& (0+255),f,b
 10185  010AFE                     	if	0	;tblptru may be non-zero
 10186  010AFE                     	endif
 10187  010AFE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10188  010AFE  0E00               	movlw	low (__mediumconst shr (0+16))
 10189  010B00  6EF8               	movwf	tblptru,c
 10190  010B02                     	endif
 10191  010B02  0008               	tblrd		*
 10192  010B04  CFF5 F0C6          	movff	tablat,printf@c
 10193  010B08  51C6               	movf	printf@c& (0+255),w,b
 10194                           
 10195                           ; Switch size 1, requested type "space"
 10196                           ; Number of cases is 3, Range of values is 0 to 105
 10197                           ; switch strategies available:
 10198                           ; Name         Instructions Cycles
 10199                           ; simple_byte           10     6 (average)
 10200                           ;	Chosen strategy is simple_byte
 10201  010B0A  0A00               	xorlw	0	; case 0
 10202  010B0C  B4D8               	btfsc	status,2,c
 10203  010B0E  0012               	return	
 10204  010B10  0A64               	xorlw	100	; case 100
 10205  010B12  B4D8               	btfsc	status,2,c
 10206  010B14  D003               	goto	l1066
 10207  010B16  0A0D               	xorlw	13	; case 105
 10208  010B18  A4D8               	btfss	status,2,c
 10209  010B1A  D06A               	goto	u5130
 10210  010B1C                     l1066:
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;doprnt.c: 1253: {
 10214                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10215                           
 10216                           ; BSR set to: 0
 10217  010B1C  C0C0  FFD9         	movff	printf@ap,fsr2l
 10218  010B20  C0C1  FFDA         	movff	printf@ap+1,fsr2h
 10219  010B24  CFDE F0C4          	movff	postinc2,printf@val
 10220  010B28  CFDD F0C5          	movff	postdec2,printf@val+1
 10221                           
 10222                           ; BSR set to: 0
 10223  010B2C  0E02               	movlw	2
 10224  010B2E  27C0               	addwf	printf@ap& (0+255),f,b
 10225  010B30  0E00               	movlw	0
 10226  010B32  23C1               	addwfc	(printf@ap+1)& (0+255),f,b
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;doprnt.c: 1261: if((int)val < 0) {
 10230  010B34  AFC5               	btfss	(printf@val+1)& (0+255),7,b
 10231  010B36  D006               	goto	l1068
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;doprnt.c: 1262: flag |= 0x03;
 10235  010B38  0E03               	movlw	3
 10236  010B3A  13C2               	iorwf	printf@flag& (0+255),f,b
 10237                           
 10238                           ; BSR set to: 0
 10239                           ;doprnt.c: 1263: val = -val;
 10240  010B3C  6DC4               	negf	printf@val& (0+255),b
 10241  010B3E  1FC5               	comf	(printf@val+1)& (0+255),f,b
 10242  010B40  B0D8               	btfsc	status,0,c
 10243  010B42  2BC5               	incf	(printf@val+1)& (0+255),f,b
 10244  010B44                     l1068:
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;doprnt.c: 1264: }
 10248                           ;doprnt.c: 1266: }
 10249                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10250                           
 10251                           ; BSR set to: 0
 10252  010B44  0E01               	movlw	1
 10253  010B46  6FC6               	movwf	printf@c& (0+255),b
 10254  010B48                     l4621:
 10255                           
 10256                           ; BSR set to: 0
 10257  010B48  0E05               	movlw	5
 10258  010B4A  19C6               	xorwf	printf@c& (0+255),w,b
 10259  010B4C  B4D8               	btfsc	status,2,c
 10260  010B4E  D015               	goto	u5110
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;doprnt.c: 1306: if(val < dpowers[c])
 10264                           
 10265                           ; BSR set to: 0
 10266                           
 10267                           ; BSR set to: 0
 10268  010B50  51C6               	movf	printf@c& (0+255),w,b
 10269  010B52  0D02               	mullw	2
 10270  010B54  0E1B               	movlw	low _dpowers
 10271  010B56  24F3               	addwf	prodl,w,c
 10272  010B58  6EF6               	movwf	tblptrl,c
 10273  010B5A  0EFB               	movlw	high _dpowers
 10274  010B5C  20F4               	addwfc	prodh,w,c
 10275  010B5E  6EF7               	movwf	tblptrh,c
 10276  010B60                     	if	1	;There are 3 active tblptr bytes
 10277  010B60  6AF8               	clrf	tblptru,c
 10278  010B62  0E00               	movlw	low (__mediumconst shr (0+16))
 10279  010B64  22F8               	addwfc	tblptru,f,c
 10280  010B66                     	endif
 10281  010B66  0009               	tblrd		*+
 10282  010B68  50F5               	movf	tablat,w,c
 10283  010B6A  5DC4               	subwf	printf@val& (0+255),w,b
 10284  010B6C  0009               	tblrd		*+
 10285  010B6E  50F5               	movf	tablat,w,c
 10286  010B70  59C5               	subwfb	(printf@val+1)& (0+255),w,b
 10287  010B72  A0D8               	btfss	status,0,c
 10288  010B74  D002               	goto	u5110
 10289                           
 10290                           ; BSR set to: 0
 10291                           
 10292                           ; BSR set to: 0
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;doprnt.c: 1307: break;
 10296  010B76  2BC6               	incf	printf@c& (0+255),f,b
 10297  010B78  D7E7               	goto	l4621
 10298  010B7A                     u5110:
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;doprnt.c: 1422: {
 10302                           ;doprnt.c: 1438: if(flag & 0x03)
 10303                           
 10304                           ; BSR set to: 0
 10305  010B7A  C0C2  F0BF         	movff	printf@flag,??_printf
 10306  010B7E  0E03               	movlw	3
 10307  010B80  17BF               	andwf	??_printf& (0+255),f,b
 10308  010B82  B4D8               	btfsc	status,2,c
 10309  010B84  D003               	goto	l1072
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;doprnt.c: 1439: (putch('-') );
 10313  010B86  0E2D               	movlw	45
 10314  010B88  EC82  F093         	call	_putch
 10315  010B8C                     l1072:
 10316                           
 10317                           ;doprnt.c: 1469: }
 10318                           ;doprnt.c: 1472: prec = c;
 10319  010B8C  C0C6  F0C3         	movff	printf@c,printf@prec
 10320                           
 10321                           ;doprnt.c: 1474: while(prec--) {
 10322  010B90  D02A               	goto	l1073
 10323  010B92                     
 10324                           ;doprnt.c: 1478: {
 10325                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10326  010B92  0100               	movlb	0	; () banked
 10327  010B94  51C3               	movf	printf@prec& (0+255),w,b
 10328  010B96  0D02               	mullw	2
 10329  010B98  0E1B               	movlw	low _dpowers
 10330  010B9A  24F3               	addwf	prodl,w,c
 10331  010B9C  6EF6               	movwf	tblptrl,c
 10332  010B9E  0EFB               	movlw	high _dpowers
 10333  010BA0  20F4               	addwfc	prodh,w,c
 10334  010BA2  6EF7               	movwf	tblptrh,c
 10335  010BA4                     	if	1	;There are 3 active tblptr bytes
 10336  010BA4  6AF8               	clrf	tblptru,c
 10337  010BA6  0E00               	movlw	low (__mediumconst shr (0+16))
 10338  010BA8  22F8               	addwfc	tblptru,f,c
 10339  010BAA                     	endif
 10340  010BAA  0009               	tblrd		*+
 10341  010BAC  CFF5 F0B1          	movff	tablat,___lwdiv@divisor
 10342  010BB0  000A               	tblrd		*-
 10343  010BB2  CFF5 F0B2          	movff	tablat,___lwdiv@divisor+1
 10344  010BB6  C0C4  F0AF         	movff	printf@val,___lwdiv@dividend
 10345  010BBA  C0C5  F0B0         	movff	printf@val+1,___lwdiv@dividend+1
 10346  010BBE  EC73  F08E         	call	___lwdiv	;wreg free
 10347  010BC2  C0AF  F0B6         	movff	?___lwdiv,___lwmod@dividend
 10348  010BC6  C0B0  F0B7         	movff	?___lwdiv+1,___lwmod@dividend+1
 10349  010BCA  0E00               	movlw	0
 10350  010BCC  0100               	movlb	0	; () banked
 10351  010BCE  6FB9               	movwf	(___lwmod@divisor+1)& (0+255),b
 10352  010BD0  0E0A               	movlw	10
 10353  010BD2  6FB8               	movwf	___lwmod@divisor& (0+255),b
 10354  010BD4  EC88  F08F         	call	___lwmod	;wreg free
 10355  010BD8  0100               	movlb	0	; () banked
 10356  010BDA  51B6               	movf	?___lwmod& (0+255),w,b
 10357  010BDC  0F30               	addlw	48
 10358  010BDE  6FC6               	movwf	printf@c& (0+255),b
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;doprnt.c: 1523: }
 10362                           ;doprnt.c: 1524: (putch(c) );
 10363  010BE0  51C6               	movf	printf@c& (0+255),w,b
 10364  010BE2  EC82  F093         	call	_putch
 10365  010BE6                     l1073:
 10366  010BE6  0100               	movlb	0	; () banked
 10367  010BE8  07C3               	decf	printf@prec& (0+255),f,b
 10368  010BEA  29C3               	incf	printf@prec& (0+255),w,b
 10369  010BEC  A4D8               	btfss	status,2,c
 10370  010BEE  D7D1               	goto	l1074
 10371  010BF0                     u5130:
 10372                           
 10373                           ; BSR set to: 0
 10374                           
 10375                           ; BSR set to: 0
 10376  010BF0  C0BB  FFF6         	movff	printf@f,tblptrl
 10377  010BF4  C0BC  FFF7         	movff	printf@f+1,tblptrh
 10378  010BF8  0100               	movlb	0	; () banked
 10379  010BFA  4BBB               	infsnz	printf@f& (0+255),f,b
 10380  010BFC  2BBC               	incf	(printf@f+1)& (0+255),f,b
 10381  010BFE                     	if	0	;tblptru may be non-zero
 10382  010BFE                     	endif
 10383  010BFE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10384  010BFE  0E00               	movlw	low (__mediumconst shr (0+16))
 10385  010C00  6EF8               	movwf	tblptru,c
 10386  010C02                     	endif
 10387  010C02  0008               	tblrd		*
 10388  010C04  CFF5 F0C6          	movff	tablat,printf@c
 10389  010C08  51C6               	movf	printf@c& (0+255),w,b
 10390  010C0A  B4D8               	btfsc	status,2,c
 10391  010C0C  0012               	return	
 10392  010C0E  D766               	goto	l1059
 10393  010C10                     __end_of_printf:
 10394                           	opt stack 0
 10395                           tosu	equ	0xFFF
 10396                           tosh	equ	0xFFE
 10397                           tosl	equ	0xFFD
 10398                           pclath	equ	0xFFA
 10399                           tblptru	equ	0xFF8
 10400                           tblptrh	equ	0xFF7
 10401                           tblptrl	equ	0xFF6
 10402                           tablat	equ	0xFF5
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           intcon	equ	0xFF2
 10406                           postinc0	equ	0xFEE
 10407                           wreg	equ	0xFE8
 10408                           indf1	equ	0xFE7
 10409                           postinc1	equ	0xFE6
 10410                           postdec1	equ	0xFE5
 10411                           fsr1h	equ	0xFE2
 10412                           fsr1l	equ	0xFE1
 10413                           indf2	equ	0xFDF
 10414                           postinc2	equ	0xFDE
 10415                           postdec2	equ	0xFDD
 10416                           plusw2	equ	0xFDB
 10417                           fsr2h	equ	0xFDA
 10418                           fsr2l	equ	0xFD9
 10419                           status	equ	0xFD8
 10420                           
 10421 ;; *************** function _putch *****************
 10422 ;; Defined at:
 10423 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;  txData          1    wreg     unsigned char 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  txData          1    1[BANK0 ] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10441 ;;Total ram usage:        1 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    6
 10444 ;; This function calls:
 10445 ;;		_EUSART2_Write
 10446 ;; This function is called by:
 10447 ;;		_printf
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           	psect	text59
 10452  012704                     __ptext59:
 10453                           	opt stack 0
 10454  012704                     _putch:
 10455                           	opt stack 21
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;incstack = 0
 10459                           ;putch@txData stored from wreg
 10460  012704  0100               	movlb	0	; () banked
 10461  012706  6FB0               	movwf	putch@txData& (0+255),b
 10462                           
 10463                           ;eusart2.c: 180: EUSART2_Write(txData);
 10464  012708  0100               	movlb	0	; () banked
 10465  01270A  51B0               	movf	putch@txData& (0+255),w,b
 10466  01270C  EC49  F090         	call	_EUSART2_Write
 10467  012710  0012               	return		;funcret
 10468  012712                     __end_of_putch:
 10469                           	opt stack 0
 10470                           tosu	equ	0xFFF
 10471                           tosh	equ	0xFFE
 10472                           tosl	equ	0xFFD
 10473                           pclath	equ	0xFFA
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           intcon	equ	0xFF2
 10481                           postinc0	equ	0xFEE
 10482                           wreg	equ	0xFE8
 10483                           indf1	equ	0xFE7
 10484                           postinc1	equ	0xFE6
 10485                           postdec1	equ	0xFE5
 10486                           fsr1h	equ	0xFE2
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           plusw2	equ	0xFDB
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function _EUSART2_Write *****************
 10497 ;; Defined at:
 10498 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  txData          1    wreg     unsigned char 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  txData          1    0[BANK0 ] unsigned char 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;Total ram usage:        1 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    5
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_putch
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text60
 10527  012092                     __ptext60:
 10528                           	opt stack 0
 10529  012092                     _EUSART2_Write:
 10530                           	opt stack 21
 10531                           
 10532                           ;incstack = 0
 10533                           ;EUSART2_Write@txData stored from wreg
 10534  012092  0100               	movlb	0	; () banked
 10535  012094  6FAF               	movwf	EUSART2_Write@txData& (0+255),b
 10536  012096                     
 10537                           ;eusart2.c: 153: {
 10538                           
 10539                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 10540  012096  504B               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 10541  012098  B4D8               	btfsc	status,2,c
 10542  01209A  D7FD               	goto	l4539
 10543                           
 10544                           ;eusart2.c: 154: }
 10545                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 10546  01209C  010E               	movlb	14	; () banked
 10547  01209E  BD2C               	btfsc	44,6,b	;volatile
 10548  0120A0  D003               	goto	l234
 10549                           
 10550                           ; BSR set to: 14
 10551                           ;eusart2.c: 157: {
 10552                           ;eusart2.c: 158: TX2REG = txData;
 10553  0120A2  C0AF  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
 10554                           
 10555                           ;eusart2.c: 159: }
 10556  0120A6  D012               	goto	l235
 10557  0120A8                     l234:
 10558                           
 10559                           ; BSR set to: 14
 10560                           ;eusart2.c: 160: else
 10561                           ;eusart2.c: 161: {
 10562                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 10563  0120A8  9D2C               	bcf	44,6,b	;volatile
 10564                           
 10565                           ; BSR set to: 14
 10566                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 10567  0120AA  5041               	movf	_eusart2TxHead,w,c	;volatile
 10568  0120AC  0D01               	mullw	1
 10569  0120AE  0E00               	movlw	low _eusart2TxBuffer
 10570  0120B0  24F3               	addwf	prodl,w,c
 10571  0120B2  6ED9               	movwf	fsr2l,c
 10572  0120B4  0E02               	movlw	high _eusart2TxBuffer
 10573  0120B6  20F4               	addwfc	prodh,w,c
 10574  0120B8  6EDA               	movwf	fsr2h,c
 10575  0120BA  C0AF  FFDF         	movff	EUSART2_Write@txData,indf2
 10576                           
 10577                           ; BSR set to: 14
 10578  0120BE  2A41               	incf	_eusart2TxHead,f,c	;volatile
 10579                           
 10580                           ; BSR set to: 14
 10581                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 10582  0120C0  0E3F               	movlw	63
 10583  0120C2  6441               	cpfsgt	_eusart2TxHead,c	;volatile
 10584  0120C4  D002               	goto	l236
 10585                           
 10586                           ; BSR set to: 14
 10587                           ;eusart2.c: 165: {
 10588                           ;eusart2.c: 166: eusart2TxHead = 0;
 10589  0120C6  0E00               	movlw	0
 10590  0120C8  6E41               	movwf	_eusart2TxHead,c	;volatile
 10591  0120CA                     l236:
 10592                           
 10593                           ; BSR set to: 14
 10594                           ;eusart2.c: 167: }
 10595                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 10596                           
 10597                           ; BSR set to: 14
 10598  0120CA  064B               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 10599  0120CC                     l235:
 10600                           
 10601                           ; BSR set to: 14
 10602                           ;eusart2.c: 169: }
 10603                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 10604                           
 10605                           ; BSR set to: 14
 10606  0120CC  8D2C               	bsf	44,6,b	;volatile
 10607                           
 10608                           ; BSR set to: 14
 10609  0120CE  0012               	return		;funcret
 10610  0120D0                     __end_of_EUSART2_Write:
 10611                           	opt stack 0
 10612                           tosu	equ	0xFFF
 10613                           tosh	equ	0xFFE
 10614                           tosl	equ	0xFFD
 10615                           pclath	equ	0xFFA
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           postinc0	equ	0xFEE
 10624                           wreg	equ	0xFE8
 10625                           indf1	equ	0xFE7
 10626                           postinc1	equ	0xFE6
 10627                           postdec1	equ	0xFE5
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           plusw2	equ	0xFDB
 10634                           fsr2h	equ	0xFDA
 10635                           fsr2l	equ	0xFD9
 10636                           status	equ	0xFD8
 10637                           
 10638 ;; *************** function ___lwmod *****************
 10639 ;; Defined at:
 10640 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  dividend        2    7[BANK0 ] unsigned int 
 10643 ;;  divisor         2    9[BANK0 ] unsigned int 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  counter         1   11[BANK0 ] unsigned char 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  2    7[BANK0 ] unsigned int 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10655 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10658 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;Total ram usage:        5 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    5
 10662 ;; This function calls:
 10663 ;;		Nothing
 10664 ;; This function is called by:
 10665 ;;		_printf
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text61
 10670  011F10                     __ptext61:
 10671                           	opt stack 0
 10672  011F10                     ___lwmod:
 10673                           	opt stack 22
 10674                           
 10675                           ; BSR set to: 14
 10676                           ;incstack = 0
 10677  011F10  0100               	movlb	0	; () banked
 10678  011F12  51B8               	movf	___lwmod@divisor& (0+255),w,b
 10679  011F14  11B9               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10680  011F16  B4D8               	btfsc	status,2,c
 10681  011F18  D018               	goto	l1500
 10682                           
 10683                           ; BSR set to: 0
 10684  011F1A  0E01               	movlw	1
 10685  011F1C  6FBA               	movwf	___lwmod@counter& (0+255),b
 10686  011F1E  D004               	goto	l1495
 10687  011F20                     
 10688                           ; BSR set to: 0
 10689                           
 10690                           ; BSR set to: 0
 10691  011F20  90D8               	bcf	status,0,c
 10692  011F22  37B8               	rlcf	___lwmod@divisor& (0+255),f,b
 10693  011F24  37B9               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10694  011F26  2BBA               	incf	___lwmod@counter& (0+255),f,b
 10695  011F28                     l1495:
 10696                           
 10697                           ; BSR set to: 0
 10698                           
 10699                           ; BSR set to: 0
 10700  011F28  AFB9               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10701  011F2A  D7FA               	goto	l1496
 10702  011F2C                     u5050:
 10703                           
 10704                           ; BSR set to: 0
 10705                           
 10706                           ; BSR set to: 0
 10707                           
 10708                           ; BSR set to: 0
 10709  011F2C  51B8               	movf	___lwmod@divisor& (0+255),w,b
 10710  011F2E  5DB6               	subwf	___lwmod@dividend& (0+255),w,b
 10711  011F30  51B9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10712  011F32  59B7               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10713  011F34  A0D8               	btfss	status,0,c
 10714  011F36  D004               	goto	l1499
 10715                           
 10716                           ; BSR set to: 0
 10717  011F38  51B8               	movf	___lwmod@divisor& (0+255),w,b
 10718  011F3A  5FB6               	subwf	___lwmod@dividend& (0+255),f,b
 10719  011F3C  51B9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10720  011F3E  5BB7               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10721  011F40                     l1499:
 10722                           
 10723                           ; BSR set to: 0
 10724                           
 10725                           ; BSR set to: 0
 10726  011F40  90D8               	bcf	status,0,c
 10727  011F42  33B9               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10728  011F44  33B8               	rrcf	___lwmod@divisor& (0+255),f,b
 10729                           
 10730                           ; BSR set to: 0
 10731  011F46  2FBA               	decfsz	___lwmod@counter& (0+255),f,b
 10732  011F48  D7F1               	goto	u5050
 10733  011F4A                     l1500:
 10734                           
 10735                           ; BSR set to: 0
 10736                           
 10737                           ; BSR set to: 0
 10738  011F4A  C0B6  F0B6         	movff	___lwmod@dividend,?___lwmod
 10739  011F4E  C0B7  F0B7         	movff	___lwmod@dividend+1,?___lwmod+1
 10740                           
 10741                           ; BSR set to: 0
 10742  011F52  0012               	return		;funcret
 10743  011F54                     __end_of___lwmod:
 10744                           	opt stack 0
 10745                           tosu	equ	0xFFF
 10746                           tosh	equ	0xFFE
 10747                           tosl	equ	0xFFD
 10748                           pclath	equ	0xFFA
 10749                           tblptru	equ	0xFF8
 10750                           tblptrh	equ	0xFF7
 10751                           tblptrl	equ	0xFF6
 10752                           tablat	equ	0xFF5
 10753                           prodh	equ	0xFF4
 10754                           prodl	equ	0xFF3
 10755                           intcon	equ	0xFF2
 10756                           postinc0	equ	0xFEE
 10757                           wreg	equ	0xFE8
 10758                           indf1	equ	0xFE7
 10759                           postinc1	equ	0xFE6
 10760                           postdec1	equ	0xFE5
 10761                           fsr1h	equ	0xFE2
 10762                           fsr1l	equ	0xFE1
 10763                           indf2	equ	0xFDF
 10764                           postinc2	equ	0xFDE
 10765                           postdec2	equ	0xFDD
 10766                           plusw2	equ	0xFDB
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function ___lwdiv *****************
 10772 ;; Defined at:
 10773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;  dividend        2    0[BANK0 ] unsigned int 
 10776 ;;  divisor         2    2[BANK0 ] unsigned int 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  quotient        2    5[BANK0 ] unsigned int 
 10779 ;;  counter         1    4[BANK0 ] unsigned char 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  2    0[BANK0 ] unsigned int 
 10782 ;; Registers used:
 10783 ;;		wreg, status,2, status,0
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10790 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10792 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10793 ;;Total ram usage:        7 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    5
 10796 ;; This function calls:
 10797 ;;		Nothing
 10798 ;; This function is called by:
 10799 ;;		_printf
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           	psect	text62
 10804  011CE6                     __ptext62:
 10805                           	opt stack 0
 10806  011CE6                     ___lwdiv:
 10807                           	opt stack 22
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;incstack = 0
 10811  011CE6  0E00               	movlw	0
 10812  011CE8  0100               	movlb	0	; () banked
 10813  011CEA  6FB5               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10814  011CEC  0E00               	movlw	0
 10815  011CEE  6FB4               	movwf	___lwdiv@quotient& (0+255),b
 10816                           
 10817                           ; BSR set to: 0
 10818  011CF0  51B1               	movf	___lwdiv@divisor& (0+255),w,b
 10819  011CF2  11B2               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10820  011CF4  B4D8               	btfsc	status,2,c
 10821  011CF6  D01C               	goto	l1490
 10822                           
 10823                           ; BSR set to: 0
 10824  011CF8  0E01               	movlw	1
 10825  011CFA  6FB3               	movwf	___lwdiv@counter& (0+255),b
 10826  011CFC  D004               	goto	l1485
 10827  011CFE                     
 10828                           ; BSR set to: 0
 10829                           
 10830                           ; BSR set to: 0
 10831  011CFE  90D8               	bcf	status,0,c
 10832  011D00  37B1               	rlcf	___lwdiv@divisor& (0+255),f,b
 10833  011D02  37B2               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10834  011D04  2BB3               	incf	___lwdiv@counter& (0+255),f,b
 10835  011D06                     l1485:
 10836                           
 10837                           ; BSR set to: 0
 10838                           
 10839                           ; BSR set to: 0
 10840  011D06  AFB2               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10841  011D08  D7FA               	goto	l1486
 10842  011D0A                     u5020:
 10843                           
 10844                           ; BSR set to: 0
 10845                           
 10846                           ; BSR set to: 0
 10847                           
 10848                           ; BSR set to: 0
 10849  011D0A  90D8               	bcf	status,0,c
 10850  011D0C  37B4               	rlcf	___lwdiv@quotient& (0+255),f,b
 10851  011D0E  37B5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10852                           
 10853                           ; BSR set to: 0
 10854  011D10  51B1               	movf	___lwdiv@divisor& (0+255),w,b
 10855  011D12  5DAF               	subwf	___lwdiv@dividend& (0+255),w,b
 10856  011D14  51B2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10857  011D16  59B0               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10858  011D18  A0D8               	btfss	status,0,c
 10859  011D1A  D005               	goto	l1489
 10860                           
 10861                           ; BSR set to: 0
 10862  011D1C  51B1               	movf	___lwdiv@divisor& (0+255),w,b
 10863  011D1E  5FAF               	subwf	___lwdiv@dividend& (0+255),f,b
 10864  011D20  51B2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10865  011D22  5BB0               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10866                           
 10867                           ; BSR set to: 0
 10868  011D24  81B4               	bsf	___lwdiv@quotient& (0+255),0,b
 10869  011D26                     l1489:
 10870                           
 10871                           ; BSR set to: 0
 10872                           
 10873                           ; BSR set to: 0
 10874  011D26  90D8               	bcf	status,0,c
 10875  011D28  33B2               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10876  011D2A  33B1               	rrcf	___lwdiv@divisor& (0+255),f,b
 10877                           
 10878                           ; BSR set to: 0
 10879  011D2C  2FB3               	decfsz	___lwdiv@counter& (0+255),f,b
 10880  011D2E  D7ED               	goto	u5020
 10881  011D30                     l1490:
 10882                           
 10883                           ; BSR set to: 0
 10884                           
 10885                           ; BSR set to: 0
 10886  011D30  C0B4  F0AF         	movff	___lwdiv@quotient,?___lwdiv
 10887  011D34  C0B5  F0B0         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10888                           
 10889                           ; BSR set to: 0
 10890  011D38  0012               	return		;funcret
 10891  011D3A                     __end_of___lwdiv:
 10892                           	opt stack 0
 10893                           tosu	equ	0xFFF
 10894                           tosh	equ	0xFFE
 10895                           tosl	equ	0xFFD
 10896                           pclath	equ	0xFFA
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           intcon	equ	0xFF2
 10904                           postinc0	equ	0xFEE
 10905                           wreg	equ	0xFE8
 10906                           indf1	equ	0xFE7
 10907                           postinc1	equ	0xFE6
 10908                           postdec1	equ	0xFE5
 10909                           fsr1h	equ	0xFE2
 10910                           fsr1l	equ	0xFE1
 10911                           indf2	equ	0xFDF
 10912                           postinc2	equ	0xFDE
 10913                           postdec2	equ	0xFDD
 10914                           plusw2	equ	0xFDB
 10915                           fsr2h	equ	0xFDA
 10916                           fsr2l	equ	0xFD9
 10917                           status	equ	0xFD8
 10918                           
 10919 ;; *************** function _MTOUCH_Button_isPressed *****************
 10920 ;; Defined at:
 10921 ;;		line 406 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;  name            1    wreg     enum E17454
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;  name            1    1[BANK0 ] enum E17454
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  1    wreg      unsigned char 
 10928 ;; Registers used:
 10929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10938 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10939 ;;Total ram usage:        2 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    5
 10942 ;; This function calls:
 10943 ;;		Nothing
 10944 ;; This function is called by:
 10945 ;;		_mTouchCallback
 10946 ;;		_ringBufferLUT
 10947 ;;		_MTOUCH_Button_Buttonmask_Get
 10948 ;; This function uses a non-reentrant model
 10949 ;;
 10950                           
 10951                           	psect	text63
 10952  0121B8                     __ptext63:
 10953                           	opt stack 0
 10954  0121B8                     _MTOUCH_Button_isPressed:
 10955                           	opt stack 23
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;incstack = 0
 10959                           ;MTOUCH_Button_isPressed@name stored from wreg
 10960  0121B8  0100               	movlb	0	; () banked
 10961  0121BA  6FB0               	movwf	MTOUCH_Button_isPressed@name& (0+255),b
 10962                           
 10963                           ;mtouch_button.c: 408: if(name < 5)
 10964  0121BC  0E05               	movlw	5
 10965  0121BE  0100               	movlb	0	; () banked
 10966  0121C0  61B0               	cpfslt	MTOUCH_Button_isPressed@name& (0+255),b
 10967  0121C2  D014               	goto	l837
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;mtouch_button.c: 409: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
 10971  0121C4  51B0               	movf	MTOUCH_Button_isPressed@name& (0+255),w,b
 10972  0121C6  0D11               	mullw	17
 10973  0121C8  0E02               	movlw	2
 10974  0121CA  26F3               	addwf	prodl,f,c
 10975  0121CC  0E00               	movlw	0
 10976  0121CE  22F4               	addwfc	prodh,f,c
 10977  0121D0  0E40               	movlw	low _mtouch_button
 10978  0121D2  24F3               	addwf	prodl,w,c
 10979  0121D4  6ED9               	movwf	fsr2l,c
 10980  0121D6  0E01               	movlw	high _mtouch_button
 10981  0121D8  20F4               	addwfc	prodh,w,c
 10982  0121DA  6EDA               	movwf	fsr2h,c
 10983  0121DC  0E02               	movlw	2
 10984  0121DE  18DE               	xorwf	postinc2,w,c
 10985  0121E0  A4D8               	btfss	status,2,c
 10986  0121E2  D002               	goto	u5240
 10987  0121E4  0E01               	movlw	1
 10988  0121E6  0012               	return	
 10989  0121E8                     u5240:
 10990  0121E8  0E00               	movlw	0
 10991                           
 10992                           ; BSR set to: 0
 10993                           
 10994                           ; BSR set to: 0
 10995  0121EA  0012               	return	
 10996  0121EC                     l837:
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;mtouch_button.c: 410: else
 11000                           ;mtouch_button.c: 411: return 0;
 11001                           
 11002                           ; BSR set to: 0
 11003  0121EC  0E00               	movlw	0
 11004                           
 11005                           ; BSR set to: 0
 11006  0121EE  0012               	return	
 11007  0121F0                     __end_of_MTOUCH_Button_isPressed:
 11008                           	opt stack 0
 11009                           tosu	equ	0xFFF
 11010                           tosh	equ	0xFFE
 11011                           tosl	equ	0xFFD
 11012                           pclath	equ	0xFFA
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           postinc0	equ	0xFEE
 11021                           wreg	equ	0xFE8
 11022                           indf1	equ	0xFE7
 11023                           postinc1	equ	0xFE6
 11024                           postdec1	equ	0xFE5
 11025                           fsr1h	equ	0xFE2
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           plusw2	equ	0xFDB
 11031                           fsr2h	equ	0xFDA
 11032                           fsr2l	equ	0xFD9
 11033                           status	equ	0xFD8
 11034                           
 11035 ;; *************** function _MTOUCH_Button_Initialize *****************
 11036 ;; Defined at:
 11037 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  name            1    wreg     enum E17454
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;  name            1    1[BANK0 ] enum E17454
 11042 ;;  button          2    2[BANK0 ] PTR struct .
 11043 ;;		 -> mtouch_button(85), 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11054 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11057 ;;Total ram usage:        3 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    6
 11060 ;; This function calls:
 11061 ;;		_MTOUCH_Sensor_Calibrate
 11062 ;; This function is called by:
 11063 ;;		_MTOUCH_Button_InitializeAll
 11064 ;;		_Button_Service
 11065 ;;		_Button_State_NotPressed
 11066 ;;		_Button_State_Pressed
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           	psect	text64
 11071  011A20                     __ptext64:
 11072                           	opt stack 0
 11073  011A20                     _MTOUCH_Button_Initialize:
 11074                           	opt stack 21
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;incstack = 0
 11078                           ;MTOUCH_Button_Initialize@name stored from wreg
 11079  011A20  0100               	movlb	0	; () banked
 11080  011A22  6FB0               	movwf	MTOUCH_Button_Initialize@name& (0+255),b
 11081                           
 11082                           ;mtouch_button.c: 199: mtouch_button_t* button = &mtouch_button[name];
 11083  011A24  0100               	movlb	0	; () banked
 11084  011A26  51B0               	movf	MTOUCH_Button_Initialize@name& (0+255),w,b
 11085  011A28  0D11               	mullw	17
 11086  011A2A  0E40               	movlw	low _mtouch_button
 11087  011A2C  24F3               	addwf	prodl,w,c
 11088  011A2E  6FB1               	movwf	MTOUCH_Button_Initialize@button& (0+255),b
 11089  011A30  0E01               	movlw	high _mtouch_button
 11090  011A32  20F4               	addwfc	prodh,w,c
 11091  011A34  6FB2               	movwf	(MTOUCH_Button_Initialize@button+1)& (0+255),b
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;mtouch_button.c: 201: button->state = MTOUCH_BUTTON_STATE_initializing;
 11095  011A36  EE20 F002          	lfsr	2,2
 11096  011A3A  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 11097  011A3C  26D9               	addwf	fsr2l,f,c
 11098  011A3E  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 11099  011A40  22DA               	addwfc	fsr2h,f,c
 11100  011A42  0E00               	movlw	0
 11101  011A44  6EDF               	movwf	indf2,c
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;mtouch_button.c: 202: button->baseline = (mtouch_button_baseline_t)0;
 11105  011A46  EE20 F006          	lfsr	2,6
 11106  011A4A  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 11107  011A4C  26D9               	addwf	fsr2l,f,c
 11108  011A4E  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 11109  011A50  22DA               	addwfc	fsr2h,f,c
 11110  011A52  6ADE               	clrf	postinc2,c
 11111  011A54  6ADE               	clrf	postinc2,c
 11112  011A56  6ADE               	clrf	postinc2,c
 11113  011A58  6ADD               	clrf	postdec2,c
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;mtouch_button.c: 203: button->counter = (mtouch_button_statecounter_t)0;
 11117  011A5A  EE20 F00B          	lfsr	2,11
 11118  011A5E  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 11119  011A60  26D9               	addwf	fsr2l,f,c
 11120  011A62  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 11121  011A64  22DA               	addwfc	fsr2h,f,c
 11122  011A66  0E00               	movlw	0
 11123  011A68  6EDE               	movwf	postinc2,c
 11124  011A6A  0E00               	movlw	0
 11125  011A6C  6EDD               	movwf	postdec2,c
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;mtouch_button.c: 204: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11129  011A6E  EE20 F00D          	lfsr	2,13
 11130  011A72  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 11131  011A74  26D9               	addwf	fsr2l,f,c
 11132  011A76  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 11133  011A78  22DA               	addwfc	fsr2h,f,c
 11134  011A7A  0E00               	movlw	0
 11135  011A7C  6EDE               	movwf	postinc2,c
 11136  011A7E  0E00               	movlw	0
 11137  011A80  6EDD               	movwf	postdec2,c
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;mtouch_button.c: 206: MTOUCH_Sensor_Calibrate(button->sensor);
 11141  011A82  EE20 F001          	lfsr	2,1
 11142  011A86  51B1               	movf	MTOUCH_Button_Initialize@button& (0+255),w,b
 11143  011A88  26D9               	addwf	fsr2l,f,c
 11144  011A8A  51B2               	movf	(MTOUCH_Button_Initialize@button+1)& (0+255),w,b
 11145  011A8C  22DA               	addwfc	fsr2h,f,c
 11146  011A8E  50DF               	movf	indf2,w,c
 11147  011A90  EC2E  F092         	call	_MTOUCH_Sensor_Calibrate
 11148  011A94  0012               	return		;funcret
 11149  011A96                     __end_of_MTOUCH_Button_Initialize:
 11150                           	opt stack 0
 11151                           tosu	equ	0xFFF
 11152                           tosh	equ	0xFFE
 11153                           tosl	equ	0xFFD
 11154                           pclath	equ	0xFFA
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           postinc0	equ	0xFEE
 11163                           wreg	equ	0xFE8
 11164                           indf1	equ	0xFE7
 11165                           postinc1	equ	0xFE6
 11166                           postdec1	equ	0xFE5
 11167                           fsr1h	equ	0xFE2
 11168                           fsr1l	equ	0xFE1
 11169                           indf2	equ	0xFDF
 11170                           postinc2	equ	0xFDE
 11171                           postdec2	equ	0xFDD
 11172                           plusw2	equ	0xFDB
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11178 ;; Defined at:
 11179 ;;		line 764 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  sensor          1    wreg     enum E17513
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;  sensor          1    0[BANK0 ] enum E17513
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      void 
 11186 ;; Registers used:
 11187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11197 ;;Total ram usage:        1 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    5
 11200 ;; This function calls:
 11201 ;;		Nothing
 11202 ;; This function is called by:
 11203 ;;		_MTOUCH_Sensor_Initialize
 11204 ;;		_MTOUCH_Button_Initialize
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           	psect	text65
 11209  01245C                     __ptext65:
 11210                           	opt stack 0
 11211  01245C                     _MTOUCH_Sensor_Calibrate:
 11212                           	opt stack 21
 11213                           
 11214                           ;incstack = 0
 11215                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 11216  01245C  0100               	movlb	0	; () banked
 11217  01245E  6FAF               	movwf	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 11218                           
 11219                           ;mtouch_sensor.c: 766: if(sensor < 5)
 11220  012460  0E05               	movlw	5
 11221  012462  0100               	movlb	0	; () banked
 11222  012464  61AF               	cpfslt	MTOUCH_Sensor_Calibrate@sensor& (0+255),b
 11223  012466  0012               	return	
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;mtouch_sensor.c: 767: {
 11227                           ;mtouch_sensor.c: 768: mtouch_sensor[sensor].calibrated = 0;
 11228  012468  51AF               	movf	MTOUCH_Sensor_Calibrate@sensor& (0+255),w,b
 11229  01246A  0D09               	mullw	9
 11230  01246C  0E08               	movlw	8
 11231  01246E  26F3               	addwf	prodl,f,c
 11232  012470  0E00               	movlw	0
 11233  012472  22F4               	addwfc	prodh,f,c
 11234  012474  0E82               	movlw	low _mtouch_sensor
 11235  012476  24F3               	addwf	prodl,w,c
 11236  012478  6ED9               	movwf	fsr2l,c
 11237  01247A  0E00               	movlw	high _mtouch_sensor
 11238  01247C  20F4               	addwfc	prodh,w,c
 11239  01247E  6EDA               	movwf	fsr2h,c
 11240  012480  96DF               	bcf	indf2,3,c
 11241  012482  0012               	return	
 11242  012484                     __end_of_MTOUCH_Sensor_Calibrate:
 11243                           	opt stack 0
 11244                           tosu	equ	0xFFF
 11245                           tosh	equ	0xFFE
 11246                           tosl	equ	0xFFD
 11247                           pclath	equ	0xFFA
 11248                           tblptru	equ	0xFF8
 11249                           tblptrh	equ	0xFF7
 11250                           tblptrl	equ	0xFF6
 11251                           tablat	equ	0xFF5
 11252                           prodh	equ	0xFF4
 11253                           prodl	equ	0xFF3
 11254                           intcon	equ	0xFF2
 11255                           postinc0	equ	0xFEE
 11256                           wreg	equ	0xFE8
 11257                           indf1	equ	0xFE7
 11258                           postinc1	equ	0xFE6
 11259                           postdec1	equ	0xFE5
 11260                           fsr1h	equ	0xFE2
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           plusw2	equ	0xFDB
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _Button_Check_AKS_Block *****************
 11271 ;; Defined at:
 11272 ;;		line 558 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  button          2    8[BANK0 ] PTR struct .
 11275 ;;		 -> mtouch_button(85), 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  check_button    2   17[BANK0 ] PTR struct .
 11278 ;;		 -> mtouch_button(85), 
 11279 ;;  surplus_devi    2   15[BANK0 ] int 
 11280 ;;  surplus_devi    2   12[BANK0 ] int 
 11281 ;;  currentAKSGr    1   14[BANK0 ] enum E17520
 11282 ;; Return value:  Size  Location     Type
 11283 ;;                  1    wreg      unsigned char 
 11284 ;; Registers used:
 11285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11286 ;; Tracked objects:
 11287 ;;		On entry : 0/0
 11288 ;;		On exit  : 0/0
 11289 ;;		Unchanged: 0/0
 11290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11291 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11292 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11293 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11294 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11295 ;;Total ram usage:       11 bytes
 11296 ;; Hardware stack levels used:    1
 11297 ;; Hardware stack levels required when called:    6
 11298 ;; This function calls:
 11299 ;;		_Button_Unscaled_Deviation_Get
 11300 ;; This function is called by:
 11301 ;;		_Button_State_NotPressed
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           	psect	text66
 11306  010E76                     __ptext66:
 11307                           	opt stack 0
 11308  010E76                     _Button_Check_AKS_Block:
 11309                           	opt stack 20
 11310                           
 11311                           ;mtouch_button.c: 560: enum mtouch_button_aks_group currentAKSGroup = button->aks_group;
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;incstack = 0
 11315  010E76  0100               	movlb	0	; () banked
 11316  010E78  EE20 F003          	lfsr	2,3
 11317  010E7C  51B7               	movf	Button_Check_AKS_Block@button& (0+255),w,b
 11318  010E7E  26D9               	addwf	fsr2l,f,c
 11319  010E80  51B8               	movf	(Button_Check_AKS_Block@button+1)& (0+255),w,b
 11320  010E82  22DA               	addwfc	fsr2h,f,c
 11321  010E84  50DF               	movf	indf2,w,c
 11322  010E86  6FBD               	movwf	Button_Check_AKS_Block@currentAKSGroup& (0+255),b
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;mtouch_button.c: 561: int16_t surplus_deviation_this_button,surplus_deviation_check_but
      +                          ton;
 11326                           ;mtouch_button.c: 562: mtouch_button_t* check_button;
 11327                           ;mtouch_button.c: 564: surplus_deviation_this_button = (int16_t)(Button_Unscaled_Deviati
      +                          on_Get(button) - (mtouch_button_reading_t)button->threshold);
 11328  010E88  EE20 F00F          	lfsr	2,15
 11329  010E8C  51B7               	movf	Button_Check_AKS_Block@button& (0+255),w,b
 11330  010E8E  26D9               	addwf	fsr2l,f,c
 11331  010E90  51B8               	movf	(Button_Check_AKS_Block@button+1)& (0+255),w,b
 11332  010E92  22DA               	addwfc	fsr2h,f,c
 11333  010E94  50DF               	movf	indf2,w,c
 11334  010E96  6FB9               	movwf	??_Button_Check_AKS_Block& (0+255),b
 11335  010E98  6BBA               	clrf	(??_Button_Check_AKS_Block+1)& (0+255),b
 11336  010E9A  BFB9               	btfsc	??_Button_Check_AKS_Block& (0+255),7,b
 11337  010E9C  07BA               	decf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11338  010E9E  1FB9               	comf	??_Button_Check_AKS_Block& (0+255),f,b
 11339  010EA0  1FBA               	comf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11340  010EA2  4BB9               	infsnz	??_Button_Check_AKS_Block& (0+255),f,b
 11341  010EA4  2BBA               	incf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11342  010EA6  C0B7  F0AF         	movff	Button_Check_AKS_Block@button,Button_Unscaled_Deviation_Get@button
 11343  010EAA  C0B8  F0B0         	movff	Button_Check_AKS_Block@button+1,Button_Unscaled_Deviation_Get@button+1
 11344  010EAE  EC46  F08E         	call	_Button_Unscaled_Deviation_Get	;wreg free
 11345  010EB2  0100               	movlb	0	; () banked
 11346  010EB4  51B9               	movf	??_Button_Check_AKS_Block& (0+255),w,b
 11347  010EB6  25AF               	addwf	?_Button_Unscaled_Deviation_Get& (0+255),w,b
 11348  010EB8  6FBB               	movwf	Button_Check_AKS_Block@surplus_deviation_this_button& (0+255),b
 11349  010EBA  51BA               	movf	(??_Button_Check_AKS_Block+1)& (0+255),w,b
 11350  010EBC  21B0               	addwfc	(?_Button_Unscaled_Deviation_Get+1)& (0+255),w,b
 11351  010EBE  6FBC               	movwf	(Button_Check_AKS_Block@surplus_deviation_this_button+1)& (0+255),b
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;mtouch_button.c: 566: for(check_button = &mtouch_button[0];check_button <= &mtouch_butt
      +                          on[5-1];check_button++)
 11355  010EC0  0E40               	movlw	low _mtouch_button
 11356  010EC2  6FC0               	movwf	Button_Check_AKS_Block@check_button& (0+255),b
 11357  010EC4  0E01               	movlw	high _mtouch_button
 11358  010EC6  6FC1               	movwf	(Button_Check_AKS_Block@check_button+1)& (0+255),b
 11359                           
 11360                           ; BSR set to: 0
 11361  010EC8  51C1               	movf	(Button_Check_AKS_Block@check_button+1)& (0+255),w,b
 11362  010ECA  0801               	sublw	high (_mtouch_button+68)
 11363  010ECC  E102               	bnz	u5365
 11364  010ECE  51C0               	movf	Button_Check_AKS_Block@check_button& (0+255),w,b
 11365  010ED0  0884               	sublw	low (_mtouch_button+68)
 11366  010ED2                     u5365:
 11367  010ED2  A0D8               	btfss	status,0,c
 11368  010ED4  D05B               	goto	u5420
 11369  010ED6                     
 11370                           ; BSR set to: 0
 11371                           ;mtouch_button.c: 567: {
 11372                           ;mtouch_button.c: 568: if(check_button->name == button->name)
 11373                           
 11374                           ; BSR set to: 0
 11375  010ED6  C0B7  FFD9         	movff	Button_Check_AKS_Block@button,fsr2l
 11376  010EDA  C0B8  FFDA         	movff	Button_Check_AKS_Block@button+1,fsr2h
 11377  010EDE  C0C0  FFE1         	movff	Button_Check_AKS_Block@check_button,fsr1l
 11378  010EE2  C0C1  FFE2         	movff	Button_Check_AKS_Block@check_button+1,fsr1h
 11379  010EE6  50DE               	movf	postinc2,w,c
 11380  010EE8  18E6               	xorwf	postinc1,w,c
 11381  010EEA  B4D8               	btfsc	status,2,c
 11382  010EEC  D045               	goto	l910
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;mtouch_button.c: 572: else
 11386                           ;mtouch_button.c: 573: {
 11387                           ;mtouch_button.c: 574: if(check_button->aks_group == currentAKSGroup)
 11388                           
 11389                           ; BSR set to: 0
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;mtouch_button.c: 569: {
 11393                           ;mtouch_button.c: 571: }
 11394  010EEE  EE20 F003          	lfsr	2,3
 11395  010EF2  51C0               	movf	Button_Check_AKS_Block@check_button& (0+255),w,b
 11396  010EF4  26D9               	addwf	fsr2l,f,c
 11397  010EF6  51C1               	movf	(Button_Check_AKS_Block@check_button+1)& (0+255),w,b
 11398  010EF8  22DA               	addwfc	fsr2h,f,c
 11399  010EFA  51BD               	movf	Button_Check_AKS_Block@currentAKSGroup& (0+255),w,b
 11400  010EFC  18DE               	xorwf	postinc2,w,c
 11401  010EFE  A4D8               	btfss	status,2,c
 11402  010F00  D03B               	goto	l910
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;mtouch_button.c: 575: {
 11406                           ;mtouch_button.c: 576: if(check_button->state == MTOUCH_BUTTON_STATE_pressed)
 11407  010F02  EE20 F002          	lfsr	2,2
 11408  010F06  51C0               	movf	Button_Check_AKS_Block@check_button& (0+255),w,b
 11409  010F08  26D9               	addwf	fsr2l,f,c
 11410  010F0A  51C1               	movf	(Button_Check_AKS_Block@check_button+1)& (0+255),w,b
 11411  010F0C  22DA               	addwfc	fsr2h,f,c
 11412  010F0E  0E02               	movlw	2
 11413  010F10  18DE               	xorwf	postinc2,w,c
 11414  010F12  A4D8               	btfss	status,2,c
 11415  010F14  D002               	goto	l907
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;mtouch_button.c: 577: return 1;
 11419  010F16  0E01               	movlw	1
 11420                           
 11421                           ; BSR set to: 0
 11422  010F18  0012               	return	
 11423  010F1A                     l907:
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;mtouch_button.c: 578: else
 11427                           ;mtouch_button.c: 579: {
 11428                           ;mtouch_button.c: 580: surplus_deviation_check_button = (int16_t)(Button_Unscaled_Deviat
      +                          ion_Get(check_button) - (mtouch_button_reading_t)check_button->threshold);
 11429                           
 11430                           ; BSR set to: 0
 11431  010F1A  EE20 F00F          	lfsr	2,15
 11432  010F1E  51C0               	movf	Button_Check_AKS_Block@check_button& (0+255),w,b
 11433  010F20  26D9               	addwf	fsr2l,f,c
 11434  010F22  51C1               	movf	(Button_Check_AKS_Block@check_button+1)& (0+255),w,b
 11435  010F24  22DA               	addwfc	fsr2h,f,c
 11436  010F26  50DF               	movf	indf2,w,c
 11437  010F28  6FB9               	movwf	??_Button_Check_AKS_Block& (0+255),b
 11438  010F2A  6BBA               	clrf	(??_Button_Check_AKS_Block+1)& (0+255),b
 11439  010F2C  BFB9               	btfsc	??_Button_Check_AKS_Block& (0+255),7,b
 11440  010F2E  07BA               	decf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11441  010F30  1FB9               	comf	??_Button_Check_AKS_Block& (0+255),f,b
 11442  010F32  1FBA               	comf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11443  010F34  4BB9               	infsnz	??_Button_Check_AKS_Block& (0+255),f,b
 11444  010F36  2BBA               	incf	(??_Button_Check_AKS_Block+1)& (0+255),f,b
 11445  010F38  C0C0  F0AF         	movff	Button_Check_AKS_Block@check_button,Button_Unscaled_Deviation_Get@button
 11446  010F3C  C0C1  F0B0         	movff	Button_Check_AKS_Block@check_button+1,Button_Unscaled_Deviation_Get@button+1
 11447  010F40  EC46  F08E         	call	_Button_Unscaled_Deviation_Get	;wreg free
 11448  010F44  0100               	movlb	0	; () banked
 11449  010F46  51B9               	movf	??_Button_Check_AKS_Block& (0+255),w,b
 11450  010F48  25AF               	addwf	?_Button_Unscaled_Deviation_Get& (0+255),w,b
 11451  010F4A  6FBE               	movwf	Button_Check_AKS_Block@surplus_deviation_check_button& (0+255),b
 11452  010F4C  51BA               	movf	(??_Button_Check_AKS_Block+1)& (0+255),w,b
 11453  010F4E  21B0               	addwfc	(?_Button_Unscaled_Deviation_Get+1)& (0+255),w,b
 11454  010F50  6FBF               	movwf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)& (0+255),b
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;mtouch_button.c: 581: if(surplus_deviation_check_button > 0 && surplus_deviation_check_
      +                          button > surplus_deviation_this_button)
 11458  010F52  BFBF               	btfsc	(Button_Check_AKS_Block@surplus_deviation_check_button+1)& (0+255),7,b
 11459  010F54  D011               	goto	l910
 11460  010F56  51BF               	movf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)& (0+255),w,b
 11461  010F58  E103               	bnz	u5400
 11462  010F5A  05BE               	decf	Button_Check_AKS_Block@surplus_deviation_check_button& (0+255),w,b
 11463  010F5C  A0D8               	btfss	status,0,c
 11464  010F5E  D00C               	goto	l910
 11465  010F60                     u5400:
 11466                           
 11467                           ; BSR set to: 0
 11468  010F60  51BE               	movf	Button_Check_AKS_Block@surplus_deviation_check_button& (0+255),w,b
 11469  010F62  5DBB               	subwf	Button_Check_AKS_Block@surplus_deviation_this_button& (0+255),w,b
 11470  010F64  51BC               	movf	(Button_Check_AKS_Block@surplus_deviation_this_button+1)& (0+255),w,b
 11471  010F66  0A80               	xorlw	128
 11472  010F68  6FB9               	movwf	??_Button_Check_AKS_Block& (0+255),b
 11473  010F6A  51BF               	movf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)& (0+255),w,b
 11474  010F6C  0A80               	xorlw	128
 11475  010F6E  59B9               	subwfb	??_Button_Check_AKS_Block& (0+255),w,b
 11476  010F70  B0D8               	btfsc	status,0,c
 11477  010F72  D002               	goto	l910
 11478                           
 11479                           ; BSR set to: 0
 11480                           ;mtouch_button.c: 582: return 1;
 11481  010F74  0E01               	movlw	1
 11482                           
 11483                           ; BSR set to: 0
 11484  010F76  0012               	return	
 11485  010F78                     l910:
 11486                           
 11487                           ; BSR set to: 0
 11488                           
 11489                           ; BSR set to: 0
 11490                           
 11491                           ; BSR set to: 0
 11492                           
 11493                           ; BSR set to: 0
 11494                           
 11495                           ; BSR set to: 0
 11496  010F78  0E11               	movlw	17
 11497  010F7A  27C0               	addwf	Button_Check_AKS_Block@check_button& (0+255),f,b
 11498  010F7C  0E00               	movlw	0
 11499  010F7E  23C1               	addwfc	(Button_Check_AKS_Block@check_button+1)& (0+255),f,b
 11500  010F80  51C1               	movf	(Button_Check_AKS_Block@check_button+1)& (0+255),w,b
 11501  010F82  0801               	sublw	high (_mtouch_button+68)
 11502  010F84  E101               	bnz	u5425
 11503  010F86  D7A3               	goto	L4
 11504  010F88                     u5425:
 11505  010F88  B0D8               	btfsc	status,0,c
 11506  010F8A  D7A5               	goto	l902
 11507  010F8C                     u5420:
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;mtouch_button.c: 583: }
 11511                           ;mtouch_button.c: 584: }
 11512                           ;mtouch_button.c: 586: }
 11513                           ;mtouch_button.c: 587: }
 11514                           ;mtouch_button.c: 588: return 0;
 11515                           
 11516                           ; BSR set to: 0
 11517  010F8C  0E00               	movlw	0
 11518  010F8E  0012               	return	
 11519  010F90                     __end_of_Button_Check_AKS_Block:
 11520                           	opt stack 0
 11521                           tosu	equ	0xFFF
 11522                           tosh	equ	0xFFE
 11523                           tosl	equ	0xFFD
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           postinc0	equ	0xFEE
 11533                           wreg	equ	0xFE8
 11534                           indf1	equ	0xFE7
 11535                           postinc1	equ	0xFE6
 11536                           postdec1	equ	0xFE5
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           plusw2	equ	0xFDB
 11543                           fsr2h	equ	0xFDA
 11544                           fsr2l	equ	0xFD9
 11545                           status	equ	0xFD8
 11546                           
 11547 ;; *************** function _Button_Unscaled_Deviation_Get *****************
 11548 ;; Defined at:
 11549 ;;		line 453 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;  button          2    0[BANK0 ] PTR struct .
 11552 ;;		 -> mtouch_button(85), 
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  2    0[BANK0 ] unsigned int 
 11557 ;; Registers used:
 11558 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11566 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11567 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11568 ;;Total ram usage:        8 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:    5
 11571 ;; This function calls:
 11572 ;;		Nothing
 11573 ;; This function is called by:
 11574 ;;		_Button_Check_AKS_Block
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text67
 11579  011C8C                     __ptext67:
 11580                           	opt stack 0
 11581  011C8C                     _Button_Unscaled_Deviation_Get:
 11582                           	opt stack 20
 11583                           
 11584                           ;mtouch_button.c: 455: return (mtouch_button_reading_t)(button->reading - (mtouch_button
      +                          _reading_t)((button->baseline)>>((uint8_t)4)));
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;incstack = 0
 11588  011C8C  0100               	movlb	0	; () banked
 11589  011C8E  EE20 F004          	lfsr	2,4
 11590  011C92  51AF               	movf	Button_Unscaled_Deviation_Get@button& (0+255),w,b
 11591  011C94  26D9               	addwf	fsr2l,f,c
 11592  011C96  51B0               	movf	(Button_Unscaled_Deviation_Get@button+1)& (0+255),w,b
 11593  011C98  22DA               	addwfc	fsr2h,f,c
 11594  011C9A  CFDE F0B1          	movff	postinc2,??_Button_Unscaled_Deviation_Get
 11595  011C9E  CFDD F0B2          	movff	postdec2,??_Button_Unscaled_Deviation_Get+1
 11596  011CA2  EE20 F006          	lfsr	2,6
 11597  011CA6  51AF               	movf	Button_Unscaled_Deviation_Get@button& (0+255),w,b
 11598  011CA8  26D9               	addwf	fsr2l,f,c
 11599  011CAA  51B0               	movf	(Button_Unscaled_Deviation_Get@button+1)& (0+255),w,b
 11600  011CAC  22DA               	addwfc	fsr2h,f,c
 11601  011CAE  CFDE F0B3          	movff	postinc2,??_Button_Unscaled_Deviation_Get+2
 11602  011CB2  CFDE F0B4          	movff	postinc2,??_Button_Unscaled_Deviation_Get+3
 11603  011CB6  CFDE F0B5          	movff	postinc2,??_Button_Unscaled_Deviation_Get+4
 11604  011CBA  CFDE F0B6          	movff	postinc2,??_Button_Unscaled_Deviation_Get+5
 11605  011CBE  0E05               	movlw	5
 11606  011CC0  D005               	goto	u5260
 11607  011CC2                     u5265:
 11608  011CC2  90D8               	bcf	status,0,c
 11609  011CC4  33B6               	rrcf	(??_Button_Unscaled_Deviation_Get+5)& (0+255),f,b
 11610  011CC6  33B5               	rrcf	(??_Button_Unscaled_Deviation_Get+4)& (0+255),f,b
 11611  011CC8  33B4               	rrcf	(??_Button_Unscaled_Deviation_Get+3)& (0+255),f,b
 11612  011CCA  33B3               	rrcf	(??_Button_Unscaled_Deviation_Get+2)& (0+255),f,b
 11613  011CCC                     u5260:
 11614  011CCC  2EE8               	decfsz	wreg,f,c
 11615  011CCE  D7F9               	goto	u5265
 11616  011CD0  1FB3               	comf	(??_Button_Unscaled_Deviation_Get+2)& (0+255),f,b
 11617  011CD2  1FB4               	comf	(??_Button_Unscaled_Deviation_Get+3)& (0+255),f,b
 11618  011CD4  4BB3               	infsnz	(??_Button_Unscaled_Deviation_Get+2)& (0+255),f,b
 11619  011CD6  2BB4               	incf	(??_Button_Unscaled_Deviation_Get+3)& (0+255),f,b
 11620  011CD8  51B1               	movf	??_Button_Unscaled_Deviation_Get& (0+255),w,b
 11621  011CDA  25B3               	addwf	(??_Button_Unscaled_Deviation_Get+2)& (0+255),w,b
 11622  011CDC  6FAF               	movwf	?_Button_Unscaled_Deviation_Get& (0+255),b
 11623  011CDE  51B2               	movf	(??_Button_Unscaled_Deviation_Get+1)& (0+255),w,b
 11624  011CE0  21B4               	addwfc	(??_Button_Unscaled_Deviation_Get+3)& (0+255),w,b
 11625  011CE2  6FB0               	movwf	(?_Button_Unscaled_Deviation_Get+1)& (0+255),b
 11626  011CE4  0012               	return	
 11627  011CE6                     __end_of_Button_Unscaled_Deviation_Get:
 11628                           	opt stack 0
 11629                           tosu	equ	0xFFF
 11630                           tosh	equ	0xFFE
 11631                           tosl	equ	0xFFD
 11632                           pclath	equ	0xFFA
 11633                           tblptru	equ	0xFF8
 11634                           tblptrh	equ	0xFF7
 11635                           tblptrl	equ	0xFF6
 11636                           tablat	equ	0xFF5
 11637                           prodh	equ	0xFF4
 11638                           prodl	equ	0xFF3
 11639                           intcon	equ	0xFF2
 11640                           postinc0	equ	0xFEE
 11641                           wreg	equ	0xFE8
 11642                           indf1	equ	0xFE7
 11643                           postinc1	equ	0xFE6
 11644                           postdec1	equ	0xFE5
 11645                           fsr1h	equ	0xFE2
 11646                           fsr1l	equ	0xFE1
 11647                           indf2	equ	0xFDF
 11648                           postinc2	equ	0xFDE
 11649                           postdec2	equ	0xFDD
 11650                           plusw2	equ	0xFDB
 11651                           fsr2h	equ	0xFDA
 11652                           fsr2l	equ	0xFD9
 11653                           status	equ	0xFD8
 11654                           
 11655 ;; *************** function _Button_Baseline_Update *****************
 11656 ;; Defined at:
 11657 ;;		line 517 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;  button          2    0[BANK0 ] PTR struct .
 11660 ;;		 -> mtouch_button(85), 
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11674 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11675 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11676 ;;Total ram usage:        6 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    5
 11679 ;; This function calls:
 11680 ;;		Nothing
 11681 ;; This function is called by:
 11682 ;;		_Button_State_Initializing
 11683 ;;		_Button_State_NotPressed
 11684 ;; This function uses a non-reentrant model
 11685 ;;
 11686                           
 11687                           	psect	text68
 11688  0112C4                     __ptext68:
 11689                           	opt stack 0
 11690  0112C4                     _Button_Baseline_Update:
 11691                           	opt stack 21
 11692                           
 11693                           ;mtouch_button.c: 519: if (GIE == (uint8_t)1)
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;incstack = 0
 11697  0112C4  AEF2               	btfss	intcon,7,c	;volatile
 11698  0112C6  D040               	goto	l884
 11699                           
 11700                           ;mtouch_button.c: 520: {
 11701                           ;mtouch_button.c: 521: GIE = (uint8_t)0;
 11702  0112C8  9EF2               	bcf	intcon,7,c	;volatile
 11703                           
 11704                           ;mtouch_button.c: 522: button->baseline -= (button->baseline) >> ((uint8_t)4);
 11705  0112CA  0100               	movlb	0	; () banked
 11706  0112CC  EE20 F006          	lfsr	2,6
 11707  0112D0  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11708  0112D2  26D9               	addwf	fsr2l,f,c
 11709  0112D4  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11710  0112D6  22DA               	addwfc	fsr2h,f,c
 11711  0112D8  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 11712  0112DC  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update+1
 11713  0112E0  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+2
 11714  0112E4  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+3
 11715  0112E8  0E05               	movlw	5
 11716  0112EA  D005               	goto	u5340
 11717  0112EC                     u5345:
 11718  0112EC  90D8               	bcf	status,0,c
 11719  0112EE  33B4               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 11720  0112F0  33B3               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 11721  0112F2  33B2               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 11722  0112F4  33B1               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 11723  0112F6                     u5340:
 11724  0112F6  2EE8               	decfsz	wreg,f,c
 11725  0112F8  D7F9               	goto	u5345
 11726  0112FA  EE20 F006          	lfsr	2,6
 11727  0112FE  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11728  011300  26D9               	addwf	fsr2l,f,c
 11729  011302  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11730  011304  22DA               	addwfc	fsr2h,f,c
 11731  011306  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 11732  011308  5EDE               	subwf	postinc2,f,c
 11733  01130A  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 11734  01130C  5ADE               	subwfb	postinc2,f,c
 11735  01130E  51B3               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 11736  011310  5ADE               	subwfb	postinc2,f,c
 11737  011312  51B4               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 11738  011314  5ADE               	subwfb	postinc2,f,c
 11739                           
 11740                           ;mtouch_button.c: 523: button->baseline += button->reading;
 11741  011316  EE20 F004          	lfsr	2,4
 11742  01131A  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11743  01131C  26D9               	addwf	fsr2l,f,c
 11744  01131E  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11745  011320  22DA               	addwfc	fsr2h,f,c
 11746  011322  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 11747  011326  CFDD F0B2          	movff	postdec2,??_Button_Baseline_Update+1
 11748  01132A  EE20 F006          	lfsr	2,6
 11749  01132E  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11750  011330  26D9               	addwf	fsr2l,f,c
 11751  011332  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11752  011334  22DA               	addwfc	fsr2h,f,c
 11753  011336  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 11754  011338  26DE               	addwf	postinc2,f,c
 11755  01133A  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 11756  01133C  22DE               	addwfc	postinc2,f,c
 11757  01133E  0E00               	movlw	0
 11758  011340  22DE               	addwfc	postinc2,f,c
 11759  011342  22DE               	addwfc	postinc2,f,c
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;mtouch_button.c: 524: GIE = (uint8_t)1;
 11763  011344  8EF2               	bsf	intcon,7,c	;volatile
 11764                           
 11765                           ;mtouch_button.c: 525: }
 11766  011346  0012               	return	
 11767  011348                     l884:
 11768                           
 11769                           ;mtouch_button.c: 526: else
 11770                           ;mtouch_button.c: 527: {
 11771                           ;mtouch_button.c: 528: button->baseline -= (button->baseline) >> ((uint8_t)4);
 11772                           
 11773                           ; BSR set to: 0
 11774  011348  0100               	movlb	0	; () banked
 11775  01134A  EE20 F006          	lfsr	2,6
 11776  01134E  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11777  011350  26D9               	addwf	fsr2l,f,c
 11778  011352  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11779  011354  22DA               	addwfc	fsr2h,f,c
 11780  011356  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 11781  01135A  CFDE F0B2          	movff	postinc2,??_Button_Baseline_Update+1
 11782  01135E  CFDE F0B3          	movff	postinc2,??_Button_Baseline_Update+2
 11783  011362  CFDE F0B4          	movff	postinc2,??_Button_Baseline_Update+3
 11784  011366  0E05               	movlw	5
 11785  011368  D005               	goto	u5350
 11786  01136A                     u5355:
 11787  01136A  90D8               	bcf	status,0,c
 11788  01136C  33B4               	rrcf	(??_Button_Baseline_Update+3)& (0+255),f,b
 11789  01136E  33B3               	rrcf	(??_Button_Baseline_Update+2)& (0+255),f,b
 11790  011370  33B2               	rrcf	(??_Button_Baseline_Update+1)& (0+255),f,b
 11791  011372  33B1               	rrcf	??_Button_Baseline_Update& (0+255),f,b
 11792  011374                     u5350:
 11793  011374  2EE8               	decfsz	wreg,f,c
 11794  011376  D7F9               	goto	u5355
 11795  011378  EE20 F006          	lfsr	2,6
 11796  01137C  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11797  01137E  26D9               	addwf	fsr2l,f,c
 11798  011380  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11799  011382  22DA               	addwfc	fsr2h,f,c
 11800  011384  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 11801  011386  5EDE               	subwf	postinc2,f,c
 11802  011388  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 11803  01138A  5ADE               	subwfb	postinc2,f,c
 11804  01138C  51B3               	movf	(??_Button_Baseline_Update+2)& (0+255),w,b
 11805  01138E  5ADE               	subwfb	postinc2,f,c
 11806  011390  51B4               	movf	(??_Button_Baseline_Update+3)& (0+255),w,b
 11807  011392  5ADE               	subwfb	postinc2,f,c
 11808                           
 11809                           ;mtouch_button.c: 529: button->baseline += button->reading;
 11810  011394  EE20 F004          	lfsr	2,4
 11811  011398  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11812  01139A  26D9               	addwf	fsr2l,f,c
 11813  01139C  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11814  01139E  22DA               	addwfc	fsr2h,f,c
 11815  0113A0  CFDE F0B1          	movff	postinc2,??_Button_Baseline_Update
 11816  0113A4  CFDD F0B2          	movff	postdec2,??_Button_Baseline_Update+1
 11817  0113A8  EE20 F006          	lfsr	2,6
 11818  0113AC  51AF               	movf	Button_Baseline_Update@button& (0+255),w,b
 11819  0113AE  26D9               	addwf	fsr2l,f,c
 11820  0113B0  51B0               	movf	(Button_Baseline_Update@button+1)& (0+255),w,b
 11821  0113B2  22DA               	addwfc	fsr2h,f,c
 11822  0113B4  51B1               	movf	??_Button_Baseline_Update& (0+255),w,b
 11823  0113B6  26DE               	addwf	postinc2,f,c
 11824  0113B8  51B2               	movf	(??_Button_Baseline_Update+1)& (0+255),w,b
 11825  0113BA  22DE               	addwfc	postinc2,f,c
 11826  0113BC  0E00               	movlw	0
 11827  0113BE  22DE               	addwfc	postinc2,f,c
 11828  0113C0  22DE               	addwfc	postinc2,f,c
 11829  0113C2  0012               	return	
 11830  0113C4                     __end_of_Button_Baseline_Update:
 11831                           	opt stack 0
 11832                           tosu	equ	0xFFF
 11833                           tosh	equ	0xFFE
 11834                           tosl	equ	0xFFD
 11835                           pclath	equ	0xFFA
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           postinc0	equ	0xFEE
 11844                           wreg	equ	0xFE8
 11845                           indf1	equ	0xFE7
 11846                           postinc1	equ	0xFE6
 11847                           postdec1	equ	0xFE5
 11848                           fsr1h	equ	0xFE2
 11849                           fsr1l	equ	0xFE1
 11850                           indf2	equ	0xFDF
 11851                           postinc2	equ	0xFDE
 11852                           postdec2	equ	0xFDD
 11853                           plusw2	equ	0xFDB
 11854                           fsr2h	equ	0xFDA
 11855                           fsr2l	equ	0xFD9
 11856                           status	equ	0xFD8
 11857                           
 11858 ;; *************** function _Button_Baseline_Initialize *****************
 11859 ;; Defined at:
 11860 ;;		line 511 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  button          2    3[BANK0 ] PTR struct .
 11863 ;;		 -> mtouch_button(85), 
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11877 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11878 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11879 ;;Total ram usage:        6 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    6
 11882 ;; This function calls:
 11883 ;;		_MTOUCH_Sensor_RawSample_Get
 11884 ;; This function is called by:
 11885 ;;		_Button_State_Initializing
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text69
 11890  011BCE                     __ptext69:
 11891                           	opt stack 0
 11892  011BCE                     _Button_Baseline_Initialize:
 11893                           	opt stack 20
 11894                           
 11895                           ;mtouch_button.c: 513: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;incstack = 0
 11899  011BCE  0100               	movlb	0	; () banked
 11900  011BD0  EE20 F001          	lfsr	2,1
 11901  011BD4  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11902  011BD6  26D9               	addwf	fsr2l,f,c
 11903  011BD8  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11904  011BDA  22DA               	addwfc	fsr2h,f,c
 11905  011BDC  50DF               	movf	indf2,w,c
 11906  011BDE  ECF8  F090         	call	_MTOUCH_Sensor_RawSample_Get
 11907  011BE2  0100               	movlb	0	; () banked
 11908  011BE4  51AF               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 11909  011BE6  6FB4               	movwf	??_Button_Baseline_Initialize& (0+255),b
 11910  011BE8  51B0               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 11911  011BEA  6FB5               	movwf	(??_Button_Baseline_Initialize+1)& (0+255),b
 11912  011BEC  6BB6               	clrf	(??_Button_Baseline_Initialize+2)& (0+255),b
 11913  011BEE  6BB7               	clrf	(??_Button_Baseline_Initialize+3)& (0+255),b
 11914  011BF0  EE20 F006          	lfsr	2,6
 11915  011BF4  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11916  011BF6  26D9               	addwf	fsr2l,f,c
 11917  011BF8  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11918  011BFA  22DA               	addwfc	fsr2h,f,c
 11919  011BFC  C0B4  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
 11920  011C00  C0B5  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
 11921  011C04  C0B6  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
 11922  011C08  C0B7  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;mtouch_button.c: 514: button->baseline <<= ((uint8_t)4);
 11926  011C0C  EE20 F006          	lfsr	2,6
 11927  011C10  51B2               	movf	Button_Baseline_Initialize@button& (0+255),w,b
 11928  011C12  26D9               	addwf	fsr2l,f,c
 11929  011C14  51B3               	movf	(Button_Baseline_Initialize@button+1)& (0+255),w,b
 11930  011C16  22DA               	addwfc	fsr2h,f,c
 11931  011C18  0E04               	movlw	4
 11932  011C1A                     u5325:
 11933  011C1A  90D8               	bcf	status,0,c
 11934  011C1C  36DE               	rlcf	postinc2,f,c
 11935  011C1E  36DE               	rlcf	postinc2,f,c
 11936  011C20  36DE               	rlcf	postinc2,f,c
 11937  011C22  36DD               	rlcf	postdec2,f,c
 11938  011C24  06D9               	decf	fsr2l,f,c
 11939  011C26  06D9               	decf	fsr2l,f,c
 11940  011C28  2EE8               	decfsz	wreg,f,c
 11941  011C2A  D7F7               	goto	u5325
 11942                           
 11943                           ; BSR set to: 0
 11944  011C2C  0012               	return		;funcret
 11945  011C2E                     __end_of_Button_Baseline_Initialize:
 11946                           	opt stack 0
 11947                           tosu	equ	0xFFF
 11948                           tosh	equ	0xFFE
 11949                           tosl	equ	0xFFD
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           postinc0	equ	0xFEE
 11959                           wreg	equ	0xFE8
 11960                           indf1	equ	0xFE7
 11961                           postinc1	equ	0xFE6
 11962                           postdec1	equ	0xFE5
 11963                           fsr1h	equ	0xFE2
 11964                           fsr1l	equ	0xFE1
 11965                           indf2	equ	0xFDF
 11966                           postinc2	equ	0xFDE
 11967                           postdec2	equ	0xFDD
 11968                           plusw2	equ	0xFDB
 11969                           fsr2h	equ	0xFDA
 11970                           fsr2l	equ	0xFD9
 11971                           status	equ	0xFD8
 11972                           
 11973 ;; *************** function _Button_Reading_Update *****************
 11974 ;; Defined at:
 11975 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;  button          2    7[BANK0 ] PTR struct .
 11978 ;;		 -> mtouch_button(85), 
 11979 ;; Auto vars:     Size  Location     Type
 11980 ;;		None
 11981 ;; Return value:  Size  Location     Type
 11982 ;;                  1    wreg      void 
 11983 ;; Registers used:
 11984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11985 ;; Tracked objects:
 11986 ;;		On entry : 0/0
 11987 ;;		On exit  : 0/0
 11988 ;;		Unchanged: 0/0
 11989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11994 ;;Total ram usage:        2 bytes
 11995 ;; Hardware stack levels used:    1
 11996 ;; Hardware stack levels required when called:    7
 11997 ;; This function calls:
 11998 ;;		_Button_Reading_Update_Helper
 11999 ;; This function is called by:
 12000 ;;		_Button_Service
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text70
 12005  012542                     __ptext70:
 12006                           	opt stack 0
 12007  012542                     _Button_Reading_Update:
 12008                           	opt stack 20
 12009                           
 12010                           ;mtouch_button.c: 486: if (GIE == (uint8_t) 1)
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;incstack = 0
 12014  012542  AEF2               	btfss	intcon,7,c	;volatile
 12015  012544  D009               	goto	l871
 12016                           
 12017                           ;mtouch_button.c: 487: {
 12018                           ;mtouch_button.c: 488: GIE = (uint8_t) 0;
 12019  012546  9EF2               	bcf	intcon,7,c	;volatile
 12020                           
 12021                           ;mtouch_button.c: 489: Button_Reading_Update_Helper(button);
 12022  012548  C0B6  F0B2         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 12023  01254C  C0B7  F0B3         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 12024  012550  ECF7  F08B         	call	_Button_Reading_Update_Helper	;wreg free
 12025                           
 12026                           ;mtouch_button.c: 490: GIE = (uint8_t) 1;
 12027  012554  8EF2               	bsf	intcon,7,c	;volatile
 12028                           
 12029                           ;mtouch_button.c: 491: }
 12030  012556  0012               	return	
 12031  012558                     l871:
 12032                           
 12033                           ;mtouch_button.c: 492: else
 12034                           ;mtouch_button.c: 493: {
 12035                           ;mtouch_button.c: 494: Button_Reading_Update_Helper(button);
 12036  012558  C0B6  F0B2         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
 12037  01255C  C0B7  F0B3         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
 12038  012560  ECF7  F08B         	call	_Button_Reading_Update_Helper	;wreg free
 12039  012564  0012               	return	
 12040  012566                     __end_of_Button_Reading_Update:
 12041                           	opt stack 0
 12042                           tosu	equ	0xFFF
 12043                           tosh	equ	0xFFE
 12044                           tosl	equ	0xFFD
 12045                           pclath	equ	0xFFA
 12046                           tblptru	equ	0xFF8
 12047                           tblptrh	equ	0xFF7
 12048                           tblptrl	equ	0xFF6
 12049                           tablat	equ	0xFF5
 12050                           prodh	equ	0xFF4
 12051                           prodl	equ	0xFF3
 12052                           intcon	equ	0xFF2
 12053                           postinc0	equ	0xFEE
 12054                           wreg	equ	0xFE8
 12055                           indf1	equ	0xFE7
 12056                           postinc1	equ	0xFE6
 12057                           postdec1	equ	0xFE5
 12058                           fsr1h	equ	0xFE2
 12059                           fsr1l	equ	0xFE1
 12060                           indf2	equ	0xFDF
 12061                           postinc2	equ	0xFDE
 12062                           postdec2	equ	0xFDD
 12063                           plusw2	equ	0xFDB
 12064                           fsr2h	equ	0xFDA
 12065                           fsr2l	equ	0xFD9
 12066                           status	equ	0xFD8
 12067                           
 12068 ;; *************** function _Button_Reading_Update_Helper *****************
 12069 ;; Defined at:
 12070 ;;		line 498 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;  button          2    3[BANK0 ] PTR struct .
 12073 ;;		 -> mtouch_button(85), 
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;		None
 12076 ;; Return value:  Size  Location     Type
 12077 ;;                  1    wreg      void 
 12078 ;; Registers used:
 12079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12080 ;; Tracked objects:
 12081 ;;		On entry : 0/0
 12082 ;;		On exit  : 0/0
 12083 ;;		Unchanged: 0/0
 12084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12085 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12087 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12089 ;;Total ram usage:        4 bytes
 12090 ;; Hardware stack levels used:    1
 12091 ;; Hardware stack levels required when called:    6
 12092 ;; This function calls:
 12093 ;;		_MTOUCH_Sensor_RawSample_Get
 12094 ;; This function is called by:
 12095 ;;		_Button_Reading_Update
 12096 ;; This function uses a non-reentrant model
 12097 ;;
 12098                           
 12099                           	psect	text71
 12100  0117EE                     __ptext71:
 12101                           	opt stack 0
 12102  0117EE                     _Button_Reading_Update_Helper:
 12103                           	opt stack 20
 12104                           
 12105                           ;mtouch_button.c: 500: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 12106                           
 12107                           ;incstack = 0
 12108  0117EE  0100               	movlb	0	; () banked
 12109  0117F0  EE20 F002          	lfsr	2,2
 12110  0117F4  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12111  0117F6  26D9               	addwf	fsr2l,f,c
 12112  0117F8  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12113  0117FA  22DA               	addwfc	fsr2h,f,c
 12114  0117FC  50DF               	movf	indf2,w,c
 12115  0117FE  B4D8               	btfsc	status,2,c
 12116  011800  D035               	goto	l876
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;mtouch_button.c: 501: {
 12120                           ;mtouch_button.c: 502: button->reading -= button->reading>>(uint8_t)2;
 12121  011802  EE20 F004          	lfsr	2,4
 12122  011806  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12123  011808  26D9               	addwf	fsr2l,f,c
 12124  01180A  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12125  01180C  22DA               	addwfc	fsr2h,f,c
 12126  01180E  CFDE F0B4          	movff	postinc2,??_Button_Reading_Update_Helper
 12127  011812  CFDD F0B5          	movff	postdec2,??_Button_Reading_Update_Helper+1
 12128  011816  90D8               	bcf	status,0,c
 12129  011818  33B5               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 12130  01181A  33B4               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 12131  01181C  90D8               	bcf	status,0,c
 12132  01181E  33B5               	rrcf	(??_Button_Reading_Update_Helper+1)& (0+255),f,b
 12133  011820  33B4               	rrcf	??_Button_Reading_Update_Helper& (0+255),f,b
 12134  011822  EE20 F004          	lfsr	2,4
 12135  011826  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12136  011828  26D9               	addwf	fsr2l,f,c
 12137  01182A  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12138  01182C  22DA               	addwfc	fsr2h,f,c
 12139  01182E  51B4               	movf	??_Button_Reading_Update_Helper& (0+255),w,b
 12140  011830  5EDE               	subwf	postinc2,f,c
 12141  011832  51B5               	movf	(??_Button_Reading_Update_Helper+1)& (0+255),w,b
 12142  011834  5ADD               	subwfb	postdec2,f,c
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;mtouch_button.c: 503: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
 12146  011836  EE20 F001          	lfsr	2,1
 12147  01183A  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12148  01183C  26D9               	addwf	fsr2l,f,c
 12149  01183E  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12150  011840  22DA               	addwfc	fsr2h,f,c
 12151  011842  50DF               	movf	indf2,w,c
 12152  011844  ECF8  F090         	call	_MTOUCH_Sensor_RawSample_Get
 12153  011848  0100               	movlb	0	; () banked
 12154  01184A  90D8               	bcf	status,0,c
 12155  01184C  33B0               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 12156  01184E  33AF               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 12157  011850  90D8               	bcf	status,0,c
 12158  011852  33B0               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),f,b
 12159  011854  33AF               	rrcf	?_MTOUCH_Sensor_RawSample_Get& (0+255),f,b
 12160  011856  EE20 F004          	lfsr	2,4
 12161  01185A  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12162  01185C  26D9               	addwf	fsr2l,f,c
 12163  01185E  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12164  011860  22DA               	addwfc	fsr2h,f,c
 12165  011862  51AF               	movf	?_MTOUCH_Sensor_RawSample_Get& (0+255),w,b
 12166  011864  26DE               	addwf	postinc2,f,c
 12167  011866  51B0               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),w,b
 12168  011868  22DD               	addwfc	postdec2,f,c
 12169                           
 12170                           ;mtouch_button.c: 504: }
 12171  01186A  0012               	return	
 12172  01186C                     l876:
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;mtouch_button.c: 505: else
 12176                           ;mtouch_button.c: 506: {
 12177                           ;mtouch_button.c: 507: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12178                           
 12179                           ; BSR set to: 0
 12180  01186C  EE20 F001          	lfsr	2,1
 12181  011870  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12182  011872  26D9               	addwf	fsr2l,f,c
 12183  011874  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12184  011876  22DA               	addwfc	fsr2h,f,c
 12185  011878  50DF               	movf	indf2,w,c
 12186  01187A  ECF8  F090         	call	_MTOUCH_Sensor_RawSample_Get
 12187  01187E  0100               	movlb	0	; () banked
 12188  011880  EE20 F004          	lfsr	2,4
 12189  011884  51B2               	movf	Button_Reading_Update_Helper@button& (0+255),w,b
 12190  011886  26D9               	addwf	fsr2l,f,c
 12191  011888  51B3               	movf	(Button_Reading_Update_Helper@button+1)& (0+255),w,b
 12192  01188A  22DA               	addwfc	fsr2h,f,c
 12193  01188C  C0AF  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
 12194  011890  C0B0  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
 12195  011894  0012               	return	
 12196  011896                     __end_of_Button_Reading_Update_Helper:
 12197                           	opt stack 0
 12198                           tosu	equ	0xFFF
 12199                           tosh	equ	0xFFE
 12200                           tosl	equ	0xFFD
 12201                           pclath	equ	0xFFA
 12202                           tblptru	equ	0xFF8
 12203                           tblptrh	equ	0xFF7
 12204                           tblptrl	equ	0xFF6
 12205                           tablat	equ	0xFF5
 12206                           prodh	equ	0xFF4
 12207                           prodl	equ	0xFF3
 12208                           intcon	equ	0xFF2
 12209                           postinc0	equ	0xFEE
 12210                           wreg	equ	0xFE8
 12211                           indf1	equ	0xFE7
 12212                           postinc1	equ	0xFE6
 12213                           postdec1	equ	0xFE5
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           plusw2	equ	0xFDB
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12225 ;; Defined at:
 12226 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  name            1    wreg     enum E17513
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  name            1    2[BANK0 ] enum E17513
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  2    0[BANK0 ] unsigned int 
 12233 ;; Registers used:
 12234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12243 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12244 ;;Total ram usage:        3 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    5
 12247 ;; This function calls:
 12248 ;;		Nothing
 12249 ;; This function is called by:
 12250 ;;		_Button_Reading_Update_Helper
 12251 ;;		_Button_Baseline_Initialize
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           	psect	text72
 12256  0121F0                     __ptext72:
 12257                           	opt stack 0
 12258  0121F0                     _MTOUCH_Sensor_RawSample_Get:
 12259                           	opt stack 20
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;incstack = 0
 12263                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12264  0121F0  0100               	movlb	0	; () banked
 12265  0121F2  6FB1               	movwf	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 12266                           
 12267                           ;mtouch_sensor.c: 534: if (name < 5)
 12268  0121F4  0E05               	movlw	5
 12269  0121F6  0100               	movlb	0	; () banked
 12270  0121F8  61B1               	cpfslt	MTOUCH_Sensor_RawSample_Get@name& (0+255),b
 12271  0121FA  D011               	goto	l570
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;mtouch_sensor.c: 535: {
 12275                           ;mtouch_sensor.c: 536: return mtouch_sensor[name].rawSample;
 12276  0121FC  51B1               	movf	MTOUCH_Sensor_RawSample_Get@name& (0+255),w,b
 12277  0121FE  0D09               	mullw	9
 12278  012200  0E06               	movlw	6
 12279  012202  26F3               	addwf	prodl,f,c
 12280  012204  0E00               	movlw	0
 12281  012206  22F4               	addwfc	prodh,f,c
 12282  012208  0E82               	movlw	low _mtouch_sensor
 12283  01220A  24F3               	addwf	prodl,w,c
 12284  01220C  6ED9               	movwf	fsr2l,c
 12285  01220E  0E00               	movlw	high _mtouch_sensor
 12286  012210  20F4               	addwfc	prodh,w,c
 12287  012212  6EDA               	movwf	fsr2h,c
 12288  012214  CFDE F0AF          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
 12289  012218  CFDD F0B0          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;mtouch_sensor.c: 537: }
 12293                           
 12294                           ; BSR set to: 0
 12295  01221C  0012               	return	
 12296  01221E                     l570:
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;mtouch_sensor.c: 538: else
 12300                           ;mtouch_sensor.c: 539: return (mtouch_sensor_sample_t)0;
 12301                           
 12302                           ; BSR set to: 0
 12303  01221E  0E00               	movlw	0
 12304  012220  6FB0               	movwf	(?_MTOUCH_Sensor_RawSample_Get+1)& (0+255),b
 12305  012222  0E00               	movlw	0
 12306  012224  6FAF               	movwf	?_MTOUCH_Sensor_RawSample_Get& (0+255),b
 12307                           
 12308                           ; BSR set to: 0
 12309  012226  0012               	return	
 12310  012228                     __end_of_MTOUCH_Sensor_RawSample_Get:
 12311                           	opt stack 0
 12312                           tosu	equ	0xFFF
 12313                           tosh	equ	0xFFE
 12314                           tosl	equ	0xFFD
 12315                           pclath	equ	0xFFA
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon	equ	0xFF2
 12323                           postinc0	equ	0xFEE
 12324                           wreg	equ	0xFE8
 12325                           indf1	equ	0xFE7
 12326                           postinc1	equ	0xFE6
 12327                           postdec1	equ	0xFE5
 12328                           fsr1h	equ	0xFE2
 12329                           fsr1l	equ	0xFE1
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           plusw2	equ	0xFDB
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8
 12337                           
 12338 ;; *************** function _Button_Deviation_Update *****************
 12339 ;; Defined at:
 12340 ;;		line 431 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;  button          2    0[BANK0 ] PTR struct .
 12343 ;;		 -> mtouch_button(85), 
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;  deviation       4    8[BANK0 ] long 
 12346 ;; Return value:  Size  Location     Type
 12347 ;;                  1    wreg      void 
 12348 ;; Registers used:
 12349 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12355 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12356 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12357 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12358 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12359 ;;Total ram usage:       12 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    5
 12362 ;; This function calls:
 12363 ;;		Nothing
 12364 ;; This function is called by:
 12365 ;;		_Button_Service
 12366 ;; This function uses a non-reentrant model
 12367 ;;
 12368                           
 12369                           	psect	text73
 12370  0110A8                     __ptext73:
 12371                           	opt stack 0
 12372  0110A8                     _Button_Deviation_Update:
 12373                           	opt stack 22
 12374                           
 12375                           ;mtouch_button.c: 433: int32_t deviation;
 12376                           ;mtouch_button.c: 435: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;incstack = 0
 12380  0110A8  0100               	movlb	0	; () banked
 12381  0110AA  EE20 F006          	lfsr	2,6
 12382  0110AE  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 12383  0110B0  26D9               	addwf	fsr2l,f,c
 12384  0110B2  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 12385  0110B4  22DA               	addwfc	fsr2h,f,c
 12386  0110B6  CFDE F0B1          	movff	postinc2,??_Button_Deviation_Update
 12387  0110BA  CFDE F0B2          	movff	postinc2,??_Button_Deviation_Update+1
 12388  0110BE  CFDE F0B3          	movff	postinc2,??_Button_Deviation_Update+2
 12389  0110C2  CFDE F0B4          	movff	postinc2,??_Button_Deviation_Update+3
 12390  0110C6  0E05               	movlw	5
 12391  0110C8  D005               	goto	u5930
 12392  0110CA                     u5935:
 12393  0110CA  90D8               	bcf	status,0,c
 12394  0110CC  33B4               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 12395  0110CE  33B3               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 12396  0110D0  33B2               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 12397  0110D2  33B1               	rrcf	??_Button_Deviation_Update& (0+255),f,b
 12398  0110D4                     u5930:
 12399  0110D4  2EE8               	decfsz	wreg,f,c
 12400  0110D6  D7F9               	goto	u5935
 12401  0110D8  1FB1               	comf	??_Button_Deviation_Update& (0+255),f,b
 12402  0110DA  1FB2               	comf	(??_Button_Deviation_Update+1)& (0+255),f,b
 12403  0110DC  1FB3               	comf	(??_Button_Deviation_Update+2)& (0+255),f,b
 12404  0110DE  1FB4               	comf	(??_Button_Deviation_Update+3)& (0+255),f,b
 12405  0110E0  2BB1               	incf	??_Button_Deviation_Update& (0+255),f,b
 12406  0110E2  0E00               	movlw	0
 12407  0110E4  23B2               	addwfc	(??_Button_Deviation_Update+1)& (0+255),f,b
 12408  0110E6  23B3               	addwfc	(??_Button_Deviation_Update+2)& (0+255),f,b
 12409  0110E8  23B4               	addwfc	(??_Button_Deviation_Update+3)& (0+255),f,b
 12410  0110EA  EE20 F004          	lfsr	2,4
 12411  0110EE  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 12412  0110F0  26D9               	addwf	fsr2l,f,c
 12413  0110F2  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 12414  0110F4  22DA               	addwfc	fsr2h,f,c
 12415  0110F6  CFDE F0B5          	movff	postinc2,??_Button_Deviation_Update+4
 12416  0110FA  CFDD F0B6          	movff	postdec2,??_Button_Deviation_Update+5
 12417  0110FE  51B5               	movf	(??_Button_Deviation_Update+4)& (0+255),w,b
 12418  011100  25B1               	addwf	??_Button_Deviation_Update& (0+255),w,b
 12419  011102  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 12420  011104  51B6               	movf	(??_Button_Deviation_Update+5)& (0+255),w,b
 12421  011106  21B2               	addwfc	(??_Button_Deviation_Update+1)& (0+255),w,b
 12422  011108  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 12423  01110A  0E00               	movlw	0
 12424  01110C  21B3               	addwfc	(??_Button_Deviation_Update+2)& (0+255),w,b
 12425  01110E  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 12426  011110  0E00               	movlw	0
 12427  011112  21B4               	addwfc	(??_Button_Deviation_Update+3)& (0+255),w,b
 12428  011114  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 12429                           
 12430                           ;mtouch_button.c: 438: deviation = deviation >> (button->scaling);
 12431  011116  EE20 F010          	lfsr	2,16
 12432  01111A  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 12433  01111C  26D9               	addwf	fsr2l,f,c
 12434  01111E  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 12435  011120  22DA               	addwfc	fsr2h,f,c
 12436  011122  50DF               	movf	indf2,w,c
 12437  011124  6FB1               	movwf	??_Button_Deviation_Update& (0+255),b
 12438  011126  C0B7  F0B2         	movff	Button_Deviation_Update@deviation,??_Button_Deviation_Update+1
 12439  01112A  C0B8  F0B3         	movff	Button_Deviation_Update@deviation+1,??_Button_Deviation_Update+2
 12440  01112E  C0B9  F0B4         	movff	Button_Deviation_Update@deviation+2,??_Button_Deviation_Update+3
 12441  011132  C0BA  F0B5         	movff	Button_Deviation_Update@deviation+3,??_Button_Deviation_Update+4
 12442  011136                     u5945:
 12443  011136  67B1               	tstfsz	??_Button_Deviation_Update& (0+255),b
 12444  011138  D001               	goto	u5946
 12445  01113A  D007               	goto	u5947
 12446  01113C                     u5946:
 12447  01113C  35B5               	rlcf	(??_Button_Deviation_Update+4)& (0+255),w,b
 12448  01113E  33B5               	rrcf	(??_Button_Deviation_Update+4)& (0+255),f,b
 12449  011140  33B4               	rrcf	(??_Button_Deviation_Update+3)& (0+255),f,b
 12450  011142  33B3               	rrcf	(??_Button_Deviation_Update+2)& (0+255),f,b
 12451  011144  33B2               	rrcf	(??_Button_Deviation_Update+1)& (0+255),f,b
 12452  011146  2FB1               	decfsz	??_Button_Deviation_Update& (0+255),f,b
 12453  011148  D7F6               	goto	u5945
 12454  01114A                     u5947:
 12455  01114A  C0B2  F0B7         	movff	??_Button_Deviation_Update+1,Button_Deviation_Update@deviation
 12456  01114E  C0B3  F0B8         	movff	??_Button_Deviation_Update+2,Button_Deviation_Update@deviation+1
 12457  011152  C0B4  F0B9         	movff	??_Button_Deviation_Update+3,Button_Deviation_Update@deviation+2
 12458  011156  C0B5  F0BA         	movff	??_Button_Deviation_Update+4,Button_Deviation_Update@deviation+3
 12459                           
 12460                           ;mtouch_button.c: 441: if (deviation > ((127)))
 12461  01115A  0100               	movlb	0	; () banked
 12462  01115C  BFBA               	btfsc	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 12463  01115E  D010               	goto	l852
 12464  011160  51BA               	movf	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 12465  011162  11B9               	iorwf	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 12466  011164  11B8               	iorwf	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 12467  011166  E104               	bnz	u5950
 12468  011168  0E80               	movlw	128
 12469  01116A  5DB7               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 12470  01116C  A0D8               	btfss	status,0,c
 12471  01116E  D008               	goto	l852
 12472  011170                     u5950:
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;mtouch_button.c: 442: {
 12476                           ;mtouch_button.c: 443: deviation = ((127));
 12477  011170  0E7F               	movlw	127
 12478  011172  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 12479  011174  0E00               	movlw	0
 12480  011176  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 12481  011178  0E00               	movlw	0
 12482  01117A  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 12483  01117C  0E00               	movlw	0
 12484  01117E  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 12485  011180                     l852:
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;mtouch_button.c: 444: }
 12489                           ;mtouch_button.c: 445: if (deviation < ((-128)))
 12490                           
 12491                           ; BSR set to: 0
 12492  011180  AFBA               	btfss	(Button_Deviation_Update@deviation+3)& (0+255),7,b
 12493  011182  D012               	goto	l853
 12494  011184  0E80               	movlw	128
 12495  011186  5DB7               	subwf	Button_Deviation_Update@deviation& (0+255),w,b
 12496  011188  0EFF               	movlw	255
 12497  01118A  59B8               	subwfb	(Button_Deviation_Update@deviation+1)& (0+255),w,b
 12498  01118C  0EFF               	movlw	255
 12499  01118E  59B9               	subwfb	(Button_Deviation_Update@deviation+2)& (0+255),w,b
 12500  011190  0EFF               	movlw	255
 12501  011192  59BA               	subwfb	(Button_Deviation_Update@deviation+3)& (0+255),w,b
 12502  011194  B0D8               	btfsc	status,0,c
 12503  011196  D008               	goto	l853
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;mtouch_button.c: 446: {
 12507                           ;mtouch_button.c: 447: deviation = ((-128));
 12508  011198  0E80               	movlw	128
 12509  01119A  6FB7               	movwf	Button_Deviation_Update@deviation& (0+255),b
 12510  01119C  0EFF               	movlw	255
 12511  01119E  6FB8               	movwf	(Button_Deviation_Update@deviation+1)& (0+255),b
 12512  0111A0  0EFF               	movlw	255
 12513  0111A2  6FB9               	movwf	(Button_Deviation_Update@deviation+2)& (0+255),b
 12514  0111A4  0EFF               	movlw	255
 12515  0111A6  6FBA               	movwf	(Button_Deviation_Update@deviation+3)& (0+255),b
 12516  0111A8                     l853:
 12517                           
 12518                           ; BSR set to: 0
 12519                           ;mtouch_button.c: 448: }
 12520                           ;mtouch_button.c: 450: button->deviation = (mtouch_button_deviation_t)deviation;
 12521                           
 12522                           ; BSR set to: 0
 12523  0111A8  EE20 F00A          	lfsr	2,10
 12524  0111AC  51AF               	movf	Button_Deviation_Update@button& (0+255),w,b
 12525  0111AE  26D9               	addwf	fsr2l,f,c
 12526  0111B0  51B0               	movf	(Button_Deviation_Update@button+1)& (0+255),w,b
 12527  0111B2  22DA               	addwfc	fsr2h,f,c
 12528  0111B4  C0B7  FFDF         	movff	Button_Deviation_Update@deviation,indf2
 12529                           
 12530                           ; BSR set to: 0
 12531  0111B8  0012               	return		;funcret
 12532  0111BA                     __end_of_Button_Deviation_Update:
 12533                           	opt stack 0
 12534                           tosu	equ	0xFFF
 12535                           tosh	equ	0xFFE
 12536                           tosl	equ	0xFFD
 12537                           pclath	equ	0xFFA
 12538                           tblptru	equ	0xFF8
 12539                           tblptrh	equ	0xFF7
 12540                           tblptrl	equ	0xFF6
 12541                           tablat	equ	0xFF5
 12542                           prodh	equ	0xFF4
 12543                           prodl	equ	0xFF3
 12544                           intcon	equ	0xFF2
 12545                           postinc0	equ	0xFEE
 12546                           wreg	equ	0xFE8
 12547                           indf1	equ	0xFE7
 12548                           postinc1	equ	0xFE6
 12549                           postdec1	equ	0xFE5
 12550                           fsr1h	equ	0xFE2
 12551                           fsr1l	equ	0xFE1
 12552                           indf2	equ	0xFDF
 12553                           postinc2	equ	0xFDE
 12554                           postdec2	equ	0xFDD
 12555                           plusw2	equ	0xFDB
 12556                           fsr2h	equ	0xFDA
 12557                           fsr2l	equ	0xFD9
 12558                           status	equ	0xFD8
 12559                           
 12560 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12561 ;; Defined at:
 12562 ;;		line 599 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12563 ;; Parameters:    Size  Location     Type
 12564 ;;  callback        3    0[BANK0 ] PTR FTN(enum E17454,)voi
 12565 ;;		 -> mTouchCallback(1), 
 12566 ;; Auto vars:     Size  Location     Type
 12567 ;;		None
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  1    wreg      void 
 12570 ;; Registers used:
 12571 ;;		wreg, status,2, status,0
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12577 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12581 ;;Total ram usage:        3 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    5
 12584 ;; This function calls:
 12585 ;;		Nothing
 12586 ;; This function is called by:
 12587 ;;		_main
 12588 ;; This function uses a non-reentrant model
 12589 ;;
 12590                           
 12591                           	psect	text74
 12592  012712                     __ptext74:
 12593                           	opt stack 0
 12594  012712                     _MTOUCH_Button_SetPressedCallback:
 12595                           	opt stack 25
 12596                           
 12597                           ;mtouch_button.c: 601: callback_pressed = callback;
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;incstack = 0
 12601  012712  C0AF  F0E1         	movff	MTOUCH_Button_SetPressedCallback@callback,_callback_pressed
 12602  012716  C0B0  F0E2         	movff	MTOUCH_Button_SetPressedCallback@callback+1,_callback_pressed+1
 12603  01271A  C0B1  F0E3         	movff	MTOUCH_Button_SetPressedCallback@callback+2,_callback_pressed+2
 12604  01271E  0012               	return		;funcret
 12605  012720                     __end_of_MTOUCH_Button_SetPressedCallback:
 12606                           	opt stack 0
 12607                           tosu	equ	0xFFF
 12608                           tosh	equ	0xFFE
 12609                           tosl	equ	0xFFD
 12610                           pclath	equ	0xFFA
 12611                           tblptru	equ	0xFF8
 12612                           tblptrh	equ	0xFF7
 12613                           tblptrl	equ	0xFF6
 12614                           tablat	equ	0xFF5
 12615                           prodh	equ	0xFF4
 12616                           prodl	equ	0xFF3
 12617                           intcon	equ	0xFF2
 12618                           postinc0	equ	0xFEE
 12619                           wreg	equ	0xFE8
 12620                           indf1	equ	0xFE7
 12621                           postinc1	equ	0xFE6
 12622                           postdec1	equ	0xFE5
 12623                           fsr1h	equ	0xFE2
 12624                           fsr1l	equ	0xFE1
 12625                           indf2	equ	0xFDF
 12626                           postinc2	equ	0xFDE
 12627                           postdec2	equ	0xFDD
 12628                           plusw2	equ	0xFDB
 12629                           fsr2h	equ	0xFDA
 12630                           fsr2l	equ	0xFD9
 12631                           status	equ	0xFD8
 12632                           
 12633 ;; *************** function _DTR_Callback *****************
 12634 ;; Defined at:
 12635 ;;		line 59 in file "main.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;		None
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;		None
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  1    wreg      void 
 12642 ;; Registers used:
 12643 ;;		None
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12653 ;;Total ram usage:        0 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    5
 12656 ;; This function calls:
 12657 ;;		Nothing
 12658 ;; This function is called by:
 12659 ;;		_main
 12660 ;;		_IOCBF2_ISR
 12661 ;; This function uses a non-reentrant model
 12662 ;;
 12663                           
 12664                           	psect	text75
 12665  0126AA                     __ptext75:
 12666                           	opt stack 0
 12667  0126AA                     _DTR_Callback:
 12668                           	opt stack 0
 12669                           
 12670                           ;Skip over the trampoline to the duplicate function for level 2
 12671  0126AA  B250               	btfsc	btemp,1,c
 12672  0126AC  EF96  F093         	goto	i2_DTR_Callback
 12673  0126B0                     _DTR_Callback$intlevel0:
 12674                           	opt stack 25
 12675                           
 12676                           ;main.c: 61: if(PORTBbits.RB2 == 1) {
 12677                           
 12678                           ;incstack = 0
 12679  0126B0  A48A               	btfss	3978,2,c	;volatile
 12680  0126B2  D002               	goto	l956
 12681                           
 12682                           ;main.c: 62: USB_DTR = 1;
 12683  0126B4  804F               	bsf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 12684                           
 12685                           ;main.c: 63: }
 12686  0126B6  0012               	return	
 12687  0126B8                     l956:
 12688                           
 12689                           ;main.c: 65: else {
 12690                           ;main.c: 66: USB_DTR = 0;
 12691  0126B8  904F               	bcf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 12692  0126BA  0012               	return	
 12693  0126BC                     __end_of_DTR_Callback:
 12694                           	opt stack 0
 12695                           tosu	equ	0xFFF
 12696                           tosh	equ	0xFFE
 12697                           tosl	equ	0xFFD
 12698                           pclath	equ	0xFFA
 12699                           tblptru	equ	0xFF8
 12700                           tblptrh	equ	0xFF7
 12701                           tblptrl	equ	0xFF6
 12702                           tablat	equ	0xFF5
 12703                           prodh	equ	0xFF4
 12704                           prodl	equ	0xFF3
 12705                           intcon	equ	0xFF2
 12706                           postinc0	equ	0xFEE
 12707                           wreg	equ	0xFE8
 12708                           indf1	equ	0xFE7
 12709                           postinc1	equ	0xFE6
 12710                           postdec1	equ	0xFE5
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           plusw2	equ	0xFDB
 12717                           fsr2h	equ	0xFDA
 12718                           fsr2l	equ	0xFD9
 12719                           status	equ	0xFD8
 12720                           
 12721 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 12722 ;; Defined at:
 12723 ;;		line 74 in file "mcc_generated_files/interrupt_manager.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;		None
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;		None
 12728 ;; Return value:  Size  Location     Type
 12729 ;;                  1    wreg      void 
 12730 ;; Registers used:
 12731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12732 ;; Tracked objects:
 12733 ;;		On entry : 0/0
 12734 ;;		On exit  : 0/0
 12735 ;;		Unchanged: 0/0
 12736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12739 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12740 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12741 ;;Total ram usage:       18 bytes
 12742 ;; Hardware stack levels used:    1
 12743 ;; Hardware stack levels required when called:    4
 12744 ;; This function calls:
 12745 ;;		Absolute function
 12746 ;;		_ADCC_ThresholdISR_mTouch
 12747 ;;		_EUSART2_Receive_ISR
 12748 ;;		_EUSART2_Transmit_ISR
 12749 ;;		_PIN_MANAGER_IOC
 12750 ;; This function is called by:
 12751 ;;		Interrupt level 2
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           	psect	intcode
 12756  000008                     __pintcode:
 12757                           	opt stack 0
 12758  000008                     _INTERRUPT_InterruptManagerHigh:
 12759                           	opt stack 18
 12760                           
 12761                           ;incstack = 0
 12762  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12763  00000A  CFFA F017          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 12764  00000E  CFFB F018          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 12765  000012  CFE9 F019          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 12766  000016  CFEA F01A          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 12767  00001A  CFE1 F01B          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 12768  00001E  CFE2 F01C          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 12769  000022  CFD9 F01D          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 12770  000026  CFDA F01E          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 12771  00002A  CFF3 F01F          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 12772  00002E  CFF4 F020          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 12773  000032  CFF6 F021          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 12774  000036  CFF7 F022          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 12775  00003A  CFF8 F023          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 12776  00003E  CFF5 F024          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 12777  000042  C050  F025         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 12778  000046  C051  F026         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 12779  00004A  C052  F027         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 12780  00004E  C053  F028         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 12781                           
 12782                           ;interrupt_manager.c: 77: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 12783  000052  010E               	movlb	14	; () banked
 12784  000054  BD2C               	btfsc	44,6,b	;volatile
 12785                           
 12786                           ; BSR set to: 14
 12787  000056  AD36               	btfss	54,6,b	;volatile
 12788  000058  D00A               	goto	i2l149
 12789                           
 12790                           ; BSR set to: 14
 12791                           ;interrupt_manager.c: 78: {
 12792                           ;interrupt_manager.c: 79: EUSART2_TxDefaultInterruptHandler();
 12793  00005A  D801               	call	i2u673_48
 12794  00005C  D022               	goto	i2l155
 12795  00005E                     i2u673_48:
 12796  00005E  0005               	push	
 12797  000060  6EFA               	movwf	pclath,c
 12798  000062  5045               	movf	_EUSART2_TxDefaultInterruptHandler,w,c
 12799  000064  6EFD               	movwf	tosl,c
 12800  000066  5046               	movf	_EUSART2_TxDefaultInterruptHandler+1,w,c
 12801  000068  6EFE               	movwf	tosh,c
 12802  00006A  5047               	movf	_EUSART2_TxDefaultInterruptHandler+2,w,c
 12803  00006C  D00C               	goto	L5
 12804  00006E                     i2l149:
 12805                           
 12806                           ; BSR set to: 14
 12807                           ;interrupt_manager.c: 81: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 12808  00006E  BF2C               	btfsc	44,7,b	;volatile
 12809                           
 12810                           ; BSR set to: 14
 12811  000070  AF36               	btfss	54,7,b	;volatile
 12812  000072  D00C               	goto	i2l151
 12813                           
 12814                           ; BSR set to: 14
 12815                           ;interrupt_manager.c: 82: {
 12816                           ;interrupt_manager.c: 83: EUSART2_RxDefaultInterruptHandler();
 12817  000074  D801               	call	i2u676_48
 12818  000076  D015               	goto	i2l155
 12819  000078                     i2u676_48:
 12820  000078  0005               	push	
 12821  00007A  6EFA               	movwf	pclath,c
 12822  00007C  5042               	movf	_EUSART2_RxDefaultInterruptHandler,w,c
 12823  00007E  6EFD               	movwf	tosl,c
 12824  000080  5043               	movf	_EUSART2_RxDefaultInterruptHandler+1,w,c
 12825  000082  6EFE               	movwf	tosh,c
 12826  000084  5044               	movf	_EUSART2_RxDefaultInterruptHandler+2,w,c
 12827  000086                     L5:
 12828  000086  6EFF               	movwf	tosu,c
 12829  000088  50FA               	movf	pclath,w,c
 12830  00008A  0012               	return		;indir
 12831  00008C                     i2l151:
 12832                           
 12833                           ; BSR set to: 14
 12834                           ;interrupt_manager.c: 85: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 12835  00008C  B32A               	btfsc	42,1,b	;volatile
 12836                           
 12837                           ; BSR set to: 14
 12838  00008E  A334               	btfss	52,1,b	;volatile
 12839  000090  D003               	goto	i2l153
 12840                           
 12841                           ; BSR set to: 14
 12842                           ;interrupt_manager.c: 86: {
 12843                           ;interrupt_manager.c: 87: ADCC_ThresholdISR_mTouch();
 12844  000092  ECA6  F093         	call	_ADCC_ThresholdISR_mTouch	;wreg free
 12845                           
 12846                           ;interrupt_manager.c: 88: }
 12847  000096  D005               	goto	i2l155
 12848  000098                     i2l153:
 12849                           
 12850                           ; BSR set to: 14
 12851                           ;interrupt_manager.c: 89: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 12852  000098  B929               	btfsc	41,4,b	;volatile
 12853                           
 12854                           ; BSR set to: 14
 12855  00009A  A933               	btfss	51,4,b	;volatile
 12856  00009C  D002               	goto	i2l155
 12857                           
 12858                           ; BSR set to: 14
 12859                           ;interrupt_manager.c: 90: {
 12860                           ;interrupt_manager.c: 91: PIN_MANAGER_IOC();
 12861  00009E  EC90  F093         	call	_PIN_MANAGER_IOC	;wreg free
 12862  0000A2                     i2l155:
 12863                           
 12864                           ;interrupt_manager.c: 93: else
 12865                           ;interrupt_manager.c: 94: {
 12866  0000A2  C028  F053         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 12867  0000A6  C027  F052         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 12868  0000AA  C026  F051         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 12869  0000AE  C025  F050         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 12870  0000B2  C024  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 12871  0000B6  C023  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 12872  0000BA  C022  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 12873  0000BE  C021  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 12874  0000C2  C020  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 12875  0000C6  C01F  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 12876  0000CA  C01E  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 12877  0000CE  C01D  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 12878  0000D2  C01C  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 12879  0000D6  C01B  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 12880  0000DA  C01A  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 12881  0000DE  C019  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 12882  0000E2  C018  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 12883  0000E6  C017  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 12884  0000EA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12885  0000EC  0011               	retfie		f
 12886  0000EE                     __end_of_INTERRUPT_InterruptManagerHigh:
 12887                           	opt stack 0
 12888                           tosu	equ	0xFFF
 12889                           tosh	equ	0xFFE
 12890                           tosl	equ	0xFFD
 12891                           pclatu	equ	0xFFB
 12892                           pclath	equ	0xFFA
 12893                           tblptru	equ	0xFF8
 12894                           tblptrh	equ	0xFF7
 12895                           tblptrl	equ	0xFF6
 12896                           tablat	equ	0xFF5
 12897                           prodh	equ	0xFF4
 12898                           prodl	equ	0xFF3
 12899                           intcon	equ	0xFF2
 12900                           postinc0	equ	0xFEE
 12901                           fsr0h	equ	0xFEA
 12902                           fsr0l	equ	0xFE9
 12903                           wreg	equ	0xFE8
 12904                           indf1	equ	0xFE7
 12905                           postinc1	equ	0xFE6
 12906                           postdec1	equ	0xFE5
 12907                           fsr1h	equ	0xFE2
 12908                           fsr1l	equ	0xFE1
 12909                           indf2	equ	0xFDF
 12910                           postinc2	equ	0xFDE
 12911                           postdec2	equ	0xFDD
 12912                           plusw2	equ	0xFDB
 12913                           fsr2h	equ	0xFDA
 12914                           fsr2l	equ	0xFD9
 12915                           status	equ	0xFD8
 12916                           
 12917 ;; *************** function _PIN_MANAGER_IOC *****************
 12918 ;; Defined at:
 12919 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;		None
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;		None
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  1    wreg      void 
 12926 ;; Registers used:
 12927 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12937 ;;Total ram usage:        0 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; Hardware stack levels required when called:    2
 12940 ;; This function calls:
 12941 ;;		_IOCBF2_ISR
 12942 ;; This function is called by:
 12943 ;;		_INTERRUPT_InterruptManagerHigh
 12944 ;; This function uses a non-reentrant model
 12945 ;;
 12946                           
 12947                           	psect	text77
 12948  012720                     __ptext77:
 12949                           	opt stack 0
 12950  012720                     _PIN_MANAGER_IOC:
 12951                           	opt stack 19
 12952                           
 12953                           ;pin_manager.c: 146: if(IOCBFbits.IOCBF2 == 1)
 12954                           
 12955                           ;incstack = 0
 12956  012720  010E               	movlb	14	; () banked
 12957  012722  A593               	btfss	147,2,b	;volatile
 12958  012724  0012               	return	
 12959                           
 12960                           ; BSR set to: 14
 12961                           ;pin_manager.c: 147: {
 12962                           ;pin_manager.c: 148: IOCBF2_ISR();
 12963  012726  EC42  F092         	call	_IOCBF2_ISR	;wreg free
 12964  01272A  0012               	return	
 12965  01272C                     __end_of_PIN_MANAGER_IOC:
 12966                           	opt stack 0
 12967                           tosu	equ	0xFFF
 12968                           tosh	equ	0xFFE
 12969                           tosl	equ	0xFFD
 12970                           pclatu	equ	0xFFB
 12971                           pclath	equ	0xFFA
 12972                           tblptru	equ	0xFF8
 12973                           tblptrh	equ	0xFF7
 12974                           tblptrl	equ	0xFF6
 12975                           tablat	equ	0xFF5
 12976                           prodh	equ	0xFF4
 12977                           prodl	equ	0xFF3
 12978                           intcon	equ	0xFF2
 12979                           postinc0	equ	0xFEE
 12980                           fsr0h	equ	0xFEA
 12981                           fsr0l	equ	0xFE9
 12982                           wreg	equ	0xFE8
 12983                           indf1	equ	0xFE7
 12984                           postinc1	equ	0xFE6
 12985                           postdec1	equ	0xFE5
 12986                           fsr1h	equ	0xFE2
 12987                           fsr1l	equ	0xFE1
 12988                           indf2	equ	0xFDF
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           plusw2	equ	0xFDB
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function _IOCBF2_ISR *****************
 12997 ;; Defined at:
 12998 ;;		line 155 in file "mcc_generated_files/pin_manager.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;		None
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;		None
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  1    wreg      void 
 13005 ;; Registers used:
 13006 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13016 ;;Total ram usage:        0 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; Hardware stack levels required when called:    1
 13019 ;; This function calls:
 13020 ;;		Absolute function
 13021 ;;		_IOCBF2_DefaultInterruptHandler
 13022 ;;		i2_DTR_Callback
 13023 ;; This function is called by:
 13024 ;;		_PIN_MANAGER_IOC
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           	psect	text78
 13029  012484                     __ptext78:
 13030                           	opt stack 0
 13031  012484                     _IOCBF2_ISR:
 13032                           	opt stack 19
 13033                           
 13034                           ;pin_manager.c: 160: if(IOCBF2_InterruptHandler)
 13035                           
 13036                           ;incstack = 0
 13037  012484  5048               	movf	_IOCBF2_InterruptHandler,w,c
 13038  012486  1049               	iorwf	_IOCBF2_InterruptHandler+1,w,c
 13039  012488  104A               	iorwf	_IOCBF2_InterruptHandler+2,w,c
 13040  01248A  B4D8               	btfsc	status,2,c
 13041  01248C  D00C               	goto	i2u641_49
 13042                           
 13043                           ;pin_manager.c: 161: {
 13044                           ;pin_manager.c: 162: IOCBF2_InterruptHandler();
 13045  01248E  D801               	call	i2u641_48
 13046  012490  D00A               	goto	i2u641_49
 13047  012492                     i2u641_48:
 13048  012492  0005               	push	
 13049  012494  6EFA               	movwf	pclath,c
 13050  012496  5048               	movf	_IOCBF2_InterruptHandler,w,c
 13051  012498  6EFD               	movwf	tosl,c
 13052  01249A  5049               	movf	_IOCBF2_InterruptHandler+1,w,c
 13053  01249C  6EFE               	movwf	tosh,c
 13054  01249E  504A               	movf	_IOCBF2_InterruptHandler+2,w,c
 13055  0124A0  6EFF               	movwf	tosu,c
 13056  0124A2  50FA               	movf	pclath,w,c
 13057  0124A4  0012               	return		;indir
 13058  0124A6                     i2u641_49:
 13059                           
 13060                           ;pin_manager.c: 163: }
 13061                           ;pin_manager.c: 164: IOCBFbits.IOCBF2 = 0;
 13062  0124A6  010E               	movlb	14	; () banked
 13063  0124A8  9593               	bcf	147,2,b	;volatile
 13064                           
 13065                           ; BSR set to: 14
 13066  0124AA  0012               	return		;funcret
 13067  0124AC                     __end_of_IOCBF2_ISR:
 13068                           	opt stack 0
 13069                           tosu	equ	0xFFF
 13070                           tosh	equ	0xFFE
 13071                           tosl	equ	0xFFD
 13072                           pclatu	equ	0xFFB
 13073                           pclath	equ	0xFFA
 13074                           tblptru	equ	0xFF8
 13075                           tblptrh	equ	0xFF7
 13076                           tblptrl	equ	0xFF6
 13077                           tablat	equ	0xFF5
 13078                           prodh	equ	0xFF4
 13079                           prodl	equ	0xFF3
 13080                           intcon	equ	0xFF2
 13081                           postinc0	equ	0xFEE
 13082                           fsr0h	equ	0xFEA
 13083                           fsr0l	equ	0xFE9
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           postinc1	equ	0xFE6
 13087                           postdec1	equ	0xFE5
 13088                           fsr1h	equ	0xFE2
 13089                           fsr1l	equ	0xFE1
 13090                           indf2	equ	0xFDF
 13091                           postinc2	equ	0xFDE
 13092                           postdec2	equ	0xFDD
 13093                           plusw2	equ	0xFDB
 13094                           fsr2h	equ	0xFDA
 13095                           fsr2l	equ	0xFD9
 13096                           status	equ	0xFD8
 13097                           
 13098 ;; *************** function _IOCBF2_DefaultInterruptHandler *****************
 13099 ;; Defined at:
 13100 ;;		line 177 in file "mcc_generated_files/pin_manager.c"
 13101 ;; Parameters:    Size  Location     Type
 13102 ;;		None
 13103 ;; Auto vars:     Size  Location     Type
 13104 ;;		None
 13105 ;; Return value:  Size  Location     Type
 13106 ;;                  1    wreg      void 
 13107 ;; Registers used:
 13108 ;;		None
 13109 ;; Tracked objects:
 13110 ;;		On entry : 0/0
 13111 ;;		On exit  : 0/0
 13112 ;;		Unchanged: 0/0
 13113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13118 ;;Total ram usage:        0 bytes
 13119 ;; Hardware stack levels used:    1
 13120 ;; This function calls:
 13121 ;;		Nothing
 13122 ;; This function is called by:
 13123 ;;		_PIN_MANAGER_Initialize
 13124 ;;		_IOCBF2_ISR
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           	psect	text79
 13129  01276E                     __ptext79:
 13130                           	opt stack 0
 13131  01276E                     _IOCBF2_DefaultInterruptHandler:
 13132                           	opt stack 19
 13133                           
 13134                           ; BSR set to: 14
 13135                           ;incstack = 0
 13136  01276E  0012               	return		;funcret
 13137  012770                     __end_of_IOCBF2_DefaultInterruptHandler:
 13138                           	opt stack 0
 13139                           tosu	equ	0xFFF
 13140                           tosh	equ	0xFFE
 13141                           tosl	equ	0xFFD
 13142                           pclatu	equ	0xFFB
 13143                           pclath	equ	0xFFA
 13144                           tblptru	equ	0xFF8
 13145                           tblptrh	equ	0xFF7
 13146                           tblptrl	equ	0xFF6
 13147                           tablat	equ	0xFF5
 13148                           prodh	equ	0xFF4
 13149                           prodl	equ	0xFF3
 13150                           intcon	equ	0xFF2
 13151                           postinc0	equ	0xFEE
 13152                           fsr0h	equ	0xFEA
 13153                           fsr0l	equ	0xFE9
 13154                           wreg	equ	0xFE8
 13155                           indf1	equ	0xFE7
 13156                           postinc1	equ	0xFE6
 13157                           postdec1	equ	0xFE5
 13158                           fsr1h	equ	0xFE2
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           plusw2	equ	0xFDB
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function i2_DTR_Callback *****************
 13169 ;; Defined at:
 13170 ;;		line 59 in file "main.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		None
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13188 ;;Total ram usage:        0 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           	psect	text80
 13197  01272C                     __ptext80:
 13198                           	opt stack 0
 13199  01272C                     i2_DTR_Callback:
 13200                           	opt stack 19
 13201                           
 13202                           ;main.c: 61: if(PORTBbits.RB2 == 1) {
 13203                           
 13204                           ;incstack = 0
 13205  01272C  A48A               	btfss	3978,2,c	;volatile
 13206  01272E  D002               	goto	i2l956
 13207                           
 13208                           ;main.c: 62: USB_DTR = 1;
 13209  012730  804F               	bsf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 13210                           
 13211                           ;main.c: 63: }
 13212  012732  0012               	return	
 13213  012734                     i2l956:
 13214                           
 13215                           ;main.c: 65: else {
 13216                           ;main.c: 66: USB_DTR = 0;
 13217  012734  904F               	bcf	_USB_DTR/(0+8),_USB_DTR& (0+7),c	;volatile
 13218  012736  0012               	return	
 13219  012738                     __end_ofi2_DTR_Callback:
 13220                           	opt stack 0
 13221                           tosu	equ	0xFFF
 13222                           tosh	equ	0xFFE
 13223                           tosl	equ	0xFFD
 13224                           pclatu	equ	0xFFB
 13225                           pclath	equ	0xFFA
 13226                           tblptru	equ	0xFF8
 13227                           tblptrh	equ	0xFF7
 13228                           tblptrl	equ	0xFF6
 13229                           tablat	equ	0xFF5
 13230                           prodh	equ	0xFF4
 13231                           prodl	equ	0xFF3
 13232                           intcon	equ	0xFF2
 13233                           postinc0	equ	0xFEE
 13234                           fsr0h	equ	0xFEA
 13235                           fsr0l	equ	0xFE9
 13236                           wreg	equ	0xFE8
 13237                           indf1	equ	0xFE7
 13238                           postinc1	equ	0xFE6
 13239                           postdec1	equ	0xFE5
 13240                           fsr1h	equ	0xFE2
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           plusw2	equ	0xFDB
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _EUSART2_Transmit_ISR *****************
 13251 ;; Defined at:
 13252 ;;		line 183 in file "mcc_generated_files/eusart2.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;		None
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;		None
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13270 ;;Total ram usage:        0 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		_EUSART2_Initialize
 13276 ;;		_INTERRUPT_InterruptManagerHigh
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           	psect	text81
 13281  0122C4                     __ptext81:
 13282                           	opt stack 0
 13283  0122C4                     _EUSART2_Transmit_ISR:
 13284                           	opt stack 21
 13285                           
 13286                           ;eusart2.c: 187: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 13287                           
 13288                           ;incstack = 0
 13289  0122C4  0E40               	movlw	64
 13290  0122C6  604B               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
 13291  0122C8  D013               	goto	i2l246
 13292                           
 13293                           ;eusart2.c: 188: {
 13294                           ;eusart2.c: 189: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 13295  0122CA  5040               	movf	_eusart2TxTail,w,c	;volatile
 13296  0122CC  0D01               	mullw	1
 13297  0122CE  0E00               	movlw	low _eusart2TxBuffer
 13298  0122D0  24F3               	addwf	prodl,w,c
 13299  0122D2  6ED9               	movwf	fsr2l,c
 13300  0122D4  0E02               	movlw	high _eusart2TxBuffer
 13301  0122D6  20F4               	addwfc	prodh,w,c
 13302  0122D8  6EDA               	movwf	fsr2h,c
 13303  0122DA  50DF               	movf	indf2,w,c
 13304  0122DC  010E               	movlb	14	; () banked
 13305  0122DE  6FF2               	movwf	242,b	;volatile
 13306                           
 13307                           ; BSR set to: 14
 13308  0122E0  2A40               	incf	_eusart2TxTail,f,c	;volatile
 13309                           
 13310                           ; BSR set to: 14
 13311                           ;eusart2.c: 190: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 13312  0122E2  0E3F               	movlw	63
 13313  0122E4  6440               	cpfsgt	_eusart2TxTail,c	;volatile
 13314  0122E6  D002               	goto	i2l247
 13315                           
 13316                           ; BSR set to: 14
 13317                           ;eusart2.c: 191: {
 13318                           ;eusart2.c: 192: eusart2TxTail = 0;
 13319  0122E8  0E00               	movlw	0
 13320  0122EA  6E40               	movwf	_eusart2TxTail,c	;volatile
 13321  0122EC                     i2l247:
 13322                           
 13323                           ; BSR set to: 14
 13324                           ;eusart2.c: 193: }
 13325                           ;eusart2.c: 194: eusart2TxBufferRemaining++;
 13326                           
 13327                           ; BSR set to: 14
 13328  0122EC  2A4B               	incf	_eusart2TxBufferRemaining,f,c	;volatile
 13329                           
 13330                           ;eusart2.c: 195: }
 13331  0122EE  0012               	return	
 13332  0122F0                     i2l246:
 13333                           
 13334                           ;eusart2.c: 196: else
 13335                           ;eusart2.c: 197: {
 13336                           ;eusart2.c: 198: PIE3bits.TX2IE = 0;
 13337  0122F0  010E               	movlb	14	; () banked
 13338  0122F2  9D2C               	bcf	44,6,b	;volatile
 13339  0122F4  0012               	return	
 13340  0122F6                     __end_of_EUSART2_Transmit_ISR:
 13341                           	opt stack 0
 13342                           tosu	equ	0xFFF
 13343                           tosh	equ	0xFFE
 13344                           tosl	equ	0xFFD
 13345                           pclatu	equ	0xFFB
 13346                           pclath	equ	0xFFA
 13347                           tblptru	equ	0xFF8
 13348                           tblptrh	equ	0xFF7
 13349                           tblptrl	equ	0xFF6
 13350                           tablat	equ	0xFF5
 13351                           prodh	equ	0xFF4
 13352                           prodl	equ	0xFF3
 13353                           intcon	equ	0xFF2
 13354                           postinc0	equ	0xFEE
 13355                           fsr0h	equ	0xFEA
 13356                           fsr0l	equ	0xFE9
 13357                           wreg	equ	0xFE8
 13358                           indf1	equ	0xFE7
 13359                           postinc1	equ	0xFE6
 13360                           postdec1	equ	0xFE5
 13361                           fsr1h	equ	0xFE2
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           postdec2	equ	0xFDD
 13366                           plusw2	equ	0xFDB
 13367                           fsr2h	equ	0xFDA
 13368                           fsr2l	equ	0xFD9
 13369                           status	equ	0xFD8
 13370                           
 13371 ;; *************** function _EUSART2_Receive_ISR *****************
 13372 ;; Defined at:
 13373 ;;		line 202 in file "mcc_generated_files/eusart2.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;		None
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;		None
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      void 
 13380 ;; Registers used:
 13381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13391 ;;Total ram usage:        0 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    3
 13394 ;; This function calls:
 13395 ;;		i2_printf
 13396 ;; This function is called by:
 13397 ;;		_EUSART2_Initialize
 13398 ;;		_INTERRUPT_InterruptManagerHigh
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           	psect	text82
 13403  011896                     __ptext82:
 13404                           	opt stack 0
 13405  011896                     _EUSART2_Receive_ISR:
 13406                           	opt stack 18
 13407                           
 13408                           ;eusart2.c: 205: if(1 == RC2STAbits.OERR)
 13409                           
 13410                           ; BSR set to: 14
 13411                           ;incstack = 0
 13412  011896  010E               	movlb	14	; () banked
 13413  011898  A3F5               	btfss	245,1,b	;volatile
 13414  01189A  D002               	goto	i2l252
 13415                           
 13416                           ; BSR set to: 14
 13417                           ;eusart2.c: 206: {
 13418                           ;eusart2.c: 209: RC2STAbits.CREN = 0;
 13419  01189C  99F5               	bcf	245,4,b	;volatile
 13420                           
 13421                           ;eusart2.c: 210: RC2STAbits.CREN = 1;
 13422  01189E  89F5               	bsf	245,4,b	;volatile
 13423  0118A0                     i2l252:
 13424                           
 13425                           ; BSR set to: 14
 13426                           ;eusart2.c: 211: }
 13427                           ;eusart2.c: 214: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 13428                           
 13429                           ; BSR set to: 14
 13430  0118A0  503F               	movf	_eusart2RxHead,w,c	;volatile
 13431  0118A2  0D01               	mullw	1
 13432  0118A4  0E00               	movlw	low _eusart2RxBuffer
 13433  0118A6  24F3               	addwf	prodl,w,c
 13434  0118A8  6ED9               	movwf	fsr2l,c
 13435  0118AA  0E01               	movlw	high _eusart2RxBuffer
 13436  0118AC  20F4               	addwfc	prodh,w,c
 13437  0118AE  6EDA               	movwf	fsr2h,c
 13438  0118B0  CEF1 FFDF          	movff	3825,indf2	;volatile
 13439                           
 13440                           ; BSR set to: 14
 13441  0118B4  2A3F               	incf	_eusart2RxHead,f,c	;volatile
 13442                           
 13443                           ; BSR set to: 14
 13444                           ;eusart2.c: 215: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 13445  0118B6  0E3F               	movlw	63
 13446  0118B8  643F               	cpfsgt	_eusart2RxHead,c	;volatile
 13447  0118BA  D002               	goto	i2l253
 13448                           
 13449                           ; BSR set to: 14
 13450                           ;eusart2.c: 216: {
 13451                           ;eusart2.c: 217: eusart2RxHead = 0;
 13452  0118BC  0E00               	movlw	0
 13453  0118BE  6E3F               	movwf	_eusart2RxHead,c	;volatile
 13454  0118C0                     i2l253:
 13455                           
 13456                           ; BSR set to: 14
 13457                           ;eusart2.c: 218: }
 13458                           ;eusart2.c: 219: eusart2RxCount++;
 13459                           
 13460                           ; BSR set to: 14
 13461  0118C0  2A3D               	incf	_eusart2RxCount,f,c	;volatile
 13462                           
 13463                           ; BSR set to: 14
 13464                           ;eusart2.c: 221: if((RC2REG == (int) '\n') || (RC2REG == (int) '\r')) {
 13465  0118C2  0E0A               	movlw	10
 13466  0118C4  19F1               	xorwf	241,w,b	;volatile
 13467  0118C6  B4D8               	btfsc	status,2,c
 13468  0118C8  D004               	goto	i2u464_40
 13469                           
 13470                           ; BSR set to: 14
 13471  0118CA  0E0D               	movlw	13
 13472  0118CC  19F1               	xorwf	241,w,b	;volatile
 13473  0118CE  A4D8               	btfss	status,2,c
 13474  0118D0  D004               	goto	i2l254
 13475  0118D2                     i2u464_40:
 13476                           
 13477                           ; BSR set to: 14
 13478                           ;eusart2.c: 223: eusart2RxStringReady = 1;
 13479  0118D2  824F               	bsf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
 13480                           
 13481                           ; BSR set to: 14
 13482                           ;eusart2.c: 226: RC2REG = 0;
 13483  0118D4  0E00               	movlw	0
 13484  0118D6  6FF1               	movwf	241,b	;volatile
 13485                           
 13486                           ;eusart2.c: 228: }
 13487  0118D8  D001               	goto	i2l257
 13488  0118DA                     i2l254:
 13489                           
 13490                           ; BSR set to: 14
 13491                           ;eusart2.c: 230: else {
 13492                           ;eusart2.c: 232: eusart2RxStringReady = 0;
 13493  0118DA  924F               	bcf	_eusart2RxStringReady/(0+8),_eusart2RxStringReady& (0+7),c	;volatile
 13494  0118DC                     i2l257:
 13495                           
 13496                           ; BSR set to: 14
 13497                           ;eusart2.c: 234: }
 13498                           ;eusart2.c: 237: if((RC2REG == (int) '\b')) {
 13499                           
 13500                           ; BSR set to: 14
 13501  0118DC  0E08               	movlw	8
 13502  0118DE  19F1               	xorwf	241,w,b	;volatile
 13503  0118E0  A4D8               	btfss	status,2,c
 13504  0118E2  0012               	return	
 13505                           
 13506                           ; BSR set to: 14
 13507                           ;eusart2.c: 239: eusart2RxBuffer[eusart2RxHead] = '\0';
 13508  0118E4  503F               	movf	_eusart2RxHead,w,c	;volatile
 13509  0118E6  0D01               	mullw	1
 13510  0118E8  0E00               	movlw	low _eusart2RxBuffer
 13511  0118EA  24F3               	addwf	prodl,w,c
 13512  0118EC  6ED9               	movwf	fsr2l,c
 13513  0118EE  0E01               	movlw	high _eusart2RxBuffer
 13514  0118F0  20F4               	addwfc	prodh,w,c
 13515  0118F2  6EDA               	movwf	fsr2h,c
 13516  0118F4  0E00               	movlw	0
 13517  0118F6  6EDF               	movwf	indf2,c
 13518                           
 13519                           ; BSR set to: 14
 13520                           ;eusart2.c: 240: eusart2RxHead--;
 13521  0118F8  063F               	decf	_eusart2RxHead,f,c	;volatile
 13522                           
 13523                           ; BSR set to: 14
 13524                           ;eusart2.c: 243: printf("\033[K");
 13525  0118FA  0EFB               	movlw	low STR_1
 13526  0118FC  6E0D               	movwf	i2printf@f,c
 13527  0118FE  0EFF               	movlw	high STR_1
 13528  011900  6E0E               	movwf	i2printf@f+1,c
 13529  011902  ECA2  F086         	call	i2_printf	;wreg free
 13530                           
 13531                           ;eusart2.c: 245: if(eusart2RxHead != eusart2RxTail) {
 13532  011906  503E               	movf	_eusart2RxTail,w,c	;volatile
 13533  011908  183F               	xorwf	_eusart2RxHead,w,c	;volatile
 13534  01190A  B4D8               	btfsc	status,2,c
 13535  01190C  D00B               	goto	i2l259
 13536                           
 13537                           ;eusart2.c: 247: eusart2RxBuffer[eusart2RxHead] = '\0';
 13538  01190E  503F               	movf	_eusart2RxHead,w,c	;volatile
 13539  011910  0D01               	mullw	1
 13540  011912  0E00               	movlw	low _eusart2RxBuffer
 13541  011914  24F3               	addwf	prodl,w,c
 13542  011916  6ED9               	movwf	fsr2l,c
 13543  011918  0E01               	movlw	high _eusart2RxBuffer
 13544  01191A  20F4               	addwfc	prodh,w,c
 13545  01191C  6EDA               	movwf	fsr2h,c
 13546  01191E  0E00               	movlw	0
 13547  011920  6EDF               	movwf	indf2,c
 13548                           
 13549                           ;eusart2.c: 248: eusart2RxHead--;
 13550  011922  063F               	decf	_eusart2RxHead,f,c	;volatile
 13551  011924                     i2l259:
 13552                           
 13553                           ;eusart2.c: 250: }
 13554                           ;eusart2.c: 252: RC2REG = 0;
 13555  011924  0E00               	movlw	0
 13556  011926  010E               	movlb	14	; () banked
 13557  011928  6FF1               	movwf	241,b	;volatile
 13558  01192A  0012               	return	
 13559  01192C                     __end_of_EUSART2_Receive_ISR:
 13560                           	opt stack 0
 13561                           tosu	equ	0xFFF
 13562                           tosh	equ	0xFFE
 13563                           tosl	equ	0xFFD
 13564                           pclatu	equ	0xFFB
 13565                           pclath	equ	0xFFA
 13566                           tblptru	equ	0xFF8
 13567                           tblptrh	equ	0xFF7
 13568                           tblptrl	equ	0xFF6
 13569                           tablat	equ	0xFF5
 13570                           prodh	equ	0xFF4
 13571                           prodl	equ	0xFF3
 13572                           intcon	equ	0xFF2
 13573                           postinc0	equ	0xFEE
 13574                           fsr0h	equ	0xFEA
 13575                           fsr0l	equ	0xFE9
 13576                           wreg	equ	0xFE8
 13577                           indf1	equ	0xFE7
 13578                           postinc1	equ	0xFE6
 13579                           postdec1	equ	0xFE5
 13580                           fsr1h	equ	0xFE2
 13581                           fsr1l	equ	0xFE1
 13582                           indf2	equ	0xFDF
 13583                           postinc2	equ	0xFDE
 13584                           postdec2	equ	0xFDD
 13585                           plusw2	equ	0xFDB
 13586                           fsr2h	equ	0xFDA
 13587                           fsr2l	equ	0xFD9
 13588                           status	equ	0xFD8
 13589                           
 13590 ;; *************** function i2_printf *****************
 13591 ;; Defined at:
 13592 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13595 ;;		 -> STR_41(3), STR_40(349), STR_39(3), STR_37(3), 
 13596 ;;		 -> STR_36(28), STR_35(3), STR_32(4), STR_31(5), 
 13597 ;;		 -> STR_29(4), STR_28(5), STR_26(3), STR_25(19), 
 13598 ;;		 -> STR_24(19), STR_23(19), STR_22(19), STR_21(19), 
 13599 ;;		 -> STR_20(3), STR_18(3), STR_17(18), STR_16(3), 
 13600 ;;		 -> STR_14(3), STR_13(18), STR_12(3), STR_10(3), 
 13601 ;;		 -> STR_9(372), STR_8(4), STR_7(5), STR_6(32), 
 13602 ;;		 -> STR_5(32), STR_4(32), STR_3(32), STR_2(32), 
 13603 ;;		 -> STR_1(4), 
 13604 ;; Auto vars:     Size  Location     Type
 13605 ;;  printf          4    0        struct .
 13606 ;;  printf          3    0        PTR const unsigned char 
 13607 ;;  printf          2   19[COMRAM] unsigned int 
 13608 ;;  printf          2   15[COMRAM] PTR void [1]
 13609 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13610 ;;  printf          2    0        unsigned int 
 13611 ;;  printf          1   21[COMRAM] char 
 13612 ;;  printf          1   18[COMRAM] char 
 13613 ;;  printf          1   17[COMRAM] unsigned char 
 13614 ;; Return value:  Size  Location     Type
 13615 ;;                  2   12[COMRAM] int 
 13616 ;; Registers used:
 13617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13618 ;; Tracked objects:
 13619 ;;		On entry : 0/0
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13624 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13626 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13627 ;;Total ram usage:       10 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; Hardware stack levels required when called:    2
 13630 ;; This function calls:
 13631 ;;		i2___lwdiv
 13632 ;;		i2___lwmod
 13633 ;;		i2_putch
 13634 ;; This function is called by:
 13635 ;;		_EUSART2_Receive_ISR
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           	psect	text83
 13640  010D44                     __ptext83:
 13641                           	opt stack 0
 13642  010D44                     i2_printf:
 13643                           	opt stack 18
 13644                           
 13645                           ;doprnt.c: 466: va_list ap;
 13646                           ;doprnt.c: 499: signed char c;
 13647                           ;doprnt.c: 506: signed char prec;
 13648                           ;doprnt.c: 508: unsigned char flag;
 13649                           ;doprnt.c: 523: union {
 13650                           ;doprnt.c: 524: unsigned long vd;
 13651                           ;doprnt.c: 525: double integ;
 13652                           ;doprnt.c: 526: } tmpval;
 13653                           ;doprnt.c: 528: unsigned int val;
 13654                           ;doprnt.c: 529: unsigned len;
 13655                           ;doprnt.c: 530: const char * cp;
 13656                           ;doprnt.c: 533: *ap = __va_start();
 13657                           
 13658                           ; BSR set to: 14
 13659                           ;incstack = 0
 13660  010D44  0E0F               	movlw	low (?i2_printf+2)
 13661  010D46  6E10               	movwf	i2printf@ap,c
 13662  010D48  0E00               	movlw	high (?i2_printf+2)
 13663  010D4A  6E11               	movwf	i2printf@ap+1,c
 13664                           
 13665                           ;doprnt.c: 536: while(c = *f++) {
 13666  010D4C  D085               	goto	i2u457_40
 13667  010D4E                     
 13668                           ;doprnt.c: 538: if(c != '%')
 13669  010D4E  0E25               	movlw	37
 13670  010D50  1816               	xorwf	i2printf@c,w,c
 13671  010D52  B4D8               	btfsc	status,2,c
 13672  010D54  D004               	goto	i2l1060
 13673                           
 13674                           ;doprnt.c: 540: {
 13675                           ;doprnt.c: 541: (putch(c) );
 13676  010D56  5016               	movf	i2printf@c,w,c
 13677  010D58  ECA1  F093         	call	i2_putch
 13678                           
 13679                           ;doprnt.c: 542: continue;
 13680  010D5C  D07D               	goto	i2u457_40
 13681  010D5E                     i2l1060:
 13682                           
 13683                           ;doprnt.c: 543: }
 13684                           ;doprnt.c: 548: flag = 0;
 13685  010D5E  0E00               	movlw	0
 13686  010D60  6E12               	movwf	i2printf@flag,c
 13687                           
 13688                           ;doprnt.c: 822: }
 13689                           
 13690                           ;doprnt.c: 813: continue;
 13691                           
 13692                           ;doprnt.c: 802: default:
 13693                           
 13694                           ;doprnt.c: 698: case 'i':
 13695                           ;doprnt.c: 699: break;
 13696                           
 13697                           ;doprnt.c: 697: case 'd':
 13698                           
 13699                           ;doprnt.c: 638: goto alldone;
 13700                           
 13701                           ;doprnt.c: 637: case 0:
 13702                           
 13703                           ;doprnt.c: 635: switch(c = *f++) {
 13704  010D62  C00D  FFF6         	movff	i2printf@f,tblptrl
 13705  010D66  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13706  010D6A  4A0D               	infsnz	i2printf@f,f,c
 13707  010D6C  2A0E               	incf	i2printf@f+1,f,c
 13708  010D6E                     	if	0	;tblptru may be non-zero
 13709  010D6E                     	endif
 13710  010D6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13711  010D6E  0E00               	movlw	low (__mediumconst shr (0+16))
 13712  010D70  6EF8               	movwf	tblptru,c
 13713  010D72                     	endif
 13714  010D72  0008               	tblrd		*
 13715  010D74  CFF5 F016          	movff	tablat,i2printf@c
 13716  010D78  5016               	movf	i2printf@c,w,c
 13717                           
 13718                           ; Switch size 1, requested type "space"
 13719                           ; Number of cases is 3, Range of values is 0 to 105
 13720                           ; switch strategies available:
 13721                           ; Name         Instructions Cycles
 13722                           ; simple_byte           10     6 (average)
 13723                           ;	Chosen strategy is simple_byte
 13724  010D7A  0A00               	xorlw	0	; case 0
 13725  010D7C  B4D8               	btfsc	status,2,c
 13726  010D7E  0012               	return	
 13727  010D80  0A64               	xorlw	100	; case 100
 13728  010D82  B4D8               	btfsc	status,2,c
 13729  010D84  D003               	goto	i2l1066
 13730  010D86  0A0D               	xorlw	13	; case 105
 13731  010D88  A4D8               	btfss	status,2,c
 13732  010D8A  D066               	goto	i2u457_40
 13733  010D8C                     i2l1066:
 13734                           
 13735                           ;doprnt.c: 1253: {
 13736                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13737  010D8C  C010  FFD9         	movff	i2printf@ap,fsr2l
 13738  010D90  C011  FFDA         	movff	i2printf@ap+1,fsr2h
 13739  010D94  CFDE F014          	movff	postinc2,i2printf@val
 13740  010D98  CFDD F015          	movff	postdec2,i2printf@val+1
 13741  010D9C  0E02               	movlw	2
 13742  010D9E  2610               	addwf	i2printf@ap,f,c
 13743  010DA0  0E00               	movlw	0
 13744  010DA2  2211               	addwfc	i2printf@ap+1,f,c
 13745                           
 13746                           ;doprnt.c: 1261: if((int)val < 0) {
 13747  010DA4  AE15               	btfss	i2printf@val+1,7,c
 13748  010DA6  D006               	goto	i2l1068
 13749                           
 13750                           ;doprnt.c: 1262: flag |= 0x03;
 13751  010DA8  0E03               	movlw	3
 13752  010DAA  1212               	iorwf	i2printf@flag,f,c
 13753                           
 13754                           ;doprnt.c: 1263: val = -val;
 13755  010DAC  6C14               	negf	i2printf@val,c
 13756  010DAE  1E15               	comf	i2printf@val+1,f,c
 13757  010DB0  B0D8               	btfsc	status,0,c
 13758  010DB2  2A15               	incf	i2printf@val+1,f,c
 13759  010DB4                     i2l1068:
 13760                           
 13761                           ;doprnt.c: 1264: }
 13762                           ;doprnt.c: 1266: }
 13763                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13764  010DB4  0E01               	movlw	1
 13765  010DB6  6E16               	movwf	i2printf@c,c
 13766  010DB8                     i2l4307:
 13767  010DB8  0E05               	movlw	5
 13768  010DBA  1816               	xorwf	i2printf@c,w,c
 13769  010DBC  B4D8               	btfsc	status,2,c
 13770  010DBE  D015               	goto	i2u455_40
 13771                           
 13772                           ;doprnt.c: 1306: if(val < dpowers[c])
 13773  010DC0  5016               	movf	i2printf@c,w,c
 13774  010DC2  0D02               	mullw	2
 13775  010DC4  0E1B               	movlw	low _dpowers
 13776  010DC6  24F3               	addwf	prodl,w,c
 13777  010DC8  6EF6               	movwf	tblptrl,c
 13778  010DCA  0EFB               	movlw	high _dpowers
 13779  010DCC  20F4               	addwfc	prodh,w,c
 13780  010DCE  6EF7               	movwf	tblptrh,c
 13781  010DD0                     	if	1	;There are 3 active tblptr bytes
 13782  010DD0  6AF8               	clrf	tblptru,c
 13783  010DD2  0E00               	movlw	low (__mediumconst shr (0+16))
 13784  010DD4  22F8               	addwfc	tblptru,f,c
 13785  010DD6                     	endif
 13786  010DD6  0009               	tblrd		*+
 13787  010DD8  50F5               	movf	tablat,w,c
 13788  010DDA  5C14               	subwf	i2printf@val,w,c
 13789  010DDC  0009               	tblrd		*+
 13790  010DDE  50F5               	movf	tablat,w,c
 13791  010DE0  5815               	subwfb	i2printf@val+1,w,c
 13792  010DE2  A0D8               	btfss	status,0,c
 13793  010DE4  D002               	goto	i2u455_40
 13794                           
 13795                           ;doprnt.c: 1307: break;
 13796  010DE6  2A16               	incf	i2printf@c,f,c
 13797  010DE8  D7E7               	goto	i2l4307
 13798  010DEA                     i2u455_40:
 13799                           
 13800                           ;doprnt.c: 1422: {
 13801                           ;doprnt.c: 1438: if(flag & 0x03)
 13802  010DEA  C012  F00F         	movff	i2printf@flag,??i2_printf
 13803  010DEE  0E03               	movlw	3
 13804  010DF0  160F               	andwf	??i2_printf,f,c
 13805  010DF2  B4D8               	btfsc	status,2,c
 13806  010DF4  D003               	goto	i2l1072
 13807                           
 13808                           ;doprnt.c: 1439: (putch('-') );
 13809  010DF6  0E2D               	movlw	45
 13810  010DF8  ECA1  F093         	call	i2_putch
 13811  010DFC                     i2l1072:
 13812                           
 13813                           ;doprnt.c: 1469: }
 13814                           ;doprnt.c: 1472: prec = c;
 13815  010DFC  C016  F013         	movff	i2printf@c,i2printf@prec
 13816                           
 13817                           ;doprnt.c: 1474: while(prec--) {
 13818  010E00  D027               	goto	i2l1073
 13819  010E02                     
 13820                           ;doprnt.c: 1478: {
 13821                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13822  010E02  5013               	movf	i2printf@prec,w,c
 13823  010E04  0D02               	mullw	2
 13824  010E06  0E1B               	movlw	low _dpowers
 13825  010E08  24F3               	addwf	prodl,w,c
 13826  010E0A  6EF6               	movwf	tblptrl,c
 13827  010E0C  0EFB               	movlw	high _dpowers
 13828  010E0E  20F4               	addwfc	prodh,w,c
 13829  010E10  6EF7               	movwf	tblptrh,c
 13830  010E12                     	if	1	;There are 3 active tblptr bytes
 13831  010E12  6AF8               	clrf	tblptru,c
 13832  010E14  0E00               	movlw	low (__mediumconst shr (0+16))
 13833  010E16  22F8               	addwfc	tblptru,f,c
 13834  010E18                     	endif
 13835  010E18  0009               	tblrd		*+
 13836  010E1A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13837  010E1E  000A               	tblrd		*-
 13838  010E20  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13839  010E24  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
 13840  010E28  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13841  010E2C  ECC6  F08E         	call	i2___lwdiv	;wreg free
 13842  010E30  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13843  010E34  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13844  010E38  0E00               	movlw	0
 13845  010E3A  6E0B               	movwf	i2___lwmod@divisor+1,c
 13846  010E3C  0E0A               	movlw	10
 13847  010E3E  6E0A               	movwf	i2___lwmod@divisor,c
 13848  010E40  ECCB  F08F         	call	i2___lwmod	;wreg free
 13849  010E44  5008               	movf	?i2___lwmod,w,c
 13850  010E46  0F30               	addlw	48
 13851  010E48  6E16               	movwf	i2printf@c,c
 13852                           
 13853                           ;doprnt.c: 1523: }
 13854                           ;doprnt.c: 1524: (putch(c) );
 13855  010E4A  5016               	movf	i2printf@c,w,c
 13856  010E4C  ECA1  F093         	call	i2_putch
 13857  010E50                     i2l1073:
 13858  010E50  0613               	decf	i2printf@prec,f,c
 13859  010E52  2813               	incf	i2printf@prec,w,c
 13860  010E54  A4D8               	btfss	status,2,c
 13861  010E56  D7D5               	goto	i2l1074
 13862  010E58                     i2u457_40:
 13863  010E58  C00D  FFF6         	movff	i2printf@f,tblptrl
 13864  010E5C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13865  010E60  4A0D               	infsnz	i2printf@f,f,c
 13866  010E62  2A0E               	incf	i2printf@f+1,f,c
 13867  010E64                     	if	0	;tblptru may be non-zero
 13868  010E64                     	endif
 13869  010E64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13870  010E64  0E00               	movlw	low (__mediumconst shr (0+16))
 13871  010E66  6EF8               	movwf	tblptru,c
 13872  010E68                     	endif
 13873  010E68  0008               	tblrd		*
 13874  010E6A  CFF5 F016          	movff	tablat,i2printf@c
 13875  010E6E  5016               	movf	i2printf@c,w,c
 13876  010E70  B4D8               	btfsc	status,2,c
 13877  010E72  0012               	return	
 13878  010E74  D76C               	goto	i2l1059
 13879  010E76                     __end_ofi2_printf:
 13880                           	opt stack 0
 13881                           tosu	equ	0xFFF
 13882                           tosh	equ	0xFFE
 13883                           tosl	equ	0xFFD
 13884                           pclatu	equ	0xFFB
 13885                           pclath	equ	0xFFA
 13886                           tblptru	equ	0xFF8
 13887                           tblptrh	equ	0xFF7
 13888                           tblptrl	equ	0xFF6
 13889                           tablat	equ	0xFF5
 13890                           prodh	equ	0xFF4
 13891                           prodl	equ	0xFF3
 13892                           intcon	equ	0xFF2
 13893                           postinc0	equ	0xFEE
 13894                           fsr0h	equ	0xFEA
 13895                           fsr0l	equ	0xFE9
 13896                           wreg	equ	0xFE8
 13897                           indf1	equ	0xFE7
 13898                           postinc1	equ	0xFE6
 13899                           postdec1	equ	0xFE5
 13900                           fsr1h	equ	0xFE2
 13901                           fsr1l	equ	0xFE1
 13902                           indf2	equ	0xFDF
 13903                           postinc2	equ	0xFDE
 13904                           postdec2	equ	0xFDD
 13905                           plusw2	equ	0xFDB
 13906                           fsr2h	equ	0xFDA
 13907                           fsr2l	equ	0xFD9
 13908                           status	equ	0xFD8
 13909                           
 13910 ;; *************** function i2_putch *****************
 13911 ;; Defined at:
 13912 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;  txData          1    wreg     unsigned char 
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;  txData          1    1[COMRAM] unsigned char 
 13917 ;; Return value:  Size  Location     Type
 13918 ;;                  1    wreg      void 
 13919 ;; Registers used:
 13920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13921 ;; Tracked objects:
 13922 ;;		On entry : 0/0
 13923 ;;		On exit  : 0/0
 13924 ;;		Unchanged: 0/0
 13925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13930 ;;Total ram usage:        1 bytes
 13931 ;; Hardware stack levels used:    1
 13932 ;; Hardware stack levels required when called:    1
 13933 ;; This function calls:
 13934 ;;		i2_EUSART2_Write
 13935 ;; This function is called by:
 13936 ;;		i2_printf
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940                           	psect	text84
 13941  012742                     __ptext84:
 13942                           	opt stack 0
 13943  012742                     i2_putch:
 13944                           	opt stack 18
 13945                           
 13946                           ;incstack = 0
 13947                           ;i2putch@txData stored from wreg
 13948  012742  6E02               	movwf	i2putch@txData,c
 13949                           
 13950                           ;eusart2.c: 180: EUSART2_Write(txData);
 13951  012744  5002               	movf	i2putch@txData,w,c
 13952  012746  EC86  F090         	call	i2_EUSART2_Write
 13953  01274A  0012               	return		;funcret
 13954  01274C                     __end_ofi2_putch:
 13955                           	opt stack 0
 13956                           tosu	equ	0xFFF
 13957                           tosh	equ	0xFFE
 13958                           tosl	equ	0xFFD
 13959                           pclatu	equ	0xFFB
 13960                           pclath	equ	0xFFA
 13961                           tblptru	equ	0xFF8
 13962                           tblptrh	equ	0xFF7
 13963                           tblptrl	equ	0xFF6
 13964                           tablat	equ	0xFF5
 13965                           prodh	equ	0xFF4
 13966                           prodl	equ	0xFF3
 13967                           intcon	equ	0xFF2
 13968                           postinc0	equ	0xFEE
 13969                           fsr0h	equ	0xFEA
 13970                           fsr0l	equ	0xFE9
 13971                           wreg	equ	0xFE8
 13972                           indf1	equ	0xFE7
 13973                           postinc1	equ	0xFE6
 13974                           postdec1	equ	0xFE5
 13975                           fsr1h	equ	0xFE2
 13976                           fsr1l	equ	0xFE1
 13977                           indf2	equ	0xFDF
 13978                           postinc2	equ	0xFDE
 13979                           postdec2	equ	0xFDD
 13980                           plusw2	equ	0xFDB
 13981                           fsr2h	equ	0xFDA
 13982                           fsr2l	equ	0xFD9
 13983                           status	equ	0xFD8
 13984                           
 13985 ;; *************** function i2_EUSART2_Write *****************
 13986 ;; Defined at:
 13987 ;;		line 150 in file "mcc_generated_files/eusart2.c"
 13988 ;; Parameters:    Size  Location     Type
 13989 ;;  txData          1    wreg     unsigned char 
 13990 ;; Auto vars:     Size  Location     Type
 13991 ;;  txData          1    0[COMRAM] unsigned char 
 13992 ;; Return value:  Size  Location     Type
 13993 ;;                  1    wreg      void 
 13994 ;; Registers used:
 13995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13996 ;; Tracked objects:
 13997 ;;		On entry : 0/0
 13998 ;;		On exit  : 0/0
 13999 ;;		Unchanged: 0/0
 14000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14005 ;;Total ram usage:        1 bytes
 14006 ;; Hardware stack levels used:    1
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		i2_putch
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text85
 14015  01210C                     __ptext85:
 14016                           	opt stack 0
 14017  01210C                     i2_EUSART2_Write:
 14018                           	opt stack 18
 14019                           
 14020                           ;incstack = 0
 14021                           ;i2EUSART2_Write@txData stored from wreg
 14022  01210C  6E01               	movwf	i2EUSART2_Write@txData,c
 14023  01210E                     
 14024                           ;eusart2.c: 153: {
 14025                           
 14026                           ;eusart2.c: 152: while(0 == eusart2TxBufferRemaining)
 14027  01210E  504B               	movf	_eusart2TxBufferRemaining,w,c	;volatile
 14028  012110  B4D8               	btfsc	status,2,c
 14029  012112  D7FD               	goto	i2l3763
 14030                           
 14031                           ;eusart2.c: 154: }
 14032                           ;eusart2.c: 156: if(0 == PIE3bits.TX2IE)
 14033  012114  010E               	movlb	14	; () banked
 14034  012116  BD2C               	btfsc	44,6,b	;volatile
 14035  012118  D003               	goto	i2l234
 14036                           
 14037                           ; BSR set to: 14
 14038                           ;eusart2.c: 157: {
 14039                           ;eusart2.c: 158: TX2REG = txData;
 14040  01211A  C001  FEF2         	movff	i2EUSART2_Write@txData,3826	;volatile
 14041                           
 14042                           ;eusart2.c: 159: }
 14043  01211E  D012               	goto	i2l235
 14044  012120                     i2l234:
 14045                           
 14046                           ; BSR set to: 14
 14047                           ;eusart2.c: 160: else
 14048                           ;eusart2.c: 161: {
 14049                           ;eusart2.c: 162: PIE3bits.TX2IE = 0;
 14050  012120  9D2C               	bcf	44,6,b	;volatile
 14051                           
 14052                           ; BSR set to: 14
 14053                           ;eusart2.c: 163: eusart2TxBuffer[eusart2TxHead++] = txData;
 14054  012122  5041               	movf	_eusart2TxHead,w,c	;volatile
 14055  012124  0D01               	mullw	1
 14056  012126  0E00               	movlw	low _eusart2TxBuffer
 14057  012128  24F3               	addwf	prodl,w,c
 14058  01212A  6ED9               	movwf	fsr2l,c
 14059  01212C  0E02               	movlw	high _eusart2TxBuffer
 14060  01212E  20F4               	addwfc	prodh,w,c
 14061  012130  6EDA               	movwf	fsr2h,c
 14062  012132  C001  FFDF         	movff	i2EUSART2_Write@txData,indf2
 14063                           
 14064                           ; BSR set to: 14
 14065  012136  2A41               	incf	_eusart2TxHead,f,c	;volatile
 14066                           
 14067                           ; BSR set to: 14
 14068                           ;eusart2.c: 164: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
 14069  012138  0E3F               	movlw	63
 14070  01213A  6441               	cpfsgt	_eusart2TxHead,c	;volatile
 14071  01213C  D002               	goto	i2l236
 14072                           
 14073                           ; BSR set to: 14
 14074                           ;eusart2.c: 165: {
 14075                           ;eusart2.c: 166: eusart2TxHead = 0;
 14076  01213E  0E00               	movlw	0
 14077  012140  6E41               	movwf	_eusart2TxHead,c	;volatile
 14078  012142                     i2l236:
 14079                           
 14080                           ; BSR set to: 14
 14081                           ;eusart2.c: 167: }
 14082                           ;eusart2.c: 168: eusart2TxBufferRemaining--;
 14083                           
 14084                           ; BSR set to: 14
 14085  012142  064B               	decf	_eusart2TxBufferRemaining,f,c	;volatile
 14086  012144                     i2l235:
 14087                           
 14088                           ; BSR set to: 14
 14089                           ;eusart2.c: 169: }
 14090                           ;eusart2.c: 170: PIE3bits.TX2IE = 1;
 14091                           
 14092                           ; BSR set to: 14
 14093  012144  8D2C               	bsf	44,6,b	;volatile
 14094                           
 14095                           ; BSR set to: 14
 14096  012146  0012               	return		;funcret
 14097  012148                     __end_ofi2_EUSART2_Write:
 14098                           	opt stack 0
 14099                           tosu	equ	0xFFF
 14100                           tosh	equ	0xFFE
 14101                           tosl	equ	0xFFD
 14102                           pclatu	equ	0xFFB
 14103                           pclath	equ	0xFFA
 14104                           tblptru	equ	0xFF8
 14105                           tblptrh	equ	0xFF7
 14106                           tblptrl	equ	0xFF6
 14107                           tablat	equ	0xFF5
 14108                           prodh	equ	0xFF4
 14109                           prodl	equ	0xFF3
 14110                           intcon	equ	0xFF2
 14111                           postinc0	equ	0xFEE
 14112                           fsr0h	equ	0xFEA
 14113                           fsr0l	equ	0xFE9
 14114                           wreg	equ	0xFE8
 14115                           indf1	equ	0xFE7
 14116                           postinc1	equ	0xFE6
 14117                           postdec1	equ	0xFE5
 14118                           fsr1h	equ	0xFE2
 14119                           fsr1l	equ	0xFE1
 14120                           indf2	equ	0xFDF
 14121                           postinc2	equ	0xFDE
 14122                           postdec2	equ	0xFDD
 14123                           plusw2	equ	0xFDB
 14124                           fsr2h	equ	0xFDA
 14125                           fsr2l	equ	0xFD9
 14126                           status	equ	0xFD8
 14127                           
 14128 ;; *************** function i2___lwmod *****************
 14129 ;; Defined at:
 14130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 14131 ;; Parameters:    Size  Location     Type
 14132 ;;  dividend        2    7[COMRAM] unsigned int 
 14133 ;;  divisor         2    9[COMRAM] unsigned int 
 14134 ;; Auto vars:     Size  Location     Type
 14135 ;;  __lwmod         1   11[COMRAM] unsigned char 
 14136 ;; Return value:  Size  Location     Type
 14137 ;;                  2    7[COMRAM] unsigned int 
 14138 ;; Registers used:
 14139 ;;		wreg, status,2, status,0
 14140 ;; Tracked objects:
 14141 ;;		On entry : 0/0
 14142 ;;		On exit  : 0/0
 14143 ;;		Unchanged: 0/0
 14144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14148 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14149 ;;Total ram usage:        5 bytes
 14150 ;; Hardware stack levels used:    1
 14151 ;; This function calls:
 14152 ;;		Nothing
 14153 ;; This function is called by:
 14154 ;;		i2_printf
 14155 ;; This function uses a non-reentrant model
 14156 ;;
 14157                           
 14158                           	psect	text86
 14159  011F96                     __ptext86:
 14160                           	opt stack 0
 14161  011F96                     i2___lwmod:
 14162                           	opt stack 19
 14163                           
 14164                           ; BSR set to: 14
 14165                           ;incstack = 0
 14166  011F96  500A               	movf	i2___lwmod@divisor,w,c
 14167  011F98  100B               	iorwf	i2___lwmod@divisor+1,w,c
 14168  011F9A  B4D8               	btfsc	status,2,c
 14169  011F9C  D018               	goto	i2l1500
 14170  011F9E  0E01               	movlw	1
 14171  011FA0  6E0C               	movwf	i2___lwmod@counter,c
 14172  011FA2  D004               	goto	i2l1495
 14173  011FA4  90D8               	bcf	status,0,c
 14174  011FA6  360A               	rlcf	i2___lwmod@divisor,f,c
 14175  011FA8  360B               	rlcf	i2___lwmod@divisor+1,f,c
 14176  011FAA  2A0C               	incf	i2___lwmod@counter,f,c
 14177  011FAC                     i2l1495:
 14178  011FAC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 14179  011FAE  D7FA               	goto	i2l1496
 14180  011FB0                     i2u428_40:
 14181  011FB0  500A               	movf	i2___lwmod@divisor,w,c
 14182  011FB2  5C08               	subwf	i2___lwmod@dividend,w,c
 14183  011FB4  500B               	movf	i2___lwmod@divisor+1,w,c
 14184  011FB6  5809               	subwfb	i2___lwmod@dividend+1,w,c
 14185  011FB8  A0D8               	btfss	status,0,c
 14186  011FBA  D004               	goto	i2l1499
 14187  011FBC  500A               	movf	i2___lwmod@divisor,w,c
 14188  011FBE  5E08               	subwf	i2___lwmod@dividend,f,c
 14189  011FC0  500B               	movf	i2___lwmod@divisor+1,w,c
 14190  011FC2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 14191  011FC4                     i2l1499:
 14192  011FC4  90D8               	bcf	status,0,c
 14193  011FC6  320B               	rrcf	i2___lwmod@divisor+1,f,c
 14194  011FC8  320A               	rrcf	i2___lwmod@divisor,f,c
 14195  011FCA  2E0C               	decfsz	i2___lwmod@counter,f,c
 14196  011FCC  D7F1               	goto	i2u428_40
 14197  011FCE                     i2l1500:
 14198  011FCE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14199  011FD2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14200  011FD6  0012               	return		;funcret
 14201  011FD8                     __end_ofi2___lwmod:
 14202                           	opt stack 0
 14203                           tosu	equ	0xFFF
 14204                           tosh	equ	0xFFE
 14205                           tosl	equ	0xFFD
 14206                           pclatu	equ	0xFFB
 14207                           pclath	equ	0xFFA
 14208                           tblptru	equ	0xFF8
 14209                           tblptrh	equ	0xFF7
 14210                           tblptrl	equ	0xFF6
 14211                           tablat	equ	0xFF5
 14212                           prodh	equ	0xFF4
 14213                           prodl	equ	0xFF3
 14214                           intcon	equ	0xFF2
 14215                           postinc0	equ	0xFEE
 14216                           fsr0h	equ	0xFEA
 14217                           fsr0l	equ	0xFE9
 14218                           wreg	equ	0xFE8
 14219                           indf1	equ	0xFE7
 14220                           postinc1	equ	0xFE6
 14221                           postdec1	equ	0xFE5
 14222                           fsr1h	equ	0xFE2
 14223                           fsr1l	equ	0xFE1
 14224                           indf2	equ	0xFDF
 14225                           postinc2	equ	0xFDE
 14226                           postdec2	equ	0xFDD
 14227                           plusw2	equ	0xFDB
 14228                           fsr2h	equ	0xFDA
 14229                           fsr2l	equ	0xFD9
 14230                           status	equ	0xFD8
 14231                           
 14232 ;; *************** function i2___lwdiv *****************
 14233 ;; Defined at:
 14234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;  dividend        2    0[COMRAM] unsigned int 
 14237 ;;  divisor         2    2[COMRAM] unsigned int 
 14238 ;; Auto vars:     Size  Location     Type
 14239 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14240 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14241 ;; Return value:  Size  Location     Type
 14242 ;;                  2    0[COMRAM] unsigned int 
 14243 ;; Registers used:
 14244 ;;		wreg, status,2, status,0
 14245 ;; Tracked objects:
 14246 ;;		On entry : 0/0
 14247 ;;		On exit  : 0/0
 14248 ;;		Unchanged: 0/0
 14249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14250 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14251 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14253 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14254 ;;Total ram usage:        7 bytes
 14255 ;; Hardware stack levels used:    1
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		i2_printf
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           	psect	text87
 14264  011D8C                     __ptext87:
 14265                           	opt stack 0
 14266  011D8C                     i2___lwdiv:
 14267                           	opt stack 19
 14268                           
 14269                           ;incstack = 0
 14270  011D8C  0E00               	movlw	0
 14271  011D8E  6E06               	movwf	i2___lwdiv@quotient+1,c
 14272  011D90  0E00               	movlw	0
 14273  011D92  6E05               	movwf	i2___lwdiv@quotient,c
 14274  011D94  5003               	movf	i2___lwdiv@divisor,w,c
 14275  011D96  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14276  011D98  B4D8               	btfsc	status,2,c
 14277  011D9A  D01C               	goto	i2l1490
 14278  011D9C  0E01               	movlw	1
 14279  011D9E  6E07               	movwf	i2___lwdiv@counter,c
 14280  011DA0  D004               	goto	i2l1485
 14281  011DA2  90D8               	bcf	status,0,c
 14282  011DA4  3603               	rlcf	i2___lwdiv@divisor,f,c
 14283  011DA6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14284  011DA8  2A07               	incf	i2___lwdiv@counter,f,c
 14285  011DAA                     i2l1485:
 14286  011DAA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14287  011DAC  D7FA               	goto	i2l1486
 14288  011DAE                     i2u425_40:
 14289  011DAE  90D8               	bcf	status,0,c
 14290  011DB0  3605               	rlcf	i2___lwdiv@quotient,f,c
 14291  011DB2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14292  011DB4  5003               	movf	i2___lwdiv@divisor,w,c
 14293  011DB6  5C01               	subwf	i2___lwdiv@dividend,w,c
 14294  011DB8  5004               	movf	i2___lwdiv@divisor+1,w,c
 14295  011DBA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14296  011DBC  A0D8               	btfss	status,0,c
 14297  011DBE  D005               	goto	i2l1489
 14298  011DC0  5003               	movf	i2___lwdiv@divisor,w,c
 14299  011DC2  5E01               	subwf	i2___lwdiv@dividend,f,c
 14300  011DC4  5004               	movf	i2___lwdiv@divisor+1,w,c
 14301  011DC6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14302  011DC8  8005               	bsf	i2___lwdiv@quotient,0,c
 14303  011DCA                     i2l1489:
 14304  011DCA  90D8               	bcf	status,0,c
 14305  011DCC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14306  011DCE  3203               	rrcf	i2___lwdiv@divisor,f,c
 14307  011DD0  2E07               	decfsz	i2___lwdiv@counter,f,c
 14308  011DD2  D7ED               	goto	i2u425_40
 14309  011DD4                     i2l1490:
 14310  011DD4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14311  011DD8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14312  011DDC  0012               	return		;funcret
 14313  011DDE                     __end_ofi2___lwdiv:
 14314                           	opt stack 0
 14315                           tosu	equ	0xFFF
 14316                           tosh	equ	0xFFE
 14317                           tosl	equ	0xFFD
 14318                           pclatu	equ	0xFFB
 14319                           pclath	equ	0xFFA
 14320                           tblptru	equ	0xFF8
 14321                           tblptrh	equ	0xFF7
 14322                           tblptrl	equ	0xFF6
 14323                           tablat	equ	0xFF5
 14324                           prodh	equ	0xFF4
 14325                           prodl	equ	0xFF3
 14326                           intcon	equ	0xFF2
 14327                           postinc0	equ	0xFEE
 14328                           fsr0h	equ	0xFEA
 14329                           fsr0l	equ	0xFE9
 14330                           wreg	equ	0xFE8
 14331                           indf1	equ	0xFE7
 14332                           postinc1	equ	0xFE6
 14333                           postdec1	equ	0xFE5
 14334                           fsr1h	equ	0xFE2
 14335                           fsr1l	equ	0xFE1
 14336                           indf2	equ	0xFDF
 14337                           postinc2	equ	0xFDE
 14338                           postdec2	equ	0xFDD
 14339                           plusw2	equ	0xFDB
 14340                           fsr2h	equ	0xFDA
 14341                           fsr2l	equ	0xFD9
 14342                           status	equ	0xFD8
 14343                           
 14344 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 14345 ;; Defined at:
 14346 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;		None
 14349 ;; Auto vars:     Size  Location     Type
 14350 ;;		None
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  1    wreg      void 
 14353 ;; Registers used:
 14354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14364 ;;Total ram usage:        0 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; Hardware stack levels required when called:    3
 14367 ;; This function calls:
 14368 ;;		_MTOUCH_Sensor_Service
 14369 ;; This function is called by:
 14370 ;;		_INTERRUPT_InterruptManagerHigh
 14371 ;; This function uses a non-reentrant model
 14372 ;;
 14373                           
 14374                           	psect	text88
 14375  01274C                     __ptext88:
 14376                           	opt stack 0
 14377  01274C                     _ADCC_ThresholdISR_mTouch:
 14378                           	opt stack 18
 14379                           
 14380                           ;mtouch_sensor.c: 478: PIR1bits.ADTIF = 0;
 14381                           
 14382                           ;incstack = 0
 14383  01274C  010E               	movlb	14	; () banked
 14384  01274E  9334               	bcf	52,1,b	;volatile
 14385                           
 14386                           ; BSR set to: 14
 14387                           ;mtouch_sensor.c: 479: MTOUCH_Sensor_Service();
 14388  012750  EC4B  F08D         	call	_MTOUCH_Sensor_Service	;wreg free
 14389  012754  0012               	return		;funcret
 14390  012756                     __end_of_ADCC_ThresholdISR_mTouch:
 14391                           	opt stack 0
 14392                           tosu	equ	0xFFF
 14393                           tosh	equ	0xFFE
 14394                           tosl	equ	0xFFD
 14395                           pclatu	equ	0xFFB
 14396                           pclath	equ	0xFFA
 14397                           tblptru	equ	0xFF8
 14398                           tblptrh	equ	0xFF7
 14399                           tblptrl	equ	0xFF6
 14400                           tablat	equ	0xFF5
 14401                           prodh	equ	0xFF4
 14402                           prodl	equ	0xFF3
 14403                           intcon	equ	0xFF2
 14404                           postinc0	equ	0xFEE
 14405                           fsr0h	equ	0xFEA
 14406                           fsr0l	equ	0xFE9
 14407                           wreg	equ	0xFE8
 14408                           indf1	equ	0xFE7
 14409                           postinc1	equ	0xFE6
 14410                           postdec1	equ	0xFE5
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           plusw2	equ	0xFDB
 14417                           fsr2h	equ	0xFDA
 14418                           fsr2l	equ	0xFD9
 14419                           status	equ	0xFD8
 14420                           
 14421 ;; *************** function _MTOUCH_Sensor_Service *****************
 14422 ;; Defined at:
 14423 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14424 ;; Parameters:    Size  Location     Type
 14425 ;;		None
 14426 ;; Auto vars:     Size  Location     Type
 14427 ;;  sensor          2   13[COMRAM] PTR struct .
 14428 ;;		 -> mtouch_sensor(45), 
 14429 ;; Return value:  Size  Location     Type
 14430 ;;                  1    wreg      void 
 14431 ;; Registers used:
 14432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14433 ;; Tracked objects:
 14434 ;;		On entry : 0/0
 14435 ;;		On exit  : 0/0
 14436 ;;		Unchanged: 0/0
 14437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14442 ;;Total ram usage:        2 bytes
 14443 ;; Hardware stack levels used:    1
 14444 ;; Hardware stack levels required when called:    2
 14445 ;; This function calls:
 14446 ;;		_Sensor_autoCalibration
 14447 ;;		_Sensor_setSampled
 14448 ;;		i2_Sensor_SetTrisBit
 14449 ;;		i2_Sensor_isCalibrated
 14450 ;;		i2_Sensor_scheduleNextScan
 14451 ;; This function is called by:
 14452 ;;		_ADCC_ThresholdISR_mTouch
 14453 ;; This function uses a non-reentrant model
 14454 ;;
 14455                           
 14456                           	psect	text89
 14457  011A96                     __ptext89:
 14458                           	opt stack 0
 14459  011A96                     _MTOUCH_Sensor_Service:
 14460                           	opt stack 18
 14461                           
 14462                           ;mtouch_sensor.c: 490: mtouch_sensor_t* sensor;
 14463                           ;mtouch_sensor.c: 492: Sensor_SetTrisBit(currentScanSensor,0);
 14464                           
 14465                           ;incstack = 0
 14466  011A96  0E00               	movlw	0
 14467  011A98  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 14468  011A9A  503B               	movf	_currentScanSensor,w,c
 14469  011A9C  ECB6  F08D         	call	i2_Sensor_SetTrisBit
 14470                           
 14471                           ;mtouch_sensor.c: 494: if(scanInterrupted)
 14472  011AA0  5039               	movf	_scanInterrupted,w,c	;volatile
 14473  011AA2  B4D8               	btfsc	status,2,c
 14474  011AA4  D002               	goto	i2l559
 14475                           
 14476                           ;mtouch_sensor.c: 495: {
 14477                           ;mtouch_sensor.c: 496: ADCON0bits.ADON = 0;
 14478  011AA6  9E60               	bcf	3936,7,c	;volatile
 14479                           
 14480                           ;mtouch_sensor.c: 497: }
 14481  011AA8  D02B               	goto	i2l560
 14482  011AAA                     i2l559:
 14483                           
 14484                           ;mtouch_sensor.c: 498: else
 14485                           ;mtouch_sensor.c: 499: {
 14486                           ;mtouch_sensor.c: 500: ADCON0bits.ADON = 0;
 14487  011AAA  9E60               	bcf	3936,7,c	;volatile
 14488                           
 14489                           ;mtouch_sensor.c: 501: sensor = &mtouch_sensor[currentScanSensor];
 14490  011AAC  503B               	movf	_currentScanSensor,w,c
 14491  011AAE  0D09               	mullw	9
 14492  011AB0  0E82               	movlw	low _mtouch_sensor
 14493  011AB2  24F3               	addwf	prodl,w,c
 14494  011AB4  6E0E               	movwf	MTOUCH_Sensor_Service@sensor,c
 14495  011AB6  0E00               	movlw	high _mtouch_sensor
 14496  011AB8  20F4               	addwfc	prodh,w,c
 14497  011ABA  6E0F               	movwf	MTOUCH_Sensor_Service@sensor+1,c
 14498                           
 14499                           ;mtouch_sensor.c: 502: if(!Sensor_isCalibrated(sensor))
 14500  011ABC  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 14501  011AC0  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,i2Sensor_isCalibrated@sensor+1
 14502  011AC4  EC10  F093         	call	i2_Sensor_isCalibrated	;wreg free
 14503  011AC8  0900               	iorlw	0
 14504  011ACA  A4D8               	btfss	status,2,c
 14505  011ACC  D007               	goto	i2l561
 14506                           
 14507                           ;mtouch_sensor.c: 503: {
 14508                           ;mtouch_sensor.c: 504: Sensor_autoCalibration(sensor);
 14509  011ACE  C00E  F005         	movff	MTOUCH_Sensor_Service@sensor,Sensor_autoCalibration@sensor
 14510  011AD2  C00F  F006         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_autoCalibration@sensor+1
 14511  011AD6  EC08  F086         	call	_Sensor_autoCalibration	;wreg free
 14512                           
 14513                           ;mtouch_sensor.c: 505: }
 14514  011ADA  D006               	goto	i2l562
 14515  011ADC                     i2l561:
 14516                           
 14517                           ;mtouch_sensor.c: 506: else
 14518                           ;mtouch_sensor.c: 507: {
 14519                           ;mtouch_sensor.c: 508: Sensor_setSampled(sensor);
 14520  011ADC  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 14521  011AE0  C00F  F002         	movff	MTOUCH_Sensor_Service@sensor+1,Sensor_setSampled@sensor+1
 14522  011AE4  EC5E  F093         	call	_Sensor_setSampled	;wreg free
 14523  011AE8                     i2l562:
 14524                           
 14525                           ;mtouch_sensor.c: 509: }
 14526                           ;mtouch_sensor.c: 510: packet_sample[currentScanSensor] = ADFLTR;
 14527  011AE8  503B               	movf	_currentScanSensor,w,c
 14528  011AEA  0D02               	mullw	2
 14529  011AEC  0E29               	movlw	low _packet_sample
 14530  011AEE  24F3               	addwf	prodl,w,c
 14531  011AF0  6ED9               	movwf	fsr2l,c
 14532  011AF2  0E00               	movlw	high _packet_sample
 14533  011AF4  20F4               	addwfc	prodh,w,c
 14534  011AF6  6EDA               	movwf	fsr2h,c
 14535  011AF8  CF72 FFDE          	movff	3954,postinc2	;volatile
 14536  011AFC  CF73 FFDD          	movff	3955,postdec2	;volatile
 14537  011B00                     i2l560:
 14538                           
 14539                           ;mtouch_sensor.c: 511: }
 14540                           ;mtouch_sensor.c: 512: Sensor_scheduleNextScan();
 14541  011B00  ECC2  F084         	call	i2_Sensor_scheduleNextScan	;wreg free
 14542  011B04  0012               	return		;funcret
 14543  011B06                     __end_of_MTOUCH_Sensor_Service:
 14544                           	opt stack 0
 14545                           tosu	equ	0xFFF
 14546                           tosh	equ	0xFFE
 14547                           tosl	equ	0xFFD
 14548                           pclatu	equ	0xFFB
 14549                           pclath	equ	0xFFA
 14550                           tblptru	equ	0xFF8
 14551                           tblptrh	equ	0xFF7
 14552                           tblptrl	equ	0xFF6
 14553                           tablat	equ	0xFF5
 14554                           prodh	equ	0xFF4
 14555                           prodl	equ	0xFF3
 14556                           intcon	equ	0xFF2
 14557                           postinc0	equ	0xFEE
 14558                           fsr0h	equ	0xFEA
 14559                           fsr0l	equ	0xFE9
 14560                           wreg	equ	0xFE8
 14561                           indf1	equ	0xFE7
 14562                           postinc1	equ	0xFE6
 14563                           postdec1	equ	0xFE5
 14564                           fsr1h	equ	0xFE2
 14565                           fsr1l	equ	0xFE1
 14566                           indf2	equ	0xFDF
 14567                           postinc2	equ	0xFDE
 14568                           postdec2	equ	0xFDD
 14569                           plusw2	equ	0xFDB
 14570                           fsr2h	equ	0xFDA
 14571                           fsr2l	equ	0xFD9
 14572                           status	equ	0xFD8
 14573                           
 14574 ;; *************** function i2_Sensor_scheduleNextScan *****************
 14575 ;; Defined at:
 14576 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14577 ;; Parameters:    Size  Location     Type
 14578 ;;		None
 14579 ;; Auto vars:     Size  Location     Type
 14580 ;;  Sensor_sched    2    6[COMRAM] PTR struct .
 14581 ;;		 -> mtouch_sensor(45), 
 14582 ;;  Sensor_sched    1    5[COMRAM] unsigned char 
 14583 ;;  Sensor_sched    1    4[COMRAM] unsigned char 
 14584 ;; Return value:  Size  Location     Type
 14585 ;;                  1    wreg      void 
 14586 ;; Registers used:
 14587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14588 ;; Tracked objects:
 14589 ;;		On entry : 0/0
 14590 ;;		On exit  : 0/0
 14591 ;;		Unchanged: 0/0
 14592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14594 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14596 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14597 ;;Total ram usage:        6 bytes
 14598 ;; Hardware stack levels used:    1
 14599 ;; Hardware stack levels required when called:    1
 14600 ;; This function calls:
 14601 ;;		i2_MTOUCH_Sensor_isEnabled
 14602 ;;		i2_MTOUCH_Sensor_wasSampled
 14603 ;;		i2_Sensor_SetTrisBit
 14604 ;;		i2_Sensor_isCalibrated
 14605 ;;		i2_Sensor_isCalibratingAcqTime
 14606 ;; This function is called by:
 14607 ;;		_MTOUCH_Sensor_Service
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           	psect	text90
 14612  010984                     __ptext90:
 14613                           	opt stack 0
 14614  010984                     i2_Sensor_scheduleNextScan:
 14615                           	opt stack 18
 14616                           
 14617                           ;mtouch_sensor.c: 341: mtouch_sensor_t* sensor;
 14618                           ;mtouch_sensor.c: 342: bool skipScan = (bool)0;
 14619                           
 14620                           ;incstack = 0
 14621  010984  0E00               	movlw	0
 14622  010986  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 14623                           
 14624                           ;mtouch_sensor.c: 343: bool state = (bool)GIE;
 14625  010988  0E00               	movlw	0
 14626  01098A  BEF2               	btfsc	intcon,7,c	;volatile
 14627  01098C  0E01               	movlw	1
 14628  01098E  6E05               	movwf	i2Sensor_scheduleNextScan@state,c
 14629                           
 14630                           ;mtouch_sensor.c: 346: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 14631  010990  D00C               	goto	i2l524
 14632  010992                     
 14633                           ;mtouch_sensor.c: 347: {
 14634                           ;mtouch_sensor.c: 348: if(++currentScanSensor == 5)
 14635  010992  2A3B               	incf	_currentScanSensor,f,c
 14636  010994  0E05               	movlw	5
 14637  010996  183B               	xorwf	_currentScanSensor,w,c
 14638  010998  A4D8               	btfss	status,2,c
 14639  01099A  D007               	goto	i2l524
 14640                           
 14641                           ;mtouch_sensor.c: 349: {
 14642                           ;mtouch_sensor.c: 350: currentScanSensor = 0;
 14643  01099C  0E00               	movlw	0
 14644  01099E  6E3B               	movwf	_currentScanSensor,c
 14645                           
 14646                           ;mtouch_sensor.c: 351: sampling_flag = 0;
 14647  0109A0  0E00               	movlw	0
 14648  0109A2  6E3A               	movwf	_sampling_flag,c
 14649                           
 14650                           ;mtouch_sensor.c: 352: skipScan = 1;
 14651  0109A4  0E01               	movlw	1
 14652  0109A6  6E06               	movwf	i2Sensor_scheduleNextScan@skipScan,c
 14653                           
 14654                           ;mtouch_sensor.c: 353: break;
 14655  0109A8  D00C               	goto	i2u417_40
 14656  0109AA                     i2l524:
 14657  0109AA  503B               	movf	_currentScanSensor,w,c
 14658  0109AC  EC7B  F091         	call	i2_MTOUCH_Sensor_wasSampled
 14659  0109B0  0900               	iorlw	0
 14660  0109B2  A4D8               	btfss	status,2,c
 14661  0109B4  D7EE               	goto	i2l523
 14662  0109B6  503B               	movf	_currentScanSensor,w,c
 14663  0109B8  EC94  F091         	call	i2_MTOUCH_Sensor_isEnabled
 14664  0109BC  0900               	iorlw	0
 14665  0109BE  B4D8               	btfsc	status,2,c
 14666  0109C0  D7E8               	goto	i2l523
 14667  0109C2                     i2u417_40:
 14668                           
 14669                           ;mtouch_sensor.c: 354: }
 14670                           ;mtouch_sensor.c: 355: }
 14671                           ;mtouch_sensor.c: 358: if(skipScan==0)
 14672  0109C2  5006               	movf	i2Sensor_scheduleNextScan@skipScan,w,c
 14673  0109C4  A4D8               	btfss	status,2,c
 14674  0109C6  0012               	return	
 14675                           
 14676                           ;mtouch_sensor.c: 359: {
 14677                           ;mtouch_sensor.c: 360: sensor = &mtouch_sensor[currentScanSensor];
 14678  0109C8  503B               	movf	_currentScanSensor,w,c
 14679  0109CA  0D09               	mullw	9
 14680  0109CC  0E82               	movlw	low _mtouch_sensor
 14681  0109CE  24F3               	addwf	prodl,w,c
 14682  0109D0  6E07               	movwf	i2Sensor_scheduleNextScan@sensor,c
 14683  0109D2  0E00               	movlw	high _mtouch_sensor
 14684  0109D4  20F4               	addwfc	prodh,w,c
 14685  0109D6  6E08               	movwf	i2Sensor_scheduleNextScan@sensor+1,c
 14686                           
 14687                           ;mtouch_sensor.c: 361: if(Sensor_isCalibrated(sensor))
 14688  0109D8  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 14689  0109DC  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibrated@sensor+1
 14690  0109E0  EC10  F093         	call	i2_Sensor_isCalibrated	;wreg free
 14691  0109E4  0900               	iorlw	0
 14692  0109E6  B4D8               	btfsc	status,2,c
 14693  0109E8  D012               	goto	i2l527
 14694                           
 14695                           ;mtouch_sensor.c: 362: {
 14696                           ;mtouch_sensor.c: 363: ADACQ = (uint8_t)sensor->acquisition_time;
 14697  0109EA  EE20 F003          	lfsr	2,3
 14698  0109EE  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14699  0109F0  26D9               	addwf	fsr2l,f,c
 14700  0109F2  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14701  0109F4  22DA               	addwfc	fsr2h,f,c
 14702  0109F6  50DF               	movf	indf2,w,c
 14703  0109F8  010F               	movlb	15	; () banked
 14704  0109FA  6F5C               	movwf	92,b	;volatile
 14705                           
 14706                           ;mtouch_sensor.c: 364: ADPRE = (uint8_t)sensor->precharge_time;
 14707  0109FC  EE20 F002          	lfsr	2,2
 14708  010A00  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14709  010A02  26D9               	addwf	fsr2l,f,c
 14710  010A04  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14711  010A06  22DA               	addwfc	fsr2h,f,c
 14712  010A08  50DF               	movf	indf2,w,c
 14713  010A0A  6F5E               	movwf	94,b	;volatile
 14714                           
 14715                           ;mtouch_sensor.c: 365: }
 14716  010A0C  D01F               	goto	i2l530
 14717  010A0E                     i2l527:
 14718                           
 14719                           ;mtouch_sensor.c: 366: else
 14720                           ;mtouch_sensor.c: 367: {
 14721                           ;mtouch_sensor.c: 368: if(Sensor_isCalibratingAcqTime(sensor))
 14722                           
 14723                           ; BSR set to: 15
 14724  010A0E  C007  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 14725  010A12  C008  F002         	movff	i2Sensor_scheduleNextScan@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 14726  010A16  EC1C  F093         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 14727  010A1A  0900               	iorlw	0
 14728  010A1C  B4D8               	btfsc	status,2,c
 14729  010A1E  D011               	goto	i2l529
 14730                           
 14731                           ;mtouch_sensor.c: 369: {
 14732                           ;mtouch_sensor.c: 370: ADPRE = (uint8_t)sensor->precharge_time;
 14733  010A20  EE20 F002          	lfsr	2,2
 14734  010A24  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14735  010A26  26D9               	addwf	fsr2l,f,c
 14736  010A28  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14737  010A2A  22DA               	addwfc	fsr2h,f,c
 14738  010A2C  50DF               	movf	indf2,w,c
 14739  010A2E  010F               	movlb	15	; () banked
 14740  010A30  6F5E               	movwf	94,b	;volatile
 14741                           
 14742                           ;mtouch_sensor.c: 371: ADACQ = (uint8_t)sensor->acquisition_time;
 14743  010A32  EE20 F003          	lfsr	2,3
 14744  010A36  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14745  010A38  26D9               	addwf	fsr2l,f,c
 14746  010A3A  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14747  010A3C  22DA               	addwfc	fsr2h,f,c
 14748  010A3E  50DF               	movf	indf2,w,c
 14749  010A40  D004               	goto	L6
 14750  010A42                     i2l529:
 14751                           
 14752                           ;mtouch_sensor.c: 373: else
 14753                           ;mtouch_sensor.c: 374: {
 14754                           ;mtouch_sensor.c: 375: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 14755                           
 14756                           ; BSR set to: 15
 14757  010A42  0E80               	movlw	128
 14758  010A44  010F               	movlb	15	; () banked
 14759  010A46  6F5E               	movwf	94,b	;volatile
 14760                           
 14761                           ;mtouch_sensor.c: 376: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)3));
 14762  010A48  0E80               	movlw	128
 14763  010A4A                     L6:
 14764  010A4A  6F5C               	movwf	92,b	;volatile
 14765  010A4C                     i2l530:
 14766                           
 14767                           ; BSR set to: 15
 14768                           ;mtouch_sensor.c: 377: }
 14769                           ;mtouch_sensor.c: 378: }
 14770                           ;mtouch_sensor.c: 380: ADPRE +=(uint8_t)sample_delay;
 14771                           
 14772                           ; BSR set to: 15
 14773                           
 14774                           ; BSR set to: 15
 14775  010A4C  5038               	movf	_sample_delay,w,c
 14776  010A4E  275E               	addwf	94,f,b	;volatile
 14777                           
 14778                           ; BSR set to: 15
 14779                           ;mtouch_sensor.c: 381: ADPCH = (uint8_t)sensor->adpch;
 14780  010A50  EE20 F001          	lfsr	2,1
 14781  010A54  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14782  010A56  26D9               	addwf	fsr2l,f,c
 14783  010A58  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14784  010A5A  22DA               	addwfc	fsr2h,f,c
 14785  010A5C  50DF               	movf	indf2,w,c
 14786  010A5E  6F5F               	movwf	95,b	;volatile
 14787                           
 14788                           ; BSR set to: 15
 14789                           ;mtouch_sensor.c: 382: ADRPT = (uint8_t)(sensor->oversampling>>1);
 14790  010A60  EE20 F004          	lfsr	2,4
 14791  010A64  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14792  010A66  26D9               	addwf	fsr2l,f,c
 14793  010A68  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14794  010A6A  22DA               	addwfc	fsr2h,f,c
 14795  010A6C  50DF               	movf	indf2,w,c
 14796  010A6E  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 14797  010A70  90D8               	bcf	status,0,c
 14798  010A72  3003               	rrcf	??i2_Sensor_scheduleNextScan,w,c
 14799  010A74  6E66               	movwf	3942,c	;volatile
 14800                           
 14801                           ; BSR set to: 15
 14802                           ;mtouch_sensor.c: 383: ADCAP = (uint8_t)sensor->addcap;
 14803  010A76  EE20 F005          	lfsr	2,5
 14804  010A7A  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14805  010A7C  26D9               	addwf	fsr2l,f,c
 14806  010A7E  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14807  010A80  22DA               	addwfc	fsr2h,f,c
 14808  010A82  50DF               	movf	indf2,w,c
 14809  010A84  6F5D               	movwf	93,b	;volatile
 14810                           
 14811                           ; BSR set to: 15
 14812                           ;mtouch_sensor.c: 384: ADCON0bits.ADON = 1;
 14813  010A86  8E60               	bsf	3936,7,c	;volatile
 14814                           
 14815                           ; BSR set to: 15
 14816                           ;mtouch_sensor.c: 385: sampling_flag= 1;
 14817  010A88  0E01               	movlw	1
 14818  010A8A  6E3A               	movwf	_sampling_flag,c
 14819                           
 14820                           ; BSR set to: 15
 14821                           ;mtouch_sensor.c: 386: Sensor_SetTrisBit(currentScanSensor,1);
 14822  010A8C  0E01               	movlw	1
 14823  010A8E  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit,c
 14824  010A90  503B               	movf	_currentScanSensor,w,c
 14825  010A92  ECB6  F08D         	call	i2_Sensor_SetTrisBit
 14826                           
 14827                           ;mtouch_sensor.c: 387: GIE = 0;
 14828  010A96  9EF2               	bcf	intcon,7,c	;volatile
 14829                           
 14830                           ;mtouch_sensor.c: 388: ADCON0bits.GO = 1;
 14831  010A98  8060               	bsf	3936,0,c	;volatile
 14832                           
 14833                           ;mtouch_sensor.c: 389: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 14834  010A9A  EE20 F004          	lfsr	2,4
 14835  010A9E  5007               	movf	i2Sensor_scheduleNextScan@sensor,w,c
 14836  010AA0  26D9               	addwf	fsr2l,f,c
 14837  010AA2  5008               	movf	i2Sensor_scheduleNextScan@sensor+1,w,c
 14838  010AA4  22DA               	addwfc	fsr2h,f,c
 14839  010AA6  50DF               	movf	indf2,w,c
 14840  010AA8  6E03               	movwf	??i2_Sensor_scheduleNextScan& (0+255),c
 14841  010AAA  6A04               	clrf	(??i2_Sensor_scheduleNextScan+1)& (0+255),c
 14842  010AAC  0E09               	movlw	9
 14843  010AAE                     i2u421_45:
 14844  010AAE  90D8               	bcf	status,0,c
 14845  010AB0  3603               	rlcf	??i2_Sensor_scheduleNextScan,f,c
 14846  010AB2  3604               	rlcf	??i2_Sensor_scheduleNextScan+1,f,c
 14847  010AB4  2EE8               	decfsz	wreg,f,c
 14848  010AB6  D7FB               	goto	i2u421_45
 14849  010AB8  C003  FF70         	movff	??i2_Sensor_scheduleNextScan,3952	;volatile
 14850  010ABC  C004  FF71         	movff	??i2_Sensor_scheduleNextScan+1,3953	;volatile
 14851                           
 14852                           ;mtouch_sensor.c: 390: GIE = state;
 14853  010AC0  A005               	btfss	i2Sensor_scheduleNextScan@state,0,c
 14854  010AC2  D002               	goto	i2u422_40
 14855  010AC4  8EF2               	bsf	intcon,7,c	;volatile
 14856  010AC6  D001               	goto	i2u423_45
 14857  010AC8                     i2u422_40:
 14858  010AC8  9EF2               	bcf	intcon,7,c	;volatile
 14859  010ACA                     i2u423_45:
 14860                           
 14861                           ;mtouch_sensor.c: 391: scanInterrupted = 0;
 14862  010ACA  0E00               	movlw	0
 14863  010ACC  6E39               	movwf	_scanInterrupted,c	;volatile
 14864  010ACE  0012               	return	
 14865  010AD0                     __end_ofi2_Sensor_scheduleNextScan:
 14866                           	opt stack 0
 14867                           tosu	equ	0xFFF
 14868                           tosh	equ	0xFFE
 14869                           tosl	equ	0xFFD
 14870                           pclatu	equ	0xFFB
 14871                           pclath	equ	0xFFA
 14872                           tblptru	equ	0xFF8
 14873                           tblptrh	equ	0xFF7
 14874                           tblptrl	equ	0xFF6
 14875                           tablat	equ	0xFF5
 14876                           prodh	equ	0xFF4
 14877                           prodl	equ	0xFF3
 14878                           intcon	equ	0xFF2
 14879                           postinc0	equ	0xFEE
 14880                           fsr0h	equ	0xFEA
 14881                           fsr0l	equ	0xFE9
 14882                           wreg	equ	0xFE8
 14883                           indf1	equ	0xFE7
 14884                           postinc1	equ	0xFE6
 14885                           postdec1	equ	0xFE5
 14886                           fsr1h	equ	0xFE2
 14887                           fsr1l	equ	0xFE1
 14888                           indf2	equ	0xFDF
 14889                           postinc2	equ	0xFDE
 14890                           postdec2	equ	0xFDD
 14891                           plusw2	equ	0xFDB
 14892                           fsr2h	equ	0xFDA
 14893                           fsr2l	equ	0xFD9
 14894                           status	equ	0xFD8
 14895                           
 14896 ;; *************** function i2_Sensor_isCalibrated *****************
 14897 ;; Defined at:
 14898 ;;		line 780 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;  sensor          2    0[COMRAM] PTR struct .
 14901 ;;		 -> mtouch_sensor(45), 
 14902 ;; Auto vars:     Size  Location     Type
 14903 ;;		None
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  1    wreg      unsigned char 
 14906 ;; Registers used:
 14907 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14916 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14917 ;;Total ram usage:        2 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; This function calls:
 14920 ;;		Nothing
 14921 ;; This function is called by:
 14922 ;;		_MTOUCH_Sensor_Service
 14923 ;;		i2_Sensor_scheduleNextScan
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           	psect	text91
 14928  012620                     __ptext91:
 14929                           	opt stack 0
 14930  012620                     i2_Sensor_isCalibrated:
 14931                           	opt stack 18
 14932                           
 14933                           ;mtouch_sensor.c: 782: return (bool)sensor->calibrated;
 14934                           
 14935                           ;incstack = 0
 14936  012620  EE20 F008          	lfsr	2,8
 14937  012624  5001               	movf	i2Sensor_isCalibrated@sensor,w,c
 14938  012626  26D9               	addwf	fsr2l,f,c
 14939  012628  5002               	movf	i2Sensor_isCalibrated@sensor+1,w,c
 14940  01262A  22DA               	addwfc	fsr2h,f,c
 14941  01262C  A6DF               	btfss	indf2,3,c
 14942  01262E  D002               	goto	i2u379_40
 14943  012630  0E01               	movlw	1
 14944  012632  0012               	return	
 14945  012634                     i2u379_40:
 14946  012634  0E00               	movlw	0
 14947  012636  0012               	return	
 14948  012638                     __end_ofi2_Sensor_isCalibrated:
 14949                           	opt stack 0
 14950                           tosu	equ	0xFFF
 14951                           tosh	equ	0xFFE
 14952                           tosl	equ	0xFFD
 14953                           pclatu	equ	0xFFB
 14954                           pclath	equ	0xFFA
 14955                           tblptru	equ	0xFF8
 14956                           tblptrh	equ	0xFF7
 14957                           tblptrl	equ	0xFF6
 14958                           tablat	equ	0xFF5
 14959                           prodh	equ	0xFF4
 14960                           prodl	equ	0xFF3
 14961                           intcon	equ	0xFF2
 14962                           postinc0	equ	0xFEE
 14963                           fsr0h	equ	0xFEA
 14964                           fsr0l	equ	0xFE9
 14965                           wreg	equ	0xFE8
 14966                           indf1	equ	0xFE7
 14967                           postinc1	equ	0xFE6
 14968                           postdec1	equ	0xFE5
 14969                           fsr1h	equ	0xFE2
 14970                           fsr1l	equ	0xFE1
 14971                           indf2	equ	0xFDF
 14972                           postinc2	equ	0xFDE
 14973                           postdec2	equ	0xFDD
 14974                           plusw2	equ	0xFDB
 14975                           fsr2h	equ	0xFDA
 14976                           fsr2l	equ	0xFD9
 14977                           status	equ	0xFD8
 14978                           
 14979 ;; *************** function i2_Sensor_SetTrisBit *****************
 14980 ;; Defined at:
 14981 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;  sensor          1    wreg     enum E17513
 14984 ;;  TrisBit         1    0[COMRAM] unsigned char 
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;  sensor          1    1[COMRAM] enum E17513
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  1    wreg      void 
 14989 ;; Registers used:
 14990 ;;		wreg, status,2, status,0
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14996 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15000 ;;Total ram usage:        2 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; This function calls:
 15003 ;;		Nothing
 15004 ;; This function is called by:
 15005 ;;		_MTOUCH_Sensor_Service
 15006 ;;		i2_Sensor_scheduleNextScan
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           	psect	text92
 15011  011B6C                     __ptext92:
 15012                           	opt stack 0
 15013  011B6C                     i2_Sensor_SetTrisBit:
 15014                           	opt stack 18
 15015                           
 15016                           ;incstack = 0
 15017                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 15018  011B6C  6E02               	movwf	i2Sensor_SetTrisBit@sensor,c
 15019                           
 15020                           ;mtouch_sensor.c: 224: switch(sensor)
 15021  011B6E  D01E               	goto	i2l493
 15022  011B70                     i2l494:
 15023                           
 15024                           ;mtouch_sensor.c: 227: TRISEbits.TRISE2 = TrisBit;
 15025  011B70  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 15026  011B72  D002               	bra	i2u372_45
 15027  011B74  9485               	bcf	3973,2,c	;volatile
 15028  011B76  D001               	bra	i2u372_46
 15029  011B78                     i2u372_45:
 15030  011B78  8485               	bsf	3973,2,c	;volatile
 15031  011B7A                     i2u372_46:
 15032                           
 15033                           ;mtouch_sensor.c: 228: break;
 15034  011B7A  0012               	return	
 15035  011B7C                     i2l496:
 15036                           
 15037                           ;mtouch_sensor.c: 230: TRISEbits.TRISE3 = TrisBit;
 15038  011B7C  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 15039  011B7E  D002               	bra	i2u373_45
 15040  011B80  9685               	bcf	3973,3,c	;volatile
 15041  011B82  D001               	bra	i2u373_46
 15042  011B84                     i2u373_45:
 15043  011B84  8685               	bsf	3973,3,c	;volatile
 15044  011B86                     i2u373_46:
 15045                           
 15046                           ;mtouch_sensor.c: 231: break;
 15047  011B86  0012               	return	
 15048  011B88                     i2l497:
 15049                           
 15050                           ;mtouch_sensor.c: 233: TRISEbits.TRISE4 = TrisBit;
 15051  011B88  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 15052  011B8A  D002               	bra	i2u374_45
 15053  011B8C  9885               	bcf	3973,4,c	;volatile
 15054  011B8E  D001               	bra	i2u374_46
 15055  011B90                     i2u374_45:
 15056  011B90  8885               	bsf	3973,4,c	;volatile
 15057  011B92                     i2u374_46:
 15058                           
 15059                           ;mtouch_sensor.c: 234: break;
 15060  011B92  0012               	return	
 15061  011B94                     i2l498:
 15062                           
 15063                           ;mtouch_sensor.c: 236: TRISEbits.TRISE5 = TrisBit;
 15064  011B94  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 15065  011B96  D002               	bra	i2u375_45
 15066  011B98  9A85               	bcf	3973,5,c	;volatile
 15067  011B9A  D001               	bra	i2u375_46
 15068  011B9C                     i2u375_45:
 15069  011B9C  8A85               	bsf	3973,5,c	;volatile
 15070  011B9E                     i2u375_46:
 15071                           
 15072                           ;mtouch_sensor.c: 237: break;
 15073  011B9E  0012               	return	
 15074  011BA0                     i2l499:
 15075                           
 15076                           ;mtouch_sensor.c: 239: TRISEbits.TRISE6 = TrisBit;
 15077  011BA0  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit,0,c
 15078  011BA2  D002               	bra	i2u376_45
 15079  011BA4  9C85               	bcf	3973,6,c	;volatile
 15080  011BA6  D001               	bra	i2u376_46
 15081  011BA8                     i2u376_45:
 15082  011BA8  8C85               	bsf	3973,6,c	;volatile
 15083  011BAA                     i2u376_46:
 15084                           
 15085                           ;mtouch_sensor.c: 242: }
 15086                           
 15087                           ;mtouch_sensor.c: 241: default: break;
 15088                           
 15089                           ;mtouch_sensor.c: 240: break;
 15090  011BAA  0012               	return	
 15091  011BAC                     i2l493:
 15092  011BAC  5002               	movf	i2Sensor_SetTrisBit@sensor,w,c
 15093                           
 15094                           ; Switch size 1, requested type "space"
 15095                           ; Number of cases is 5, Range of values is 0 to 4
 15096                           ; switch strategies available:
 15097                           ; Name         Instructions Cycles
 15098                           ; simple_byte           16     9 (average)
 15099                           ;	Chosen strategy is simple_byte
 15100  011BAE  0A00               	xorlw	0	; case 0
 15101  011BB0  B4D8               	btfsc	status,2,c
 15102  011BB2  D7DE               	goto	i2l494
 15103  011BB4  0A01               	xorlw	1	; case 1
 15104  011BB6  B4D8               	btfsc	status,2,c
 15105  011BB8  D7E1               	goto	i2l496
 15106  011BBA  0A03               	xorlw	3	; case 2
 15107  011BBC  B4D8               	btfsc	status,2,c
 15108  011BBE  D7E4               	goto	i2l497
 15109  011BC0  0A01               	xorlw	1	; case 3
 15110  011BC2  B4D8               	btfsc	status,2,c
 15111  011BC4  D7E7               	goto	i2l498
 15112  011BC6  0A07               	xorlw	7	; case 4
 15113  011BC8  A4D8               	btfss	status,2,c
 15114  011BCA  0012               	return	
 15115  011BCC  D7E9               	goto	i2l499
 15116  011BCE                     __end_ofi2_Sensor_SetTrisBit:
 15117                           	opt stack 0
 15118                           tosu	equ	0xFFF
 15119                           tosh	equ	0xFFE
 15120                           tosl	equ	0xFFD
 15121                           pclatu	equ	0xFFB
 15122                           pclath	equ	0xFFA
 15123                           tblptru	equ	0xFF8
 15124                           tblptrh	equ	0xFF7
 15125                           tblptrl	equ	0xFF6
 15126                           tablat	equ	0xFF5
 15127                           prodh	equ	0xFF4
 15128                           prodl	equ	0xFF3
 15129                           intcon	equ	0xFF2
 15130                           postinc0	equ	0xFEE
 15131                           fsr0h	equ	0xFEA
 15132                           fsr0l	equ	0xFE9
 15133                           wreg	equ	0xFE8
 15134                           indf1	equ	0xFE7
 15135                           postinc1	equ	0xFE6
 15136                           postdec1	equ	0xFE5
 15137                           fsr1h	equ	0xFE2
 15138                           fsr1l	equ	0xFE1
 15139                           indf2	equ	0xFDF
 15140                           postinc2	equ	0xFDE
 15141                           postdec2	equ	0xFDD
 15142                           plusw2	equ	0xFDB
 15143                           fsr2h	equ	0xFDA
 15144                           fsr2l	equ	0xFD9
 15145                           status	equ	0xFD8
 15146                           
 15147 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 15148 ;; Defined at:
 15149 ;;		line 820 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15150 ;; Parameters:    Size  Location     Type
 15151 ;;  sensor          1    wreg     enum E17513
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;  sensor          1    0[COMRAM] enum E17513
 15154 ;; Return value:  Size  Location     Type
 15155 ;;                  1    wreg      unsigned char 
 15156 ;; Registers used:
 15157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15158 ;; Tracked objects:
 15159 ;;		On entry : 0/0
 15160 ;;		On exit  : 0/0
 15161 ;;		Unchanged: 0/0
 15162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15166 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15167 ;;Total ram usage:        1 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; This function calls:
 15170 ;;		Nothing
 15171 ;; This function is called by:
 15172 ;;		i2_Sensor_scheduleNextScan
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176                           	psect	text93
 15177  0122F6                     __ptext93:
 15178                           	opt stack 0
 15179  0122F6                     i2_MTOUCH_Sensor_wasSampled:
 15180                           	opt stack 18
 15181                           
 15182                           ;incstack = 0
 15183                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 15184  0122F6  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor,c
 15185                           
 15186                           ;mtouch_sensor.c: 822: if(sensor < 5)
 15187  0122F8  0E05               	movlw	5
 15188  0122FA  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor,c
 15189  0122FC  D013               	goto	i2l687
 15190                           
 15191                           ;mtouch_sensor.c: 823: return (bool)mtouch_sensor[sensor].sampled;
 15192  0122FE  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor,w,c
 15193  012300  0D09               	mullw	9
 15194  012302  0E08               	movlw	8
 15195  012304  26F3               	addwf	prodl,f,c
 15196  012306  0E00               	movlw	0
 15197  012308  22F4               	addwfc	prodh,f,c
 15198  01230A  0E82               	movlw	low _mtouch_sensor
 15199  01230C  24F3               	addwf	prodl,w,c
 15200  01230E  6ED9               	movwf	fsr2l,c
 15201  012310  0E00               	movlw	high _mtouch_sensor
 15202  012312  20F4               	addwfc	prodh,w,c
 15203  012314  6EDA               	movwf	fsr2h,c
 15204  012316  0100               	movlb	0	; () banked
 15205  012318  A2DF               	btfss	indf2,1,c
 15206  01231A  D002               	goto	i2u382_40
 15207  01231C  0E01               	movlw	1
 15208  01231E  0012               	return	
 15209  012320                     i2u382_40:
 15210  012320  0E00               	movlw	0
 15211                           
 15212                           ; BSR set to: 0
 15213                           
 15214                           ; BSR set to: 0
 15215  012322  0012               	return	
 15216  012324                     i2l687:
 15217                           
 15218                           ;mtouch_sensor.c: 824: else
 15219                           ;mtouch_sensor.c: 825: return 0;
 15220                           
 15221                           ; BSR set to: 0
 15222  012324  0E00               	movlw	0
 15223  012326  0012               	return	
 15224  012328                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 15225                           	opt stack 0
 15226                           tosu	equ	0xFFF
 15227                           tosh	equ	0xFFE
 15228                           tosl	equ	0xFFD
 15229                           pclatu	equ	0xFFB
 15230                           pclath	equ	0xFFA
 15231                           tblptru	equ	0xFF8
 15232                           tblptrh	equ	0xFF7
 15233                           tblptrl	equ	0xFF6
 15234                           tablat	equ	0xFF5
 15235                           prodh	equ	0xFF4
 15236                           prodl	equ	0xFF3
 15237                           intcon	equ	0xFF2
 15238                           postinc0	equ	0xFEE
 15239                           fsr0h	equ	0xFEA
 15240                           fsr0l	equ	0xFE9
 15241                           wreg	equ	0xFE8
 15242                           indf1	equ	0xFE7
 15243                           postinc1	equ	0xFE6
 15244                           postdec1	equ	0xFE5
 15245                           fsr1h	equ	0xFE2
 15246                           fsr1l	equ	0xFE1
 15247                           indf2	equ	0xFDF
 15248                           postinc2	equ	0xFDE
 15249                           postdec2	equ	0xFDD
 15250                           plusw2	equ	0xFDB
 15251                           fsr2h	equ	0xFDA
 15252                           fsr2l	equ	0xFD9
 15253                           status	equ	0xFD8
 15254                           
 15255 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 15256 ;; Defined at:
 15257 ;;		line 717 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15258 ;; Parameters:    Size  Location     Type
 15259 ;;  sensor          1    wreg     enum E17513
 15260 ;; Auto vars:     Size  Location     Type
 15261 ;;  sensor          1    0[COMRAM] enum E17513
 15262 ;; Return value:  Size  Location     Type
 15263 ;;                  1    wreg      unsigned char 
 15264 ;; Registers used:
 15265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15266 ;; Tracked objects:
 15267 ;;		On entry : 0/0
 15268 ;;		On exit  : 0/0
 15269 ;;		Unchanged: 0/0
 15270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15275 ;;Total ram usage:        1 bytes
 15276 ;; Hardware stack levels used:    1
 15277 ;; This function calls:
 15278 ;;		Nothing
 15279 ;; This function is called by:
 15280 ;;		i2_Sensor_scheduleNextScan
 15281 ;; This function uses a non-reentrant model
 15282 ;;
 15283                           
 15284                           	psect	text94
 15285  012328                     __ptext94:
 15286                           	opt stack 0
 15287  012328                     i2_MTOUCH_Sensor_isEnabled:
 15288                           	opt stack 18
 15289                           
 15290                           ;incstack = 0
 15291                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 15292  012328  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor,c
 15293                           
 15294                           ;mtouch_sensor.c: 719: if(sensor < 5)
 15295  01232A  0E05               	movlw	5
 15296  01232C  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor,c
 15297  01232E  D013               	goto	i2l641
 15298                           
 15299                           ;mtouch_sensor.c: 720: return (bool)mtouch_sensor[sensor].enabled;
 15300  012330  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor,w,c
 15301  012332  0D09               	mullw	9
 15302  012334  0E08               	movlw	8
 15303  012336  26F3               	addwf	prodl,f,c
 15304  012338  0E00               	movlw	0
 15305  01233A  22F4               	addwfc	prodh,f,c
 15306  01233C  0E82               	movlw	low _mtouch_sensor
 15307  01233E  24F3               	addwf	prodl,w,c
 15308  012340  6ED9               	movwf	fsr2l,c
 15309  012342  0E00               	movlw	high _mtouch_sensor
 15310  012344  20F4               	addwfc	prodh,w,c
 15311  012346  6EDA               	movwf	fsr2h,c
 15312  012348  0100               	movlb	0	; () banked
 15313  01234A  A0DF               	btfss	indf2,0,c
 15314  01234C  D002               	goto	i2u378_40
 15315  01234E  0E01               	movlw	1
 15316  012350  0012               	return	
 15317  012352                     i2u378_40:
 15318  012352  0E00               	movlw	0
 15319                           
 15320                           ; BSR set to: 0
 15321                           
 15322                           ; BSR set to: 0
 15323  012354  0012               	return	
 15324  012356                     i2l641:
 15325                           
 15326                           ;mtouch_sensor.c: 721: else
 15327                           ;mtouch_sensor.c: 722: return 0;
 15328                           
 15329                           ; BSR set to: 0
 15330  012356  0E00               	movlw	0
 15331  012358  0012               	return	
 15332  01235A                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 15333                           	opt stack 0
 15334                           tosu	equ	0xFFF
 15335                           tosh	equ	0xFFE
 15336                           tosl	equ	0xFFD
 15337                           pclatu	equ	0xFFB
 15338                           pclath	equ	0xFFA
 15339                           tblptru	equ	0xFF8
 15340                           tblptrh	equ	0xFF7
 15341                           tblptrl	equ	0xFF6
 15342                           tablat	equ	0xFF5
 15343                           prodh	equ	0xFF4
 15344                           prodl	equ	0xFF3
 15345                           intcon	equ	0xFF2
 15346                           postinc0	equ	0xFEE
 15347                           fsr0h	equ	0xFEA
 15348                           fsr0l	equ	0xFE9
 15349                           wreg	equ	0xFE8
 15350                           indf1	equ	0xFE7
 15351                           postinc1	equ	0xFE6
 15352                           postdec1	equ	0xFE5
 15353                           fsr1h	equ	0xFE2
 15354                           fsr1l	equ	0xFE1
 15355                           indf2	equ	0xFDF
 15356                           postinc2	equ	0xFDE
 15357                           postdec2	equ	0xFDD
 15358                           plusw2	equ	0xFDB
 15359                           fsr2h	equ	0xFDA
 15360                           fsr2l	equ	0xFD9
 15361                           status	equ	0xFD8
 15362                           
 15363 ;; *************** function _Sensor_setSampled *****************
 15364 ;; Defined at:
 15365 ;;		line 833 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;  sensor          2    0[COMRAM] PTR struct .
 15368 ;;		 -> mtouch_sensor(45), 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;		None
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      void 
 15373 ;; Registers used:
 15374 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15384 ;;Total ram usage:        2 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; This function calls:
 15387 ;;		Nothing
 15388 ;; This function is called by:
 15389 ;;		_MTOUCH_Sensor_Service
 15390 ;; This function uses a non-reentrant model
 15391 ;;
 15392                           
 15393                           	psect	text95
 15394  0126BC                     __ptext95:
 15395                           	opt stack 0
 15396  0126BC                     _Sensor_setSampled:
 15397                           	opt stack 19
 15398                           
 15399                           ;mtouch_sensor.c: 835: sensor->sampled = 1;
 15400                           
 15401                           ;incstack = 0
 15402  0126BC  EE20 F008          	lfsr	2,8
 15403  0126C0  5001               	movf	Sensor_setSampled@sensor,w,c
 15404  0126C2  26D9               	addwf	fsr2l,f,c
 15405  0126C4  5002               	movf	Sensor_setSampled@sensor+1,w,c
 15406  0126C6  22DA               	addwfc	fsr2h,f,c
 15407  0126C8  82DF               	bsf	indf2,1,c
 15408  0126CA  0012               	return		;funcret
 15409  0126CC                     __end_of_Sensor_setSampled:
 15410                           	opt stack 0
 15411                           tosu	equ	0xFFF
 15412                           tosh	equ	0xFFE
 15413                           tosl	equ	0xFFD
 15414                           pclatu	equ	0xFFB
 15415                           pclath	equ	0xFFA
 15416                           tblptru	equ	0xFF8
 15417                           tblptrh	equ	0xFF7
 15418                           tblptrl	equ	0xFF6
 15419                           tablat	equ	0xFF5
 15420                           prodh	equ	0xFF4
 15421                           prodl	equ	0xFF3
 15422                           intcon	equ	0xFF2
 15423                           postinc0	equ	0xFEE
 15424                           fsr0h	equ	0xFEA
 15425                           fsr0l	equ	0xFE9
 15426                           wreg	equ	0xFE8
 15427                           indf1	equ	0xFE7
 15428                           postinc1	equ	0xFE6
 15429                           postdec1	equ	0xFE5
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function _Sensor_autoCalibration *****************
 15441 ;; Defined at:
 15442 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;  sensor          2    4[COMRAM] PTR struct .
 15445 ;;		 -> mtouch_sensor(45), 
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;  name            1   12[COMRAM] enum E17513
 15448 ;; Return value:  Size  Location     Type
 15449 ;;                  1    wreg      enum E17519
 15450 ;; Registers used:
 15451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15459 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15460 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15461 ;;Total ram usage:        9 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    1
 15464 ;; This function calls:
 15465 ;;		_Sensor_setCalibratAcqTime
 15466 ;;		_Sensor_setCalibrated
 15467 ;;		i2_Sensor_isCalibratingAcqTime
 15468 ;;		i2_abs
 15469 ;; This function is called by:
 15470 ;;		_MTOUCH_Sensor_Service
 15471 ;; This function uses a non-reentrant model
 15472 ;;
 15473                           
 15474                           	psect	text96
 15475  010C10                     __ptext96:
 15476                           	opt stack 0
 15477  010C10                     _Sensor_autoCalibration:
 15478                           	opt stack 18
 15479                           
 15480                           ;mtouch_sensor.c: 404: enum mtouch_sensor_names name = sensor->sensor_name;
 15481                           
 15482                           ;incstack = 0
 15483  010C10  C005  FFD9         	movff	Sensor_autoCalibration@sensor,fsr2l
 15484  010C14  C006  FFDA         	movff	Sensor_autoCalibration@sensor+1,fsr2h
 15485  010C18  50DF               	movf	indf2,w,c
 15486  010C1A  6E0D               	movwf	Sensor_autoCalibration@name,c
 15487                           
 15488                           ;mtouch_sensor.c: 406: if(!Sensor_isCalibratingAcqTime(sensor))
 15489  010C1C  C005  F001         	movff	Sensor_autoCalibration@sensor,i2Sensor_isCalibratingAcqTime@sensor
 15490  010C20  C006  F002         	movff	Sensor_autoCalibration@sensor+1,i2Sensor_isCalibratingAcqTime@sensor+1
 15491  010C24  EC1C  F093         	call	i2_Sensor_isCalibratingAcqTime	;wreg free
 15492  010C28  0900               	iorlw	0
 15493  010C2A  A4D8               	btfss	status,2,c
 15494  010C2C  D02D               	goto	i2l534
 15495                           
 15496                           ;mtouch_sensor.c: 407: {
 15497                           ;mtouch_sensor.c: 408: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 15498  010C2E  EE20 F004          	lfsr	2,4
 15499  010C32  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15500  010C34  26D9               	addwf	fsr2l,f,c
 15501  010C36  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15502  010C38  22DA               	addwfc	fsr2h,f,c
 15503  010C3A  50DF               	movf	indf2,w,c
 15504  010C3C  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 15505  010C3E  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 15506  010C40  0E09               	movlw	9
 15507  010C42                     i2u404_45:
 15508  010C42  90D8               	bcf	status,0,c
 15509  010C44  3607               	rlcf	??_Sensor_autoCalibration,f,c
 15510  010C46  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 15511  010C48  2EE8               	decfsz	wreg,f,c
 15512  010C4A  D7FB               	goto	i2u404_45
 15513  010C4C  5072               	movf	3954,w,c	;volatile
 15514  010C4E  5C07               	subwf	??_Sensor_autoCalibration,w,c
 15515  010C50  5073               	movf	3955,w,c	;volatile
 15516  010C52  5808               	subwfb	??_Sensor_autoCalibration+1,w,c
 15517  010C54  B0D8               	btfsc	status,0,c
 15518  010C56  D011               	goto	i2l535
 15519                           
 15520                           ;mtouch_sensor.c: 409: {
 15521                           ;mtouch_sensor.c: 410: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 15522  010C58  EE20 F005          	lfsr	2,5
 15523  010C5C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15524  010C5E  26D9               	addwf	fsr2l,f,c
 15525  010C60  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15526  010C62  22DA               	addwfc	fsr2h,f,c
 15527  010C64  2ADF               	incf	indf2,f,c
 15528  010C66  0E1E               	movlw	30
 15529  010C68  64DF               	cpfsgt	indf2,c
 15530  010C6A  0012               	return	
 15531                           
 15532                           ;mtouch_sensor.c: 411: Sensor_setCalibratAcqTime(sensor);
 15533  010C6C  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 15534  010C70  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 15535  010C74  ECC5  F091         	call	_Sensor_setCalibratAcqTime	;wreg free
 15536                           
 15537                           ;mtouch_sensor.c: 412: }
 15538  010C78  0012               	return	
 15539  010C7A                     i2l535:
 15540                           
 15541                           ;mtouch_sensor.c: 413: else
 15542                           ;mtouch_sensor.c: 414: {
 15543                           ;mtouch_sensor.c: 415: Sensor_setCalibratAcqTime(sensor);
 15544  010C7A  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibratAcqTime@sensor
 15545  010C7E  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibratAcqTime@sensor+1
 15546  010C82  ECC5  F091         	call	_Sensor_setCalibratAcqTime	;wreg free
 15547                           
 15548                           ;mtouch_sensor.c: 416: }
 15549                           ;mtouch_sensor.c: 417: }
 15550  010C86  0012               	return	
 15551  010C88                     i2l534:
 15552                           
 15553                           ;mtouch_sensor.c: 418: else
 15554                           ;mtouch_sensor.c: 419: {
 15555                           ;mtouch_sensor.c: 420: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 15556  010C88  EE20 F004          	lfsr	2,4
 15557  010C8C  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15558  010C8E  26D9               	addwf	fsr2l,f,c
 15559  010C90  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15560  010C92  22DA               	addwfc	fsr2h,f,c
 15561  010C94  50DF               	movf	indf2,w,c
 15562  010C96  6E07               	movwf	??_Sensor_autoCalibration& (0+255),c
 15563  010C98  6A08               	clrf	(??_Sensor_autoCalibration+1)& (0+255),c
 15564  010C9A  90D8               	bcf	status,0,c
 15565  010C9C  3607               	rlcf	??_Sensor_autoCalibration,f,c
 15566  010C9E  3608               	rlcf	??_Sensor_autoCalibration+1,f,c
 15567  010CA0  500D               	movf	Sensor_autoCalibration@name,w,c
 15568  010CA2  0D02               	mullw	2
 15569  010CA4  0E29               	movlw	low _packet_sample
 15570  010CA6  24F3               	addwf	prodl,w,c
 15571  010CA8  6ED9               	movwf	fsr2l,c
 15572  010CAA  0E00               	movlw	high _packet_sample
 15573  010CAC  20F4               	addwfc	prodh,w,c
 15574  010CAE  6EDA               	movwf	fsr2h,c
 15575  010CB0  CFDE F009          	movff	postinc2,??_Sensor_autoCalibration+2
 15576  010CB4  CFDD F00A          	movff	postdec2,??_Sensor_autoCalibration+3
 15577  010CB8  CF72 F00B          	movff	3954,??_Sensor_autoCalibration+4	;volatile
 15578  010CBC  CF73 F00C          	movff	3955,??_Sensor_autoCalibration+5	;volatile
 15579  010CC0  1E0B               	comf	??_Sensor_autoCalibration+4,f,c
 15580  010CC2  1E0C               	comf	??_Sensor_autoCalibration+5,f,c
 15581  010CC4  4A0B               	infsnz	??_Sensor_autoCalibration+4,f,c
 15582  010CC6  2A0C               	incf	??_Sensor_autoCalibration+5,f,c
 15583  010CC8  5009               	movf	??_Sensor_autoCalibration+2,w,c
 15584  010CCA  240B               	addwf	??_Sensor_autoCalibration+4,w,c
 15585  010CCC  6E01               	movwf	i2abs@a,c
 15586  010CCE  500A               	movf	??_Sensor_autoCalibration+3,w,c
 15587  010CD0  200C               	addwfc	??_Sensor_autoCalibration+5,w,c
 15588  010CD2  6E02               	movwf	i2abs@a+1,c
 15589  010CD4  EC56  F092         	call	i2_abs	;wreg free
 15590  010CD8  5007               	movf	??_Sensor_autoCalibration,w,c
 15591  010CDA  5C01               	subwf	?i2_abs,w,c
 15592  010CDC  5008               	movf	??_Sensor_autoCalibration+1,w,c
 15593  010CDE  5802               	subwfb	?i2_abs+1,w,c
 15594  010CE0  B0D8               	btfsc	status,0,c
 15595  010CE2  D00F               	goto	i2l539
 15596                           
 15597                           ;mtouch_sensor.c: 421: {
 15598                           ;mtouch_sensor.c: 422: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 15599  010CE4  EE20 F002          	lfsr	2,2
 15600  010CE8  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15601  010CEA  26D9               	addwf	fsr2l,f,c
 15602  010CEC  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15603  010CEE  22DA               	addwfc	fsr2h,f,c
 15604  010CF0  0E80               	movlw	128
 15605  010CF2  6EDF               	movwf	indf2,c
 15606                           
 15607                           ;mtouch_sensor.c: 423: Sensor_setCalibrated(sensor);
 15608  010CF4  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 15609  010CF8  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 15610  010CFC  ECB3  F092         	call	_Sensor_setCalibrated	;wreg free
 15611                           
 15612                           ;mtouch_sensor.c: 424: }
 15613  010D00  0012               	return	
 15614  010D02                     i2l539:
 15615                           
 15616                           ;mtouch_sensor.c: 425: else
 15617                           ;mtouch_sensor.c: 426: {
 15618                           ;mtouch_sensor.c: 428: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)3)) - ((mtouch_sensor_time_t)1 << (u
      +                          int8_t)3)))
 15619  010D02  EE20 F003          	lfsr	2,3
 15620  010D06  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15621  010D08  26D9               	addwf	fsr2l,f,c
 15622  010D0A  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15623  010D0C  22DA               	addwfc	fsr2h,f,c
 15624  010D0E  0E77               	movlw	119
 15625  010D10  64DF               	cpfsgt	indf2,c
 15626  010D12  D00F               	goto	i2l541
 15627                           
 15628                           ;mtouch_sensor.c: 429: {
 15629                           ;mtouch_sensor.c: 430: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 15630  010D14  EE20 F002          	lfsr	2,2
 15631  010D18  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15632  010D1A  26D9               	addwf	fsr2l,f,c
 15633  010D1C  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15634  010D1E  22DA               	addwfc	fsr2h,f,c
 15635  010D20  0E80               	movlw	128
 15636  010D22  6EDF               	movwf	indf2,c
 15637                           
 15638                           ;mtouch_sensor.c: 431: Sensor_setCalibrated(sensor);
 15639  010D24  C005  F001         	movff	Sensor_autoCalibration@sensor,Sensor_setCalibrated@sensor
 15640  010D28  C006  F002         	movff	Sensor_autoCalibration@sensor+1,Sensor_setCalibrated@sensor+1
 15641  010D2C  ECB3  F092         	call	_Sensor_setCalibrated	;wreg free
 15642                           
 15643                           ;mtouch_sensor.c: 432: }
 15644  010D30  0012               	return	
 15645  010D32                     i2l541:
 15646                           
 15647                           ;mtouch_sensor.c: 433: else
 15648                           ;mtouch_sensor.c: 434: {
 15649                           ;mtouch_sensor.c: 435: sensor->acquisition_time += ((mtouch_sensor_time_t)1 << (uint8_t)
      +                          3);
 15650  010D32  EE20 F003          	lfsr	2,3
 15651  010D36  5005               	movf	Sensor_autoCalibration@sensor,w,c
 15652  010D38  26D9               	addwf	fsr2l,f,c
 15653  010D3A  5006               	movf	Sensor_autoCalibration@sensor+1,w,c
 15654  010D3C  22DA               	addwfc	fsr2h,f,c
 15655  010D3E  0E08               	movlw	8
 15656  010D40  26DF               	addwf	indf2,f,c
 15657  010D42  0012               	return	
 15658  010D44                     __end_of_Sensor_autoCalibration:
 15659                           	opt stack 0
 15660                           tosu	equ	0xFFF
 15661                           tosh	equ	0xFFE
 15662                           tosl	equ	0xFFD
 15663                           pclatu	equ	0xFFB
 15664                           pclath	equ	0xFFA
 15665                           tblptru	equ	0xFF8
 15666                           tblptrh	equ	0xFF7
 15667                           tblptrl	equ	0xFF6
 15668                           tablat	equ	0xFF5
 15669                           prodh	equ	0xFF4
 15670                           prodl	equ	0xFF3
 15671                           intcon	equ	0xFF2
 15672                           postinc0	equ	0xFEE
 15673                           fsr0h	equ	0xFEA
 15674                           fsr0l	equ	0xFE9
 15675                           wreg	equ	0xFE8
 15676                           indf1	equ	0xFE7
 15677                           postinc1	equ	0xFE6
 15678                           postdec1	equ	0xFE5
 15679                           fsr1h	equ	0xFE2
 15680                           fsr1l	equ	0xFE1
 15681                           indf2	equ	0xFDF
 15682                           postinc2	equ	0xFDE
 15683                           postdec2	equ	0xFDD
 15684                           plusw2	equ	0xFDB
 15685                           fsr2h	equ	0xFDA
 15686                           fsr2l	equ	0xFD9
 15687                           status	equ	0xFD8
 15688                           
 15689 ;; *************** function i2_abs *****************
 15690 ;; Defined at:
 15691 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;  a               2    0[COMRAM] int 
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;		None
 15696 ;; Return value:  Size  Location     Type
 15697 ;;                  2    0[COMRAM] int 
 15698 ;; Registers used:
 15699 ;;		wreg, status,2, status,0
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15705 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15708 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15709 ;;Total ram usage:        4 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; This function calls:
 15712 ;;		Nothing
 15713 ;; This function is called by:
 15714 ;;		_Sensor_autoCalibration
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           	psect	text97
 15719  0124AC                     __ptext97:
 15720                           	opt stack 0
 15721  0124AC                     i2_abs:
 15722                           	opt stack 18
 15723                           
 15724                           ;incstack = 0
 15725  0124AC  AE02               	btfss	i2abs@a+1,7,c
 15726  0124AE  D00D               	goto	i2l1127
 15727  0124B0  C001  F003         	movff	i2abs@a,??i2_abs
 15728  0124B4  C002  F004         	movff	i2abs@a+1,??i2_abs+1
 15729  0124B8  1E03               	comf	??i2_abs,f,c
 15730  0124BA  1E04               	comf	??i2_abs+1,f,c
 15731  0124BC  4A03               	infsnz	??i2_abs,f,c
 15732  0124BE  2A04               	incf	??i2_abs+1,f,c
 15733  0124C0  C003  F001         	movff	??i2_abs,?i2_abs
 15734  0124C4  C004  F002         	movff	??i2_abs+1,?i2_abs+1
 15735  0124C8  0012               	return	
 15736  0124CA                     i2l1127:
 15737  0124CA  C001  F001         	movff	i2abs@a,?i2_abs
 15738  0124CE  C002  F002         	movff	i2abs@a+1,?i2_abs+1
 15739  0124D2  0012               	return		;funcret
 15740  0124D4                     __end_ofi2_abs:
 15741                           	opt stack 0
 15742                           tosu	equ	0xFFF
 15743                           tosh	equ	0xFFE
 15744                           tosl	equ	0xFFD
 15745                           pclatu	equ	0xFFB
 15746                           pclath	equ	0xFFA
 15747                           tblptru	equ	0xFF8
 15748                           tblptrh	equ	0xFF7
 15749                           tblptrl	equ	0xFF6
 15750                           tablat	equ	0xFF5
 15751                           prodh	equ	0xFF4
 15752                           prodl	equ	0xFF3
 15753                           intcon	equ	0xFF2
 15754                           postinc0	equ	0xFEE
 15755                           fsr0h	equ	0xFEA
 15756                           fsr0l	equ	0xFE9
 15757                           wreg	equ	0xFE8
 15758                           indf1	equ	0xFE7
 15759                           postinc1	equ	0xFE6
 15760                           postdec1	equ	0xFE5
 15761                           fsr1h	equ	0xFE2
 15762                           fsr1l	equ	0xFE1
 15763                           indf2	equ	0xFDF
 15764                           postinc2	equ	0xFDE
 15765                           postdec2	equ	0xFDD
 15766                           plusw2	equ	0xFDB
 15767                           fsr2h	equ	0xFDA
 15768                           fsr2l	equ	0xFD9
 15769                           status	equ	0xFD8
 15770                           
 15771 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 15772 ;; Defined at:
 15773 ;;		line 798 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;  sensor          2    0[COMRAM] PTR struct .
 15776 ;;		 -> mtouch_sensor(45), 
 15777 ;; Auto vars:     Size  Location     Type
 15778 ;;		None
 15779 ;; Return value:  Size  Location     Type
 15780 ;;                  1    wreg      unsigned char 
 15781 ;; Registers used:
 15782 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15783 ;; Tracked objects:
 15784 ;;		On entry : 0/0
 15785 ;;		On exit  : 0/0
 15786 ;;		Unchanged: 0/0
 15787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15792 ;;Total ram usage:        2 bytes
 15793 ;; Hardware stack levels used:    1
 15794 ;; This function calls:
 15795 ;;		Nothing
 15796 ;; This function is called by:
 15797 ;;		_Sensor_autoCalibration
 15798 ;;		i2_Sensor_scheduleNextScan
 15799 ;; This function uses a non-reentrant model
 15800 ;;
 15801                           
 15802                           	psect	text98
 15803  012638                     __ptext98:
 15804                           	opt stack 0
 15805  012638                     i2_Sensor_isCalibratingAcqTime:
 15806                           	opt stack 18
 15807                           
 15808                           ;mtouch_sensor.c: 800: return (bool)sensor->acqTime_cal;
 15809                           
 15810                           ;incstack = 0
 15811  012638  EE20 F008          	lfsr	2,8
 15812  01263C  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor,w,c
 15813  01263E  26D9               	addwf	fsr2l,f,c
 15814  012640  5002               	movf	i2Sensor_isCalibratingAcqTime@sensor+1,w,c
 15815  012642  22DA               	addwfc	fsr2h,f,c
 15816  012644  A8DF               	btfss	indf2,4,c
 15817  012646  D002               	goto	i2u380_40
 15818  012648  0E01               	movlw	1
 15819  01264A  0012               	return	
 15820  01264C                     i2u380_40:
 15821  01264C  0E00               	movlw	0
 15822  01264E  0012               	return	
 15823  012650                     __end_ofi2_Sensor_isCalibratingAcqTime:
 15824                           	opt stack 0
 15825                           tosu	equ	0xFFF
 15826                           tosh	equ	0xFFE
 15827                           tosl	equ	0xFFD
 15828                           pclatu	equ	0xFFB
 15829                           pclath	equ	0xFFA
 15830                           tblptru	equ	0xFF8
 15831                           tblptrh	equ	0xFF7
 15832                           tblptrl	equ	0xFF6
 15833                           tablat	equ	0xFF5
 15834                           prodh	equ	0xFF4
 15835                           prodl	equ	0xFF3
 15836                           intcon	equ	0xFF2
 15837                           postinc0	equ	0xFEE
 15838                           fsr0h	equ	0xFEA
 15839                           fsr0l	equ	0xFE9
 15840                           wreg	equ	0xFE8
 15841                           indf1	equ	0xFE7
 15842                           postinc1	equ	0xFE6
 15843                           postdec1	equ	0xFE5
 15844                           fsr1h	equ	0xFE2
 15845                           fsr1l	equ	0xFE1
 15846                           indf2	equ	0xFDF
 15847                           postinc2	equ	0xFDE
 15848                           postdec2	equ	0xFDD
 15849                           plusw2	equ	0xFDB
 15850                           fsr2h	equ	0xFDA
 15851                           fsr2l	equ	0xFD9
 15852                           status	equ	0xFD8
 15853                           
 15854 ;; *************** function _Sensor_setCalibrated *****************
 15855 ;; Defined at:
 15856 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15857 ;; Parameters:    Size  Location     Type
 15858 ;;  sensor          2    0[COMRAM] PTR struct .
 15859 ;;		 -> mtouch_sensor(45), 
 15860 ;; Auto vars:     Size  Location     Type
 15861 ;;		None
 15862 ;; Return value:  Size  Location     Type
 15863 ;;                  1    wreg      void 
 15864 ;; Registers used:
 15865 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15866 ;; Tracked objects:
 15867 ;;		On entry : 0/0
 15868 ;;		On exit  : 0/0
 15869 ;;		Unchanged: 0/0
 15870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15871 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15875 ;;Total ram usage:        2 bytes
 15876 ;; Hardware stack levels used:    1
 15877 ;; This function calls:
 15878 ;;		Nothing
 15879 ;; This function is called by:
 15880 ;;		_Sensor_autoCalibration
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           	psect	text99
 15885  012566                     __ptext99:
 15886                           	opt stack 0
 15887  012566                     _Sensor_setCalibrated:
 15888                           	opt stack 18
 15889                           
 15890                           ;mtouch_sensor.c: 787: sensor->calibrated = 1;
 15891                           
 15892                           ;incstack = 0
 15893  012566  EE20 F008          	lfsr	2,8
 15894  01256A  5001               	movf	Sensor_setCalibrated@sensor,w,c
 15895  01256C  26D9               	addwf	fsr2l,f,c
 15896  01256E  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 15897  012570  22DA               	addwfc	fsr2h,f,c
 15898  012572  86DF               	bsf	indf2,3,c
 15899                           
 15900                           ;mtouch_sensor.c: 788: sensor->acqTime_cal = 0;
 15901  012574  EE20 F008          	lfsr	2,8
 15902  012578  5001               	movf	Sensor_setCalibrated@sensor,w,c
 15903  01257A  26D9               	addwf	fsr2l,f,c
 15904  01257C  5002               	movf	Sensor_setCalibrated@sensor+1,w,c
 15905  01257E  22DA               	addwfc	fsr2h,f,c
 15906  012580  98DF               	bcf	indf2,4,c
 15907  012582  0012               	return		;funcret
 15908  012584                     __end_of_Sensor_setCalibrated:
 15909                           	opt stack 0
 15910                           tosu	equ	0xFFF
 15911                           tosh	equ	0xFFE
 15912                           tosl	equ	0xFFD
 15913                           pclatu	equ	0xFFB
 15914                           pclath	equ	0xFFA
 15915                           tblptru	equ	0xFF8
 15916                           tblptrh	equ	0xFF7
 15917                           tblptrl	equ	0xFF6
 15918                           tablat	equ	0xFF5
 15919                           prodh	equ	0xFF4
 15920                           prodl	equ	0xFF3
 15921                           intcon	equ	0xFF2
 15922                           postinc0	equ	0xFEE
 15923                           fsr0h	equ	0xFEA
 15924                           fsr0l	equ	0xFE9
 15925                           wreg	equ	0xFE8
 15926                           indf1	equ	0xFE7
 15927                           postinc1	equ	0xFE6
 15928                           postdec1	equ	0xFE5
 15929                           fsr1h	equ	0xFE2
 15930                           fsr1l	equ	0xFE1
 15931                           indf2	equ	0xFDF
 15932                           postinc2	equ	0xFDE
 15933                           postdec2	equ	0xFDD
 15934                           plusw2	equ	0xFDB
 15935                           fsr2h	equ	0xFDA
 15936                           fsr2l	equ	0xFD9
 15937                           status	equ	0xFD8
 15938                           
 15939 ;; *************** function _Sensor_setCalibratAcqTime *****************
 15940 ;; Defined at:
 15941 ;;		line 791 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;  sensor          2    0[COMRAM] PTR struct .
 15944 ;;		 -> mtouch_sensor(45), 
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;		None
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  1    wreg      void 
 15949 ;; Registers used:
 15950 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 15956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15960 ;;Total ram usage:        2 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; This function calls:
 15963 ;;		Nothing
 15964 ;; This function is called by:
 15965 ;;		_Sensor_autoCalibration
 15966 ;; This function uses a non-reentrant model
 15967 ;;
 15968                           
 15969                           	psect	text100
 15970  01238A                     __ptext100:
 15971                           	opt stack 0
 15972  01238A                     _Sensor_setCalibratAcqTime:
 15973                           	opt stack 18
 15974                           
 15975                           ;mtouch_sensor.c: 793: sensor->acqTime_cal = 1;
 15976                           
 15977                           ;incstack = 0
 15978  01238A  EE20 F008          	lfsr	2,8
 15979  01238E  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15980  012390  26D9               	addwf	fsr2l,f,c
 15981  012392  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15982  012394  22DA               	addwfc	fsr2h,f,c
 15983  012396  88DF               	bsf	indf2,4,c
 15984                           
 15985                           ;mtouch_sensor.c: 794: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)3));
 15986  012398  EE20 F003          	lfsr	2,3
 15987  01239C  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15988  01239E  26D9               	addwf	fsr2l,f,c
 15989  0123A0  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15990  0123A2  22DA               	addwfc	fsr2h,f,c
 15991  0123A4  0E08               	movlw	8
 15992  0123A6  6EDF               	movwf	indf2,c
 15993                           
 15994                           ;mtouch_sensor.c: 795: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)3));
 15995  0123A8  EE20 F002          	lfsr	2,2
 15996  0123AC  5001               	movf	Sensor_setCalibratAcqTime@sensor,w,c
 15997  0123AE  26D9               	addwf	fsr2l,f,c
 15998  0123B0  5002               	movf	Sensor_setCalibratAcqTime@sensor+1,w,c
 15999  0123B2  22DA               	addwfc	fsr2h,f,c
 16000  0123B4  0E80               	movlw	128
 16001  0123B6  6EDF               	movwf	indf2,c
 16002  0123B8  0012               	return		;funcret
 16003  0123BA                     __end_of_Sensor_setCalibratAcqTime:
 16004                           	opt stack 0
 16005                           tosu	equ	0xFFF
 16006                           tosh	equ	0xFFE
 16007                           tosl	equ	0xFFD
 16008                           pclatu	equ	0xFFB
 16009                           pclath	equ	0xFFA
 16010                           tblptru	equ	0xFF8
 16011                           tblptrh	equ	0xFF7
 16012                           tblptrl	equ	0xFF6
 16013                           tablat	equ	0xFF5
 16014                           prodh	equ	0xFF4
 16015                           prodl	equ	0xFF3
 16016                           intcon	equ	0xFF2
 16017                           postinc0	equ	0xFEE
 16018                           fsr0h	equ	0xFEA
 16019                           fsr0l	equ	0xFE9
 16020                           wreg	equ	0xFE8
 16021                           indf1	equ	0xFE7
 16022                           postinc1	equ	0xFE6
 16023                           postdec1	equ	0xFE5
 16024                           fsr1h	equ	0xFE2
 16025                           fsr1l	equ	0xFE1
 16026                           indf2	equ	0xFDF
 16027                           postinc2	equ	0xFDE
 16028                           postdec2	equ	0xFDD
 16029                           plusw2	equ	0xFDB
 16030                           fsr2h	equ	0xFDA
 16031                           fsr2l	equ	0xFD9
 16032                           status	equ	0xFD8
 16033                           tosu	equ	0xFFF
 16034                           tosh	equ	0xFFE
 16035                           tosl	equ	0xFFD
 16036                           pclatu	equ	0xFFB
 16037                           pclath	equ	0xFFA
 16038                           tblptru	equ	0xFF8
 16039                           tblptrh	equ	0xFF7
 16040                           tblptrl	equ	0xFF6
 16041                           tablat	equ	0xFF5
 16042                           prodh	equ	0xFF4
 16043                           prodl	equ	0xFF3
 16044                           intcon	equ	0xFF2
 16045                           postinc0	equ	0xFEE
 16046                           fsr0h	equ	0xFEA
 16047                           fsr0l	equ	0xFE9
 16048                           wreg	equ	0xFE8
 16049                           indf1	equ	0xFE7
 16050                           postinc1	equ	0xFE6
 16051                           postdec1	equ	0xFE5
 16052                           fsr1h	equ	0xFE2
 16053                           fsr1l	equ	0xFE1
 16054                           indf2	equ	0xFDF
 16055                           postinc2	equ	0xFDE
 16056                           postdec2	equ	0xFDD
 16057                           plusw2	equ	0xFDB
 16058                           fsr2h	equ	0xFDA
 16059                           fsr2l	equ	0xFD9
 16060                           status	equ	0xFD8
 16061                           
 16062                           	psect	text101
 16063  000000                     __ptext101:
 16064                           	opt stack 0
 16065                           tosu	equ	0xFFF
 16066                           tosh	equ	0xFFE
 16067                           tosl	equ	0xFFD
 16068                           pclatu	equ	0xFFB
 16069                           pclath	equ	0xFFA
 16070                           tblptru	equ	0xFF8
 16071                           tblptrh	equ	0xFF7
 16072                           tblptrl	equ	0xFF6
 16073                           tablat	equ	0xFF5
 16074                           prodh	equ	0xFF4
 16075                           prodl	equ	0xFF3
 16076                           intcon	equ	0xFF2
 16077                           postinc0	equ	0xFEE
 16078                           fsr0h	equ	0xFEA
 16079                           fsr0l	equ	0xFE9
 16080                           wreg	equ	0xFE8
 16081                           indf1	equ	0xFE7
 16082                           postinc1	equ	0xFE6
 16083                           postdec1	equ	0xFE5
 16084                           fsr1h	equ	0xFE2
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           plusw2	equ	0xFDB
 16090                           fsr2h	equ	0xFDA
 16091                           fsr2l	equ	0xFD9
 16092                           status	equ	0xFD8
 16093                           
 16094                           	psect	rparam
 16095  0000                     tosu	equ	0xFFF
 16096                           tosh	equ	0xFFE
 16097                           tosl	equ	0xFFD
 16098                           pclatu	equ	0xFFB
 16099                           pclath	equ	0xFFA
 16100                           tblptru	equ	0xFF8
 16101                           tblptrh	equ	0xFF7
 16102                           tblptrl	equ	0xFF6
 16103                           tablat	equ	0xFF5
 16104                           prodh	equ	0xFF4
 16105                           prodl	equ	0xFF3
 16106                           intcon	equ	0xFF2
 16107                           postinc0	equ	0xFEE
 16108                           fsr0h	equ	0xFEA
 16109                           fsr0l	equ	0xFE9
 16110                           wreg	equ	0xFE8
 16111                           indf1	equ	0xFE7
 16112                           postinc1	equ	0xFE6
 16113                           postdec1	equ	0xFE5
 16114                           fsr1h	equ	0xFE2
 16115                           fsr1l	equ	0xFE1
 16116                           indf2	equ	0xFDF
 16117                           postinc2	equ	0xFDE
 16118                           postdec2	equ	0xFDD
 16119                           plusw2	equ	0xFDB
 16120                           fsr2h	equ	0xFDA
 16121                           fsr2l	equ	0xFD9
 16122                           status	equ	0xFD8
 16123                           
 16124                           	psect	temp
 16125  000050                     btemp:
 16126                           	opt stack 0
 16127  000050                     	ds	1
 16128  0000                     int$flags	set	btemp
 16129  0000                     wtemp6	set	btemp+1
 16130                           tosu	equ	0xFFF
 16131                           tosh	equ	0xFFE
 16132                           tosl	equ	0xFFD
 16133                           pclatu	equ	0xFFB
 16134                           pclath	equ	0xFFA
 16135                           tblptru	equ	0xFF8
 16136                           tblptrh	equ	0xFF7
 16137                           tblptrl	equ	0xFF6
 16138                           tablat	equ	0xFF5
 16139                           prodh	equ	0xFF4
 16140                           prodl	equ	0xFF3
 16141                           intcon	equ	0xFF2
 16142                           postinc0	equ	0xFEE
 16143                           fsr0h	equ	0xFEA
 16144                           fsr0l	equ	0xFE9
 16145                           wreg	equ	0xFE8
 16146                           indf1	equ	0xFE7
 16147                           postinc1	equ	0xFE6
 16148                           postdec1	equ	0xFE5
 16149                           fsr1h	equ	0xFE2
 16150                           fsr1l	equ	0xFE1
 16151                           indf2	equ	0xFDF
 16152                           postinc2	equ	0xFDE
 16153                           postdec2	equ	0xFDD
 16154                           plusw2	equ	0xFDB
 16155                           fsr2h	equ	0xFDA
 16156                           fsr2l	equ	0xFD9
 16157                           status	equ	0xFD8


Data Sizes:
    Strings     1112
    Constant    140
    Data        21
    BSS         381
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160     38     135
    BANK1           256      0     213
    BANK2           256      0      64
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    Button_StateMachine$0	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_38(CODE[5]), STR_34(CODE[4]), STR_33(CODE[6]), STR_30(CODE[6]), 
		 -> STR_27(CODE[6]), STR_19(CODE[15]), STR_15(CODE[9]), STR_11(CODE[8]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[45]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[45]), 

    memcpy@s1	PTR const void  size(2) Largest target is 85
		 -> mtouch_button_init(CODE[85]), mtouch_sensor_init(CODE[45]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 85
		 -> mtouch_button_init(CODE[85]), mtouch_sensor_init(CODE[45]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 372
		 -> STR_41(CODE[3]), STR_40(CODE[349]), STR_39(CODE[3]), STR_37(CODE[3]), 
		 -> STR_36(CODE[28]), STR_35(CODE[3]), STR_32(CODE[4]), STR_31(CODE[5]), 
		 -> STR_29(CODE[4]), STR_28(CODE[5]), STR_26(CODE[3]), STR_25(CODE[19]), 
		 -> STR_24(CODE[19]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), 
		 -> STR_20(CODE[3]), STR_18(CODE[3]), STR_17(CODE[18]), STR_16(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[18]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[372]), STR_8(CODE[4]), STR_7(CODE[5]), STR_6(CODE[32]), 
		 -> STR_5(CODE[32]), STR_4(CODE[32]), STR_3(CODE[32]), STR_2(CODE[32]), 
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    ringBufferLUT@line	PTR unsigned char  size(2) Largest target is 64
		 -> line(BANK1[64]), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> mTouchCallback(), 

    Button_Check_AKS_Block@check_button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Check_AKS_Block@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Unscaled_Deviation_Get@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Service@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E17454,)void  size(3) Largest target is 1
		 -> mTouchCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setInactive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_setActive@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_isEnabled@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(2) Largest target is 45
		 -> mtouch_sensor(BANK0[45]), 

    sp__memcpy	PTR void  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[45]), 

    callback_sampled	PTR FTN(enum E17513,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), Absolute function(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Transmit_ISR(), Absolute function(), 

    IOCBF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> DTR_Callback(), IOCBF2_DefaultInterruptHandler(), 

    IOCBF2_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> DTR_Callback(), Absolute function(), IOCBF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _EUSART2_Receive_ISR->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_EUSART2_Write
    i2___lwmod->i2___lwdiv
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->_Sensor_autoCalibration
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibrated
    i2_Sensor_scheduleNextScan->i2_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->i2_abs

Critical Paths under _main in BANK0

    _ringBufferPull->_ringBufferLUT
    _ringBufferLUT->_printf
    _printResetMessage->_printf
    _PIN_MANAGER_Initialize->_IOCBF2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _Sensor_scheduleNextScan->_Sensor_isCalibrated
    _Sensor_scheduleNextScan->_Sensor_isCalibratingAcqTime
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _Button_State_NotPressed->_mTouchCallback
    _mTouchCallback->_printf
    _printf->___lwmod
    _putch->_EUSART2_Write
    ___lwmod->___lwdiv
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_Check_AKS_Block->_Button_Unscaled_Deviation_Get
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   30477
                       _DTR_Callback
         _IOCBF2_SetInterruptHandler
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                  _printResetMessage
                     _ringBufferPull
 ---------------------------------------------------------------------------------
 (1) _ringBufferPull                                       9     9      0    7145
                                             27 BANK0      9     9      0
                       _EUSART2_Read
                      _ringBufferLUT
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     400
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _ringBufferLUT                                        3     1      2    6507
                                             24 BANK0      3     1      2
            _MTOUCH_Button_isPressed
                             _printf
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1573
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printResetMessage                                    0     0      0    4534
                             _printf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3167
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCBF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF2_SetInterruptHandler                           3     0      3     211
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2714
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1306
                                             11 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     459
                                              2 BANK0      1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             11 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0   15299
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                              4 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     310
                                              2 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    4561
                                             21 BANK0      1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              6     6      0    1191
                                              2 BANK0      6     6      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     331
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              1     1      0    3116
                                             20 BANK0      1     1      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        9     9      0    2024
                                             11 BANK0      9     9      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              4     2      2     899
                                              7 BANK0      4     2      2
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         7     5      2     651
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            14    14      0     993
                                              4 BANK0     14    14      0
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     328
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0   10092
                                             37 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    9993
                                             33 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     626
                                             26 BANK0      7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    6797
                                             26 BANK0      5     3      2
             _Button_Baseline_Update
             _Button_Check_AKS_Block
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
                     _mTouchCallback *
 ---------------------------------------------------------------------------------
 (5) _mTouchCallback                                       2     1      1    4596
                                             24 BANK0      2     1      1
            _MTOUCH_Button_isPressed
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4534
                                             12 BANK0     12     8      4
            _MTOUCH_Button_isPressed (ARG)
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     531
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_isPressed                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                              1 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               2     1      1       0
                                             24 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (5) _Button_Check_AKS_Block                              11     9      2     902
                                              8 BANK0     11     9      2
      _Button_Unscaled_Deviation_Get
 ---------------------------------------------------------------------------------
 (6) _Button_Unscaled_Deviation_Get                        8     6      2     242
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                             26 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                              3 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                              7 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                              3 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             12    10      2     350
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _DTR_Callback                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManagerHigh                      18    18      0    2979
                                             22 COMRAM    18    18      0
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCBF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF2_DefaultInterruptHandler *
                     i2_DTR_Callback *
 ---------------------------------------------------------------------------------
 (12) i2_DTR_Callback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOCBF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART2_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART2_Receive_ISR                                 0     0      0     903
                           i2_printf
 ---------------------------------------------------------------------------------
 (11) i2_printf                                           19    17      2     903
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (12) i2_putch                                             1     1      0      66
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (13) i2_EUSART2_Write                                     1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) _ADCC_ThresholdISR_mTouch                            0     0      0    2076
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_Sensor_Service                               2     2      0    2076
                                             13 COMRAM     2     2      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (12) i2_Sensor_scheduleNextScan                           6     6      0     688
                                              2 COMRAM     6     6      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_isCalibrated                               2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (13) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _Sensor_setSampled                                   2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) _Sensor_autoCalibration                              9     7      2     965
                                              4 COMRAM     9     7      2
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i2_Sensor_isCalibratingAcqTime
                              i2_abs
 ---------------------------------------------------------------------------------
 (13) i2_abs                                               4     2      2      92
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_isCalibratingAcqTime                       2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) _Sensor_setCalibrated                                2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) _Sensor_setCalibratAcqTime                           2     0      2     218
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DTR_Callback
   _IOCBF2_SetInterruptHandler
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_Check_AKS_Block
             _Button_Unscaled_Deviation_Get
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
           _mTouchCallback *
             _MTOUCH_Button_isPressed
             _printf
               _MTOUCH_Button_isPressed (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               _putch (ARG)
                 _EUSART2_Write
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           _abs
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback *
           _Sensor_RawSample_Update *
             _medianFilter
           _Sensor_isEnabled *
           _Sensor_setActive *
           _Sensor_setInactive *
           _abs *
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_wasSampled
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF2_SetInterruptHandler
     _PMD_Initialize
   _printResetMessage
     _printf
       _MTOUCH_Button_isPressed (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _putch (ARG)
         _EUSART2_Write
   _ringBufferPull
     _EUSART2_Read
     _ringBufferLUT
       _MTOUCH_Button_isPressed
       _printf
         _MTOUCH_Button_isPressed (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         _putch (ARG)
           _EUSART2_Write
       _strcmp
     _strlen

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i2_Sensor_isCalibratingAcqTime
         i2_abs
       _Sensor_setSampled
       i2_Sensor_SetTrisBit
       i2_Sensor_isCalibrated
       i2_Sensor_scheduleNextScan
         i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_isCalibratingAcqTime
   _EUSART2_Receive_ISR *
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_EUSART2_Write
   _EUSART2_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCBF2_ISR
       Absolute function(Fake) *
       _IOCBF2_DefaultInterruptHandler *
       i2_DTR_Callback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      40      10       25.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D5       7       83.2%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      87       5       84.4%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1EB       8        0.0%
DATA                 0      0     1EB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep 02 18:48:49 2018

                                    ?_MTOUCH_Sensor_RawSample_Get 00AF  
                                   Sensor_FrequencyHopping@sensor 00C3  
                                                     __CFG_CP$OFF 000000  
                                         ?_Sensor_autoCalibration 0005  
                                      __end_of_Sensor_setInactive 2698  
                                              i2___lwdiv@dividend 0001  
                                       _Sensor_setCalibratAcqTime 238A  
                                                             l225 20D6  
                                                             l234 20A8  
                                                             l235 20CC  
                                                             l227 20FE  
                                                             l236 20CA  
                                                             l512 1ED8  
                                                             l610 076C  
                                                             l530 08F4  
                                                             l514 1F02  
                                                             l611 077C  
                                                             l603 06A4  
                                                             l523 082A  
                                                             l507 2174  
                                                             l524 0844  
                                                             l605 071E  
                                                             l606 07E2  
                                                             l615 07A0  
                                                             l527 08B0  
                                                             l608 075E  
                                                             l624 0818  
                                                             l801 1410  
                                                             l609 0768  
                                                             l641 2258  
                                                             l529 08EA  
                                                             l570 221E  
                                                             l618 07CA  
                                                             l546 158E  
                                                             l482 19D4  
                                                             l547 155A  
                                                             l483 19AC  
                                                             l548 1566  
                                                             l484 19F8  
                                                             l493 1B48  
                                                             l485 19B4  
                                                             l910 0F78  
                                                             l902 0ED6  
                                                             l590 0470  
                                                             l582 0320  
                                                             l646 24F6  
                                                             l566 252C  
                                                             l494 1B0C  
                                                             l486 19BC  
                                                             l583 0422  
                                                             l575 1EB2  
                                                             l807 2442  
                                                             l487 19C4  
                                                             l592 04CE  
                                                             l584 03B2  
                                                             l496 1B18  
                                                             l488 19CC  
                                                             l665 22C0  
                                                             l497 1B24  
                                                             l498 1B30  
                                                             l907 0F1A  
                                                             l587 0408  
                                                             l499 1B3C  
                                                             l852 1180  
                                                             l772 25FC  
                                                             l596 250C  
                                                             l853 11A8  
                                                             l837 21EC  
                                                             l782 15C6  
                                                             l871 2558  
                                                             l783 15D2  
                                                             l791 0608  
                                                             l687 228C  
                                                             l767 21AC  
                                                             l961 11EC  
                                                             l793 05BE  
                                                             l962 1220  
                                                             l778 16EA  
                                                             l963 1256  
                                                             l795 061E  
                                                             l971 1F88  
                                                             l956 26B8  
                                                             l876 186C  
                                                             l884 1348  
                                                             l964 128E  
                                                             l788 0570  
                                                             l798 0680  
                                                             _GIE 007F97  
                                                    __CFG_CPD$OFF 000000  
                                                             _abs 23BA  
                                                             fsr2 000FD9  
                                         __size_of_PMD_Initialize 001C  
                                                             prod 000FF3  
                                                             tosl 000FFD  
                                                             wreg 000FE8  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 00B1  
                                __size_of_MTOUCH_Sensor_SampleAll 0046  
                                         __size_of_ringBufferPull 0118  
                               __size_of_MTOUCH_Sensor_Initialize 007A  
                                       ?_MTOUCH_Sensor_Initialize 0001  
                                 __size_of_Sensor_setSamplePeriod 0024  
                                                    __CFG_LVP$OFF 000000  
                                                    __CFG_ZCD$OFF 000000  
                                                            l1002 0FB0  
                                                            l1004 0FEC  
                                                            l1005 0FD0  
                                                            l1007 1034  
                                                            l1040 01EA  
                                                            l1032 0052  
                                                            l1008 1006  
                                                            l1042 0252  
                                                            l1034 009E  
                                                            ?_abs 00AF  
                                                            l1060 0AEC  
                                                            l1036 0170  
                                                            l1038 01AE  
                                                            l1127 23DA  
                                                            l1072 0B8C  
                                                            l1073 0BE6  
                                                            l1074 0B92  
                                                            l1066 0B1C  
                                                            l1059 0ADC  
                                                            l1500 1F4A  
                                                            l1068 0B44  
                                                            l1510 1E40  
                                                            l1509 1E68  
                                                            l1490 1D30  
                                                            l1635 1DEA  
                                                            l1643 1FE8  
                                                            l1636 1DE0  
                                                            l1644 1FE2  
                                                            l1485 1D06  
                                                            l1486 1CFE  
                                                            l1495 1F28  
                                                            l1496 1F20  
                                                            l1489 1D26  
                                                            l5009 07C2  
                                                            l1499 1F40  
                                                            l5063 15C6  
                                                            l5143 21A4  
                                                            l5233 2504  
                                                            l5129 216C  
                                                            l4621 0B48  
                                                            l5167 243A  
                                                            l4539 2096  
                                                            l5509 0FA0  
                                                            l5367 1ED0  
                                                            l5519 0FC6  
                                                            l5395 25F4  
                                                            l4893 1E40  
                                                            l4959 069C  
                                                            l4987 0774  
                                                            STR_1 FFFB  
                                                            STR_2 FE78  
                                                            STR_3 FE98  
                                                            STR_4 FEB8  
                                                            STR_5 FED8  
                                                            STR_6 FEF8  
                                                            STR_7 FFEE  
                                                            STR_8 FFF7  
                                                            STR_9 FBA7  
                                   ?_Button_Reading_Update_Helper 00B2  
                                                            _LATA 000F79  
                                                            _LATB 000F7A  
                                                            _LATC 000F7B  
                                                            _LATD 000F7C  
                                                            _LATE 000F7D  
                                                            _LATF 000F7E  
                                                            _LATG 000F7F  
                                                            _LATH 000F80  
                                                            u5020 1D0A  
                                                            u5110 0B7A  
                                                            u5050 1F2C  
                                                            u5130 0BF0  
                                                            u6010 054C  
                                                            u5300 24F2  
                                                            u5400 0F60  
                                                            u5240 21E8  
                                                            u5340 12F6  
                                                            u5260 1CCC  
                                                            u5420 0F8C  
                                                            u6108 13F0  
                                                            u6300 097C  
                                                            _PMD0 000E4C  
                                                            u5325 1C1A  
                                                            _PMD1 000E4D  
                                                            u5350 1374  
                                                            u5510 1238  
                                                            _PMD2 000E4E  
                                                            _PMD3 000E4F  
                                                            u6128 1494  
                                                            _PMD4 000E50  
                                                            u5345 12EC  
                                                            u5265 1CC2  
                                                            u5425 0F88  
                                                            _PMD5 000E51  
                                                            u5450 11D2  
                                                            u6058 05F4  
                                                            u6330 2518  
                                                            u6250 085C  
                                                            u5355 136A  
                                                            u6315 097E  
                                                            u5540 126E  
                                                            u5700 25D0  
                                                            u5365 0ED2  
                                                            u5605 1B20  
                                                            u5606 1B22  
                                                            u5615 1B2C  
                                                            u5528 123C  
                                                            u5480 1204  
                                                            u5616 1B2E  
                                                            u5625 1B38  
                                                            u5570 12A6  
                                                            u5626 1B3A  
                                                            u5635 1B44  
                                                            u6195 236E  
                                                            u5468 11D6  
                                                            u5660 2288  
                                                            u5636 1B46  
                                                            u5558 1272  
                                                            u5910 22BC  
                                                            u6390 1E22  
                                                            u6295 0962  
                                                            u5840 07A4  
                                                            u5680 2254  
                                                            u6480 1F08  
                                                            u5930 10D4  
                                                            u5498 1208  
                                                            u6378 1718  
                                                            u5770 0722  
                                                            u5738 1576  
                                                            u5690 25EA  
                                                            u5595 1B14  
                                                            u5588 12AA  
                                                            u5780 072E  
                                                            u5596 1B16  
                                                            u5950 1170  
                                                            u6590 0228  
                                                            u6670 0FC6  
                                                            u5935 10CA  
                                                            u5945 1136  
                                                            u5946 113C  
                                                            u5947 114A  
                                                            u5980 1600  
                                                            u5990 162A  
                                                            u5995 1620  
                                      Button_State_Pressed@button 00C9  
                                                            _WPUA 000E91  
                                                            _WPUB 000E99  
                                                            _WPUC 000EA1  
                                                            _WPUD 000EA6  
                                                            _WPUE 000EAE  
                                                            _WPUF 000EB3  
                                                            _WPUG 000EBB  
                                                            _WPUH 000EC0  
                                           ??_EUSART2_Receive_ISR 0017  
                                             _sensor_medianBuffer 0060  
                                                   __CFG_FCMEN$ON 000000  
                                                   _EUSART2_Write 2092  
                                              _MTOUCH_needReburst 2738  
                                                            abs@a 00AF  
                                                            _main 1F54  
                            __size_of_MTOUCH_Button_InitializeAll 0038  
                                                            _line 0195  
                                                   ?_EUSART2_Read 0001  
                                                            fsr0h 000FEA  
                                                            fsr1h 000FE2  
                                              i2___lwdiv@quotient 0005  
                                                            fsr2h 000FDA  
                                                            fsr0l 000FE9  
                                                            indf1 000FE7  
                                                            indf2 000FDF  
                                                            fsr1l 000FE1  
                                                            fsr2l 000FD9  
                                                            btemp 0050  
                            __size_of_MTOUCH_Sensor_InitializeAll 0038  
                                                            prodh 000FF4  
                                                            prodl 000FF3  
                                                            start 00EE  
                              __size_ofi2_Sensor_scheduleNextScan 014C  
                                    __end_of_EUSART2_Transmit_ISR 22F6  
                                       ??_Sensor_FrequencyHopping 00C3  
                                                 __end_ofi2_putch 274C  
                                                   __CFG_CSWEN$ON 000000  
                                             ?_MTOUCH_needReburst 0001  
                                                    ___param_bank 000000  
                                                   ?_medianFilter 00AF  
                                  __end_of_Sensor_autoCalibration 0D44  
                                                   __CFG_SCANE$ON 000000  
                                        __size_ofi2_EUSART2_Write 003C  
                                        ?_MTOUCH_Service_Mainloop 0001  
                                __size_of_MTOUCH_Button_isPressed 0038  
                                   __size_of_Button_State_Pressed 00EE  
                                         ?_Button_Check_AKS_Block 00B7  
                                                           ??_abs 00B1  
                                     ?_Button_Baseline_Initialize 00B2  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 007E  
                                   ??_MTOUCH_Sensor_RawSample_Get 00B1  
                                   Sensor_RawSample_Update@sensor 00B6  
                                   Sensor_RawSample_Update@result 00B8  
                                       __size_of_Sensor_isEnabled 0026  
                                  __size_of_OSCILLATOR_Initialize 0018  
                                             ringBufferPull@index 00D1  
                                             __size_of_IOCBF2_ISR 0028  
                                   __end_of_OSCILLATOR_Initialize 2620  
                             __end_of_Sensor_isCalibratingAcqTime 25D4  
                                  ?i2_Sensor_isCalibratingAcqTime 0001  
                                     _Sensor_isCalibratingAcqTime 25BA  
                                                           _ADACC 000F70  
                                                           _ADACQ 000F5C  
                                                           _ADCAP 000F5D  
                                                           ?_main 0001  
                                                           _ADCLK 000F57  
                                                           _ADPCH 000F5F  
                                                           _ADREF 000F58  
                                                           _ADPRE 000F5E  
                                                           STR_10 FFA2  
                                                           STR_11 FFCF  
                                                           STR_20 FFA2  
                                                           STR_12 FFA2  
                                                           STR_13 FF93  
                                                           STR_21 FF34  
                                                           STR_14 FFA2  
                                                           STR_30 FFDD  
                                                           STR_22 FF47  
                                                           STR_31 FFEE  
                                                           STR_15 FFC6  
                                                           STR_23 FF5A  
                                                           STR_16 FFA2  
                                                           STR_32 FFF7  
                                                           STR_24 FF6D  
                                                           STR_40 FD1B  
                                                           STR_41 FFA2  
                                                           STR_33 FFD7  
                                                           STR_17 FFA5  
                                                           STR_25 FF80  
                                                   __CFG_WDTE$OFF 000000  
                                                           STR_26 FFA2  
                                                           STR_18 FFA2  
                                                           STR_34 FFF3  
                                                           STR_35 FFA2  
                                                           STR_27 FFE3  
                                                           STR_19 FFB7  
                                                           STR_28 FFEE  
                                                           STR_36 FF18  
                                                           STR_37 FFA2  
                                                           STR_29 FFF7  
                                                           STR_38 FFE9  
                                                           STR_39 FFA2  
                                                           _ADRPT 000F66  
                                                  __CFG_DEBUG$OFF 000000  
                                         __size_of_Button_Service 00C4  
                                                 __end_of___lwdiv 1D3A  
                                                 __end_of___lwmod 1F54  
                                                           i2l151 008C  
                                                           i2l153 0098  
                                                           i2l234 2120  
                                                           i2l235 2144  
                                                           i2l155 00A2  
                                                           i2l236 2142  
                                                           i2l252 18A0  
                                                           i2l253 18C0  
                                                           i2l149 006E  
                                                           i2l254 18DA  
                                                           i2l246 22F0  
                                                           i2l247 22EC  
                                                           i2l257 18DC  
                                                           i2l530 0A4C  
                                                           i2l523 0992  
                                                           i2l259 1924  
                                                           i2l524 09AA  
                                                           i2l541 0D32  
                                                           i2l534 0C88  
                                                           i2l535 0C7A  
                                                           i2l527 0A0E  
                                                           i2l560 1B00  
                                                           i2l641 2356  
                                                           i2l529 0A42  
                                                           i2l561 1ADC  
                                                           i2l562 1AE8  
                                                           i2l539 0D02  
                                                           i2l493 1BAC  
                                                           i2l494 1B70  
                                                           i2l559 1AAA  
                                                           i2l496 1B7C  
                                                           i2l497 1B88  
                                                           i2l498 1B94  
                                                           i2l499 1BA0  
                                                           i2l687 2324  
                                                           i2l956 2734  
                                                           _OSCEN 000E47  
                                                           _TRISA 000F81  
                                                           _TRISB 000F82  
                                                           _TRISC 000F83  
                                                           _TRISD 000F84  
                                                           _TRISE 000F85  
                                                           _TRISF 000F86  
                                                           _TRISG 000F87  
                                                           _TRISH 000F88  
                                                           i2_abs 24AC  
                                 __size_of_Button_DefaultCallback 0002  
                                             i2_Sensor_SetTrisBit 1B6C  
                                                   __CFG_WRT0$OFF 000000  
                                                   __CFG_WRT1$OFF 000000  
                                                   __CFG_WRT2$OFF 000000  
                                                   __CFG_WRT3$OFF 000000  
                                                   __CFG_WRT4$OFF 000000  
                                                   __CFG_WRT5$OFF 000000  
                                                   __CFG_WRT6$OFF 000000  
                                                   __CFG_WRT7$OFF 000000  
                                            ??_MTOUCH_needReburst 00AF  
                                                  __CFG_EBTR0$OFF 000000  
                                                  __CFG_EBTR1$OFF 000000  
                                                  __CFG_EBTR2$OFF 000000  
                                                  __CFG_EBTR3$OFF 000000  
                                                  __CFG_EBTR4$OFF 000000  
                                                  __CFG_EBTR5$OFF 000000  
                                                  __CFG_EBTR6$OFF 000000  
                                                  __CFG_EBTR7$OFF 000000  
                                                   __CFG_WRTB$OFF 000000  
                                                   __CFG_WRTC$OFF 000000  
                                                   __CFG_WRTD$OFF 000000  
                                 __size_of_Sensor_DefaultCallback 0002  
                                                  __CFG_EBTRB$OFF 000000  
                                         __end_of_PIN_MANAGER_IOC 272C  
                                                 __end_of_dpowers FB25  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 275C  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
                                   _MTOUCH_Sensor_Scan_Initialize 2756  
                                         Sensor_setSampled@sensor 0001  
                                 __end_of_Sensor_scheduleNextScan 0984  
                                              __CFG_MCLRE$EXTMCLR 000000  
                                                           _putch 2704  
                                __size_of_Button_State_NotPressed 019E  
                                                  __pbitbssCOMRAM 0278  
                                                  ?_EUSART2_Write 0001  
                                                           pclath 000FFA  
                                                           tablat 000FF5  
                                            _Sensor_Sampled_Reset 2674  
                                                           plusw2 000FDB  
                                                  ??_EUSART2_Read 00AF  
                                                           status 000FD8  
                                __size_of_MTOUCH_Sensor_isEnabled 0034  
                                                           wtemp6 0051  
                                       __size_of_Sensor_setActive 0012  
                                          ?i2_Sensor_isCalibrated 0001  
                                          Sensor_isEnabled@sensor 00AF  
                                            ?i2_Sensor_SetTrisBit 0001  
                                                __end_ofi2_printf 0E76  
                                              __size_ofi2___lwdiv 0052  
                                              __size_ofi2___lwmod 0042  
                           __end_of_EUSART2_SetTxInterruptHandler 26F6  
                          __size_of_EUSART2_SetTxInterruptHandler 000E  
                                   _EUSART2_SetTxInterruptHandler 26E8  
                                                  ??_medianFilter 00B1  
                                                 __initialization 192C  
                                          _Sensor_setSamplePeriod 251E  
                                  __end_of_Button_Check_AKS_Block 0F90  
                                                    __end_of_main 1F96  
                                            _Sensor_setCalibrated 2566  
                                                      i2printf@ap 0010  
                                                   ?_DTR_Callback 0001  
                                           __end_of_ringBufferLUT 029C  
                                __end_of_MTOUCH_Button_Initialize 1A96  
                                                          ??_main 00D5  
                                                   __activetblptr 000003  
                                         _MTOUCH_Sensor_Calibrate 245C  
                                         ??_Button_Reading_Update 00B8  
                                                          ?i2_abs 0001  
                                __end_of_ADCC_ThresholdISR_mTouch 2756  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 00B1  
                                        ?_Button_Deviation_Update 00AF  
                                                    ?_MTOUCH_Tick 0001  
                                    Button_Baseline_Update@button 00AF  
                                      __end_of_EUSART2_Initialize 1C8C  
                                    ??_IOCBF2_SetInterruptHandler 00B2  
                                                          _ADCON0 000F60  
                                                          _ADCON1 000F59  
                                                          _ADCON2 000F5A  
                                                          _ADCON3 000F5B  
                                        _eusart2TxBufferRemaining 004B  
                                                          _ADFLTR 000F72  
                            __size_of_MTOUCH_Sensor_RawSample_Get 0038  
                                                          _ADLTHH 000F6B  
                                                          _ADLTHL 000F6A  
                                                          _ADUTHH 000F6D  
                                                          _ADUTHL 000F6C  
                                                          _ANSELA 000E92  
                                                          ?_putch 0001  
                                                          _ANSELB 000E9A  
                                                          _ANSELD 000EA7  
                                                          _ANSELE 000EAF  
                                                          _ANSELF 000EB4  
                                                          _ANSELG 000EBC  
                                                          _RC2REG 000EF1  
                                                          _RC2STA 000EF5  
                                                          _ODCONA 000E90  
                                                          _ODCONB 000E98  
                                                          _ODCONC 000EA0  
                                                          _ODCOND 000EA5  
                                                          _ODCONE 000EAD  
                                                          _ODCONF 000EB2  
                                                          _ODCONG 000EBA  
                                                          _ODCONH 000EBF  
                                                          i2l1060 0D5E  
                                                          i2l1127 24CA  
                                                          i2l1072 0DFC  
                                                          i2l1073 0E50  
                                                          i2l1074 0E02  
                                                          i2l1066 0D8C  
                                                          i2l1059 0D4E  
                                                          i2l1500 1FCE  
                                                          i2l1068 0DB4  
                                                  __CFG_WDTCCS$SC 000000  
                                                          i2l1490 1DD4  
                                                          i2l1485 1DAA  
                                                          i2l1486 1DA2  
                                                          i2l1495 1FAC  
                                                          i2l1496 1FA4  
                                                          i2l1489 1DCA  
                                                          i2l1499 1FC4  
                                                          i2l4307 0DB8  
                                                          i2l3763 210E  
                                           ?_Sensor_Sampled_Reset 00AF  
                                                          _RG7PPS 000E89  
                                                   i2putch@txData 0002  
                                                          _OSCFRQ 000E49  
                                                       ??i2_putch 0002  
                                                          _TX2REG 000EF2  
                                                          _TX2STA 000EF6  
                               MTOUCH_Button_InitializeAll@button 00BA  
                                                          i2abs@a 0001  
                                  ??_Button_Reading_Update_Helper 00B4  
                                           ??i2_Sensor_SetTrisBit 0002  
                                          _Button_DefaultCallback 276C  
                                 __end_of_MTOUCH_Service_Mainloop 2434  
                                                  __CFG_PWRTE$OFF 000000  
                                                ??i2_DTR_Callback 0001  
                                                  __CFG_XINST$OFF 000000  
                                             _Sensor_isCalibrated 25D4  
                                     MTOUCH_Sensor_Service@sensor 000E  
                                          _Sensor_DefaultCallback 276A  
                                       __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                                                   _packet_sample 0029  
                                                  ??_DTR_Callback 00AF  
                                           ?_Sensor_setCalibrated 0001  
                                    Sensor_DefaultCallback@sensor 0001  
                                                  __CFG_STVREN$ON 000000  
                                                       ??___lwdiv 00B3  
                                                       ??___lwmod 00BA  
                                                          _memcpy 1E2E  
                                                          clear_0 1970  
                                                          clear_1 197C  
                                                          clear_2 1988  
                                                          clear_3 1996  
                                            _eusart2RxStringReady 0279  
                                __end_of_MTOUCH_Button_ServiceAll 2608  
                                  __size_of_MTOUCH_Sensor_Service 0070  
                                                          _printf 0AD0  
                             __size_of_IOCBF2_SetInterruptHandler 000E  
                                   __end_of_MTOUCH_Sensor_Service 1B06  
                                    Sensor_autoCalibration@sensor 0005  
                                                          _strcmp 1DDE  
                                                          _strlen 1FD8  
                                  i2Sensor_scheduleNextScan@state 0005  
                                               ??i2_EUSART2_Write 0001  
                                                  _PMD_Initialize 2584  
                                                    __pdataCOMRAM 004C  
                                         _MTOUCH_Sensor_SampleAll 1ECA  
                                    Button_DefaultCallback@button 0001  
                                               __end_ofi2___lwdiv 1DDE  
                                                    __mediumconst FB1A  
                                               __end_ofi2___lwmod 1FD8  
                                                  _ringBufferPull 0F90  
                                            ?_Sensor_isCalibrated 00AF  
                                                          tblptrh 000FF7  
                                                          tblptrl 000FF6  
                                                          tblptru 000FF8  
                                        ?_Sensor_RawSample_Update 00B6  
                                            _EUSART2_Transmit_ISR 22C4  
                                         ?_Button_Baseline_Update 00AF  
                             Sensor_postAcquisitionProcess@sensor 00C1  
                                                 ??_EUSART2_Write 00AF  
                      IOCBF2_SetInterruptHandler@InterruptHandler 00AF  
                                                ?_PIN_MANAGER_IOC 0001  
                              __size_of_Sensor_setCalibratAcqTime 0030  
                        __end_of_MTOUCH_Button_SetPressedCallback 2720  
                       __size_of_MTOUCH_Button_SetPressedCallback 000E  
                              ??_MTOUCH_Button_SetPressedCallback 00B2  
                               ?_MTOUCH_Button_SetPressedCallback 00AF  
                                _MTOUCH_Button_SetPressedCallback 2712  
                                                    ??_IOCBF2_ISR 0001  
                                 MTOUCH_Sensor_RawSample_Get@name 00B1  
                                   __size_of_INTERRUPT_Initialize 000E  
                                                 _eusart2RxBuffer 0100  
                                ??_INTERRUPT_InterruptManagerHigh 0017  
                                 ?_INTERRUPT_InterruptManagerHigh 0001  
                                               _SYSTEM_Initialize 25A0  
                                                 _eusart2TxBuffer 0200  
                                                      __accesstop 0060  
                                         __end_of__initialization 199C  
                             __size_of_Button_Baseline_Initialize 0060  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                 ??_Sensor_postAcquisitionProcess 00BA  
                                              ?_SYSTEM_Initialize 0001  
                                             _Button_StateMachine 00D5  
                                                   ___rparam_used 000001  
                                      __end_of_Button_Tick_helper 1D8C  
                                   MTOUCH_Sensor_Calibrate@sensor 00AF  
                                                   __end_ofi2_abs 24D4  
                               __size_of_MTOUCH_Sensor_isSampling 0004  
                                              i2___lwmod@dividend 0008  
                                       ?_MTOUCH_Sensor_isSampling 0001  
                                                  __pcstackCOMRAM 0001  
                                         _MTOUCH_Button_isPressed 21B8  
                                                    __pidataBANK0 2650  
                                             ??_SYSTEM_Initialize 00BB  
                                  ?_Button_Unscaled_Deviation_Get 00AF  
                                      __end_of_MTOUCH_Button_Tick 245C  
                                __end_of_MTOUCH_Sensor_Initialize 1A20  
                                  ?_EUSART2_SetTxInterruptHandler 00AF  
                                                   __end_of_putch 2712  
                                       ??_MTOUCH_Sensor_Calibrate 00AF  
                                                _Sensor_isEnabled 24D4  
                                __size_of_Sensor_scheduleNextScan 016A  
                                                     i2printf@val 0014  
                                    ??i2_MTOUCH_Sensor_wasSampled 0001  
                                 __end_of_Button_Deviation_Update 11BA  
                                          __end_of_PMD_Initialize 25A0  
                                        Sensor_setInactive@sensor 00AF  
                                              __end_of_IOCBF2_ISR 24AC  
                                                  _Button_Service 1668  
                                            __end_of_EUSART2_Read 210C  
                                          __end_of_ringBufferPull 10A8  
                                      ?_Button_State_Initializing 00C9  
                                            Button_Service@button 00D2  
                                                         ??i2_abs 0003  
                                           ??_Sensor_isCalibrated 00B1  
                                  __end_of_Button_Baseline_Update 13C4  
                                           ?_EUSART2_Transmit_ISR 0001  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 00BE  
                                        _MTOUCH_Button_Initialize 1A20  
                                                       ?i2_printf 000D  
                                            __end_of_medianFilter 04F0  
                                         _Button_State_NotPressed 04F0  
                                   __size_of_MTOUCH_Sensor_Enable 0028  
                                              _Sensor_setInactive 2686  
                                       __end_of_SYSTEM_Initialize 25BA  
                                MTOUCH_Sensor_isCalibrated@sensor 00AF  
                                          ??_Sensor_Sampled_Reset 00B1  
                                                         ??_putch 00B0  
                                        _ADCC_ThresholdISR_mTouch 274C  
                                                   _eusart2RxHead 003F  
                              __size_ofi2_MTOUCH_Sensor_isEnabled 0032  
                                                   _eusart2TxHead 0041  
                                                      __pbssBANK0 0060  
                                                      __pbssBANK1 0100  
                                                      __pbssBANK2 0200  
                                                   _eusart2RxTail 003E  
                                                   _eusart2TxTail 0040  
                                      ?i2_MTOUCH_Sensor_isEnabled 0001  
                                         _MTOUCH_Sensor_isEnabled 2228  
                                                      __pnvCOMRAM 0042  
                                             ?_Sensor_setInactive 00AF  
                                                _Sensor_setActive 2698  
                                      __end_of_mtouch_button_init FB7A  
                                           EUSART2_Read@readValue 00AF  
                             __size_ofi2_MTOUCH_Sensor_wasSampled 0032  
                                          ??_Sensor_setCalibrated 0003  
                                         Sensor_SetTrisBit@sensor 00B0  
                                i2MTOUCH_Sensor_wasSampled@sensor 0001  
                                  MTOUCH_Sensor_wasSampled@sensor 00AF  
                                          __end_of_Button_Service 172C  
                                                         ?_memcpy 00AF  
                             __end_of_MTOUCH_Button_InitializeAll 21B8  
                                     _MTOUCH_Button_InitializeAll 2180  
                                                         _ADSTPTH 000F69  
                                                         _ADSTPTL 000F68  
                             __end_of_MTOUCH_Sensor_InitializeAll 2180  
                                     _MTOUCH_Sensor_InitializeAll 2148  
                                       ??_MTOUCH_Sensor_SampleAll 00C4  
                                                         ?_printf 00BB  
                                                 ?_PMD_Initialize 0001  
                                         __size_of_mTouchCallback 010A  
                                 __end_of_Sensor_RawSample_Update 1ECA  
                                            ??_Sensor_setInactive 00B1  
                                                         ?_strcmp 00AF  
                                                         ?_strlen 00AF  
                               __size_of_MTOUCH_Sensor_wasSampled 0034  
                                       ?_MTOUCH_Sensor_wasSampled 0001  
                                                 ?_ringBufferPull 0001  
                                       Sensor_isCalibrated@sensor 00AF  
                               __end_of_Button_State_Initializing 1668  
                                                         _SP2BRGH 000EF4  
                                                         _SP2BRGL 000EF3  
                                        _MTOUCH_Button_ServiceAll 25EE  
                                                         _OSCCON1 000E43  
                                                         _OSCCON3 000E45  
                                     __end_of_EUSART2_Receive_ISR 192C  
                              __end_of_IOCBF2_SetInterruptHandler 26DA  
                                      _IOCBF2_SetInterruptHandler 26CC  
                                   MTOUCH_Sensor_SampleAll@sensor 00C4  
                                                      ??i2_printf 000F  
                                                         _OSCTUNE 000E48  
                                __size_of_MTOUCH_Service_Mainloop 0028  
                                    __end_of_Button_State_Pressed 14B2  
                                      i2Sensor_SetTrisBit@TrisBit 0001  
                                            __end_of_DTR_Callback 26BC  
                                                         _USB_DTR 0278  
                                Button_Baseline_Initialize@button 00B2  
                                 Sensor_setCalibratAcqTime@sensor 0001  
                                            __size_of_MTOUCH_Tick 0006  
                            __size_of_Sensor_isCalibratingAcqTime 001A  
                                 ??i2_Sensor_isCalibratingAcqTime 0003  
                                         ??i2_Sensor_isCalibrated 0003  
                                                         i2_putch 2742  
                               __end_ofi2_MTOUCH_Sensor_isEnabled 235A  
                                         ?_Sensor_setSamplePeriod 0001  
                                       ??_MTOUCH_Button_isPressed 00AF  
                                                      _freq_index 0081  
                                                         __Hparam 0000  
                                               _Sensor_SetTrisBit 1B06  
                                                         __Lparam 0000  
                           __end_of_Sensor_postAcquisitionProcess 159C  
                          __size_of_Sensor_postAcquisitionProcess 00EA  
                                   _Sensor_postAcquisitionProcess 14B2  
                                              ?_Sensor_SetTrisBit 00AF  
                                  MTOUCH_Button_Initialize@button 00B1  
                                                         ___lwdiv 1CE6  
                                                         ___lwmod 1F10  
                                                 ?_Button_Service 0001  
                                                         __pcinit 192C  
                                                 __size_of_memcpy 004E  
                                                         __ramtop 0E00  
                                                 _scanInterrupted 0039  
                                                         __ptext0 1F54  
                                                         __ptext1 0F90  
                                                         __ptext2 1FD8  
                                                         __ptext3 0000  
                                                         __ptext4 1DDE  
                                                         __ptext5 20D0  
                                                         __ptext6 2016  
                                                         __ptext7 25A0  
                                                         __ptext8 2584  
                                                         __ptext9 172C  
                                                 __size_of_printf 0140  
                                     Button_Reading_Update@button 00B6  
                                             ??_Sensor_SetTrisBit 00B0  
                                                 __size_of_strcmp 0050  
                                                 __size_of_strlen 003E  
                                        _MTOUCH_Sensor_Initialize 19A6  
                                                         _dpowers FB1B  
                                           _OSCILLATOR_Initialize 2608  
                                          ??_EUSART2_Transmit_ISR 0001  
                                                    __size_of_abs 002A  
                                       ??_Button_State_NotPressed 00CB  
                                        ??_PIN_MANAGER_Initialize 00B2  
                                                       _IOCBFbits 000E93  
                                  __size_of_Button_Reading_Update 0024  
                                                       _IOCBNbits 000E94  
                                     __size_of_MTOUCH_needReburst 000A  
                                                       _IOCBPbits 000E95  
                                   __end_of_Button_Reading_Update 2566  
                               MTOUCH_Sensor_InitializeAll@sensor 00BA  
                                                _callback_sampled 004C  
                                       ??_MTOUCH_Sensor_isEnabled 00AF  
                                      __size_of_SYSTEM_Initialize 001A  
                                           i2EUSART2_Write@txData 0001  
                                    Button_Check_AKS_Block@button 00B7  
                                                _callback_pressed 00E1  
                                  MTOUCH_Sensor_Initialize@sensor 00B1  
                                               _printResetMessage 2016  
                                 i2Sensor_scheduleNextScan@sensor 0007  
                                   Sensor_scheduleNextScan@sensor 00B5  
                                            end_of_initialization 199C  
                                         ?_Button_DefaultCallback 00C7  
                                                         memcpy@d 00B6  
                                                         memcpy@n 00B3  
                                                         memcpy@s 00B8  
                                  __end_of_Sensor_setSamplePeriod 2542  
                                              ?_printResetMessage 0001  
                                      __end_of_mtouch_sensor_init FBA7  
                                        ?_Sensor_FrequencyHopping 0001  
                                       __end_of_Sensor_SetTrisBit 1B6C  
                                         ?_Sensor_DefaultCallback 0001  
                                __size_of_Button_Deviation_Update 0112  
                                    ??_MTOUCH_Sensor_isCalibrated 00AF  
                                              _EUSART2_Initialize 1C2E  
                                             ??_printResetMessage 00C7  
                             __end_of_MTOUCH_Sensor_RawSample_Get 2228  
                                     _MTOUCH_Sensor_RawSample_Get 21F0  
                                                 i2_EUSART2_Write 210C  
                                                         printf@c 00C6  
                                                         printf@f 00BB  
                                                         postdec1 000FE5  
                                                         postdec2 000FDD  
                                                         postinc0 000FEE  
                                                         postinc1 000FE6  
                                                         postinc2 000FDE  
                                           __size_of_EUSART2_Read 003C  
                                      ?i2_Sensor_scheduleNextScan 0001  
                                         _Sensor_scheduleNextScan 081A  
                              __end_ofi2_MTOUCH_Sensor_wasSampled 2328  
                                      i2_MTOUCH_Sensor_wasSampled 22F6  
                                                         strcmp@r 00B4  
                                           __CFG_WDTCPS$WDTCPS_31 000000  
                                             ?_EUSART2_Initialize 0001  
                                                         strlen@s 00AF  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 00BF  
                                                       _PORTBbits 000F8A  
                                           __size_of_medianFilter 0254  
                                          Sensor_setActive@sensor 00AF  
                                         _IOCBF2_InterruptHandler 0048  
                                   Button_Deviation_Update@button 00AF  
                                                       _TRISEbits 000F85  
                        MTOUCH_Button_SetPressedCallback@callback 00AF  
                                 i2MTOUCH_Sensor_isEnabled@sensor 0001  
                                   MTOUCH_Sensor_isEnabled@sensor 00AF  
                                       __end_of_printResetMessage 2054  
                                      MTOUCH_Sensor_Enable@sensor 00AF  
                                             _callback_notPressed 00DE  
                                                __CFG_FEXTOSC$OFF 000000  
                                               i2___lwdiv@divisor 0003  
                                __end_of_MTOUCH_Sensor_isSampling 2766  
                             __size_of_MTOUCH_Sensor_isCalibrated 0034  
                                  __end_of_Button_DefaultCallback 276E  
                                                       i2___lwdiv 1D8C  
                                                       i2___lwmod 1F96  
                                               i2___lwdiv@counter 0007  
                                     __end_ofi2_Sensor_SetTrisBit 1BCE  
                                            ??_EUSART2_Initialize 00B2  
                                        __end_of_Sensor_isEnabled 24FA  
                                          __size_of_ringBufferLUT 029C  
                                      Sensor_setCalibrated@sensor 0001  
                                  __end_of_Sensor_DefaultCallback 276C  
                                        ??_Sensor_autoCalibration 0007  
                                                    _EUSART2_Read 20D0  
                                              medianFilter@sensor 00B5  
                                __size_of_Sensor_RawSample_Update 004E  
                           __end_ofi2_Sensor_isCalibratingAcqTime 2650  
                          __size_ofi2_Sensor_isCalibratingAcqTime 0018  
                                   i2_Sensor_isCalibratingAcqTime 2638  
                                        ringBufferPull@charNumber 00CD  
                                                    _medianFilter 029C  
                                    __end_of_INTERRUPT_Initialize 26E8  
                                            _Button_State_Pressed 13C4  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 2092  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 003E  
                                   _MTOUCH_Sensor_ADCC_Initialize 2054  
                               __end_ofi2_Sensor_scheduleNextScan 0AD0  
                                      ??_MTOUCH_Button_Initialize 00B0  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 081A  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 018C  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0001  
                      ??_Sensor_FrequencyHopping_Autotune_Process 00B3  
                        _Sensor_FrequencyHopping_Autotune_Process 068E  
                                 ??_MTOUCH_Sensor_Scan_Initialize 00AF  
                                  ?_Sensor_postAcquisitionProcess 0001  
                                                   __pidataCOMRAM 2766  
                                                  _mTouchCallback 11BA  
                                              _Button_Tick_helper 1D3A  
                                                  __end_of_memcpy 1E7C  
                                          ?_OSCILLATOR_Initialize 0001  
                                             MTOUCH_Button_Tick@i 00B3  
                                      ??_ADCC_ThresholdISR_mTouch 0010  
                                        __end_of_Sensor_setActive 26AA  
                                                  __end_of_printf 0C10  
                                     ??_Button_State_Initializing 00CB  
                                           __size_of_DTR_Callback 0012  
                                                  __end_of_strcmp 1E2E  
                                                    i2printf@flag 0012  
                                                  __end_of_strlen 2016  
                                           _MTOUCH_Sensor_Service 1A96  
                                                    i2printf@prec 0013  
                                             start_initialization 192C  
                                         _MTOUCH_Service_Mainloop 240C  
                                 __size_of_PIN_MANAGER_Initialize 00C2  
                                              _MTOUCH_Button_Tick 2434  
                                 ??_Button_Unscaled_Deviation_Get 00B1  
                                             ?_Button_Tick_helper 00AF  
                                                     __end_of_abs 23E4  
                                                       i2printf@c 0016  
                                                       i2printf@f 000D  
                                 __end_of_Sensor_FrequencyHopping 251E  
                   EUSART2_SetRxInterruptHandler@interruptHandler 00AF  
                   EUSART2_SetTxInterruptHandler@interruptHandler 00AF  
                                                     putch@txData 00B0  
                                                      ?i2___lwdiv 0001  
                                                      ?i2___lwmod 0008  
                                               __size_ofi2_printf 0132  
                                           __end_of_EUSART2_Write 20D0  
                                     ??i2_MTOUCH_Sensor_isEnabled 0001  
                                             ?_MTOUCH_Button_Tick 0001  
                                 Button_State_Initializing@button 00C9  
                                         __end_ofi2_EUSART2_Write 2148  
                                        ??_Button_Check_AKS_Block 00B9  
                                      __size_of_Sensor_SetTrisBit 0066  
                                         medianFilter@bufferIndex 0033  
                                        __size_of_PIN_MANAGER_IOC 000C  
                                __end_of_MTOUCH_Sensor_wasSampled 2290  
                                                __CFG_LPBOREN$OFF 000000  
                                       ??_Sensor_scheduleNextScan 00B1  
                                            ??_Button_Tick_helper 00B1  
                                    __end_of_MTOUCH_Sensor_Enable 240C  
                                                ??_PMD_Initialize 00AF  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 00BC  
                                        ringBufferPull@index_2050 00CF  
                                           ?_Button_State_Pressed 00C9  
                                                    _DTR_Callback 26AA  
                                                ??_ringBufferPull 00CA  
                                          __end_of_mTouchCallback 12C4  
                                      ??_MTOUCH_Button_ServiceAll 00D4  
                                                     __pdataBANK0 00D5  
                                                        ??_memcpy 00B5  
                                                   _ringBufferLUT 0000  
                                     __end_of_Sensor_isCalibrated 25EE  
                                    ??_Button_Baseline_Initialize 00B4  
                                            ??_MTOUCH_Button_Tick 00B3  
                                              _mtouch_button_init FB25  
                                      Sensor_Sampled_Reset@sensor 00AF  
                                                        ??_printf 00BF  
                                                        ??_strcmp 00B3  
                                         __size_ofi2_DTR_Callback 000C  
                                                        ??_strlen 00B1  
                                    ?_Sensor_isCalibratingAcqTime 00AF  
                                                  _eusart2RxCount 003D  
                                                     __pbssCOMRAM 0029  
                                                   _sampling_flag 003A  
                                                   __pcstackBANK0 00AF  
                                      __size_of_printResetMessage 003E  
                                     ?_IOCBF2_SetInterruptHandler 00AF  
                                               i2___lwmod@divisor 000A  
                                               i2___lwmod@counter 000C  
                                        Sensor_SetTrisBit@TrisBit 00AF  
                                  MTOUCH_Button_ServiceAll@button 00D4  
                                             EUSART2_Write@txData 00AF  
                                 ??_EUSART2_SetRxInterruptHandler 00B2  
                                   __size_of_Sensor_Sampled_Reset 0012  
                                                        ?i2_putch 0001  
                                         _Button_Deviation_Update 10A8  
                                      ?_Sensor_setCalibratAcqTime 0001  
                                  __size_ofi2_Sensor_isCalibrated 0018  
                                   __end_ofi2_Sensor_isCalibrated 2638  
                                       _Button_State_Initializing 159C  
                                        _MTOUCH_Sensor_isSampling 2762  
                              __end_of_MTOUCH_Sensor_isCalibrated 22C4  
                                      _MTOUCH_Sensor_isCalibrated 2290  
                                 __size_of_Sensor_autoCalibration 0134  
                                               _Sensor_setSampled 26BC  
                                                ___lwdiv@dividend 00AF  
                                          _PIN_MANAGER_Initialize 172C  
                                                ??_Button_Service 00D0  
                                ??_IOCBF2_DefaultInterruptHandler 0001  
                                 ?_IOCBF2_DefaultInterruptHandler 0001  
                                        ?_MTOUCH_Sensor_Calibrate 0001  
                                              ?_Sensor_setSampled 0001  
                                                       __pintcode 0008  
                              Button_Reading_Update_Helper@button 00B2  
                                                   __pmediumconst FB1A  
                                      ??_MTOUCH_Sensor_Initialize 00B1  
                                   __size_of_Sensor_setCalibrated 001E  
                                                       __ptext100 238A  
                                                       __ptext101 0000  
                                                        ?___lwdiv 00AF  
                                                        ?___lwmod 00B6  
                                                  ?_ringBufferLUT 00C7  
                                                 ?_mTouchCallback 00C7  
                               _EUSART2_TxDefaultInterruptHandler 0045  
                                                __CFG_PPS1WAY$OFF 000000  
                                       i2_MTOUCH_Sensor_isEnabled 2328  
                                             ??_Sensor_setSampled 0003  
                                       ??_MTOUCH_Service_Mainloop 00D5  
                                          ?_MTOUCH_Sensor_Service 0001  
                                     __size_of_Sensor_setInactive 0012  
                                                        _BAUD2CON 000EF7  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0001  
                                                  __size_ofi2_abs 0028  
                                   ??_Sensor_isCalibratingAcqTime 00B1  
                                                   ??_MTOUCH_Tick 00B4  
                                       i2Sensor_SetTrisBit@sensor 0002  
                                                ___lwdiv@quotient 00B4  
                                                     ??i2___lwdiv 0005  
                                                     ??i2___lwmod 000C  
                                                  __size_of_putch 000E  
                                            _INTERRUPT_Initialize 26DA  
            Button_Check_AKS_Block@surplus_deviation_check_button 00BE  
                           __end_of_Button_Unscaled_Deviation_Get 1CE6  
                          __size_of_Button_Unscaled_Deviation_Get 005A  
                                   _Button_Unscaled_Deviation_Get 1C8C  
                              Button_Check_AKS_Block@check_button 00C0  
                                    __size_of_EUSART2_Receive_ISR 0096  
                                       __end_of_Sensor_setSampled 26CC  
                                                ?i2_EUSART2_Write 0001  
                                                        _LATFbits 000F7E  
                                 __size_of_Button_Check_AKS_Block 011A  
                                         _Sensor_RawSample_Update 1E7C  
                               __end_of_Sensor_setCalibratAcqTime 23BA  
                                                        _IPR0bits 000E1F  
                                                        _IPR1bits 000E20  
                                                        _PIE0bits 000E29  
                                                        _IPR3bits 000E22  
                                                        _PIE1bits 000E2A  
                                                        _PIE3bits 000E2C  
                                                        i2u404_45 0C42  
                                                        i2u421_45 0AAE  
                                                        i2u422_40 0AC8  
                                                        _PIR0bits 000E33  
                                                        i2u423_45 0ACA  
                                                        i2u417_40 09C2  
                                                        i2u425_40 1DAE  
                                                        _PIR1bits 000E34  
                                                        i2u380_40 264C  
                                                        i2u428_40 1FB0  
                                                        i2u372_45 1B78  
                                                        i2u372_46 1B7A  
                                                        _PIR3bits 000E36  
                                                        i2u373_45 1B84  
                                                        i2u373_46 1B86  
                                                        i2u382_40 2320  
                                                        i2u374_45 1B90  
                                                        i2u374_46 1B92  
                                                        i2u455_40 0DEA  
                                                        i2u375_45 1B9C  
                                                        i2u375_46 1B9E  
                                                        i2u464_40 18D2  
                                                        i2u376_45 1BA8  
                                                        i2u376_46 1BAA  
                                                        i2u457_40 0E58  
                                                        i2u378_40 2352  
                                                        i2u641_48 2492  
                                                        i2u641_49 24A6  
                                                        i2u379_40 2634  
                                          ??_Button_State_Pressed 00CB  
                                                        i2u673_48 005E  
                                                        i2u676_48 0078  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 238A  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0030  
                                  _MTOUCH_Sensor_Sampled_ResetAll 235A  
                                        ?_MTOUCH_Sensor_SampleAll 0001  
                                               ??_PIN_MANAGER_IOC 0001  
                                              _mtouch_sensor_init FB7A  
                                     ??i2_Sensor_scheduleNextScan 0003  
                                     ?i2_MTOUCH_Sensor_wasSampled 0001  
                                        _MTOUCH_Sensor_wasSampled 225C  
                                              _mtouch_time_toScan 003C  
                                __size_of_Sensor_FrequencyHopping 0024  
                                        ??_Button_Baseline_Update 00B1  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 00C0  
                                                      _ADCON0bits 000F60  
                           Button_Check_AKS_Block@currentAKSGroup 00BD  
                                          _Sensor_autoCalibration 0C10  
                                      __end_of_MTOUCH_needReburst 2742  
                                                      printf@flag 00C2  
                                                      printf@prec 00C3  
                                                        _WPUEbits 000EAE  
                                   __size_of_EUSART2_Transmit_ISR 0032  
                                                        i2_printf 0D44  
                                            _MTOUCH_Sensor_Enable 23E4  
                                                       copy_data0 1940  
                                        Button_Tick_helper@button 00AF  
                                       ??_Button_Deviation_Update 00B1  
                                           ?_INTERRUPT_Initialize 0001  
                                           _Button_Reading_Update 2542  
                                        ?_MTOUCH_Button_isPressed 0001  
                                               ?_Sensor_isEnabled 00AF  
                                             __end_of_MTOUCH_Tick 2762  
                                               _MTOUCH_Initialize 2662  
                                 __end_of_MTOUCH_Sensor_Calibrate 2484  
                                                __size_ofi2_putch 000A  
                                              ??_Sensor_isEnabled 00B1  
                                              ?_MTOUCH_Initialize 0001  
                                                        __Hrparam 0000  
                           __end_of_EUSART2_SetRxInterruptHandler 2704  
                          __size_of_EUSART2_SetRxInterruptHandler 000E  
                                   _EUSART2_SetRxInterruptHandler 26F6  
                                                       memcpy@tmp 00B5  
                                                        __Lrparam 0000  
                                              __CFG_BOREN$SBORDIS 000000  
                                                 ??_ringBufferLUT 00C9  
                                                    _sample_delay 0038  
                               Sensor_postAcquisitionProcess@name 00C0  
                                         ??_OSCILLATOR_Initialize 00AF  
                              __end_of_Button_Baseline_Initialize 1C2E  
                                      _Button_Baseline_Initialize 1BCE  
                                             ??_MTOUCH_Initialize 00BB  
                                                __size_of___lwdiv 0054  
                                                __size_of___lwmod 0044  
                                        ?_Button_State_NotPressed 00C9  
                                                  i2_DTR_Callback 272C  
                                          _Button_Check_AKS_Block 0E76  
                                     i2Sensor_isCalibrated@sensor 0001  
                                              Button_Service@name 00D1  
                                                      _ANSELEbits 000EAF  
                                        ?_MTOUCH_Sensor_isEnabled 0001  
                                               ?_Sensor_setActive 00AF  
                                                 ___lwdiv@divisor 00B1  
                                              ??_Sensor_setActive 00B1  
                                                 ___lwdiv@counter 00B3  
                                           ?_MTOUCH_Sensor_Enable 0001  
                                                        __ptext10 26CC  
                                                        __ptext11 2608  
                                                        __ptext20 26DA  
                                                        __ptext12 2662  
                                                        __ptext21 1C2E  
                                                        __ptext13 2756  
                                                        __ptext30 2674  
                                                        __ptext22 26E8  
                                                        __ptext14 2054  
                                                        __ptext31 1ECA  
                                                        __ptext23 26F6  
                                                        __ptext15 2148  
                                                        __ptext40 2686  
                                                        __ptext32 081A  
                                                        __ptext24 240C  
                                                        __ptext16 19A6  
                                                        __ptext41 2698  
                                                        __ptext33 25BA  
                                                        __ptext25 2738  
                                                        __ptext17 23E4  
                                                        __ptext50 1668  
                                                        __ptext42 24D4  
                                                        __ptext34 25D4  
                                                        __ptext26 275C  
                                                        __ptext18 2180  
                                                        __ptext51 225C  
                                                        __ptext43 1E7C  
                                                        __ptext35 1B06  
                                                        __ptext27 2434  
                                                        __ptext19 1E2E  
                                                        __ptext60 2092  
                                                        __ptext52 2290  
                                                        __ptext44 029C  
                                                        __ptext36 2228  
                                                        __ptext28 1D3A  
                                                        __ptext61 1F10  
                                                        __ptext53 04F0  
                                                        __ptext45 276A  
                                                        __ptext37 24FA  
                                                        __ptext29 235A  
                                                        __ptext70 2542  
                                                        __ptext62 1CE6  
                                                        __ptext54 159C  
                                                        __ptext46 068E  
                                                        __ptext38 251E  
                                                        __ptext71 17EE  
                                                        __ptext63 21B8  
                                                        __ptext55 13C4  
                                                        __ptext47 23BA  
                                                        __ptext39 14B2  
                                                        __ptext80 272C  
                                                        __ptext72 21F0  
                                                        __ptext64 1A20  
                                                        __ptext56 276C  
                                                        __ptext48 2762  
                                                        __ptext81 22C4  
                                                        __ptext73 10A8  
                                                        __ptext65 245C  
                                                        __ptext57 11BA  
                                                        __ptext49 25EE  
                                                        __ptext90 0984  
                                                        __ptext82 1896  
                                                        __ptext74 2712  
                                                        __ptext66 0E76  
                                                        __ptext58 0AD0  
                                                        __ptext91 2620  
                                                        __ptext83 0D44  
                                                        __ptext75 26AA  
                                                        __ptext67 1C8C  
                                                        __ptext59 2704  
                                                        __ptext92 1B6C  
                                                        __ptext84 2742  
                                                        __ptext68 12C4  
                                                        __ptext93 22F6  
                                                        __ptext85 210C  
                                                        __ptext77 2720  
                                                        __ptext69 1BCE  
                                                        __ptext94 2328  
                                                        __ptext86 1F96  
                                                        __ptext78 2484  
                                                        __ptext95 26BC  
                                                        __ptext87 1D8C  
                                                        __ptext79 276E  
                                                        __ptext96 0C10  
                                                        __ptext88 274C  
                                                        __ptext97 24AC  
                                                        __ptext89 1A96  
                                                        __ptext98 2638  
                                                        __ptext99 2566  
                                       i2_Sensor_scheduleNextScan 0984  
                                                      _IOCBF2_ISR 2484  
                                       __end_of_MTOUCH_Initialize 2674  
                                       ??_Sensor_RawSample_Update 00B8  
                                     __size_of_EUSART2_Initialize 005E  
                                                        _freq_hop 00E4  
                                      __size_of_Sensor_setSampled 0010  
                                               _currentScanSensor 003B  
                                                   __size_of_main 0042  
                                 __end_of_MTOUCH_Sensor_SampleAll 1F10  
                                            __CFG_WDTCWS$WDTCWS_7 000000  
                                      Sensor_autoCalibration@name 000D  
                                    __size_ofi2_Sensor_SetTrisBit 0062  
                                   MTOUCH_needReburst@needReburst 00AF  
                                              __CFG_BORV$VBOR_190 000000  
                                                      _RC2STAbits 000EF5  
                                                        int$flags 0050  
                                          __end_ofi2_DTR_Callback 2738  
                              __size_of_Button_State_Initializing 00CC  
                                                       printf@val 00C4  
                                 __size_of_Button_Baseline_Update 0100  
                                    ?_MTOUCH_Button_InitializeAll 0001  
                                    ?_MTOUCH_Sensor_InitializeAll 0001  
             Button_Check_AKS_Block@surplus_deviation_this_button 00BB  
                                                   _mtouch_button 0140  
                                                      _INTCONbits 000FF2  
                                                   _mtouch_sensor 0082  
                                                        memcpy@d1 00AF  
                                                        memcpy@s1 00B1  
                                          _DTR_Callback$intlevel0 26B0  
                                 __end_of_MTOUCH_Button_isPressed 21F0  
                                        ??_Sensor_setSamplePeriod 00AF  
                                      ??_MTOUCH_Sensor_isSampling 00AF  
                                          ??_INTERRUPT_Initialize 00AF  
                                                     _MTOUCH_Tick 275C  
                                          ?_Button_Reading_Update 00B6  
                                Button_Deviation_Update@deviation 00B7  
                                    MTOUCH_Button_Initialize@name 00B0  
                               __size_of_MTOUCH_Button_Initialize 0076  
                                                        intlevel2 0000  
                                       ?_MTOUCH_Button_Initialize 0001  
                                                ___lwmod@dividend 00B6  
                                         ?_PIN_MANAGER_Initialize 0001  
                               __size_of_ADCC_ThresholdISR_mTouch 000A  
                                     ??_Sensor_setCalibratAcqTime 0003  
                                       ?_ADCC_ThresholdISR_mTouch 0001  
                                               __CFG_CLKOUTEN$OFF 000000  
                             Button_Unscaled_Deviation_Get@button 00AF  
                                     ?_MTOUCH_Sensor_isCalibrated 0001  
                Sensor_FrequencyHopping_Autotune_Process@variance 00BA  
                                    Sensor_scheduleNextScan@state 00B3  
                                                ??_mTouchCallback 00C8  
                                     __size_of_Button_Tick_helper 0052  
                                 __end_of_Button_State_NotPressed 068E  
                                                        printf@ap 00C0  
                                         _Sensor_FrequencyHopping 24FA  
                                                 ?i2_DTR_Callback 0001  
                                         ??_MTOUCH_Sensor_Service 000E  
                                  ?_EUSART2_SetRxInterruptHandler 00AF  
                                    __end_of_Sensor_Sampled_Reset 2686  
                                 __end_of_MTOUCH_Sensor_isEnabled 225C  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                          __size_of_EUSART2_Write 003E  
                                             _EUSART2_Receive_ISR 1896  
                               i2Sensor_scheduleNextScan@skipScan 0006  
                                 Sensor_scheduleNextScan@skipScan 00B4  
                          __end_of_INTERRUPT_InterruptManagerHigh 00EE  
                         __size_of_INTERRUPT_InterruptManagerHigh 00E6  
                                  _INTERRUPT_InterruptManagerHigh 0008  
                                                      _RX2PPSbits 000E11  
                                   ??_MTOUCH_Button_InitializeAll 00BA  
                                                        strcmp@s1 00AF  
                                                        strcmp@s2 00B1  
                                               ringBufferLUT@line 00C7  
                                        ??_Button_DefaultCallback 00C8  
                                                 ___lwmod@divisor 00B8  
                                   ??_MTOUCH_Sensor_InitializeAll 00BA  
                          __end_of_IOCBF2_DefaultInterruptHandler 2770  
                         __size_of_IOCBF2_DefaultInterruptHandler 0002  
                                  _IOCBF2_DefaultInterruptHandler 276E  
                                __size_of_MTOUCH_Sensor_Calibrate 0028  
                                                        strlen@cp 00B3  
                                                 ___lwmod@counter 00BA  
                                          ??_MTOUCH_Sensor_Enable 00AF  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 00B9  
                             i2Sensor_isCalibratingAcqTime@sensor 0001  
                               Sensor_isCalibratingAcqTime@sensor 00AF  
                                    __size_of_Sensor_isCalibrated 001A  
                                        ??_Sensor_DefaultCallback 00AF  
                                    __end_of_Sensor_setCalibrated 2584  
                            __end_of_Button_Reading_Update_Helper 1896  
                           __size_of_Button_Reading_Update_Helper 00A8  
                                    _Button_Reading_Update_Helper 17EE  
                                                      _TX2STAbits 000EF6  
                               __size_of_MTOUCH_Button_ServiceAll 001A  
                                       ?_MTOUCH_Button_ServiceAll 0001  
                                   Button_State_NotPressed@button 00C9  
                                                     ?_IOCBF2_ISR 0001  
                                      __size_of_MTOUCH_Initialize 0012  
                                  __end_of_PIN_MANAGER_Initialize 17EE  
                                          _Button_Baseline_Update 12C4  
                                 ??_EUSART2_SetTxInterruptHandler 00B2  
                                            ?_EUSART2_Receive_ISR 0001  
                                        ?_Sensor_scheduleNextScan 0001  
                                                 _PIN_MANAGER_IOC 2720  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 00AF  
                                     MTOUCH_Button_isPressed@name 00B0  
                                      ??_MTOUCH_Sensor_wasSampled 00AF  
                               _EUSART2_RxDefaultInterruptHandler 0042  
                                           i2_Sensor_isCalibrated 2620  
